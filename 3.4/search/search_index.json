{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"acl/","title":"Access Control Lists (ACL)","text":"<p>Phalcon\\Acl provides an easy and lightweight management of ACLs as well as the permissions attached to them. Access Control Lists (ACL) allow an application to control access to its areas and the underlying objects from requests. You are encouraged to read more about the ACL methodology so as to be familiar with its concepts.</p> <p>In summary, ACLs have roles and resources. Resources are objects which abide by the permissions defined to them by the ACLs. Roles are objects that request access to resources and can be allowed or denied access by the ACL mechanism.</p>"},{"location":"acl/#creating-an-acl","title":"Creating an ACL","text":"<p>This component is designed to initially work in memory. This provides ease of use and speed in accessing every aspect of the list. The Phalcon\\Acl constructor takes as its first parameter an adapter used to retrieve the information related to the control list. An example using the memory adapter is below:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Adapter\\Memory as AclList;\n\n$acl = new AclList();\n</code></pre> <p>By default Phalcon\\Acl allows access to action on resources that have not yet been defined. To increase the security level of the access list we can define a <code>deny</code> level as a default access level.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl;\n\n// Default action is deny access\n$acl-&gt;setDefaultAction(\n    Acl::DENY\n);\n</code></pre>"},{"location":"acl/#adding-roles-to-the-acl","title":"Adding Roles to the ACL","text":"<p>A role is an object that can or cannot access certain resources in the access list. As an example, we will define roles as groups of people in an organization. The Phalcon\\Acl\\Role class is available to create roles in a more structured way. Let's add some roles to our recently created list:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Role;\n\n// Create some roles.\n// The first parameter is the name, the second parameter is an optional description.\n$roleAdmins = new Role('Administrators', 'Super-User role');\n$roleGuests = new Role('Guests');\n\n// Add 'Guests' role to ACL\n$acl-&gt;addRole($roleGuests);\n\n// Add 'Designers' role to ACL without a Phalcon\\Acl\\Role\n$acl-&gt;addRole('Designers');\n</code></pre> <p>As you can see, roles are defined directly without using an instance.</p>"},{"location":"acl/#adding-resources","title":"Adding Resources","text":"<p>Resources are objects where access is controlled. Normally in MVC applications resources refer to controllers. Although this is not mandatory, the Phalcon\\Acl\\Resource class can be used in defining resources. It's important to add related actions or operations to a resource so that the ACL can understand what it should to control.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Resource;\n\n// Define the 'Customers' resource\n$customersResource = new Resource('Customers');\n\n// Add 'customers' resource with a couple of operations\n\n$acl-&gt;addResource(\n    $customersResource,\n    'search'\n);\n\n$acl-&gt;addResource(\n    $customersResource,\n    [\n        'create',\n        'update',\n    ]\n);\n</code></pre>"},{"location":"acl/#defining-access-controls","title":"Defining Access Controls","text":"<p>Now that we have roles and resources, it's time to define the ACL (i.e. which roles can access which resources). This part is very important especially taking into consideration your default access level <code>allow</code> or <code>deny</code>.</p> <pre><code>&lt;?php\n\n// Set access level for roles into resources\n\n$acl-&gt;allow('Guests', 'Customers', 'search');\n\n$acl-&gt;allow('Guests', 'Customers', 'create');\n\n$acl-&gt;deny('Guests', 'Customers', 'update');\n</code></pre> <p>The <code>allow()</code> method designates that a particular role has granted access to a particular resource. The <code>deny()</code> method does the opposite.</p>"},{"location":"acl/#querying-an-acl","title":"Querying an ACL","text":"<p>Once the list has been completely defined. We can query it to check if a role has a given permission or not.</p> <pre><code>&lt;?php\n\n// Check whether role has access to the operations\n\n// Returns 0\n$acl-&gt;isAllowed('Guests', 'Customers', 'edit');\n\n// Returns 1\n$acl-&gt;isAllowed('Guests', 'Customers', 'search');\n\n// Returns 1\n$acl-&gt;isAllowed('Guests', 'Customers', 'create');\n</code></pre>"},{"location":"acl/#function-based-access","title":"Function based access","text":"<p>Also you can add as 4th parameter your custom function which must return boolean value. It will be called when you use <code>isAllowed()</code> method. You can pass parameters as associative array to <code>isAllowed()</code> method as 4th argument where key is parameter name in our defined function.</p> <pre><code>&lt;?php\n// Set access level for role into resources with custom function\n$acl-&gt;allow(\n    'Guests',\n    'Customers',\n    'search',\n    function ($a) {\n        return $a % 2 === 0;\n    }\n);\n\n// Check whether role has access to the operation with custom function\n\n// Returns true\n$acl-&gt;isAllowed(\n    'Guests',\n    'Customers',\n    'search',\n    [\n        'a' =&gt; 4,\n    ]\n);\n\n// Returns false\n$acl-&gt;isAllowed(\n    'Guests',\n    'Customers',\n    'search',\n    [\n        'a' =&gt; 3,\n    ]\n);\n</code></pre> <p>Also if you don't provide any parameters in <code>isAllowed()</code> method then default behaviour will be <code>Acl::ALLOW</code>. You can change it by using method <code>setNoArgumentsDefaultAction()</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl;\n\n// Set access level for role into resources with custom function\n$acl-&gt;allow(\n    'Guests',\n    'Customers',\n    'search',\n    function ($a) {\n        return $a % 2 === 0;\n    }\n);\n\n// Check whether role has access to the operation with custom function\n\n// Returns true\n$acl-&gt;isAllowed(\n    'Guests',\n    'Customers',\n    'search'\n);\n\n// Change no arguments default action\n$acl-&gt;setNoArgumentsDefaultAction(\n    Acl::DENY\n);\n\n// Returns false\n$acl-&gt;isAllowed(\n    'Guests',\n    'Customers',\n    'search'\n);\n</code></pre>"},{"location":"acl/#objects-as-role-name-and-resource-name","title":"Objects as role name and resource name","text":"<p>You can pass objects as <code>roleName</code> and <code>resourceName</code>. Your classes must implement Phalcon\\Acl\\RoleAware for <code>roleName</code> and Phalcon\\Acl\\ResourceAware for <code>resourceName</code>.</p> <p>Our <code>UserRole</code> class</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\RoleAware;\n\n// Create our class which will be used as roleName\nclass UserRole implements RoleAware\n{\n    protected $id;\n\n    protected $roleName;\n\n    public function __construct($id, $roleName)\n    {\n        $this-&gt;id       = $id;\n        $this-&gt;roleName = $roleName;\n    }\n\n    public function getId()\n    {\n        return $this-&gt;id;\n    }\n\n    // Implemented function from RoleAware Interface\n    public function getRoleName()\n    {\n        return $this-&gt;roleName;\n    }\n}\n</code></pre> <p>And our <code>ModelResource</code> class</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\ResourceAware;\n\n// Create our class which will be used as resourceName\nclass ModelResource implements ResourceAware\n{\n    protected $id;\n\n    protected $resourceName;\n\n    protected $userId;\n\n    public function __construct($id, $resourceName, $userId)\n    {\n        $this-&gt;id           = $id;\n        $this-&gt;resourceName = $resourceName;\n        $this-&gt;userId       = $userId;\n    }\n\n    public function getId()\n    {\n        return $this-&gt;id;\n    }\n\n    public function getUserId()\n    {\n        return $this-&gt;userId;\n    }\n\n    // Implemented function from ResourceAware Interface\n    public function getResourceName()\n    {\n        return $this-&gt;resourceName;\n    }\n}\n</code></pre> <p>Then you can use them in <code>isAllowed()</code> method.</p> <pre><code>&lt;?php\n\nuse UserRole;\nuse ModelResource;\n\n// Set access level for role into resources\n$acl-&gt;allow('Guests', 'Customers', 'search');\n$acl-&gt;allow('Guests', 'Customers', 'create');\n$acl-&gt;deny('Guests', 'Customers', 'update');\n\n// Create our objects providing roleName and resourceName\n\n$customer = new ModelResource(\n    1,\n    'Customers',\n    2\n);\n\n$designer = new UserRole(\n    1,\n    'Designers'\n);\n\n$guest = new UserRole(\n    2,\n    'Guests'\n);\n\n$anotherGuest = new UserRole(\n    3,\n    'Guests'\n);\n\n// Check whether our user objects have access to the operation on model object\n\n// Returns false\n$acl-&gt;isAllowed(\n    $designer,\n    $customer,\n    'search'\n);\n\n// Returns true\n$acl-&gt;isAllowed(\n    $guest,\n    $customer,\n    'search'\n);\n\n// Returns true\n$acl-&gt;isAllowed(\n    $anotherGuest,\n    $customer,\n    'search'\n);\n</code></pre> <p>Also you can access those objects in your custom function in <code>allow()</code> or <code>deny()</code>. They are automatically bind to parameters by type in function.</p> <pre><code>&lt;?php\n\nuse UserRole;\nuse ModelResource;\n\n// Set access level for role into resources with custom function\n$acl-&gt;allow(\n    'Guests',\n    'Customers',\n    'search',\n    function (UserRole $user, ModelResource $model) { // User and Model classes are necessary\n        return $user-&gt;getId == $model-&gt;getUserId();\n    }\n);\n\n$acl-&gt;allow(\n    'Guests',\n    'Customers',\n    'create'\n);\n\n$acl-&gt;deny(\n    'Guests',\n    'Customers',\n    'update'\n);\n\n// Create our objects providing roleName and resourceName\n\n$customer = new ModelResource(\n    1,\n    'Customers',\n    2\n);\n\n$designer = new UserRole(\n    1,\n    'Designers'\n);\n\n$guest = new UserRole(\n    2,\n    'Guests'\n);\n\n$anotherGuest = new UserRole(\n    3,\n    'Guests'\n);\n\n// Check whether our user objects have access to the operation on model object\n\n// Returns false\n$acl-&gt;isAllowed(\n    $designer,\n    $customer,\n    'search'\n);\n\n// Returns true\n$acl-&gt;isAllowed(\n    $guest,\n    $customer,\n    'search'\n);\n\n// Returns false\n$acl-&gt;isAllowed(\n    $anotherGuest,\n    $customer,\n    'search'\n);\n</code></pre> <p>You can still add any custom parameters to function and pass associative array in <code>isAllowed()</code> method. Also order doesn't matter.</p>"},{"location":"acl/#roles-inheritance","title":"Roles Inheritance","text":"<p>You can build complex role structures using the inheritance that Phalcon\\Acl\\Role provides. Roles can inherit from other roles, thus allowing access to supersets or subsets of resources. To use role inheritance, you need to pass the inherited role as the second parameter of the method call, when adding that role in the list.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Role;\n\n// ...\n\n// Create some roles\n\n$roleAdmins = new Role('Administrators', 'Super-User role');\n\n$roleGuests = new Role('Guests');\n\n// Add 'Guests' role to ACL\n$acl-&gt;addRole($roleGuests);\n\n// Add 'Administrators' role inheriting from 'Guests' its accesses\n$acl-&gt;addRole($roleAdmins, $roleGuests);\n</code></pre>"},{"location":"acl/#setup-relationships-after-adding-roles","title":"Setup relationships after adding roles","text":"<p>Or you may prefer to add all of your roles together and then define the inheritance relationships afterwards.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Role;\n\n// Create some roles\n$roleAdmins = new Role('Administrators', 'Super-User role');\n$roleGuests = new Role('Guests');\n\n// Add Roles to ACL\n$acl-&gt;addRole($roleGuests);\n$acl-&gt;addRole($roleAdmins);\n\n// Have 'Administrators' role inherit from 'Guests' its accesses\n$acl-&gt;addInherit($roleAdmins, $roleGuests);\n</code></pre>"},{"location":"acl/#serializing-acl-lists","title":"Serializing ACL lists","text":"<p>To improve performance Phalcon\\Acl instances can be serialized and stored in APC, session, text files or a database table so that they can be loaded at will without having to redefine the whole list. You can do that as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Adapter\\Memory as AclList;\n\n// ...\n\n// Check whether ACL data already exist\nif (!is_file('app/security/acl.data')) {\n    $acl = new AclList();\n\n    // ... Define roles, resources, access, etc\n\n    // Store serialized list into plain file\n    file_put_contents(\n        'app/security/acl.data',\n        serialize($acl)\n    );\n} else {\n    // Restore ACL object from serialized file\n    $acl = unserialize(\n        file_get_contents('app/security/acl.data')\n    );\n}\n\n// Use ACL list as needed\nif ($acl-&gt;isAllowed('Guests', 'Customers', 'edit')) {\n    echo 'Access granted!';\n} else {\n    echo 'Access denied :(';\n}\n</code></pre> <p>It's recommended to use the Memory adapter during development and use one of the other adapters in production.</p>"},{"location":"acl/#events","title":"Events","text":"<p>Phalcon\\Acl is able to send events to an <code>EventsManager</code> if it's present. Events are triggered using the type 'acl'. Some events when returning boolean false could stop the active operation. The following events are supported:</p> Event Name Triggered Can stop operation? beforeCheckAccess Triggered before checking if a role/resource has access Yes afterCheckAccess Triggered after checking if a role/resource has access No <p>The following example demonstrates how to attach listeners to this component:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Adapter\\Memory as AclList;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n// ...\n\n// Create an event manager\n$eventsManager = new EventsManager();\n\n// Attach a listener for type 'acl'\n$eventsManager-&gt;attach(\n    'acl:beforeCheckAccess',\n    function (Event $event, $acl) {\n        echo $acl-&gt;getActiveRole();\n\n        echo $acl-&gt;getActiveResource();\n\n        echo $acl-&gt;getActiveAccess();\n    }\n);\n\n$acl = new AclList();\n\n// Setup the $acl\n// ...\n\n// Bind the eventsManager to the ACL component\n$acl-&gt;setEventsManager($eventsManager);\n</code></pre>"},{"location":"acl/#implementing-your-own-adapters","title":"Implementing your own adapters","text":"<p>The Phalcon\\Acl\\AdapterInterface interface must be implemented in order to create your own ACL adapters or extend the existing ones.</p>"},{"location":"annotations/","title":"Annotations Parser","text":"<p>It is the first time that an annotations parser component is written in C for the PHP world. <code>Phalcon\\Annotations</code> is a general purpose component that provides ease of parsing and caching annotations in PHP classes to be used in applications.</p> <p>Annotations are read from docblocks in classes, methods and properties. An annotation can be placed at any position in the docblock:</p> <pre><code>&lt;?php\n\n/**\n * This is the class description\n *\n * @AmazingClass(true)\n */\nclass Example\n{\n    /**\n     * This a property with a special feature\n     *\n     * @SpecialFeature\n     */\n    protected $someProperty;\n\n    /**\n     * This is a method\n     *\n     * @SpecialFeature\n     */\n    public function someMethod()\n    {\n        // ...\n    }\n}\n</code></pre> <p>An annotation has the following syntax:</p> <pre><code>/**\n * @Annotation-Name\n * @Annotation-Name(param1, param2, ...)\n */\n</code></pre> <p>Also, an annotation can be placed at any part of a docblock:</p> <pre><code>&lt;?php\n\n/**\n * This a property with a special feature\n *\n * @SpecialFeature\n *\n * More comments\n *\n * @AnotherSpecialFeature(true)\n */\n</code></pre> <p>The parser is highly flexible, the following docblock is valid:</p> <pre><code>&lt;?php\n\n/**\n * This a property with a special feature @SpecialFeature({\nsomeParameter='the value', false\n\n })  More comments @AnotherSpecialFeature(true) @MoreAnnotations\n **/\n</code></pre> <p>However, to make the code more maintainable and understandable it is recommended to place annotations at the end of the docblock:</p> <pre><code>&lt;?php\n\n/**\n * This a property with a special feature\n * More comments\n *\n * @SpecialFeature({someParameter='the value', false})\n * @AnotherSpecialFeature(true)\n */\n</code></pre>"},{"location":"annotations/#factory","title":"Factory","text":"<p>There are many annotations adapters available (see Adapters). The one you use will depend on the needs of your application. The traditional way of instantiating such an adapter is as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Annotations\\Adapter\\Memory as MemoryAdapter;\n\n$reader = new MemoryAdapter();\n\n// .....\n</code></pre> <p>However you can also utilize the factory method to achieve the same thing:</p> <pre><code>&lt;?php\n\n\nuse Phalcon\\Annotations\\Factory;\n\n$options = [\n    'prefix'   =&gt; 'annotations',\n    'lifetime' =&gt; '3600',\n    'adapter'  =&gt; 'memory',      // Load the Memory adapter\n];\n\n$annotations = Factory::load($options);\n</code></pre> <p>The Factory loader provides more flexibility when dealing with instantiating annotations adapters from configuration files. </p>"},{"location":"annotations/#reading-annotations","title":"Reading Annotations","text":"<p>A reflector is implemented to easily get the annotations defined on a class using an object-oriented interface:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Annotations\\Adapter\\Memory as MemoryAdapter;\n\n$reader = new MemoryAdapter();\n\n// Reflect the annotations in the class Example\n$reflector = $reader-&gt;get('Example');\n\n// Read the annotations in the class' docblock\n$annotations = $reflector-&gt;getClassAnnotations();\n\n// Traverse the annotations\nforeach ($annotations as $annotation) {\n    // Print the annotation name\n    echo $annotation-&gt;getName(), PHP_EOL;\n\n    // Print the number of arguments\n    echo $annotation-&gt;numberArguments(), PHP_EOL;\n\n    // Print the arguments\n    print_r($annotation-&gt;getArguments());\n}\n</code></pre> <p>The annotation reading process is very fast, however, for performance reasons it is recommended to store the parsed annotations using an adapter. Adapters cache the processed annotations avoiding the need of parse the annotations again and again.</p> <p>Phalcon\\Annotations\\Adapter\\Memory was used in the above example. This adapter only caches the annotations while the request is running and for this reason the adapter is more suitable for development. There are other adapters to swap out when the application is in production stage.</p>"},{"location":"annotations/#types-of-annotations","title":"Types of Annotations","text":"<p>Annotations may have parameters or not. A parameter could be a simple literal (strings, number, boolean, null), an array, a hashed list or other annotation:</p> <pre><code>&lt;?php\n\n/**\n * Simple Annotation\n *\n * @SomeAnnotation\n */\n\n/**\n * Annotation with parameters\n *\n * @SomeAnnotation('hello', 'world', 1, 2, 3, false, true)\n */\n\n/**\n * Annotation with named parameters\n *\n * @SomeAnnotation(first='hello', second='world', third=1)\n * @SomeAnnotation(first: 'hello', second: 'world', third: 1)\n */\n\n/**\n * Passing an array\n *\n * @SomeAnnotation([1, 2, 3, 4])\n * @SomeAnnotation({1, 2, 3, 4})\n */\n\n/**\n * Passing a hash as parameter\n *\n * @SomeAnnotation({first=1, second=2, third=3})\n * @SomeAnnotation({'first'=1, 'second'=2, 'third'=3})\n * @SomeAnnotation({'first': 1, 'second': 2, 'third': 3})\n * @SomeAnnotation(['first': 1, 'second': 2, 'third': 3])\n */\n\n/**\n * Nested arrays/hashes\n *\n * @SomeAnnotation({'name'='SomeName', 'other'={\n *     'foo1': 'bar1', 'foo2': 'bar2', {1, 2, 3},\n * }})\n */\n\n/**\n * Nested Annotations\n *\n * @SomeAnnotation(first=@AnotherAnnotation(1, 2, 3))\n */\n</code></pre>"},{"location":"annotations/#practical-usage","title":"Practical Usage","text":"<p>Next we will explain some practical examples of annotations in PHP applications:</p>"},{"location":"annotations/#cache-enabler-with-annotations","title":"Cache Enabler with Annotations","text":"<p>Let's pretend we've created the following controller and you want to create a plugin that automatically starts the cache if the last action executed is marked as cacheable. First off all, we register a plugin in the Dispatcher service to be notified when a route is executed:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di['dispatcher'] = function () {\n    $eventsManager = new EventsManager();\n\n    // Attach the plugin to 'dispatch' events\n    $eventsManager-&gt;attach(\n        'dispatch',\n        new CacheEnablerPlugin()\n    );\n\n    $dispatcher = new MvcDispatcher();\n\n    $dispatcher-&gt;setEventsManager($eventsManager);\n\n    return $dispatcher;\n};\n</code></pre> <p><code>CacheEnablerPlugin</code> is a plugin that intercepts every action executed in the dispatcher enabling the cache if needed:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\User\\Plugin;\n\n/**\n * Enables the cache for a view if the latest\n * executed action has the annotation @Cache\n */\nclass CacheEnablerPlugin extends Plugin\n{\n    /**\n     * This event is executed before every route is executed in the dispatcher\n     */\n    public function beforeExecuteRoute(Event $event, Dispatcher $dispatcher)\n    {\n        // Parse the annotations in the method currently executed\n        $annotations = $this-&gt;annotations-&gt;getMethod(\n            $dispatcher-&gt;getControllerClass(),\n            $dispatcher-&gt;getActiveMethod()\n        );\n\n        // Check if the method has an annotation 'Cache'\n        if ($annotations-&gt;has('Cache')) {\n            // The method has the annotation 'Cache'\n            $annotation = $annotations-&gt;get('Cache');\n\n            // Get the lifetime\n            $lifetime = $annotation-&gt;getNamedParameter('lifetime');\n\n            $options = [\n                'lifetime' =&gt; $lifetime,\n            ];\n\n            // Check if there is a user defined cache key\n            if ($annotation-&gt;hasNamedParameter('key')) {\n                $options['key'] = $annotation-&gt;getNamedParameter('key');\n            }\n\n            // Enable the cache for the current method\n            $this-&gt;view-&gt;cache($options);\n        }\n    }\n}\n</code></pre> <p>Now, we can use the annotation in a controller:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass NewsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    /**\n     * This is a comment\n     *\n     * @Cache(lifetime=86400)\n     */\n    public function showAllAction()\n    {\n        $this-&gt;view-&gt;article = Articles::find();\n    }\n\n    /**\n     * This is a comment\n     *\n     * @Cache(key='my-key', lifetime=86400)\n     */\n    public function showAction($slug)\n    {\n        $this-&gt;view-&gt;article = Articles::findFirstByTitle($slug);\n    }\n}\n</code></pre>"},{"location":"annotations/#privatepublic-areas-with-annotations","title":"Private/Public areas with Annotations","text":"<p>You can use annotations to tell the ACL which controllers belong to the administrative areas:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl;\nuse Phalcon\\Acl\\Role;\nuse Phalcon\\Acl\\Resource;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\User\\Plugin;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Acl\\Adapter\\Memory as AclList;\n\n/**\n * This is the security plugin which controls that users only have access to the modules they're assigned to\n */\nclass SecurityAnnotationsPlugin extends Plugin\n{\n    /**\n     * This action is executed before execute any action in the application\n     *\n     * @param Event $event\n     * @param Dispatcher $dispatcher\n     *\n     * @return bool\n     */\n    public function beforeDispatch(Event $event, Dispatcher $dispatcher)\n    {\n        // Possible controller class name\n        $controllerName = $dispatcher-&gt;getControllerClass();\n\n        // Possible method name\n        $actionName = $dispatcher-&gt;getActiveMethod();\n\n        // Get annotations in the controller class\n        $annotations = $this-&gt;annotations-&gt;get($controllerName);\n\n        // The controller is private?\n        if ($annotations-&gt;getClassAnnotations()-&gt;has('Private')) {\n            // Check if the session variable is active?\n            if (!$this-&gt;session-&gt;get('auth')) {\n\n                // The user is no logged redirect to login\n                $dispatcher-&gt;forward(\n                    [\n                        'controller' =&gt; 'session',\n                        'action'     =&gt; 'login',\n                    ]\n                );\n\n                return false;\n            }\n        }\n\n        // Continue normally\n        return true;\n    }\n}\n</code></pre>"},{"location":"annotations/#annotations-adapters","title":"Annotations Adapters","text":"<p>This component makes use of adapters to cache or no cache the parsed and processed annotations thus improving the performance or providing facilities to development/testing:</p> Class Description Phalcon\\Annotations\\Adapter\\Memory The annotations are cached only in memory. When the request ends the cache is cleaned reloading the annotations in each request. This adapter is suitable for a development stage Phalcon\\Annotations\\Adapter\\Files Parsed and processed annotations are stored permanently in PHP files improving performance. This adapter must be used together with a bytecode cache. Phalcon\\Annotations\\Adapter\\Apc Parsed and processed annotations are stored permanently in the APC cache improving performance. This is the faster adapter Phalcon\\Annotations\\Adapter\\Xcache Parsed and processed annotations are stored permanently in the XCache cache improving performance. This is a fast adapter too"},{"location":"annotations/#implementing-your-own-adapters","title":"Implementing your own adapters","text":"<p>The Phalcon\\Annotations\\AdapterInterface interface must be implemented in order to create your own annotations adapters or extend the existing ones.</p>"},{"location":"annotations/#external-resources","title":"External Resources","text":"<ul> <li>Tutorial: Creating a custom model's initializer with Annotations</li> </ul>"},{"location":"application-cli/","title":"Creating a Command Line (CLI) Application","text":"<p>CLI applications are executed from the command line. They are useful to create cron jobs, scripts, command utilities and more.</p>"},{"location":"application-cli/#structure","title":"Structure","text":"<p>A minimal structure of a CLI application will look like this:</p> <ul> <li><code>app/config/config.php</code></li> <li><code>app/tasks/MainTask.php</code></li> <li><code>app/cli.php</code> &lt;-- main bootstrap file</li> </ul>"},{"location":"application-cli/#creating-a-bootstrap","title":"Creating a Bootstrap","text":"<p>As in regular MVC applications, a bootstrap file is used to bootstrap the application. Instead of the index.php bootstrapper in web applications, we use a cli.php file for bootstrapping the application.</p> <p>Below is a sample bootstrap that is being used for this example.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault\\Cli as CliDI;\nuse Phalcon\\Cli\\Console as ConsoleApp;\nuse Phalcon\\Loader;\n\n// Using the CLI factory default services container\n$di = new CliDI();\n\n/**\n * Register the autoloader and tell it to register the tasks directory\n */\n$loader = new Loader();\n\n$loader-&gt;registerDirs(\n    [\n        __DIR__ . '/tasks',\n    ]\n);\n\n$loader-&gt;register();\n\n// Load the configuration file (if any)\n$configFile = __DIR__ . '/config/config.php';\n\nif (is_readable($configFile)) {\n    $config = include $configFile;\n\n    $di-&gt;set('config', $config);\n}\n\n// Create a console application\n$console = new ConsoleApp();\n\n$console-&gt;setDI($di);\n\n/**\n * Process the console arguments\n */\n$arguments = [];\n\nforeach ($argv as $k =&gt; $arg) {\n    if ($k === 1) {\n        $arguments['task'] = $arg;\n    } elseif ($k === 2) {\n        $arguments['action'] = $arg;\n    } elseif ($k &gt;= 3) {\n        $arguments['params'][] = $arg;\n    }\n}\n\ntry {\n    // Handle incoming arguments\n    $console-&gt;handle($arguments);\n} catch (\\Phalcon\\Exception $e) {\n    // Do Phalcon related stuff here\n    // ..\n    fwrite(STDERR, $e-&gt;getMessage() . PHP_EOL);\n    exit(1);\n} catch (\\Throwable $throwable) {\n    fwrite(STDERR, $throwable-&gt;getMessage() . PHP_EOL);\n    exit(1);\n} catch (\\Exception $exception) {\n    fwrite(STDERR, $exception-&gt;getMessage() . PHP_EOL);\n    exit(1);\n}\n</code></pre> <p>This piece of code can be run using:</p> <pre><code>php app/cli.php\n</code></pre>"},{"location":"application-cli/#tasks","title":"Tasks","text":"<p>Tasks work similar to controllers. Any CLI application needs at least a MainTask and a mainAction and every task needs to have a mainAction which will run if no action is given explicitly.</p> <p>Below is an example of the <code>app/tasks/MainTask.php</code> file:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cli\\Task;\n\nclass MainTask extends Task\n{\n    public function mainAction()\n    {\n        echo 'This is the default task and the default action' . PHP_EOL;\n    }\n}\n</code></pre>"},{"location":"application-cli/#processing-action-parameters","title":"Processing action parameters","text":"<p>It's possible to pass parameters to actions, the code for this is already present in the sample bootstrap.</p> <p>If you run the application with the following parameters and action:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cli\\Task;\n\nclass MainTask extends Task\n{\n    public function mainAction()\n    {\n        echo 'This is the default task and the default action' . PHP_EOL;\n    }\n\n    /**\n     * @param array $params\n     */\n    public function testAction(array $params)\n    {\n        echo sprintf('hello %s', $params[0]);\n\n        echo PHP_EOL;\n\n        echo sprintf('best regards, %s', $params[1]);\n\n        echo PHP_EOL;\n    }\n}\n</code></pre> <p>We can then run the following command:</p> <pre><code>php app/cli.php main test world universe\n\nhello world\nbest regards, universe\n</code></pre>"},{"location":"application-cli/#running-tasks-in-a-chain","title":"Running tasks in a chain","text":"<p>It's also possible to run tasks in a chain if it's required. To accomplish this you must add the console itself to the DI:</p> <pre><code>&lt;?php\n\n$di-&gt;setShared(\"console\", $console);\n\ntry {\n    // Handle incoming arguments\n    $console-&gt;handle($arguments);\n} catch (\\Phalcon\\Exception $e) {\n    // Do Phalcon related stuff here\n    // ..\n    fwrite(STDERR, $e-&gt;getMessage() . PHP_EOL);\n    exit(1);\n} catch (\\Throwable $throwable) {\n    fwrite(STDERR, $throwable-&gt;getMessage() . PHP_EOL);\n    exit(1);\n} catch (\\Exception $exception) {\n    fwrite(STDERR, $exception-&gt;getMessage() . PHP_EOL);\n    exit(1);\n}\n</code></pre> <p>Then you can use the console inside of any task. Below is an example of a modified MainTask.php: <pre><code>&lt;?php\n\nuse Phalcon\\Cli\\Task;\n\nclass MainTask extends Task\n{\n    public function mainAction()\n    {\n        echo \"This is the default task and the default action\" . PHP_EOL;\n\n        $this-&gt;console-&gt;handle(\n            [\n                \"task\"   =&gt; \"main\",\n                \"action\" =&gt; \"test\",\n            ]\n        );\n    }\n\n    public function testAction()\n    {\n        echo \"I will get printed too!\" . PHP_EOL;\n    }\n}\n</code></pre></p> <p>However, it's a better idea to extend Phalcon\\Cli\\Task and implement this kind of logic there.</p>"},{"location":"application-micro/","title":"Micro Applications","text":"<p>Phalcon offers a very 'thin' application, so that you can create <code>Micro</code> applications with minimal PHP code and overhead. Micro applications are suitable for small applications that will have very low overhead. Such applications are usually API ones, prototypes etc.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n\n$app-&gt;get(\n    '/orders/display/{name}',\n    function ($name) {\n        echo \"&lt;h1&gt;This is order: {$name}!&lt;/h1&gt;\";\n    }\n);\n\n$app-&gt;handle();\n</code></pre>"},{"location":"application-micro/#creating-a-micro-application","title":"Creating a Micro Application","text":"<p>The Phalcon\\Mvc\\Micro class is the one responsible for creating a Micro application.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n</code></pre>"},{"location":"application-micro/#routing","title":"Routing","text":"<p>Defining routes in a Phalcon\\Mvc\\Micro application is very easy. Routes are defined as follows:</p> <pre><code>   Application -&gt; (method/verb) -&gt; (route url/regex, callable PHP function)\n</code></pre>"},{"location":"application-micro/#setup","title":"Setup","text":"<p>Routing is handled by the Phalcon\\Mvc\\Router object. [Info]</p> <p>NOTE</p> <p>Routes must always start with <code>/</code></p> <p>Usually, the starting route in an application is the route <code>/</code>, and in most cases it is accessed via the GET HTTP method:</p> <pre><code>&lt;?php\n\n// This is the start route\n$app-&gt;get(\n    '/',\n    function () {\n        echo '&lt;h1&gt;Welcome!&lt;/h1&gt;';\n    }\n);\n</code></pre>"},{"location":"application-micro/#application-object","title":"Application object","text":"<p>Routes can be set using the Phalcon\\Mvc\\Micro application object as follows:</p> <pre><code>use Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n\n// Matches a GET request\n$app-&gt;get(\n    '/orders/display/{name}',\n    function ($name) {\n        echo \"&lt;h1&gt;This is order: {$name}!&lt;/h1&gt;\";\n    }\n);\n</code></pre>"},{"location":"application-micro/#router-object","title":"Router object","text":"<p>You can also create a Phalcon\\Mvc\\Router object, setting the routes there and then injecting it in the dependency injection container.</p> <pre><code>use Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n$router-&gt;addGet(\n    '/orders/display/{name}',\n    'OrdersClass::display'\n);\n\n\n$app = new Micro();\n$app-&gt;setService('router', $router, true);\n</code></pre> <p>Setting up your routes using the Phalcon\\Mvc\\Micro applications verb methods (<code>get</code>, <code>post</code>, etc.) is much easier than setting up a router object with relevant routes and then injecting it in the application.</p> <p>Each method has its advantages and disadvantages. It all depends on the design and needs of your application.</p>"},{"location":"application-micro/#rewrite-rules","title":"Rewrite Rules","text":"<p>In order for routes to work, certain configuration changes need to be made in your web server's configuration for your particular site.</p> <pre><code>&lt;IfModule mod_rewrite.c&gt;\n    RewriteEngine On\n    RewriteCond   %{REQUEST_FILENAME} !-f\n    RewriteRule   ^(.*)$ index.php?_url=/$1 [QSA,L]\n&lt;/IfModule&gt;\n</code></pre>"},{"location":"application-micro/#handlers","title":"Handlers","text":"<p>Handlers are callable pieces of code that get attached to a route. When the route is matched, the handler is executed with all the defined parameters. A handler is any callable piece of code that exists in PHP.</p>"},{"location":"application-micro/#definitions","title":"Definitions","text":"<p>Phalcon offers several ways to attach a handler to a route. Your application needs and design as well as coding style will be the factors influencing your choice of implementation.</p>"},{"location":"application-micro/#anonymous-function","title":"Anonymous Function","text":"<p>Finally we can use an anonymous function (as seen above) to handle the request</p> <pre><code>$app-&gt;get(\n    '/orders/display/{name}',\n    function ($name) {\n        echo \"&lt;h1&gt;This is order: {$name}!&lt;/h1&gt;\";\n    }\n);\n</code></pre> <p>Accessing the <code>$app</code> object inside the anonymous function can be achieved by injecting it as follows:</p> <pre><code>$app-&gt;get(\n    '/orders/display/{name}',\n    function ($name) use ($app) {\n        $context = \"&lt;h1&gt;This is order: {$name}!&lt;/h1&gt;\";\n        $app-&gt;response-&gt;setContext($context);\n        $app-&gt;response-&gt;send();\n    }\n);\n</code></pre>"},{"location":"application-micro/#function","title":"Function","text":"<p>We can define a function as our handler and attach it to a specific route.</p> <pre><code>// With a function\nfunction order_display($name) {\n    echo \"&lt;h1&gt;This is order: {$name}!&lt;/h1&gt;\";\n}\n\n$app-&gt;get(\n    '/orders/display/{name}',\n    'orders_display'\n);\n</code></pre>"},{"location":"application-micro/#static-method","title":"Static Method","text":"<p>We can also use a static method as our handler as follows:</p> <pre><code>class OrdersClass\n{\n    public static function display($name) {\n        echo \"&lt;h1&gt;This is order: {$name}!&lt;/h1&gt;\";\n    }\n}\n\n$app-&gt;get(\n    '/orders/display/{name}',\n    'OrdersClass::display'\n);\n</code></pre>"},{"location":"application-micro/#method-in-an-object","title":"Method in an Object","text":"<p>We can also use a method in an object:</p> <pre><code>class OrdersClass\n{\n    public function display($name) {\n        echo \"&lt;h1&gt;This is order: {$name}!&lt;/h1&gt;\";\n    }\n}\n\n$orders = new OrdersClass();\n$app-&gt;get(\n    '/orders/display/{name}',\n    [\n        $orders,\n        'display',\n    ]\n);\n</code></pre>"},{"location":"application-micro/#controllers","title":"Controllers","text":"<p>With the Phalcon\\Mvc\\Micro you can create micro or medium applications. Medium applications use the micro architecture but expand on it to utilize more than the Micro but less than the Full application.</p> <p>In medium applications you can organize handlers in controllers.</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro\\Collection as MicroCollection;\n\n$orders = new MicroCollection();\n\n// Set the main handler. ie. a controller instance\n$orders-&gt;setHandler(new OrdersController());\n\n// Set a common prefix for all routes\n$orders-&gt;setPrefix('/orders');\n\n// Use the method 'index' in OrdersController\n$orders-&gt;get('/', 'index');\n\n// Use the method 'show' in OrdersController\n$orders-&gt;get('/display/{slug}', 'show');\n\n$app-&gt;mount($orders);\n</code></pre> The <code>OrdersController</code> might look like this:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass OrdersController extends Controller\n{\n    public function index()\n    {\n        // ...\n    }\n\n    public function show($name)\n    {\n        // ...\n    }\n}\n</code></pre> <p>Since our controllers extend the Phalcon\\Mvc\\Controller, all the dependency injection services are available with their respective registration names. For example:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass OrdersController extends Controller\n{\n    public function index()\n    {\n        // ...\n    }\n\n    public function show($name)\n    {\n        $context = \"&lt;h1&gt;This is order: {$name}!&lt;/h1&gt;\";\n        $this-&gt;response-&gt;setContext($context);\n\n        return $this-&gt;response;\n    }\n}\n</code></pre>"},{"location":"application-micro/#lazy-loading","title":"Lazy Loading","text":"<p>In order to increase performance, you might consider implementing lazy loading for your controllers (handlers). The controller will be loaded only if the relevant route is matched.</p> <p>Lazy loading can be easily achieved when setting your handler in your Phalcon\\Mvc\\Micro\\Collection:</p> <pre><code>$orders-&gt;setHandler('OrdersController', true);\n$orders-&gt;setHandler('Blog\\Controllers\\OrdersController', true);\n</code></pre>"},{"location":"application-micro/#use-case","title":"Use case","text":"<p>We are developing an API for an online store. The endpoints are <code>/users</code>, <code>/orders</code> and <code>/products</code>. Each of those endpoints are registered using handlers, and each handler is a controller with relevant actions.</p> <p>The controllers that we use as handlers are as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function get($id)\n    {\n        // ...\n    }\n\n    public function add($payload)\n    {\n        // ...\n    }\n}\n\nclass OrdersController extends Controller\n{\n    public function get($id)\n    {\n        // ...\n    }\n\n    public function add($payload)\n    {\n        // ...\n    }\n}\n\nclass ProductsController extends Controller\n{\n    public function get($id)\n    {\n        // ...\n    }\n\n    public function add($payload)\n    {\n        // ...\n    }\n}\n</code></pre> <p>We register the handlers:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro\\Collection as MicroCollection;\n\n// Users handler\n$users = new MicroCollection();\n$users-&gt;setHandler(new UsersController());\n$users-&gt;setPrefix('/users');\n$users-&gt;get('/get/{id}', 'get');\n$users-&gt;get('/add/{payload}', 'add');\n$app-&gt;mount($users);\n\n// Orders handler\n$orders = new MicroCollection();\n$orders-&gt;setHandler(new OrdersController());\n$orders-&gt;setPrefix('/users');\n$orders-&gt;get('/get/{id}', 'get');\n$orders-&gt;get('/add/{payload}', 'add');\n$app-&gt;mount($orders);\n\n// Products handler\n$products = new MicroCollection();\n$products-&gt;setHandler(new ProductsController());\n$products-&gt;setPrefix('/products');\n$products-&gt;get('/get/{id}', 'get');\n$products-&gt;get('/add/{payload}', 'add');\n$app-&gt;mount($products);\n</code></pre> <p>This implementation loads each handler in turn and mounts it in our application object. The issue with this approach is that each request will result to only one endpoint and therefore one class method executed. The remaining methods/handlers will just remain in memory without being used.</p> <p>Using lazy loading we reduce the number of objects loaded in memory and as a result our application uses less memory.</p> <p>The above implementation changes if we want to use lazy loading as follows: <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro\\Collection as MicroCollection;\n\n// Users handler\n$users = new MicroCollection();\n$users-&gt;setHandler(new UsersController(), true);\n$users-&gt;setPrefix('/users');\n$users-&gt;get('/get/{id}', 'get');\n$users-&gt;get('/add/{payload}', 'add');\n$app-&gt;mount($users);\n\n// Orders handler\n$orders = new MicroCollection();\n$orders-&gt;setHandler(new OrdersController(), true);\n$orders-&gt;setPrefix('/users');\n$orders-&gt;get('/get/{id}', 'get');\n$orders-&gt;get('/add/{payload}', 'add');\n$app-&gt;mount($orders);\n\n// Products handler\n$products = new MicroCollection();\n$products-&gt;setHandler(new ProductsController(), true);\n$products-&gt;setPrefix('/products');\n$products-&gt;get('/get/{id}', 'get');\n$products-&gt;get('/add/{payload}', 'add');\n$app-&gt;mount($products);\n</code></pre></p> <p>Using this simple change in implementation, all handlers remain uninstantiated until requested by a caller. Therefore whenever a caller requests <code>/orders/get/2</code>, our application will instantiate the <code>OrdersController</code> and call the <code>get</code> method in it. Our application now uses less resources than before.</p>"},{"location":"application-micro/#not-found-404","title":"Not found (404)","text":"<p>Any route that has not been matched in our Phalcon\\Mvc\\Micro application will cause it to try and execute the handler defined with the <code>notFound</code> method. Similar to other methods/verbs (<code>get</code>, <code>post</code> etc.), you can register a handler in the <code>notFound</code> method which can be any callable PHP function. <pre><code>&lt;?php\n\n$app-&gt;notFound(\n    function () use ($app) {\n        $app-&gt;response-&gt;setStatusCode(404, 'Not Found');\n        $app-&gt;response-&gt;sendHeaders();\n\n        $message = 'Nothing to see here. Move along....';\n        $app-&gt;response-&gt;setContent($message);\n        $app-&gt;response-&gt;send();\n    }\n);\n</code></pre></p> <p>You can also handle routes that have not been matched (404) with Middleware discussed below.  </p>"},{"location":"application-micro/#methods-verbs","title":"Methods - Verbs","text":"<p>The Phalcon\\Mvc\\Micro application provides a set of methods to bind the HTTP method with the route it is intended to.</p>"},{"location":"application-micro/#delete","title":"delete","text":"<p>Matches if the HTTP method is <code>DELETE</code> and the route is <code>/api/products/delete/{id}</code></p> <pre><code>    $app-&gt;delete(\n        '/api/products/delete/{id}',\n        'delete_product'\n    );\n</code></pre>"},{"location":"application-micro/#get","title":"get","text":"<p>Matches if the HTTP method is <code>GET</code> and the route is <code>/api/products</code></p> <pre><code>    $app-&gt;get(\n        '/api/products',\n        'get_products'\n    );\n</code></pre>"},{"location":"application-micro/#head","title":"head","text":"<p>Matches if the HTTP method is <code>HEAD</code> and the route is <code>/api/products</code></p> <pre><code>    $app-&gt;get(\n        '/api/products',\n        'get_products'\n    );\n</code></pre>"},{"location":"application-micro/#map","title":"map","text":"<p>Map allows you to attach the same endpoint to more than one HTTP method. The example below matches if the HTTP method is <code>GET</code> or <code>POST</code> and the route is <code>/repos/store/refs</code></p> <pre><code>    $app\n        -&gt;map(\n            '/repos/store/refs',\n            'action_product'\n        )\n        -&gt;via(\n            [\n                'GET',\n                'POST',\n            ]\n        );\n</code></pre>"},{"location":"application-micro/#options","title":"options","text":"<p>Matches if the HTTP method is <code>OPTIONS</code> and the route is <code>/api/products/options</code></p> <pre><code>    $app-&gt;options(\n        '/api/products/options',\n        'info_product'\n    );\n</code></pre>"},{"location":"application-micro/#patch","title":"patch","text":"<p>Matches if the HTTP method is <code>PATCH</code> and the route is <code>/api/products/update/{id}</code></p> <pre><code>    $app-&gt;patch(\n        '/api/products/update/{id}',\n        'update_product'\n    );\n</code></pre>"},{"location":"application-micro/#post","title":"post","text":"<p>Matches if the HTTP method is <code>POST</code> and the route is <code>/api/products/add</code></p> <pre><code>    $app-&gt;post(\n        '/api/products',\n        'add_product'\n    );\n</code></pre>"},{"location":"application-micro/#put","title":"put","text":"<p>Matches if the HTTP method is <code>PUT</code> and the route is <code>/api/products/update/{id}</code></p> <pre><code>    $app-&gt;put(\n        '/api/products/update/{id}',\n        'update_product'\n    );\n</code></pre>"},{"location":"application-micro/#collections","title":"Collections","text":"<p>Collections are a handy way to group collections attached to a handler and a common prefix (if needed). For a hypothetical <code>/orders</code> endpoint we could have the following endpoints:</p> <pre><code>/orders/get/{id}\n/orders/add/{payload}\n/orders/update/{id}\n/orders/delete/{id}\n</code></pre> <p>All of those routes are handled by our <code>OrdersController</code>. We set up our routes with a collection as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro\\Collection as MicroCollection;\n\n$orders = new MicroCollection();\n$orders-&gt;setHandler(new OrdersController());\n\n$orders-&gt;setPrefix('/orders');\n\n$orders-&gt;get('/get/{id}', 'displayAction');\n$orders-&gt;get('/add/{payload}', 'addAction');\n$orders-&gt;get('/update/{id}', 'updateAction');\n$orders-&gt;get('/delete/{id}', 'deleteAction');\n\n$app-&gt;mount($orders);\n</code></pre> <p>NOTE</p> <p>The name that we bind each route has a suffix of <code>Action</code>. This is not necessary, your method can be called anything you like.</p>"},{"location":"application-micro/#parameters","title":"Parameters","text":"<p>We have briefly seen above how parameters are defined in the routes. Parameters are set in a route string by enclosing the name of the parameter in brackets.</p> <pre><code>$app-&gt;get(\n    '/orders/display/{name}',\n    function ($name) {\n        echo \"&lt;h1&gt;This is order: {$name}!&lt;/h1&gt;\";\n    }\n);\n</code></pre> <p>We can also enforce certain rules for each parameter by using regular expressions. The regular expression is set after the name of the parameter, separating it with <code>:</code>.</p> <pre><code>// Match the order id\n$app-&gt;get(\n    '/orders/display/{id:[0-9]+}',\n    function ($id) {\n        echo \"&lt;h1&gt;This is order: #{$id}!&lt;/h1&gt;\";\n    }\n);\n\n// Match a numeric (4) year and a title (alpha)\n$app-&gt;get(\n    '/posts/{year:[0-9][4]}/{title:[a-zA-Z\\-]+}',\n    function ($year, $title) {\n        echo '&lt;h1&gt;Title: $title&lt;/h1&gt;';\n        echo '&lt;h2&gt;Year: $year&lt;/h2&gt;';\n    }\n);\n</code></pre> <p>Additional information: Phalcon\\Mvc\\Router Info</p>"},{"location":"application-micro/#redirections","title":"Redirections","text":"<p>You can redirect one matched route to another using the Phalcon\\Http\\Response object, just like in a full application.</p> <pre><code>$app-&gt;post('/old/url',\n    function () use ($app) {\n        $app-&gt;response-&gt;redirect('new/url');\n        $app-&gt;response-&gt;sendHeaders();\n    }\n);\n\n$app-&gt;post('/new/welcome',\n    function () use ($app) {\n        echo 'This is the new Welcome';\n    }\n);\n</code></pre> <p>Note we have to pass the <code>$app</code> object in our anonymous function to have access to the <code>request</code> object.</p> <p>When using controllers as handlers, you can perform the redirect just as easy:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function oldget($id)\n    {\n        return $this-&gt;response-&gt;redirect('users/get/' . $id);\n    }\n\n    public function get($id)\n    {\n        // ...\n    }\n}\n</code></pre> <p>Finally, you can perform redirections in your middleware (if you are using it). An example is below in the relevant section.</p>"},{"location":"application-micro/#urls-for-routes","title":"URLs for Routes","text":"<p>Another feature of the routes is setting up named routes and generating URLs for those routes. This is a two step process.  * First we need to name our route. This can be achieved with the <code>setName()</code> method that is exposed from the methods/verbs in our application (<code>get</code>, <code>post</code>, etc.);</p> <pre><code>// Set a route with the name 'show-order'\n$app\n    -&gt;get(\n        '/orders/display/{id}',\n        function ($id) use ($app) {\n            // ... Find the order and show it\n        }\n    )\n    -&gt;setName('show-order');\n</code></pre> <ul> <li>We need to use the Phalcon\\Mvc\\Url component to generate URLs for the named routes.</li> </ul> <pre><code>// Use the named route and produce a URL from it\n$app-&gt;get(\n    '/',\n    function () use ($app) {\n        $url = sprintf(\n            '&lt;a href=\"%s\"&gt;Show the order&lt;/a&gt;',\n            $app-&gt;url-&gt;get(\n                [\n                    'for' =&gt; 'show-order',\n                    'id'  =&gt; 1234,\n                ]\n            )\n        );\n\n        echo $url;\n    }\n);\n</code></pre>"},{"location":"application-micro/#dependency-injector","title":"Dependency Injector","text":"<p>When a micro application is created, a Phalcon\\Di\\FactoryDefault services container is create implicitly. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\n$app = new Micro();\n\n$app-&gt;get(\n    '/',\n    function () use ($app) {\n        $app-&gt;response-&gt;setContent('Hello!!');\n        $app-&gt;response-&gt;send();\n    }\n);\n</code></pre> <p>You can also create a Di container yourself, and assign it to the micro application, therefore manipulating the services depending on the needs of your application.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Config\\Adapter\\Ini as IniConfig;\n\n$di = new FactoryDefault();\n\n$di-&gt;set(\n    'config',\n    function () {\n        return new IniConfig('config.ini');\n    }\n);\n\n$app = new Micro();\n\n$app-&gt;setDI($di);\n\n$app-&gt;get(\n    '/',\n    function () use ($app) {\n        // Read a setting from the config\n        echo $app-&gt;config-&gt;app_name;\n    }\n);\n\n$app-&gt;post(\n    '/contact',\n    function () use ($app) {\n        $app-&gt;flash-&gt;success('What are you doing Dave?');\n    }\n);\n</code></pre> <p>You can also use the array syntax to register services in the dependency injection container from the application object:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as MysqlAdapter;\n\n$app = new Micro();\n\n// Setup the database service\n$app['db'] = function () {\n    return new MysqlAdapter(\n        [\n            'host'     =&gt; 'localhost',\n            'username' =&gt; 'root',\n            'password' =&gt; 'secret',\n            'dbname'   =&gt; 'test_db',\n        ]\n    );\n};\n\n$app-&gt;get(\n    '/blog',\n    function () use ($app) {\n        $news = $app['db']-&gt;query('SELECT * FROM news');\n\n        foreach ($news as $new) {\n            echo $new-&gt;title;\n        }\n    }\n);\n</code></pre>"},{"location":"application-micro/#responses","title":"Responses","text":"<p>A micro application can return many different types of responses. Direct output, use a template engine, calculated data, view based data, JSON etc.</p> <p>Handlers may return raw responses using plain text, Phalcon\\Http\\Response object or a custom built component that implements the Phalcon\\Http\\ResponseInterface.</p>"},{"location":"application-micro/#direct-output","title":"Direct output","text":"<pre><code>$app-&gt;get(\n    '/orders/display/{name}',\n    function ($name) {\n        echo \"&lt;h1&gt;This is order: {$name}!&lt;/h1&gt;\";\n    }\n);\n</code></pre>"},{"location":"application-micro/#including-another-file","title":"Including another file","text":"<pre><code>$app-&gt;get(\n    '/orders/display/{name}',\n    function ($name) {\n        require 'views/results.php';\n    }\n);\n</code></pre>"},{"location":"application-micro/#direct-output-json","title":"Direct output JSON","text":"<pre><code>$app-&gt;get(\n    '/orders/display/{name}',\n    function ($name) {\n        echo json_encode(\n            [\n                'code' =&gt; 200,\n                'name' =&gt; $name,\n            ]\n        );\n    }\n);\n</code></pre>"},{"location":"application-micro/#new-response-object","title":"New Response object","text":"<p>You can use the <code>setContent</code> method of the response object to return the response back:</p> <pre><code>$app-&gt;get(\n    '/show/data',\n    function () {\n        // Create a response\n        $response = new Phalcon\\Http\\Response();\n\n        // Set the Content-Type header\n        $response-&gt;setContentType('text/plain');\n\n        // Pass the content of a file\n        $response-&gt;setContent(file_get_contents('data.txt'));\n\n        // Return the response\n        return $response;\n    }\n);\n</code></pre>"},{"location":"application-micro/#application-response","title":"Application Response","text":"<p>You can also use the Phalcon\\Http\\Response object to return responses to the caller. The response object has a lot of useful methods that make returning respones much easier.</p> <pre><code>$app-&gt;get(\n    '/show/data',\n    function () use ($app) {\n        // Set the Content-Type header\n        $app-&gt;response-&gt;setContentType('text/plain');\n        $app-&gt;response-&gt;sendHeaders();\n\n        // Print a file\n        readfile('data.txt');\n    }\n);\n</code></pre>"},{"location":"application-micro/#return-application-response","title":"Return Application Response","text":"<p>A different approach returning data back to the caller is to return the response object directly from the application. When responses are returned by handlers they are automatically sent by the application.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Http\\Response;\n\n$app = new Micro();\n\n// Return a response\n$app-&gt;get(\n    '/welcome/index',\n    function () {\n        $response = new Response();\n\n        $response-&gt;setStatusCode(401, 'Unauthorized');\n        $response-&gt;setContent('Access is not authorized');\n\n        return $response;\n    }\n);\n</code></pre>"},{"location":"application-micro/#json","title":"JSON","text":"<p>JSON can be sent back just as easy using the Phalcon\\Http\\Response object:</p> <pre><code>$app-&gt;get(\n    '/welcome/index',\n    function () use ($app) {\n\n        $data = [\n            'code'    =&gt; 401,\n            'status'  =&gt; 'error',\n            'message' =&gt; 'Unauthorized access',\n            'payload' =&gt; [],\n        ];\n\n        $response-&gt;setJsonContent($data);\n\n        return $response;\n    }\n);\n</code></pre>"},{"location":"application-micro/#events","title":"Events","text":"<p>A Phalcon\\Mvc\\Micro application works closely with a Phalcon\\Events\\Manager if it is present, to trigger events that can be used throughout our application. The type of those events is <code>micro</code>. These events trigger in our application and can be attached to relevant handlers that will perform actions needed by our application.</p>"},{"location":"application-micro/#available-events","title":"Available events","text":"<p>The following events are supported:</p> Event Name Triggered Can stop operation? beforeHandleRoute Main method called; Routes have not been checked yet Yes beforeExecuteRoute Route matched, Handler valid, Handler has not been executed yet Yes afterExecuteRoute Handler just finished running No beforeNotFound Route has not been found Yes afterHandleRoute Route just finished executing Yes afterBinding Triggered after models are bound but before executing the handler Yes"},{"location":"application-micro/#authentication-example","title":"Authentication example","text":"<p>You can easily check whether a user has been authenticated or not using the <code>beforeExecuteRoute</code> event. In the following example, we explain how to control the application security using events:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n// Create a events manager\n$eventsManager = new EventsManager();\n\n$eventsManager-&gt;attach(\n    'micro:beforeExecuteRoute',\n    function (Event $event, $app) {\n        if ($app-&gt;session-&gt;get('auth') === false) {\n            $app-&gt;flashSession-&gt;error(\"The user isn't authenticated\");\n\n            $app-&gt;response-&gt;redirect('/');\n            $app-&gt;response-&gt;sendHeaders();\n\n            // Return (false) stop the operation\n            return false;\n        }\n    }\n);\n\n$app = new Micro();\n\n// Bind the events manager to the app\n$app-&gt;setEventsManager($eventsManager);\n</code></pre>"},{"location":"application-micro/#not-found-example","title":"Not found example","text":"<p>You can easily check whether a user has been authenticated or not using the <code>beforeExecuteRoute</code> event. In the following example, we explain how to control the application security using events:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n// Create a events manager\n$eventsManager = new EventsManager();\n\n$eventsManager-&gt;attach(\n    'micro:beforeNotFound',\n    function (Event $event, $app) {\n        $app-&gt;response-&gt;redirect('/404');\n        $app-&gt;response-&gt;sendHeaders();\n\n        return $app-&gt;response;\n    }\n);\n\n$app = new Micro();\n\n// Bind the events manager to the app\n$app-&gt;setEventsManager($eventsManager);\n</code></pre>"},{"location":"application-micro/#middleware","title":"Middleware","text":"<p>Middleware are classes that can be attached to your application and introduce another layer where business logic can exist. They run sequentially, according to the order they are registered and not only improve mainainability, by encapsulating specific functionality, but also performance. A middleware class can stop execution when a particular business rule has not been satisfied, thus allowing the application to exit early without executing the full cycle of a request.</p> <p>The presence of a Phalcon\\Events\\Manager is essential for middleware to operate, so it has to be registered in our Di container.</p>"},{"location":"application-micro/#attached-events","title":"Attached events","text":"<p>Middleware can be attached to a micro application in 3 different events. Those are:</p> Event Description before Before the handler has been executed after After the handler has been executed final After the response has been sent to the caller <p>NOTE</p> <p>You can attach as many middleware classes as you want in each of the above events. They will be executed sequentially when the relevant event fires.</p>"},{"location":"application-micro/#before","title":"before","text":"<p>This event is perfect for stopping execution of the application if certain criteria is not met. In the below example we are checking if the user has been authenticated and stop execution with the necessary redirect.</p> <pre><code>&lt;?php\n\n$app = new Phalcon\\Mvc\\Micro();\n\n// Executed before every route is executed\n// Return false cancels the route execution\n$app-&gt;before(\n    function () use ($app) {\n        if (false === $app['session']-&gt;get('auth')) {\n            $app['flashSession']-&gt;error(\"The user isn't authenticated\");\n\n            $app['response']-&gt;redirect('/error');\n\n            // Return false stops the normal execution\n            return false;\n        }\n\n        return true;\n    }\n);\n</code></pre>"},{"location":"application-micro/#after","title":"after","text":"<p>This event can be used to manipulate data or perform actions that are needed after the handler has finished executing. In the example below, we manipulate our response to send JSON back to the caller.</p> <pre><code>$app-&gt;map(\n    '/api/robots',\n    function () {\n        return [\n            'status' =&gt; 'OK',\n        ];\n    }\n);\n\n$app-&gt;after(\n    function () use ($app) {\n        // This is executed after the route is executed\n        echo json_encode($app-&gt;getReturnedValue());\n    }\n);\n</code></pre>"},{"location":"application-micro/#finish","title":"finish","text":"<p>This even will fire up when the whole request cycle has been completed. In the example below, we use it to clean up some cache files.</p> <pre><code>$app-&gt;finish(\n    function () use ($app) {\n        if (true === file_exists('/tmp/processing.cache')) {\n            unlink('/tmp/processing.cache');\n        }\n    }\n);\n</code></pre>"},{"location":"application-micro/#setup_1","title":"Setup","text":"<p>Attaching middleware to your application is very easy as shown above, with the <code>before</code>, <code>after</code> and <code>finish</code> method calls.</p> <pre><code>$app-&gt;before(\n    function () use ($app) {\n        if (false === $app['session']-&gt;get('auth')) {\n            $app['flashSession']-&gt;error(\"The user isn't authenticated\");\n\n            $app['response']-&gt;redirect('/error');\n\n            // Return false stops the normal execution\n            return false;\n        }\n\n        return true;\n    }\n);\n\n$app-&gt;after(\n    function () use ($app) {\n        // This is executed after the route is executed\n        echo json_encode($app-&gt;getReturnedValue());\n    }\n);\n</code></pre> <p>Attaching middleware to your application as classes and having it listen to events from the events manager can be achieved as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Mvc\\Micro;\n\nuse Website\\Middleware\\CacheMiddleware;\nuse Website\\Middleware\\NotFoundMiddleware;\nuse Website\\Middleware\\ResponseMiddleware;\n\n/**\n * Create a new Events Manager.\n */\n$eventsManager = new Manager();\n$application   = new Micro();\n\n/**\n * Attach the middleware both to the events manager and the application\n */\n$eventsManager-&gt;attach('micro', new CacheMiddleware());\n$application-&gt;before(new CacheMiddleware());\n\n$eventsManager-&gt;attach('micro', new NotFoundMiddleware());\n$application-&gt;before(new NotFoundMiddleware());\n\n/**\n * This one needs to listen on the `after` event\n */\n$eventsManager-&gt;attach('micro', new ResponseMiddleware());\n$application-&gt;after(new ResponseMiddleware());\n\n/**\n * Make sure our events manager is in the DI container now\n */\n$application-&gt;setEventsManager($eventsManager);\n</code></pre> <p>We need a Phalcon\\Events\\Manager object. This can be a newly instantiated object or we can get the one that exists in our DI container (if you have used the <code>FactoryDefault</code> one).</p> <p>We attach every middleware class in the <code>micro</code> hook in the Events Manager. We could also be a bit more specific and attach it to say the <code>micro:beforeExecuteRoute</code> event.</p> <p>We then attach the middleware class in our application on one of the three listening events discussed above (<code>before</code>, <code>after</code>, <code>finish</code>).</p>"},{"location":"application-micro/#implementation","title":"Implementation","text":"<p>Middleware can be any kind of PHP callable functions. You can organize your code whichever way you like it to implement middleware. If you choose to use classes for your middleware, you will need them to implement the Phalcon\\Mvc\\Micro\\MiddlewareInterface</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\Micro\\MiddlewareInterface;\n\n/**\n * CacheMiddleware\n *\n * Caches pages to reduce processing\n */\nclass CacheMiddleware implements MiddlewareInterface\n{\n    /**\n     * Calls the middleware\n     *\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function call(Micro $application)\n    {\n        $cache  = $application['cache'];\n        $router = $application['router'];\n\n        $key = preg_replace('/^[a-zA-Z0-9]/', '', $router-&gt;getRewriteUri());\n\n        // Check if the request is cached\n        if ($cache-&gt;exists($key)) {\n            echo $cache-&gt;get($key);\n\n            return false;\n        }\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"application-micro/#events-in-middleware","title":"Events in Middleware","text":"<p>The events that are triggered for our application also trigger inside a class that implements the Phalcon\\Mvc\\Micro\\MiddlewareInterface. This offers great flexibility and power for developers since we can interact with the request process.</p>"},{"location":"application-micro/#api-example","title":"API example","text":"<p>Assume that we have an API that we have implemented with the Micro application. We will need to attach different Middleware classes in the application so that we can better control the execution of the application.</p> <p>The middleware that we will use are: * Firewall * NotFound * Redirect * CORS * Request * Response</p>"},{"location":"application-micro/#firewall-middleware","title":"Firewall Middleware","text":"<p>This middleware is attached to the <code>before</code> event of our Micro application. The purpose of this middleware is to check who is calling our API and based on a whitelist, allow them to proceed or not</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\Micro\\MiddlewareInterface;\n\n/**\n * FirewallMiddleware\n *\n * Checks the whitelist and allows clients or not\n */\nclass FirewallMiddleware implements MiddlewareInterface\n{\n    /**\n     * Before anything happens\n     *\n     * @param Event $event\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function beforeHandleRoute(Event $event, Micro $application)\n    {\n        $whitelist = [\n            '10.4.6.1',\n            '10.4.6.2',\n            '10.4.6.3',\n            '10.4.6.4',\n        ];\n        $ipAddress = $application-&gt;request-&gt;getClientAddress();\n\n        if (true !== array_key_exists($ipAddress, $whitelist)) {\n            $this-&gt;response-&gt;redirect('/401');\n            $this-&gt;response-&gt;send();\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Calls the middleware\n     *\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function call(Micro $application)\n    {\n        return true;\n    }\n}\n</code></pre>"},{"location":"application-micro/#not-found-middleware","title":"Not Found Middleware","text":"<p>When this middleware is processed, this means that the requesting IP is allowed to access our application. The application will try and match the route and if not found the <code>beforeNotFound</code> event will fire. We will stop the processing then and send back to the user the relevant 404 response. This middleware is attached to the <code>before</code> event of our Micro application</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\Micro\\MiddlewareInterface;\n\n/**\n * NotFoundMiddleware\n *\n * Processes the 404s\n */\nclass NotFoundMiddleware implements MiddlewareInterface\n{\n    /**\n     * The route has not been found\n     *\n     * @returns bool\n     */\n    public function beforeNotFound()\n    {\n        $this-&gt;response-&gt;redirect('/404');\n        $this-&gt;response-&gt;send();\n\n        return false;\n    }\n\n    /**\n     * Calls the middleware\n     *\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function call(Micro $application)\n    {\n        return true;\n    }\n}\n</code></pre>"},{"location":"application-micro/#redirect-middleware","title":"Redirect Middleware","text":"<p>We attach this middleware again to the <code>before</code> event of our Micro application because we don't want the request to proceed if the requested endpoint needs to be redirected.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\Micro\\MiddlewareInterface;\n\n/**\n * RedirectMiddleware\n *\n * Checks the request and redirects the user somewhere else if need be\n */\nclass RedirectMiddleware implements MiddlewareInterface\n{\n    /**\n     * Before anything happens\n     *\n     * @param Event $event\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function beforeHandleRoute(Event $event, Micro $application)\n    {\n        if ('github' === $application-&gt;request-&gt;getURI()) {\n            $application-&gt;response-&gt;redirect('https://github.com');\n            $application-&gt;response-&gt;send();\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Calls the middleware\n     *\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function call(Micro $application)\n    {\n        return true;\n    }\n}\n</code></pre>"},{"location":"application-micro/#cors-middleware","title":"CORS Middleware","text":"<p>Again this middleware is attached to the <code>before</code> event of our Micro application. We need to ensure that it fires before anything happens with our application</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\Micro\\MiddlewareInterface;\n\n/**\n * CORSMiddleware\n *\n * CORS checking\n */\nclass CORSMiddleware implements MiddlewareInterface\n{\n    /**\n     * Before anything happens\n     *\n     * @param Event $event\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function beforeHandleRoute(Event $event, Micro $application)\n    {\n        if ($application-&gt;request-&gt;getHeader('ORIGIN')) {\n            $origin = $application-&gt;request-&gt;getHeader('ORIGIN');\n        } else {\n            $origin = '*';\n        }\n\n        $application\n            -&gt;response\n            -&gt;setHeader('Access-Control-Allow-Origin', $origin)\n            -&gt;setHeader(\n                'Access-Control-Allow-Methods',\n                'GET,PUT,POST,DELETE,OPTIONS'\n            )\n            -&gt;setHeader(\n                'Access-Control-Allow-Headers',\n                'Origin, X-Requested-With, Content-Range, ' .\n                'Content-Disposition, Content-Type, Authorization'\n            )\n            -&gt;setHeader('Access-Control-Allow-Credentials', 'true');\n    }\n\n    /**\n     * Calls the middleware\n     *\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function call(Micro $application)\n    {\n        return true;\n    }\n}\n</code></pre>"},{"location":"application-micro/#request-middleware","title":"Request Middleware","text":"<p>This middleware is receiving a JSON payload and checks it. If the JSON payload is not valid it will stop execution.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\Micro\\MiddlewareInterface;\n\n/**\n * RequestMiddleware\n *\n * Check incoming payload\n */\nclass RequestMiddleware implements MiddlewareInterface\n{\n    /**\n     * Before the route is executed\n     *\n     * @param Event $event\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function beforeExecuteRoute(Event $event, Micro $application)\n    {\n        json_decode($application-&gt;request-&gt;getRawBody());\n        if (JSON_ERROR_NONE !== json_last_error()) {\n            $application-&gt;response-&gt;redirect('/malformed');\n            $application-&gt;response-&gt;send();\n\n            return false;\n        }\n\n        return true;\n\n    }\n\n    /**\n     * Calls the middleware\n     *\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function call(Micro $application)\n    {\n        return true;\n    }\n}\n</code></pre>"},{"location":"application-micro/#response-middleware","title":"Response Middleware","text":"<p>This middleware is responsible for manipulating our response and sending it back to the caller as a JSON string. Therefore we need to attach it to the <code>after</code> event of our Micro application.</p> <p>NOTE</p> <p>We are going to be using the <code>call</code> method for this middleware, since we have nearly executed the whole request cycle.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\Micro\\MiddlewareInterface;\n\n/**\n* ResponseMiddleware\n*\n* Manipulates the response\n*/\nclass ResponseMiddleware implements MiddlewareInterface\n{\n     /**\n      * Before anything happens\n      *\n      * @param Micro $application\n      *\n      * @returns bool\n      */\n    public function call(Micro $application)\n    {\n        $payload = [\n            'code'    =&gt; 200,\n            'status'  =&gt; 'success',\n            'message' =&gt; '',\n            'payload' =&gt; $application-&gt;getReturnedValue(),\n        ];\n\n        $application-&gt;response-&gt;setJsonContent($payload);\n        $application-&gt;response-&gt;send();\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"application-micro/#models","title":"Models","text":"<p>Models can be used in Micro applications, so long as we instruct the application how it can find the relevant classes with an autoloader.</p> <p>NOTE</p> <p>The relevant <code>db</code> service must be registered in your Di container.</p> <pre><code>&lt;?php\n\n$loader = new \\Phalcon\\Loader();\n$loader\n    -&gt;registerDirs(\n        [\n            __DIR__ . '/models/',\n        ]\n    )\n    -&gt;register();\n\n$app = new \\Phalcon\\Mvc\\Micro();\n\n$app-&gt;get(\n    '/products/find',\n    function () {\n        $products = \\MyModels\\Products::find();\n\n        foreach ($products as $product) {\n            echo $product-&gt;name, '&lt;br&gt;';\n        }\n    }\n);\n\n$app-&gt;handle();\n</code></pre>"},{"location":"application-micro/#inject-model-instances","title":"Inject model instances","text":"<p>By using the Phalcon\\Mvc\\Model\\Binder class you can inject model instances into your routes:</p> <p><pre><code>&lt;?php\n\n$loader = new \\Phalcon\\Loader();\n\n$loader-&gt;registerDirs(\n    [\n        __DIR__ . '/models/',\n    ]\n)-&gt;register();\n\n$app = new \\Phalcon\\Mvc\\Micro();\n$app-&gt;setModelBinder(new \\Phalcon\\Mvc\\Model\\Binder());\n\n$app-&gt;get(\n    \"/products/{product:[0-9]+}\",\n    function (Products $product) {\n        // do anything with $product object\n    }\n);\n\n$app-&gt;handle();\n</code></pre> Since Binder object is using internally Reflection Api which can be heavy, there is ability to set a cache so as to speed up the process. This can be done by using the second argument of <code>setModelBinder()</code> which can also accept a service name or just by passing a cache instance to the <code>Binder</code> constructor.</p> <p>Currently the binder will only use the models primary key to perform a <code>findFirst()</code> on. An example route for the above would be <code>/products/1</code>.</p>"},{"location":"application-micro/#views","title":"Views","text":"<p>Phalcon\\Mvc\\Micro does not have inherently a view service. We can however use the Phalcon\\Mvc\\View\\Simple component to render views.</p> <pre><code>&lt;?php\n\n$app = new Phalcon\\Mvc\\Micro();\n\n$app['view'] = function () {\n    $view = new \\Phalcon\\Mvc\\View\\Simple();\n\n    $view-&gt;setViewsDir('app/views/');\n\n    return $view;\n};\n\n// Return a rendered view\n$app-&gt;get(\n    '/products/show',\n    function () use ($app) {\n        // Render app/views/products/show.phtml passing some variables\n        echo $app['view']-&gt;render(\n            'products/show',\n            [\n                'id'   =&gt; 100,\n                'name' =&gt; 'Artichoke',\n            ]\n        );\n    }\n);\n</code></pre> <p>NOTE</p> <p>The above example uses the Phalcon\\Mvc\\View\\Simple component, which uses relative paths instead of controllers and actions. You can use the Phalcon\\Mvc\\View component instead, but to do so you will need to change the parameters passed to <code>render()</code></p> <pre><code>&lt;?php\n\n$app = new Phalcon\\Mvc\\Micro();\n\n$app['view'] = function () {\n    $view = new \\Phalcon\\Mvc\\View();\n\n    $view-&gt;setViewsDir('app/views/');\n\n    return $view;\n};\n\n// Return a rendered view\n$app-&gt;get(\n    '/products/show',\n    function () use ($app) {\n        // Render app/views/products/show.phtml passing some variables\n        echo $app['view']-&gt;render(\n            'products',\n            'show',\n            [\n                'id'   =&gt; 100,\n                'name' =&gt; 'Artichoke',\n            ]\n        );\n    }\n);\n</code></pre>"},{"location":"application-micro/#error-handling","title":"Error Handling","text":"<p>The Phalcon\\Mvc\\Micro application also has an <code>error</code> method, which can be used to trap any errors that originate from exceptions. The following code snippet shows basic usage of this feature:</p> <pre><code>&lt;?php\n\n$app = new Phalcon\\Mvc\\Micro();\n\n$app-&gt;get(\n    '/',\n    function () {\n        throw new \\Exception('Some error happened', 401);\n    }\n);\n\n$app-&gt;error(\n    function ($exception) {\n        echo json_encode(\n            [\n                'code'    =&gt; $exception-&gt;getCode(),\n                'status'  =&gt; 'error',\n                'message' =&gt; $exception-&gt;getMessage(),\n            ]\n        );\n    }\n);\n</code></pre>"},{"location":"application/","title":"MVC Applications","text":"<p>All the hard work behind orchestrating the operation of MVC in Phalcon is normally done by Phalcon\\Mvc\\Application. This component encapsulates all the complex operations required in the background, instantiating every component needed and integrating it with the project, to allow the MVC pattern to operate as desired.</p> <p>The following bootstrap code is typical for a Phalcon application:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Application;\n\n// Register autoloaders\n// ...\n\n// Register services\n// ...\n\n// Handle the request\n$application = new Application($di);\n\ntry {\n    $response = $application-&gt;handle();\n\n    $response-&gt;send();\n} catch (\\Exception $e) {\n    echo 'Exception: ', $e-&gt;getMessage();\n}\n</code></pre> <p>The core of all the work of the controller occurs when <code>handle()</code> is invoked:</p> <pre><code>&lt;?php\n\n$response = $application-&gt;handle();\n</code></pre>"},{"location":"application/#manual-bootstrapping","title":"Manual bootstrapping","text":"<p>If you do not wish to use Phalcon\\Mvc\\Application, the code above can be changed as follows:</p> <pre><code>&lt;?php\n\n// Get the 'router' service\n$router = $di['router'];\n\n$router-&gt;handle();\n\n$view = $di['view'];\n\n$dispatcher = $di['dispatcher'];\n\n// Pass the processed router parameters to the dispatcher\n\n$dispatcher-&gt;setControllerName(\n    $router-&gt;getControllerName()\n);\n\n$dispatcher-&gt;setActionName(\n    $router-&gt;getActionName()\n);\n\n$dispatcher-&gt;setParams(\n    $router-&gt;getParams()\n);\n\n// Start the view\n$view-&gt;start();\n\n// Dispatch the request\n$dispatcher-&gt;dispatch();\n\n// Render the related views\n$view-&gt;render(\n    $dispatcher-&gt;getControllerName(),\n    $dispatcher-&gt;getActionName(),\n    $dispatcher-&gt;getParams()\n);\n\n// Finish the view\n$view-&gt;finish();\n\n$response = $di['response'];\n\n// Pass the output of the view to the response\n$response-&gt;setContent(\n    $view-&gt;getContent()\n);\n\n// Send the response\n$response-&gt;send();\n</code></pre> <p>The following replacement of Phalcon\\Mvc\\Application lacks of a view component making it suitable for Rest APIs:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\ResponseInterface;\n\n// Get the 'router' service\n$router = $di['router'];\n\n$router-&gt;handle();\n\n$dispatcher = $di['dispatcher'];\n\n// Pass the processed router parameters to the dispatcher\n\n$dispatcher-&gt;setControllerName(\n    $router-&gt;getControllerName()\n);\n\n$dispatcher-&gt;setActionName(\n    $router-&gt;getActionName()\n);\n\n$dispatcher-&gt;setParams(\n    $router-&gt;getParams()\n);\n\n// Dispatch the request\n$dispatcher-&gt;dispatch();\n\n// Get the returned value by the last executed action\n$response = $dispatcher-&gt;getReturnedValue();\n\n// Check if the action returned is a 'response' object\nif ($response instanceof ResponseInterface) {\n    // Send the response\n    $response-&gt;send();\n}\n</code></pre> <p>Yet another alternative that catch exceptions produced in the dispatcher forwarding to other actions consequently:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\ResponseInterface;\n\n// Get the 'router' service\n$router = $di['router'];\n\n$router-&gt;handle();\n\n$dispatcher = $di['dispatcher'];\n\n// Pass the processed router parameters to the dispatcher\n\n$dispatcher-&gt;setControllerName(\n    $router-&gt;getControllerName()\n);\n\n$dispatcher-&gt;setActionName(\n    $router-&gt;getActionName()\n);\n\n$dispatcher-&gt;setParams(\n    $router-&gt;getParams()\n);\n\ntry {\n    // Dispatch the request\n    $dispatcher-&gt;dispatch();\n} catch (Exception $e) {\n    // An exception has occurred, dispatch some controller/action aimed for that\n\n    // Pass the processed router parameters to the dispatcher\n    $dispatcher-&gt;setControllerName('errors');\n    $dispatcher-&gt;setActionName('action503');\n\n    // Dispatch the request\n    $dispatcher-&gt;dispatch();\n}\n\n// Get the returned value by the last executed action\n$response = $dispatcher-&gt;getReturnedValue();\n\n// Check if the action returned is a 'response' object\nif ($response instanceof ResponseInterface) {\n    // Send the response\n    $response-&gt;send();\n}\n</code></pre> <p>Although the above implementations are a lot more verbose than the code needed while using Phalcon\\Mvc\\Application, offers an alternative in bootstrapping your application. Depending on your needs, you might want to have full control of what should be instantiated or not, or replace certain components with those of your own to extend the default functionality.</p>"},{"location":"application/#single-or-multi-module-applications","title":"Single or Multi Module Applications","text":"<p>With this component you can run various types of MVC structures:</p>"},{"location":"application/#single-module","title":"Single Module","text":"<p>Single MVC applications consist of one module only. Namespaces can be used but are not necessary. An application like this would have the following file structure:</p> <pre><code>single/\n    app/\n        controllers/\n        models/\n        views/\n    public/\n        css/\n        img/\n        js/\n</code></pre> <p>If namespaces are not used, the following bootstrap file could be used to orchestrate the MVC flow:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Di\\FactoryDefault;\n\n$loader = new Loader();\n\n$loader-&gt;registerDirs(\n    [\n        '../apps/controllers/',\n        '../apps/models/',\n    ]\n);\n\n$loader-&gt;register();\n\n$di = new FactoryDefault();\n\n// Registering the view component\n$di-&gt;set(\n    'view',\n    function () {\n        $view = new View();\n\n        $view-&gt;setViewsDir('../apps/views/');\n\n        return $view;\n    }\n);\n\n$application = new Application($di);\n\ntry {\n    $response = $application-&gt;handle();\n\n    $response-&gt;send();\n} catch (\\Exception $e) {\n    echo $e-&gt;getMessage();\n}\n</code></pre> <p>If namespaces are used, the following bootstrap can be used:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Di\\FactoryDefault;\n\n$loader = new Loader();\n\n// Use autoloading with namespaces prefixes\n$loader-&gt;registerNamespaces(\n    [\n        'Single\\Controllers' =&gt; '../apps/controllers/',\n        'Single\\Models'      =&gt; '../apps/models/',\n    ]\n);\n\n$loader-&gt;register();\n\n$di = new FactoryDefault();\n\n// Register the default dispatcher's namespace for controllers\n$di-&gt;set(\n    'dispatcher',\n    function () {\n        $dispatcher = new Dispatcher();\n\n        $dispatcher-&gt;setDefaultNamespace('Single\\Controllers');\n\n        return $dispatcher;\n    }\n);\n\n// Register the view component\n$di-&gt;set(\n    'view',\n    function () {\n        $view = new View();\n\n        $view-&gt;setViewsDir('../apps/views/');\n\n        return $view;\n    }\n);\n\n$application = new Application($di);\n\ntry {\n    $response = $application-&gt;handle();\n\n    $response-&gt;send();\n} catch (\\Exception $e) {\n    echo $e-&gt;getMessage();\n}\n</code></pre>"},{"location":"application/#multi-module","title":"Multi Module","text":"<p>A multi-module application uses the same document root for more than one module. In this case the following file structure can be used:</p> <p><pre><code>multiple/\n  apps/\n    frontend/\n       controllers/\n       models/\n       views/\n       Module.php\n    backend/\n       controllers/\n       models/\n       views/\n       Module.php\n  public/\n    css/\n    img/\n    js/\n</code></pre> Each directory in apps/ have its own MVC structure. A Module.php is present to configure specific settings of each module like autoloaders or custom services:</p> <pre><code>&lt;?php\n\nnamespace Multiple\\Backend;\n\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\DiInterface;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\ModuleDefinitionInterface;\n\nclass Module implements ModuleDefinitionInterface\n{\n    /**\n     * Register a specific autoloader for the module\n     */\n    public function registerAutoloaders(DiInterface $di = null)\n    {\n        $loader = new Loader();\n\n        $loader-&gt;registerNamespaces(\n            [\n                'Multiple\\Backend\\Controllers' =&gt; '../apps/backend/controllers/',\n                'Multiple\\Backend\\Models'      =&gt; '../apps/backend/models/',\n            ]\n        );\n\n        $loader-&gt;register();\n    }\n\n    /**\n     * Register specific services for the module\n     */\n    public function registerServices(DiInterface $di)\n    {\n        // Registering a dispatcher\n        $di-&gt;set(\n            'dispatcher',\n            function () {\n                $dispatcher = new Dispatcher();\n\n                $dispatcher-&gt;setDefaultNamespace('Multiple\\Backend\\Controllers');\n\n                return $dispatcher;\n            }\n        );\n\n        // Registering the view component\n        $di-&gt;set(\n            'view',\n            function () {\n                $view = new View();\n\n                $view-&gt;setViewsDir('../apps/backend/views/');\n\n                return $view;\n            }\n        );\n    }\n}\n</code></pre> <p>A special bootstrap file is required to load a multi-module MVC architecture:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Di\\FactoryDefault;\n\n$di = new FactoryDefault();\n\n// Specify routes for modules\n$di-&gt;set(\n    'router',\n    function () {\n        $router = new Router();\n\n        $router-&gt;setDefaultModule('frontend');\n\n        $router-&gt;add(\n            '/login',\n            [\n                'module'     =&gt; 'backend',\n                'controller' =&gt; 'login',\n                'action'     =&gt; 'index',\n            ]\n        );\n\n        $router-&gt;add(\n            '/admin/products/:action',\n            [\n                'module'     =&gt; 'backend',\n                'controller' =&gt; 'products',\n                'action'     =&gt; 1,\n            ]\n        );\n\n        $router-&gt;add(\n            '/products/:action',\n            [\n                'controller' =&gt; 'products',\n                'action'     =&gt; 1,\n            ]\n        );\n\n        return $router;\n    }\n);\n\n// Create an application\n$application = new Application($di);\n\n// Register the installed modules\n$application-&gt;registerModules(\n    [\n        'frontend' =&gt; [\n            'className' =&gt; 'Multiple\\Frontend\\Module',\n            'path'      =&gt; '../apps/frontend/Module.php',\n        ],\n        'backend'  =&gt; [\n            'className' =&gt; 'Multiple\\Backend\\Module',\n            'path'      =&gt; '../apps/backend/Module.php',\n        ]\n    ]\n);\n\ntry {\n    // Handle the request\n    $response = $application-&gt;handle();\n\n    $response-&gt;send();\n} catch (\\Exception $e) {\n    echo $e-&gt;getMessage();\n}\n</code></pre> <p>If you want to maintain the module configuration in the bootstrap file you can use an anonymous function to register the module:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\n\n// Creating a view component\n$view = new View();\n\n// Set options to view component\n// ...\n\n// Register the installed modules\n$application-&gt;registerModules(\n    [\n        'frontend' =&gt; function ($di) use ($view) {\n            $di-&gt;setShared(\n                'view',\n                function () use ($view) {\n                    $view-&gt;setViewsDir('../apps/frontend/views/');\n\n                    return $view;\n                }\n            );\n        },\n        'backend' =&gt; function ($di) use ($view) {\n            $di-&gt;setShared(\n                'view',\n                function () use ($view) {\n                    $view-&gt;setViewsDir('../apps/backend/views/');\n\n                    return $view;\n                }\n            );\n        }\n    ]\n);\n</code></pre> <p>When Phalcon\\Mvc\\Application have modules registered, always is necessary that every matched route returns a valid module. Each registered module has an associated class offering functions to set the module itself up. Each module class definition must implement two methods: <code>registerAutoloaders()</code> and <code>registerServices()</code>, they will be called by Phalcon\\Mvc\\Application according to the module to be executed.</p>"},{"location":"application/#application-events","title":"Application Events","text":"<p>Phalcon\\Mvc\\Application is able to send events to the EventsManager (if it is present). Events are triggered using the type <code>application</code>. The following events are supported:</p> Event Name Triggered <code>boot</code> Executed when the application handles its first request <code>beforeStartModule</code> Before initialize a module, only when modules are registered <code>afterStartModule</code> After initialize a module, only when modules are registered <code>beforeHandleRequest</code> Before execute the dispatch loop <code>afterHandleRequest</code> After execute the dispatch loop <p>The following example demonstrates how to attach listeners to this component:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$eventsManager = new EventsManager();\n\n$application-&gt;setEventsManager($eventsManager);\n\n$eventsManager-&gt;attach(\n    'application',\n    function (Event $event, $application) {\n        // ...\n    }\n);\n</code></pre>"},{"location":"application/#external-resources","title":"External Resources","text":"<ul> <li>MVC examples on GitHub</li> </ul>"},{"location":"assets/","title":"Assets Management","text":"<p><code>Phalcon\\Assets</code> is a component that allows you to manage static resources such as CSS stylesheets or JavaScript libraries in a web application.</p> <p>Phalcon\\Assets\\Manager is available in the services container, so you can add resources from any part of the application where the container is available.</p>"},{"location":"assets/#adding-resources","title":"Adding Resources","text":"<p>Assets supports two built-in resources: CSS and JavaScripts. You can create other resources if you need. The assets manager internally stores two default collections of resources - one for JavaScript and another for CSS.</p> <p>You can easily add resources to these collections like follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    public function index()\n    {\n        // Add some local CSS resources\n        $this-&gt;assets-&gt;addCss('css/style.css');\n        $this-&gt;assets-&gt;addCss('css/index.css');\n\n        // And some local JavaScript resources\n        $this-&gt;assets-&gt;addJs('js/jquery.js');\n        $this-&gt;assets-&gt;addJs('js/bootstrap.min.js');\n    }\n}\n</code></pre> <p>Then in a view, these resources can be printed:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Some amazing website&lt;/title&gt;\n\n        &lt;?php $this-&gt;assets-&gt;outputCss(); ?&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;!-- ... --&gt;\n\n        &lt;?php $this-&gt;assets-&gt;outputJs(); ?&gt;\n    &lt;/body&gt;\n&lt;html&gt;\n</code></pre> <p>Volt syntax:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Some amazing website&lt;/title&gt;\n\n        {% raw %}{{ assets.outputCss() }}{% endraw %}\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;!-- ... --&gt;\n\n        {% raw %}{{ assets.outputJs() }}{% endraw %}\n    &lt;/body&gt;\n&lt;html&gt;\n</code></pre> <p>For better page load performance, it is recommended to place JavaScript at the end of the HTML instead of in the <code>&lt;head&gt;</code>.</p>"},{"location":"assets/#localremote-resources","title":"Local/Remote resources","text":"<p>Local resources are those who are provided by the same application and they're located in the document root of the application. URLs in local resources are generated by the <code>url</code> service, usually Phalcon\\Mvc\\Url.</p> <p>Remote resources are those such as common libraries like jQuery, Bootstrap, etc. that are provided by a CDN.</p> <p>The second parameter of <code>addCss()</code> and <code>addJs()</code> says whether the resource is local or not (<code>true</code> is local, <code>false</code> is remote). By default, the assets manager will assume the resource is local:</p> <pre><code>&lt;?php\n\npublic function indexAction()\n{\n    // Add some remote CSS resources\n    $this-&gt;assets-&gt;addCss('//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.4/css/bootstrap-combined.min.css', false);\n\n    // Then add some local CSS resources\n    $this-&gt;assets-&gt;addCss('css/style.css', true);\n    $this-&gt;assets-&gt;addCss('css/extra.css');\n}\n</code></pre>"},{"location":"assets/#collections","title":"Collections","text":"<p>Collections group resources of the same type. The assets manager implicitly creates two collections: <code>css</code> and <code>js</code>. You can create additional collections to group specific resources to make it easier to place those resources in the views:</p> <pre><code>&lt;?php\n\n// Javascripts in the header\n$headerCollection = $this-&gt;assets-&gt;collection('header');\n\n$headerCollection-&gt;addJs('js/jquery.js');\n$headerCollection-&gt;addJs('js/bootstrap.min.js');\n\n// Javascripts in the footer\n$footerCollection = $this-&gt;assets-&gt;collection('footer');\n\n$footerCollection-&gt;addJs('js/jquery.js');\n$footerCollection-&gt;addJs('js/bootstrap.min.js');\n</code></pre> <p>Then in the views:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Some amazing website&lt;/title&gt;\n\n        &lt;?php $this-&gt;assets-&gt;outputJs('header'); ?&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;!-- ... --&gt;\n\n        &lt;?php $this-&gt;assets-&gt;outputJs('footer'); ?&gt;\n    &lt;/body&gt;\n&lt;html&gt;\n</code></pre> <p>Volt syntax:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Some amazing website&lt;/title&gt;\n\n        {% raw %}{{ assets.outputCss('header') }}{% endraw %}\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;!-- ... --&gt;\n\n        {% raw %}{{ assets.outputJs('footer') }}{% endraw %}\n    &lt;/body&gt;\n&lt;html&gt;\n</code></pre>"},{"location":"assets/#url-prefixes","title":"URL Prefixes","text":"<p>Collections can be URL-prefixed, this enables you to easily change from one server to another at any moment:</p> <pre><code>&lt;?php\n\n$footerCollection = $this-&gt;assets-&gt;collection('footer');\n\nif ($config-&gt;environment === 'development') {\n    $footerCollection-&gt;setPrefix('/');\n} else {\n    $footerCollection-&gt;setPrefix('http:://cdn.example.com/');\n}\n\n$footerCollection-&gt;addJs('js/jquery.js');\n$footerCollection-&gt;addJs('js/bootstrap.min.js');\n</code></pre> <p>A chainable syntax is available too:</p> <pre><code>&lt;?php\n\n$headerCollection = $assets\n    -&gt;collection('header')\n    -&gt;setPrefix('http://cdn.example.com/')\n    -&gt;setLocal(false)\n    -&gt;addJs('js/jquery.js')\n    -&gt;addJs('js/bootstrap.min.js');\n</code></pre>"},{"location":"assets/#minificationfiltering","title":"Minification/Filtering","text":"<p><code>Phalcon\\Assets</code> provides built-in minification of JavaScript and CSS resources. You can create a collection of resources instructing the Assets Manager which ones must be filtered and which ones must be left as they are. In addition to the above, <code>Jsmin</code> by Douglas Crockford is part of the core extension offering minification of JavaScript files for maximum performance. In the CSS land, <code>CSSMin</code> by Ryan Day is also available to minify CSS files.</p> <p>The following example shows how to minify a collection of resources:</p> <pre><code>&lt;?php\n\n$manager\n\n    // These JavaScripts are located in the page's bottom\n    -&gt;collection('jsFooter')\n\n    // The name of the final output\n    -&gt;setTargetPath('final.js')\n\n    // The script tag is generated with this URI\n    -&gt;setTargetUri('production/final.js')\n\n    // This is a remote resource that does not need filtering\n    -&gt;addJs('code.jquery.com/jquery-1.10.0.min.js', false, false)\n\n    // These are local resources that must be filtered\n    -&gt;addJs('common-functions.js')\n    -&gt;addJs('page-functions.js')\n\n    // Join all the resources in a single file\n    -&gt;join(true)\n\n    // Use the built-in Jsmin filter\n    -&gt;addFilter(\n        new Phalcon\\Assets\\Filters\\Jsmin()\n    )\n\n    // Use a custom filter\n    -&gt;addFilter(\n        new MyApp\\Assets\\Filters\\LicenseStamper()\n    );\n</code></pre> <p>A collection can contain JavaScript or CSS resources but not both. Some resources may be remote, that is, they're obtained by HTTP from a remote source for further filtering. It is recommended to convert the external resources to local for better performance.</p> <p>As seen above, the <code>addJs()</code> method is used to add resources to the collection, the second parameter indicates whether the resource is external or not and the third parameter indicates whether the resource should be filtered or left as is:</p> <pre><code>&lt;?php\n\n// These Javascripts are located in the page's bottom\n$jsFooterCollection = $manager-&gt;collection('jsFooter');\n\n// This a remote resource that does not need filtering\n$jsFooterCollection-&gt;addJs('code.jquery.com/jquery-1.10.0.min.js', false, false);\n\n// These are local resources that must be filtered\n$jsFooterCollection-&gt;addJs('common-functions.js');\n$jsFooterCollection-&gt;addJs('page-functions.js');\n</code></pre> <p>Filters are registered in the collection, multiple filters are allowed, content in resources are filtered in the same order as filters were registered:</p> <pre><code>&lt;?php\n\n// Use the built-in Jsmin filter\n$jsFooterCollection-&gt;addFilter(\n    new Phalcon\\Assets\\Filters\\Jsmin()\n);\n\n// Use a custom filter\n$jsFooterCollection-&gt;addFilter(\n    new MyApp\\Assets\\Filters\\LicenseStamper()\n);\n</code></pre> <p>Note that both built-in and custom filters can be transparently applied to collections. The last step is to decide if all the resources in the collection must be joined into a single file or serve each of them individually. To tell the collection that all resources must be joined you can use the <code>join()</code> method.</p> <p>If resources are going to be joined, we need also to define which file will be used to store the resources and which URI will be used to show it. These settings are set up with <code>setTargetPath()</code> and <code>setTargetUri()</code>:</p> <pre><code>&lt;?php\n\n$jsFooterCollection-&gt;join(true);\n\n// The name of the final file path\n$jsFooterCollection-&gt;setTargetPath('public/production/final.js');\n\n// The script HTML tag is generated with this URI\n$jsFooterCollection-&gt;setTargetUri('production/final.js');\n</code></pre>"},{"location":"assets/#built-in-filters","title":"Built-In Filters","text":"<p>Phalcon provides 2 built-in filters to minify both JavaScript and CSS, their C-backend provide the minimum overhead to perform this task:</p> Filter Description Phalcon\\Assets\\Filters\\Jsmin Minifies JavaScript by removing unnecessary characters that are ignored by Javascript interpreters/compilers Phalcon\\Assets\\Filters\\Cssmin Minifies CSS by removing unnecessary characters that are already ignored by browsers"},{"location":"assets/#custom-filters","title":"Custom Filters","text":"<p>In addition to the built-in filters, you can create your own filters. These can take advantage of existing and more advanced tools like YUI, Sass, Closure, etc.:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Assets\\FilterInterface;\n\n/**\n * Filters CSS content using YUI\n *\n * @param string $contents\n * @return string\n */\nclass CssYUICompressor implements FilterInterface\n{\n    protected $options;\n\n    /**\n     * CssYUICompressor constructor\n     *\n     * @param array $options\n     */\n    public function __construct(array $options)\n    {\n        $this-&gt;options = $options;\n    }\n\n    /**\n     * Do the filtering\n     *\n     * @param string $contents\n     *\n     * @return string\n     */\n    public function filter($contents)\n    {\n        // Write the string contents into a temporal file\n        file_put_contents('temp/my-temp-1.css', $contents);\n\n        system(\n            $this-&gt;options['java-bin'] .\n            ' -jar ' .\n            $this-&gt;options['yui'] .\n            ' --type css ' .\n            'temp/my-temp-file-1.css ' .\n            $this-&gt;options['extra-options'] .\n            ' -o temp/my-temp-file-2.css'\n        );\n\n        // Return the contents of file\n        return file_get_contents('temp/my-temp-file-2.css');\n    }\n}\n</code></pre> <p>Usage:</p> <pre><code>&lt;?php\n\n// Get some CSS collection\n$css = $this-&gt;assets-&gt;get('head');\n\n// Add/Enable the YUI compressor filter in the collection\n$css-&gt;addFilter(\n    new CssYUICompressor(\n        [\n            'java-bin'      =&gt; '/usr/local/bin/java',\n            'yui'           =&gt; '/some/path/yuicompressor-x.y.z.jar',\n            'extra-options' =&gt; '--charset utf8',\n        ]\n    )\n);\n</code></pre> <p>In a previous example, we used a custom filter called <code>LicenseStamper</code>:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Assets\\FilterInterface;\n\n/**\n * Adds a license message to the top of the file\n *\n * @param string $contents\n *\n * @return string\n */\nclass LicenseStamper implements FilterInterface\n{\n    /**\n     * Do the filtering\n     *\n     * @param string $contents\n     * @return string\n     */\n    public function filter($contents)\n    {\n        $license = '/* (c) 2015 Your Name Here */';\n\n        return $license . PHP_EOL . PHP_EOL . $contents;\n    }\n}\n</code></pre>"},{"location":"assets/#custom-output","title":"Custom Output","text":"<p>The <code>outputJs()</code> and <code>outputCss()</code> methods are available to generate the necessary HTML code according to each type of resources. You can override this method or print the resources manually in the following way:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\n$jsCollection = $this-&gt;assets-&gt;collection('js');\n\nforeach ($jsCollection as $resource) {\n    echo Tag::javascriptInclude(\n        $resource-&gt;getPath()\n    );\n}\n</code></pre>"},{"location":"assets/#improving-performance","title":"Improving performance","text":"<p>There are many ways to optimize the processing resources. We'll describe a simple method below which allows to handle resourses directly through web server to optimize the response time.</p> <p>First we need to set up the Assets Manager. We'll use base controller, but you can use the service provider or any other place:</p> <pre><code>&lt;?php\n\nnamespace App\\Controllers;\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Assets\\Filters\\Jsmin;\n\n/**\n * App\\Controllers\\ControllerBase\n *\n * This is the base controller for all controllers in the application.\n */\nclass ControllerBase extends Controller\n{\n    public function onConstruct()\n    {\n        $this-&gt;assets\n            -&gt;useImplicitOutput(false)\n            -&gt;collection('global')\n            -&gt;addJs('https://code.jquery.com/jquery-3.4.1.js', false, true)\n            -&gt;addFilter(new Jsmin());\n    }\n}\n</code></pre> <p>Then we have to configure the routing:</p> <pre><code>&lt;?php\n/*\n * Define custom routes.\n * This file gets included in the router service definition.\n */\n$router = new Phalcon\\Mvc\\Router();\n\n$router-&gt;addGet('/assets/(css|js)/([\\w.-]+)\\.(css|js)', [\n    'controller' =&gt; 'assets',\n    'action'     =&gt; 'serve',\n    'type'       =&gt; 1,\n    'collection' =&gt; 2,\n    'extension'  =&gt; 3,\n]);\n\n// Other routes...\n</code></pre> <p>Finally, we need to create a controller to handle resource requests:</p> <pre><code>&lt;?php\n\nnamespace App\\Controllers;\n\nuse Phalcon\\Http\\Response;\n\n/**\n * Serve site assets.\n */\nclass AssetsController extends ControllerBase\n{\n    public function serveAction() : Response\n    {\n        // Getting a response instance\n        $response = new Response();\n\n        // Prepare output path\n        $collectionName = $this-&gt;dispatcher-&gt;getParam('collection');\n        $extension      = $this-&gt;dispatcher-&gt;getParam('extension');\n        $type           = $this-&gt;dispatcher-&gt;getParam('type');\n        $targetPath     = \"assets/{$type}/{$collectionName}.{$extension}\";\n\n        // Setting up the content type\n        $contentType = $type == 'js' ? 'application/javascript' : 'text/css';\n        $response-&gt;setContentType($contentType, 'UTF-8');\n\n        // Check collection existence\n        if (!$this-&gt;assets-&gt;exists($collectionName)) {\n            return $response-&gt;setStatusCode(404, 'Not Found');\n        }\n\n        // Setting up the Assets Collection\n        $collection = $this-&gt;assets\n            -&gt;collection($collectionName)\n            -&gt;setTargetUri($targetPath)\n            -&gt;setTargetPath($targetPath);\n\n        // Store content to the disk and return fully qualified file path\n        $contentPath = $this-&gt;assets-&gt;output($collection, function (array $parameters) {\n            return BASE_PATH . '/public/' . $parameters[0];\n        }, $type);\n\n        // Set the content of the response\n        $response-&gt;setContent(file_get_contents($contentPath));\n\n        // Return the response\n        return $response;\n    }\n}\n</code></pre> <p>If precompiled resources exist in the file system they must be served directly by web server. So to get the benefit of static resources we have to update our server configuration. We will use an example configuration for Nginx. For Apache it will be a little different:</p> <pre><code>location ~ ^/assets/ {\n    expires 1y;\n    add_header Cache-Control public;\n    add_header ETag \"\";\n\n    # If the file exists as a static file serve it directly without\n    # running all the other rewrite tests on it\n    try_files $uri $uri/ @phalcon;\n}\n\nlocation / {\n    try_files $uri $uri/ @phalcon;\n}\n\nlocation @phalcon {\n    rewrite ^(.*)$ /index.php?_url=$1;\n}\n\n# Other configuration\n</code></pre> <p>We need to create <code>assets/js</code> and <code>assets/css</code> directories in the document root of the application (eg. <code>public</code>).</p> <p>Every time when the user requests resources using address of type <code>/assets/js/global.js</code> the request will be redirected to <code>AssetsController</code> in case this file is absent in the filesystem. Otherwise the resource will be handled by the web server.</p> <p>It isn't the best example. However, it reflects the main idea: the reasonable configuration of a web server with an application can help optimize response time multifold.</p> <p>Learn more about the Web Server Setup and Routing in their dedicated articles Web Server Setup and Routing.</p>"},{"location":"cache/","title":"Improving Performance with Cache","text":"<p>Phalcon provides the <code>Phalcon\\Cache</code> class allowing faster access to frequently used or already processed data. <code>Phalcon\\Cache</code> is written in C, achieving higher performance and reducing the overhead when getting items from the backends. This class uses an internal structure of frontend and backend components. Front-end components act as input sources or interfaces, while backend components offer storage options to the class.</p>"},{"location":"cache/#when-to-implement-cache","title":"When to implement cache?","text":"<p>Although this component is very fast, implementing it in cases that are not needed could lead to a loss of performance rather than gain. We recommend you check this cases before using a cache:</p> <ul> <li>You are making complex calculations that every time return the same result (changing infrequently)</li> <li>You are using a lot of helpers and the output generated is almost always the same</li> <li>You are accessing database data constantly and these data rarely change</li> </ul> <p>NOTE</p> <p>Even after implementing the cache, you should check the hit ratio of your cache over a period of time. This can easily be done, especially in the case of Memcache or Apc, with the relevant tools that the backends provide.</p>"},{"location":"cache/#caching-behavior","title":"Caching Behavior","text":"<p>The caching process is divided into 2 parts:</p> <ul> <li>Frontend: This part is responsible for checking if a key has expired and perform additional transformations to the data before storing and after retrieving them from the backend-</li> <li>Backend: This part is responsible for communicating, writing/reading the data required by the frontend.</li> </ul>"},{"location":"cache/#factory","title":"Factory","text":"<p>Instantiating frontend or backend adapters can be achieved by two ways:</p> <p>Traditional way</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Backend\\File as BackFile;\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n// Create an Output frontend. Cache the files for 2 days\n$frontCache = new FrontData(\n    [\n        'lifetime' =&gt; 172800,\n    ]\n);\n\n// Create the component that will cache from the 'Output' to a 'File' backend\n// Set the cache file directory - it's important to keep the '/' at the end of\n// the value for the folder\n$cache = new BackFile(\n    $frontCache,\n    [\n        'cacheDir' =&gt; '../app/cache/',\n    ]\n);\n</code></pre> <p>or using the Factory object as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Frontend\\Factory as FFactory;\nuse Phalcon\\Cache\\Backend\\Factory as BFactory;\n\n $options = [\n     'lifetime' =&gt; 172800,\n     'adapter'  =&gt; 'data',\n ];\n $frontendCache = FFactory::load($options);\n\n\n$options = [\n    'cacheDir' =&gt; '../app/cache/',\n    'prefix'   =&gt; 'app-data',\n    'frontend' =&gt; $frontendCache,\n    'adapter'  =&gt; 'file',\n];\n\n$backendCache = BFactory::load($options);\n</code></pre>"},{"location":"cache/#caching-output-fragments","title":"Caching Output Fragments","text":"<p>An output fragment is a piece of HTML or text that is cached as is and returned as is. The output is automatically captured from the <code>ob_*</code> functions or the PHP output so that it can be saved in the cache. The following example demonstrates such usage. It receives the output generated by PHP and stores it into a file. The contents of the file are refreshed every 172,800 seconds (2 days).</p> <p>The implementation of this caching mechanism allows us to gain performance by not executing the helper <code>Phalcon\\Tag::linkTo()</code> call whenever this piece of code is called.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\nuse Phalcon\\Cache\\Backend\\File as BackFile;\nuse Phalcon\\Cache\\Frontend\\Output as FrontOutput;\n\n// Create an Output frontend. Cache the files for 2 days\n$frontCache = new FrontOutput(\n    [\n        'lifetime' =&gt; 172800,\n    ]\n);\n\n// Create the component that will cache from the 'Output' to a 'File' backend\n// Set the cache file directory - it's important to keep the '/' at the end of\n// the value for the folder\n$cache = new BackFile(\n    $frontCache,\n    [\n        'cacheDir' =&gt; '../app/cache/',\n    ]\n);\n\n// Get/Set the cache file to ../app/cache/my-cache.html\n$content = $cache-&gt;start('my-cache.html');\n\n// If $content is null then the content will be generated for the cache\nif ($content === null) {\n    // Print date and time\n    echo date('r');\n\n    // Generate a link to the sign-up action\n    echo Tag::linkTo(\n        [\n            'user/signup',\n            'Sign Up',\n            'class' =&gt; 'signup-button',\n        ]\n    );\n\n    // Store the output into the cache file\n    $cache-&gt;save();\n} else {\n    // Echo the cached output\n    echo $content;\n}\n</code></pre> <p>NOTE</p> <p>In the example above, our code remains the same, echoing output to the user as it has been doing before. Our cache component transparently captures that output and stores it in the cache file (when the cache is generated) or it sends it back to the user pre-compiled from a previous call, thus avoiding expensive operations.</p>"},{"location":"cache/#caching-arbitrary-data","title":"Caching Arbitrary Data","text":"<p>Caching just data is equally important for your application. Caching can reduce database load by reusing commonly used (but not updated) data, thus speeding up your application.</p>"},{"location":"cache/#file-backend-example","title":"File Backend Example","text":"<p>One of the caching adapters is <code>File</code>. The only key area for this adapter is the location of where the cache files will be stored. This is controlled by the <code>cacheDir</code> option which must have a backslash at the end of it.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Backend\\File as BackFile;\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n// Cache the files for 2 days using a Data frontend\n$frontCache = new FrontData(\n    [\n        'lifetime' =&gt; 172800,\n    ]\n);\n\n// Create the component that will cache 'Data' to a 'File' backend\n// Set the cache file directory - important to keep the `/` at the end of\n// the value for the folder\n$cache = new BackFile(\n    $frontCache,\n    [\n        'cacheDir' =&gt; '../app/cache/',\n    ]\n);\n\n$cacheKey = 'robots_order_id.cache';\n\n// Try to get cached records\n$robots = $cache-&gt;get($cacheKey);\n\nif ($robots === null) {\n    // $robots is null because of cache expiration or data does not exist\n    // Make the database call and populate the variable\n    $robots = Robots::find(\n        [\n            'order' =&gt; 'id',\n        ]\n    );\n\n    // Store it in the cache\n    $cache-&gt;save($cacheKey, $robots);\n}\n\n// Use $robots :)\nforeach ($robots as $robot) {\n   echo $robot-&gt;name, '\\n';\n}\n</code></pre>"},{"location":"cache/#memcached-backend-example","title":"Memcached Backend Example","text":"<p>The above example changes slightly (especially in terms of configuration) when we are using a Memcached backend.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\nuse Phalcon\\Cache\\Backend\\Libmemcached as BackMemCached;\n\n// Cache data for one hour\n$frontCache = new FrontData(\n    [\n        'lifetime' =&gt; 3600,\n    ]\n);\n\n// Create the component that will cache 'Data' to a 'Memcached' backend\n// Memcached connection settings\n$cache = new BackMemCached(\n    $frontCache,\n    [\n        'servers' =&gt; [\n            [\n                'host'   =&gt; '127.0.0.1',\n                'port'   =&gt; '11211',\n                'weight' =&gt; '1',\n            ]\n        ]\n    ]\n);\n\n$cacheKey = 'robots_order_id.cache';\n\n// Try to get cached records\n$robots = $cache-&gt;get($cacheKey);\n\nif ($robots === null) {\n    // $robots is null because of cache expiration or data does not exist\n    // Make the database call and populate the variable\n    $robots = Robots::find(\n        [\n            'order' =&gt; 'id',\n        ]\n    );\n\n    // Store it in the cache\n    $cache-&gt;save($cacheKey, $robots);\n}\n\n// Use $robots :)\nforeach ($robots as $robot) {\n   echo $robot-&gt;name, '\\n';\n}\n</code></pre> <p>NOTE</p> <p>Calling <code>save()</code> will return a boolean, indicating success (<code>true</code>) or failure (<code>false</code>). Depending on the backend that you use, you will need to look at the relevant logs to identify failures.</p>"},{"location":"cache/#querying-the-cache","title":"Querying the cache","text":"<p>The elements added to the cache are uniquely identified by a key. In the case of the File backend, the key is the actual filename. To retrieve data from the cache, we just have to call it using the unique key. If the key does not exist, the get method will return null.</p> <pre><code>&lt;?php\n\n// Retrieve products by key 'myProducts'\n$products = $cache-&gt;get('myProducts');\n</code></pre> <p>If you want to know which keys are stored in the cache you could call the <code>queryKeys</code> method:</p> <pre><code>&lt;?php\n\n// Query all keys used in the cache\n$keys = $cache-&gt;queryKeys();\n\nforeach ($keys as $key) {\n    $data = $cache-&gt;get($key);\n\n    echo 'Key=', $key, ' Data=', $data;\n}\n\n// Query keys in the cache that begins with 'my-prefix'\n$keys = $cache-&gt;queryKeys('my-prefix');\n</code></pre>"},{"location":"cache/#deleting-data-from-the-cache","title":"Deleting data from the cache","text":"<p>There are times where you will need to forcibly invalidate a cache entry (due to an update in the cached data). The only requirement is to know the key that the data have been stored with.</p> <pre><code>&lt;?php\n\n// Delete an item with a specific key\n$cache-&gt;delete('someKey');\n\n$keys = $cache-&gt;queryKeys();\n\n// Delete all items from the cache\nforeach ($keys as $key) {\n    $cache-&gt;delete($key);\n}\n</code></pre>"},{"location":"cache/#checking-cache-existence","title":"Checking cache existence","text":"<p>It is possible to check if a cache already exists with a given key:</p> <pre><code>&lt;?php\n\nif ($cache-&gt;exists('someKey')) {\n    echo $cache-&gt;get('someKey');\n} else {\n    echo 'Cache does not exists!';\n}\n</code></pre>"},{"location":"cache/#lifetime","title":"Lifetime","text":"<p>A <code>lifetime</code> is a time in seconds that a cache could live without expire. By default, all the created caches use the lifetime set in the frontend creation. You can set a specific lifetime in the creation or retrieving of the data from the cache:</p> <p>Setting the lifetime when retrieving:</p> <pre><code>&lt;?php\n\n$cacheKey = 'my.cache';\n\n// Setting the cache when getting a result\n$robots = $cache-&gt;get($cacheKey, 3600);\n\nif ($robots === null) {\n    $robots = 'some robots';\n\n    // Store it in the cache\n    $cache-&gt;save($cacheKey, $robots);\n}\n</code></pre> <p>Setting the lifetime when saving:</p> <pre><code>&lt;?php\n\n$cacheKey = 'my.cache';\n\n$robots = $cache-&gt;get($cacheKey);\n\nif ($robots === null) {\n    $robots = 'some robots';\n\n    // Setting the cache when saving data\n    $cache-&gt;save($cacheKey, $robots, 3600);\n}\n</code></pre>"},{"location":"cache/#multi-level-cache","title":"Multi-Level Cache","text":"<p>This feature of the cache component, allows the developer to implement a multi-level cache. This new feature is very useful because you can save the same data in several cache locations with different lifetimes, reading first from the one with the faster adapter and ending with the slowest one until the data expires:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Multiple;\nuse Phalcon\\Cache\\Backend\\Apc as ApcCache;\nuse Phalcon\\Cache\\Backend\\File as FileCache;\nuse Phalcon\\Cache\\Frontend\\Data as DataFrontend;\nuse Phalcon\\Cache\\Backend\\Memcache as MemcacheCache;\n\n$ultraFastFrontend = new DataFrontend(\n    [\n        'lifetime' =&gt; 3600,\n    ]\n);\n\n$fastFrontend = new DataFrontend(\n    [\n        'lifetime' =&gt; 86400,\n    ]\n);\n\n$slowFrontend = new DataFrontend(\n    [\n        'lifetime' =&gt; 604800,\n    ]\n);\n\n// Backends are registered from the fastest to the slower\n$cache = new Multiple(\n    [\n        new ApcCache(\n            $ultraFastFrontend,\n            [\n                'prefix' =&gt; 'cache',\n            ]\n        ),\n        new MemcacheCache(\n            $fastFrontend,\n            [\n                'prefix' =&gt; 'cache',\n                'host'   =&gt; 'localhost',\n                'port'   =&gt; '11211',\n            ]\n        ),\n        new FileCache(\n            $slowFrontend,\n            [\n                'prefix'   =&gt; 'cache',\n                'cacheDir' =&gt; '../app/cache/',\n            ]\n        ),\n    ]\n);\n\n// Save, saves in every backend\n$cache-&gt;save('my-key', $data);\n</code></pre>"},{"location":"cache/#frontend-adapters","title":"Frontend Adapters","text":"<p>The available frontend adapters that are used as interfaces or input sources to the cache are:</p> Adapter Description Phalcon\\Cache\\Frontend\\Output Read input data from standard PHP output. Phalcon\\Cache\\Frontend\\Data It's used to cache any kind of PHP data (big arrays, objects, text, etc). Data is serialized before stored in the backend. Phalcon\\Cache\\Frontend\\Base64 It's used to cache binary data. The data is serialized using <code>base64_encode</code> before be stored in the backend. Phalcon\\Cache\\Frontend\\Json Data is encoded in JSON before be stored in the backend. Decoded after be retrieved. This frontend is useful to share data with other languages or frameworks. Phalcon\\Cache\\Frontend\\Igbinary It's used to cache any kind of PHP data (big arrays, objects, text, etc). Data is serialized using <code>Igbinary</code> before be stored in the backend. Phalcon\\Cache\\Frontend\\None It's used to cache any kind of PHP data without serializing them."},{"location":"cache/#implementing-your-own-frontend-adapters","title":"Implementing your own Frontend adapters","text":"<p>The Phalcon\\Cache\\FrontendInterface interface must be implemented in order to create your own frontend adapters or extend the existing ones.</p>"},{"location":"cache/#backend-adapters","title":"Backend Adapters","text":"<p>The backend adapters available to store cache data are:</p> Adapter Description Info Required Extensions Phalcon\\Cache\\Backend\\Apc Stores data to the Alternative PHP Cache (APC). APC APC <code>Phalcon\\Cache\\Backend\\Apcu</code> Stores data to the APCu (APC without opcode caching) APCu APCu Phalcon\\Cache\\Backend\\File Stores data to local plain files. Phalcon\\Cache\\Backend\\Libmemcached Stores data to a memcached server. Memcached Memcached Phalcon\\Cache\\Backend\\Memcache Stores data to a memcached server. Memcache Memcache Phalcon\\Cache\\Backend\\Memory Stores data in memory Phalcon\\Cache\\Backend\\Mongo Stores data to Mongo Database. MongoDB Mongo Phalcon\\Cache\\Backend\\Redis Stores data in Redis. Redis Redis Phalcon\\Cache\\Backend\\Xcache Stores data in XCache. XCache XCache"},{"location":"cache/#note-in-php-7-to-use-phalcon-apc-based-adapter-classes-you-needed-to-install-apcu-and-apcu_bc-package-from-pecl-now-in-phalcon-340-you-can-switch-your-apc-classes-to-apcu-and-remove-apcu_bc-keep-in-mind-that-in-phalcon-4-we-will-most-likely-remove-all-apc-classes","title":"NOTE In PHP 7 to use phalcon <code>apc</code> based adapter classes you needed to install <code>apcu</code> and <code>apcu_bc</code> package from pecl. Now in Phalcon 3.4.0 you can switch your <code>\\Apc classes to <code>\\Apcu</code> and remove <code>apcu_bc</code>. Keep in mind that in Phalcon 4 we will most likely remove all <code>*\\Apc</code> classes.","text":""},{"location":"cache/#factory_1","title":"Factory","text":"<p>There are many backend adapters (see Backend Adapters). The one you use will depend on the needs of your application. The following example loads the Backend Cache Adapter class using <code>adapter</code> option, if frontend will be provided as array it will call Frontend Cache Factory</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Backend\\Factory;\nuse Phalcon\\Cache\\Frontend\\Data;\n\n$options = [\n    'prefix'   =&gt; 'app-data',\n    'frontend' =&gt; new Data(),\n    'adapter'  =&gt; 'apc',\n];\n$backendCache = Factory::load($options);\n</code></pre>"},{"location":"cache/#implementing-your-own-backend-adapters","title":"Implementing your own Backend adapters","text":"<p>The Phalcon\\Cache\\BackendInterface interface must be implemented in order to create your own backend adapters or extend the existing ones.</p>"},{"location":"cache/#file-backend-options","title":"File Backend Options","text":"<p>This backend will store cached content into files in the local server. The available options for this backend are:</p> Option Description <code>prefix</code> A prefix that is automatically prepended to the cache keys. <code>cacheDir</code> A writable directory on which cached files will be placed."},{"location":"cache/#libmemcached-backend-options","title":"Libmemcached Backend Options","text":"<p>This backend will store cached content on a memcached server. Per default persistent memcached connection pools are used. The available options for this backend are:</p> <p>General options</p> Option Description <code>statsKey</code> Used to tracking of cached keys. <code>prefix</code> A prefix that is automatically prepended to the cache keys. <code>persistent_id</code> To create an instance that persists between requests, use <code>persistent_id</code> to specify a unique ID for the instance. <p>Servers options</p> Option Description <code>host</code> The <code>memcached</code> host. <code>port</code> The <code>memcached</code> port. <code>weight</code> The weight parameter effects the consistent hashing used to determine which server to read/write keys from. <p>Client options</p> <p>Used for setting Memcached options. See Memcached::setOptions for more.</p> <p>Example</p> <pre><code>&lt;?php\nuse Phalcon\\Cache\\Backend\\Libmemcached;\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n// Cache data for 2 days\n$frontCache = new FrontData(\n    [\n        'lifetime' =&gt; 172800,\n    ]\n);\n\n// Create the Cache setting memcached connection options\n$cache = new Libmemcached(\n    $frontCache,\n    [\n        'servers' =&gt; [\n            [\n                'host'   =&gt; '127.0.0.1',\n                'port'   =&gt; 11211,\n                'weight' =&gt; 1,\n            ],\n        ],\n        'client' =&gt; [\n            \\Memcached::OPT_HASH       =&gt; \\Memcached::HASH_MD5,\n            \\Memcached::OPT_PREFIX_KEY =&gt; 'prefix.',\n        ],\n        'persistent_id' =&gt; 'my_app_cache',\n    ]\n);\n</code></pre>"},{"location":"cache/#memcache-backend-options","title":"Memcache Backend Options","text":"<p>This backend will store cached content on a memcached server. The available options for this backend are:</p> Option Description <code>prefix</code> A prefix that is automatically prepended to the cache keys. <code>host</code> The memcached host. <code>port</code> The memcached port. <code>persistent</code> Create a persistent connection to memcached?"},{"location":"cache/#apc-backend-options","title":"APC Backend Options","text":"<p>This backend will store cached content on Alternative PHP Cache (APC). The available options for this backend are:</p> Option Description <code>prefix</code> A prefix that is automatically prepended to the cache keys."},{"location":"cache/#apcu-backend-options","title":"APCU Backend Options","text":"<p>This backend will store cached content on Alternative PHP Cache (APCU). The available options for this backend are:</p> Option Description <code>prefix</code> A prefix that is automatically prepended to the cache keys."},{"location":"cache/#mongo-backend-options","title":"Mongo Backend Options","text":"<p>This backend will store cached content on a MongoDB server (MongoDB). The available options for this backend are:</p> Option Description <code>prefix</code> A prefix that is automatically prepended to the cache keys. <code>server</code> A MongoDB connection string. <code>db</code> Mongo database name. <code>collection</code> Mongo collection in the database."},{"location":"cache/#xcache-backend-options","title":"XCache Backend Options","text":"<p>This backend will store cached content on XCache (XCache                    ). The available options for this backend are:</p> Option Description <code>prefix</code> A prefix that is automatically prepended to the cache keys."},{"location":"cache/#redis-backend-options","title":"Redis Backend Options","text":"<p>This backend will store cached content on a Redis server (Redis). The available options for this backend are:</p> Option Description <code>prefix</code> A prefix that is automatically prepended to the cache keys. <code>host</code> Redis host. <code>port</code> Redis port. <code>auth</code> Password to authenticate to a password-protected Redis server. <code>persistent</code> Create a persistent connection to Redis. <code>index</code> The index of the Redis database to use. <p>There are more adapters available for this components in the Phalcon Incubator</p>"},{"location":"config/","title":"Reading Configurations","text":"<p>Phalcon\\Config is a component used to convert configuration files of various formats (using adapters) into PHP objects for use in an application.</p> <p>Values can be obtained from <code>Phalcon\\Config</code> as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config;\n\n$config = new Config(\n    [\n        'test' =&gt; [\n            'parent' =&gt; [\n                'property'  =&gt; 1,\n                'property2' =&gt; 'yeah',\n            ],\n        ],  \n    ]\n);\n\necho $config-&gt;get('test')-&gt;get('parent')-&gt;get('property');  // displays 1\necho $config-&gt;test-&gt;parent-&gt;property;                       // displays 1\necho $config-&gt;path('test.parent.property');                 // displays 1\n</code></pre>"},{"location":"config/#factory","title":"Factory","text":"<p>Loads Config Adapter class using <code>adapter</code> option, if no extension is provided it will be added to <code>filePath</code></p> <pre><code>&lt;?php\n\nuse Phalcon\\Config\\Factory;\n\n$options = [\n    'filePath' =&gt; 'path/config',\n    'adapter'  =&gt; 'php',\n ];\n\n $config = Factory::load($options);\n ```\n\n\n## Native Arrays\nThe first example shows how to convert native arrays into [Phalcon\\Config](api/Phalcon_Config.md) objects. This option offers the best performance since no files are read during this request.\n\n```php\n&lt;?php\n\nuse Phalcon\\Config;\n\n$settings = [\n    'database' =&gt; [\n        'adapter'  =&gt; 'Mysql',\n        'host'     =&gt; 'localhost',\n        'username' =&gt; 'scott',\n        'password' =&gt; 'cheetah',\n        'dbname'   =&gt; 'test_db'\n    ],\n     'app' =&gt; [\n        'controllersDir' =&gt; '../app/controllers/',\n        'modelsDir'      =&gt; '../app/models/',\n        'viewsDir'       =&gt; '../app/views/'\n    ],\n    'mysetting' =&gt; 'the-value'\n];\n\n$config = new Config($settings);\n\necho $config-&gt;app-&gt;controllersDir, \"\\n\";\necho $config-&gt;database-&gt;username, \"\\n\";\necho $config-&gt;mysetting, \"\\n\";\n</code></pre> <p>If you want to better organize your project you can save the array in another file and then read it.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config;\n\nrequire 'config/config.php';\n\n$config = new Config($settings);\n</code></pre>"},{"location":"config/#file-adapters","title":"File Adapters","text":"<p>The adapters available are:</p> Class Description Phalcon\\Config\\Adapter\\Ini Uses INI files to store settings. Internally the adapter uses the PHP function <code>parse_ini_file</code>. Phalcon\\Config\\Adapter\\Json Uses JSON files to store settings. Phalcon\\Config\\Adapter\\Php Uses PHP multidimensional arrays to store settings. This adapter offers the best performance. Phalcon\\Config\\Adapter\\Yaml Uses YAML files to store settings."},{"location":"config/#reading-ini-files","title":"Reading INI Files","text":"<p>Ini files are a common way to store settings. Phalcon\\Config uses the optimized PHP function <code>parse_ini_file</code> to read these files. Files sections are parsed into sub-settings for easy access.</p> <pre><code>[database]\nadapter  = Mysql\nhost     = localhost\nusername = scott\npassword = cheetah\ndbname   = test_db\n\n[phalcon]\ncontrollersDir = '../app/controllers/'\nmodelsDir      = '../app/models/'\nviewsDir       = '../app/views/'\n\n[models]\nmetadata.adapter  = 'Memory'\n</code></pre> <p>You can read the file as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config\\Adapter\\Ini as ConfigIni;\n\n$config = new ConfigIni('path/config.ini');\n\necho $config-&gt;phalcon-&gt;controllersDir, \"\\n\";\necho $config-&gt;database-&gt;username, \"\\n\";\necho $config-&gt;models-&gt;metadata-&gt;adapter, \"\\n\";\n</code></pre>"},{"location":"config/#merging-configurations","title":"Merging Configurations","text":"<p>Phalcon\\Config can recursively merge the properties of one configuration object into another. New properties are added and existing properties are updated.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config;\n\n$config = new Config(\n    [\n        'database' =&gt; [\n            'host'   =&gt; 'localhost',\n            'dbname' =&gt; 'test_db',\n        ],\n        'debug' =&gt; 1,\n    ]\n);\n\n$config2 = new Config(\n    [\n        'database' =&gt; [\n            'dbname'   =&gt; 'production_db',\n            'username' =&gt; 'scott',\n            'password' =&gt; 'secret',\n        ],\n        'logging' =&gt; 1,\n    ]\n);\n\n$config-&gt;merge($config2);\n\nprint_r($config);\n</code></pre> <p>The above code produces the following:</p> <pre><code>Phalcon\\Config Object\n(\n    [database] =&gt; Phalcon\\Config Object\n        (\n            [host] =&gt; localhost\n            [dbname]   =&gt; production_db\n            [username] =&gt; scott\n            [password] =&gt; secret\n        )\n    [debug] =&gt; 1\n    [logging] =&gt; 1\n)\n</code></pre> <p>There are more adapters available for this components in the Phalcon Incubator</p>"},{"location":"config/#nested-configuration","title":"Nested Configuration","text":"<p>You may easily access nested configuration values using the <code>Phalcon\\Config::path</code> method. This method allows to obtain values, without caring about the fact that some parts of the path are absent. Let's look at an example:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config;\n\n$config = new Config(\n   [\n        'phalcon' =&gt; [\n            'baseuri' =&gt; '/phalcon/'\n        ],\n        'models' =&gt; [\n            'metadata' =&gt; 'memory'\n        ],\n        'database' =&gt; [\n            'adapter'  =&gt; 'mysql',\n            'host'     =&gt; 'localhost',\n            'username' =&gt; 'user',\n            'password' =&gt; 'passwd',\n            'name'     =&gt; 'demo'\n        ],\n        'test' =&gt; [\n            'parent' =&gt; [\n                'property' =&gt; 1,\n                'property2' =&gt; 'yeah'\n            ],\n        ],\n   ]\n);\n\n// Using dot as delimiter\n$config-&gt;path('test.parent.property2');    // yeah\n$config-&gt;path('database.host', null, '.'); // localhost\n\n$config-&gt;path('test.parent'); // Phalcon\\Config\n\n// Using slash as delimiter. A default value may also be specified and\n// will be returned if the configuration option does not exist.\n$config-&gt;path('test/parent/property3', 'no', '/'); // no\n\nConfig::setPathDelimiter('/');\n$config-&gt;path('test/parent/property2'); // yeah\n</code></pre> <p>The following example shows how to create usefull facade to access nested configuration values:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Config;\n\n/**\n * @return mixed|Config\n */\nfunction config() {\n    $args = func_get_args();\n    $config = Di::getDefault()-&gt;getShared(__FUNCTION__);\n\n    if (empty($args)) {\n       return $config;\n    }\n\n    return call_user_func_array([$config, 'path'], $args);\n}\n</code></pre>"},{"location":"config/#injecting-configuration-dependency","title":"Injecting Configuration Dependency","text":"<p>You can inject your configuration to the controller allowing us to use Phalcon\\Config inside Phalcon\\Mvc\\Controller. To be able to do that, you have to add it as a service in the Dependency Injector container. Add following code inside your bootstrap file:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Config;\n\n// Create a DI\n$di = new FactoryDefault();\n\n$di-&gt;set(\n    'config',\n    function () {\n        $configData = require 'config/config.php';\n\n        return new Config($configData);\n    }\n);\n</code></pre> <p>Now in your controller you can access your configuration by using dependency injection feature using name <code>config</code> like following code:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass MyController extends Controller\n{\n    private function getDatabaseName()\n    {\n        return $this-&gt;config-&gt;database-&gt;dbname;\n    }\n}\n</code></pre>"},{"location":"contributions/","title":"Contributing to Phalcon","text":"<p>Phalcon is an open source project and heavily relies on volunteer efforts. We welcome contributions from everyone!</p> <p>Please take a moment to review this document in order to make the contribution process easy and effective for all.</p> <p>Following these guidelines, allows better communication, faster resolution of issues and moves the project forward.</p>"},{"location":"contributions/#contributions","title":"Contributions","text":"<p>Contributions to Phalcon should be made in the form of GitHub pull requests. Each pull request will be reviewed by a core contributor (someone with permission to merge pull requests). Based on the type and content of the pull request, it can either be merged immediately, put on hold if clarifications are needed, or rejected.</p> <p>Please ensure that you are sending your pull request to the correct branch and that you already have rebased your code.</p>"},{"location":"contributions/#questions-and-support","title":"Questions and Support","text":"<p>NOTE</p> <p>We only accept bug reports, new feature requests and pull requests in GitHub. For questions regarding the usage of the framework or support requests please visit the github discussions.</p>"},{"location":"contributions/#bug-report-checklist","title":"Bug Report Checklist","text":"<ul> <li>Make sure you are using the latest released version of Phalcon before submitting a bug report. Bugs in versions older than the latest released one will not be addressed by the core team.</li> <li>If you have found a bug, it is essential to add relevant information to reproduce it. Being able to reproduce a bug greatly reduces the time to investigate and fix it. This information should come in the form of a script, small application, or even a failing test. Please check Submit Reproducible Test for more information.</li> <li>As part of your report, please include additional information such as the OS, PHP version, Phalcon version, web server, memory etc.</li> <li>If you're submitting a Segmentation Fault error, we would require a backtrace. Please check Generating a Backtrace for more information.</li> </ul>"},{"location":"contributions/#generating-a-backtrace","title":"Generating a backtrace","text":"<p>Sometimes due to Segmentation Fault error, Phalcon could crash some of your web server processes. Please help us to find out the problem by adding a crash backtrace to your bug report.</p> <p>Please follow this guides to understand how to generate the backtrace:</p> <ul> <li>Generating a gdb backtrace</li> <li>Generating a backtrace, with a compiler, on Win32</li> <li>Debugging Symbols</li> <li>Building PHP</li> </ul>"},{"location":"contributions/#pull-request-checklist","title":"Pull Request Checklist","text":"<ul> <li>Don't submit your pull requests to the <code>master</code> branch. Branch from the required branch and, if needed, rebase to the proper branch before submitting your pull request. If it doesn't merge cleanly with master you may be asked to rebase your changes</li> <li>Don't put submodule updates, <code>composer.lock</code>, etc in your pull request unless they are to merged commits</li> <li>Add tests relevant to the fixed bug or new feature. See our testing guide for more information</li> <li>Phalcon is written in Zephir, please do not submit commits that modify C generated files directly or those whose functionality/fixes are implemented in the C programming language</li> <li>Make sure that the PHP code you write fits with the general style and coding standards of the Accepted PHP Standards</li> <li>Remove any change to <code>ext/kernel</code>, <code>*.zep.c</code> and <code>*.zep.h</code> files before submitting the pull request</li> </ul> <p>Before submit new functionality, please open a NFR as a new issue on GitHub to discuss the impact of including the functionality or changes in the core extension. Once the functionality is approved, make sure your PR contains the following:</p> <ul> <li>An update to the <code>CHANGELOG.md</code></li> <li>Unit Tests</li> <li>Documentation or Usage Examples</li> </ul>"},{"location":"contributions/#getting-support","title":"Getting Support","text":"<p>If you have any questions about how to use Phalcon, please see the support page.</p>"},{"location":"contributions/#requesting-features","title":"Requesting Features","text":"<p>If you have any changes or new features in mind, please fill an NFR.</p> <p>Thanks!</p> <p>&lt;3 Phalcon Team</p>"},{"location":"controllers/","title":"Overview","text":""},{"location":"controllers/#using-controllers","title":"Using Controllers","text":"<p>Actions are methods on a controller that handle requests. By default all public methods on a controller map to actions and are accessible by a URL. Actions are responsible for interpreting the request and creating the response. Usually responses are in the form of a rendered view, but there are other ways to create responses as well.</p> <p>For instance, when you access a URL like this: <code>http://localhost/blog/posts/show/2015/the-post-title</code> Phalcon by default will decompose each part like this:</p> Description Slug Phalcon Directory blog Controller posts Action show Parameter 2015 Parameter the-post-title <p>In this case, the <code>PostsController</code> will handle this request. There is no a special location to put controllers in an application, they could be loaded using Phalcon\\Loader, so you're free to organize your controllers as you need.</p> <p>Controllers must have the suffix <code>Controller</code> while actions the suffix <code>Action</code>. A sample of a controller is as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction($year, $postTitle)\n    {\n\n    }\n}\n</code></pre> <p>Additional URI parameters are defined as action parameters, so that they can be easily accessed using local variables. A controller can optionally extend Phalcon\\Mvc\\Controller. By doing this, the controller can have easy access to the application services.</p> <p>Parameters without a default value are handled as required. Setting optional values for parameters is done as usual in PHP:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction($year = 2015, $postTitle = 'some default title')\n    {\n\n    }\n}\n</code></pre> <p>Parameters are assigned in the same order as they were passed in the route. You can get an arbitrary parameter from its name in the following way:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction()\n    {\n        $year      = $this-&gt;dispatcher-&gt;getParam('year');\n        $postTitle = $this-&gt;dispatcher-&gt;getParam('postTitle');\n    }\n}\n</code></pre>"},{"location":"controllers/#dispatch-loop","title":"Dispatch Loop","text":"<p>The dispatch loop will be executed within the Dispatcher until there are no actions left to be executed. In the previous example only one action was executed. Now we'll see how the <code>forward()</code> method can provide a more complex flow of operation in the dispatch loop, by forwarding execution to a different controller/action.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction($year, $postTitle)\n    {\n        $this-&gt;flash-&gt;error(\n            \"You don't have permission to access this area\"\n        );\n\n        // Forward flow to another action\n        $this-&gt;dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'users',\n                'action'     =&gt; 'signin',\n            ]\n        );\n    }\n}\n</code></pre> <p>If users don't have permission to access a certain action then they will be forwarded to the <code>signin</code> action in the <code>UsersController</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function signinAction()\n    {\n\n    }\n}\n</code></pre> <p>There is no limit on the <code>forwards</code> you can have in your application, so long as they do not result in circular references, at which point your application will halt. If there are no other actions to be dispatched by the dispatch loop, the dispatcher will automatically invoke the view layer of the MVC that is managed by Phalcon\\Mvc\\View.</p>"},{"location":"controllers/#initializing-controllers","title":"Initializing Controllers","text":"<p>Phalcon\\Mvc\\Controller offers the <code>initialize()</code> method, which is executed first, before any action is executed on a controller. The use of the <code>__construct()</code> method is not recommended.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public $settings;\n\n    public function initialize()\n    {\n        $this-&gt;settings = [\n            'mySetting' =&gt; 'value',\n        ];\n    }\n\n    public function saveAction()\n    {\n        if ($this-&gt;settings['mySetting'] === 'value') {\n            // ...\n        }\n    }\n}\n</code></pre> <p>NOTE</p> <p>The <code>initialize()</code> method is only called if the <code>beforeExecuteRoute</code> event is executed with success. This avoid that application logic in the initializer cannot be executed without authorization.</p> <p>If you want to execute some initialization logic just after the controller object is constructed then you can implement the <code>onConstruct()</code> method:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function onConstruct()\n    {\n        // ...\n    }\n}\n</code></pre> <p>NOTE</p> <p>Be aware that <code>onConstruct()</code> method is executed even if the action to be executed doesn't exist in the controller or the user does not have access to it (according to custom control access provided by the developer).</p>"},{"location":"controllers/#injecting-services","title":"Injecting Services","text":"<p>If a controller extends Phalcon\\Mvc\\Controller then it has easy access to the service container in application. For example, if we have registered a service like this:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\n\n$di = new Di();\n\n$di-&gt;set(\n    'storage',\n    function () {\n        return new Storage(\n            '/some/directory'\n        );\n    },\n    true\n);\n</code></pre> <p>Then, we can access that service in several ways:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass FilesController extends Controller\n{\n    public function saveAction()\n    {\n        // Injecting the service by just accessing the property with the same name\n        $this-&gt;storage-&gt;save('/some/file');\n\n        // Accessing the service from the DI\n        $this-&gt;di-&gt;get('storage')-&gt;save('/some/file');\n\n        // Another way to access the service using the magic getter\n        $this-&gt;di-&gt;getStorage()-&gt;save('/some/file');\n\n        // Another way to access the service using the magic getter\n        $this-&gt;getDi()-&gt;getStorage()-&gt;save('/some/file');\n\n        // Using the array-syntax\n        $this-&gt;di['storage']-&gt;save('/some/file');\n    }\n}\n</code></pre> <p>If you're using Phalcon as a full-stack framework, you can read the services provided by default in the framework.</p>"},{"location":"controllers/#request-and-response","title":"Request and Response","text":"<p>Assuming that the framework provides a set of pre-registered services. We explain how to interact with the HTTP environment. The <code>request</code> service contains an instance of Phalcon\\Http\\Request and the <code>response</code> contains a Phalcon\\Http\\Response representing what is going to be sent back to the client.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Check if request has made with POST\n        if ($this-&gt;request-&gt;isPost()) {\n            // Access POST data\n            $customerName = $this-&gt;request-&gt;getPost('name');\n            $customerBorn = $this-&gt;request-&gt;getPost('born');\n        }\n    }\n}\n</code></pre> <p>The response object is not usually used directly, but is built up before the execution of the action, sometimes - like in an <code>afterDispatch</code> event - it can be useful to access the response directly:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function notFoundAction()\n    {\n        // Send a HTTP 404 response header\n        $this-&gt;response-&gt;setStatusCode(404, 'Not Found');\n    }\n}\n</code></pre> <p>Learn more about the HTTP environment in their dedicated articles request and response.</p>"},{"location":"controllers/#session-data","title":"Session Data","text":"<p>Sessions help us maintain persistent data between requests. You can access a Phalcon\\Session\\Bag from any controller to encapsulate data that needs to be persistent:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass UserController extends Controller\n{\n    public function indexAction()\n    {\n        $this-&gt;persistent-&gt;name = 'Michael';\n    }\n\n    public function welcomeAction()\n    {\n        echo 'Welcome, ', $this-&gt;persistent-&gt;name;\n    }\n}\n</code></pre>"},{"location":"controllers/#using-services-as-controllers","title":"Using Services as Controllers","text":"<p>Services may act as controllers, controllers classes are always requested from the services container. Accordingly, any other class registered with its name can easily replace a controller:</p> <pre><code>&lt;?php\n\n// Register a controller as a service\n$di-&gt;set(\n    'IndexController',\n    function () {\n        $component = new Component();\n\n        return $component;\n    }\n);\n\n// Register a namespaced controller as a service\n$di-&gt;set(\n    'Backend\\Controllers\\IndexController',\n    function () {\n        $component = new Component();\n\n        return $component;\n    }\n);\n</code></pre>"},{"location":"controllers/#events-in-controllers","title":"Events in Controllers","text":"<p>Controllers automatically act as listeners for dispatcher events, implementing methods with those event names allow you to implement hook points before/after the actions are executed:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function beforeExecuteRoute($dispatcher)\n    {\n        // This is executed before every found action\n        if ($dispatcher-&gt;getActionName() === 'save') {\n            $this-&gt;flash-&gt;error(\n                \"You don't have permission to save posts\"\n            );\n\n            $this-&gt;dispatcher-&gt;forward(\n                [\n                    'controller' =&gt; 'home',\n                    'action'     =&gt; 'index',\n                ]\n            );\n\n            return false;\n        }\n    }\n\n    public function afterExecuteRoute($dispatcher)\n    {\n        // Executed after every found action\n    }\n}\n</code></pre>"},{"location":"cookies/","title":"Cookies Management","text":"<p>Cookies are a very useful way to store small pieces of data on the client's machine that can be retrieved even if the user closes his/her browser. <code>Phalcon\\Http\\Response\\Cookies</code> acts as a global bag for cookies. Cookies are stored in this bag during the request execution and are sent automatically at the end of the request.</p>"},{"location":"cookies/#basic-usage","title":"Basic Usage","text":"<p>You can set/get cookies by just accessing the <code>cookies</code> service in any part of the application where services can be accessed:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass SessionController extends Controller\n{\n    public function loginAction()\n    {\n        // Check if the cookie has previously set\n        if ($this-&gt;cookies-&gt;has('remember-me')) {\n            // Get the cookie\n            $rememberMeCookie = $this-&gt;cookies-&gt;get('remember-me');\n\n            // Get the cookie's value\n            $value = $rememberMeCookie-&gt;getValue();\n        }\n    }\n\n    public function startAction()\n    {\n        $this-&gt;cookies-&gt;set(\n            'remember-me',\n            'some value',\n            time() + 15 * 86400\n        );\n        $this-&gt;cookies-&gt;send();\n    }\n\n    public function logoutAction()\n    {\n        $rememberMeCookie = $this-&gt;cookies-&gt;get('remember-me');\n\n        // Delete the cookie\n        $rememberMeCookie-&gt;delete();\n    }\n}\n</code></pre>"},{"location":"cookies/#encryptiondecryption-of-cookies","title":"Encryption/Decryption of Cookies","text":"<p>By default, cookies are automatically encrypted before being sent to the client and are decrypted when retrieved from the user. This protection prevents unauthorized users to see the cookies' contents in the client (browser). Despite this protection, sensitive data should not be stored in cookies.</p> <p>You can disable encryption as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response\\Cookies;\n\n$di-&gt;set(\n    'cookies',\n    function () {\n        $cookies = new Cookies();\n\n        $cookies-&gt;useEncryption(false);\n\n        return $cookies;\n    }\n);\n</code></pre> <p>If you wish to use encryption, a global key must be set in the crypt service:</p> <pre><code>    &lt;?php\n\n    use Phalcon\\Crypt;\n\n    $di-&gt;set(\n        'crypt',\n        function () {\n            $crypt = new Crypt();\n\n            /**\n             * Set the cipher algorithm.\n             *\n             * The `aes-256-gcm' is the preferable cipher, but it is not usable until the\n             * openssl library is upgraded, which is available in PHP 7.1.\n             *\n             * The `aes-256-ctr' is arguably the best choice for cipher\n             * algorithm in these days.\n             */\n            $crypt-&gt;setCipher('aes-256-ctr');\n\n            /**\n             * Setting the encryption key.\n             *\n             * The key should have been previously generated in a cryptographically safe way.\n             *\n             * Bad key:\n             * \"le password\"\n             *\n             * Better (but still unsafe):\n             * \"#1dj8$=dp?.ak//j1V$~%*0X\"\n             *\n             * Good key:\n             * \"T4\\xb1\\x8d\\xa9\\x98\\x054t7w!z%C*F-Jk\\x98\\x05\\x5c\"\n             *\n             * Use your own key. Do not copy and paste this example key.\n             */\n            $key = \"T4\\xb1\\x8d\\xa9\\x98\\x054t7w!z%C*F-Jk\\x98\\x05\\x5c\";\n\n            $crypt-&gt;setKey($key);\n\n            return $crypt;\n        }\n    );\n</code></pre> <p>NOTE</p> <p>Sending cookies data without encryption to clients including complex objects structures, resultsets, service information, etc. could expose internal application details that could be used by an attacker to attack the application. If you do not want to use encryption, we highly recommend you only send very basic cookie data like numbers or small string literals.</p>"},{"location":"crypt/","title":"Encryption/Decryption","text":"<p>Phalcon provides encryption facilities via the Phalcon\\Crypt component. This class offers simple object-oriented wrappers to the openssl PHP's encryption library.</p> <p>By default, this component provides secure encryption using AES-256-CFB.</p> <p>The cipher AES-256 is used among other places in SSL/TLS across the Internet. It's considered among the top ciphers. In theory it's not crackable since the combinations of keys are massive. Although NSA has categorized this in Suite B, they have also recommended using higher than 128-bit keys for encryption.</p> <p>NOTE</p> <p>You must use a key length corresponding to the current algorithm. For the algorithm used by default it is 32 bytes.</p>"},{"location":"crypt/#basic-usage","title":"Basic Usage","text":"<p>This component is designed be very simple to use:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Crypt;\n\n// Create an instance\n$crypt = new Crypt();\n\n/**\n * Set the cipher algorithm.\n *\n * The `aes-256-gcm' is the preferable cipher, but it is not usable until the\n * openssl library is upgraded, which is available in PHP 7.1.\n *\n * The `aes-256-ctr' is arguably the best choice for cipher\n * algorithm in these days.\n */\n$crypt-&gt;setCipher('aes-256-ctr');\n\n/**\n * Set the encryption key.\n *\n * The `$key' should have been previously generated in a cryptographically safe way.\n *\n * Bad key:\n * \"le password\"\n *\n * Better (but still unsafe):\n * \"#1dj8$=dp?.ak//j1V$~%*0X\"\n *\n * Good key:\n * \"T4\\xb1\\x8d\\xa9\\x98\\x05\\\\\\x8c\\xbe\\x1d\\x07&amp;[\\x99\\x18\\xa4~Lc1\\xbeW\\xb3\"\n *\n * Use your own key. Do not copy and paste this example key.\n */\n$key = \"T4\\xb1\\x8d\\xa9\\x98\\x05\\\\\\x8c\\xbe\\x1d\\x07&amp;[\\x99\\x18\\xa4~Lc1\\xbeW\\xb3\";\n\n$text = 'This is the text that you want to encrypt.';\n\n$encrypted = $crypt-&gt;encrypt($text, $key);\n\necho $crypt-&gt;decrypt($encrypted, $key);\n</code></pre> <p>You can also set the algorithm and whether to calculate a digest of the message (signing) during the object construction. This removes the need to call <code>setCipher()</code> and <code>useSigning()</code>:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Crypt;\n\n// Create an instance\n$crypt = new Crypt('aes-256-ctr', true);\n\n$key = \"T4\\xb1\\x8d\\xa9\\x98\\x05\\\\x8c\\xbe\\x1d\\x07&amp;[\\x99\\x18\\xa4~Lc1\\xbeW\\xb3\";\n\n$text = 'This is the text that you want to encrypt.';\n\n$encrypted = $crypt-&gt;encrypt($text, $key);\n\necho $crypt-&gt;decrypt($encrypted, $key);\n</code></pre> <p>You can use the same instance to encrypt/decrypt several times:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Crypt;\n\n// Create an instance\n$crypt = new Crypt();\n\n$crypt-&gt;setCipher('aes-256-ctr');\n\n// Use your own keys!\n$texts = [\n    \"T4\\xb1\\x8d\\xa9\\x98\\x054t7w!z%C*F-Jk\\x98\\x05\\\\\\x5c\" =&gt; 'This is a secret text',\n    \"T4\\xb1\\x8d\\xa9\\x98\\x05\\\\\\x8c\\xbe\\x1d\\x07&amp;[\\x99\\x18\\xa4~Lc1\\xbeW\\xb3\" =&gt; 'This is a very secret',\n];\n\nforeach ($texts as $key =&gt; $text) {\n    // Perform the encryption\n    $encrypted = $crypt-&gt;encrypt($text, $key);\n\n    // Now decrypt\n    echo $crypt-&gt;decrypt($encrypted, $key);\n}\n</code></pre> <p>For better security, you can instruct the component to calculate a message digest based on one of the supported algorithms returned by <code>getAvailableHashAlgos</code>. As seen above this algorithm can be set during the object instantiation but can also be set afterwards.</p> <p>NOTE Calculating the message digest (signing) will be enabled by default in Phalcon 4.0.0 or greater.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Crypt;\n\n// Create an instance\n$crypt = new Crypt();\n\n$crypt-&gt;setCipher('aes-256-ctr');\n$crypt-&gt;setHashAlgo('aes-256-cfb');\n\n// Force calculation of a digest of the message based on the Hash algorithm\n$crypt-&gt;useSigning(true);\n\n$key  = \"T4\\xb1\\x8d\\xa9\\x98\\x054t7w!z%C*F-Jk\\x98\\x05\\\\x5c\";\n$text = 'This is a secret text';\n\n// Perform the encryption\n$encrypted = $crypt-&gt;encrypt($text, $key);\n\n// Now decrypt\necho $crypt-&gt;decrypt($encrypted, $key);\n</code></pre>"},{"location":"crypt/#encryption-options","title":"Encryption Options","text":"<p>The following options are available to change the encryption behavior:</p> Name Description Cipher The cipher is one of the encryption algorithms supported by openssl. You can see a list here <p>Example:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Crypt;\n\n// Create an instance\n$crypt = new Crypt();\n\n// Use blowfish\n$crypt-&gt;setCipher('bf-cbc');\n\n// Use your own key!\n$key  = \"T4\\xb1\\x8d\\xa9\\x98\\x05\\\\\\x8c\\xbe\\x1d\\x07&amp;[\\x99\\x18\\xa4~Lc1\\xbeW\\xb3\";\n$text = 'This is a secret text';\n\necho $crypt-&gt;encrypt($text, $key);\n</code></pre> <p>If you wish to check the available algorithms that your system supports you can call the <code>getAvailableHashAlgos()</code> method.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Crypt;\n\n// Create an instance\n$crypt = new Crypt();\n\n// Get the supported algorithms\n$algorithms = $crypt-&gt;getAvailableHashAlgos();\n\nvar_dump($algorithms);\n</code></pre> <p></p>"},{"location":"crypt/#base64-support","title":"Base64 Support","text":"<p>In order for encryption to be properly transmitted (emails) or displayed (browsers) base64 encoding is usually applied to encrypted texts:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Crypt;\n\n// Create an instance\n$crypt = new Crypt();\n\n// Use your own key!\n$key  = \"T4\\xb1\\x8d\\xa9\\x98\\x05\\\\\\x8c\\xbe\\x1d\\x07&amp;[\\x99\\x18\\xa4~Lc1\\xbeW\\xb3\";\n$text = 'This is a secret text';\n\n$encrypt = $crypt-&gt;encryptBase64($text, $key);\n\necho $crypt-&gt;decryptBase64($encrypt, $key);\n</code></pre>"},{"location":"crypt/#setting-up-an-encryption-service","title":"Setting up an Encryption service","text":"<p>You can set up the encryption component in the services container in order to use it from any part of the application:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Crypt;\n\n$di-&gt;set(\n    'crypt',\n    function () {\n        $crypt = new Crypt();\n\n        // Set a global encryption key\n        $crypt-&gt;setKey(\n            \"T4\\xb1\\x8d\\xa9\\x98\\x05\\\\\\x8c\\xbe\\x1d\\x07&amp;[\\x99\\x18\\xa4~Lc1\\xbeW\\xb3\"\n        );\n\n        return $crypt;\n    },\n    true\n);\n</code></pre> <p>Then, for example, in a controller you can use it as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass SecretsController extends Controller\n{\n    public function saveAction()\n    {\n        $secret = new Secrets();\n\n        $text = $this-&gt;request-&gt;getPost('text');\n\n        $secret-&gt;content = $this-&gt;crypt-&gt;encrypt($text);\n\n        if ($secret-&gt;save()) {\n            $this-&gt;flash-&gt;success(\n                'Secret was successfully created!'\n            );\n        }\n    }\n}\n</code></pre>"},{"location":"crypt/#links","title":"Links","text":"<ul> <li>Advanced Encryption Standard (AES)</li> <li>What is block cipher</li> <li>Introduction to Blowfish</li> <li>CTR-Mode Encryption</li> <li>Recommendation for Block Cipher Modes of Operation: Methods and Techniques</li> <li>Counter (CTR) mode</li> </ul>"},{"location":"db-layer/","title":"Database Abstraction Layer","text":"<p>Phalcon\\Db is the component behind Phalcon\\Mvc\\Model that powers the model layer in the framework. It consists of an independent high-level abstraction layer for database systems completely written in C.</p> <p>This component allows for a lower level database manipulation than using traditional models.</p>"},{"location":"db-layer/#database-adapters","title":"Database Adapters","text":"<p>This component makes use of adapters to encapsulate specific database system details. Phalcon uses PDO to connect to databases. The following database engines are supported:</p> Class Description Phalcon\\Db\\Adapter\\Pdo\\Mysql Is the world's most used relational database management system (RDBMS) that runs as a server providing multi-user access to a number of databases Phalcon\\Db\\Adapter\\Pdo\\Postgresql PostgreSQL is a powerful, open source relational database system. It has more than 15 years of active development and a proven architecture that has earned it a strong reputation for reliability, data integrity, and correctness. Phalcon\\Db\\Adapter\\Pdo\\Sqlite SQLite is a software library that implements a self-contained, serverless, zero-configuration, transactional SQL database engine"},{"location":"db-layer/#factory","title":"Factory","text":"<p>Loads PDO Adapter class using <code>adapter</code> option. For example:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Pdo\\Factory;\n\n$options = [\n    'host'     =&gt; 'localhost',\n    'dbname'   =&gt; 'blog',\n    'port'     =&gt; 3306,\n    'username' =&gt; 'sigma',\n    'password' =&gt; 'secret',\n    'adapter'  =&gt; 'mysql',\n];\n\n$db = Factory::load($options);\n</code></pre>"},{"location":"db-layer/#implementing-your-own-adapters","title":"Implementing your own adapters","text":"<p>The Phalcon\\Db\\AdapterInterface interface must be implemented in order to create your own database adapters or extend the existing ones.</p>"},{"location":"db-layer/#database-dialects","title":"Database Dialects","text":"<p>Phalcon encapsulates the specific details of each database engine in dialects. Those provide common functions and SQL generator to the adapters.</p> Class Description Phalcon\\Db\\Dialect\\Mysql SQL specific dialect for MySQL database system Phalcon\\Db\\Dialect\\Postgresql SQL specific dialect for PostgreSQL database system Phalcon\\Db\\Dialect\\Sqlite SQL specific dialect for SQLite database system"},{"location":"db-layer/#implementing-your-own-dialects","title":"Implementing your own dialects","text":"<p>The Phalcon\\Db\\DialectInterface interface must be implemented in order to create your own database dialects or extend the existing ones. You can also enhance your current dialect by adding more commands/methods that PHQL will understand. </p> <p>For instance when using the MySQL adapter, you might want to allow PHQL to recognize the <code>MATCH ... AGAINST ...</code> syntax. We associate that syntax with <code>MATCH_AGAINST</code> </p> <p>We instantiate the dialect. We add the custom function so that PHQL understands what to do when it finds it during the parsing process. In the example below, we register a new custom function called <code>MATCH_AGAINST</code>. After that all we have to do is add the customized dialect object to our connection.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Dialect\\MySQL as SqlDialect;\nuse Phalcon\\Db\\Adapter\\Pdo\\MySQL as Connection;\n\n$dialect = new SqlDialect();\n\n$dialect-&gt;registerCustomFunction(\n    'MATCH_AGAINST',\n    function($dialect, $expression) {\n        $arguments = $expression['arguments'];\n        return sprintf(\n            \" MATCH (%s) AGAINST (%)\",\n            $dialect-&gt;getSqlExpression($arguments[0]),\n            $dialect-&gt;getSqlExpression($arguments[1])\n         );\n    }\n);\n\n$connection = new Connection(\n    [\n        \"host\"          =&gt; \"localhost\",\n        \"username\"      =&gt; \"root\",\n        \"password\"      =&gt; \"\",\n        \"dbname\"        =&gt; \"test\",\n        \"dialectClass\"  =&gt; $dialect\n    ]\n);\n</code></pre> <p>We can now use this new function in PHQL, which in turn will translate it to the proper SQL syntax:</p> <pre><code>$phql = \"\n  SELECT *\n  FROM   Posts\n  WHERE  MATCH_AGAINST(title, :pattern:)\";\n\n$posts = $modelsManager-&gt;executeQuery($phql, ['pattern' =&gt; $pattern]);\n</code></pre>"},{"location":"db-layer/#connecting-to-databases","title":"Connecting to Databases","text":"<p>To create a connection it's necessary instantiate the adapter class. It only requires an array with the connection parameters. The example below shows how to create a connection passing both required and optional parameters:</p>"},{"location":"db-layer/#mysql-required-elements","title":"MySQL Required elements","text":"<pre><code>&lt;?php\n\n$config = [\n    'host'     =&gt; '127.0.0.1',\n    'username' =&gt; 'mike',\n    'password' =&gt; 'sigma',\n    'dbname'   =&gt; 'test_db',\n];\n</code></pre>"},{"location":"db-layer/#mysql-optional","title":"MySQL Optional","text":"<pre><code>$config['persistent'] = false;\n</code></pre>"},{"location":"db-layer/#mysql-create-a-connection","title":"MySQL Create a connection","text":"<pre><code>$connection = new \\Phalcon\\Db\\Adapter\\Pdo\\Mysql($config);\n</code></pre>"},{"location":"db-layer/#postgresql-required-elements","title":"PostgreSQL Required elements","text":"<pre><code>&lt;?php\n\n$config = [\n    'host'     =&gt; 'localhost',\n    'username' =&gt; 'postgres',\n    'password' =&gt; 'secret1',\n    'dbname'   =&gt; 'template',\n];\n</code></pre>"},{"location":"db-layer/#postgresql-optional","title":"PostgreSQL Optional","text":"<pre><code>$config['schema'] = 'public';\n</code></pre>"},{"location":"db-layer/#postgresql-create-a-connection","title":"PostgreSQL Create a connection","text":"<pre><code>$connection = new \\Phalcon\\Db\\Adapter\\Pdo\\Postgresql($config);\n</code></pre>"},{"location":"db-layer/#sqlite-required-elements","title":"SQLite Required elements","text":"<pre><code>&lt;?php\n\n$config = [\n    'dbname' =&gt; '/path/to/database.db',\n];\n</code></pre>"},{"location":"db-layer/#sqlite-create-a-connection","title":"SQLite Create a connection","text":"<pre><code>$connection = new \\Phalcon\\Db\\Adapter\\Pdo\\Sqlite($config);\n</code></pre>"},{"location":"db-layer/#setting-up-additional-pdo-options","title":"Setting up additional PDO options","text":"<p>You can set PDO options at connection time by passing the parameters <code>options</code>:</p> <pre><code>&lt;?php\n\n$connection = new \\Phalcon\\Db\\Adapter\\Pdo\\Mysql(\n    [\n        'host'     =&gt; 'localhost',\n        'username' =&gt; 'root',\n        'password' =&gt; 'sigma',\n        'dbname'   =&gt; 'test_db',\n        'options'  =&gt; [\n            PDO::MYSQL_ATTR_INIT_COMMAND =&gt; \"SET NAMES 'UTF8'\",\n            PDO::ATTR_CASE               =&gt; PDO::CASE_LOWER,\n        ]\n    ]\n);\n</code></pre>"},{"location":"db-layer/#connecting-using-factory","title":"Connecting using Factory","text":"<p>You can also use a simple <code>ini</code> file to configure/connect your <code>db</code> service to your database. </p> <pre><code>[database]\nhost = TEST_DB_MYSQL_HOST\nusername = TEST_DB_MYSQL_USER\npassword = TEST_DB_MYSQL_PASSWD\ndbname = TEST_DB_MYSQL_NAME\nport = TEST_DB_MYSQL_PORT\ncharset = TEST_DB_MYSQL_CHARSET\nadapter = mysql\n</code></pre> <pre><code>&lt;?php\n\nuse Phalcon\\Config\\Adapter\\Ini;\nuse Phalcon\\Di;\nuse Phalcon\\Db\\Adapter\\Pdo\\Factory;\n\n$di = new Di();\n$config = new Ini('config.ini');\n\n$di-&gt;set('config', $config);\n\n$di-&gt;set(\n    'db', \n    function () {\n        return Factory::load($this-&gt;config-&gt;database);\n    }\n);\n</code></pre> <p>The above will return the correct database instance and also has the advantage that you can change the connection credentials or even the database adapter without changing a single line of code in your application.</p>"},{"location":"db-layer/#finding-rows","title":"Finding Rows","text":"<p>Phalcon\\Db provides several methods to query rows from tables. The specific SQL syntax of the target database engine is required in this case:</p> <pre><code>&lt;?php\n\n$sql = 'SELECT id, name FROM robots ORDER BY name';\n\n// Send a SQL statement to the database system\n$result = $connection-&gt;query($sql);\n\n// Print each robot name\nwhile ($robot = $result-&gt;fetch()) {\n   echo $robot['name'];\n}\n\n// Get all rows in an array\n$robots = $connection-&gt;fetchAll($sql);\nforeach ($robots as $robot) {\n   echo $robot['name'];\n}\n\n// Get only the first row\n$robot = $connection-&gt;fetchOne($sql);\n</code></pre> <p>By default these calls create arrays with both associative and numeric indexes. You can change this behavior by using <code>Phalcon\\Db\\Result::setFetchMode()</code>. This method receives a constant, defining which kind of index is required.</p> Constant Description <code>Phalcon\\Db::FETCH_NUM</code> Return an array with numeric indexes <code>Phalcon\\Db::FETCH_ASSOC</code> Return an array with associative indexes <code>Phalcon\\Db::FETCH_BOTH</code> Return an array with both associative and numeric indexes <code>Phalcon\\Db::FETCH_OBJ</code> Return an object instead of an array <pre><code>&lt;?php\n\n$sql = 'SELECT id, name FROM robots ORDER BY name';\n$result = $connection-&gt;query($sql);\n\n$result-&gt;setFetchMode(Phalcon\\Db::FETCH_NUM);\nwhile ($robot = $result-&gt;fetch()) {\n   echo $robot[0];\n}\n</code></pre> <p>The <code>Phalcon\\Db::query()</code> returns an instance of Phalcon\\Db\\Result\\Pdo. These objects encapsulate all the functionality related to the returned resultset i.e. traversing, seeking specific records, count etc.</p> <pre><code>&lt;?php\n\n$sql = 'SELECT id, name FROM robots';\n$result = $connection-&gt;query($sql);\n\n// Traverse the resultset\nwhile ($robot = $result-&gt;fetch()) {\n   echo $robot['name'];\n}\n\n// Seek to the third row\n$result-&gt;seek(2);\n$robot = $result-&gt;fetch();\n\n// Count the resultset\necho $result-&gt;numRows();\n</code></pre>"},{"location":"db-layer/#binding-parameters","title":"Binding Parameters","text":"<p>Bound parameters is also supported in Phalcon\\Db. Although there is a minimal performance impact by using bound parameters, you are encouraged to use this methodology so as to eliminate the possibility of your code being subject to SQL injection attacks. Both string and positional placeholders are supported. Binding parameters can simply be achieved as follows:</p> <pre><code>&lt;?php\n\n// Binding with numeric placeholders\n$sql    = 'SELECT * FROM robots WHERE name = ? ORDER BY name';\n$result = $connection-&gt;query(\n    $sql,\n    [\n        'Wall-E',\n    ]\n);\n\n// Binding with named placeholders\n$sql     = 'INSERT INTO `robots`(name`, year) VALUES (:name, :year)';\n$success = $connection-&gt;query(\n    $sql,\n    [\n        'name' =&gt; 'Astro Boy',\n        'year' =&gt; 1952,\n    ]\n);\n</code></pre> <p>When using numeric placeholders, you will need to define them as integers i.e. 1 or 2. In this case '1' or '2' are considered strings and not numbers, so the placeholder could not be successfully replaced. With any adapter data are automatically escaped using PDO Quote.</p> <p>This function takes into account the connection charset, so its recommended to define the correct charset in the connection parameters or in your database server configuration, as a wrong charset will produce undesired effects when storing or retrieving data.</p> <p>Also, you can pass your parameters directly to the <code>execute</code> or <code>query</code> methods. In this case bound parameters are directly passed to PDO:</p> <pre><code>&lt;?php\n\n// Binding with PDO placeholders\n$sql    = 'SELECT * FROM robots WHERE name = ? ORDER BY name';\n$result = $connection-&gt;query(\n    $sql,\n    [\n        1 =&gt; 'Wall-E',\n    ]\n);\n</code></pre>"},{"location":"db-layer/#typed-placeholders","title":"Typed placeholders","text":"<p>Placeholders allowed you to bind parameters to avoid SQL injections:</p> <pre><code>&lt;?php\n\n$phql = \"SELECT * FROM Store\\Robots WHERE id &gt; :id:\";\n\n$robots = $this-&gt;modelsManager-&gt;executeQuery($phql, ['id' =&gt; 100]);\n</code></pre> <p>However, some database systems require additional actions when using placeholders such as specifying the type of the bound parameter:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Column;\n\n// ...\n\n$phql = \"SELECT * FROM Store\\Robots LIMIT :number:\";\n$robots = $this-&gt;modelsManager-&gt;executeQuery(\n    $phql,\n    ['number' =&gt; 10],\n    Column::BIND_PARAM_INT\n);\n</code></pre> <p>You can use typed placeholders in your parameters, instead of specifying the bind type in <code>executeQuery()</code>:</p> <pre><code>&lt;?php\n\n$phql = \"SELECT * FROM Store\\Robots LIMIT {number:int}\";\n$robots = $this-&gt;modelsManager-&gt;executeQuery(\n    $phql,\n    ['number' =&gt; 10]\n);\n\n$phql = \"SELECT * FROM Store\\Robots WHERE name &lt;&gt; {name:str}\";\n$robots = $this-&gt;modelsManager-&gt;executeQuery(\n    $phql,\n    ['name' =&gt; $name]\n);\n</code></pre> <p>You can also omit the type if you don't need to specify it:</p> <pre><code>&lt;?php\n\n$phql = \"SELECT * FROM Store\\Robots WHERE name &lt;&gt; {name}\";\n$robots = $this-&gt;modelsManager-&gt;executeQuery(\n    $phql,\n    ['name' =&gt; $name]\n);\n</code></pre> <p>Typed placeholders are also more powerful, since we can now bind a static array without having to pass each element independently as a placeholder:</p> <pre><code>&lt;?php\n\n$phql = \"SELECT * FROM Store\\Robots WHERE id IN ({ids:array})\";\n$robots = $this-&gt;modelsManager-&gt;executeQuery(\n    $phql,\n    ['ids' =&gt; [1, 2, 3, 4]]\n);\n</code></pre> <p>The following types are available:</p> Bind Type Bind Type Constant Example str <code>Column::BIND_PARAM_STR</code> <code>{name:str}</code> int <code>Column::BIND_PARAM_INT</code> <code>{number:int}</code> double <code>Column::BIND_PARAM_DECIMAL</code> <code>{price:double}</code> bool <code>Column::BIND_PARAM_BOOL</code> <code>{enabled:bool}</code> blob <code>Column::BIND_PARAM_BLOB</code> <code>{image:blob}</code> null <code>Column::BIND_PARAM_NULL</code> <code>{exists:null}</code> array Array of <code>Column::BIND_PARAM_STR</code> <code>{codes:array}</code> array-str Array of <code>Column::BIND_PARAM_STR</code> <code>{names:array-str}</code> array-int Array of <code>Column::BIND_PARAM_INT</code> <code>{flags:array-int}</code>"},{"location":"db-layer/#cast-bound-parameters-values","title":"Cast bound parameters values","text":"<p>By default, bound parameters aren't casted in the PHP userland to the specified bind types, this option allows you to make Phalcon cast values before bind them with PDO. A classic situation when this problem raises is passing a string in a <code>LIMIT</code>/<code>OFFSET</code> placeholder:</p> <pre><code>&lt;?php\n\n$number = '100';\n$robots = $modelsManager-&gt;executeQuery(\n    'SELECT * FROM Some\\Robots LIMIT {number:int}',\n    ['number' =&gt; $number]\n);\n</code></pre> <p>This causes the following exception:</p> <pre><code>Fatal error: Uncaught exception 'PDOException' with message 'SQLSTATE[42000]:\nSyntax error or access violation: 1064 You have an error in your SQL syntax;\ncheck the manual that corresponds to your MySQL server version for the right\nsyntax to use near ''100'' at line 1' in /Users/scott/demo.php:78\n</code></pre> <p>This happens because 100 is a string variable. It is easily fixable by casting the value to integer first:</p> <pre><code>&lt;?php\n\n$number = '100';\n$robots = $modelsManager-&gt;executeQuery(\n    'SELECT * FROM Some\\Robots LIMIT {number:int}',\n    ['number' =&gt; (int) $number]\n);\n</code></pre> <p>However this solution requires that the developer pays special attention about how bound parameters are passed and their types. To make this task easier and avoid unexpected exceptions you can instruct Phalcon to do this casting for you:</p> <pre><code>&lt;?php\n\n\\Phalcon\\Db::setup(['forceCasting' =&gt; true]);\n</code></pre> <p>The following actions are performed according to the bind type specified:</p> Bind Type Action Column::BIND_PARAM_STR Cast the value as a native PHP string Column::BIND_PARAM_INT Cast the value as a native PHP integer Column::BIND_PARAM_BOOL Cast the value as a native PHP boolean Column::BIND_PARAM_DECIMAL Cast the value as a native PHP double"},{"location":"db-layer/#cast-on-hydrate","title":"Cast on Hydrate","text":"<p>Values returned from the database system are always represented as string values by PDO, no matter if the value belongs to a numerical or boolean type column. This happens because some column types cannot be represented with its corresponding PHP native types due to their size limitations. For instance, a <code>BIGINT</code> in MySQL can store large integer numbers that cannot be represented as a 32bit integer in PHP. Because of that, PDO and the ORM by default, make the safe decision of leaving all values as strings.</p> <p>You can set up the ORM to automatically cast those types considered safe to their corresponding PHP native types:</p> <pre><code>&lt;?php\n\n\\Phalcon\\Mvc\\Model::setup(['castOnHydrate' =&gt; true]);\n</code></pre> <p>This way you can use strict operators or make assumptions about the type of variables:</p> <pre><code>&lt;?php\n\n$robot = Robots::findFirst();\nif (11 === $robot-&gt;id) {\n    echo $robot-&gt;name;\n}\n</code></pre>"},{"location":"db-layer/#insertingupdatingdeleting-rows","title":"Inserting/Updating/Deleting Rows","text":"<p>To insert, update or delete rows, you can use raw SQL or use the preset functions provided by the class:</p> <pre><code>&lt;?php\n\n// Inserting data with a raw SQL statement\n$sql     = 'INSERT INTO `robots`(`name`, `year`) VALUES ('Astro Boy', 1952)';\n$success = $connection-&gt;execute($sql);\n\n// With placeholders\n$sql     = 'INSERT INTO `robots`(`name`, `year`) VALUES (?, ?)';\n$success = $connection-&gt;execute(\n    $sql,\n    [\n        'Astro Boy',\n        1952,\n    ]\n);\n\n// Generating dynamically the necessary SQL\n$success = $connection-&gt;insert(\n    'robots',\n    [\n        'Astro Boy',\n        1952,\n    ],\n    [\n        'name',\n        'year',\n    ],\n);\n\n// Generating dynamically the necessary SQL (another syntax)\n$success = $connection-&gt;insertAsDict(\n    'robots',\n    [\n        'name' =&gt; 'Astro Boy',\n        'year' =&gt; 1952,\n    ]\n);\n\n// Updating data with a raw SQL statement\n$sql     = 'UPDATE `robots` SET `name` = 'Astro boy' WHERE `id` = 101';\n$success = $connection-&gt;execute($sql);\n\n// With placeholders\n$sql     = 'UPDATE `robots` SET `name` = ? WHERE `id` = ?';\n$success = $connection-&gt;execute(\n    $sql,\n    [\n        'Astro Boy',\n        101,\n    ]\n);\n\n// Generating dynamically the necessary SQL\n$success = $connection-&gt;update(\n    'robots',\n    [\n        'name',\n    ],\n    [\n        'New Astro Boy',\n    ],\n    'id = 101' // Warning! In this case values are not escaped\n);\n\n// Generating dynamically the necessary SQL (another syntax)\n$success = $connection-&gt;updateAsDict(\n    'robots',\n    [\n        'name' =&gt; 'New Astro Boy',\n    ],\n    'id = 101' // Warning! In this case values are not escaped\n);\n\n// With escaping conditions\n$success = $connection-&gt;update(\n    'robots',\n    [\n        'name',\n    ],\n    [\n        'New Astro Boy',\n    ],\n    [\n        'conditions' =&gt; 'id = ?',\n        'bind'       =&gt; [101],\n        'bindTypes'  =&gt; [PDO::PARAM_INT], // Optional parameter\n    ]\n);\n$success = $connection-&gt;updateAsDict(\n    'robots',\n    [\n        'name' =&gt; 'New Astro Boy',\n    ],\n    [\n        'conditions' =&gt; 'id = ?',\n        'bind'       =&gt; [101],\n        'bindTypes'  =&gt; [PDO::PARAM_INT], // Optional parameter\n    ]\n);\n\n// Deleting data with a raw SQL statement\n$sql     = 'DELETE `robots` WHERE `id` = 101';\n$success = $connection-&gt;execute($sql);\n\n// With placeholders\n$sql     = 'DELETE `robots` WHERE `id` = ?';\n$success = $connection-&gt;execute($sql, [101]);\n\n// Generating dynamically the necessary SQL\n$success = $connection-&gt;delete(\n    'robots',\n    'id = ?',\n    [\n        101,\n    ]\n);\n</code></pre>"},{"location":"db-layer/#transactions-and-nested-transactions","title":"Transactions and Nested Transactions","text":"<p>Working with transactions is supported as it is with PDO. Perform data manipulation inside transactions often increase the performance on most database systems:</p> <pre><code>&lt;?php\n\ntry {\n    // Start a transaction\n    $connection-&gt;begin();\n\n    // Execute some SQL statements\n    $connection-&gt;execute('DELETE `robots` WHERE `id` = 101');\n    $connection-&gt;execute('DELETE `robots` WHERE `id` = 102');\n    $connection-&gt;execute('DELETE `robots` WHERE `id` = 103');\n\n    // Commit if everything goes well\n    $connection-&gt;commit();\n} catch (Exception $e) {\n    // An exception has occurred rollback the transaction\n    $connection-&gt;rollback();\n}\n</code></pre> <p>In addition to standard transactions, Phalcon\\Db provides built-in support for nested transactions (if the database system used supports them). When you call begin() for a second time a nested transaction is created:</p> <pre><code>&lt;?php\n\ntry {\n    // Start a transaction\n    $connection-&gt;begin();\n\n    // Execute some SQL statements\n    $connection-&gt;execute('DELETE `robots` WHERE `id` = 101');\n\n    try {\n        // Start a nested transaction\n        $connection-&gt;begin();\n\n        // Execute these SQL statements into the nested transaction\n        $connection-&gt;execute('DELETE `robots` WHERE `id` = 102');\n        $connection-&gt;execute('DELETE `robots` WHERE `id` = 103');\n\n        // Create a save point\n        $connection-&gt;commit();\n    } catch (Exception $e) {\n        // An error has occurred, release the nested transaction\n        $connection-&gt;rollback();\n    }\n\n    // Continue, executing more SQL statements\n    $connection-&gt;execute('DELETE `robots` WHERE `id` = 104');\n\n    // Commit if everything goes well\n    $connection-&gt;commit();\n} catch (Exception $e) {\n    // An exception has occurred rollback the transaction\n    $connection-&gt;rollback();\n}\n</code></pre>"},{"location":"db-layer/#database-events","title":"Database Events","text":"<p>Phalcon\\Db is able to send events to a EventsManager if it's present. Some events when returning boolean false could stop the active operation. The following events are supported:</p> Event Name Triggered Can stop operation? <code>afterConnect</code> After a successfully connection to a database system No <code>beforeQuery</code> Before send a SQL statement to the database system Yes <code>afterQuery</code> After send a SQL statement to database system No <code>beforeDisconnect</code> Before close a temporal database connection No <code>beginTransaction</code> Before a transaction is going to be started No <code>rollbackTransaction</code> Before a transaction is rollbacked No <code>commitTransaction</code> Before a transaction is committed No <p>Bind an EventsManager to a connection is simple, Phalcon\\Db will trigger the events with the type <code>db</code>:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as Connection;\n\n$eventsManager = new EventsManager();\n\n// Listen all the database events\n$eventsManager-&gt;attach('db', $dbListener);\n\n$connection = new Connection(\n    [\n        'host'     =&gt; 'localhost',\n        'username' =&gt; 'root',\n        'password' =&gt; 'secret',\n        'dbname'   =&gt; 'invo',\n    ]\n);\n\n// Assign the eventsManager to the db adapter instance\n$connection-&gt;setEventsManager($eventsManager);\n</code></pre> <p>Stop SQL operations are very useful if for example you want to implement some last-resource SQL injector checker:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\n\n$eventsManager-&gt;attach(\n    'db:beforeQuery',\n    function (Event $event, $connection) {\n        $sql = $connection-&gt;getSQLStatement();\n\n        // Check for malicious words in SQL statements\n        if (preg_match('/DROP|ALTER/i', $sql)) {\n            // DROP/ALTER operations aren't allowed in the application,\n            // this must be a SQL injection!\n            return false;\n        }\n\n        // It's OK\n        return true;\n    }\n);\n</code></pre>"},{"location":"db-layer/#profiling-sql-statements","title":"Profiling SQL Statements","text":"<p>Phalcon\\Db includes a profiling component called Phalcon\\Db\\Profiler, that is used to analyze the performance of database operations so as to diagnose performance problems and discover bottlenecks.</p> <p>Database profiling is really easy With Phalcon\\Db\\Profiler:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Db\\Profiler as DbProfiler;\n\n$eventsManager = new EventsManager();\n\n$profiler = new DbProfiler();\n\n// Listen all the database events\n$eventsManager-&gt;attach(\n    'db',\n    function (Event $event, $connection) use ($profiler) {\n        if ($event-&gt;getType() === 'beforeQuery') {\n            $sql = $connection-&gt;getSQLStatement();\n\n            // Start a profile with the active connection\n            $profiler-&gt;startProfile($sql);\n        }\n\n        if ($event-&gt;getType() === 'afterQuery') {\n            // Stop the active profile\n            $profiler-&gt;stopProfile();\n        }\n    }\n);\n\n// Assign the events manager to the connection\n$connection-&gt;setEventsManager($eventsManager);\n\n$sql = 'SELECT buyer_name, quantity, product_name '\n     . 'FROM buyers '\n     . 'LEFT JOIN products ON buyers.pid = products.id';\n\n// Execute a SQL statement\n$connection-&gt;query($sql);\n\n// Get the last profile in the profiler\n$profile = $profiler-&gt;getLastProfile();\n\necho 'SQL Statement: ', $profile-&gt;getSQLStatement(), \"\\n\";\necho 'Start Time: ', $profile-&gt;getInitialTime(), \"\\n\";\necho 'Final Time: ', $profile-&gt;getFinalTime(), \"\\n\";\necho 'Total Elapsed Time: ', $profile-&gt;getTotalElapsedSeconds(), \"\\n\";\n</code></pre> <p>You can also create your own profile class based on Phalcon\\Db\\Profiler to record real time statistics of the statements sent to the database system:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Db\\Profiler as Profiler;\nuse Phalcon\\Db\\Profiler\\Item as Item;\n\nclass DbProfiler extends Profiler\n{\n    /**\n     * Executed before the SQL statement will sent to the db server\n     */\n    public function beforeStartProfile(Item $profile)\n    {\n        echo $profile-&gt;getSQLStatement();\n    }\n\n    /**\n     * Executed after the SQL statement was sent to the db server\n     */\n    public function afterEndProfile(Item $profile)\n    {\n        echo $profile-&gt;getTotalElapsedSeconds();\n    }\n}\n\n// Create an Events Manager\n$eventsManager = new EventsManager();\n\n// Create a listener\n$dbProfiler = new DbProfiler();\n\n// Attach the listener listening for all database events\n$eventsManager-&gt;attach('db', $dbProfiler);\n</code></pre>"},{"location":"db-layer/#logging-sql-statements","title":"Logging SQL Statements","text":"<p>Using high-level abstraction components such as Phalcon\\Db to access a database, it is difficult to understand which statements are sent to the database system. Phalcon\\Logger interacts with Phalcon\\Db, providing logging capabilities on the database abstraction layer.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Logger\\Adapter\\File as FileLogger;\n\n$eventsManager = new EventsManager();\n\n$logger = new FileLogger('app/logs/db.log');\n\n$eventsManager-&gt;attach(\n    'db:beforeQuery',\n    function (Event $event, $connection) use ($logger) {\n        $sql = $connection-&gt;getSQLStatement();\n\n        $logger-&gt;log($sql, Logger::INFO);\n    }\n);\n\n// Assign the eventsManager to the db adapter instance\n$connection-&gt;setEventsManager($eventsManager);\n\n// Execute some SQL statement\n$connection-&gt;insert(\n    'products',\n    [\n        'Hot pepper',\n        3.50,\n    ],\n    [\n        'name',\n        'price',\n    ]\n);\n</code></pre> <p>As above, the file <code>app/logs/db.log</code> will contain something like this:</p> <pre><code>[Sun, 29 Apr 12 22:35:26 -0500][DEBUG][Resource Id #77] INSERT INTO products\n(name, price) VALUES ('Hot pepper', 3.50)\n</code></pre>"},{"location":"db-layer/#implementing-your-own-logger","title":"Implementing your own Logger","text":"<p>You can implement your own logger class for database queries, by creating a class that implements a single method called <code>log</code>. The method needs to accept a string as the first argument. You can then pass your logging object to <code>Phalcon\\Db::setLogger()</code>, and from then on any SQL statement executed will call that method to log the results.</p>"},{"location":"db-layer/#describing-tablesviews","title":"Describing Tables/Views","text":"<p>Phalcon\\Db also provides methods to retrieve detailed information about tables and views:</p> <pre><code>&lt;?php\n\n// Get tables on the test_db database\n$tables = $connection-&gt;listTables('test_db');\n\n// Is there a table 'robots' in the database?\n$exists = $connection-&gt;tableExists('robots');\n\n// Get name, data types and special features of 'robots' fields\n$fields = $connection-&gt;describeColumns('robots');\nforeach ($fields as $field) {\n    echo 'Column Type: ', $field['Type'];\n}\n\n// Get indexes on the 'robots' table\n$indexes = $connection-&gt;describeIndexes('robots');\nforeach ($indexes as $index) {\n    print_r(\n        $index-&gt;getColumns()\n    );\n}\n\n// Get foreign keys on the 'robots' table\n$references = $connection-&gt;describeReferences('robots');\nforeach ($references as $reference) {\n    // Print referenced columns\n    print_r(\n        $reference-&gt;getReferencedColumns()\n    );\n}\n</code></pre> <p>A table description is very similar to the MySQL <code>DESCRIBE</code> command, it contains the following information:</p> Field Type Key Null Field's name Column Type Is the column part of the primary key or an index? Does the column allow null values? <p>Methods to get information about views are also implemented for every supported database system:</p> <pre><code>&lt;?php\n\n// Get views on the test_db database\n$tables = $connection-&gt;listViews('test_db');\n\n// Is there a view 'robots' in the database?\n$exists = $connection-&gt;viewExists('robots');\n</code></pre>"},{"location":"db-layer/#creatingalteringdropping-tables","title":"Creating/Altering/Dropping Tables","text":"<p>Different database systems (MySQL, Postgresql etc.) offer the ability to create, alter or drop tables with the use of commands such as <code>CREATE</code>, <code>ALTER</code> or <code>DROP</code>. The SQL syntax differs based on which database system is used. <code>Phalcon\\Db</code> offers a unified interface to alter tables, without the need to differentiate the SQL syntax based on the target storage system.</p>"},{"location":"db-layer/#creating-tables","title":"Creating Tables","text":"<p>The following example shows how to create a table:</p> <pre><code>&lt;?php\n\nuse \\Phalcon\\Db\\Column as Column;\n\n$connection-&gt;createTable(\n    'robots',\n    null,\n    [\n       'columns' =&gt; [\n            new Column(\n                'id',\n                [\n                    'type'          =&gt; Column::TYPE_INTEGER,\n                    'size'          =&gt; 10,\n                    'notNull'       =&gt; true,\n                    'autoIncrement' =&gt; true,\n                    'primary'       =&gt; true,\n                ]\n            ),\n            new Column(\n                'name',\n                [\n                    'type'    =&gt; Column::TYPE_VARCHAR,\n                    'size'    =&gt; 70,\n                    'notNull' =&gt; true,\n                ]\n            ),\n            new Column(\n                'year',\n                [\n                    'type'    =&gt; Column::TYPE_INTEGER,\n                    'size'    =&gt; 11,\n                    'notNull' =&gt; true,\n                ]\n            ),\n        ]\n    ]\n);\n</code></pre> <p><code>Phalcon\\Db::createTable()</code> accepts an associative array describing the table. Columns are defined with the class Phalcon\\Db\\Column. The table below shows the options available to define a column:</p> Option Description Optional <code>type</code> Column type. Must be a Phalcon\\Db\\Column constant (see below for a list) No <code>primary</code> True if the column is part of the table's primary key Yes <code>size</code> Some type of columns like <code>VARCHAR</code> or <code>INTEGER</code> may have a specific size Yes <code>scale</code> <code>DECIMAL</code> or <code>NUMBER</code> columns may be have a scale to specify how many decimals should be stored Yes <code>unsigned</code> <code>INTEGER</code> columns may be signed or unsigned. This option does not apply to other types of columns Yes <code>notNull</code> Column can store null values? Yes <code>default</code> Default value (when used with <code>'notNull' =&gt; true</code>). Yes <code>autoIncrement</code> With this attribute column will filled automatically with an auto-increment integer. Only one column in the table can have this attribute. Yes <code>bind</code> One of the <code>BIND_TYPE_*</code> constants telling how the column must be bound before save it Yes <code>first</code> Column must be placed at first position in the column order Yes <code>after</code> Column must be placed after indicated column Yes <p>Phalcon\\Db supports the following database column types:</p> <ul> <li><code>Phalcon\\Db\\Column::TYPE_INTEGER</code></li> <li><code>Phalcon\\Db\\Column::TYPE_DATE</code></li> <li><code>Phalcon\\Db\\Column::TYPE_VARCHAR</code></li> <li><code>Phalcon\\Db\\Column::TYPE_DECIMAL</code></li> <li><code>Phalcon\\Db\\Column::TYPE_DATETIME</code></li> <li><code>Phalcon\\Db\\Column::TYPE_CHAR</code></li> <li><code>Phalcon\\Db\\Column::TYPE_TEXT</code></li> </ul> <p>The associative array passed in <code>Phalcon\\Db::createTable()</code> can have the possible keys:</p> Index Description Optional <code>columns</code> An array with a set of table columns defined with Phalcon\\Db\\Column No <code>indexes</code> An array with a set of table indexes defined with Phalcon\\Db\\Index Yes <code>references</code> An array with a set of table references (foreign keys) defined with Phalcon\\Db\\Reference Yes <code>options</code> An array with a set of table creation options. These options often relate to the database system in which the migration was generated. Yes"},{"location":"db-layer/#altering-tables","title":"Altering Tables","text":"<p>As your application grows, you might need to alter your database, as part of a refactoring or adding new features. Not all database systems allow to modify existing columns or add columns between two existing ones. Phalcon\\Db is limited by these constraints.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Column as Column;\n\n// Adding a new column\n$connection-&gt;addColumn(\n    'robots',\n    null,\n    new Column(\n        'robot_type',\n        [\n            'type'    =&gt; Column::TYPE_VARCHAR,\n            'size'    =&gt; 32,\n            'notNull' =&gt; true,\n            'after'   =&gt; 'name',\n        ]\n    )\n);\n\n// Modifying an existing column\n$connection-&gt;modifyColumn(\n    'robots',\n    null,\n    new Column(\n        'name',\n        [\n            'type'    =&gt; Column::TYPE_VARCHAR,\n            'size'    =&gt; 40,\n            'notNull' =&gt; true,\n        ]\n    )\n);\n\n// Deleting the column 'name'\n$connection-&gt;dropColumn(\n    'robots',\n    null,\n    'name'\n);\n</code></pre>"},{"location":"db-layer/#dropping-tables","title":"Dropping Tables","text":"<p>To drop an existing table from the current database, use the <code>dropTable</code> method. To drop an table from custom database, use second parameter describes database name. Examples on dropping tables:</p> <pre><code>&lt;?php\n\n// Drop table 'robots' from active database\n$connection-&gt;dropTable('robots');\n\n// Drop table 'robots' from database 'machines'\n$connection-&gt;dropTable('robots', 'machines');\n</code></pre>"},{"location":"db-migrations/","title":"Database Migrations","text":"<p>Migrations are a convenient way for you to alter your database in a structured and organized manner.</p> <p>NOTE</p> <p>Migrations are available in Phalcon Developer Tools You need at least Phalcon Framework version 0.5.0 to use developer tools.</p> <p>Often in development we need to update changes in production environments. Some of these changes could be database modifications like new fields, new tables, removing indexes, etc.</p> <p>When a migration is generated a set of classes are created to describe how your database is structured at that particular moment. These classes can be used to synchronize the schema structure on remote databases setting your database ready to work with the new changes that your application implements. Migrations describe these transformations using plain PHP.</p>"},{"location":"db-migrations/#schema-dumping","title":"Schema Dumping","text":"<p>The Phalcon Developer Tools provides scripts to manage migrations (generation, running and rollback).</p> <p>Running this script without any parameters will simply dump every object (tables and views) from your database into migration classes.</p> <p>Each migration has a version identifier associated with it. The version number allows us to identify if the migration is newer or older than the current 'version' of our database. Versions will also inform Phalcon of the running order when executing a migration.</p> <p>When a migration is generated, instructions are displayed on the console to describe the different steps of the migration and the execution time of those statements. At the end, a migration version is generated.</p> <p>By default, Phalcon Developer Tools uses the <code>app/migrations</code> directory to dump the migration files. You can change the location by setting one of the parameters on the generation script. Each table in the database has its respective class generated in a separated file under a directory referring its version:</p>"},{"location":"db-migrations/#migration-class-anatomy","title":"Migration Class Anatomy","text":"<p>Each file contains a unique class that extends the <code>Phalcon\\Mvc\\Model\\Migration</code> class. These classes normally have two methods: <code>up()</code> and <code>down()</code>. <code>up()</code> performs the migration, while <code>down()</code> rolls it back.</p> <p><code>up()</code> also contains the <code>magic</code> method <code>morphTable()</code>. The magic comes when it recognizes the changes needed to synchronize the actual table in the database to the description given.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Column as Column;\nuse Phalcon\\Db\\Index as Index;\nuse Phalcon\\Db\\Reference as Reference;\nuse Phalcon\\Mvc\\Model\\Migration;\n\nclass ProductsMigration_100 extends Migration\n{\n    public function up()\n    {\n        $this-&gt;morphTable(\n            'products',\n            [\n                'columns' =&gt; [\n                    new Column(\n                        'id',\n                        [\n                            'type'          =&gt; Column::TYPE_INTEGER,\n                            'size'          =&gt; 10,\n                            'unsigned'      =&gt; true,\n                            'notNull'       =&gt; true,\n                            'autoIncrement' =&gt; true,\n                            'first'         =&gt; true,\n                        ]\n                    ),\n                    new Column(\n                        'product_types_id',\n                        [\n                            'type'     =&gt; Column::TYPE_INTEGER,\n                            'size'     =&gt; 10,\n                            'unsigned' =&gt; true,\n                            'notNull'  =&gt; true,\n                            'after'    =&gt; 'id',\n                        ]\n                    ),\n                    new Column(\n                        'name',\n                        [\n                            'type'    =&gt; Column::TYPE_VARCHAR,\n                            'size'    =&gt; 70,\n                            'notNull' =&gt; true,\n                            'after'   =&gt; 'product_types_id',\n                        ]\n                    ),\n                    new Column(\n                        'price',\n                        [\n                            'type'    =&gt; Column::TYPE_DECIMAL,\n                            'size'    =&gt; 16,\n                            'scale'   =&gt; 2,\n                            'notNull' =&gt; true,\n                            'after'   =&gt; 'name',\n                        ]\n                    ),\n                ],\n                'indexes' =&gt; [\n                    new Index(\n                        'PRIMARY',\n                        [\n                            'id',\n                        ]\n                    ),\n                    new Index(\n                        'product_types_id',\n                        [\n                            'product_types_id',\n                        ]\n                    ),\n                ],\n                'references' =&gt; [\n                    new Reference(\n                        'products_ibfk_1',\n                        [\n                            'referencedSchema'  =&gt; 'invo',\n                            'referencedTable'   =&gt; 'product_types',\n                            'columns'           =&gt; ['product_types_id'],\n                            'referencedColumns' =&gt; ['id'],\n                        ]\n                    ),\n                ],\n                'options' =&gt; [\n                    'TABLE_TYPE'      =&gt; 'BASE TABLE',\n                    'ENGINE'          =&gt; 'InnoDB',\n                    'TABLE_COLLATION' =&gt; 'utf8_general_ci',\n                ],\n            ]\n        );\n    }\n}\n</code></pre> <p>The class is called <code>ProductsMigration_100</code>. Suffix 100 refers to the version 1.0.0. <code>morphTable()</code> receives an associative array with 4 possible sections:</p> Index Description Optional <code>columns</code> An array with a set of table columns No <code>indexes</code> An array with a set of table indexes. Yes <code>references</code> An array with a set of table references (foreign keys). Yes <code>options</code> An array with a set of table creation options. These options are often related to the database system in which the migration was generated. Yes"},{"location":"db-migrations/#defining-columns","title":"Defining Columns","text":"<p>Phalcon\\Db\\Column is used to define table columns. It encapsulates a wide variety of column related features. Its constructor receives as first parameter the column name and an array describing the column. The following options are available when describing columns:</p> Option Description Optional <code>type</code> Column type. Must be a Phalcon\\Db\\Column constant (see below) No <code>size</code> Some type of columns like VARCHAR or INTEGER may have a specific size Yes <code>scale</code> DECIMAL or NUMBER columns may be have a scale to specify how much decimals it must store Yes <code>unsigned</code> INTEGER columns may be signed or unsigned. This option does not apply to other types of columns Yes <code>notNull</code> Column can store null values? Yes <code>default</code> Defines a default value for a column (can only be an actual value, not a function such as <code>NOW()</code>) Yes <code>autoIncrement</code> With this attribute column will filled automatically with an auto-increment integer. Only one column in the table can have this attribute. Yes <code>first</code> Column must be placed at first position in the column order Yes <code>after</code> Column must be placed after indicated column Yes <p>Database migrations support the following database column types:</p> <ul> <li><code>Phalcon\\Db\\Column::TYPE_INTEGER</code></li> <li><code>Phalcon\\Db\\Column::TYPE_VARCHAR</code></li> <li><code>Phalcon\\Db\\Column::TYPE_CHAR</code></li> <li><code>Phalcon\\Db\\Column::TYPE_DATE</code></li> <li><code>Phalcon\\Db\\Column::TYPE_DATETIME</code></li> <li><code>Phalcon\\Db\\Column::TYPE_TIMESTAMP</code></li> <li><code>Phalcon\\Db\\Column::TYPE_DECIMAL</code></li> <li><code>Phalcon\\Db\\Column::TYPE_TEXT</code></li> <li><code>Phalcon\\Db\\Column::TYPE_BOOLEAN</code></li> <li><code>Phalcon\\Db\\Column::TYPE_FLOAT</code></li> <li><code>Phalcon\\Db\\Column::TYPE_DOUBLE</code></li> <li><code>Phalcon\\Db\\Column::TYPE_TINYBLOB</code></li> <li><code>Phalcon\\Db\\Column::TYPE_BLOB</code></li> <li><code>Phalcon\\Db\\Column::TYPE_MEDIUMBLOB</code></li> <li><code>Phalcon\\Db\\Column::TYPE_LONGBLOB</code></li> <li><code>Phalcon\\Db\\Column::TYPE_JSON</code></li> <li><code>Phalcon\\Db\\Column::TYPE_JSONB</code></li> <li><code>Phalcon\\Db\\Column::TYPE_BIGINTEGER</code></li> </ul>"},{"location":"db-migrations/#defining-indexes","title":"Defining Indexes","text":"<p>Phalcon\\Db\\Index defines table indexes. An index only requires that you define a name for it and a list of its columns. Note that if any index has the name PRIMARY, Phalcon will create a primary key index for that table.</p>"},{"location":"db-migrations/#defining-references","title":"Defining References","text":"<p>Phalcon\\Db\\Reference defines table references (also called foreign keys). The following options can be used to define a reference:</p> Index Description Optional Implemented in <code>referencedTable</code> It's auto-descriptive. It refers to the name of the referenced table. No All <code>columns</code> An array with the name of the columns at the table that have the reference No All <code>referencedColumns</code> An array with the name of the columns at the referenced table No All <code>referencedSchema</code> The referenced table maybe is on another schema or database. This option allows you to define that. Yes All <code>onDelete</code> If the foreign record is removed, perform this action on the local record(s). Yes MySQL PostgreSQL <code>onUpdate</code> If the foreign record is updated, perform this action on the local record(s). Yes MySQL PostgreSQL"},{"location":"db-migrations/#writing-migrations","title":"Writing Migrations","text":"<p>Migrations aren't only designed to 'morph' table. A migration is just a regular PHP class so you're not limited to these functions. For example after adding a column you could write code to set the value of that column for existing records. For more details and examples of individual methods, check the database component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Migration;\n\nclass ProductsMigration_100 extends Migration\n{\n    public function up()\n    {\n        // ...\n\n        self::$_connection-&gt;insert(\n            'products',\n            [\n                'Malabar spinach',\n                14.50,\n            ],\n            [\n                'name',\n                'price',\n            ]\n        );\n    }\n}\n</code></pre>"},{"location":"db-migrations/#running-migrations","title":"Running Migrations","text":"<p>Depending on how outdated is the database with respect to migrations, Phalcon may run multiple migration versions in the same migration process. If you specify a target version, Phalcon will run the required migrations until it reaches the specified version.</p>"},{"location":"db-models-behaviors/","title":"Model Behaviors","text":"<p>Behaviors are shared constructs that several models may adopt in order to re-use code. The ORM provides an API to implement behaviors in your models. Also, you can use the events and callbacks as seen before as an alternative to implement Behaviors with more freedom.</p> <p>A behavior must be added in the model initializer, a model can have zero or more behaviors:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Behavior\\Timestampable;\n\nclass Users extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $created_at;\n\n    public function initialize()\n    {\n        $this-&gt;addBehavior(\n            new Timestampable(\n                [\n                    'beforeCreate' =&gt; [\n                        'field'  =&gt; 'created_at',\n                        'format' =&gt; 'Y-m-d',\n                    ]\n                ]\n            )\n        );\n    }\n}\n</code></pre> <p>The following built-in behaviors are provided by the framework:</p> Name Description Timestampable Allows to automatically update a model's attribute saving the datetime when a record is created or updated SoftDelete Instead of permanently delete a record it marks the record as deleted changing the value of a flag column"},{"location":"db-models-behaviors/#timestampable","title":"Timestampable","text":"<p>This behavior receives an array of options, the first level key must be an event name indicating when the column must be assigned:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Behavior\\Timestampable;\n\npublic function initialize()\n{\n    $this-&gt;addBehavior(\n        new Timestampable(\n            [\n                'beforeCreate' =&gt; [\n                    'field'  =&gt; 'created_at',\n                    'format' =&gt; 'Y-m-d',\n                ]\n            ]\n        )\n    );\n}\n</code></pre> <p>Each event can have its own options, <code>field</code> is the name of the column that must be updated, if <code>format</code> is a string it will be used as format of the PHP's function date, format can also be an anonymous function providing you the free to generate any kind timestamp:</p> <pre><code>&lt;?php\n\nuse DateTime;\nuse DateTimeZone;\nuse Phalcon\\Mvc\\Model\\Behavior\\Timestampable;\n\npublic function initialize()\n{\n    $this-&gt;addBehavior(\n        new Timestampable(\n            [\n                'beforeCreate' =&gt; [\n                    'field'  =&gt; 'created_at',\n                    'format' =&gt; function () {\n                        $datetime = new Datetime(\n                            new DateTimeZone('Europe/Stockholm')\n                        );\n\n                        return $datetime-&gt;format('Y-m-d H:i:sP');\n                    }\n                ]\n            ]\n        )\n    );\n}\n</code></pre> <p>If the option <code>format</code> is omitted a timestamp using the PHP's function time, will be used.</p>"},{"location":"db-models-behaviors/#softdelete","title":"SoftDelete","text":"<p>This behavior can be used as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Behavior\\SoftDelete;\n\nclass Users extends Model\n{\n    const DELETED     = 'D';\n    const NOT_DELETED = 'N';\n\n    public $id;\n    public $name;\n    public $status;\n\n    public function initialize()\n    {\n        $this-&gt;addBehavior(\n            new SoftDelete(\n                [\n                    'field' =&gt; 'status',\n                    'value' =&gt; Users::DELETED,\n                ]\n            )\n        );\n    }\n}\n</code></pre> <p>This behavior accepts two options: <code>field</code> and <code>value</code>, <code>field</code> determines what field must be updated and <code>value</code> the value to be deleted. Let's pretend the table <code>users</code> has the following data:</p> <pre><code>mysql&gt; select * from users;\n+----+---------+--------+\n| id | name    | status |\n+----+---------+--------+\n|  1 | Lana    | N      |\n|  2 | Brandon | N      |\n+----+---------+--------+\n2 rows in set (0.00 sec)\n</code></pre> <p>If we delete any of the two records the status will be updated instead of delete the record:</p> <pre><code>&lt;?php\n\nUsers::findFirst(2)-&gt;delete();\n</code></pre> <p>The operation will result in the following data in the table:</p> <pre><code>mysql&gt; select * from users;\n+----+---------+--------+\n| id | name    | status |\n+----+---------+--------+\n|  1 | Lana    | N      |\n|  2 | Brandon | D      |\n+----+---------+--------+\n2 rows in set (0.01 sec)\n</code></pre> <p>Note that you need to specify the deleted condition in your queries to effectively ignore them as deleted records, this behavior doesn't support that.</p>"},{"location":"db-models-behaviors/#creating-your-own-behaviors","title":"Creating your own behaviors","text":"<p>The ORM provides an API to create your own behaviors. A behavior must be a class implementing the Phalcon\\Mvc\\Model\\BehaviorInterface. Also, Phalcon\\Mvc\\Model\\Behavior provides most of the methods needed to ease the implementation of behaviors.</p> <p>The following behavior is an example, it implements the Blameable behavior which helps identify the user that is performed operations over a model:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Behavior;\nuse Phalcon\\Mvc\\Model\\BehaviorInterface;\n\nclass Blameable extends Behavior implements BehaviorInterface\n{\n    public function notify($eventType, $model)\n    {\n        switch ($eventType) {\n\n            case 'afterCreate':\n            case 'afterDelete':\n            case 'afterUpdate':\n\n                $userName = // ... get the current user from session\n\n                // Store in a log the username, event type and primary key\n                file_put_contents(\n                    'logs/blamable-log.txt',\n                    $userName . ' ' . $eventType . ' ' . $model-&gt;id\n                );\n\n                break;\n\n            default:\n                /* ignore the rest of events */\n        }\n    }\n}\n</code></pre> <p>The former is a very simple behavior, but it illustrates how to create a behavior, now let's add this behavior to a model:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Profiles extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;addBehavior(\n            new Blameable()\n        );\n    }\n}\n</code></pre> <p>A behavior is also capable of intercepting missing methods on your models:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\nuse Phalcon\\Mvc\\Model\\Behavior;\nuse Phalcon\\Mvc\\Model\\BehaviorInterface;\n\nclass Sluggable extends Behavior implements BehaviorInterface\n{\n    public function missingMethod($model, $method, $arguments = [])\n    {\n        // If the method is 'getSlug' convert the title\n        if ($method === 'getSlug') {\n            return Tag::friendlyTitle($model-&gt;title);\n        }\n    }\n}\n</code></pre> <p>Call that method on a model that implements Sluggable returns a SEO friendly title:</p> <pre><code>&lt;?php\n\n$title = $post-&gt;getSlug();\n</code></pre>"},{"location":"db-models-behaviors/#using-traits-as-behaviors","title":"Using Traits as behaviors","text":"<p>You can use Traits to re-use code in your classes, this is another way to implement custom behaviors. The following trait implements a simple version of the Timestampable behavior:</p> <pre><code>&lt;?php\n\ntrait MyTimestampable\n{\n    public function beforeCreate()\n    {\n        $this-&gt;created_at = date('r');\n    }\n\n    public function beforeUpdate()\n    {\n        $this-&gt;updated_at = date('r');\n    }\n}\n</code></pre> <p>Then you can use it in your model as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Products extends Model\n{\n    use MyTimestampable;\n}\n</code></pre>"},{"location":"db-models-cache/","title":"ORM Caching","text":"<p>Every application is different. In most applications though, there is data that changes infrequently. One of the most common bottlenecks in terms of performance, is accessing a database. This is due to the complex connection/communication processes that PHP perform with each request to obtain data from the database. Therefore, if we want to achieve good performance, we need to add some layers of caching where the application requires it.</p> <p>This chapter explains the potential areas where it is possible to implement caching to improve performance. Phalcon gives developers the tools they need to implement cashing where their application needs it.</p>"},{"location":"db-models-cache/#caching-resultsets","title":"Caching Resultsets","text":"<p>A well established technique to avoid continuously accessing the database, is to cache resultsets that don't change frequently, using a system with faster access (usually memory).</p> <p>When Phalcon\\Mvc\\Model requires a service to cache resultsets, it will request it from the Dependency Injection Container. The service name is called <code>modelsCache</code>. Phalcon offers a cache component that can store any kind of data. We will now see how we can integrate it with our Models.</p> <p>First, we will need to register the cache component as a service in the DI container. <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Frontend\\Data as FrontendData;\nuse Phalcon\\Cache\\Backend\\Memcache as BackendMemcache;\n\n// Set the models cache service\n$di-&gt;set(\n    'modelsCache',\n    function () {\n        // Cache data for one day (default setting)\n        $frontCache = new FrontendData(\n            [\n                'lifetime' =&gt; 86400,\n            ]\n        );\n\n        // Memcached connection settings\n        $cache = new BackendMemcache(\n            $frontCache,\n            [\n                'host' =&gt; 'localhost',\n                'port' =&gt; '11211',\n            ]\n        );\n\n        return $cache;\n    }\n);\n</code></pre></p> <p>Phalcon offers complete control in creating and customizing the cache component before registering it as a service in the DI container. Once the cache component is properly set up, resultsets can be cached as follows:</p> <pre><code>&lt;?php\n\n// Get products without caching\n$products = Products::find();\n\n// Just cache the resultset. The cache will expire in 1 hour (3600 seconds)\n$products = Products::find(\n    [\n        'cache' =&gt; [\n            'key' =&gt; 'my-cache',\n        ],\n    ]\n);\n\n// Cache the resultset for only for 5 minutes\n$products = Products::find(\n    [\n        'cache' =&gt; [\n            'key'      =&gt; 'my-cache',\n            'lifetime' =&gt; 300,\n        ],\n    ]\n);\n\n// Use the 'cache' service from the DI instead of 'modelsCache'\n$products = Products::find(\n    [\n        'cache' =&gt; [\n            'key'     =&gt; 'my-cache',\n            'service' =&gt; 'cache',\n        ],\n    ]\n);\n</code></pre> <p>Caching could also be applied to resultsets generated using relationships:</p> <pre><code>&lt;?php\n\n// Query some post\n$post = Post::findFirst();\n\n// Get comments related to a post, also cache it\n$comments = $post-&gt;getComments(\n    [\n        'cache' =&gt; [\n            'key' =&gt; 'my-key',\n        ],\n    ]\n);\n\n// Get comments related to a post, setting lifetime\n$comments = $post-&gt;getComments(\n    [\n        'cache' =&gt; [\n            'key'      =&gt; 'my-key',\n            'lifetime' =&gt; 3600,\n        ],\n    ]\n);\n</code></pre> <p>When a cached resultset needs to be invalidated, you can simply delete it from the cache using the key specified as seen above.</p> <p>Which resultset to cache and for how long is up to the developer, after having evaluated the needs of the application. Resultsets that change frequently should not be cached, since the cache results will be invalidated quickly. Additionally caching resultsets consumes processing cycles, therefore the cache that was intended to speed up the application actually slows it down. Resultsets that do not change frequently should be cached to minimize the database interactions. The decision on where to use caching and for how long is dictated by the application needs.</p>"},{"location":"db-models-cache/#forcing-cache","title":"Forcing Cache","text":"<p>Earlier we saw how Phalcon\\Mvc\\Model integrates with the caching component provided by the framework. To make a record/resultset cacheable we pass the key <code>cache</code> in the array of parameters:</p> <pre><code>&lt;?php\n\n// Cache the resultset for only for 5 minutes\n$products = Products::find(\n    [\n        'cache' =&gt; [\n            'key'      =&gt; 'my-cache',\n            'lifetime' =&gt; 300,\n        ],\n    ]\n);\n</code></pre> <p>This gives us the freedom to cache specific queries, however if we want to cache globally every query performed over the model, we can override the <code>find()</code>/<code>findFirst()</code> methods to force every query to be cached:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    /**\n     * Implement a method that returns a string key based\n     * on the query parameters\n     */\n    protected static function _createKey($parameters)\n    {\n        $uniqueKey = [];\n\n        foreach ($parameters as $key =&gt; $value) {\n            if (is_scalar($value)) {\n                $uniqueKey[] = $key . ':' . $value;\n            } elseif (is_array($value)) {\n                $uniqueKey[] = $key . ':[' . self::_createKey($value) . ']';\n            }\n        }\n\n        return join(',', $uniqueKey);\n    }\n\n    public static function find($parameters = null)\n    {\n        // Convert the parameters to an array\n        if (!is_array($parameters)) {\n            $parameters = [$parameters];\n        }\n\n        // Check if a cache key wasn't passed\n        // and create the cache parameters\n        if (!isset($parameters['cache'])) {\n            $parameters['cache'] = [\n                'key'      =&gt; self::_createKey($parameters),\n                'lifetime' =&gt; 300,\n            ];\n        }\n\n        return parent::find($parameters);\n    }\n\n    public static function findFirst($parameters = null)\n    {\n        // ...\n    }\n}\n</code></pre> <p>Accessing the database is several times slower than calculating a cache key. You're free to implement any key generation strategy you find to better for your needs. Note that a good key avoids collisions as much as possible - meaning that different keys should return unrelated records.</p> <p>This gives you full control on how the cache should be implemented for each model. If this strategy is common to several models you can create a base class for all of them:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass CacheableModel extends Model\n{\n    protected static function _createKey($parameters)\n    {\n        // ... Create a cache key based on the parameters\n    }\n\n    public static function find($parameters = null)\n    {\n        // ... Custom caching strategy\n    }\n\n    public static function findFirst($parameters = null)\n    {\n        // ... Custom caching strategy\n    }\n}\n</code></pre> <p>Then use this class as base class for each <code>Cacheable</code> model:</p> <pre><code>&lt;?php\n\nclass Robots extends CacheableModel\n{\n\n}\n</code></pre>"},{"location":"db-models-cache/#caching-phql-queries","title":"Caching PHQL Queries","text":"<p>Regardless of the syntax we used to create them, all queries in the ORM are handled internally using PHQL. This language gives you much more freedom to create all kinds of queries. Of course these queries can be cached:</p> <pre><code>&lt;?php\n\n$phql = 'SELECT * FROM Cars WHERE name = :name:';\n\n$query = $this-&gt;modelsManager-&gt;createQuery($phql);\n\n$query-&gt;cache(\n    [\n        'key'      =&gt; 'cars-by-name',\n        'lifetime' =&gt; 300,\n    ]\n);\n\n$cars = $query-&gt;execute(\n    [\n        'name' =&gt; 'Audi',\n    ]\n);\n</code></pre>"},{"location":"db-models-cache/#reusable-related-records","title":"Reusable Related Records","text":"<p>Some models may have relationships with other models. This allows us to easily check the records that relate to instances in memory:</p> <pre><code>&lt;?php\n\n// Get some invoice\n$invoice = Invoices::findFirst();\n\n// Get the customer related to the invoice\n$customer = $invoice-&gt;customer;\n\n// Print his/her name\necho $customer-&gt;name, \"\\n\";\n</code></pre> <p>This example is very simple, a customer is queried and can be used as required, for example, to show its name. This also applies if we retrieve a set of invoices to show customers that correspond to these invoices:</p> <pre><code>&lt;?php\n\n// Get a set of invoices\n// SELECT * FROM invoices;\n$invoices = Invoices::find();\n\nforeach ($invoices as $invoice) {\n    // Get the customer related to the invoice\n    // SELECT * FROM customers WHERE id = ?;\n    $customer = $invoice-&gt;customer;\n\n    // Print his/her name\n    echo $customer-&gt;name, \"\\n\";\n}\n</code></pre> <p>A customer may have one or more bills so, in this example, the same customer record may be unnecessarily queried several times. To avoid this, we could mark the relationship as reusable; by doing so, we tell the ORM to automatically reuse the records from memory instead of re-querying them again and again:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            'customers_id',\n            'Customer',\n            'id',\n            [\n                'reusable' =&gt; true,\n            ]\n        );\n    }\n}\n</code></pre> <p>Note that this type of cache works in memory only, this means that cached data are released when the request is terminated.</p>"},{"location":"db-models-cache/#caching-related-records","title":"Caching Related Records","text":"<p>When a related record is queried, the ORM internally builds the appropriate condition and gets the required records using <code>find()</code>/<code>findFirst()</code> in the target model according to the following table:</p> Type Description Implicit Method Belongs-To Returns a model instance of the related record directly <code>findFirst()</code> Has-One Returns a model instance of the related record directly <code>findFirst()</code> Has-Many Returns a collection of model instances of the referenced model <code>find()</code> <p>This means that when you get a related record you could intercept how the data is obtained by implementing the corresponding method:</p> <pre><code>&lt;?php\n\n// Get some invoice\n$invoice = Invoices::findFirst();\n\n// Get the customer related to the invoice\n$customer = $invoice-&gt;customer; // Invoices::findFirst('...');\n\n// Same as above\n$customer = $invoice-&gt;getCustomer(); // Invoices::findFirst('...');\n</code></pre> <p>Accordingly, we could replace the <code>findFirst()</code> method in the Invoices model and implement the cache we consider most appropriate:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public static function findFirst($parameters = null)\n    {\n        // ... Custom caching strategy\n    }\n}\n</code></pre>"},{"location":"db-models-cache/#caching-related-records-recursively","title":"Caching Related Records Recursively","text":"<p>In this scenario, we assume that every time we query a result we also retrieve their associated records. If we store the records found together with their related entities perhaps we could reduce a bit the overhead required to obtain all entities:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    protected static function _createKey($parameters)\n    {\n        // ... Create a cache key based on the parameters\n    }\n\n    protected static function _getCache($key)\n    {\n        // Returns data from a cache\n    }\n\n    protected static function _setCache($key, $results)\n    {\n        // Stores data in the cache\n    }\n\n    public static function find($parameters = null)\n    {\n        // Create a unique key\n        $key = self::_createKey($parameters);\n\n        // Check if there are data in the cache\n        $results = self::_getCache($key);\n\n        // Valid data is an object\n        if (is_object($results)) {\n            return $results;\n        }\n\n        $results = [];\n\n        $invoices = parent::find($parameters);\n\n        foreach ($invoices as $invoice) {\n            // Query the related customer\n            $customer = $invoice-&gt;customer;\n\n            // Assign it to the record\n            $invoice-&gt;customer = $customer;\n\n            $results[] = $invoice;\n        }\n\n        // Store the invoices in the cache + their customers\n        self::_setCache($key, $results);\n\n        return $results;\n    }\n\n    public function initialize()\n    {\n        // Add relations and initialize other stuff\n    }\n}\n</code></pre> <p>Getting the invoices from the cache already obtains the customer data in just one hit, reducing the overall overhead of the operation. Note that this process can also be performed with PHQL following an alternative solution:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        // Add relations and initialize other stuff\n    }\n\n    protected static function _createKey($conditions, $params)\n    {\n        // ... Create a cache key based on the parameters\n    }\n\n    public function getInvoicesCustomers($conditions, $params = null)\n    {\n        $phql = 'SELECT Invoices.*, Customers.* FROM Invoices JOIN Customers WHERE ' . $conditions;\n\n        $query = $this-&gt;getModelsManager()-&gt;executeQuery($phql);\n\n        $query-&gt;cache(\n            [\n                'key'      =&gt; self::_createKey($conditions, $params),\n                'lifetime' =&gt; 300,\n            ]\n        );\n\n        return $query-&gt;execute($params);\n    }\n\n}\n</code></pre>"},{"location":"db-models-cache/#caching-based-on-conditions","title":"Caching based on Conditions","text":"<p>In this scenario, the cache is implemented differently depending on the conditions received. We might decide that the cache backend should be determined by the primary key:</p> Type Cache Backend 1 - 10000 mongo1 10000 - 20000 mongo2 &gt; 20000 mongo3 <p>The easiest way to achieve this is by adding a static method to the model that chooses the right cache to be used:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public static function queryCache($initial, $final)\n    {\n        if ($initial &gt;= 1 &amp;&amp; $final &lt; 10000) {\n            $service = 'mongo1';\n        } elseif ($initial &gt;= 10000 &amp;&amp; $final &lt;= 20000) {\n            $service = 'mongo2';\n        } elseif ($initial &gt; 20000) {\n            $service = 'mongo3';\n        }\n\n        return self::find(\n            [\n                'id &gt;= ' . $initial . ' AND id &lt;= ' . $final,\n                'cache' =&gt; [\n                    'service' =&gt; $service,\n                ],\n            ]\n        );\n    }\n}\n</code></pre> <p>This approach solves the problem, however, if we want to add other parameters such orders or conditions we would have to create a more complicated method. Additionally, this method does not work if the data is obtained using related records or a <code>find()</code>/<code>findFirst()</code>:</p> <pre><code>&lt;?php\n\n$robots = Robots::find('id &lt; 1000');\n$robots = Robots::find(\"id &gt; 100 AND type = 'A'\");\n$robots = Robots::find(\"(id &gt; 100 AND type = 'A') AND id &lt; 2000\");\n\n$robots = Robots::find(\n    [\n        \"(id &gt; ?0 AND type = 'A') AND id &lt; ?1\",\n        'bind'  =&gt; [100, 2000],\n        'order' =&gt; 'type',\n    ]\n);\n</code></pre> <p>To achieve this we need to intercept the intermediate representation (IR) generated by the PHQL parser and thus customize the cache everything possible:</p> <p>The first is create a custom builder, so we can generate a totally customized query:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Query\\Builder as QueryBuilder;\n\nclass CustomQueryBuilder extends QueryBuilder\n{\n    public function getQuery()\n    {\n        $query = new CustomQuery($this-&gt;getPhql());\n\n        $query-&gt;setDI($this-&gt;getDI());\n\n        if ( is_array($this-&gt;_bindParams) ) {\n            $query-&gt;setBindParams($this-&gt;_bindParams);\n        }\n\n        if ( is_array($this-&gt;_bindTypes) ) {\n            $query-&gt;setBindTypes($this-&gt;_bindTypes);\n        }\n\n        if ( is_array($this-&gt;_sharedLock) ) {\n            $query-&gt;setSharedLock($this-&gt;_sharedLock);\n        }\n\n        return $query;\n    }\n}\n</code></pre> <p>Instead of directly returning a Phalcon\\Mvc\\Model\\Query, our custom builder returns a CustomQuery instance, this class looks like:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Query as ModelQuery;\n\nclass CustomQuery extends ModelQuery\n{\n    /**\n     * The execute method is overridden\n     */\n    public function execute($params = null, $types = null)\n    {\n        // Parse the intermediate representation for the SELECT\n        $ir = $this-&gt;parse();\n\n        if ( is_array($this-&gt;_bindParams) ) {\n            $params = array_merge($this-&gt;_bindParams, (array)$params);\n        }\n\n        if ( is_array($this-&gt;_bindTypes) ) {\n            $types = array_merge($this-&gt;_bindTypes, (array)$types);\n        }\n\n        // Check if the query has conditions\n        if (isset($ir['where'])) {\n            // The fields in the conditions can have any order\n            // We need to recursively check the conditions tree\n            // to find the info we're looking for\n            $visitor = new CustomNodeVisitor();\n\n            // Recursively visits the nodes\n            $visitor-&gt;visit($ir['where']);\n\n            $initial = $visitor-&gt;getInitial();\n            $final   = $visitor-&gt;getFinal();\n\n            // Select the cache according to the range\n            // ...\n\n            // Check if the cache has data\n            // ...\n        }\n\n        // Execute the query\n        $result = $this-&gt;_executeSelect($ir, $params, $types);\n        $result = $this-&gt;_uniqueRow ? $result-&gt;getFirst() : $result;\n\n        // Cache the result\n        // ...\n\n        return $result;\n    }\n}\n</code></pre> <p>Implementing a helper (<code>CustomNodeVisitor</code>) that recursively checks the conditions looking for fields that tell us the possible range to be used in the cache:</p> <pre><code>&lt;?php\n\nclass CustomNodeVisitor\n{\n    protected $_initial = 0;\n\n    protected $_final = 25000;\n\n    public function visit($node)\n    {\n        switch ($node['type']) {\n            case 'binary-op':\n                $left  = $this-&gt;visit($node['left']);\n                $right = $this-&gt;visit($node['right']);\n\n                if (!$left || !$right) {\n                    return false;\n                }\n\n                if ($left === 'id') {\n                    if ($node['op'] === '&gt;') {\n                        $this-&gt;_initial = $right;\n                    }\n\n                    if ($node['op'] === '=') {\n                        $this-&gt;_initial = $right;\n                    }\n\n                    if ($node['op'] === '&gt;=') {\n                        $this-&gt;_initial = $right;\n                    }\n\n                    if ($node['op'] === '&lt;') {\n                        $this-&gt;_final = $right;\n                    }\n\n                    if ($node['op'] === '&lt;=') {\n                        $this-&gt;_final = $right;\n                    }\n                }\n\n                break;\n\n            case 'qualified':\n                if ($node['name'] === 'id') {\n                    return 'id';\n                }\n\n                break;\n\n            case 'literal':\n                return $node['value'];\n\n            default:\n                return false;\n        }\n    }\n\n    public function getInitial()\n    {\n        return $this-&gt;_initial;\n    }\n\n    public function getFinal()\n    {\n        return $this-&gt;_final;\n    }\n}\n</code></pre> <p>Finally, we can replace the find method in the Robots model to use the custom classes we've created:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public static function find($parameters = null)\n    {\n        if (!is_array($parameters)) {\n            $parameters = [$parameters];\n        }\n\n        $builder = new CustomQueryBuilder($parameters);\n\n        $builder-&gt;from(get_called_class());\n\n        $query = $builder-&gt;getQuery();\n\n        if (isset($parameters['bind'])) {\n            return $query-&gt;execute($parameters['bind']);\n        } else {\n            return $query-&gt;execute();\n        }\n    }\n}\n</code></pre>"},{"location":"db-models-cache/#caching-phql-execution-plan","title":"Caching PHQL execution plan","text":"<p>As well as most moderns database systems PHQL internally caches the execution plan, if the same statement is executed several times PHQL reuses the previously generated plan improving performance, for a developer to take better advantage of this is highly recommended build all your SQL statements passing variable parameters as bound parameters:</p> <pre><code>&lt;?php\n\nfor ($i = 1; $i &lt;= 10; $i++) {\n    $phql = 'SELECT * FROM Store\\Robots WHERE id = ' . $i;\n\n    $robots = $this-&gt;modelsManager-&gt;executeQuery($phql);\n\n    // ...\n}\n</code></pre> <p>In the above example, ten plans were generated increasing the memory usage and processing in the application. Rewriting the code to take advantage of bound parameters reduces the processing by both ORM and database system:</p> <pre><code>&lt;?php\n\n$phql = 'SELECT * FROM Store\\Robots WHERE id = ?0';\n\nfor ($i = 1; $i &lt;= 10; $i++) {\n    $robots = $this-&gt;modelsManager-&gt;executeQuery(\n        $phql,\n        [\n            $i,\n        ]\n    );\n\n    // ...\n}\n</code></pre> <p>Performance can be also improved reusing the PHQL query:</p> <pre><code>&lt;?php\n\n$phql = 'SELECT * FROM Store\\Robots WHERE id = ?0';\n\n$query = $this-&gt;modelsManager-&gt;createQuery($phql);\n\nfor ($i = 1; $i &lt;= 10; $i++) {\n    $robots = $query-&gt;execute(\n        $phql,\n        [\n            $i,\n        ]\n    );\n\n    // ...\n}\n</code></pre> <p>Execution plans for queries involving prepared statements are also cached by most database systems reducing the overall execution time, also protecting your application against SQL Injections.</p>"},{"location":"db-models-events/","title":"Model Events","text":""},{"location":"db-models-events/#events-and-events-manager","title":"Events and Events Manager","text":"<p>Models allow you to implement events that will be thrown while performing an insert/update/delete which can be used to define business rules. The following are the events supported by Phalcon\\Mvc\\Model and their order of execution:</p> Operation Name Can stop operation? Explanation Inserting afterCreate NO Runs after the required operation over the database system only when an inserting operation is being made Inserting/Updating afterSave NO Runs after the required operation over the database system Updating afterUpdate NO Runs after the required operation over the database system only when an updating operation is being made Inserting/Updating afterValidation YES Is executed after the fields are validated for not nulls/empty strings or foreign keys Inserting afterValidationOnCreate YES Is executed after the fields are validated for not nulls/empty strings or foreign keys when an insertion operation is being made Updating afterValidationOnUpdate YES Is executed after the fields are validated for not nulls/empty strings or foreign keys when an updating operation is being made Inserting beforeCreate YES Runs before the required operation over the database system only when an inserting operation is being made Inserting/Updating beforeSave YES Runs before the required operation over the database system Updating beforeUpdate YES Runs before the required operation over the database system only when an updating operation is being made Inserting/Updating beforeValidation YES Is executed before the fields are validated for not nulls/empty strings or foreign keys Inserting beforeValidationOnCreate YES Is executed before the fields are validated for not nulls/empty strings or foreign keys when an insertion operation is being made Updating beforeValidationOnUpdate YES Is executed before the fields are validated for not nulls/empty strings or foreign keys when an updating operation is being made Inserting/Updating onValidationFails YES (already stopped) Is executed after an integrity validator fails Inserting/Updating prepareSave NO Is executed before saving and allows data manipulation Inserting/Updating validation YES Is executed before the fields are validated for not nulls/empty strings or foreign keys when an updating operation is being made"},{"location":"db-models-events/#implementing-events-in-the-models-class","title":"Implementing Events in the Model's class","text":"<p>The easier way to make a model react to events is to implement a method with the same name of the event in the model's class:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function beforeValidationOnCreate()\n    {\n        echo 'This is executed before creating a Robot!';\n    }\n}\n</code></pre> <p>Events can be used to assign values before performing an operation, for example:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Products extends Model\n{\n    public function beforeCreate()\n    {\n        // Set the creation date\n        $this-&gt;created_at = date('Y-m-d H:i:s');\n    }\n\n    public function beforeUpdate()\n    {\n        // Set the modification date\n        $this-&gt;modified_in = date('Y-m-d H:i:s');\n    }\n}\n</code></pre>"},{"location":"db-models-events/#using-a-custom-events-manager","title":"Using a custom Events Manager","text":"<p>Additionally, this component is integrated with Phalcon\\Events\\Manager, this means we can create listeners that run when an event is triggered.</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $eventsManager = new EventsManager();\n\n        // Attach an anonymous function as a listener for 'model' events\n        $eventsManager-&gt;attach(\n            'model:beforeSave',\n            function (Event $event, $robot) {\n                if ($robot-&gt;name === 'Scooby Doo') {\n                    echo \"Scooby Doo isn't a robot!\";\n\n                    return false;\n                }\n\n                return true;\n            }\n        );\n\n        // Attach the events manager to the event\n        $this-&gt;setEventsManager($eventsManager);\n    }\n}\n</code></pre> <p>In the example given above, the Events Manager only acts as a bridge between an object and a listener (the anonymous function). Events will be fired to the listener when <code>robots</code> are saved:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robot = new Robots();\n\n$robot-&gt;name = 'Scooby Doo';\n$robot-&gt;year = 1969;\n\n$robot-&gt;save();\n</code></pre> <p>If we want all objects created in our application use the same EventsManager, then we need to assign it to the Models Manager:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n// Registering the modelsManager service\n$di-&gt;setShared(\n    'modelsManager',\n    function () {\n        $eventsManager = new EventsManager();\n\n        // Attach an anonymous function as a listener for 'model' events\n        $eventsManager-&gt;attach(\n            'model:beforeSave',\n            function (Event $event, $model) {\n                // Catch events produced by the Robots model\n                if (get_class($model) === 'Store\\Toys\\Robots') {\n                    if ($model-&gt;name === 'Scooby Doo') {\n                        echo \"Scooby Doo isn't a robot!\";\n\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n        );\n\n        // Setting a default EventsManager\n        $modelsManager = new ModelsManager();\n\n        $modelsManager-&gt;setEventsManager($eventsManager);\n\n        return $modelsManager;\n    }\n);\n</code></pre> <p>If a listener returns false that will stop the operation that is executing currently.</p>"},{"location":"db-models-events/#logging-low-level-sql-statements","title":"Logging Low-Level SQL Statements","text":"<p>When using high-level abstraction components such as Phalcon\\Mvc\\Model to access a database, it is difficult to understand which statements are finally sent to the database system. Phalcon\\Mvc\\Model is supported internally by Phalcon\\Db. Phalcon\\Logger interacts with Phalcon\\Db, providing logging capabilities on the database abstraction layer, thus allowing us to log SQL statements as they happen.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Logger\\Adapter\\File as FileLogger;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as Connection;\n\n$di-&gt;set(\n    'db',\n    function () {\n        $eventsManager = new EventsManager();\n\n        $logger = new FileLogger('app/logs/debug.log');\n\n        // Listen all the database events\n        $eventsManager-&gt;attach(\n            'db:beforeQuery',\n            function ($event, $connection) use ($logger) {\n                $logger-&gt;log(\n                    $connection-&gt;getSQLStatement(),\n                    Logger::INFO\n                );\n            }\n        );\n\n        $connection = new Connection(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'invo',\n            ]\n        );\n\n        // Assign the eventsManager to the db adapter instance\n        $connection-&gt;setEventsManager($eventsManager);\n\n        return $connection;\n    }\n);\n</code></pre> <p>As models access the default database connection, all SQL statements that are sent to the database system will be logged in the file:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robot = new Robots();\n\n$robot-&gt;name       = 'Robby the Robot';\n$robot-&gt;created_at = '1956-07-21';\n\nif ($robot-&gt;save() === false) {\n    echo 'Cannot save robot';\n}\n</code></pre> <p>As above, the file app/logs/db.log will contain something like this:</p> <p><code>[Mon, 30 Apr 12 13:47:18 -0500][DEBUG][Resource Id #77] INSERT INTO robots</code> <code>(name, created_at) VALUES ('Robby the Robot', '1956-07-21')</code></p>"},{"location":"db-models-events/#profiling-sql-statements","title":"Profiling SQL Statements","text":"<p>Thanks to Phalcon\\Db, the underlying component of Phalcon\\Mvc\\Model, it's possible to profile the SQL statements generated by the ORM in order to analyze the performance of database operations. With this you can diagnose performance problems and to discover bottlenecks.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Profiler as ProfilerDb;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as MysqlPdo;\n\n$di-&gt;set(\n    'profiler',\n    function () {\n        return new ProfilerDb();\n    },\n    true\n);\n\n$di-&gt;set(\n    'db',\n    function () use ($di) {\n        $eventsManager = new EventsManager();\n\n        // Get a shared instance of the DbProfiler\n        $profiler = $di-&gt;getProfiler();\n\n        // Listen all the database events\n        $eventsManager-&gt;attach(\n            'db',\n            function ($event, $connection) use ($profiler) {\n                if ($event-&gt;getType() === 'beforeQuery') {\n                    $profiler-&gt;startProfile(\n                        $connection-&gt;getSQLStatement()\n                    );\n                }\n\n                if ($event-&gt;getType() === 'afterQuery') {\n                    $profiler-&gt;stopProfile();\n                }\n            }\n        );\n\n        $connection = new MysqlPdo(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'invo',\n            ]\n        );\n\n        // Assign the eventsManager to the db adapter instance\n        $connection-&gt;setEventsManager($eventsManager);\n\n        return $connection;\n    }\n);\n</code></pre> <p>Profiling some queries:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n// Send some SQL statements to the database\nRobots::find();\n\nRobots::find(\n    [\n        'order' =&gt; 'name',\n    ]\n);\n\nRobots::find(\n    [\n        'limit' =&gt; 30,\n    ]\n);\n\n// Get the generated profiles from the profiler\n$profiles = $di-&gt;get('profiler')-&gt;getProfiles();\n\nforeach ($profiles as $profile) {\n   echo 'SQL Statement: ', $profile-&gt;getSQLStatement(), '\\n';\n   echo 'Start Time: ', $profile-&gt;getInitialTime(), '\\n';\n   echo 'Final Time: ', $profile-&gt;getFinalTime(), '\\n';\n   echo 'Total Elapsed Time: ', $profile-&gt;getTotalElapsedSeconds(), '\\n';\n}\n</code></pre> <p>Each generated profile contains the duration in milliseconds that each instruction takes to complete as well as the generated SQL statement.</p>"},{"location":"db-models-metadata/","title":"Models Metadata","text":"<p>To speed up development Phalcon\\Mvc\\Model helps you to query fields and constraints from tables related to models. To achieve this, Phalcon\\Mvc\\Model\\MetaData is available to manage and cache table metadata.</p> <p>Sometimes it is necessary to get those attributes when working with models. You can get a metadata instance as follows:</p> <pre><code>&lt;?php\n\n$robot = new Robots();\n\n// Get Phalcon\\Mvc\\Model\\Metadata instance\n$metadata = $robot-&gt;getModelsMetaData();\n\n// Get robots fields names\n$attributes = $metadata-&gt;getAttributes($robot);\nprint_r($attributes);\n\n// Get robots fields data types\n$dataTypes = $metadata-&gt;getDataTypes($robot);\nprint_r($dataTypes);\n</code></pre>"},{"location":"db-models-metadata/#caching-metadata","title":"Caching Metadata","text":"<p>Once the application is in a production stage, it is not necessary to query the metadata of the table from the database system each time you use the table. This could be done caching the metadata using any of the following adapters:</p> Adapter Description API Apc This adapter uses the Alternative PHP Cache (APC) to store the table metadata. You can specify the lifetime of the metadata with options. (Recommended for Production). Phalcon\\Mvc\\Model\\MetaData\\Apc Files This adapter uses plain files to store metadata. This adapter reduces database queries but has an increased I/O with the file system. Phalcon\\Mvc\\Model\\MetaData\\Files Libmemcached This adapter uses the Memcached Server to store the table metadata. The server parameters as well as the cache lifetime are specified in the options. (Recommended for Production) Phalcon\\Mvc\\Model\\MetaData\\Libmemcached Memcache This adapter uses Memcache to store the table metadata. You can specify the lifetime of the metadata with options. (Recommended for Production) <code>Phalcon\\Mvc\\Model\\MetaData\\MEmcache</code> Memory This adapter is the default. The metadata is cached only during the request. When the request is completed, the metadata are released as part of the normal memory of the request. (Recommended for Development) Phalcon\\Mvc\\Model\\MetaData\\Memory Redis This adapter uses Redis to store the table metadata. The server parameters as well as the cache lifetime are specified in the options. (Recommended for Production). Phalcon\\Mvc\\Model\\MetaData\\Redis Session This adapter stores metadata in the <code>$_SESSION</code> superglobal. This adapter is recommended only when the application is actually using a small number of models. The metadata are refreshed every time a new session starts. This also requires the use of <code>session_start()</code> to start the session before using any models. Phalcon\\Mvc\\Model\\MetaData\\Session XCache This adapter uses XCache                     to store the table metadata. You can specify the lifetime of the metadata with options. This is one of the recommended ways to store metadata when the application is in production. Phalcon\\Mvc\\Model\\MetaData\\Xcache <p>As other ORM's dependencies, the metadata manager is requested from the services container:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\MetaData\\Apc as ApcMetaData;\n\n$di['modelsMetadata'] = function () {\n    // Create a metadata manager with APC\n    $metadata = new ApcMetaData(\n        [\n            'lifetime' =&gt; 86400,\n            'prefix'   =&gt; 'my-prefix',\n        ]\n    );\n\n    return $metadata;\n};\n</code></pre>"},{"location":"db-models-metadata/#metadata-strategies","title":"Metadata Strategies","text":"<p>As mentioned above the default strategy to obtain the model's metadata is database introspection. In this strategy, the information schema is used to know the fields in a table, its primary key, nullable fields, data types, etc.</p> <p>You can change the default metadata introspection in the following way:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\MetaData\\Apc as ApcMetaData;\n\n$di['modelsMetadata'] = function () {\n    // Instantiate a metadata adapter\n    $metadata = new ApcMetaData(\n        [\n            'lifetime' =&gt; 86400,\n            'prefix'   =&gt; 'my-prefix',\n        ]\n    );\n\n    // Set a custom metadata introspection strategy\n    $metadata-&gt;setStrategy(\n        new MyIntrospectionStrategy()\n    );\n\n    return $metadata;\n};\n</code></pre>"},{"location":"db-models-metadata/#database-introspection-strategy","title":"Database Introspection Strategy","text":"<p>This strategy doesn't require any customization and is implicitly used by all the metadata adapters.</p>"},{"location":"db-models-metadata/#annotations-strategy","title":"Annotations Strategy","text":"<p>This strategy makes use of <code>annotations &lt;annotations&gt;</code> to describe the columns in a model:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    /**\n     * @Primary\n     * @Identity\n     * @Column(type='integer', nullable=false)\n     */\n    public $id;\n\n    /**\n     * @Column(type='string', length=70, nullable=false)\n     */\n    public $name;\n\n    /**\n     * @Column(type='string', length=32, nullable=false)\n     */\n    public $type;\n\n    /**\n     * @Column(type='integer', nullable=false)\n     */\n    public $year;\n}\n</code></pre> <p>Annotations must be placed in properties that are mapped to columns in the mapped source. Properties without the <code>@Column</code> annotation are handled as simple class attributes.</p> <p>The following annotations are supported:</p> Name Description Primary Mark the field as part of the table's primary key Identity The field is an auto_increment/serial column Column This marks an attribute as a mapped column <p>The annotation <code>@Column</code> supports the following parameters:</p> Name Description column Real column name type The column's types: varchar/string (default), text, char, json, tinyblob, blob, mediumblob, longblob, integer, biginteger, float, decimal, date, datetime, timestamp, boolean length The column's length if any nullable Set whether the column accepts null values or not skip_on_insert Skip this column on insert skip_on_update Skip this column on updates allow_empty_string Column allow empty strings default Default value <p>The annotations strategy could be set up this way:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\MetaData\\Apc as ApcMetaData;\nuse Phalcon\\Mvc\\Model\\MetaData\\Strategy\\Annotations as StrategyAnnotations;\n\n$di['modelsMetadata'] = function () {\n    // Instantiate a metadata adapter\n    $metadata = new ApcMetaData(\n        [\n            'lifetime' =&gt; 86400,\n            'prefix'   =&gt; 'my-prefix',\n        ]\n    );\n\n    // Set a custom metadata database introspection\n    $metadata-&gt;setStrategy(\n        new StrategyAnnotations()\n    );\n\n    return $metadata;\n};\n</code></pre>"},{"location":"db-models-metadata/#manual-metadata","title":"Manual Metadata","text":"<p>Using the introspection strategies presented above, Phalcon can obtain the metadata for each model automatically without the developer needing to set them manually.</p> <p>The developer also has the option of define the metadata manually. This strategy overrides any strategy set in the metadata manager. New columns added/modified/removed to/from the mapped table must be added/modified/removed also for everything to work properly.</p> <p>The following example shows how to define the metadata manually:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Db\\Column;\nuse Phalcon\\Mvc\\Model\\MetaData;\n\nclass Robots extends Model\n{\n    public function metaData()\n    {\n        return array(\n            // Every column in the mapped table\n            MetaData::MODELS_ATTRIBUTES =&gt; [\n                'id',\n                'name',\n                'type',\n                'year',\n            ],\n\n            // Every column part of the primary key\n            MetaData::MODELS_PRIMARY_KEY =&gt; [\n                'id',\n            ],\n\n            // Every column that isn't part of the primary key\n            MetaData::MODELS_NON_PRIMARY_KEY =&gt; [\n                'name',\n                'type',\n                'year',\n            ],\n\n            // Every column that doesn't allows null values\n            MetaData::MODELS_NOT_NULL =&gt; [\n                'id',\n                'name',\n                'type',\n            ],\n\n            // Every column and their data types\n            MetaData::MODELS_DATA_TYPES =&gt; [\n                'id'   =&gt; Column::TYPE_INTEGER,\n                'name' =&gt; Column::TYPE_VARCHAR,\n                'type' =&gt; Column::TYPE_VARCHAR,\n                'year' =&gt; Column::TYPE_INTEGER,\n            ],\n\n            // The columns that have numeric data types\n            MetaData::MODELS_DATA_TYPES_NUMERIC =&gt; [\n                'id'   =&gt; true,\n                'year' =&gt; true,\n            ],\n\n            // The identity column, use boolean false if the model doesn't have\n            // an identity column\n            MetaData::MODELS_IDENTITY_COLUMN =&gt; 'id',\n\n            // How every column must be bound/casted\n            MetaData::MODELS_DATA_TYPES_BIND =&gt; [\n                'id'   =&gt; Column::BIND_PARAM_INT,\n                'name' =&gt; Column::BIND_PARAM_STR,\n                'type' =&gt; Column::BIND_PARAM_STR,\n                'year' =&gt; Column::BIND_PARAM_INT,\n            ],\n\n            // Fields that must be ignored from INSERT SQL statements\n            MetaData::MODELS_AUTOMATIC_DEFAULT_INSERT =&gt; [\n                'year' =&gt; true,\n            ],\n\n            // Fields that must be ignored from UPDATE SQL statements\n            MetaData::MODELS_AUTOMATIC_DEFAULT_UPDATE =&gt; [\n                'year' =&gt; true,\n            ],\n\n            // Default values for columns\n            MetaData::MODELS_DEFAULT_VALUES =&gt; [\n                'year' =&gt; '2015',\n            ],\n\n            // Fields that allow empty strings\n            MetaData::MODELS_EMPTY_STRING_VALUES =&gt; [\n                'name' =&gt; true,\n            ],\n        );\n    }\n}\n</code></pre>"},{"location":"db-models-relationships/","title":"Model Relationships","text":""},{"location":"db-models-relationships/#relationships-between-models","title":"Relationships between Models","text":"<p>There are four types of relationships: one-on-one, one-to-many, many-to-one and many-to-many. The relationship may be unidirectional or bidirectional, and each can be simple (a one to one model) or more complex (a combination of models). The model manager manages foreign key constraints for these relationships, the definition of these helps referential integrity as well as easy and fast access of related records to a model. Through the implementation of relations, it is easy to access data in related models from each record in a uniform way.</p>"},{"location":"db-models-relationships/#unidirectional-relationships","title":"Unidirectional relationships","text":"<p>Unidirectional relations are those that are generated in relation to one another but not vice versa.</p>"},{"location":"db-models-relationships/#bidirectional-relations","title":"Bidirectional relations","text":"<p>The bidirectional relations build relationships in both models and each model defines the inverse relationship of the other.</p>"},{"location":"db-models-relationships/#defining-relationships","title":"Defining relationships","text":"<p>In Phalcon, relationships must be defined in the <code>initialize()</code> method of a model. The methods <code>belongsTo()</code>, <code>hasOne()</code>, <code>hasMany()</code> and <code>hasManyToMany()</code> define the relationship between one or more fields from the current model to fields in another model. Each of these methods requires 3 parameters: local fields, referenced model, referenced fields.</p> Method Description hasMany Defines a 1-n relationship hasOne Defines a 1-1 relationship belongsTo Defines a n-1 relationship hasManyToMany Defines a n-n relationship <p>The following schema shows 3 tables whose relations will serve us as an example regarding relationships:</p> <pre><code>CREATE TABLE robots (\n    id int(10) unsigned NOT NULL AUTO_INCREMENT,\n    name varchar(70) NOT NULL,\n    type varchar(32) NOT NULL,\n    year int(11) NOT NULL,\n    PRIMARY KEY (id)\n);\n\nCREATE TABLE robots_parts (\n    id int(10) unsigned NOT NULL AUTO_INCREMENT,\n    robots_id int(10) NOT NULL,\n    parts_id int(10) NOT NULL,\n    created_at DATE NOT NULL,\n    PRIMARY KEY (id),\n    KEY robots_id (robots_id),\n    KEY parts_id (parts_id)\n);\n\nCREATE TABLE parts (\n    id int(10) unsigned NOT NULL AUTO_INCREMENT,\n    name varchar(70) NOT NULL,\n    PRIMARY KEY (id)\n);\n</code></pre> <ul> <li>The model <code>Robots</code> has many <code>RobotsParts</code>.</li> <li>The model <code>Parts</code> has many <code>RobotsParts</code>.</li> <li>The model <code>RobotsParts</code> belongs to both <code>Robots</code> and <code>Parts</code> models as a many-to-one relation.</li> <li>The model <code>Robots</code> has a relation many-to-many to <code>Parts</code> through <code>RobotsParts</code>.</li> </ul> <p>The models with their relations could be implemented as follows:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public function initialize()\n    {\n        $this-&gt;hasMany(\n            'id',\n            'RobotsParts',\n            'robots_id'\n        );\n    }\n}\n</code></pre> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Parts extends Model\n{\n    public $id;\n\n    public $name;\n\n    public function initialize()\n    {\n        $this-&gt;hasMany(\n            'id',\n            'RobotsParts',\n            'parts_id'\n        );\n    }\n}\n</code></pre> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass RobotsParts extends Model\n{\n    public $id;\n\n    public $robots_id;\n\n    public $parts_id;\n\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            'robots_id',\n            'Store\\Toys\\Robots',\n            'id'\n        );\n\n        $this-&gt;belongsTo(\n            'parts_id',\n            'Parts',\n            'id'\n        );\n    }\n}\n</code></pre> <p>The first parameter indicates the field of the local model used in the relationship; the second indicates the name of the referenced model and the third the field name in the referenced model. You could also use arrays to define multiple fields in the relationship.</p> <p>Many to many relationships require 3 models and define the attributes involved in the relationship:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public function initialize()\n    {\n        $this-&gt;hasManyToMany(\n            'id',\n            'RobotsParts',\n            'robots_id', 'parts_id',\n            'Parts',\n            'id'\n        );\n    }\n}\n</code></pre>"},{"location":"db-models-relationships/#relationships-with-parameters","title":"Relationships with parameters","text":"<p>Depending on the needs of our application we might want to store data in one table, that describe different behaviors. For instance you might want to only have a table called <code>parts</code> which has a field <code>type</code> describing the type of the part. </p> <p>Using relationships, we can get only those parts that relate to our Robot that are of certain type. Defining that constraint in our relationship allows us to let the model do all the work.</p> <pre><code>&lt;?php\n\n namespace Store\\Toys;\n\n use Phalcon\\Mvc\\Model;\n\n class Robots extends Model\n {\n     public $id;\n\n     public $name;\n\n     public $type;\n\n     public function initialize()\n     {\n         $this-&gt;hasMany(\n             'id',\n             Parts::class,\n             'robotId',\n             [\n                 'reusable' =&gt; true, // cache related data\n                 'alias'    =&gt; 'mechanicalParts',\n                 'params'   =&gt; [\n                     'conditions' =&gt; 'robotTypeId = :type:',\n                     'bind'       =&gt; [\n                         'type' =&gt; 4,\n                     ]\n                 ]\n             ]\n         );\n     }\n }\n ```\n\n\n#### Multiple field relationships\nThere are times where relationships need to be defined on a combination of fields and not only one. Consider the following example:\n\n```php\n&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $type;\n}\n</code></pre> <p>and</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Parts extends Model\n{\n    public $id;\n\n    public $robotId;\n\n    public $robotType;\n\n    public $name;\n}\n</code></pre> <p>In the above we have a <code>Robots</code> model which has three properties. A unique <code>id</code>, a <code>name</code> and a <code>type</code> which defines what this robot is (mechnical, etc.); In the <code>Parts</code> model we also have a <code>name</code> for the part but also fields that tie the robot and its type with a specific part. </p> <p>Using the relationships options discussed earlier, binding one field between the two models will not return the results we need. For that we can use an array in our relationship:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $type;\n\n    public function initialize()\n    {\n        $this-&gt;hasOne(\n            ['id', 'type'],\n            Parts::class,\n            ['robotId', 'robotType'],\n            [\n                'reusable' =&gt; true, // cache related data\n                'alias'    =&gt; 'parts',\n            ]\n        );\n    }\n}\n</code></pre> <p>NOTE The field mappings in the relationship are one for one i.e. the first field of the source model array matches the first field of the target array etc. The field count must be identical in both source and target models.</p>"},{"location":"db-models-relationships/#taking-advantage-of-relationships","title":"Taking advantage of relationships","text":"<p>When explicitly defining the relationships between models, it is easy to find related records for a particular record.</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst(2);\n\nforeach ($robot-&gt;robotsParts as $robotPart) {\n    echo $robotPart-&gt;parts-&gt;name, \"\\n\";\n}\n</code></pre> <p>Phalcon uses the magic methods <code>__set</code>/<code>__get</code>/<code>__call</code> to store or retrieve related data using relationships.</p> <p>By accessing an attribute with the same name as the relationship will retrieve all its related record(s).</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst();\n\n// All the related records in RobotsParts\n$robotsParts = $robot-&gt;robotsParts;\n</code></pre> <p>Also, you can use a magic getter:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst();\n\n// All the related records in RobotsParts\n$robotsParts = $robot-&gt;getRobotsParts();\n\n// Passing parameters\n$robotsParts = $robot-&gt;getRobotsParts(\n    [\n        'limit' =&gt; 5,\n    ]\n);\n</code></pre> <p>If the called method has a <code>get</code> prefix Phalcon\\Mvc\\Model will return a <code>findFirst()</code>/<code>find()</code> result. The following example compares retrieving related results with using magic methods and without:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst(2);\n\n// Robots model has a 1-n (hasMany)\n// relationship to RobotsParts then\n$robotsParts = $robot-&gt;robotsParts;\n\n// Only parts that match conditions\n$robotsParts = $robot-&gt;getRobotsParts(\n    [\n        'created_at = :date:',\n        'bind' =&gt; [\n            'date' =&gt; '2015-03-15'\n        ]\n    ]\n);\n\n$robotPart = RobotsParts::findFirst(1);\n\n// RobotsParts model has a n-1 (belongsTo)\n// relationship to RobotsParts then\n$robot = $robotPart-&gt;robots;\n</code></pre> <p>Getting related records manually:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst(2);\n\n// Robots model has a 1-n (hasMany)\n// relationship to RobotsParts, then\n$robotsParts = RobotsParts::find(\n    [\n        'robots_id = :id:',\n        'bind' =&gt; [\n            'id' =&gt; $robot-&gt;id,\n        ]\n    ]\n);\n\n// Only parts that match conditions\n$robotsParts = RobotsParts::find(\n    [\n        'robots_id = :id: AND created_at = :date:',\n        'bind' =&gt; [\n            'id'   =&gt; $robot-&gt;id,\n            'date' =&gt; '2015-03-15',\n        ]\n    ]\n);\n\n$robotPart = RobotsParts::findFirst(1);\n\n// RobotsParts model has a n-1 (belongsTo)\n// relationship to RobotsParts then\n$robot = Robots::findFirst(\n    [\n        'id = :id:',\n        'bind' =&gt; [\n            'id' =&gt; $robotPart-&gt;robots_id,\n        ]\n    ]\n);\n</code></pre> <p>The prefix <code>get</code> is used to <code>find()</code>/<code>findFirst()</code> related records. Depending on the type of relation it will use <code>find()</code> or <code>findFirst()</code>:</p> Type Description Implicit Method Belongs-To Returns a model instance of the related record directly findFirst Has-One Returns a model instance of the related record directly findFirst Has-Many Returns a collection of model instances of the referenced model find Has-Many-to-Many Returns a collection of model instances of the referenced model, it implicitly does 'inner joins' with the involved models (complex query) <p>You can also use the <code>count</code> prefix to return an integer denoting the count of the related records:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst(2);\n\necho 'The robot has ', $robot-&gt;countRobotsParts(), \" parts\\n\";\n</code></pre>"},{"location":"db-models-relationships/#aliasing-relationships","title":"Aliasing Relationships","text":"<p>To explain better how aliases work, let's check the following example:</p> <p>The <code>robots_similar</code> table has the function to define what robots are similar to others:</p> <pre><code>mysql&gt; desc robots_similar;\n+-------------------+------------------+------+-----+---------+----------------+\n| Field             | Type             | Null | Key | Default | Extra          |\n+-------------------+------------------+------+-----+---------+----------------+\n| id                | int(10) unsigned | NO   | PRI | NULL    | auto_increment |\n| robots_id         | int(10) unsigned | NO   | MUL | NULL    |                |\n| similar_robots_id | int(10) unsigned | NO   |     | NULL    |                |\n+-------------------+------------------+------+-----+---------+----------------+\n3 rows in set (0.00 sec)\n</code></pre> <p>Both <code>robots_id</code> and <code>similar_robots_id</code> have a relation to the model Robots.</p> <p>A model that maps this table and its relationships is the following:</p> <pre><code>&lt;?php\n\nclass RobotsSimilar extends Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            'robots_id',\n            'Store\\Toys\\Robots',\n            'id'\n        );\n\n        $this-&gt;belongsTo(\n            'similar_robots_id',\n            'Store\\Toys\\Robots',\n            'id'\n        );\n    }\n}\n</code></pre> <p>Since both relations point to the same model (Robots), obtain the records related to the relationship could not be clear:</p> <pre><code>&lt;?php\n\n$robotsSimilar = RobotsSimilar::findFirst();\n\n// Returns the related record based on the column (robots_id)\n// Also as is a belongsTo it's only returning one record\n// but the name 'getRobots' seems to imply that return more than one\n$robot = $robotsSimilar-&gt;getRobots();\n\n// but, how to get the related record based on the column (similar_robots_id)\n// if both relationships have the same name?\n</code></pre> <p>The aliases allow us to rename both relationships to solve these problems:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass RobotsSimilar extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            'robots_id',\n            'Store\\Toys\\Robots',\n            'id',\n            [\n                'alias' =&gt; 'Robot',\n            ]\n        );\n\n        $this-&gt;belongsTo(\n            'similar_robots_id',\n            'Store\\Toys\\Robots',\n            'id',\n            [\n                'alias' =&gt; 'SimilarRobot',\n            ]\n        );\n    }\n}\n</code></pre> <p>With the aliasing we can get the related records easily. You can also use the <code>getRelated()</code> method to access the relationship using the alias name:</p> <pre><code>&lt;?php\n\n$robotsSimilar = RobotsSimilar::findFirst();\n\n// Returns the related record based on the column (robots_id)\n$robot = $robotsSimilar-&gt;getRobot();\n$robot = $robotsSimilar-&gt;robot;\n$robot = $robotsSimilar-&gt;getRelated('Robot');\n\n// Returns the related record based on the column (similar_robots_id)\n$similarRobot = $robotsSimilar-&gt;getSimilarRobot();\n$similarRobot = $robotsSimilar-&gt;similarRobot;\n$similarRobot = $robotsSimilar-&gt;getRelated('SimilarRobot');\n</code></pre>"},{"location":"db-models-relationships/#magic-getters-vs-explicit-methods","title":"Magic Getters vs. Explicit methods","text":"<p>Most IDEs and editors with auto-completion capabilities can not infer the correct types when using magic getters (both methods and properties). To overcome that, you can use a class docblock that specifies what magic actions are available, helping the IDE to produce a better auto-completion:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\n/**\n * Model class for the robots table.\n * @property Simple|RobotsParts[] $robotsParts\n * @method   Simple|RobotsParts[] getRobotsParts($parameters = null)\n * @method   integer              countRobotsParts()\n */\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public function initialize()\n    {\n        $this-&gt;hasMany(\n            'id',\n            'RobotsParts',\n            'robots_id'\n        );\n    }\n}\n</code></pre>"},{"location":"db-models-relationships/#conditionals","title":"Conditionals","text":"<p>You can also create relationships based on conditionals. When querying based on the relationship the condition will be automatically appended to the query:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\n// Companies have invoices issued to them (paid/unpaid)\n// Invoices model\nclass Invoices extends Model\n{\n\n}\n\n// Companies model\nclass Companies extends Model\n{\n    public function initialize()\n    {\n        // All invoices relationship\n        $this-&gt;hasMany(\n            'id', \n            'Invoices', \n            'inv_id', \n            [\n                'alias' =&gt; 'Invoices'\n            ]\n        );\n\n        // Paid invoices relationship\n        $this-&gt;hasMany(\n            'id', \n            'Invoices', \n            'inv_id', \n            [\n                'alias'    =&gt; 'InvoicesPaid',\n                'params'   =&gt; [\n                    'conditions' =&gt; \"inv_status = 'paid'\"\n                ]\n            ]\n        );\n\n        // Unpaid invoices relationship + bound parameters\n        $this-&gt;hasMany(\n            'id', \n            'Invoices', \n            'inv_id', \n            [\n                'alias'    =&gt; 'InvoicesUnpaid',\n                'params'   =&gt; [\n                    'conditions' =&gt; \"inv_status &lt;&gt; :status:\",\n                    'bind' =&gt; ['status' =&gt; 'unpaid']\n                ]\n            ]\n        );\n    }\n}\n</code></pre> <p>Additionally, you can use the second parameter of <code>getRelated()</code> when accessing your relationship from your model object to further filter or order your relationship:</p> <pre><code>&lt;?php\n\n// Unpaid Invoices\n$company = Companies::findFirst(\n    [\n        'conditions' =&gt; 'id = :id:',\n        'bind'       =&gt; ['id' =&gt; 1],\n    ]\n);\n\n$unpaidInvoices = $company-&gt;InvoicesUnpaid;\n$unpaidInvoices = $company-&gt;getInvoicesUnpaid();\n$unpaidInvoices = $company-&gt;getRelated('InvoicesUnpaid');\n$unpaidInvoices = $company-&gt;getRelated(\n    'Invoices', \n    ['conditions' =&gt; \"inv_status = 'paid'\"]\n);\n\n// Also ordered\n$unpaidInvoices = $company-&gt;getRelated(\n    'Invoices', \n    [\n        'conditions' =&gt; \"inv_status = 'paid'\",\n        'order'      =&gt; 'inv_created_date ASC',\n    ]\n);\n</code></pre>"},{"location":"db-models-relationships/#virtual-foreign-keys","title":"Virtual Foreign Keys","text":"<p>By default, relationships do not act like database foreign keys, that is, if you try to insert/update a value without having a valid value in the referenced model, Phalcon will not produce a validation message. You can modify this behavior by adding a fourth parameter when defining a relationship.</p> <p>The RobotsPart model can be changed to demonstrate this feature:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass RobotsParts extends Model\n{\n    public $id;\n\n    public $robots_id;\n\n    public $parts_id;\n\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            'robots_id',\n            'Store\\Toys\\Robots',\n            'id',\n            [\n                'foreignKey' =&gt; true\n            ]\n        );\n\n        $this-&gt;belongsTo(\n            'parts_id',\n            'Parts',\n            'id',\n            [\n                'foreignKey' =&gt; [\n                    'message' =&gt; 'The part_id does not exist on the Parts model'\n                ]\n            ]\n        );\n    }\n}\n</code></pre> <p>If you alter a <code>belongsTo()</code> relationship to act as foreign key, it will validate that the values inserted/updated on those fields have a valid value on the referenced model. Similarly, if a <code>hasMany()</code>/<code>hasOne()</code> is altered it will validate that the records cannot be deleted if that record is used on a referenced model.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Parts extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;hasMany(\n            'id',\n            'RobotsParts',\n            'parts_id',\n            [\n                'foreignKey' =&gt; [\n                    'message' =&gt; 'The part cannot be deleted because other robots are using it',\n                ]\n            ]\n        );\n    }\n}\n</code></pre> <p>A virtual foreign key can be set up to allow null values as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass RobotsParts extends Model\n{\n    public $id;\n\n    public $robots_id;\n\n    public $parts_id;\n\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            'parts_id',\n            'Parts',\n            'id',\n            [\n                'foreignKey' =&gt; [\n                    'allowNulls' =&gt; true,\n                    'message'    =&gt; 'The part_id does not exist on the Parts model',\n                ]\n            ]\n        );\n    }\n}\n</code></pre>"},{"location":"db-models-relationships/#cascaderestrict-actions","title":"Cascade/Restrict actions","text":"<p>Relationships that act as virtual foreign keys by default restrict the creation/update/deletion of records to maintain the integrity of data:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Relation;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public function initialize()\n    {\n        $this-&gt;hasMany(\n            'id',\n            'Parts',\n            'robots_id',\n            [\n                'foreignKey' =&gt; [\n                    'action' =&gt; Relation::ACTION_CASCADE,\n                ]\n            ]\n        );\n    }\n}\n</code></pre> <p>The above code set up to delete all the referenced records (parts) if the master record (robot) is deleted.</p>"},{"location":"db-models-relationships/#storing-related-records","title":"Storing Related Records","text":"<p>Magic properties can be used to store a record and its related properties:</p> <pre><code>&lt;?php\n\n// Create an artist\n$artist = new Artists();\n\n$artist-&gt;name    = 'Shinichi Osawa';\n$artist-&gt;country = 'Japan';\n\n// Create an album\n$album = new Albums();\n\n$album-&gt;name   = 'The One';\n$album-&gt;artist = $artist; // Assign the artist\n$album-&gt;year   = 2008;\n\n// Save both records\n$album-&gt;save();\n</code></pre> <p>Saving a record and its related records in a has-many relation:</p> <pre><code>&lt;?php\n\n// Get an existing artist\n$artist = Artists::findFirst(\n    'name = 'Shinichi Osawa''\n);\n\n// Create an album\n$album = new Albums();\n\n$album-&gt;name   = 'The One';\n$album-&gt;artist = $artist;\n\n$songs = [];\n\n// Create a first song\n$songs[0]           = new Songs();\n$songs[0]-&gt;name     = 'Star Guitar';\n$songs[0]-&gt;duration = '5:54';\n\n// Create a second song\n$songs[1]           = new Songs();\n$songs[1]-&gt;name     = 'Last Days';\n$songs[1]-&gt;duration = '4:29';\n\n// Assign the songs array\n$album-&gt;songs = $songs;\n\n// Save the album + its songs\n$album-&gt;save();\n</code></pre> <p>Saving the album and the artist at the same time implicitly makes use of a transaction so if anything goes wrong with saving the related records, the parent will not be saved either. Messages are passed back to the user for information regarding any errors.</p> <p>Note: Adding related entities by overloading the following methods is not possible:</p> <ul> <li><code>Phalcon\\Mvc\\Model::beforeSave()</code></li> <li><code>Phalcon\\Mvc\\Model::beforeCreate()</code></li> <li><code>Phalcon\\Mvc\\Model::beforeUpdate()</code></li> </ul> <p>You need to overload <code>Phalcon\\Mvc\\Model::save()</code> for this to work from within a model.</p>"},{"location":"db-models-relationships/#operations-over-resultsets","title":"Operations over Resultsets","text":"<p>If a resultset is composed of complete objects, model operations can be performed on those objects. For example:</p> <pre><code>&lt;?php\n\n/** @var RobotType $type */\n$type = $robots-&gt;getRelated('type');\n\n$type-&gt;name = 'Some other type';\n$result = $type-&gt;save();\n\n\n// Get the related robot type but only the `name` column\n$type = $robots-&gt;getRelated('type', ['columns' =&gt; 'name']);\n\n$type-&gt;name = 'Some other type';\n\n// This will fail because `$type` is not a complete object\n$result = $type-&gt;save();\n</code></pre>"},{"location":"db-models-relationships/#updating-related-records","title":"Updating related records","text":"<p>Instead of doing this:</p> <pre><code>&lt;?php\n\n$parts = $robots-&gt;getParts();\n\nforeach ($parts as $part) {\n    $part-&gt;stock      = 100;\n    $part-&gt;updated_at = time();\n\n    if ($part-&gt;update() === false) {\n        $messages = $part-&gt;getMessages();\n\n        foreach ($messages as $message) {\n            echo $message;\n        }\n\n        break;\n    }\n}\n</code></pre> <p>you can do this:</p> <pre><code>&lt;?php\n\n$robots-&gt;getParts()-&gt;update(\n    [\n        'stock'      =&gt; 100,\n        'updated_at' =&gt; time(),\n    ]\n);\n</code></pre> <p><code>update</code> also accepts an anonymous function to filter what records must be updated:</p> <pre><code>&lt;?php\n\n$data = [\n    'stock'      =&gt; 100,\n    'updated_at' =&gt; time(),\n];\n\n// Update all the parts except those whose type is basic\n$robots-&gt;getParts()-&gt;update(\n    $data,\n    function ($part) {\n        if ($part-&gt;type === Part::TYPE_BASIC) {\n            return false;\n        }\n\n        return true;\n    }\n);\n</code></pre>"},{"location":"db-models-relationships/#deleting-related-records","title":"Deleting related records","text":"<p>Instead of doing this:</p> <pre><code>&lt;?php\n\n$parts = $robots-&gt;getParts();\n\nforeach ($parts as $part) {\n    if ($part-&gt;delete() === false) {\n        $messages = $part-&gt;getMessages();\n\n        foreach ($messages as $message) {\n            echo $message;\n        }\n\n        break;\n    }\n}\n</code></pre> <p>you can do this:</p> <pre><code>&lt;?php\n\n$robots-&gt;getParts()-&gt;delete();\n</code></pre> <p><code>delete()</code> also accepts an anonymous function to filter what records must be deleted:</p> <pre><code>&lt;?php\n\n// Delete only whose stock is greater or equal than zero\n$robots-&gt;getParts()-&gt;delete(\n    function ($part) {\n        if ($part-&gt;stock &lt; 0) {\n            return false;\n        }\n\n        return true;\n    }\n);\n</code></pre>"},{"location":"db-models-transactions/","title":"Model Transactions","text":"<p>When a process performs multiple database operations, it might be important that each step is completed successfully so that data integrity can be maintained. Transactions offer the ability to ensure that all database operations have been executed successfully before the data is committed to the database.</p> <p>Transactions in Phalcon allow you to commit all operations if they were executed successfully or rollback all operations if something went wrong.</p>"},{"location":"db-models-transactions/#manual-transactions","title":"Manual Transactions","text":"<p>If an application only uses one connection and the transactions are not very complex, a transaction can be created by just moving the current connection into transaction mode and then commit or rollback the operation whether it is successful or not:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass RobotsController extends Controller\n{\n    public function saveAction()\n    {\n        // Start a transaction\n        $this-&gt;db-&gt;begin();\n\n        $robot = new Robots();\n\n        $robot-&gt;name       = 'WALL-E';\n        $robot-&gt;created_at = date('Y-m-d');\n\n        // The model failed to save, so rollback the transaction\n        if ($robot-&gt;save() === false) {\n            $this-&gt;db-&gt;rollback();\n            return;\n        }\n\n        $robotPart = new RobotParts();\n\n        $robotPart-&gt;robots_id = $robot-&gt;id;\n        $robotPart-&gt;type      = 'head';\n\n        // The model failed to save, so rollback the transaction\n        if ($robotPart-&gt;save() === false) {\n            $this-&gt;db-&gt;rollback();\n\n            return;\n        }\n\n        // Commit the transaction\n        $this-&gt;db-&gt;commit();\n    }\n}\n</code></pre>"},{"location":"db-models-transactions/#implicit-transactions","title":"Implicit Transactions","text":"<p>Existing relationships can be used to store records and their related instances, this kind of operation implicitly creates a transaction to ensure that data is correctly stored:</p> <pre><code>&lt;?php\n\n$robotPart = new RobotParts();\n\n$robotPart-&gt;type = 'head';\n\n\n\n$robot = new Robots();\n\n$robot-&gt;name       = 'WALL-E';\n$robot-&gt;created_at = date('Y-m-d');\n$robot-&gt;robotPart  = $robotPart;\n\n// Creates an implicit transaction to store both records\n$robot-&gt;save();\n</code></pre>"},{"location":"db-models-transactions/#isolated-transactions","title":"Isolated Transactions","text":"<p>Isolated transactions are executed in a new connection ensuring that all the generated SQL, virtual foreign key checks and business rules are isolated from the main connection. This kind of transaction requires a transaction manager that globally manages each transaction created ensuring that they are correctly rolled back/committed before ending the request:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Transaction\\Failed as TxFailed;\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager as TxManager;\n\ntry {\n    // Create a transaction manager\n    $manager = new TxManager();\n\n    // Request a transaction\n    $transaction = $manager-&gt;get();\n\n    $robot = new Robots();\n\n    $robot-&gt;setTransaction($transaction);\n\n    $robot-&gt;name       = 'WALL\u00b7E';\n    $robot-&gt;created_at = date('Y-m-d');\n\n    if ($robot-&gt;save() === false) {\n        $transaction-&gt;rollback(\n            'Cannot save robot'\n        );\n    }\n\n    $robotPart = new RobotParts();\n\n    $robotPart-&gt;setTransaction($transaction);\n\n    $robotPart-&gt;robots_id = $robot-&gt;id;\n    $robotPart-&gt;type      = 'head';\n\n    if ($robotPart-&gt;save() === false) {\n        $transaction-&gt;rollback(\n            'Cannot save robot part'\n        );\n    }\n\n    // Everything's gone fine, let's commit the transaction\n    $transaction-&gt;commit();\n} catch (TxFailed $e) {\n    echo 'Failed, reason: ', $e-&gt;getMessage();\n}\n</code></pre> <p>Transactions can be used to delete many records in a consistent way:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Transaction\\Failed as TxFailed;\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager as TxManager;\n\ntry {\n    // Create a transaction manager\n    $manager = new TxManager();\n\n    // Request a transaction\n    $transaction = $manager-&gt;get();\n\n    // Get the robots to be deleted\n    $robots = Robots::find(\n        \"type = 'mechanical'\"\n    );\n\n    foreach ($robots as $robot) {\n        $robot-&gt;setTransaction($transaction);\n\n        // Something's gone wrong, we should rollback the transaction\n        if ($robot-&gt;delete() === false) {\n            $messages = $robot-&gt;getMessages();\n\n            foreach ($messages as $message) {\n                $transaction-&gt;rollback(\n                    $message-&gt;getMessage()\n                );\n            }\n        }\n    }\n\n    // Everything's gone fine, let's commit the transaction\n    $transaction-&gt;commit();\n\n    echo 'Robots were deleted successfully!';\n} catch (TxFailed $e) {\n    echo 'Failed, reason: ', $e-&gt;getMessage();\n}\n</code></pre> <p>Transactions are reused no matter where the transaction object is retrieved. A new transaction is generated only when a <code>commit()</code> or :code:<code>rollback()</code> is performed. You can use the service container to create the global transaction manager for the entire application:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager as TransactionManager;\n\n$di-&gt;setShared(\n    'transactions',\n    function () {\n        return new TransactionManager();\n    }\n);\n</code></pre> <p>Then access it from a controller or view:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass ProductsController extends Controller\n{\n    public function saveAction()\n    {\n        // Obtain the TransactionsManager from the services container\n        $manager = $this-&gt;di-&gt;getTransactions();\n\n        // Or\n        $manager = $this-&gt;transactions;\n\n        // Request a transaction\n        $transaction = $manager-&gt;get();\n\n        // ...\n    }\n}\n</code></pre> <p>While a transaction is active, the transaction manager will always return the same transaction across the application.</p>"},{"location":"db-models-validation/","title":"Validating Models","text":""},{"location":"db-models-validation/#validating-data-integrity","title":"Validating Data Integrity","text":"<p>Phalcon\\Mvc\\Model provides several events to validate data and implement business rules. The special <code>validation</code> event allows us to call built-in validators over the record. Phalcon exposes a few built-in validators that can be used at this stage of validation.</p> <p>The following example shows how to use it:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Uniqueness;\nuse Phalcon\\Validation\\Validator\\InclusionIn;\n\nclass Robots extends Model\n{\n    public function validation()\n    {\n        $validator = new Validation();\n\n        $validator-&gt;add(\n            'type',\n            new InclusionIn(\n                [\n                    'domain' =&gt; [\n                        'Mechanical',\n                        'Virtual',\n                    ]\n                ]\n            )\n        );\n\n        $validator-&gt;add(\n            'name',\n            new Uniqueness(\n                [\n                    'message' =&gt; 'The robot name must be unique',\n                ]\n            )\n        );\n\n        return $this-&gt;validate($validator);\n    }\n}\n</code></pre> <p>The above example performs a validation using the built-in validator 'InclusionIn'. It checks the value of the field <code>type</code> in a domain list. If the value is not included in the method then the validator will fail and return false.</p> <p>NOTE</p> <p>For more information on validators, see the Validation documentation</p> <p>The idea of creating validators is make them reusable between several models. A validator can also be as simple as:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Message;\n\nclass Robots extends Model\n{\n    public function validation()\n    {\n        if ($this-&gt;type === 'Old') {\n            $message = new Message(\n                'Sorry, old robots are not allowed anymore',\n                'type',\n                'MyType'\n            );\n\n            $this-&gt;appendMessage($message);\n\n            return false;\n        }\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"db-models-validation/#validation-messages","title":"Validation Messages","text":"<p>Phalcon\\Mvc\\Model has a messaging subsystem that provides a flexible way to output or store the validation messages generated during the insert/update processes.</p> <p>Each message is an instance of Phalcon\\Mvc\\Model\\Message and the set of messages generated can be retrieved with the <code>getMessages()</code> method. Each message provides extended information like the field name that generated the message or the message type:</p> <pre><code>&lt;?php\n\nif ($robot-&gt;save() === false) {\n    $messages = $robot-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo 'Message: ', $message-&gt;getMessage();\n        echo 'Field: ', $message-&gt;getField();\n        echo 'Type: ', $message-&gt;getType();\n    }\n}\n</code></pre> <p>Phalcon\\Mvc\\Model can generate the following types of validation messages:</p> Type Description <code>PresenceOf</code> Generated when a field with a non-null attribute on the database is trying to insert/update a null value <code>ConstraintViolation</code> Generated when a field part of a virtual foreign key is trying to insert/update a value that doesn't exist in the referenced model <code>InvalidValue</code> Generated when a validator failed because of an invalid value <code>InvalidCreateAttempt</code> Produced when a record is attempted to be created but it already exists <code>InvalidUpdateAttempt</code> Produced when a record is attempted to be updated but it doesn't exist <p>The <code>getMessages()</code> method can be overridden in a model to replace/translate the default messages generated automatically by the ORM:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function getMessages()\n    {\n        $messages = [];\n\n        foreach (parent::getMessages() as $message) {\n            switch ($message-&gt;getType()) {\n                case 'InvalidCreateAttempt':\n                    $messages[] = 'The record cannot be created because it already exists';\n                    break;\n\n                case 'InvalidUpdateAttempt':\n                    $messages[] = \"The record cannot be updated because it doesn't exist\";\n                    break;\n\n                case 'PresenceOf':\n                    $messages[] = 'The field ' . $message-&gt;getField() . ' is mandatory';\n                    break;\n            }\n        }\n\n        return $messages;\n    }\n}\n</code></pre>"},{"location":"db-models-validation/#validation-failed-events","title":"Validation Failed Events","text":"<p>Another type of events are available when the data validation process finds any inconsistency:</p> Operation Name Explanation Insert or Update <code>notSaved</code> Triggered when the <code>INSERT</code> or <code>UPDATE</code> operation fails for any reason Insert, Delete or Update <code>onValidationFails</code> Triggered when any data manipulation operation fails"},{"location":"db-models/","title":"Working with Models","text":"<p>A model represents the information (data) of the application and the rules to manipulate that data. Models are primarily used for managing the rules of interaction with a corresponding database table. In most cases, each table in your database will correspond to one model in your application. The bulk of your application's business logic will be concentrated in the models.</p> <p>Phalcon\\Mvc\\Model is the base for all models in a Phalcon application. It provides database independence, basic CRUD functionality, advanced finding capabilities, and the ability to relate models to one another, among other services. Phalcon\\Mvc\\Model avoids the need of having to use SQL statements because it translates methods dynamically to the respective database engine operations.</p> <p>NOTE</p> <p>Models are intended to work with the database on a high layer of abstraction. If you need to work with databases at a lower level check out the Phalcon\\Db component documentation.</p>"},{"location":"db-models/#creating-models","title":"Creating Models","text":"<p>A model is a class that extends from Phalcon\\Mvc\\Model. Its class name should be in camel case notation:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass RobotParts extends Model\n{\n\n}\n</code></pre> <p>NOTE</p> <p>If you're using PHP 5.4/5.5 it is recommended you declare each column that makes part of the model in order to save memory and reduce the memory allocation. </p> <p>By default, the model <code>Store\\Toys\\RobotParts</code> will map to the table <code>robot_parts</code>. If you want to manually specify another name for the mapped table, you can use the <code>setSource()</code> method:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass RobotParts extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;setSource('toys_robot_parts');\n    }\n}\n</code></pre> <p>The model <code>RobotParts</code> now maps to <code>toys_robot_parts</code> table. The <code>initialize()</code> method helps with setting up this model with a custom behavior i.e. a different table.</p> <p>The <code>initialize()</code> method is only called once during the request. This method is intended to perform initializations that apply for all instances of the model created within the application. If you want to perform initialization tasks for every instance created you can use the <code>onConstruct()</code> method:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass RobotParts extends Model\n{\n    public function onConstruct()\n    {\n        // ...\n    }\n}\n</code></pre>"},{"location":"db-models/#public-properties-vs-settersgetters","title":"Public properties vs. Setters/Getters","text":"<p>Models can be implemented public properties, meaning that each property can be read/updated from any part of the code that has instantiated that model class:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $price;\n}\n</code></pre> <p>Another implementation is to use getters and setter functions, which control which properties are publicly available for that model. The benefit of using getters and setters is that the developer can perform transformations and validation checks on the values set for the model, which is impossible when using public properties. Additionally getters and setters allow for future changes without changing the interface of the model class. So if a field name changes, the only change needed will be in the private property of the model referenced in the relevant getter/setter and nowhere else in the code.</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse InvalidArgumentException;\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    protected $id;\n\n    protected $name;\n\n    protected $price;\n\n    public function getId()\n    {\n        return $this-&gt;id;\n    }\n\n    public function setName($name)\n    {\n        // The name is too short?\n        if (strlen($name) &lt; 10) {\n            throw new InvalidArgumentException(\n                'The name is too short'\n            );\n        }\n\n        $this-&gt;name = $name;\n    }\n\n    public function getName()\n    {\n        return $this-&gt;name;\n    }\n\n    public function setPrice($price)\n    {\n        // Negative prices aren't allowed\n        if ($price &lt; 0) {\n            throw new InvalidArgumentException(\n                \"Price can't be negative\"\n            );\n        }\n\n        $this-&gt;price = $price;\n    }\n\n    public function getPrice()\n    {\n        // Convert the value to double before be used\n        return (double) $this-&gt;price;\n    }\n}\n</code></pre> <p>Public properties provide less complexity in development. However getters/setters can heavily increase the testability, extensibility and maintainability of applications. Developers can decide which strategy is more appropriate for the application they are creating, depending on the needs of the application. The ORM is compatible with both schemes of defining properties.</p> <p>NOTE</p> <p>Underscores in property names can be problematic when using getters and setters. </p> <p>If you use underscores in your property names, you must still use camel case in your getter/setter declarations for use with magic methods. (e.g. <code>$model-&gt;getPropertyName</code> instead of <code>$model-&gt;getProperty_name</code>, <code>$model-&gt;findByPropertyName</code> instead of <code>$model-&gt;findByProperty_name</code>, etc.). As much of the system expects camel case, and underscores are commonly removed, it is recommended to name your properties in the manner shown throughout the documentation. You can use a column map (as described above) to ensure proper mapping of your properties to their database counterparts.</p>"},{"location":"db-models/#understanding-records-to-objects","title":"Understanding Records To Objects","text":"<p>Every instance of a model represents a row in the table. You can easily access record data by reading object properties. For example, for a table 'robots' with the records:</p> <pre><code>mysql&gt; select * from robots;\n+----+------------+------------+------+\n| id | name       | type       | year |\n+----+------------+------------+------+\n|  1 | Robotina   | mechanical | 1972 |\n|  2 | Astro Boy  | mechanical | 1952 |\n|  3 | Terminator | cyborg     | 2029 |\n+----+------------+------------+------+\n3 rows in set (0.00 sec)\n</code></pre> <p>You could find a certain record by its primary key and then print its name:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n// Find record with id = 3\n$robot = Robots::findFirst(3);\n\n// Prints 'Terminator'\necho $robot-&gt;name;\n</code></pre> <p>Once the record is in memory, you can make modifications to its data and then save changes:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst(3);\n\n$robot-&gt;name = 'RoboCop';\n\n$robot-&gt;save();\n</code></pre> <p>As you can see, there is no need to use raw SQL statements. Phalcon\\Mvc\\Model provides high database abstraction for web applications.</p>"},{"location":"db-models/#finding-records","title":"Finding Records","text":"<p>Phalcon\\Mvc\\Model also offers several methods for querying records. The following examples will show you how to query one or more records from a model:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n// How many robots are there?\n$robots = Robots::find();\necho 'There are ', count($robots), \"\\n\";\n\n// How many mechanical robots are there?\n$robots = Robots::find(\"type = 'mechanical'\");\necho 'There are ', count($robots), \"\\n\";\n\n// Get and print virtual robots ordered by name\n$robots = Robots::find(\n    [\n        \"type = 'virtual'\",\n        'order' =&gt; 'name',\n    ]\n);\nforeach ($robots as $robot) {\n    echo $robot-&gt;name, \"\\n\";\n}\n\n// Get first 100 virtual robots ordered by name\n$robots = Robots::find(\n    [\n        \"type = 'virtual'\",\n        'order' =&gt; 'name',\n        'limit' =&gt; 100,\n    ]\n);\nforeach ($robots as $robot) {\n   echo $robot-&gt;name, \"\\n\";\n}\n</code></pre> <p>NOTE</p> <p>If you want find record by external data (such as user input) or variable data you must use Binding Parameters`.</p> <p>You could also use the <code>findFirst()</code> method to get only the first record matching the given criteria:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n// What's the first robot in robots table?\n$robot = Robots::findFirst();\necho 'The robot name is ', $robot-&gt;name, \"\\n\";\n\n// What's the first mechanical robot in robots table?\n$robot = Robots::findFirst(\"type = 'mechanical'\");\necho 'The first mechanical robot name is ', $robot-&gt;name, \"\\n\";\n\n// Get first virtual robot ordered by name\n$robot = Robots::findFirst(\n    [\n        \"type = 'virtual'\",\n        'order' =&gt; 'name',\n    ]\n);\n\necho 'The first virtual robot name is ', $robot-&gt;name, \"\\n\";\n</code></pre> <p>Both <code>find()</code> and <code>findFirst()</code> methods accept an associative array specifying the search criteria:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst(\n    [\n        \"type = 'virtual'\",\n        'order' =&gt; 'name DESC',\n        'limit' =&gt; 30,\n    ]\n);\n\n$robots = Robots::find(\n    [\n        'conditions' =&gt; 'type = ?1',\n        'bind'       =&gt; [\n            1 =&gt; 'virtual',\n        ]\n    ]\n);\n</code></pre> <p>The available query options are:</p> Parameter Description Example <code>conditions</code> Search conditions for the find operation. Is used to extract only those records that fulfill a specified criterion. By default Phalcon\\Mvc\\Model assumes the first parameter are the conditions. <code>'conditions' =&gt; \"name LIKE 'steve%'\"</code> <code>columns</code> Return specific columns instead of the full columns in the model. When using this option an incomplete object is returned <code>'columns' =&gt; 'id, name'</code> <code>bind</code> Bind is used together with options, by replacing placeholders and escaping values thus increasing security <code>'bind' =&gt; ['status' =&gt; 'A', 'type' =&gt; 'some-time']</code> <code>bindTypes</code> When binding parameters, you can use this parameter to define additional casting to the bound parameters increasing even more the security <code>'bindTypes' =&gt; [Column::BIND_PARAM_STR, Column::BIND_PARAM_INT]</code> <code>order</code> Is used to sort the resultset. Use one or more fields separated by commas. <code>'order' =&gt; 'name DESC, status'</code> <code>limit</code> Limit the results of the query to results to certain range <code>'limit' =&gt; 10</code> <code>offset</code> Offset the results of the query by a certain amount <code>'offset' =&gt; 5</code> <code>group</code> Allows to collect data across multiple records and group the results by one or more columns <code>'group' =&gt; 'name, status'</code> <code>for_update</code> With this option, Phalcon\\Mvc\\Model reads the latest available data, setting exclusive locks on each row it reads <code>'for_update' =&gt; true</code> <code>shared_lock</code> With this option, Phalcon\\Mvc\\Model reads the latest available data, setting shared locks on each row it reads <code>'shared_lock' =&gt; true</code> <code>cache</code> Cache the resultset, reducing the continuous access to the relational system <code>'cache' =&gt; ['lifetime' =&gt; 3600, 'key' =&gt; 'my-find-key']</code> <code>hydration</code> Sets the hydration strategy to represent each returned record in the result <code>'hydration' =&gt; Resultset::HYDRATE_OBJECTS</code> <p>If you prefer, there is also available a way to create queries in an object-oriented way, instead of using an array of parameters:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robots = Robots::query()\n    -&gt;where('type = :type:')\n    -&gt;andWhere('year &lt; 2000')\n    -&gt;bind(['type' =&gt; 'mechanical'])\n    -&gt;order('name')\n    -&gt;execute();\n</code></pre> <p>The static method <code>query()</code> returns a Phalcon\\Mvc\\Model\\Criteria object that is friendly with IDE autocompleters.</p> <p>All the queries are internally handled as PHQL queries. PHQL is a high-level, object-oriented and SQL-like language. This language provide you more features to perform queries like joining other models, define groupings, add aggregations etc.</p> <p>Lastly, there is the <code>findFirstBy&lt;property-name&gt;()</code> method. This method expands on the <code>findFirst()</code> method mentioned earlier. It allows you to quickly perform a retrieval from a table by using the property name in the method itself and passing it a parameter that contains the data you want to search for in that column. An example is in order, so taking our Robots model mentioned earlier:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $price;\n}\n</code></pre> <p>We have three properties to work with here: <code>$id</code>, <code>$name</code> and <code>$price</code>. So, let's say you want to retrieve the first record in the table with the name 'Terminator'. This could be written like:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$name = 'Terminator';\n\n$robot = Robots::findFirstByName($name);\n\nif ($robot) {\n    echo 'The first robot with the name ' . $name . ' cost ' . $robot-&gt;price . '.';\n} else {\n    echo 'There were no robots found in our table with the name ' . $name . '.';\n}\n</code></pre> <p>Notice that we used 'Name' in the method call and passed the variable <code>$name</code> to it, which contains the name we are looking for in our table. Notice also that when we find a match with our query, all the other properties are available to us as well.</p>"},{"location":"db-models/#model-resultsets","title":"Model Resultsets","text":"<p>While <code>findFirst()</code> returns directly an instance of the called class (when there is data to be returned), the <code>find()</code> method returns a Phalcon\\Mvc\\Model\\Resultset\\Simple. This is an object that encapsulates all the functionality a resultset has like traversing, seeking specific records, counting, etc.</p> <p>These objects are more powerful than standard arrays. One of the greatest features of the Phalcon\\Mvc\\Model\\Resultset is that at any time there is only one record in memory. This greatly helps in memory management especially when working with large amounts of data.</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n// Get all robots\n$robots = Robots::find();\n\n// Traversing with a foreach\nforeach ($robots as $robot) {\n    echo $robot-&gt;name, \"\\n\";\n}\n\n// Traversing with a while\n$robots-&gt;rewind();\n\nwhile ($robots-&gt;valid()) {\n    $robot = $robots-&gt;current();\n\n    echo $robot-&gt;name, \"\\n\";\n\n    $robots-&gt;next();\n}\n\n// Count the resultset\necho count($robots);\n\n// Alternative way to count the resultset\necho $robots-&gt;count();\n\n// Move the internal cursor to the third robot\n$robots-&gt;seek(2);\n\n$robot = $robots-&gt;current();\n\n// Access a robot by its position in the resultset\n$robot = $robots[5];\n\n// Check if there is a record in certain position\nif (isset($robots[3])) {\n   $robot = $robots[3];\n}\n\n// Get the first record in the resultset\n$robot = $robots-&gt;getFirst();\n\n// Get the last record\n$robot = $robots-&gt;getLast();\n</code></pre> <p>Phalcon's resultsets emulate scrollable cursors, you can get any row just by accessing its position, or seeking the internal pointer to a specific position. Note that some database systems don't support scrollable cursors, this forces to re-execute the query in order to rewind the cursor to the beginning and obtain the record at the requested position. Similarly, if a resultset is traversed several times, the query must be executed the same number of times.</p> <p>As storing large query results in memory could consume many resources, resultsets are obtained from the database in chunks of 32 rows - reducing the need to re-execute the request in several cases.</p> <p>Note that resultsets can be serialized and stored in a cache backend. Phalcon\\Cache can help with that task. However, serializing data causes Phalcon\\Mvc\\Model to retrieve all the data from the database in an array, thus consuming more memory while this process takes place.</p> <pre><code>&lt;?php\n\n// Query all records from model parts\n$parts = Parts::find();\n\n// Store the resultset into a file\nfile_put_contents(\n    'cache.txt',\n    serialize($parts)\n);\n\n// Get parts from file\n$parts = unserialize(\n    file_get_contents('cache.txt')\n);\n\n// Traverse the parts\nforeach ($parts as $part) {\n    echo $part-&gt;id;\n}\n</code></pre>"},{"location":"db-models/#custom-resultsets","title":"Custom Resultsets","text":"<p>There are times that the application logic requires additional manipulation of the data as it is retrieved from the database. Previously, we would just extend the model and encapsulate the functionality in a class in the model or a trait, returning back to the caller usually an array of transformed data. </p> <p>With custom resultsets, you no longer need to do that. The custom resultset will encapsulate the functionality that otherwise would be in the model and can be reused by other models, thus keeping the code DRY. This way, the <code>find()</code> method will no longer return the default Phalcon\\Mvc\\Model\\Resultset, but instead the custom one. Phalcon allows you to do this by using the <code>getResultsetClass()</code> in your model.</p> <p>First we need to define the resultset class: <pre><code>&lt;?php\n\nnamespace Application\\Mvc\\Model\\Resultset;\n\nuse \\Phalcon\\Mvc\\Model\\Resultset\\Simple;\n\nclass Custom extends Simple\n{\n    public function getSomeData() {\n        /** CODE */\n    }\n}\n</code></pre></p> <p>In the model, we set the class in the <code>getResultsetClass()</code> as follows:</p> <pre><code>&lt;?php\n\nnamespace Phalcon\\Test\\Models\\Statistics;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function getSource()\n    {\n        return 'robots';\n    }\n\n    public function getResultsetClass()\n    {\n    return 'Application\\Mvc\\Model\\Resultset\\Custom';\n    }\n}\n</code></pre> <p>and finally in your code you will have something like this:</p> <pre><code>&lt;?php\n\n/**\n * Find the robots \n */\n$robots = Robots::find(\n    [\n        'conditions' =&gt; 'date between \"2017-01-01\" AND \"2017-12-31\"',\n        'order'      =&gt; 'date'\n    ]\n);\n\n/**\n * Pass the data to the view\n */\n$this-&gt;view-&gt;mydata = $robots-&gt;getSomeData();\n</code></pre>"},{"location":"db-models/#filtering-resultsets","title":"Filtering Resultsets","text":"<p>The most efficient way to filter data is setting some search criteria, databases will use indexes set on tables to return data faster. Phalcon additionally allows you to filter the data using PHP using any resource that is not available in the database:</p> <pre><code>&lt;?php\n\n$customers = Customers::find();\n\n$customers = $customers-&gt;filter(\n    function ($customer) {\n        // Return only customers with a valid e-mail\n        if (filter_var($customer-&gt;email, FILTER_VALIDATE_EMAIL)) {\n            return $customer;\n        }\n    }\n);\n</code></pre>"},{"location":"db-models/#binding-parameters","title":"Binding Parameters","text":"<p>Bound parameters are also supported in Phalcon\\Mvc\\Model. You are encouraged to use this methodology so as to eliminate the possibility of your code being subject to SQL injection attacks. Both string and integer placeholders are supported. Binding parameters can simply be achieved as follows:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n// Query robots binding parameters with string placeholders\n// Parameters whose keys are the same as placeholders\n$robots = Robots::find(\n    [\n        'name = :name: AND type = :type:',\n        'bind' =&gt; [\n            'name' =&gt; 'Robotina',\n            'type' =&gt; 'maid',\n        ],\n    ]\n);\n\n// Query robots binding parameters with integer placeholders\n$robots = Robots::find(\n    [\n        'name = ?1 AND type = ?2',\n        'bind' =&gt; [\n            1 =&gt; 'Robotina',\n            2 =&gt; 'maid',\n        ],\n    ]\n);\n\n// Query robots binding parameters with both string and integer placeholders\n// Parameters whose keys are the same as placeholders\n$robots = Robots::find(\n    [\n        'name = :name: AND type = ?1',\n        'bind' =&gt; [\n            'name' =&gt; 'Robotina',\n            1      =&gt; 'maid',\n        ],\n    ]\n);\n</code></pre> <p>When using numeric placeholders, you will need to define them as integers i.e. <code>1</code> or <code>2</code>. In this case <code>'1'</code> or <code>'2'</code> are considered strings and not numbers, so the placeholder could not be successfully replaced.</p> <p>Strings are automatically escaped using PDO. This function takes into account the connection charset, so its recommended to define the correct charset in the connection parameters or in the database configuration, as a wrong charset will produce undesired effects when storing or retrieving data.</p> <p>Additionally you can set the parameter <code>bindTypes</code>, this allows defining how the parameters should be bound according to its data type:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Column;\nuse Store\\Toys\\Robots;\n\n// Bind parameters\n$parameters = [\n    'name' =&gt; 'Robotina',\n    'year' =&gt; 2008,\n];\n\n// Casting Types\n$types = [\n    'name' =&gt; Column::BIND_PARAM_STR,\n    'year' =&gt; Column::BIND_PARAM_INT,\n];\n\n// Query robots binding parameters with string placeholders\n$robots = Robots::find(\n    [\n        'name = :name: AND year = :year:',\n        'bind'      =&gt; $parameters,\n        'bindTypes' =&gt; $types,\n    ]\n);\n</code></pre> <p>NOTE</p> <p>Since the default bind-type is <code>Phalcon\\Db\\Column::BIND_PARAM_STR</code>, there is no need to specify the 'bindTypes' parameter if all of the columns are of that type.</p> <p>If you bind arrays in bound parameters, keep in mind, that keys must be numbered from zero:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$array = ['a','b','c']; // $array: [[0] =&gt; 'a', [1] =&gt; 'b', [2] =&gt; 'c']\n\nunset($array[1]); // $array: [[0] =&gt; 'a', [2] =&gt; 'c']\n\n// Now we have to renumber the keys\n$array = array_values($array); // $array: [[0] =&gt; 'a', [1] =&gt; 'c']\n\n$robots = Robots::find(\n    [\n        'letter IN ({letter:array})',\n        'bind' =&gt; [\n            'letter' =&gt; $array\n        ]\n    ]\n);\n</code></pre> <p>NOTE</p> <p>Bound parameters are available for all query methods such as <code>find()</code> and <code>findFirst()</code> but also the calculation methods like <code>count()</code>, <code>sum()</code>, <code>average()</code> etc. </p> <p>If you're using \"finders\" e.g. <code>find()</code>, <code>findFirst()</code>, etc., bound parameters are automatically used:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n// Explicit query using bound parameters\n$robots = Robots::find(\n    [\n        'name = ?0',\n        'bind' =&gt; [\n            'Ultron',\n        ],\n    ]\n);\n\n// Implicit query using bound parameters\n$robots = Robots::findByName('Ultron');\n</code></pre>"},{"location":"db-models/#initializingpreparing-fetched-records","title":"Initializing/Preparing fetched records","text":"<p>May be the case that after obtaining a record from the database is necessary to initialise the data before being used by the rest of the application. You can implement the <code>afterFetch()</code> method in a model, this event will be executed just after create the instance and assign the data to it:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $status;\n\n    public function beforeSave()\n    {\n        // Convert the array into a string\n        $this-&gt;status = join(',', $this-&gt;status);\n    }\n\n    public function afterFetch()\n    {\n        // Convert the string to an array\n        $this-&gt;status = explode(',', $this-&gt;status);\n    }\n\n    public function afterSave()\n    {\n        // Convert the string to an array\n        $this-&gt;status = explode(',', $this-&gt;status);\n    }\n}\n</code></pre> <p>If you use getters/setters instead of/or together with public properties, you can initialize the field once it is accessed:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $status;\n\n    public function getStatus()\n    {\n        return explode(',', $this-&gt;status);\n    }\n}\n</code></pre>"},{"location":"db-models/#generating-calculations","title":"Generating Calculations","text":"<p>Calculations (or aggregations) are helpers for commonly used functions of database systems such as <code>COUNT</code>, <code>SUM</code>, <code>MAX</code>, <code>MIN</code> or <code>AVG</code>. Phalcon\\Mvc\\Model allows to use these functions directly from the exposed methods.</p> <p>Count examples:</p> <pre><code>&lt;?php\n\n// How many employees are?\n$rowcount = Employees::count();\n\n// How many different areas are assigned to employees?\n$rowcount = Employees::count(\n    [\n        'distinct' =&gt; 'area',\n    ]\n);\n\n// How many employees are in the Testing area?\n$rowcount = Employees::count(\n    'area = 'Testing''\n);\n\n// Count employees grouping results by their area\n$group = Employees::count(\n    [\n        'group' =&gt; 'area',\n    ]\n);\nforeach ($group as $row) {\n   echo 'There are ', $row-&gt;rowcount, ' in ', $row-&gt;area;\n}\n\n// Count employees grouping by their area and ordering the result by count\n$group = Employees::count(\n    [\n        'group' =&gt; 'area',\n        'order' =&gt; 'rowcount',\n    ]\n);\n\n// Avoid SQL injections using bound parameters\n$group = Employees::count(\n    [\n        'type &gt; ?0',\n        'bind' =&gt; [\n            $type\n        ],\n    ]\n);\n</code></pre> <p>Sum examples:</p> <pre><code>&lt;?php\n\n// How much are the salaries of all employees?\n$total = Employees::sum(\n    [\n        'column' =&gt; 'salary',\n    ]\n);\n\n// How much are the salaries of all employees in the Sales area?\n$total = Employees::sum(\n    [\n        'column'     =&gt; 'salary',\n        'conditions' =&gt; \"area = 'Sales'\",\n    ]\n);\n\n// Generate a grouping of the salaries of each area\n$group = Employees::sum(\n    [\n        'column' =&gt; 'salary',\n        'group'  =&gt; 'area',\n    ]\n);\nforeach ($group as $row) {\n   echo 'The sum of salaries of the ', $row-&gt;area, ' is ', $row-&gt;sumatory;\n}\n\n// Generate a grouping of the salaries of each area ordering\n// salaries from higher to lower\n$group = Employees::sum(\n    [\n        'column' =&gt; 'salary',\n        'group'  =&gt; 'area',\n        'order'  =&gt; 'sumatory DESC',\n    ]\n);\n\n// Avoid SQL injections using bound parameters\n$group = Employees::sum(\n    [\n        'conditions' =&gt; 'area &gt; ?0',\n        'bind'       =&gt; [\n            $area\n        ],\n    ]\n);\n</code></pre> <p>Average examples:</p> <pre><code>&lt;?php\n\n// What is the average salary for all employees?\n$average = Employees::average(\n    [\n        'column' =&gt; 'salary',\n    ]\n);\n\n// What is the average salary for the Sales's area employees?\n$average = Employees::average(\n    [\n        'column'     =&gt; 'salary',\n        'conditions' =&gt; \"area = 'Sales'\",\n    ]\n);\n\n// Avoid SQL injections using bound parameters\n$average = Employees::average(\n    [\n        'column'     =&gt; 'age',\n        'conditions' =&gt; 'area &gt; ?0',\n        'bind'       =&gt; [\n            $area\n        ],\n    ]\n);\n</code></pre> <p>Max/Min examples:</p> <pre><code>&lt;?php\n\n// What is the oldest age of all employees?\n$age = Employees::maximum(\n    [\n        'column' =&gt; 'age',\n    ]\n);\n\n// What is the oldest of employees from the Sales area?\n$age = Employees::maximum(\n    [\n        'column'     =&gt; 'age',\n        'conditions' =&gt; \"area = 'Sales'\",\n    ]\n);\n\n// What is the lowest salary of all employees?\n$salary = Employees::minimum(\n    [\n        'column' =&gt; 'salary',\n    ]\n);\n</code></pre>"},{"location":"db-models/#creatingupdating-records","title":"Creating/Updating Records","text":"<p>The <code>Phalcon\\Mvc\\Model::save()</code> method allows you to create/update records according to whether they already exist in the table associated with a model. The save method is called internally by the create and update methods of Phalcon\\Mvc\\Model. For this to work as expected it is necessary to have properly defined a primary key in the entity to determine whether a record should be updated or created.</p> <p>Also the method executes associated validators, virtual foreign keys and events that are defined in the model:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robot = new Robots();\n\n$robot-&gt;type = 'mechanical';\n$robot-&gt;name = 'Astro Boy';\n$robot-&gt;year = 1952;\n\nif ($robot-&gt;save() === false) {\n    echo \"Umh, We can't store robots right now: \\n\";\n\n    $messages = $robot-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo $message, \"\\n\";\n    }\n} else {\n    echo 'Great, a new robot was saved successfully!';\n}\n</code></pre> <p>An array could be passed to <code>save</code> to avoid assign every column manually. Phalcon\\Mvc\\Model will check if there are setters implemented for the columns passed in the array giving priority to them instead of assign directly the values of the attributes:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robot = new Robots();\n\n$robot-&gt;save(\n    [\n        'type' =&gt; 'mechanical',\n        'name' =&gt; 'Astro Boy',\n        'year' =&gt; 1952,\n    ]\n);\n</code></pre> <p>Values assigned directly or via the array of attributes are escaped/sanitized according to the related attribute data type. So you can pass an insecure array without worrying about possible SQL injections:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robot = new Robots();\n\n$robot-&gt;save($_POST);\n</code></pre> <p>NOTE</p> <p>Without precautions mass assignment could allow attackers to set any database column's value. Only use this feature if you want to permit a user to insert/update every column in the model, even if those fields are not in the submitted form. </p> <p>You can set an additional parameter in <code>save</code> to set a whitelist of fields that only must taken into account when doing the mass assignment:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robot = new Robots();\n\n$robot-&gt;save(\n    $_POST,\n    [\n        'name',\n        'type',\n    ]\n);\n</code></pre>"},{"location":"db-models/#createupdate-with-confidence","title":"Create/Update with Confidence","text":"<p>When an application has a lot of competition, we could be expecting create a record but it is actually updated. This could happen if we use <code>Phalcon\\Mvc\\Model::save()</code> to persist the records in the database. If we want to be absolutely sure that a record is created or updated, we can change the <code>save()</code> call with <code>create()</code> or <code>update()</code>:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robot = new Robots();\n\n$robot-&gt;type = 'mechanical';\n$robot-&gt;name = 'Astro Boy';\n$robot-&gt;year = 1952;\n\n// This record only must be created\nif ($robot-&gt;create() === false) {\n    echo \"Umh, We can't store robots right now: \\n\";\n\n    $messages = $robot-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo $message, \"\\n\";\n    }\n} else {\n    echo 'Great, a new robot was created successfully!';\n}\n</code></pre> <p>The methods <code>create</code> and <code>update</code> also accept an array of values as parameter.</p>"},{"location":"db-models/#deleting-records","title":"Deleting Records","text":"<p>The <code>Phalcon\\Mvc\\Model::delete()</code> method allows to delete a record. You can use it as follows:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst(11);\n\nif ($robot !== false) {\n    if ($robot-&gt;delete() === false) {\n        echo \"Sorry, we can't delete the robot right now: \\n\";\n\n        $messages = $robot-&gt;getMessages();\n\n        foreach ($messages as $message) {\n            echo $message, \"\\n\";\n        }\n    } else {\n        echo 'The robot was deleted successfully!';\n    }\n}\n</code></pre> <p>You can also delete many records by traversing a resultset with a <code>foreach</code>:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robots = Robots::find(\n    \"type = 'mechanical'\"\n);\n\nforeach ($robots as $robot) {\n    if ($robot-&gt;delete() === false) {\n        echo \"Sorry, we can't delete the robot right now: \\n\";\n\n        $messages = $robot-&gt;getMessages();\n\n        foreach ($messages as $message) {\n            echo $message, \"\\n\";\n        }\n    } else {\n        echo 'The robot was deleted successfully!';\n    }\n}\n</code></pre> <p>The following events are available to define custom business rules that can be executed when a delete operation is performed:</p> Operation Name Can stop operation? Explanation Deleting afterDelete No Runs after the delete operation was made Deleting beforeDelete Yes Runs before the delete operation is made <p>With the above events can also define business rules in the models:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function beforeDelete()\n    {\n        if ($this-&gt;status === 'A') {\n            echo \"The robot is active, it can't be deleted\";\n\n            return false;\n        }\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"db-models/#hydration-modes","title":"Hydration Modes","text":"<p>As mentioned previously, resultsets are collections of complete objects, this means that every returned result is an object representing a row in the database. These objects can be modified and saved again to persistence:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robots = Robots::find();\n\n// Manipulating a resultset of complete objects\nforeach ($robots as $robot) {\n    $robot-&gt;year = 2000;\n\n    $robot-&gt;save();\n}\n</code></pre> <p>Sometimes records are obtained only to be presented to a user in read-only mode, in these cases it may be useful to change the way in which records are represented to facilitate their handling. The strategy used to represent objects returned in a resultset is called 'hydration mode':</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Resultset;\nuse Store\\Toys\\Robots;\n\n$robots = Robots::find();\n\n// Return every robot as an array\n$robots-&gt;setHydrateMode(\n    Resultset::HYDRATE_ARRAYS\n);\n\nforeach ($robots as $robot) {\n    echo $robot['year'], PHP_EOL;\n}\n\n// Return every robot as a stdClass\n$robots-&gt;setHydrateMode(\n    Resultset::HYDRATE_OBJECTS\n);\n\nforeach ($robots as $robot) {\n    echo $robot-&gt;year, PHP_EOL;\n}\n\n// Return every robot as a Robots instance\n$robots-&gt;setHydrateMode(\n    Resultset::HYDRATE_RECORDS\n);\n\nforeach ($robots as $robot) {\n    echo $robot-&gt;year, PHP_EOL;\n}\n</code></pre> <p>Hydration mode can also be passed as a parameter of <code>find</code>:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Resultset;\nuse Store\\Toys\\Robots;\n\n$robots = Robots::find(\n    [\n        'hydration' =&gt; Resultset::HYDRATE_ARRAYS,\n    ]\n);\n\nforeach ($robots as $robot) {\n    echo $robot['year'], PHP_EOL;\n}\n</code></pre>"},{"location":"db-models/#table-prefixes","title":"Table prefixes","text":"<p>If you want all your tables to have certain prefix and without setting source in all models you can use the  <code>Phalcon\\Mvc\\Model\\Manager</code> and the method <code>setModelPrefix()</code>:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Manager;\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n\n}\n\n$manager = new Manager();\n$manager-&gt;setModelPrefix('wp_');\n$robots = new Robots(null, null, $manager);\necho $robots-&gt;getSource(); // will return wp_robots\n</code></pre>"},{"location":"db-models/#auto-generated-identity-columns","title":"Auto-generated identity columns","text":"<p>Some models may have identity columns. These columns usually are the primary key of the mapped table. Phalcon\\Mvc\\Model can recognize the identity column omitting it in the generated SQL <code>INSERT</code>, so the database system can generate an auto-generated value for it. Always after creating a record, the identity field will be registered with the value generated in the database system for it:</p> <pre><code>&lt;?php\n\n$robot-&gt;save();\n\necho 'The generated id is: ', $robot-&gt;id;\n</code></pre> <p>Phalcon\\Mvc\\Model is able to recognize the identity column. Depending on the database system, those columns may be serial columns like in PostgreSQL or auto_increment columns in the case of MySQL.</p> <p>PostgreSQL uses sequences to generate auto-numeric values, by default, Phalcon tries to obtain the generated value from the sequence <code>table_field_seq</code>, for example: <code>robots_id_seq</code>, if that sequence has a different name, the <code>getSequenceName()</code> method needs to be implemented:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function getSequenceName()\n    {\n        return 'robots_sequence_name';\n    }\n}\n</code></pre>"},{"location":"db-models/#skipping-columns","title":"Skipping Columns","text":"<p>To tell Phalcon\\Mvc\\Model that always omits some fields in the creation and/or update of records in order to delegate the database system the assignation of the values by a trigger or a default:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        // Skips fields/columns on both INSERT/UPDATE operations\n        $this-&gt;skipAttributes(\n            [\n                'year',\n                'price',\n            ]\n        );\n\n        // Skips only when inserting\n        $this-&gt;skipAttributesOnCreate(\n            [\n                'created_at',\n            ]\n        );\n\n        // Skips only when updating\n        $this-&gt;skipAttributesOnUpdate(\n            [\n                'modified_in',\n            ]\n        );\n    }\n}\n</code></pre> <p>This will ignore globally these fields on each <code>INSERT</code>/<code>UPDATE</code> operation on the whole application. If you want to ignore different attributes on different <code>INSERT</code>/<code>UPDATE</code> operations, you can specify the second parameter (boolean) - <code>true</code> for replacement. Forcing a default value can be done as follows:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\nuse Phalcon\\Db\\RawValue;\n\n$robot = new Robots();\n\n$robot-&gt;name       = 'Bender';\n$robot-&gt;year       = 1999;\n$robot-&gt;created_at = new RawValue('default');\n\n$robot-&gt;create();\n</code></pre> <p>A callback also can be used to create a conditional assignment of automatic default values:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Db\\RawValue;\n\nclass Robots extends Model\n{\n    public function beforeCreate()\n    {\n        if ($this-&gt;price &gt; 10000) {\n            $this-&gt;type = new RawValue('default');\n        }\n    }\n}\n</code></pre> <p>NOTE</p> <p>Never use a Phalcon\\Db\\RawValue to assign external data (such as user input) or variable data. The value of these fields is ignored when binding parameters to the query. So it could be used to attack the application injecting SQL. </p>"},{"location":"db-models/#dynamic-updates","title":"Dynamic Updates","text":"<p>SQL <code>UPDATE</code> statements are by default created with every column defined in the model (full all-field SQL update). You can change specific models to make dynamic updates, in this case, just the fields that had changed are used to create the final SQL statement.</p> <p>In some cases this could improve the performance by reducing the traffic between the application and the database server, this specially helps when the table has blob/text fields:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;useDynamicUpdate(true);\n    }\n}\n</code></pre>"},{"location":"db-models/#independent-column-mapping","title":"Independent Column Mapping","text":"<p>The ORM supports an independent column map, which allows the developer to use different column names in the model to the ones in the table. Phalcon will recognize the new column names and will rename them accordingly to match the respective columns in the database. This is a great feature when one needs to rename fields in the database without having to worry about all the queries in the code. A change in the column map in the model will take care of the rest. For example:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public $code;\n\n    public $theName;\n\n    public $theType;\n\n    public $theYear;\n\n    public function columnMap()\n    {\n        // Keys are the real names in the table and\n        // the values their names in the application\n        return [\n            'id'       =&gt; 'code',\n            'the_name' =&gt; 'theName',\n            'the_type' =&gt; 'theType',\n            'the_year' =&gt; 'theYear',\n        ];\n    }\n}\n</code></pre> <p>Then you can use the new names naturally in your code:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n// Find a robot by its name\n$robot = Robots::findFirst(\n    \"theName = 'Voltron'\"\n);\n\necho $robot-&gt;theName, \"\\n\";\n\n// Get robots ordered by type\n$robot = Robots::find(\n    [\n        'order' =&gt; 'theType DESC',\n    ]\n);\n\nforeach ($robots as $robot) {\n    echo 'Code: ', $robot-&gt;code, \"\\n\";\n}\n\n// Create a robot\n$robot = new Robots();\n\n$robot-&gt;code    = '10101';\n$robot-&gt;theName = 'Bender';\n$robot-&gt;theType = 'Industrial';\n$robot-&gt;theYear = 2999;\n\n$robot-&gt;save();\n</code></pre> <p>Consider the following when renaming your columns:</p> <ul> <li>References to attributes in relationships/validators must use the new names</li> <li>Refer the real column names will result in an exception by the ORM</li> </ul> <p>The independent column map allows you to:</p> <ul> <li>Write applications using your own conventions</li> <li>Eliminate vendor prefixes/suffixes in your code</li> <li>Change column names without change your application code</li> </ul>"},{"location":"db-models/#record-snapshots","title":"Record Snapshots","text":"<p>Specific models could be set to maintain a record snapshot when they're queried. You can use this feature to implement auditing or just to know what fields are changed according to the data queried from the persistence:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;keepSnapshots(true);\n    }\n}\n</code></pre> <p>When activating this feature the application consumes a bit more of memory to keep track of the original values obtained from the persistence. In models that have this feature activated you can check what fields changed as follows:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n// Get a record from the database\n$robot = Robots::findFirst();\n\n// Change a column\n$robot-&gt;name = 'Other name';\n\nvar_dump($robot-&gt;getChangedFields()); // ['name']\n\nvar_dump($robot-&gt;hasChanged('name')); // true\n\nvar_dump($robot-&gt;hasChanged('type')); // false\n</code></pre> <p>Snapshots are updated on model creation/update. Using <code>hasUpdated()</code> and <code>getUpdatedFields()</code> can be used to check if fields were updated after a create/save/update but it could potentially cause problems to your application if you execute <code>getChangedFields()</code> in <code>afterUpdate()</code>, <code>afterSave()</code> or <code>afterCreate()</code>. </p> <p>You can disable this functionality by using:</p> <p><pre><code>Phalcon\\Mvc\\Model::setup(\n    [\n        'updateSnapshotOnSave' =&gt; false,\n    ]\n);\n</code></pre> or if you prefer set this in your <code>php.ini</code></p> <pre><code>phalcon.orm.update_snapshot_on_save = 0\n</code></pre> <p>Using this functionality will have the following effect:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass User extends Model\n{\n  public function initialize()\n  {\n      $this-&gt;keepSnapshots(true);\n  }\n}\n\n$user       = new User();\n$user-&gt;name = 'Test User';\n$user-&gt;create();\nvar_dump($user-&gt;getChangedFields());\n$user-&gt;login = 'testuser';\nvar_dump($user-&gt;getChangedFields());\n$user-&gt;update();\nvar_dump($user-&gt;getChangedFields());\n</code></pre> <p>On Phalcon 3.4.0 and later it is:</p> <pre><code>array(0) {\n}\narray(1) {\n[0]=&gt; \n    string(5) \"login\"\n}\narray(0) {\n}\n</code></pre> <p><code>getUpdatedFields()</code> will properly return updated fields or as mentioned above you can go back to the previous behavior by setting the relevant ini value.</p>"},{"location":"db-models/#pointing-to-a-different-schema","title":"Pointing to a different schema","text":"<p>If a model is mapped to a table that is in a different schemas/databases than the default. You can use the <code>setSchema()</code> method to define that:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;setSchema('toys');\n    }\n}\n</code></pre>"},{"location":"db-models/#setting-multiple-databases","title":"Setting multiple databases","text":"<p>In Phalcon, all models can belong to the same database connection or have an individual one. Actually, when Phalcon\\Mvc\\Model needs to connect to the database it requests the <code>db</code> service in the application's services container. You can overwrite this service setting it in the <code>initialize()</code> method:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as MysqlPdo;\nuse Phalcon\\Db\\Adapter\\Pdo\\PostgreSQL as PostgreSQLPdo;\n\n// This service returns a MySQL database\n$di-&gt;set(\n    'dbMysql',\n    function () {\n        return new MysqlPdo(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'invo',\n            ]\n        );\n    }\n);\n\n// This service returns a PostgreSQL database\n$di-&gt;set(\n    'dbPostgres',\n    function () {\n        return new PostgreSQLPdo(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'postgres',\n                'password' =&gt; '',\n                'dbname'   =&gt; 'invo',\n            ]\n        );\n    }\n);\n</code></pre> <p>Then, in the <code>initialize()</code> method, we define the connection service for the model:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;setConnectionService('dbPostgres');\n    }\n}\n</code></pre> <p>But Phalcon offers you more flexibility, you can define the connection that must be used to <code>read</code> and for <code>write</code>. This is specially useful to balance the load to your databases implementing a master-slave architecture:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;setReadConnectionService('dbSlave');\n\n        $this-&gt;setWriteConnectionService('dbMaster');\n    }\n}\n</code></pre> <p>The ORM also provides Horizontal Sharding facilities, by allowing you to implement a 'shard' selection according to the current query conditions:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    /**\n     * Dynamically selects a shard\n     *\n     * @param array $intermediate\n     * @param array $bindParams\n     * @param array $bindTypes\n     */\n    public function selectReadConnection($intermediate, $bindParams, $bindTypes)\n    {\n        // Check if there is a 'where' clause in the select\n        if (isset($intermediate['where'])) {\n            $conditions = $intermediate['where'];\n\n            // Choose the possible shard according to the conditions\n            if ($conditions['left']['name'] === 'id') {\n                $id = $conditions['right']['value'];\n\n                if ($id &gt; 0 &amp;&amp; $id &lt; 10000) {\n                    return $this-&gt;getDI()-&gt;get('dbShard1');\n                }\n\n                if ($id &gt; 10000) {\n                    return $this-&gt;getDI()-&gt;get('dbShard2');\n                }\n            }\n        }\n\n        // Use a default shard\n        return $this-&gt;getDI()-&gt;get('dbShard0');\n    }\n}\n</code></pre> <p>The <code>selectReadConnection()</code> method is called to choose the right connection, this method intercepts any new query executed:</p> <pre><code>&lt;?php\n\nuse Store\\Toys\\Robots;\n\n$robot = Robots::findFirst('id = 101');\n</code></pre>"},{"location":"db-models/#injecting-services-into-models","title":"Injecting services into Models","text":"<p>You may be required to access the application services within a model, the following example explains how to do that:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function notSaved()\n    {\n        // Obtain the flash service from the DI container\n        $flash = $this-&gt;getDI()-&gt;getFlash();\n\n        $messages = $this-&gt;getMessages();\n\n        // Show validation messages\n        foreach ($messages as $message) {\n            $flash-&gt;error($message);\n        }\n    }\n}\n</code></pre> <p>The <code>notSaved</code> event is triggered every time that a <code>create</code> or <code>update</code> action fails. So we're flashing the validation messages obtaining the <code>flash</code> service from the DI container. By doing this, we don't have to print messages after each save.</p>"},{"location":"db-models/#disablingenabling-features","title":"Disabling/Enabling Features","text":"<p>In the ORM we have implemented a mechanism that allow you to enable/disable specific features or options globally on the fly. According to how you use the ORM you can disable that you aren't using. These options can also be temporarily disabled if required:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nModel::setup(\n    [\n        'events'         =&gt; false,\n        'columnRenaming' =&gt; false,\n    ]\n);\n</code></pre> <p>The available options are:</p> Option Description Default astCache Enables/Disables callbacks, hooks and event notifications from all the models <code>null</code> cacheLevel Sets the cache level for the ORM <code>3</code> castOnHydrate <code>false</code> columnRenaming Enables/Disables the column renaming <code>true</code> disableAssignSetters Allow disabling setters in your model <code>false</code> enableImplicitJoins <code>true</code> enableLiterals <code>true</code> escapeIdentifiers <code>true</code> events Enables/Disables callbacks, hooks and event notifications from all the models <code>true</code> exceptionOnFailedSave Enables/Disables throwing an exception when there is a failed <code>save()</code> <code>false</code> forceCasting <code>false</code> ignoreUnknownColumns Enables/Disables ignoring unknown columns on the model <code>false</code> lateStateBinding Enables/Disables late state binding of the <code>Phalcon\\Mvc\\Model::cloneResultMap()</code> method <code>false</code> notNullValidations The ORM automatically validate the not null columns present in the mapped table <code>true</code> parserCache <code>null</code> phqlLiterals Enables/Disables literals in the PHQL parser <code>true</code> uniqueCacheId <code>3</code> updateSnapshotOnSave Enables/Disables updating snapshots on <code>save()</code> <code>true</code> virtualForeignKeys Enables/Disables the virtual foreign keys <code>true</code> <p>NOTE</p> <p><code>Phalcon\\Mvc\\Model::assign()</code> (which is used also when creating/updating/saving model) is always using setters if they exist when have data arguments passed, even when it's required or necessary. This will add some additional overhead to your application. You can change this behavior by adding <code>phalcon.orm.disable_assign_setters = 1</code> to your ini file, it will just simply use <code>$this-&gt;property = value</code>.</p>"},{"location":"db-models/#stand-alone-component","title":"Stand-Alone component","text":"<p>Using Phalcon\\Mvc\\Model in a stand-alone mode can be demonstrated below:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Manager as ModelsManager;\nuse Phalcon\\Db\\Adapter\\Pdo\\Sqlite as Connection;\nuse Phalcon\\Mvc\\Model\\Metadata\\Memory as MetaData;\n\n$di = new Di();\n\n// Setup a connection\n$di-&gt;set(\n    'db',\n    new Connection(\n        [\n            'dbname' =&gt; 'sample.db',\n        ]\n    )\n);\n\n// Set a models manager\n$di-&gt;set(\n    'modelsManager',\n    new ModelsManager()\n);\n\n// Use the memory meta-data adapter or other\n$di-&gt;set(\n    'modelsMetadata',\n    new MetaData()\n);\n\n// Create a model\nclass Robots extends Model\n{\n\n}\n\n// Use the model\necho Robots::count();\n</code></pre>"},{"location":"db-odm/","title":"ODM","text":"<p>NOTE</p> <p>Please note that if you are using the Mongo driver provided by PHP 7, the ODM will not work for you. There is an incubator adapter but all the Mongo code must be rewritten (new Bson type instead of arrays, no MongoId, no MongoDate, etc...). Please ensure that you test your code before upgrading to PHP 7 and/or Phalcon 3+</p>"},{"location":"db-odm/#odm-object-document-mapper","title":"ODM (Object-Document Mapper)","text":"<p>In addition to its ability to map tables in relational databases, Phalcon can map documents from NoSQL databases. The ODM offers a CRUD functionality, events, validations among other services.</p> <p>Due to the absence of SQL queries and planners, NoSQL databases can see real improvements in performance using the Phalcon approach. Additionally, there are no SQL building reducing the possibility of SQL injections.</p> <p>The following NoSQL databases are supported:</p> Name Description MongoDB MongoDB is a scalable, high-performance, open source NoSQL database."},{"location":"db-odm/#creating-models","title":"Creating Models","text":"<p>A model is a class that extends from Phalcon\\Mvc\\Collection. It must be placed in the models directory. A model file must contain a single class; its class name should be in camel case notation:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n\n}\n</code></pre> <p>By default model <code>Robots</code> will refer to the collection <code>robots</code>. If you want to manually specify another name for the mapping collection, you can use the <code>setSource()</code> method:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function initialize()\n    {\n        $this-&gt;setSource('the_robots');\n    }\n}\n</code></pre>"},{"location":"db-odm/#understanding-documents-to-objects","title":"Understanding Documents To Objects","text":"<p>Every instance of a model represents a document in the collection. You can easily access collection data by reading object properties. For example, for a collection <code>robots</code> with the documents:</p> <pre><code>$ mongo test\nMongoDB shell version: 1.8.2\nconnecting to: test\n&gt; db.robots.find()\n{ '_id' : ObjectId('508735512d42b8c3d15ec4e1'), 'name' : 'Astro Boy', 'year' : 1952,\n    'type' : 'mechanical' }\n{ '_id' : ObjectId('5087358f2d42b8c3d15ec4e2'), 'name' : 'Bender', 'year' : 1999,\n    'type' : 'mechanical' }\n{ '_id' : ObjectId('508735d32d42b8c3d15ec4e3'), 'name' : 'Wall-E', 'year' : 2008 }\n&gt;\n</code></pre>"},{"location":"db-odm/#models-in-namespaces","title":"Models in Namespaces","text":"<p>Namespaces can be used to avoid class name collision. In this case it is necessary to indicate the name of the related collection using the <code>setSource()</code> method:</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function initialize()\n    {\n        $this-&gt;setSource('robots');\n    }\n}\n</code></pre> <p>You could find a certain document by its ID and then print its name:</p> <pre><code>&lt;?php\n\n// Find record with _id = '5087358f2d42b8c3d15ec4e2'\n$robot = Robots::findById('5087358f2d42b8c3d15ec4e2');\n\n// Prints 'Bender'\necho $robot-&gt;name;\n</code></pre> <p>Once the record is in memory, you can make modifications to its data and then save changes:</p> <pre><code>&lt;?php\n\n$robot = Robots::findFirst(\n    [\n        [\n            'name' =&gt; 'Astro Boy',\n        ]\n    ]\n);\n\n$robot-&gt;name = 'Voltron';\n\n$robot-&gt;save();\n</code></pre>"},{"location":"db-odm/#setting-a-connection","title":"Setting a Connection","text":"<p>Connections are retrieved from the services container. By default, Phalcon tries to find the connection in a service called <code>mongo</code>:</p> <pre><code>&lt;?php\n\n// Simple database connection to localhost\n$di-&gt;set(\n    'mongo',\n    function () {\n        $mongo = new MongoClient();\n\n        return $mongo-&gt;selectDB('store');\n    },\n    true\n);\n\n// Connecting to a domain socket, falling back to localhost connection\n$di-&gt;set(\n    'mongo',\n    function () {\n        $mongo = new MongoClient(\n            'mongodb:///tmp/mongodb-27017.sock,localhost:27017'\n        );\n\n        return $mongo-&gt;selectDB('store');\n    },\n    true\n);\n</code></pre>"},{"location":"db-odm/#finding-documents","title":"Finding Documents","text":"<p>As Phalcon\\Mvc\\Collection relies on the Mongo PHP extension you have the same facilities to query documents and convert them transparently to model instances:</p> <pre><code>&lt;?php\n\n// How many robots are there?\n$robots = Robots::find();\necho 'There are ', count($robots), \"\\n\";\n\n// How many mechanical robots are there?\n$robots = Robots::find(\n    [\n        [\n            'type' =&gt; 'mechanical',\n        ]\n    ]\n);\necho 'There are ', count($robots), \"\\n\";\n\n// Get and print mechanical robots ordered by name upward\n$robots = Robots::find(\n    [\n        [\n            'type' =&gt; 'mechanical',\n        ],\n        'sort' =&gt; [\n            'name' =&gt; 1,\n        ],\n    ]\n);\n\nforeach ($robots as $robot) {\n    echo $robot-&gt;name, \"\\n\";\n}\n\n// Get first 100 mechanical robots ordered by name\n$robots = Robots::find(\n    [\n        [\n            'type' =&gt; 'mechanical',\n        ],\n        'sort'  =&gt; [\n            'name' =&gt; 1,\n        ],\n        'limit' =&gt; 100,\n    ]\n);\n\nforeach ($robots as $robot) {\n    echo $robot-&gt;name, \"\\n\";\n}\n</code></pre> <p>You could also use the <code>findFirst()</code> method to get only the first record matching the given criteria:</p> <pre><code>&lt;?php\n\n// What's the first robot in robots collection?\n$robot = Robots::findFirst();\necho 'The robot name is ', $robot-&gt;name, \"\\n\";\n\n// What's the first mechanical robot in robots collection?\n$robot = Robots::findFirst(\n    [\n        [\n            'type' =&gt; 'mechanical',\n        ]\n    ]\n);\n\necho 'The first mechanical robot name is ', $robot-&gt;name, \"\\n\";\n</code></pre> <p>Both <code>find()</code> and <code>findFirst()</code> methods accept an associative array specifying the search criteria:</p> <pre><code>&lt;?php\n\n// First robot where type = 'mechanical' and year = '1999'\n$robot = Robots::findFirst(\n    [\n        'conditions' =&gt; [\n            'type' =&gt; 'mechanical',\n            'year' =&gt; '1999',\n        ],\n    ]\n);\n\n// All virtual robots ordered by name downward\n$robots = Robots::find(\n    [\n        'conditions' =&gt; [\n            'type' =&gt; 'virtual',\n        ],\n        'sort' =&gt; [\n            'name' =&gt; -1,\n        ],\n    ]\n);\n\n// Find all robots that have more than 4 friends using the where condition\n$robots = Robots::find(\n    [\n        'conditions' =&gt; [\n            '$where' =&gt; 'this.friends.length &gt; 4',\n        ]\n    ]\n);\n</code></pre> <p>The available query options are:</p> Parameter Description Example <code>conditions</code> Search conditions for the find operation. Is used to extract only those records that fulfill a specified criterion. By default Phalcon_model assumes the first parameter are the conditions. <code>'conditions' =&gt; array('$gt' =&gt; 1990)</code> <code>fields</code> Returns specific columns instead of the full fields in the collection. When using this option an incomplete object is returned <code>'fields' =&gt; array('name' =&gt; true)</code> <code>sort</code> It's used to sort the resultset. Use one or more fields as each element in the array, 1 means ordering upwards, -1 downward <code>'sort' =&gt; array('name' =&gt; -1, 'status' =&gt; 1)</code> <code>limit</code> Limit the results of the query to results to certain range <code>'limit' =&gt; 10</code> <code>skip</code> Skips a number of results <code>'skip' =&gt; 50</code> <p>If you have experience with SQL databases, you may want to check the SQL to Mongo Mapping Chart.</p>"},{"location":"db-odm/#querying-specific-fields","title":"Querying specific fields","text":"<p>To query specific fields specific fields from a MongoDB database using the Phalcon ODM, all you need to do is:</p> <pre><code>$myRobots = Robots:find(\n    [\n        'fields' =&gt; ['name' =&gt; 1]\n    ]\n];\n</code></pre> <p>The <code>find()</code> above only returns a <code>name</code>. It can also be combined with a <code>condition</code>:</p> <p><pre><code>$myRobots = Robots:find(\n    [\n        ['type' =&gt; 'maid'],\n        'fields' =&gt; ['name' =&gt; 1]\n    ]\n];\n</code></pre> The example above returns the <code>name</code> of the robot with the <code>type = 'maid'</code>.</p>"},{"location":"db-odm/#aggregations","title":"Aggregations","text":"<p>A model can return calculations using aggregation framework provided by Mongo. The aggregated values are calculate without having to use MapReduce. With this option is easy perform tasks such as totaling or averaging field values:</p> <pre><code>&lt;?php\n\n$data = Article::aggregate(\n    [\n        [\n            '\\$project' =&gt; [\n                'category' =&gt; 1,\n            ],\n        ],\n        [\n            '\\$group' =&gt; [\n                '_id' =&gt; [\n                    'category' =&gt; '\\$category'\n                ],\n                'id'  =&gt; [\n                    '\\$max' =&gt; '\\$_id',\n                ],\n            ],\n        ],\n    ]\n);\n</code></pre>"},{"location":"db-odm/#creating-updatingrecords","title":"Creating Updating/Records","text":"<p>The <code>Phalcon\\Mvc\\Collection::save()</code> method allows you to create/update documents according to whether they already exist in the collection associated with a model. The <code>save()</code> method is called internally by the create and update methods of Phalcon\\Mvc\\Collection.</p> <p>Also the method executes associated validators and events that are defined in the model:</p> <pre><code>&lt;?php\n\n$robot = new Robots();\n\n$robot-&gt;type = 'mechanical';\n$robot-&gt;name = 'Astro Boy';\n$robot-&gt;year = 1952;\n\nif ($robot-&gt;save() === false) {\n    echo \"Umh, We can't store robots right now: \\n\";\n\n    $messages = $robot-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo $message, \"\\n\";\n    }\n} else {\n    echo 'Great, a new robot was saved successfully!';\n}\n</code></pre> <p>The <code>_id</code> property is automatically updated with the MongoId object created by the driver:</p> <pre><code>&lt;?php\n\n$robot-&gt;save();\n\necho 'The generated id is: ', $robot-&gt;getId();\n</code></pre>"},{"location":"db-odm/#validation-messages","title":"Validation Messages","text":"<p>Phalcon\\Mvc\\Collection has a messaging subsystem that provides a flexible way to output or store the validation messages generated during the insert/update processes.</p> <p>Each message consists of an instance of the class Phalcon\\Mvc\\Model\\Message. The set of messages generated can be retrieved with the method getMessages(). Each message provides extended information like the field name that generated the message or the message type:</p> <pre><code>&lt;?php\n\nif ($robot-&gt;save() === false) {\n    $messages = $robot-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo 'Message: ', $message-&gt;getMessage();\n        echo 'Field: ', $message-&gt;getField();\n        echo 'Type: ', $message-&gt;getType();\n    }\n}\n</code></pre>"},{"location":"db-odm/#validation-events-and-events-manager","title":"Validation Events and Events Manager","text":"<p>Models allow you to implement events that will be thrown when performing an insert or update. They help define business rules for a certain model. The following are the events supported by Phalcon\\Mvc\\Collection and their order of execution:</p> Operation Name Can stop operation? Explanation Inserting/Updating <code>beforeValidation</code> YES Is executed before the validation process and the final insert/update to the database Inserting <code>beforeValidationOnCreate</code> YES Is executed before the validation process only when an insertion operation is being made Updating <code>beforeValidationOnUpdate</code> YES Is executed before the fields are validated for not nulls or foreign keys when an updating operation is being made Inserting/Updating <code>onValidationFails</code> YES (already stopped) Is executed before the validation process only when an insertion operation is being made Inserting <code>afterValidationOnCreate</code> YES Is executed after the validation process when an insertion operation is being made Updating <code>afterValidationOnUpdate</code> YES Is executed after the validation process when an updating operation is being made Inserting/Updating <code>afterValidation</code> YES Is executed after the validation process Inserting/Updating <code>beforeSave</code> YES Runs before the required operation over the database system Updating <code>beforeUpdate</code> YES Runs before the required operation over the database system only when an updating operation is being made Inserting <code>beforeCreate</code> YES Runs before the required operation over the database system only when an inserting operation is being made Updating <code>afterUpdate</code> NO Runs after the required operation over the database system only when an updating operation is being made Inserting <code>afterCreate</code> NO Runs after the required operation over the database system only when an inserting operation is being made Inserting/Updating <code>afterSave</code> NO Runs after the required operation over the database system <p>To make a model to react to an event, we must to implement a method with the same name of the event:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function beforeValidationOnCreate()\n    {\n        echo 'This is executed before creating a Robot!';\n    }\n}\n</code></pre> <p>Events can be useful to assign values before performing an operation, for example:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Collection;\n\nclass Products extends Collection\n{\n    public function beforeCreate()\n    {\n        // Set the creation date\n        $this-&gt;created_at = date('Y-m-d H:i:s');\n    }\n\n    public function beforeUpdate()\n    {\n        // Set the modification date\n        $this-&gt;modified_in = date('Y-m-d H:i:s');\n    }\n}\n</code></pre> <p>Additionally, this component is integrated with the Phalcon Events Manager (Phalcon\\Events\\Manager), this means we can create listeners that run when an event is triggered.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$eventsManager = new EventsManager();\n\n// Attach an anonymous function as a listener for 'model' events\n$eventsManager-&gt;attach(\n    'collection:beforeSave',\n    function (Event $event, $robot) {\n        if ($robot-&gt;name === 'Scooby Doo') {\n            echo \"Scooby Doo isn't a robot!\";\n\n            return false;\n        }\n\n        return true;\n    }\n);\n\n$robot = new Robots();\n\n$robot-&gt;setEventsManager($eventsManager);\n\n$robot-&gt;name = 'Scooby Doo';\n$robot-&gt;year = 1969;\n\n$robot-&gt;save();\n</code></pre> <p>In the example given above the EventsManager only acted as a bridge between an object and a listener (the anonymous function). If we want all objects created in our application use the same EventsManager, then we need to assign this to the Models Manager:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Mvc\\Collection\\Manager as CollectionManager;\n\n// Registering the collectionManager service\n$di-&gt;set(\n    'collectionManager',\n    function () {\n        $eventsManager = new EventsManager();\n\n        // Attach an anonymous function as a listener for 'model' events\n        $eventsManager-&gt;attach(\n            'collection:beforeSave',\n            function (Event $event, $model) {\n                if (get_class($model) === 'Robots') {\n                    if ($model-&gt;name === 'Scooby Doo') {\n                        echo \"Scooby Doo isn't a robot!\";\n\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n        );\n\n        // Setting a default EventsManager\n        $modelsManager = new CollectionManager();\n\n        $modelsManager-&gt;setEventsManager($eventsManager);\n\n        return $modelsManager;\n    },\n    true\n);\n</code></pre>"},{"location":"db-odm/#implementing-a-business-rule","title":"Implementing a Business Rule","text":"<p>When an insert, update or delete is executed, the model verifies if there are any methods with the names of the events listed in the table above.</p> <p>We recommend that validation methods are declared protected to prevent that business logic implementation from being exposed publicly.</p> <p>The following example implements an event that validates the year cannot be smaller than 0 on update or insert:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    protected function beforeSave()\n    {\n        if ($this-&gt;year &lt; 0) {\n            echo 'Year cannot be smaller than zero!';\n\n            return false;\n        }\n    }\n}\n</code></pre> <p>Some events return <code>false</code> as an indication to stop the current operation. If an event doesn't return anything, <code>Phalcon\\Mvc\\Collection</code> will assume a <code>true</code> value.</p>"},{"location":"db-odm/#validating-data-integrity","title":"Validating Data Integrity","text":"<p>Phalcon\\Mvc\\Collection provides several events to validate data and implement business rules. The special <code>validation</code> event allows us to call built-in validators over the record. Phalcon exposes a few built-in validators that can be used at this stage of validation.</p> <p>The following example shows how to use it:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Collection;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\InclusionIn;\nuse Phalcon\\Validation\\Validator\\Numericality;\n\nclass Robots extends Collection\n{\n    public function validation()\n    {\n        $validation = new Validation();\n\n        $validation-&gt;add(\n            'type',\n            new InclusionIn(\n                [\n                    'message' =&gt; 'Type must be: mechanical or virtual',\n                    'domain' =&gt; [\n                        'Mechanical',\n                        'Virtual',\n                    ],\n                ]\n            )\n        );\n\n        $validation-&gt;add(\n            'price',\n            new Numericality(\n                [\n                    'message' =&gt; 'Price must be numeric'\n                ]\n            )\n        );\n\n        return $this-&gt;validate($validation);\n    }\n}\n</code></pre> <p>The example above performs a validation using the built-in validator <code>InclusionIn</code>. It checks that the value of the field <code>type</code> is in a <code>domain</code> list. If the value is not included in the list, then the validator will fail and return <code>false</code>.</p> <p>NOTE</p> <p>For more information on validators, see the Validation documentation </p>"},{"location":"db-odm/#deleting-records","title":"Deleting Records","text":"<p>The <code>Phalcon\\Mvc\\Collection::delete()</code> method allows you to delete a document. You can use it as follows:</p> <pre><code>&lt;?php\n\n$robot = Robots::findFirst();\n\nif ($robot !== false) {\n    if ($robot-&gt;delete() === false) {\n        echo \"Sorry, we can't delete the robot right now: \\n\";\n\n        $messages = $robot-&gt;getMessages();\n\n        foreach ($messages as $message) {\n            echo $message, \"\\n\";\n        }\n    } else {\n        echo 'The robot was deleted successfully!';\n    }\n}\n</code></pre> <p>You can also delete many documents by traversing a resultset with a <code>foreach</code> loop:</p> <pre><code>&lt;?php\n\n$robots = Robots::find(\n    [\n        [\n            'type' =&gt; 'mechanical',\n        ]\n    ]\n);\n\nforeach ($robots as $robot) {\n    if ($robot-&gt;delete() === false) {\n        echo \"Sorry, we can't delete the robot right now: \\n\";\n\n        $messages = $robot-&gt;getMessages();\n\n        foreach ($messages as $message) {\n            echo $message, \"\\n\";\n        }\n    } else {\n        echo 'The robot was deleted successfully!';\n    }\n}\n</code></pre> <p>The following events are available to define custom business rules that can be executed when a delete operation is performed:</p> Operation Name Can stop operation? Explanation Deleting <code>beforeDelete</code> YES Runs before the delete operation is made Deleting <code>afterDelete</code> NO Runs after the delete operation was made"},{"location":"db-odm/#validation-failed-events","title":"Validation Failed Events","text":"<p>Another type of events is available when the data validation process finds any inconsistency:</p> Operation Name Explanation Insert or Update <code>notSave</code> Triggered when the insert/update operation fails for any reason Insert, Delete or Update <code>onValidationFails</code> Triggered when any data manipulation operation fails"},{"location":"db-odm/#implicit-ids-vs-user-primary-keys","title":"Implicit Ids vs. User Primary Keys","text":"<p>By default Phalcon\\Mvc\\Collection assumes that the <code>_id</code> attribute is automatically generated using MongoIds.</p> <p>If a model uses custom primary keys this behavior can be overridden:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function initialize()\n    {\n        $this-&gt;useImplicitObjectIds(false);\n    }\n}\n</code></pre>"},{"location":"db-odm/#setting-multiple-databases","title":"Setting multiple databases","text":"<p>In Phalcon, all models can share the same database connection or specify a connection per model. Actually, when <code>Phalcon\\Mvc\\Collection</code> needs to connect to the database it requests the <code>mongo</code> service in the application's services container. You can overwrite this service by setting it in the <code>initialize()</code> method:</p> <pre><code>&lt;?php\n\n// This service returns a mongo database at 192.168.1.100\n$di-&gt;set(\n    'mongo1',\n    function () {\n        $mongo = new MongoClient(\n            'mongodb://scott:nekhen@192.168.1.100'\n        );\n\n        return $mongo-&gt;selectDB('management');\n    },\n    true\n);\n\n// This service returns a mongo database at localhost\n$di-&gt;set(\n    'mongo2',\n    function () {\n        $mongo = new MongoClient(\n            'mongodb://localhost'\n        );\n\n        return $mongo-&gt;selectDB('invoicing');\n    },\n    true\n);\n</code></pre> <p>Then, in the <code>initialize()</code> method, we define the connection service for the model:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function initialize()\n    {\n        $this-&gt;setConnectionService('mongo1');\n    }\n}\n</code></pre>"},{"location":"db-odm/#injecting-services-into-models","title":"Injecting services into Models","text":"<p>You may be required to access the application services within a model, the following example explains how to do that:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Collection;\n\nclass Robots extends Collection\n{\n    public function notSave()\n    {\n        // Obtain the flash service from the DI container\n        $flash = $this-&gt;getDI()-&gt;getShared('flash');\n\n        $messages = $this-&gt;getMessages();\n\n        // Show validation messages\n        foreach ($messages as $message) {\n            $flash-&gt;error(\n                (string) $message\n            );\n        }\n    }\n}\n</code></pre> <p>The <code>notSave</code> event is triggered whenever a <code>creating</code> or <code>updating</code> action fails. We're flashing the validation messages obtaining the <code>flash</code> service from the DI container. By doing this, we don't have to print messages after each saving.</p>"},{"location":"db-pagination/","title":"Pagination","text":"<p>The process of pagination takes place when we need to present big groups of arbitrary data gradually. <code>Phalcon\\Paginator</code> offers a fast and convenient way to split these sets of data into browsable pages.</p>"},{"location":"db-pagination/#data-adapters","title":"Data Adapters","text":"<p>This component makes use of adapters to encapsulate different sources of data:</p> Adapter Description Phalcon\\Paginator\\Adapter\\NativeArray Use a PHP array as source data Phalcon\\Paginator\\Adapter\\Model Use a Phalcon\\Mvc\\Model\\Resultset object as source data. Since PDO doesn't support scrollable cursors this adapter shouldn't be used to paginate a large number of records Phalcon\\Paginator\\Adapter\\QueryBuilder Use a Phalcon\\Mvc\\Model\\Query\\Builder object as source data"},{"location":"db-pagination/#factory","title":"Factory","text":"<p>Loads Paginator Adapter class using <code>adapter</code> option</p> <pre><code>&lt;?php\n\nuse Phalcon\\Paginator\\Factory;\n\n$builder = $this-&gt;modelsManager-&gt;createBuilder()\n                -&gt;columns('id, name')\n                -&gt;from('Robots')\n                -&gt;orderBy('name');\n\n$options = [\n    'builder' =&gt; $builder,\n    'limit'   =&gt; 20,\n    'page'    =&gt; 1,\n    'adapter' =&gt; 'queryBuilder',\n];\n\n$paginator = Factory::load($options);\n</code></pre>"},{"location":"db-pagination/#examples","title":"Examples","text":"<p>In the example below, the paginator will use the result of a query from a model as its source data, and limit the displayed data to 10 records per page:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Paginator\\Adapter\\Model as PaginatorModel;\n\n// Current page to show\n// In a controller/component this can be:\n// $this-&gt;request-&gt;getQuery('page', 'int'); // GET\n// $this-&gt;request-&gt;getPost('page', 'int'); // POST\n$currentPage = (int) $_GET['page'];\n\n// The data set to paginate\n$robots = Robots::find();\n\n// Create a Model paginator, show 10 rows by page starting from $currentPage\n$paginator = new PaginatorModel(\n    [\n        'data'  =&gt; $robots,\n        'limit' =&gt; 10,\n        'page'  =&gt; $currentPage,\n    ]\n);\n\n// Get the paginated results\n$page = $paginator-&gt;getPaginate();\n</code></pre> <p>The <code>$currentPage</code> variable controls the page to be displayed. The <code>$paginator-&gt;getPaginate()</code> returns a <code>$page</code> object that contains the paginated data. It can be used for generating the pagination:</p> <pre><code>&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;Id&lt;/th&gt;\n        &lt;th&gt;Name&lt;/th&gt;\n        &lt;th&gt;Type&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;?php foreach ($page-&gt;items as $item) { ?&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;?php echo $item-&gt;id; ?&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;?php echo $item-&gt;name; ?&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;?php echo $item-&gt;type; ?&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;?php } ?&gt;\n&lt;/table&gt;\n</code></pre> <p>The <code>$page</code> object also contains navigation data:</p> <pre><code>&lt;a href='/robots/search'&gt;First&lt;/a&gt;\n&lt;a href='/robots/search?page=&lt;?= $page-&gt;before; ?&gt;'&gt;Previous&lt;/a&gt;\n&lt;a href='/robots/search?page=&lt;?= $page-&gt;next; ?&gt;'&gt;Next&lt;/a&gt;\n&lt;a href='/robots/search?page=&lt;?= $page-&gt;last; ?&gt;'&gt;Last&lt;/a&gt;\n\n&lt;?php echo 'You are in page ', $page-&gt;current, ' of ', $page-&gt;total_pages; ?&gt;\n</code></pre>"},{"location":"db-pagination/#using-adapters","title":"Using Adapters","text":"<p>An example of the source data that must be used for each adapter:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Paginator\\Adapter\\Model as PaginatorModel;\nuse Phalcon\\Paginator\\Adapter\\NativeArray as PaginatorArray;\nuse Phalcon\\Paginator\\Adapter\\QueryBuilder as PaginatorQueryBuilder;\n\n// Passing a resultset as data\n$paginator = new PaginatorModel(\n    [\n        'data'  =&gt; Products::find(),\n        'limit' =&gt; 10,\n        'page'  =&gt; $currentPage,\n    ]\n);\n\n// Passing an array as data\n$paginator = new PaginatorArray(\n    [\n        'data'  =&gt; [\n            ['id' =&gt; 1, 'name' =&gt; 'Artichoke'],\n            ['id' =&gt; 2, 'name' =&gt; 'Carrots'],\n            ['id' =&gt; 3, 'name' =&gt; 'Beet'],\n            ['id' =&gt; 4, 'name' =&gt; 'Lettuce'],\n            ['id' =&gt; 5, 'name' =&gt; ''],\n        ],\n        'limit' =&gt; 2,\n        'page'  =&gt; $currentPage,\n    ]\n);\n\n// Passing a QueryBuilder as data\n\n$builder = $this-&gt;modelsManager-&gt;createBuilder()\n    -&gt;columns('id, name')\n    -&gt;from('Robots')\n    -&gt;orderBy('name');\n\n$paginator = new PaginatorQueryBuilder(\n    [\n        'builder' =&gt; $builder,\n        'limit'   =&gt; 20,\n        'page'    =&gt; 1,\n    ]\n);\n</code></pre>"},{"location":"db-pagination/#page-attributes","title":"Page Attributes","text":"<p>The <code>$page</code> object has the following attributes:</p> Attribute Description <code>items</code> The set of records to be displayed at the current page <code>current</code> The current page <code>before</code> The previous page to the current one <code>next</code> The next page to the current one <code>last</code> The last page in the set of records <code>total_pages</code> The number of pages <code>total_items</code> The number of items in the source data"},{"location":"db-pagination/#implementing-your-own-adapters","title":"Implementing your own adapters","text":"<p>The Phalcon\\Paginator\\AdapterInterface interface must be implemented in order to create your own paginator adapters or extend the existing ones:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Paginator\\AdapterInterface as PaginatorInterface;\n\nclass MyPaginator implements PaginatorInterface\n{\n    /**\n     * Adapter constructor\n     *\n     * @param array $config\n     */\n    public function __construct($config);\n\n    /**\n     * Set the current page number\n     *\n     * @param int $page\n     */\n    public function setCurrentPage($page);\n\n    /**\n     * Returns a slice of the resultset to show in the pagination\n     *\n     * @return stdClass\n     */\n    public function getPaginate();\n}\n</code></pre>"},{"location":"db-phql/","title":"Phalcon Query Language (PHQL)","text":"<p>Phalcon Query Language, PhalconQL or simply PHQL is a high-level, object-oriented SQL dialect that allows to write queries using a standardized SQL-like language. PHQL is implemented as a parser (written in C) that translates syntax in that of the target RDBMS.</p> <p>To achieve the highest performance possible, Phalcon provides a parser that uses the same technology as SQLite. This technology provides a small in-memory parser with a very low memory footprint that is also thread-safe.</p> <p>The parser first checks the syntax of the pass PHQL statement, then builds an intermediate representation of the statement and finally it converts it to the respective SQL dialect of the target RDBMS.</p> <p>In PHQL, we've implemented a set of features to make your access to databases more secure:</p> <ul> <li>Bound parameters are part of the PHQL language helping you to secure your code</li> <li>PHQL only allows one SQL statement to be executed per call preventing injections</li> <li>PHQL ignores all SQL comments which are often used in SQL injections</li> <li>PHQL only allows data manipulation statements, avoiding altering or dropping tables/databases by mistake or externally without authorization</li> <li>PHQL implements a high-level abstraction allowing you to handle tables as models and fields as class attributes</li> </ul>"},{"location":"db-phql/#usage-example","title":"Usage Example","text":"<p>To better explain how PHQL works consider the following example. We have two models <code>Cars</code> and <code>Brands</code>:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Cars extends Model\n{\n    public $id;\n\n    public $name;\n\n    public $brand_id;\n\n    public $price;\n\n    public $year;\n\n    public $style;\n\n    /**\n     * This model is mapped to the table sample_cars\n     */\n    public function getSource()\n    {\n        return 'sample_cars';\n    }\n\n    /**\n     * A car only has a Brand, but a Brand have many Cars\n     */\n    public function initialize()\n    {\n        $this-&gt;belongsTo('brand_id', 'Brands', 'id');\n    }\n}\n</code></pre> <p>And every Car has a Brand, so a Brand has many Cars:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Brands extends Model\n{\n    public $id;\n\n    public $name;\n\n    /**\n     * The model Brands is mapped to the 'sample_brands' table\n     */\n    public function getSource()\n    {\n        return 'sample_brands';\n    }\n\n    /**\n     * A Brand can have many Cars\n     */\n    public function initialize()\n    {\n        $this-&gt;hasMany('id', 'Cars', 'brand_id');\n    }\n}\n</code></pre>"},{"location":"db-phql/#creating-phql-queries","title":"Creating PHQL Queries","text":"<p>PHQL queries can be created just by instantiating the class Phalcon\\Mvc\\Model\\Query:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Query;\n\n// Instantiate the Query\n$query = new Query(\n    'SELECT * FROM Cars',\n    $this-&gt;getDI()\n);\n\n// Execute the query returning a result if any\n$cars = $query-&gt;execute();\n</code></pre> <p>From a controller or a view, it's easy to create/execute them using an injected <code>models manager</code> (Phalcon\\Mvc\\Model\\Manager):</p> <pre><code>&lt;?php\n\n// Executing a simple query\n$query = $this-&gt;modelsManager-&gt;createQuery('SELECT * FROM Cars');\n$cars  = $query-&gt;execute();\n\n// With bound parameters\n$query = $this-&gt;modelsManager-&gt;createQuery('SELECT * FROM Cars WHERE name = :name:');\n$cars  = $query-&gt;execute(\n    [\n        'name' =&gt; 'Audi',\n    ]\n);\n</code></pre> <p>Or simply execute it:</p> <pre><code>&lt;?php\n\n// Executing a simple query\n$cars = $this-&gt;modelsManager-&gt;executeQuery(\n    'SELECT * FROM Cars'\n);\n\n// Executing with bound parameters\n$cars = $this-&gt;modelsManager-&gt;executeQuery(\n    'SELECT * FROM Cars WHERE name = :name:',\n    [\n        'name' =&gt; 'Audi',\n    ]\n);\n</code></pre>"},{"location":"db-phql/#selecting-records","title":"Selecting Records","text":"<p>As the familiar SQL, PHQL allows querying of records using the SELECT statement we know, except that instead of specifying tables, we use the models classes:</p> <pre><code>&lt;?php\n\n$query = $manager-&gt;createQuery(\n    'SELECT * FROM Cars ORDER BY Cars.name'\n);\n\n$query = $manager-&gt;createQuery(\n    'SELECT Cars.name FROM Cars ORDER BY Cars.name'\n);\n</code></pre> <p>Classes in namespaces are also allowed:</p> <pre><code>&lt;?php\n\n$phql  = 'SELECT * FROM Formula\\Cars ORDER BY Formula\\Cars.name';\n$query = $manager-&gt;createQuery($phql);\n\n$phql  = 'SELECT Formula\\Cars.name FROM Formula\\Cars ORDER BY Formula\\Cars.name';\n$query = $manager-&gt;createQuery($phql);\n\n$phql  = 'SELECT c.name FROM Formula\\Cars c ORDER BY c.name';\n$query = $manager-&gt;createQuery($phql);\n</code></pre> <p>Most of the SQL standard is supported by PHQL, even nonstandard directives such as LIMIT:</p> <pre><code>&lt;?php\n\n$phql = 'SELECT c.name FROM Cars AS c WHERE c.brand_id = 21 ORDER BY c.name LIMIT 100';\n\n$query = $manager-&gt;createQuery($phql);\n</code></pre>"},{"location":"db-phql/#result-types","title":"Result Types","text":"<p>Depending on the type of columns we query, the result type will vary. If you retrieve a single whole object, then the object returned is a Phalcon\\Mvc\\Model\\Resultset\\Simple. This kind of resultset is a set of complete model objects:</p> <pre><code>&lt;?php\n\n$phql = 'SELECT c.* FROM Cars AS c ORDER BY c.name';\n\n$cars = $manager-&gt;executeQuery($phql);\n\nforeach ($cars as $car) {\n    echo 'Name: ', $car-&gt;name, \"\\n\";\n}\n</code></pre> <p>This is exactly the same as:</p> <pre><code>&lt;?php\n\n$cars = Cars::find(\n    [\n        'order' =&gt; 'name'\n    ]\n);\n\nforeach ($cars as $car) {\n    echo 'Name: ', $car-&gt;name, \"\\n\";\n}\n</code></pre> <p>Complete objects can be modified and re-saved in the database because they represent a complete record of the associated table. There are other types of queries that do not return complete objects, for example:</p> <pre><code>&lt;?php\n\n$phql = 'SELECT c.id, c.name FROM Cars AS c ORDER BY c.name';\n\n$cars = $manager-&gt;executeQuery($phql);\n\nforeach ($cars as $car) {\n    echo 'Name: ', $car-&gt;name, \"\\n\";\n}\n</code></pre> <p>We are only requesting some fields in the table, therefore those cannot be considered an entire object, so the returned object is still a resultset of type Phalcon\\Mvc\\Model\\Resultset\\Simple. However, each element is a standard object that only contain the two columns that were requested.</p> <p>These values that don't represent complete objects are what we call scalars. PHQL allows you to query all types of scalars: fields, functions, literals, expressions, etc..:</p> <pre><code>&lt;?php\n\n$phql = \"SELECT CONCAT(c.id, ' ', c.name) AS id_name FROM Cars AS c ORDER BY c.name\";\n\n$cars = $manager-&gt;executeQuery($phql);\n\nforeach ($cars as $car) {\n    echo $car-&gt;id_name, \"\\n\";\n}\n</code></pre> <p>As we can query complete objects or scalars, we can also query both at once:</p> <pre><code>&lt;?php\n\n$phql = 'SELECT c.price*0.16 AS taxes, c.* FROM Cars AS c ORDER BY c.name';\n\n$result = $manager-&gt;executeQuery($phql);\n</code></pre> <p>The result in this case is an object Phalcon\\Mvc\\Model\\Resultset\\Complex. This allows access to both complete objects and scalars at once:</p> <p><pre><code>&lt;?php\n\nforeach ($result as $row) {\n    echo 'Name: ', $row-&gt;cars-&gt;name, \"\\n\";\n    echo 'Price: ', $row-&gt;cars-&gt;price, \"\\n\";\n    echo 'Taxes: ', $row-&gt;taxes, \"\\n\";\n}\n</code></pre> ` Scalars are mapped as properties of each 'row', while complete objects are mapped as properties with the name of its related model.</p>"},{"location":"db-phql/#joins","title":"Joins","text":"<p>It's easy to request records from multiple models using PHQL. Most kinds of Joins are supported. As we defined relationships in the models, PHQL adds these conditions automatically:</p> <pre><code>&lt;?php\n\n$phql = 'SELECT Cars.name AS car_name, Brands.name AS brand_name FROM Cars JOIN Brands';\n\n$rows = $manager-&gt;executeQuery($phql);\n\nforeach ($rows as $row) {\n    echo $row-&gt;car_name, \"\\n\";\n    echo $row-&gt;brand_name, \"\\n\";\n}\n</code></pre> <p>By default, an INNER JOIN is assumed. You can specify the type of JOIN in the query:</p> <pre><code>&lt;?php\n\n$phql = 'SELECT Cars.*, Brands.* FROM Cars INNER JOIN Brands';\n$rows = $manager-&gt;executeQuery($phql);\n\n$phql = 'SELECT Cars.*, Brands.* FROM Cars LEFT JOIN Brands';\n$rows = $manager-&gt;executeQuery($phql);\n\n$phql = 'SELECT Cars.*, Brands.* FROM Cars LEFT OUTER JOIN Brands';\n$rows = $manager-&gt;executeQuery($phql);\n\n$phql = 'SELECT Cars.*, Brands.* FROM Cars CROSS JOIN Brands';\n$rows = $manager-&gt;executeQuery($phql);\n</code></pre> <p>It is also possible to manually set the conditions of the JOIN:</p> <pre><code>&lt;?php\n\n$phql = 'SELECT Cars.*, Brands.* FROM Cars INNER JOIN Brands ON Brands.id = Cars.brands_id';\n\n$rows = $manager-&gt;executeQuery($phql);\n</code></pre> <p>Also, the joins can be created using multiple tables in the FROM clause:</p> <pre><code>&lt;?php\n\n$phql = 'SELECT Cars.*, Brands.* FROM Cars, Brands WHERE Brands.id = Cars.brands_id';\n\n$rows = $manager-&gt;executeQuery($phql);\n\nforeach ($rows as $row) {\n    echo 'Car: ', $row-&gt;cars-&gt;name, \"\\n\";\n    echo 'Brand: ', $row-&gt;brands-&gt;name, \"\\n\";\n}\n</code></pre> <p>If an alias is used to rename the models in the query, those will be used to name the attributes in the every row of the result:</p> <pre><code>&lt;?php\n\n$phql = 'SELECT c.*, b.* FROM Cars c, Brands b WHERE b.id = c.brands_id';\n\n$rows = $manager-&gt;executeQuery($phql);\n\nforeach ($rows as $row) {\n    echo 'Car: ', $row-&gt;c-&gt;name, \"\\n\";\n    echo 'Brand: ', $row-&gt;b-&gt;name, \"\\n\";\n}\n</code></pre> <p>When the joined model has a many-to-many relation to the <code>from</code> model, the intermediate model is implicitly added to the generated query:</p> <pre><code>&lt;?php\n\n$phql = 'SELECT Artists.name, Songs.name FROM Artists ' .\n        'JOIN Songs WHERE Artists.genre = \"Trip-Hop\"';\n\n$result = $this-&gt;modelsManager-&gt;executeQuery($phql);\n</code></pre> <p>This code executes the following SQL in MySQL:</p> <pre><code>SELECT `artists`.`name`, `songs`.`name` FROM `artists`\nINNER JOIN `albums` ON `albums`.`artists_id` = `artists`.`id`\nINNER JOIN `songs` ON `albums`.`songs_id` = `songs`.`id`\nWHERE `artists`.`genre` = 'Trip-Hop'\n</code></pre>"},{"location":"db-phql/#aggregations","title":"Aggregations","text":"<p>The following examples show how to use aggregations in PHQL:</p> <pre><code>&lt;?php\n\n// How much are the prices of all the cars?\n$phql = 'SELECT SUM(price) AS summatory FROM Cars';\n$row  = $manager-&gt;executeQuery($phql)-&gt;getFirst();\necho $row['summatory'];\n\n// How many cars are by each brand?\n$phql = 'SELECT Cars.brand_id, COUNT(*) FROM Cars GROUP BY Cars.brand_id';\n$rows = $manager-&gt;executeQuery($phql);\nforeach ($rows as $row) {\n    echo $row-&gt;brand_id, ' ', $row['1'], \"\\n\";\n}\n\n// How many cars are by each brand?\n$phql = 'SELECT Brands.name, COUNT(*) FROM Cars JOIN Brands GROUP BY 1';\n$rows = $manager-&gt;executeQuery($phql);\nforeach ($rows as $row) {\n    echo $row-&gt;name, ' ', $row['1'], \"\\n\";\n}\n\n$phql = 'SELECT MAX(price) AS maximum, MIN(price) AS minimum FROM Cars';\n$rows = $manager-&gt;executeQuery($phql);\nforeach ($rows as $row) {\n    echo $row['maximum'], ' ', $row['minimum'], \"\\n\";\n}\n\n// Count distinct used brands\n$phql = 'SELECT COUNT(DISTINCT brand_id) AS brandId FROM Cars';\n$rows = $manager-&gt;executeQuery($phql);\nforeach ($rows as $row) {\n    echo $row-&gt;brandId, \"\\n\";\n}\n</code></pre>"},{"location":"db-phql/#conditions","title":"Conditions","text":"<p>Conditions allow us to filter the set of records we want to query. The <code>WHERE</code> clause allows to do that:</p> <pre><code>&lt;?php\n\n// Simple conditions\n$phql = 'SELECT * FROM Cars WHERE Cars.name = \"Lamborghini Espada\"';\n$cars = $manager-&gt;executeQuery($phql);\n\n$phql = 'SELECT * FROM Cars WHERE Cars.price &gt; 10000';\n$cars = $manager-&gt;executeQuery($phql);\n\n$phql = 'SELECT * FROM Cars WHERE TRIM(Cars.name) = \"Audi R8\"';\n$cars = $manager-&gt;executeQuery($phql);\n\n$phql = 'SELECT * FROM Cars WHERE Cars.name LIKE \"Ferrari%\"';\n$cars = $manager-&gt;executeQuery($phql);\n\n$phql = 'SELECT * FROM Cars WHERE Cars.name NOT LIKE \"Ferrari%\"';\n$cars = $manager-&gt;executeQuery($phql);\n\n$phql = 'SELECT * FROM Cars WHERE Cars.price IS NULL';\n$cars = $manager-&gt;executeQuery($phql);\n\n$phql = 'SELECT * FROM Cars WHERE Cars.id IN (120, 121, 122)';\n$cars = $manager-&gt;executeQuery($phql);\n\n$phql = 'SELECT * FROM Cars WHERE Cars.id NOT IN (430, 431)';\n$cars = $manager-&gt;executeQuery($phql);\n\n$phql = 'SELECT * FROM Cars WHERE Cars.id BETWEEN 1 AND 100';\n$cars = $manager-&gt;executeQuery($phql);\n</code></pre> <p>Also, as part of PHQL, prepared parameters automatically escape the input data, introducing more security:</p> <pre><code>&lt;?php\n\n$phql = 'SELECT * FROM Cars WHERE Cars.name = :name:';\n$cars = $manager-&gt;executeQuery(\n    $phql,\n    [\n        'name' =&gt; 'Lamborghini Espada'\n    ]\n);\n\n$phql = 'SELECT * FROM Cars WHERE Cars.name = ?0';\n$cars = $manager-&gt;executeQuery(\n    $phql,\n    [\n        0 =&gt; 'Lamborghini Espada'\n    ]\n);\n</code></pre>"},{"location":"db-phql/#inserting-data","title":"Inserting Data","text":"<p>With PHQL it's possible to insert data using the familiar INSERT statement:</p> <pre><code>&lt;?php\n\n// Inserting without columns\n$phql = 'INSERT INTO Cars VALUES (NULL, \"Lamborghini Espada\", '\n      . '7, 10000.00, 1969, \"Grand Tourer\")';\n$manager-&gt;executeQuery($phql);\n\n// Specifying columns to insert\n$phql = 'INSERT INTO Cars (name, brand_id, year, style) '\n      . 'VALUES (\"Lamborghini Espada\", 7, 1969, \"Grand Tourer\")';\n$manager-&gt;executeQuery($phql);\n\n// Inserting using placeholders\n$phql = 'INSERT INTO Cars (name, brand_id, year, style) '\n      . 'VALUES (:name:, :brand_id:, :year:, :style)';\n$manager-&gt;executeQuery(\n    $phql,\n    [\n        'name'     =&gt; 'Lamborghini Espada',\n        'brand_id' =&gt; 7,\n        'year'     =&gt; 1969,\n        'style'    =&gt; 'Grand Tourer',\n    ]\n);\n</code></pre> <p>Phalcon doesn't only transform the PHQL statements into SQL. All events and business rules defined in the model are executed as if we created individual objects manually. Let's add a business rule on the model cars. A car cannot cost less than $ 10,000:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Message;\n\nclass Cars extends Model\n{\n    public function beforeCreate()\n    {\n        if ($this-&gt;price &lt; 10000) {\n            $this-&gt;appendMessage(\n                new Message('A car cannot cost less than $ 10,000')\n            );\n\n            return false;\n        }\n    }\n}\n</code></pre> <p>If we made the following <code>INSERT</code> in the models Cars, the operation will not be successful because the price does not meet the business rule that we implemented. By checking the status of the insertion we can print any validation messages generated internally:</p> <pre><code>&lt;?php\n\n$phql = \"INSERT INTO Cars VALUES (NULL, 'Nissan Versa', 7, 9999.00, 2015, 'Sedan')\";\n\n$result = $manager-&gt;executeQuery($phql);\n\nif ($result-&gt;success() === false) {\n    foreach ($result-&gt;getMessages() as $message) {\n        echo $message-&gt;getMessage();\n    }\n}\n</code></pre>"},{"location":"db-phql/#updating-data","title":"Updating Data","text":"<p>Updating rows is very similar than inserting rows. As you may know, the instruction to update records is UPDATE. When a record is updated the events related to the update operation will be executed for each row.</p> <pre><code>&lt;?php\n\n// Updating a single column\n$phql = 'UPDATE Cars SET price = 15000.00 WHERE id = 101';\n$manager-&gt;executeQuery($phql);\n\n// Updating multiples columns\n$phql = 'UPDATE Cars SET price = 15000.00, type = \"Sedan\" WHERE id = 101';\n$manager-&gt;executeQuery($phql);\n\n// Updating multiples rows\n$phql = 'UPDATE Cars SET price = 7000.00, type = \"Sedan\" WHERE brands_id &gt; 5';\n$manager-&gt;executeQuery($phql);\n\n// Using placeholders\n$phql = 'UPDATE Cars SET price = ?0, type = ?1 WHERE brands_id &gt; ?2';\n$manager-&gt;executeQuery(\n    $phql,\n    [\n        0 =&gt; 7000.00,\n        1 =&gt; 'Sedan',\n        2 =&gt; 5,\n    ]\n);\n</code></pre> <p>An <code>UPDATE</code> statement performs the update in two phases:</p> <ul> <li>First, if the <code>UPDATE</code> has a <code>WHERE</code> clause it retrieves all the objects that match these criteria,</li> <li>Second, based on the queried objects it updates/changes the requested attributes storing them to the relational database</li> </ul> <p>This way of operation allows that events, virtual foreign keys and validations take part of the updating process. In summary, the following code:</p> <pre><code>&lt;?php\n\n$phql = 'UPDATE Cars SET price = 15000.00 WHERE id &gt; 101';\n\n$result = $manager-&gt;executeQuery($phql);\n\nif ($result-&gt;success() === false) {\n    $messages = $result-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo $message-&gt;getMessage();\n    }\n}\n</code></pre> <p>is somewhat equivalent to:</p> <pre><code>&lt;?php\n\n$messages = null;\n\n$process = function () use (&amp;$messages) {\n    $cars = Cars::find('id &gt; 101');\n\n    foreach ($cars as $car) {\n        $car-&gt;price = 15000;\n\n        if ($car-&gt;save() === false) {\n            $messages = $car-&gt;getMessages();\n\n            return false;\n        }\n    }\n\n    return true;\n};\n\n$success = $process();\n</code></pre>"},{"location":"db-phql/#deleting-data","title":"Deleting Data","text":"<p>When a record is deleted the events related to the delete operation will be executed for each row:</p> <pre><code>&lt;?php\n\n// Deleting a single row\n$phql = 'DELETE FROM Cars WHERE id = 101';\n$manager-&gt;executeQuery($phql);\n\n// Deleting multiple rows\n$phql = 'DELETE FROM Cars WHERE id &gt; 100';\n$manager-&gt;executeQuery($phql);\n\n// Using placeholders\n$phql = 'DELETE FROM Cars WHERE id BETWEEN :initial: AND :final:';\n$manager-&gt;executeQuery(\n    $phql,\n    [\n        'initial' =&gt; 1,\n        'final'   =&gt; 100,\n    ]\n);\n</code></pre> <p><code>DELETE</code> operations are also executed in two phases like <code>UPDATEs</code>. To check if the deletion produces any validation messages you should check the status code returned:</p> <pre><code>&lt;?php\n\n// Deleting multiple rows\n$phql = 'DELETE FROM Cars WHERE id &gt; 100';\n\n$result = $manager-&gt;executeQuery($phql);\n\nif ($result-&gt;success() === false) {\n    $messages = $result-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo $message-&gt;getMessage();\n    }\n}\n</code></pre>"},{"location":"db-phql/#creating-queries-using-the-query-builder","title":"Creating queries using the Query Builder","text":"<p>A builder is available to create PHQL queries without the need to write PHQL statements, also providing IDE facilities:</p> <pre><code>&lt;?php\n\n// Getting a whole set\n$robots = $this-&gt;modelsManager-&gt;createBuilder()\n    -&gt;from('Robots')\n    -&gt;join('RobotsParts')\n    -&gt;orderBy('Robots.name')\n    -&gt;getQuery()\n    -&gt;execute();\n\n// Getting the first row\n$robots = $this-&gt;modelsManager-&gt;createBuilder()\n    -&gt;from('Robots')\n    -&gt;join('RobotsParts')\n    -&gt;orderBy('Robots.name')\n    -&gt;getQuery()\n    -&gt;getSingleResult();\n</code></pre> <p>That is the same as:</p> <pre><code>&lt;?php\n\n$phql = 'SELECT Robots.* FROM Robots JOIN RobotsParts p ORDER BY Robots.name LIMIT 20';\n\n$result = $manager-&gt;executeQuery($phql);\n</code></pre> <p>More examples of the builder:</p> <pre><code>&lt;?php\n\n// 'SELECT Robots.* FROM Robots';\n$builder-&gt;from('Robots');\n\n// 'SELECT Robots.*, RobotsParts.* FROM Robots, RobotsParts';\n$builder-&gt;from(\n    [\n        'Robots',\n        'RobotsParts',\n    ]\n);\n\n// 'SELECT * FROM Robots';\n$phql = $builder-&gt;columns('*')\n                -&gt;from('Robots');\n\n// 'SELECT id FROM Robots';\n$builder-&gt;columns('id')\n        -&gt;from('Robots');\n\n// 'SELECT id, name FROM Robots';\n$builder-&gt;columns(['id', 'name'])\n        -&gt;from('Robots');\n\n// 'SELECT Robots.* FROM Robots WHERE Robots.name = 'Voltron'';\n$builder-&gt;from('Robots')\n        -&gt;where(\"Robots.name = 'Voltron'\");\n\n// 'SELECT Robots.* FROM Robots WHERE Robots.id = 100';\n$builder-&gt;from('Robots')\n        -&gt;where(100);\n\n// 'SELECT Robots.* FROM Robots WHERE Robots.type = 'virtual' AND Robots.id &gt; 50';\n$builder-&gt;from('Robots')\n        -&gt;where(\"type = 'virtual'\")\n        -&gt;andWhere('id &gt; 50');\n\n// 'SELECT Robots.* FROM Robots WHERE Robots.type = 'virtual' OR Robots.id &gt; 50';\n$builder-&gt;from('Robots')\n        -&gt;where(\"type = 'virtual'\")\n        -&gt;orWhere('id &gt; 50');\n\n// 'SELECT Robots.* FROM Robots GROUP BY Robots.name';\n$builder-&gt;from('Robots')\n        -&gt;groupBy('Robots.name');\n\n// 'SELECT Robots.* FROM Robots GROUP BY Robots.name, Robots.id';\n$builder-&gt;from('Robots')\n        -&gt;groupBy(['Robots.name', 'Robots.id']);\n\n// 'SELECT Robots.name, SUM(Robots.price) FROM Robots GROUP BY Robots.name';\n$builder-&gt;columns(['Robots.name', 'SUM(Robots.price)'])\n    -&gt;from('Robots')\n    -&gt;groupBy('Robots.name');\n\n// 'SELECT Robots.name, SUM(Robots.price) FROM Robots GROUP BY Robots.name HAVING SUM(Robots.price) &gt; 1000';\n$builder-&gt;columns(['Robots.name', 'SUM(Robots.price)'])\n    -&gt;from('Robots')\n    -&gt;groupBy('Robots.name')\n    -&gt;having('SUM(Robots.price) &gt; 1000');\n\n// 'SELECT Robots.* FROM Robots JOIN RobotsParts';\n$builder-&gt;from('Robots')\n    -&gt;join('RobotsParts');\n\n// 'SELECT Robots.* FROM Robots JOIN RobotsParts AS p';\n$builder-&gt;from('Robots')\n    -&gt;join('RobotsParts', null, 'p');\n\n// 'SELECT Robots.* FROM Robots JOIN RobotsParts ON Robots.id = RobotsParts.robots_id AS p';\n$builder-&gt;from('Robots')\n    -&gt;join('RobotsParts', 'Robots.id = RobotsParts.robots_id', 'p');\n\n// 'SELECT Robots.* FROM Robots\n// JOIN RobotsParts ON Robots.id = RobotsParts.robots_id AS p\n// JOIN Parts ON Parts.id = RobotsParts.parts_id AS t';\n$builder-&gt;from('Robots')\n    -&gt;join('RobotsParts', 'Robots.id = RobotsParts.robots_id', 'p')\n    -&gt;join('Parts', 'Parts.id = RobotsParts.parts_id', 't');\n\n// 'SELECT r.* FROM Robots AS r';\n$builder-&gt;addFrom('Robots', 'r');\n\n// 'SELECT Robots.*, p.* FROM Robots, Parts AS p';\n$builder-&gt;from('Robots')\n    -&gt;addFrom('Parts', 'p');\n\n// 'SELECT r.*, p.* FROM Robots AS r, Parts AS p';\n$builder-&gt;from(['r' =&gt; 'Robots'])\n        -&gt;addFrom('Parts', 'p');\n\n// 'SELECT r.*, p.* FROM Robots AS r, Parts AS p';\n$builder-&gt;from(['r' =&gt; 'Robots', 'p' =&gt; 'Parts']);\n\n// 'SELECT Robots.* FROM Robots LIMIT 10';\n$builder-&gt;from('Robots')\n    -&gt;limit(10);\n\n// 'SELECT Robots.* FROM Robots LIMIT 10 OFFSET 5';\n$builder-&gt;from('Robots')\n        -&gt;limit(10, 5);\n\n// 'SELECT Robots.* FROM Robots WHERE id BETWEEN 1 AND 100';\n$builder-&gt;from('Robots')\n        -&gt;betweenWhere('id', 1, 100);\n\n// 'SELECT Robots.* FROM Robots WHERE id IN (1, 2, 3)';\n$builder-&gt;from('Robots')\n        -&gt;inWhere('id', [1, 2, 3]);\n\n// 'SELECT Robots.* FROM Robots WHERE id NOT IN (1, 2, 3)';\n$builder-&gt;from('Robots')\n        -&gt;notInWhere('id', [1, 2, 3]);\n\n// 'SELECT Robots.* FROM Robots WHERE name LIKE '%Art%';\n$builder-&gt;from('Robots')\n        -&gt;where('name LIKE :name:', ['name' =&gt; '%' . $name . '%']);\n\n// 'SELECT r.* FROM Store\\Robots WHERE r.name LIKE '%Art%';\n$builder-&gt;from(['r' =&gt; 'Store\\Robots'])\n        -&gt;where('r.name LIKE :name:', ['name' =&gt; '%' . $name . '%']);\n</code></pre>"},{"location":"db-phql/#bound-parameters","title":"Bound Parameters","text":"<p>Bound parameters in the query builder can be set as the query is constructed or past all at once when executing:</p> <pre><code>&lt;?php\n\n// Passing parameters in the query construction\n$robots = $this-&gt;modelsManager-&gt;createBuilder()\n    -&gt;from('Robots')\n    -&gt;where('name = :name:', ['name' =&gt; $name])\n    -&gt;andWhere('type = :type:', ['type' =&gt; $type])\n    -&gt;getQuery()\n    -&gt;execute();\n\n// Passing parameters in query execution\n$robots = $this-&gt;modelsManager-&gt;createBuilder()\n    -&gt;from('Robots')\n    -&gt;where('name = :name:')\n    -&gt;andWhere('type = :type:')\n    -&gt;getQuery()\n    -&gt;execute(['name' =&gt; $name, 'type' =&gt; $type]);\n</code></pre>"},{"location":"db-phql/#disallow-literals-in-phql","title":"Disallow literals in PHQL","text":"<p>Literals can be disabled in PHQL, this means that directly using strings, numbers and boolean values in PHQL strings will be disallowed. If PHQL statements are created embedding external data on them, this could open the application to potential SQL injections:</p> <pre><code>&lt;?php\n\n$login  = 'voltron';\n$phql   = \"SELECT * FROM Models\\Users WHERE login = '$login'\";\n$result = $manager-&gt;executeQuery($phql);\n</code></pre> <p>If <code>$login</code> is changed to <code>' OR '' = '</code>, the produced PHQL is:</p> <pre><code>SELECT * FROM Models\\Users WHERE login = '' OR '' = ''\n</code></pre> <p>Which is always <code>true</code> no matter what the login stored in the database is.</p> <p>If literals are disallowed strings can be used as part of a PHQL statement, thus an exception will be thrown forcing the developer to use bound parameters. The same query can be written in a secure way like this:</p> <pre><code>&lt;?php\n\n$type   = 'virtual';\n$phql   = 'SELECT Robots.* FROM Robots WHERE Robots.type = :type:';\n$result = $manager-&gt;executeQuery(\n    $phql,\n    [\n        'type' =&gt; $type,\n    ]\n);\n</code></pre> <p>You can disallow literals in the following way:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nModel::setup(\n    [\n        'phqlLiterals' =&gt; false\n    ]\n);\n</code></pre> <p>Bound parameters can be used even if literals are allowed or not. Disallowing them is just another security decision a developer could take in web applications.</p>"},{"location":"db-phql/#escaping-reserved-words","title":"Escaping Reserved Words","text":"<p>PHQL has a few reserved words, if you want to use any of them as attributes or models names, you need to escape those words using the cross-database escaping delimiters <code>[</code> and <code>]</code>:</p> <pre><code>&lt;?php\n\n$phql   = 'SELECT * FROM [Update]';\n$result = $manager-&gt;executeQuery($phql);\n\n$phql   = 'SELECT id, [Like] FROM Posts';\n$result = $manager-&gt;executeQuery($phql);\n</code></pre> <p>The delimiters are dynamically translated to valid delimiters depending on the database system where the application is currently running on.</p>"},{"location":"db-phql/#phql-lifecycle","title":"PHQL Lifecycle","text":"<p>Being a high-level language, PHQL gives developers the ability to personalize and customize different aspects in order to suit their needs. The following is the life cycle of each PHQL statement executed:</p> <ul> <li>The PHQL is parsed and converted into an Intermediate Representation (IR) which is independent of the SQL implemented by database system</li> <li>The IR is converted to valid SQL according to the database system associated to the model</li> <li>PHQL statements are parsed once and cached in memory. Further executions of the same statement result in a slightly faster execution</li> </ul>"},{"location":"db-phql/#using-raw-sql","title":"Using Raw SQL","text":"<p>A database system could offer specific SQL extensions that aren't supported by PHQL, in this case, a raw SQL can be appropriate:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Resultset\\Simple as Resultset;\n\nclass Robots extends Model\n{\n    public static function findByCreateInterval()\n    {\n        // A raw SQL statement\n        $sql = 'SELECT * FROM robots WHERE id &gt; 0';\n\n        // Base model\n        $robot = new Robots();\n\n        // Execute the query\n        return new Resultset(\n            null,\n            $robot,\n            $robot-&gt;getReadConnection()-&gt;query($sql)\n        );\n    }\n}\n</code></pre> <p>If raw SQL queries are common in your application a generic method could be added to your model:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Resultset\\Simple as Resultset;\n\nclass Robots extends Model\n{\n    public static function findByRawSql($conditions, $params = null)\n    {\n        // A raw SQL statement\n        $sql = 'SELECT * FROM robots WHERE $conditions';\n\n        // Base model\n        $robot = new Robots();\n\n        // Execute the query\n        return new Resultset(\n            null,\n            $robot,\n            $robot-&gt;getReadConnection()-&gt;query($sql, $params)\n        );\n    }\n}\n</code></pre> <p>The above <code>findByRawSql</code> could be used as follows:</p> <pre><code>&lt;?php\n\n$robots = Robots::findByRawSql(\n    'id &gt; ?',\n    [\n        10\n    ]\n);\n</code></pre>"},{"location":"db-phql/#troubleshooting","title":"Troubleshooting","text":"<p>Some things to keep in mind when using PHQL:</p> <ul> <li>Classes are case-sensitive, if a class is not defined with the same name as it was created this could lead to an unexpected behavior in operating systems with case-sensitive file systems such as Linux.</li> <li>Correct charset must be defined in the connection to bind parameters with success.</li> <li>Aliased classes aren't replaced by full namespaced classes since this only occurs in PHP code and not inside strings.</li> <li>If column renaming is enabled avoid using column aliases with the same name as columns to be renamed, this may confuse the query resolver.</li> </ul>"},{"location":"debug/","title":"Debugging Applications","text":"<p>PHP offers tools to debug applications with notices, warnings, errors and exceptions. The Exception class offers information such as the file, line, message, numeric code, backtrace etc. on where an error occurred. OOP frameworks like Phalcon mainly use this class to encapsulate this functionality and provide information back to the developer or user.</p> <p>Despite being written in C, Phalcon executes methods in the PHP userland, providing the debug capability that any other application or framework written in PHP has.</p>"},{"location":"debug/#catching-exceptions","title":"Catching Exceptions","text":"<p>Throughout the tutorials and examples of the Phalcon documentation, there is a common element that is catching exceptions. This is a try/catch block:</p> <pre><code>&lt;?php\n\ntry {\n\n    // ... Some Phalcon/PHP code\n\n} catch (\\Exception $e) {\n\n}\n</code></pre> <p>Any exception thrown within the block is captured in the variable <code>$e</code>. A Phalcon\\Exception extends the PHP Exception class and is used to understand whether the exception came from Phalcon or PHP itself.</p> <p>All exceptions generated by PHP are based on the Exception class, and have at least the following elements:</p> <pre><code>&lt;?php\n\nclass Exception\n{\n\n    /* Properties */\n    protected string $message;\n    protected int $code;\n    protected string $file;\n    protected int $line;\n\n    /* Methods */\n    public __construct ([ string $message = '' [, int $code = 0 [, Exception $previous = NULL ]]])\n    final public string getMessage ( void )\n    final public Exception getPrevious ( void )\n    final public mixed getCode ( void )\n    final public string getFile ( void )\n    final public int getLine ( void )\n    final public array getTrace ( void )\n    final public string getTraceAsString ( void )\n    public string __toString ( void )\n    final private void __clone ( void )\n}\n</code></pre> <p>Retrieving information from Phalcon\\Exception is the same as PHP's Exception class:</p> <pre><code>&lt;?php\n\ntry {\n\n    // ... App code ...\n\n} catch (\\Exception $e) {\n    echo get_class($e), ': ', $e-&gt;getMessage(), '\\n';\n    echo ' File=', $e-&gt;getFile(), '\\n';\n    echo ' Line=', $e-&gt;getLine(), '\\n';\n    echo $e-&gt;getTraceAsString();\n}\n</code></pre> <p>It's therefore easy to find which file and line of the application's code generated the exception, as well as the components involved in generating the exception:</p> <pre><code>PDOException: SQLSTATE[28000] [1045] Access denied for user 'root'@'localhost'\n    (using password: NO)\n File=/Applications/MAMP/htdocs/invo/public/index.php\n Line=74\n#0 [internal function]: PDO-&gt;__construct('mysql:host=loca...', 'root', '', Array)\n#1 [internal function]: Phalcon\\Db\\Adapter\\Pdo-&gt;connect(Array)\n#2 /Applications/MAMP/htdocs/invo/public/index.php(74):\n    Phalcon\\Db\\Adapter\\Pdo-&gt;__construct(Array)\n#3 [internal function]: {closure}()\n#4 [internal function]: call_user_func_array(Object(Closure), Array)\n#5 [internal function]: Phalcon\\Di-&gt;_factory(Object(Closure), Array)\n#6 [internal function]: Phalcon\\Di-&gt;get('db', Array)\n#7 [internal function]: Phalcon\\Di-&gt;getShared('db')\n#8 [internal function]: Phalcon\\Mvc\\Model-&gt;getConnection()\n#9 [internal function]: Phalcon\\Mvc\\Model::_getOrCreateResultset('Users', Array, true)\n#10 /Applications/MAMP/htdocs/invo/app/controllers/SessionController.php(83):\n    Phalcon\\Mvc\\Model::findFirst('email='demo@pha...')\n#11 [internal function]: SessionController-&gt;startAction()\n#12 [internal function]: call_user_func_array(Array, Array)\n#13 [internal function]: Phalcon\\Mvc\\Dispatcher-&gt;dispatch()\n#14 /Applications/MAMP/htdocs/invo/public/index.php(114): Phalcon\\Mvc\\Application-&gt;handle()\n#15 {main}\n</code></pre> <p>As you can see from the above output the Phalcon's classes and methods are displayed just like any other component, and even showing the parameters that were invoked in every call. The method Exception::getTrace provides additional information if needed.</p>"},{"location":"debug/#debug-component","title":"Debug component","text":"<p>Phalcon provides a debug component that allows the developer to easily find errors produced in an application created with the framework.</p> <p>The following screencast explains how it works:</p> <p>To enable it, add the following to your bootstrap:</p> <pre><code>&lt;?php\n\n$debug = new \\Phalcon\\Debug();\n$debug-&gt;listen();\n</code></pre> <p>Any Try/Catch blocks must be removed or disabled to make this component work properly.</p>"},{"location":"debug/#reflection-and-introspection","title":"Reflection and Introspection","text":"<p>Any instance of a Phalcon class offers exactly the same behavior than a PHP normal one. It's possible to use the Reflection API or simply print any object to show how is its internal state:</p> <pre><code>&lt;?php\n\n$router = new Phalcon\\Mvc\\Router();\nprint_r($router);\n</code></pre> <p>It's easy to know the internal state of any object. The above example prints the following:</p> <pre><code>Phalcon\\Mvc\\Router Object\n(\n    [_dependencyInjector:protected] =&gt;\n    [_module:protected] =&gt;\n    [_controller:protected] =&gt;\n    [_action:protected] =&gt;\n    [_params:protected] =&gt; Array\n        (\n        )\n    [_routes:protected] =&gt; Array\n        (\n            [0] =&gt; Phalcon\\Mvc\\Router\\Route Object\n                (\n                    [_pattern:protected] =&gt; #^/([a-zA-Z0-9\\_]+)[/]{0,1}$#\n                    [_compiledPattern:protected] =&gt; #^/([a-zA-Z0-9\\_]+)[/]{0,1}$#\n                    [_paths:protected] =&gt; Array\n                        (\n                            [controller] =&gt; 1\n                        )\n\n                    [_methods:protected] =&gt;\n                    [_id:protected] =&gt; 0\n                    [_name:protected] =&gt;\n                )\n\n            [1] =&gt; Phalcon\\Mvc\\Router\\Route Object\n                (\n                    [_pattern:protected] =&gt; #^/([a-zA-Z0-9\\_]+)/([a-zA-Z0-9\\_]+)(/.*)*$#\n                    [_compiledPattern:protected] =&gt; #^/([a-zA-Z0-9\\_]+)/([a-zA-Z0-9\\_]+)(/.*)*$#\n                    [_paths:protected] =&gt; Array\n                        (\n                            [controller] =&gt; 1\n                            [action] =&gt; 2\n                            [params] =&gt; 3\n                        )\n                    [_methods:protected] =&gt;\n                    [_id:protected] =&gt; 1\n                    [_name:protected] =&gt;\n                )\n        )\n    [_matchedRoute:protected] =&gt;\n    [_matches:protected] =&gt;\n    [_wasMatched:protected] =&gt;\n    [_defaultModule:protected] =&gt;\n    [_defaultController:protected] =&gt;\n    [_defaultAction:protected] =&gt;\n    [_defaultParams:protected] =&gt; Array\n        (\n        )\n)\n</code></pre> <p></p>"},{"location":"debug/#using-xdebug","title":"Using XDebug","text":"<p>XDebug is an amazing tool that complements the debugging of PHP applications. It is also a C extension for PHP, and you can use it together with Phalcon without additional configuration or side effects.</p> <p>The following screencast shows a Xdebug session with Phalcon:</p> <p>Once you have xdebug installed, you can use its API to get a more detailed information about exceptions and messages.</p> <p>NOTE</p> <p>We highly recommend using the latest version of XDebug for a better compatibility with Phalcon </p> <p>The following example implements xdebug_print_function_stack to stop the execution and generate a backtrace:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass SignupController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function registerAction()\n    {\n        // Request variables from HTML form\n        $name  = $this-&gt;request-&gt;getPost('name', 'string');\n        $email = $this-&gt;request-&gt;getPost('email', 'email');\n\n        // Stop execution and show a backtrace\n        return xdebug_print_function_stack('stop here!');\n\n        $user        = new Users();\n        $user-&gt;name  = $name;\n        $user-&gt;email = $email;\n\n        // Store and check for errors\n        $user-&gt;save();\n    }\n}\n</code></pre> <p>In this instance, Xdebug will also show us the variables in the local scope, and a backtrace as well:</p> <pre><code>Xdebug: stop here! in /Applications/MAMP/htdocs/tutorial/app/controllers/SignupController.php\n    on line 19\n\nCall Stack:\n    0.0383     654600   1. {main}() /Applications/MAMP/htdocs/tutorial/public/index.php:0\n    0.0392     663864   2. Phalcon\\Mvc\\Application-&gt;handle()\n        /Applications/MAMP/htdocs/tutorial/public/index.php:37\n    0.0418     738848   3. SignupController-&gt;registerAction()\n        /Applications/MAMP/htdocs/tutorial/public/index.php:0\n    0.0419     740144   4. xdebug_print_function_stack()\n        /Applications/MAMP/htdocs/tutorial/app/controllers/SignupController.php:19\n</code></pre> <p>Xdebug provides several ways to get debug and trace information regarding the execution of your application using Phalcon. You can check the XDebug documentation for more information.</p>"},{"location":"devtools-installation/","title":"Phalcon Developer Tools on Linux","text":"<p>These steps will guide you through the process of installing Phalcon Developer Tools for Linux.</p>"},{"location":"devtools-installation/#prerequisites","title":"Prerequisites","text":"<p>The Phalcon PHP extension is required to run Phalcon Tools. If you haven't installed it yet, please see the Installation section for instructions.</p>"},{"location":"devtools-installation/#installation","title":"Installation","text":"<p>You can download a cross platform package containing the developer tools from from GitHub.</p>"},{"location":"devtools-installation/#linux","title":"Linux","text":"<p>Open a terminal and type the command below:</p> <pre><code>git clone git://github.com/phalcon/phalcon-devtools.git\n</code></pre> <p></p> <p>Then enter the folder where the tools were cloned and execute <code>. ./phalcon.sh</code>, (don't forget the dot at beginning of the command):</p> <pre><code>cd phalcon-devtools/\n. ./phalcon.sh\n</code></pre> <p></p> <p>Create a symbolic link to the phalcon.php script:</p> <pre><code>ln -s ~/phalcon-devtools/phalcon.php /usr/bin/phalcon\nchmod ugo+x /usr/bin/phalcon\n</code></pre>"},{"location":"devtools-installation/#macos","title":"macOS","text":"<p>Open a terminal and type the command below:</p> <pre><code>git clone git://github.com/phalcon/phalcon-devtools.git\n</code></pre> <p></p> <p>Then enter the folder where the tools were cloned and execute <code>. ./phalcon.sh</code>, (don't forget the dot at beginning of the command):</p> <pre><code>cd phalcon-devtools/\n. ./phalcon.sh\n</code></pre> <p></p> <p>Next, we'll create a symbolic link to the <code>phalcon.php</code> script. On El Capitan and newer versions of macOS:</p> <pre><code>ln -s ~/phalcon-devtools/phalcon.php /usr/local/bin/phalcon\nchmod ugo+x /usr/local/bin/phalcon\n</code></pre> <p>if you are running an older version:</p> <pre><code>ln -s ~/phalcon-devtools/phalcon.php /usr/bin/phalcon\nchmod ugo+x /usr/bin/phalcon\n</code></pre>"},{"location":"devtools-installation/#windows","title":"Windows","text":"<p>On the Windows platform, you need to configure the system <code>PATH</code> to include Phalcon tools as well as the PHP executable. If you download the Phalcon tools as a zip archive, extract it on any path of your local drive i.e. <code>c:\\phalcon-tools</code>. You will need this path in the steps below. Edit the file <code>phalcon.bat</code> by right clicking on the file and selecting <code>Edit</code>:</p> <p></p> <p>Change the path to the one you installed the Phalcon tools (<code>set PTOOLSPATH=C:\\phalcon-tools\\</code>):</p> <p></p> <p>Save the changes.</p>"},{"location":"devtools-installation/#adding-php-and-tools-to-your-system-path","title":"Adding PHP and Tools to your system PATH","text":"<p>Because the scripts are written in PHP, you need to install it on your machine. Depending on your PHP installation, the executable can be located in various places. Search for the file <code>php.exe</code> and copy its path. For instance, using WAMPP you will locate the PHP executable in a location like this: <code>C:\\wamp\\bin\\php\\&lt;php version&gt;\\php.exe</code> (where <code>&lt;php version&gt;</code> is the version of PHP that WAMPP comes bundled with).</p> <p>From the Windows start menu, right mouse click on the <code>Computer</code> icon and select <code>Properties</code>:</p> <p></p> <p>Click the <code>Advanced</code> tab and then the button <code>Environment Variables</code>:</p> <p></p> <p>At the bottom, look for the section <code>System variables</code> and edit the variable <code>Path</code>:</p> <p></p> <p>Be very careful on this step! You need to append at the end of the long string the path where your <code>php.exe</code> was located and the path where Phalcon tools are installed. Use the <code>;</code> character to separate the different paths in the variable:</p> <p></p> <p>Accept the changes made by clicking <code>OK</code> and close the dialogs opened. From the start menu click on the option <code>Run</code>. If you can't find this option, press <code>Windows Key</code> + <code>R</code>.</p> <p></p> <p>Type <code>cmd</code> and press enter to open the windows command line utility:</p> <p></p> <p>Type the commands <code>php -v</code> and <code>phalcon</code> and you will see something like this:</p> <p></p> <p>Congratulations you now have Phalcon tools installed!</p>"},{"location":"devtools-usage/","title":"Phalcon Developer Tools","text":"<p>These tools are a collection of useful scripts to generate skeleton code. Core components of your application can be generated with a simple command, allowing you to easily develop applications using Phalcon.</p> <p>NOTE</p> <p>If you prefer to use the web version instead of the console, this blog post offers more information. </p>"},{"location":"devtools-usage/#download","title":"Download","text":"<p>You can download or clone a cross platform package containing the developer tools from GitHub.</p>"},{"location":"devtools-usage/#installation","title":"Installation","text":"<p>These are detailed instructions on how to install the developer tools on different platforms:</p> <p>Linux : MacOS : Windows</p>"},{"location":"devtools-usage/#available-commands","title":"Available Commands","text":"<p>You can get a list of available commands in Phalcon tools by typing: :code:<code>phalcon commands</code></p> <pre><code>$ phalcon commands\n\nPhalcon DevTools (3.0.0)\n\nAvailable commands:\n  commands         (alias of: list, enumerate)\n  controller       (alias of: create-controller)\n  module           (alias of: create-module)\n  model            (alias of: create-model)\n  all-models       (alias of: create-all-models)\n  project          (alias of: create-project)\n  scaffold         (alias of: create-scaffold)\n  migration        (alias of: create-migration)\n  webtools         (alias of: create-webtools)\n</code></pre>"},{"location":"devtools-usage/#generating-a-project-skeleton","title":"Generating a Project Skeleton","text":"<p>You can use Phalcon tools to generate pre-defined project skeletons for your applications with Phalcon framework. By default the project skeleton generator will use mod_rewrite for Apache. Type the following command on your web server document root:</p> <pre><code>$ pwd\n\n/Applications/MAMP/htdocs\n\n$ phalcon create-project store\n</code></pre> <p>The above recommended project structure was generated:</p> <p></p> <p>You could add the parameter <code>--help</code> to get help on the usage of a certain script:</p> <pre><code>$ phalcon project --help\n\nPhalcon DevTools (3.0.0)\n\nHelp:\n  Creates a project\n\nUsage:\n  project [name] [type] [directory] [enable-webtools]\n\nArguments:\n  help    Shows this help text\n\nExample\n  phalcon project store simple\n\nOptions:\n --name               Name of the new project\n --enable-webtools    Determines if webtools should be enabled [optional]\n --directory=s        Base path on which project will be created [optional]\n --type=s             Type of the application to be generated (cli, micro, simple, modules)\n --template-path=s    Specify a template path [optional]\n --use-config-ini     Use a ini file as configuration file [optional]\n --trace              Shows the trace of the framework in case of exception. [optional]\n --help               Shows this help\n</code></pre> <p>Accessing the project from the web server will show you:</p> <p></p>"},{"location":"devtools-usage/#generating-controllers","title":"Generating Controllers","text":"<p>The command <code>create-controller</code> generates controller skeleton structures. It's important to invoke this command inside a directory that already has a Phalcon project.</p> <pre><code>$ phalcon create-controller --name test\n</code></pre> <p>The following code is generated by the script:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass TestController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n}\n</code></pre>"},{"location":"devtools-usage/#preparing-database-settings","title":"Preparing Database Settings","text":"<p>When a project is generated using developer tools. A configuration file can be found in <code>app/config/config.php</code>. To generate models or scaffold, you will need to change the settings used to connect to your database.</p> <p>Change the database section in your config.php file:</p> <pre><code>&lt;?php\ndefined('BASE_PATH') || define('BASE_PATH', getenv('BASE_PATH') ?: realpath(dirname(__FILE__) . '/../..'));\ndefined('APP_PATH') || define('APP_PATH', BASE_PATH . '/app');\n\nreturn new \\Phalcon\\Config([\n    'database' =&gt; [\n        'adapter'     =&gt; 'Mysql',\n        'host'        =&gt; 'localhost',\n        'username'    =&gt; 'root',\n        'password'    =&gt; 'secret',\n        'dbname'      =&gt; 'test',\n        'charset'     =&gt; 'utf8',\n    ],\n    'application' =&gt; [\n        'appDir'         =&gt; APP_PATH . '/',\n        'controllersDir' =&gt; APP_PATH . '/controllers/',\n        'modelsDir'      =&gt; APP_PATH . '/models/',\n        'migrationsDir'  =&gt; APP_PATH . '/migrations/',\n        'viewsDir'       =&gt; APP_PATH . '/views/',\n        'pluginsDir'     =&gt; APP_PATH . '/plugins/',\n        'libraryDir'     =&gt; APP_PATH . '/library/',\n        'cacheDir'       =&gt; BASE_PATH . '/cache/',\n\n        // This allows the baseUri to be understand project paths that are not in the root directory\n        // of the webpspace.  This will break if the public/index.php entry point is moved or\n        // possibly if the web server rewrite rules are changed. This can also be set to a static path.\n        'baseUri'        =&gt; preg_replace('/public([\\/\\\\])index.php$/', '', $_SERVER[\"PHP_SELF\"]),\n    ]\n]);\n</code></pre>"},{"location":"devtools-usage/#generating-models","title":"Generating Models","text":"<p>There are several ways to create models. You can create all models from the default database connection or some selectively. Models can have public attributes for the field representations or setters/getters can be used.</p> <pre><code>Options:\n --name=s             Table name\n --schema=s           Name of the schema. [optional]\n --namespace=s        Model's namespace [optional]\n --get-set            Attributes will be protected and have setters/getters. [optional]\n --extends=s          Model extends the class name supplied [optional]\n --excludefields=l    Excludes fields defined in a comma separated list [optional]\n --doc                Helps to improve code completion on IDEs [optional]\n --directory=s        Base path on which project will be created [optional]\n --force              Rewrite the model. [optional]\n --trace              Shows the trace of the framework in case of exception. [optional]\n --mapcolumn          Get some code for map columns. [optional]\n --abstract           Abstract Model [optional]\n</code></pre> <p>The simplest way to generate a model is:</p> <pre><code>$ phalcon model products\n</code></pre> <pre><code>$ phalcon model --name tablename\n</code></pre> <p>All table fields are declared public for direct access.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Products extends Model\n{\n    /**\n     * @var integer\n     */\n    public $id;\n\n    /**\n     * @var integer\n     */\n    public $typesId;\n\n    /**\n     * @var string\n     */\n    public $name;\n\n    /**\n     * @var string\n     */\n    public $price;\n\n    /**\n     * @var integer\n     */\n    public $quantity;\n\n    /**\n     * @var string\n     */\n    public $status;\n}\n</code></pre> <p>By adding the <code>--get-set</code> you can generate the fields with protected variables and public setter/getter methods. Those methods can help in business logic implementation within the setter/getter methods.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Products extends Model\n{\n    /**\n     * @var integer\n     */\n    protected $id;\n\n    /**\n     * @var integer\n     */\n    protected $typesId;\n\n    /**\n     * @var string\n     */\n    protected $name;\n\n    /**\n     * @var string\n     */\n    protected $price;\n\n    /**\n     * @var integer\n     */\n    protected $quantity;\n\n    /**\n     * @var string\n     */\n    protected $status;\n\n\n    /**\n     * Method to set the value of field id\n     *\n     * @param integer $id\n     */\n    public function setId($id)\n    {\n        $this-&gt;id = $id;\n    }\n\n    /**\n     * Method to set the value of field typesId\n     *\n     * @param integer $typesId\n     */\n    public function setTypesId($typesId)\n    {\n        $this-&gt;typesId = $typesId;\n    }\n\n    // ...\n\n    /**\n     * Returns the value of field status\n     *\n     * @return string\n     */\n    public function getStatus()\n    {\n        return $this-&gt;status;\n    }\n}\n</code></pre> <p>A nice feature of the model generator is that it keeps changes made by the developer between code generations. This allows the addition or removal of fields and properties, without worrying about losing changes made to the model itself. The following screencast shows you how it works:</p>"},{"location":"devtools-usage/#scaffold-a-crud","title":"Scaffold a CRUD","text":"<p>Scaffolding is a quick way to generate some of the major pieces of an application. If you want to create the models, views, and controllers for a new resource in a single operation, scaffolding is the tool for the job.</p> <p>Once the code is generated, it will have to be customized to meet your needs. Many developers avoid scaffolding entirely, opting to write all or most of their source code from scratch. The generated code can serve as a guide to better understand of how the framework works or develop prototypes. The code below shows a scaffold based on the table <code>products</code>:</p> <pre><code>$ phalcon scaffold --table-name products\n</code></pre> <p>The scaffold generator will build several files in your application, along with some folders. Here's a quick overview of what will be generated:</p> File Purpose <code>app/controllers/ProductsController.php</code> The Products controller <code>app/models/Products.php</code> The Products model <code>app/views/layout/products.phtml</code> Controller layout for Products <code>app/views/products/new.phtml</code> View for the action <code>new</code> <code>app/views/products/edit.phtml</code> View for the action <code>edit</code> <code>app/views/products/search.phtml</code> View for the action <code>search</code> <p>When browsing the recently generated controller, you will see a search form and a link to create a new Product:</p> <p></p> <p>The <code>create page</code> allows you to create products applying validations on the Products model. Phalcon will automatically validate not null fields producing warnings if any of them is required.</p> <p></p> <p>After performing a search, a pager component is available to show paged results. Use the \"Edit\" or \"Delete\" links in front of each result to perform such actions.</p> <p></p>"},{"location":"devtools-usage/#web-interface-to-tools","title":"Web Interface to Tools","text":"<p>Also, if you prefer, it's possible to use Phalcon Developer Tools from a web interface. Check out the following screencast to figure out how it works:</p>"},{"location":"devtools-usage/#integrating-tools-with-phpstorm-ide","title":"Integrating Tools with PhpStorm IDE","text":"<p>The screencast below shows how to integrate developer tools with the PhpStorm IDE. The configuration steps could be easily adapted to other IDEs for PHP.</p>"},{"location":"devtools-usage/#conclusion","title":"Conclusion","text":"<p>Phalcon Developer Tools provides an easy way to generate code for your application, reducing development time and potential coding errors.</p>"},{"location":"di/","title":"Dependency Injection / Service Location","text":""},{"location":"di/#di-explained","title":"DI explained","text":"<p>The following example is a bit long, but it attempts to explain why Phalcon uses service location and dependency injection. First, let's assume we are developing a component called <code>SomeComponent</code>. This performs some task. Our component has a dependency, that is a connection to a database.</p> <p>In this first example, the connection is created inside the component. Although this is a perfectly valid implementation, it is impartical, due to the fact that we cannot change the connection parameters or the type of the database system because the component only works as created.</p> <pre><code>&lt;?php\n\nclass SomeComponent\n{\n    /**\n     * The instantiation of the connection is hardcoded inside\n     * the component, therefore it's difficult replace it externally\n     * or change its behavior\n     */\n    public function someDbTask()\n    {\n        $connection = new Connection(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'invo',\n            ]\n        );\n\n        // ...\n    }\n}\n\n$some = new SomeComponent();\n\n$some-&gt;someDbTask();\n</code></pre> <p>To solve this shortcoming, we have created a setter that injects the dependency externally before using it. This is also a valid implementation but has its shortcomings:</p> <pre><code>&lt;?php\n\nclass SomeComponent\n{\n    private $connection;\n\n    /**\n     * Sets the connection externally\n     *\n     * @param Connection $connection\n     */\n    public function setConnection(Connection $connection)\n    {\n        $this-&gt;connection = $connection;\n    }\n\n    public function someDbTask()\n    {\n        $connection = $this-&gt;connection;\n\n        // ...\n    }\n}\n\n$some = new SomeComponent();\n\n// Create the connection\n$connection = new Connection(\n    [\n        'host'     =&gt; 'localhost',\n        'username' =&gt; 'root',\n        'password' =&gt; 'secret',\n        'dbname'   =&gt; 'invo',\n    ]\n);\n\n// Inject the connection in the component\n$some-&gt;setConnection($connection);\n\n$some-&gt;someDbTask();\n</code></pre> <p>Now consider that we use this component in different parts of the application and then we will need to create the connection several times before passing it to the component. Using a global registry pattern, we can store the connection object there and reuse it whenever we need it.</p> <pre><code>&lt;?php\n\nclass Registry\n{\n    /**\n     * Returns the connection\n     */\n    public static function getConnection()\n    {\n        return new Connection(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'invo',\n            ]\n        );\n    }\n}\n\nclass SomeComponent\n{\n    protected $connection;\n\n    /**\n     * Sets the connection externally\n     *\n     * @param Connection $connection\n     */\n    public function setConnection(Connection $connection)\n    {\n        $this-&gt;connection = $connection;\n    }\n\n    public function someDbTask()\n    {\n        $connection = $this-&gt;connection;\n\n        // ...\n    }\n}\n\n$some = new SomeComponent();\n\n// Pass the connection defined in the registry\n$some-&gt;setConnection(Registry::getConnection());\n\n$some-&gt;someDbTask();\n</code></pre> <p>Now, let's imagine that we must implement two methods in the component, the first always needs to create a new connection and the second always needs to use a shared connection:</p> <pre><code>&lt;?php\n\nclass Registry\n{\n    protected static $connection;\n\n    /**\n     * Creates a connection\n     *\n     * @return Connection\n     */\n    protected static function createConnection(): Connection\n    {\n        return new Connection(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'invo',\n            ]\n        );\n    }\n\n    /**\n     * Creates a connection only once and returns it\n     *\n     * @return Connection\n     */\n    public static function getSharedConnection(): Connection\n    {\n        if (self::$connection === null) {\n            self::$connection = self::createConnection();\n        }\n\n        return self::$connection;\n    }\n\n    /**\n     * Always returns a new connection\n     *\n     * @return Connection\n     */\n    public static function getNewConnection(): Connection\n    {\n        return self::createConnection();\n    }\n}\n\nclass SomeComponent\n{\n    protected $connection;\n\n    /**\n     * Sets the connection externally\n     *\n     * @param Connection $connection\n     */\n    public function setConnection(Connection $connection)\n    {\n        $this-&gt;connection = $connection;\n    }\n\n    /**\n     * This method always needs the shared connection\n     */\n    public function someDbTask()\n    {\n        $connection = $this-&gt;connection;\n\n        // ...\n    }\n\n    /**\n     * This method always needs a new connection\n     *\n     * @param Connection $connection\n     */\n    public function someOtherDbTask(Connection $connection)\n    {\n\n    }\n}\n\n$some = new SomeComponent();\n\n// This injects the shared connection\n$some-&gt;setConnection(\n    Registry::getSharedConnection()\n);\n\n$some-&gt;someDbTask();\n\n// Here, we always pass a new connection as parameter\n$some-&gt;someOtherDbTask(\n    Registry::getNewConnection()\n);\n</code></pre> <p>So far we have seen how dependency injection solved our problems. Passing dependencies as arguments instead of creating them internally in the code makes our application more maintainable and decoupled. However, in the long-term, this form of dependency injection has some disadvantages.</p> <p>For instance, if the component has many dependencies, we will need to create multiple setter arguments to pass the dependencies or create a constructor that pass them with many arguments, additionally creating dependencies before using the component, every time, makes our code not as maintainable as we would like:</p> <pre><code>&lt;?php\n\n// Create the dependencies or retrieve them from the registry\n$connection = new Connection();\n$session    = new Session();\n$fileSystem = new FileSystem();\n$filter     = new Filter();\n$selector   = new Selector();\n\n// Pass them as constructor parameters\n$some = new SomeComponent($connection, $session, $fileSystem, $filter, $selector);\n\n// ... Or using setters\n$some-&gt;setConnection($connection);\n$some-&gt;setSession($session);\n$some-&gt;setFileSystem($fileSystem);\n$some-&gt;setFilter($filter);\n$some-&gt;setSelector($selector);\n</code></pre> <p>Think if we had to create this object in many parts of our application. In the future, if we do not require any of the dependencies, we need to go through the entire code base to remove the parameter in any constructor or setter where we injected the code. To solve this, we return again to a global registry to create the component. However, it adds a new layer of abstraction before creating the object:</p> <pre><code>&lt;?php\n\nclass SomeComponent\n{\n    // ...\n\n    /**\n     * Define a factory method to create SomeComponent instances injecting its dependencies\n     */\n    public static function factory()\n    {\n        $connection = new Connection();\n        $session    = new Session();\n        $fileSystem = new FileSystem();\n        $filter     = new Filter();\n        $selector   = new Selector();\n\n        return new self($connection, $session, $fileSystem, $filter, $selector);\n    }\n}\n</code></pre> <p>Now we find ourselves back where we started, we are again building the dependencies inside of the component! We must find a solution that keeps us from repeatedly falling into bad practices.</p> <p>A practical and elegant way to solve these problems is using a container for dependencies. The containers act as the global registry that we saw earlier. Using the container for dependencies as a bridge to obtain the dependencies allows us to reduce the complexity of our component:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\DiInterface;\n\nclass SomeComponent\n{\n    protected $di;\n\n    public function __construct(DiInterface $di)\n    {\n        $this-&gt;di = $di;\n    }\n\n    public function someDbTask()\n    {\n        // Get the connection service\n        // Always returns a new connection\n        $connection = $this-&gt;di-&gt;get('db');\n    }\n\n    public function someOtherDbTask()\n    {\n        // Get a shared connection service,\n        // this will return the same connection every time\n        $connection = $this-&gt;di-&gt;getShared('db');\n\n        // This method also requires an input filtering service\n        $filter = $this-&gt;di-&gt;get('filter');\n    }\n}\n\n$di = new Di();\n\n// Register a 'db' service in the container\n$di-&gt;set(\n    'db',\n    function () {\n        return new Connection(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'invo',\n            ]\n        );\n    }\n);\n\n// Register a 'filter' service in the container\n$di-&gt;set(\n    'filter',\n    function () {\n        return new Filter();\n    }\n);\n\n// Register a 'session' service in the container\n$di-&gt;set(\n    'session',\n    function () {\n        return new Session();\n    }\n);\n\n// Pass the service container as unique parameter\n$some = new SomeComponent($di);\n\n$some-&gt;someDbTask();\n</code></pre> <p>The component can now simply access the service it requires when it needs it, if it does not require a service it is not even initialized, saving resources. The component is now highly decoupled. For example, we can replace the manner in which connections are created, their behavior or any other aspect of them and that would not affect the component.</p> <p>Phalcon\\Di is a component implementing Dependency Injection and Location of services and it's itself a container for them.</p> <p>Since Phalcon is highly decoupled, Phalcon\\Di is essential to integrate the different components of the framework. The developer can also use this component to inject dependencies and manage global instances of the different classes used in the application.</p> <p>Basically, this component implements the Inversion of Control pattern. Applying this, the objects do not receive their dependencies using setters or constructors, but requesting a service dependency injector. This reduces the overall complexity since there is only one way to get the required dependencies within a component.</p> <p>Additionally, this pattern increases testability in the code, thus making it less prone to errors.</p>"},{"location":"di/#registering-services-in-the-container","title":"Registering services in the Container","text":"<p>The framework itself or the developer can register services. When a component A requires component B (or an instance of its class) to operate, it can request component B from the container, rather than creating a new instance component B.</p> <p>This way of working gives us many advantages:</p> <ul> <li>We can easily replace a component with one created by ourselves or a third party.</li> <li>We have full control of the object initialization, allowing us to set these objects, as needed before delivering them to components.</li> <li>We can get global instances of components in a structured and unified way.</li> </ul> <p>Services can be registered using several types of definitions:</p>"},{"location":"di/#simple-registration","title":"Simple Registration","text":"<p>As seen before, there are several ways to register services. These we call simple:</p>"},{"location":"di/#string","title":"String","text":"<p>This type expects the name of a valid class, returning an object of the specified class, if the class is not loaded it will be instantiated using an auto-loader. This type of definition does not allow to specify arguments for the class constructor or parameters:</p> <pre><code>&lt;?php\n\n// Return new Phalcon\\Http\\Request();\n$di-&gt;set(\n    'request',\n    'Phalcon\\Http\\Request'\n);\n</code></pre>"},{"location":"di/#class-instances","title":"Class instances","text":"<p>This type expects an object. Due to the fact that object does not need to be resolved as it is already an object, one could say that it is not really a dependency injection, however it is useful if you want to force the returned dependency to always be the same object/value:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n// Return new Phalcon\\Http\\Request();\n$di-&gt;set(\n    'request',\n    new Request()\n);\n</code></pre>"},{"location":"di/#closuresanonymous-functions","title":"Closures/Anonymous functions","text":"<p>This method offers greater freedom to build the dependency as desired, however, it is difficult to change some of the parameters externally without having to completely change the definition of dependency:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as PdoMysql;\n\n$di-&gt;set(\n    'db',\n    function () {\n        return new PdoMysql(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'blog',\n            ]\n        );\n    }\n);\n</code></pre> <p>Some of the limitations can be overcome by passing additional variables to the closure's environment:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as PdoMysql;\n\n$config = new Config(\n    [\n        'host'     =&gt; '127.0.0.1',\n        'username' =&gt; 'user',\n        'password' =&gt; 'pass',\n        'dbname'   =&gt; 'my_database',\n    ]\n);\n\n// Using the $config variable in the current scope\n$di-&gt;set(\n    'db',\n    function () use ($config) {\n        return new PdoMysql(\n            [\n                'host'     =&gt; $config-&gt;host,\n                'username' =&gt; $config-&gt;username,\n                'password' =&gt; $config-&gt;password,\n                'dbname'   =&gt; $config-&gt;name,\n            ]\n        );\n    }\n);\n</code></pre> <p>You can also access other DI services using the <code>get()</code> method:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as PdoMysql;\n\n$di-&gt;set(\n    'config',\n    function () {\n        return new Config(\n            [\n                'host'     =&gt; '127.0.0.1',\n                'username' =&gt; 'user',\n                'password' =&gt; 'pass',\n                'dbname'   =&gt; 'my_database',\n            ]\n        );\n    }\n);\n\n// Using the 'config' service from the DI\n$di-&gt;set(\n    'db',\n    function () {\n        $config = $this-&gt;get('config');\n\n        return new PdoMysql(\n            [\n                'host'     =&gt; $config-&gt;host,\n                'username' =&gt; $config-&gt;username,\n                'password' =&gt; $config-&gt;password,\n                'dbname'   =&gt; $config-&gt;name,\n            ]\n        );\n    }\n);\n</code></pre>"},{"location":"di/#complex-registration","title":"Complex Registration","text":"<p>If it is required to change the definition of a service without instantiating/resolving the service, then, we need to define the services using the array syntax. Define a service using an array definition can be a little more verbose:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger\\Adapter\\File as LoggerFile;\n\n// Register a service 'logger' with a class name and its parameters\n$di-&gt;set(\n    'logger',\n    [\n        'className' =&gt; 'Phalcon\\Logger\\Adapter\\File',\n        'arguments' =&gt; [\n            [\n                'type'  =&gt; 'parameter',\n                'value' =&gt; '../apps/logs/error.log',\n            ]\n        ]\n    ]\n);\n\n// Using an anonymous function\n$di-&gt;set(\n    'logger',\n    function () {\n        return new LoggerFile('../apps/logs/error.log');\n    }\n);\n</code></pre> <p>Both service registrations above produce the same result. The array definition however, allows for alteration of the service parameters if needed:</p> <pre><code>&lt;?php\n\n// Change the service class name\n$di\n    -&gt;getService('logger')\n    -&gt;setClassName('MyCustomLogger');\n\n// Change the first parameter without instantiating the logger\n$di\n    -&gt;getService('logger')\n    -&gt;setParameter(\n        0,\n        [\n            'type'  =&gt; 'parameter',\n            'value' =&gt; '../apps/logs/error.log',\n        ]\n    );\n</code></pre> <p>In addition by using the array syntax you can use three types of dependency injection:</p>"},{"location":"di/#constructor-injection","title":"Constructor Injection","text":"<p>This injection type passes the dependencies/arguments to the class constructor. Let's pretend we have the following component:</p> <pre><code>&lt;?php\n\nnamespace SomeApp;\n\nuse Phalcon\\Http\\Response;\n\nclass SomeComponent\n{\n    /**\n     * @var Response\n     */\n    protected $response;\n\n    protected $someFlag;\n\n\n\n    public function __construct(Response $response, $someFlag)\n    {\n        $this-&gt;response = $response;\n        $this-&gt;someFlag = $someFlag;\n    }\n}\n</code></pre> <p>The service can be registered this way:</p> <pre><code>&lt;?php\n\n$di-&gt;set(\n    'response',\n    [\n        'className' =&gt; 'Phalcon\\Http\\Response'\n    ]\n);\n\n$di-&gt;set(\n    'someComponent',\n    [\n        'className' =&gt; 'SomeApp\\SomeComponent',\n        'arguments' =&gt; [\n            [\n                'type' =&gt; 'service',\n                'name' =&gt; 'response',\n            ],\n            [\n                'type'  =&gt; 'parameter',\n                'value' =&gt; true,\n            ],\n        ]\n    ]\n);\n</code></pre> <p>The service 'response' (Phalcon\\Http\\Response) is resolved to be passed as the first argument of the constructor, while the second is a boolean value (true) that is passed as it is.</p>"},{"location":"di/#setter-injection","title":"Setter Injection","text":"<p>Classes may have setters to inject optional dependencies, our previous class can be changed to accept the dependencies with setters:</p> <pre><code>&lt;?php\n\nnamespace SomeApp;\n\nuse Phalcon\\Http\\Response;\n\nclass SomeComponent\n{\n    /**\n     * @var Response\n     */\n    protected $response;\n\n    protected $someFlag;\n\n\n\n    public function setResponse(Response $response)\n    {\n        $this-&gt;response = $response;\n    }\n\n    public function setFlag($someFlag)\n    {\n        $this-&gt;someFlag = $someFlag;\n    }\n}\n</code></pre> <p>A service with setter injection can be registered as follows:</p> <pre><code>&lt;?php\n\n$di-&gt;set(\n    'response',\n    [\n        'className' =&gt; 'Phalcon\\Http\\Response',\n    ]\n);\n\n$di-&gt;set(\n    'someComponent',\n    [\n        'className' =&gt; 'SomeApp\\SomeComponent',\n        'calls'     =&gt; [\n            [\n                'method'    =&gt; 'setResponse',\n                'arguments' =&gt; [\n                    [\n                        'type' =&gt; 'service',\n                        'name' =&gt; 'response',\n                    ]\n                ]\n            ],\n            [\n                'method'    =&gt; 'setFlag',\n                'arguments' =&gt; [\n                    [\n                        'type'  =&gt; 'parameter',\n                        'value' =&gt; true,\n                    ]\n                ]\n            ]\n        ]\n    ]\n);\n</code></pre>"},{"location":"di/#properties-injection","title":"Properties Injection","text":"<p>A less common strategy is to inject dependencies or parameters directly into public attributes of the class:</p> <pre><code>&lt;?php\n\nnamespace SomeApp;\n\nuse Phalcon\\Http\\Response;\n\nclass SomeComponent\n{\n    /**\n     * @var Response\n     */\n    public $response;\n\n    public $someFlag;\n}\n</code></pre> <p>A service with properties injection can be registered as follows:</p> <pre><code>&lt;?php\n\n$di-&gt;set(\n    'response',\n    [\n        'className' =&gt; 'Phalcon\\Http\\Response',\n    ]\n);\n\n$di-&gt;set(\n    'someComponent',\n    [\n        'className'  =&gt; 'SomeApp\\SomeComponent',\n        'properties' =&gt; [\n            [\n                'name'  =&gt; 'response',\n                'value' =&gt; [\n                    'type' =&gt; 'service',\n                    'name' =&gt; 'response',\n                ],\n            ],\n            [\n                'name'  =&gt; 'someFlag',\n                'value' =&gt; [\n                    'type'  =&gt; 'parameter',\n                    'value' =&gt; true,\n                ],\n            ]\n        ]\n    ]\n);\n</code></pre> <p>Supported parameter types include the following:</p> Type Description Example parameter Represents a literal value to be passed as parameter <code>php['type' =&gt; 'parameter', 'value' =&gt; 1234]</code> service Represents another service in the service container <code>php['type' =&gt; 'service', 'name' =&gt; 'request']</code> instance Represents an object that must be built dynamically <code>php['type' =&gt; 'instance', 'className' =&gt; 'DateTime', 'arguments' =&gt; ['now']]</code> <p>Resolving a service whose definition is complex may be slightly slower than simple definitions seen previously. However, these provide a more robust approach to define and inject services.</p> <p>Mixing different types of definitions is allowed, everyone can decide what is the most appropriate way to register the services according to the application needs.</p>"},{"location":"di/#array-syntax","title":"Array Syntax","text":"<p>The array syntax is also allowed to register services:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Http\\Request;\n\n// Create the Dependency Injector Container\n$di = new Di();\n\n// By its class name\n$di['request'] = 'Phalcon\\Http\\Request';\n\n// Using an anonymous function, the instance will be lazy loaded\n$di['request'] = function () {\n    return new Request();\n};\n\n// Registering an instance directly\n$di['request'] = new Request();\n\n// Using an array definition\n$di['request'] = [\n    'className' =&gt; 'Phalcon\\Http\\Request',\n];\n</code></pre> <p>In the examples above, when the framework needs to access the request data, it will ask for the service identified as 'request' in the container. The container in turn will return an instance of the required service. A developer might eventually replace a component when he/she needs.</p> <p>Each of the methods (demonstrated in the examples above) used to set/register a service has advantages and disadvantages. It is up to the developer and the particular requirements that will designate which one is used.</p> <p>Setting a service by a string is simple, but lacks flexibility. Setting services using an array offers a lot more flexibility, but makes the code more complicated. The lambda function is a good balance between the two, but could lead to more maintenance than one would expect.</p> <p>Phalcon\\Di offers lazy loading for every service it stores. Unless the developer chooses to instantiate an object directly and store it in the container, any object stored in it (via array, string, etc.) will be lazy loaded i.e. instantiated only when requested.</p>"},{"location":"di/#loading-services-from-yaml-files","title":"Loading services from YAML files","text":"<p>This feature will let you set your services in <code>yaml</code> files or just in plain php. For example you can load services using a <code>yaml</code> file like this:</p> <pre><code>config:\n  className: \\Phalcon\\Config\n  shared: true\n</code></pre> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\n\n$di = new Di();\n$di-&gt;loadFromYaml('services.yml');\n$di-&gt;get('config'); // will properly return config service\n</code></pre> <p>NOTE</p> <p>This approach requires that the module Yaml be installed. Please refer to this for more information.</p>"},{"location":"di/#resolving-services","title":"Resolving Services","text":"<p>Obtaining a service from the container is a matter of simply calling the 'get' method. A new instance of the service will be returned:</p> <pre><code>$request = $di-&gt;get('request');\n</code></pre> <p>Or by calling through the magic method:</p> <pre><code>$request = $di-&gt;getRequest();\n</code></pre> <p>Or using the array-access syntax:</p> <pre><code>$request = $di['request'];\n</code></pre> <p>Arguments can be passed to the constructor by adding an array parameter to the method 'get':</p> <pre><code>&lt;?php\n\n// new MyComponent('some-parameter', 'other')\n$component = $di-&gt;get(\n    'MyComponent',\n    [\n        'some-parameter',\n        'other',\n    ]\n);\n</code></pre>"},{"location":"di/#events","title":"Events","text":"<p>Phalcon\\Di is able to send events to an EventsManager if it is present. Events are triggered using the type 'di'. Some events when returning boolean false could stop the active operation. The following events are supported:</p> Event Name Triggered Can stop operation? Triggered on beforeServiceResolve Triggered before resolve service. Listeners receive the service name and the parameters passed to it. No Listeners afterServiceResolve Triggered after resolve service. Listeners receive the service name, instance, and the parameters passed to it. No Listeners"},{"location":"di/#shared-services","title":"Shared services","text":"<p>Services can be registered as 'shared' services this means that they always will act as singletons. Once the service is resolved for the first time the same instance of it is returned every time a consumer retrieve the service from the container:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Adapter\\Files as SessionFiles;\n\n// Register the session service as 'always shared'\n$di-&gt;setShared(\n    'session',\n    function () {\n        $session = new SessionFiles();\n\n        $session-&gt;start();\n\n        return $session;\n    }\n);\n\n// Locates the service for the first time\n$session = $di-&gt;get('session');\n\n// Returns the first instantiated object\n$session = $di-&gt;getSession();\n</code></pre> <p>An alternative way to register shared services is to pass 'true' as third parameter of 'set':</p> <pre><code>&lt;?php\n\n// Register the session service as 'always shared'\n$di-&gt;set(\n    'session',\n    function () {\n        // ...\n    },\n    true\n);\n</code></pre> <p>If a service isn't registered as shared and you want to be sure that a shared instance will be accessed every time the service is obtained from the DI, you can use the 'getShared' method:</p> <pre><code>$request = $di-&gt;getShared('request');\n</code></pre>"},{"location":"di/#manipulating-services-individually","title":"Manipulating services individually","text":"<p>Once a service is registered in the service container, you can retrieve it to manipulate it individually:</p> <pre><code>    &lt;?php\n\n    use Phalcon\\Http\\Request;\n\n    // Register the 'request' service\n    $di-&gt;set('request', 'Phalcon\\Http\\Request');\n\n    // Get the service\n    $requestService = $di-&gt;getService('request');\n\n    // Change its definition\n    $requestService-&gt;setDefinition(\n        function () {\n            return new Request();\n        }\n    );\n\n    // Change it to shared\n    $requestService-&gt;setShared(true);\n\n    // Resolve the service (return a Phalcon\\Http\\Request instance)\n    $request = $requestService-&gt;resolve();\n</code></pre>"},{"location":"di/#instantiating-classes-via-the-service-container","title":"Instantiating classes via the Service Container","text":"<p>When you request a service to the service container, if it can't find out a service with the same name it'll try to load a class with the same name. With this behavior we can replace any class by another simply by registering a service with its name:</p> <pre><code>&lt;?php\n\n// Register a controller as a service\n$di-&gt;set(\n    'IndexController',\n    function () {\n        $component = new Component();\n\n        return $component;\n    },\n    true\n);\n\n// Register a controller as a service\n$di-&gt;set(\n    'MyOtherComponent',\n    function () {\n        // Actually returns another component\n        $component = new AnotherComponent();\n\n        return $component;\n    }\n);\n\n// Create an instance via the service container\n$myComponent = $di-&gt;get('MyOtherComponent');\n</code></pre> <p>You can take advantage of this, always instantiating your classes via the service container (even if they aren't registered as services). The DI will fallback to a valid autoloader to finally load the class. By doing this, you can easily replace any class in the future by implementing a definition for it.</p>"},{"location":"di/#automatic-injecting-of-the-di-itself","title":"Automatic Injecting of the DI itself","text":"<p>If a class or component requires the DI itself to locate services, the DI can automatically inject itself to the instances it creates, to do this, you need to implement the Phalcon\\Di\\InjectionAwareInterface in your classes:</p> <pre><code>&lt;?php\n\nuse Phalcon\\DiInterface;\nuse Phalcon\\Di\\InjectionAwareInterface;\n\nclass MyClass implements InjectionAwareInterface\n{\n    /**\n     * @var DiInterface\n     */\n    protected $di;\n\n\n    public function setDi(DiInterface $di)\n    {\n        $this-&gt;di = $di;\n    }\n\n    public function getDi()\n    {\n        return $this-&gt;di;\n    }\n}\n</code></pre> <p>Then once the service is resolved, the <code>$di</code> will be passed to <code>setDi()</code> automatically:</p> <pre><code>&lt;?php\n\n// Register the service\n$di-&gt;set('myClass', 'MyClass');\n\n// Resolve the service (NOTE: $myClass-&gt;setDi($di) is automatically called)\n$myClass = $di-&gt;get('myClass');\n</code></pre>"},{"location":"di/#organizing-services-in-files","title":"Organizing services in files","text":"<p>You can better organize your application by moving the service registration to individual files instead of doing everything in the application's bootstrap:</p> <pre><code>&lt;?php\n\n$di-&gt;set(\n    'router',\n    function () {\n        return include '../app/config/routes.php';\n    }\n);\n</code></pre> <p>Then in the file (<code>'../app/config/routes.php'</code>) return the object resolved:</p> <pre><code>&lt;?php\n\n$router = new MyRouter();\n\n$router-&gt;post('/login');\n\nreturn $router;\n</code></pre>"},{"location":"di/#accessing-the-di-in-a-static-way","title":"Accessing the DI in a static way","text":"<p>If needed you can access the latest DI created in a static function in the following way:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\n\nclass SomeComponent\n{\n    public static function someMethod()\n    {\n        // Get the session service\n        $session = Di::getDefault()-&gt;getSession();\n    }\n}\n</code></pre>"},{"location":"di/#service-providers","title":"Service Providers","text":"<p>Using the <code>ServiceProviderInterface</code> you now register services by context. You can move all your <code>$di-&gt;set()</code> calls to classes like this:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\ServiceProviderInterface;\nuse Phalcon\\DiInterface;\nuse Phalcon\\Di;\nuse Phalcon\\Config\\Adapter\\Ini;\n\nclass SomeServiceProvider implements ServiceProviderInterface\n{\n    public function register(DiInterface $di)\n    {\n        $di-&gt;set(\n            'config', \n            function () {\n                return new Ini('config.ini');\n            }\n        );\n    }\n}\n\n$di = new Di();\n$di-&gt;register(new SomeServiceProvider());\nvar_dump($di-&gt;get('config')); // will return properly our config\n</code></pre>"},{"location":"di/#factory-default-di","title":"Factory Default DI","text":"<p>Although the decoupled character of Phalcon offers us great freedom and flexibility, maybe we just simply want to use it as a full-stack framework. To achieve this, the framework provides a variant of Phalcon\\Di called Phalcon\\Di\\FactoryDefault. This class automatically registers the appropriate services bundled with the framework to act as full-stack.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\n\n$di = new FactoryDefault();\n</code></pre>"},{"location":"di/#service-name-conventions","title":"Service Name Conventions","text":"<p>Although you can register services with the names you want, Phalcon has a several naming conventions that allow it to get the the correct (built-in) service when you need it.</p> Service Name Description Default Shared assets Assets Manager Phalcon\\Assets\\Manager Yes annotations Annotations Parser Phalcon\\Annotations\\Adapter\\Memory Yes cookies HTTP Cookies Management Service Phalcon\\Http\\Response\\Cookies Yes crypt Encrypt/Decrypt data Phalcon\\Crypt Yes db Low-Level Database Connection Service Phalcon\\Db Yes dispatcher Controllers Dispatching Service Phalcon\\Mvc\\Dispatcher Yes eventsManager Events Management Service Phalcon\\Events\\Manager Yes escaper Contextual Escaping Phalcon\\Escaper Yes flash Flash Messaging Service Phalcon\\Flash\\Direct Yes flashSession Flash Session Messaging Service Phalcon\\Flash\\Session Yes filter Input Filtering Service Phalcon\\Filter Yes modelsCache Cache backend for models cache None No modelsManager Models Management Service Phalcon\\Mvc\\Model\\Manager Yes modelsMetadata Models Meta-Data Service Phalcon\\Mvc\\Model\\MetaData\\Memory Yes request HTTP Request Environment Service Phalcon\\Http\\Request Yes response HTTP Response Environment Service Phalcon\\Http\\Response Yes router Routing Service Phalcon\\Mvc\\Router Yes security Security helpers Phalcon\\Security Yes session Session Service Phalcon\\Session\\Adapter\\Files Yes sessionBag Session Bag service Phalcon\\Session\\Bag Yes tag HTML generation helpers Phalcon\\Tag Yes transactionManager Models Transaction Manager Service Phalcon\\Mvc\\Model\\Transaction\\Manager Yes url URL Generator Service Phalcon\\Mvc\\Url Yes viewsCache Cache backend for views fragments None No"},{"location":"di/#implementing-your-own-di","title":"Implementing your own DI","text":"<p>The Phalcon\\DiInterface interface must be implemented to create your own DI replacing the one provided by Phalcon or extend the current one.</p>"},{"location":"dispatcher/","title":"Dispatching Controllers","text":"<p>Phalcon\\Mvc\\Dispatcher is the component responsible for instantiating controllers and executing the required actions on them in an MVC application. Understanding its operation and capabilities helps us get more out of the services provided by the framework.</p>"},{"location":"dispatcher/#the-dispatch-loop","title":"The Dispatch Loop","text":"<p>This is an important process that has much to do with the MVC flow itself, especially with the controller part. The work occurs within the controller dispatcher. The controller files are read, loaded, and instantiated. Then the required actions are executed. If an action forwards the flow to another controller/action, the controller dispatcher starts again. To better illustrate this, the following example shows approximately the process performed within Phalcon\\Mvc\\Dispatcher:</p> <pre><code>&lt;?php\n\n// Dispatch loop\nwhile (!$finished) {\n    $finished = true;\n\n    $controllerClass = $controllerName . 'Controller';\n\n    // Instantiating the controller class via autoloaders\n    $controller = new $controllerClass();\n\n    // Execute the action\n    call_user_func_array(\n        [\n            $controller,\n            $actionName . 'Action'\n        ],\n        $params\n    );\n\n    // '$finished' should be reloaded to check if the flow was forwarded to another controller\n    $finished = true;\n}\n</code></pre> <p>The code above lacks validations, filters and additional checks, but it demonstrates the normal flow of operation in the dispatcher.</p>"},{"location":"dispatcher/#dispatch-loop-events","title":"Dispatch Loop Events","text":"<p>Phalcon\\Mvc\\Dispatcher is able to send events to an EventsManager if it is present. Events are triggered using the type <code>dispatch</code>. Some events when returning boolean <code>false</code> could stop the active operation. The following events are supported:</p> Event Name Triggered Can stop operation? Triggered on beforeDispatchLoop Triggered before entering in the dispatch loop. At this point the dispatcher don't know if the controller or the actions to be executed exist. The Dispatcher only knows the information passed by the Router. Yes Listeners beforeDispatch Triggered after entering in the dispatch loop. At this point the dispatcher don't know if the controller or the actions to be executed exist. The Dispatcher only knows the information passed by the Router. Yes Listeners beforeExecuteRoute Triggered before executing the controller/action method. At this point the dispatcher has been initialized the controller and know if the action exist. Yes Listeners/Controllers initialize Allow to globally initialize the controller in the request No Controllers afterExecuteRoute Triggered after executing the controller/action method. As operation cannot be stopped, only use this event to make clean up after execute the action No Listeners/Controllers beforeNotFoundAction Triggered when the action was not found in the controller Yes Listeners beforeException Triggered before the dispatcher throws any exception Yes Listeners afterDispatch Triggered after executing the controller/action method. As operation cannot be stopped, only use this event to make clean up after execute the action Yes Listeners afterDispatchLoop Triggered after exiting the dispatch loop No Listeners afterBinding Triggered after models are bound but before executing route Yes Listeners/Controllers <p>The INVO tutorial shows how to take advantage of dispatching events implementing a security filter with Acl</p> <p>The following example demonstrates how to attach listeners to this component:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di-&gt;set(\n    'dispatcher',\n    function () {\n        // Create an event manager\n        $eventsManager = new EventsManager();\n\n        // Attach a listener for type 'dispatch'\n        $eventsManager-&gt;attach(\n            'dispatch',\n            function (Event $event, $dispatcher) {\n                // ...\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n\n        // Bind the eventsManager to the view component\n        $dispatcher-&gt;setEventsManager($eventsManager);\n\n        return $dispatcher;\n    },\n    true\n);\n</code></pre> <p>An instantiated controller automatically acts as a listener for dispatch events, so you can implement methods as callbacks:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\Dispatcher;\n\nclass PostsController extends Controller\n{\n    public function beforeExecuteRoute(Dispatcher $dispatcher)\n    {\n        // Executed before every found action\n    }\n\n    public function afterExecuteRoute(Dispatcher $dispatcher)\n    {\n        // Executed after every found action\n    }\n}\n</code></pre> <p>NOTE</p> <p>Methods on event listeners accept an Phalcon\\Events\\Event object as their first parameter - methods in controllers do not. </p>"},{"location":"dispatcher/#forwarding-to-other-actions","title":"Forwarding to other actions","text":"<p>The dispatch loop allows us to forward the execution flow to another controller/action. This is very useful to check if the user can access to certain options, redirect users to other screens or simply reuse code.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction($year, $postTitle)\n    {\n        // ... Store some product and forward the user\n\n        // Forward flow to the index action\n        $this-&gt;dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'posts',\n                'action'     =&gt; 'index',\n            ]\n        );\n    }\n}\n</code></pre> <p>Keep in mind that making a <code>forward</code> is not the same as making a HTTP redirect. Although they apparently got the same result. The <code>forward</code> doesn't reload the current page, all the redirection occurs in a single request, while the HTTP redirect needs two requests to complete the process.</p> <p>More forwarding examples:</p> <pre><code>&lt;?php\n\n// Forward flow to another action in the current controller\n$this-&gt;dispatcher-&gt;forward(\n    [\n        'action' =&gt; 'search'\n    ]\n);\n\n// Forward flow to another action in the current controller\n// passing parameters\n$this-&gt;dispatcher-&gt;forward(\n    [\n        'action' =&gt; 'search',\n        'params' =&gt; [1, 2, 3]\n    ]\n);\n</code></pre> <p>A <code>forward</code> action accepts the following parameters:</p> Parameter Description <code>controller</code> A valid controller name to forward to. <code>action</code> A valid action name to forward to. <code>params</code> An array of parameters for the action. <code>namespace</code> A valid namespace name where the controller is part of."},{"location":"dispatcher/#using-the-events-manager","title":"Using the Events Manager","text":"<p>You can use the <code>dispatcher::beforeForward</code> event to change modules and redirect easier and \"cleaner\":</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Events\\Event;\n\n$di = new Di();\n\n$modules = [\n  'backend' =&gt; [\n      'className' =&gt; 'App\\Backend\\Bootstrap',\n      'path'      =&gt; '/app/Modules/Backend/Bootstrap.php',\n      'metadata'  =&gt; [\n          'controllersNamespace' =&gt; 'App\\Backend\\Controllers',\n      ],\n  ],\n];\n\n$manager = new Manager();\n\n$manager-&gt;attach(\n  'dispatch:beforeForward',\n  function (Event $event, Dispatcher $dispatcher, array $forward) use ($modules) {\n      $metadata = $modules[$forward['module']]['metadata'];\n      $dispatcher-&gt;setModuleName($forward['module']);\n      $dispatcher-&gt;setNamespaceName($metadata['controllersNamespace']);\n  }\n);\n\n$dispatcher = new Dispatcher();\n$dispatcher-&gt;setDI($di);\n$dispatcher-&gt;setEventsManager($manager);\n$di-&gt;set('dispatcher', $dispatcher);\n$dispatcher-&gt;forward(\n  [\n      'module'     =&gt; 'backend',\n      'controller' =&gt; 'posts',\n      'action'     =&gt; 'index',\n  ]\n);\n\necho $dispatcher-&gt;getModuleName(); // will display properly 'backend'\n</code></pre>"},{"location":"dispatcher/#preparing-parameters","title":"Preparing Parameters","text":"<p>Thanks to the hook points provided by Phalcon\\Mvc\\Dispatcher you can easily adapt your application to any URL schema; i.e. you might want your URLs look like: <code>http://example.com/controller/key1/value1/key2/value</code>. Since parameters are passed with the order that they are defined in the URL to actions, you can transform them to adopt the desired schema:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Dispatcher;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di-&gt;set(\n    'dispatcher',\n    function () {\n        // Create an EventsManager\n        $eventsManager = new EventsManager();\n\n        // Attach a listener\n        $eventsManager-&gt;attach(\n            'dispatch:beforeDispatchLoop',\n            function (Event $event, $dispatcher) {\n                $params = $dispatcher-&gt;getParams();\n\n                $keyParams = [];\n\n                // Use odd parameters as keys and even as values\n                foreach ($params as $i =&gt; $value) {\n                    if ($i &amp; 1) {\n                        // Previous param\n                        $key = $params[$i - 1];\n\n                        $keyParams[$key] = $value;\n                    }\n                }\n\n                // Override parameters\n                $dispatcher-&gt;setParams($keyParams);\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n\n        $dispatcher-&gt;setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n</code></pre> <p>If the desired schema is: <code>http://example.com/controller/key1:value1/key2:value</code>, the following code is required:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Dispatcher;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di-&gt;set(\n    'dispatcher',\n    function () {\n        // Create an EventsManager\n        $eventsManager = new EventsManager();\n\n        // Attach a listener\n        $eventsManager-&gt;attach(\n            'dispatch:beforeDispatchLoop',\n            function (Event $event, $dispatcher) {\n                $params = $dispatcher-&gt;getParams();\n\n                $keyParams = [];\n\n                // Explode each parameter as key,value pairs\n                foreach ($params as $number =&gt; $value) {\n                    $parts = explode(':', $value);\n\n                    $keyParams[$parts[0]] = $parts[1];\n                }\n\n                // Override parameters\n                $dispatcher-&gt;setParams($keyParams);\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n\n        $dispatcher-&gt;setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n</code></pre>"},{"location":"dispatcher/#getting-parameters","title":"Getting Parameters","text":"<p>When a route provides named parameters you can receive them in a controller, a view or any other component that extends Phalcon\\Di\\Injectable.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Get the post's title passed in the URL as parameter\n        // or prepared in an event\n        $title = $this-&gt;dispatcher-&gt;getParam('title');\n\n        // Get the post's year passed in the URL as parameter\n        // or prepared in an event also filtering it\n        $year = $this-&gt;dispatcher-&gt;getParam('year', 'int');\n\n        // ...\n    }\n}\n</code></pre>"},{"location":"dispatcher/#preparing-actions","title":"Preparing actions","text":"<p>You can also define an arbitrary schema for actions <code>before</code> in the dispatch loop.</p>"},{"location":"dispatcher/#camelize-action-names","title":"Camelize action names","text":"<p>If the original URL is: <code>http://example.com/admin/products/show-latest-products</code>, and for example you want to camelize <code>show-latest-products</code> to <code>ShowLatestProducts</code>, the following code is required:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Text;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di-&gt;set(\n    'dispatcher',\n    function () {\n        // Create an EventsManager\n        $eventsManager = new EventsManager();\n\n        // Camelize actions\n        $eventsManager-&gt;attach(\n            'dispatch:beforeDispatchLoop',\n            function (Event $event, $dispatcher) {\n                $dispatcher-&gt;setActionName(\n                    Text::camelize($dispatcher-&gt;getActionName())\n                );\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n\n        $dispatcher-&gt;setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n</code></pre>"},{"location":"dispatcher/#remove-legacy-extensions","title":"Remove legacy extensions","text":"<p>If the original URL always contains a <code>.php</code> extension:</p> <pre><code>http://example.com/admin/products/show-latest-products.php\nhttp://example.com/admin/products/index.php\n</code></pre> <p>You can remove it before dispatch the controller/action combination:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di-&gt;set(\n    'dispatcher',\n    function () {\n        // Create an EventsManager\n        $eventsManager = new EventsManager();\n\n        // Remove extension before dispatch\n        $eventsManager-&gt;attach(\n            'dispatch:beforeDispatchLoop',\n            function (Event $event, $dispatcher) {\n                $action = $dispatcher-&gt;getActionName();\n\n                // Remove extension\n                $action = preg_replace('/\\.php$/', '', $action);\n\n                // Override action\n                $dispatcher-&gt;setActionName($action);\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n\n        $dispatcher-&gt;setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n</code></pre>"},{"location":"dispatcher/#inject-model-instances","title":"Inject model instances","text":"<p>In this example, the developer wants to inspect the parameters that an action will receive in order to dynamically inject model instances.</p> <p>The controller looks like:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    /**\n     * Shows posts\n     *\n     * @param \\Posts $post\n     */\n    public function showAction(Posts $post)\n    {\n        $this-&gt;view-&gt;post = $post;\n    }\n}\n</code></pre> <p>Method <code>showAction</code> receives an instance of the model <code>\\Posts</code>, the developer could inspect this before dispatch the action preparing the parameter accordingly:</p> <pre><code>&lt;?php\n\nuse \\Exception;\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse \\ReflectionMethod;\n\n$di-&gt;set(\n    'dispatcher',\n    function () {\n        // Create an EventsManager\n        $eventsManager = new EventsManager();\n\n        $eventsManager-&gt;attach(\n            'dispatch:beforeDispatchLoop',\n            function (Event $event, $dispatcher) {\n                // Possible controller class name\n                $controllerName = $dispatcher-&gt;getControllerClass();\n\n                // Possible method name\n                $actionName = $dispatcher-&gt;getActiveMethod();\n\n                try {\n                    // Get the reflection for the method to be executed\n                    $reflection = new ReflectionMethod($controllerName, $actionName);\n\n                    $parameters = $reflection-&gt;getParameters();\n\n                    // Check parameters\n                    foreach ($parameters as $parameter) {\n                        // Get the expected model name\n                        $className = $parameter-&gt;getClass()-&gt;name;\n\n                        // Check if the parameter expects a model instance\n                        if (is_subclass_of($className, Model::class)) {\n                            $model = $className::findFirstById($dispatcher-&gt;getParams()[0]);\n\n                            // Override the parameters by the model instance\n                            $dispatcher-&gt;setParams([$model]);\n                        }\n                    }\n                } catch (Exception $e) {\n                    // An exception has occurred, maybe the class or action does not exist?\n                }\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n\n        $dispatcher-&gt;setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n</code></pre> <p>The above example has been simplified. A developer can improve it to inject any kind of dependency or model in actions before be executed.</p> <p>From 3.1.x onwards the dispatcher also comes with an option to handle this internally for all models passed into a controller action by using Phalcon\\Mvc\\Model\\Binder.</p> <pre><code>use Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\Model\\Binder;\n\n$dispatcher = new Dispatcher();\n\n$dispatcher-&gt;setModelBinder(new Binder());\n\nreturn $dispatcher;\n</code></pre> <p>NOTE</p> <p>Since the Binder object is using internally Reflection Api which can be heavy, there is ability to set cache. This can be done by using second argument in <code>setModelBinder()</code> which can also accept service name or just by passing cache instance to <code>Binder</code> constructor. </p> <p>It also introduces a new interface Phalcon\\Mvc\\Model\\Binder\\BindableInterface which allows you to define the controllers associated models to allow models binding in base controllers.</p> <p>For example, you have a base <code>CrudController</code> which your <code>PostsController</code> extends from. Your <code>CrudController</code> looks something like this:</p> <pre><code>use Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\Model;\n\nclass CrudController extends Controller\n{\n    /**\n     * Show action\n     *\n     * @param Model $model\n     */\n    public function showAction(Model $model)\n    {\n        $this-&gt;view-&gt;model = $model;\n    }\n}\n</code></pre> <p>In your PostsController you need to define which model the controller is associated with. This is done by implementing the Phalcon\\Mvc\\Model\\Binder\\BindableInterface which will add the <code>getModelName()</code> method from which you can return the model name. It can return string with just one model name or associative array where key is parameter name.</p> <pre><code>use Phalcon\\Mvc\\Model\\Binder\\BindableInterface;\nuse Models\\Posts;\n\nclass PostsController extends CrudController implements BindableInterface\n{\n    public static function getModelName()\n    {\n        return Posts::class;\n    }\n}\n</code></pre> <p>By declaring the model associated with the <code>PostsController</code> the binder can check the controller for the <code>getModelName()</code> method before passing the defined model into the parent show action.</p> <p>If your project structure does not use any parent controller you can of course still bind the model directly into the controller action:</p> <pre><code>use Phalcon\\Mvc\\Controller;\nuse Models\\Posts;\n\nclass PostsController extends Controller\n{\n    /**\n     * Shows posts\n     *\n     * @param Posts $post\n     */\n    public function showAction(Posts $post)\n    {\n        $this-&gt;view-&gt;post = $post;\n    }\n}\n</code></pre> <p>NOTE</p> <p>Currently the binder will only use the models primary key to perform a <code>findFirst()</code> on. An example route for the above would be <code>/posts/show/{1}</code> </p> <p></p>"},{"location":"dispatcher/#handling-not-found-exceptions","title":"Handling Not-Found Exceptions","text":"<p>Using the EventsManager it's possible to insert a hook point before the dispatcher throws an exception when the controller/action combination wasn't found:</p> <pre><code>&lt;?php\n\nuse Exception;\nuse Phalcon\\Dispatcher;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Mvc\\Dispatcher\\Exception as DispatchException;\n\n$di-&gt;setShared(\n    'dispatcher',\n    function () {\n        // Create an EventsManager\n        $eventsManager = new EventsManager();\n\n        // Attach a listener\n        $eventsManager-&gt;attach(\n            'dispatch:beforeException',\n            function (Event $event, $dispatcher, Exception $exception) {\n                // Handle 404 exceptions\n                if ($exception instanceof DispatchException) {\n                    $dispatcher-&gt;forward(\n                        [\n                            'controller' =&gt; 'index',\n                            'action'     =&gt; 'show404',\n                        ]\n                    );\n\n                    return false;\n                }\n\n                // Alternative way, controller or action doesn't exist\n                switch ($exception-&gt;getCode()) {\n                    case Dispatcher::EXCEPTION_HANDLER_NOT_FOUND:\n                    case Dispatcher::EXCEPTION_ACTION_NOT_FOUND:\n                        $dispatcher-&gt;forward(\n                            [\n                                'controller' =&gt; 'index',\n                                'action'     =&gt; 'show404',\n                            ]\n                        );\n\n                        return false;\n                }\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n\n        // Bind the EventsManager to the dispatcher\n        $dispatcher-&gt;setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n</code></pre> <p>Of course, this method can be moved onto independent plugin classes, allowing more than one class take actions when an exception is produced in the dispatch loop:</p> <pre><code>&lt;?php\n\nuse Exception;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\Dispatcher\\Exception as DispatchException;\n\nclass ExceptionsPlugin\n{\n    public function beforeException(Event $event, Dispatcher $dispatcher, Exception $exception)\n    {\n        // Default error action\n        $action = 'show503';\n\n        // Handle 404 exceptions\n        if ($exception instanceof DispatchException) {\n            $action = 'show404';\n        }\n\n        $dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'index',\n                'action'     =&gt; $action,\n            ]\n        );\n\n        return false;\n    }\n}\n</code></pre> <p>NOTE</p> <p>Only exceptions produced by the dispatcher and exceptions produced in the executed action are notified in the <code>beforeException</code> events. Exceptions produced in listeners or controller events are redirected to the latest try/catch. </p>"},{"location":"dispatcher/#implementing-your-own-dispatcher","title":"Implementing your own Dispatcher","text":"<p>The Phalcon\\Mvc\\DispatcherInterface interface must be implemented to create your own dispatcher replacing the one provided by Phalcon.</p>"},{"location":"environments-nanobox/","title":"Overview","text":"<p>Nanobox is a portable, micro platform for developing and deploying apps. When working locally, Nanobox uses Docker to spin up and configure a virtual development environment configured to your specific needs. When you're ready to deploy to live servers, Nanobox will take that same environment and spin it up on your cloud provider of choice, where you can then manage and scale your app through the Nanobox dashboard.</p> <p>In this post, we'll walk through getting a brand new Phalcon app up and running locally, with nothing installed other than Nanobox. First create a free Nanobox account, then download and run the Nanobox installer.</p>"},{"location":"environments-nanobox/#create-a-new-project","title":"Create a New Project","text":"<p>Create a project folder and <code>cd</code> into it:</p> <pre><code>mkdir nanobox-phalcon &amp;&amp; cd nanobox-phalcon\n</code></pre>"},{"location":"environments-nanobox/#add-a-boxfileyml","title":"Add a <code>boxfile.yml</code>","text":"<p>Nanobox uses the <code>boxfile.yml</code> to build and configure your app's runtime and environment. In the root of your project, create a <code>boxfile.yml</code> with the following:</p> <pre><code>run.config:\n  engine: php\n  engine.config:\n    runtime: php-7.1\n    document_root: public\n    extensions:\n      - phalcon\n  extra_steps:\n    - echo \"alias phalcon=\\'phalcon.php\\'\" &gt;&gt; /data/var/home/gonano/.bashrc\n</code></pre> <p>This tells Nanobox to:</p> <ul> <li>Use the PHP engine, a set of scripts that build your app's runtime.</li> <li>Use PHP 7.1.</li> <li>Set the Apache document root to <code>public</code>.</li> <li>Include the Phalcon extension. Nanobox takes a bare-bones approach to extensions, so you'll likely need to include other extensions. More information can be found here.</li> <li>Add a bash alias for Phalcon Devtools so you can just use the <code>phalcon</code> command.</li> </ul>"},{"location":"environments-nanobox/#add-phalcon-devtools-to-your-composerjson","title":"Add Phalcon Devtools to your <code>composer.json</code>","text":"<p>Create a <code>composer.json</code> file in the root of your project and add the <code>phalcon/devtools</code> package to your dev requirements:</p> <pre><code>{\n    \"require-dev\": {\n        \"phalcon/devtools\": \"~3.0.3\"\n    }\n}\n</code></pre> <p>NOTE</p> <p>NOTE: The version of Phalcon Devtools depends on which PHP version you're using </p>"},{"location":"environments-nanobox/#start-nanobox-and-generate-a-new-phalcon-app","title":"Start Nanobox and Generate a New Phalcon App","text":"<p>From the root of your project, run the following commands to start Nanobox and generate a new Phalcon app. As Nanobox starts, the PHP engine will automatically install and enable the Phalcon extension, run a <code>composer install</code> which will install Phalcon Devtools, then drop you into an interactive console inside the virtual environment. Your working directory is mounted into the <code>/app</code> directory in the VM, so as changes are made, they will be reflected both in the VM and in your local working directory.</p> <pre><code># start nanobox and drop into a nanobox console\nnanobox run\n\n# cd into the /tmp directory\ncd /tmp\n\n# generate a new phalcon app\nphalcon project myapp\n\n# change back to the /app dir\ncd -\n\n# copy the generated app into your project\ncp -a /tmp/myapp/* .\n\n# exit the console\nexit\n</code></pre>"},{"location":"environments-nanobox/#run-the-app-locally","title":"Run the App Locally","text":"<p>Before actually running your new Phalcon app, we recommend using Nanobox to add a DNS alias. This will add an entry to your local <code>hosts</code> file pointing to your dev environment and provide a convenient way to access your app from a browser.</p> <pre><code>nanobox dns add local phalcon.dev\n</code></pre> <p>Nanobox provides a <code>php-server</code> helper script that starts both Apache (or Nginx depending on your <code>boxfile.yml</code> config) and PHP. When passed with the <code>nanobox run</code> command, it will start the local dev environment and immediately run your app.</p> <pre><code>nanobox run php-server\n</code></pre> <p>Once running, you can visit your app at phalcon.dev.</p>"},{"location":"environments-nanobox/#check-out-the-environment","title":"Check Out the Environment","text":"<p>Your virtual environment includes everything you need to run your Phalcon app. Feel free to poke around.</p> <pre><code># drop into a Nanobox console\nnanobox run\n\n# check the php version\nphp -v\n\n# check that phalcon devtools are available\nphalcon info\n\n# check that your local codebase is mounted\nls\n\n# exit the console\nexit\n</code></pre>"},{"location":"environments-nanobox/#phalcon-and-nanobox","title":"Phalcon and Nanobox","text":"<p>Nanobox gives you everything you need develop and run your Phalcon app in an isolated virtual environment. With the <code>boxfile.yml</code> in your project, collaborators can get up and running in minutes simply by running <code>nanobox run</code>.</p> <p>Nanobox has a Phalcon Quickstart that includes everything covered in this post. They also have as guides for using Phalcon with Nanobox. In future posts, we'd like to cover other aspects of using Phalcon with Nanobox, including adding and connecting to a database, deploying Phalcon into production, etc. If you're interested let us know on Twitter.</p>"},{"location":"escaper/","title":"Contextual Escaping","text":"<p>Websites and web applications are vulnerable to XSS attacks and although PHP provides escaping functionality, in some contexts it is not sufficient/appropriate. Phalcon\\Escaper provides contextual escaping and is written in Zephir, providing the minimal overhead when escaping different kinds of texts.</p> <p>We designed this component based on the XSS (Cross Site Scripting) Prevention Cheat Sheet created by the OWASP.</p> <p>Additionally, this component relies on mbstring to support almost any charset.</p> <p>To illustrate how this component works and why it is important, consider the following example:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\n\n// Document title with malicious extra HTML tags\n$maliciousTitle = \"&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;\";\n\n// Malicious CSS class name\n$className = \";`(\";\n\n// Malicious CSS font name\n$fontName = \"Verdana\\\"&lt;/style&gt;\";\n\n// Malicious Javascript text\n$javascriptText = \"';&lt;/script&gt;Hello\";\n\n// Create an escaper\n$e = new Escaper();\n\n?&gt;\n\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;\n\n        &lt;title&gt;\n            &lt;?php echo $e-&gt;escapeHtml($maliciousTitle); ?&gt;\n        &lt;/title&gt;\n\n        &lt;style type=\"text/css\"&gt;\n            .&lt;?php echo $e-&gt;escapeCss($className); ?&gt; {\n                font-family: \"&lt;?php echo $e-&gt;escapeCss($fontName); ?&gt;\";\n                color: red;\n            }\n        &lt;/style&gt;\n\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;div class='&lt;?php echo $e-&gt;escapeHtmlAttr($className); ?&gt;'&gt;\n            hello\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            var some = '&lt;?php echo $e-&gt;escapeJs($javascriptText); ?&gt;';\n        &lt;/script&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Which produces the following:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;\n\n        &lt;title&gt;\n            &amp;lt;/title&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;\n        &lt;/title&gt;\n\n        &lt;style type=\"text/css\"&gt;\n            .\\3c \\2f style\\3e {\n                font-family: \"Verdana\\22 \\3c \\2f style\\3e\";\n                color: red;\n            }\n        &lt;/style&gt;\n\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;div class='&amp;#x3c &amp;#x2f style&amp;#x3e '&gt;\n            hello\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            var some = '\\x27\\x3b\\x3c\\2fscript\\x3eHello';\n        &lt;/script&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Every text was escaped according to its context. Use the appropriate context is important to avoid XSS attacks.</p>"},{"location":"escaper/#escaping-html","title":"Escaping HTML","text":"<p>The most common situation when inserting unsafe data is between HTML tags:</p> <pre><code>&lt;div class=\"comments\"&gt;\n    &lt;!-- Escape untrusted data here! --&gt;\n&lt;/div&gt;\n</code></pre> <p>You can escape those data using the <code>escapeHtml</code> method:</p> <pre><code>&lt;div class=\"comments\"&gt;\n    &lt;?php echo $e-&gt;escapeHtml('&gt;&lt;/div&gt;&lt;h1&gt;myattack&lt;/h1&gt;'); ?&gt;\n&lt;/div&gt;\n</code></pre> <p>Which produces:</p> <pre><code>&lt;div class=\"comments\"&gt;\n    &amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h1&amp;gt;myattack&amp;lt;/h1&amp;gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"escaper/#escaping-html-attributes","title":"Escaping HTML Attributes","text":"<p>Escaping HTML attributes is different from escaping HTML content. The escaper works by changing every non-alphanumeric character to the form. This kind of escaping is intended to most simpler attributes excluding complex ones like <code>href</code> or <code>url</code>:</p> <pre><code>&lt;table width=\"Escape untrusted data here!\"&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            Hello\n        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <p>You can escape a HTML attribute by using the <code>escapeHtmlAttr</code> method:</p> <pre><code>&lt;table width=\"&lt;?php echo $e-&gt;escapeHtmlAttr('\"&gt;&lt;h1&gt;Hello&lt;/table'); ?&gt;\"&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            Hello\n        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <p>Which produces:</p> <pre><code>&lt;table width=\"&amp;#x22;&amp;#x3e;&amp;#x3c;h1&amp;#x3e;Hello&amp;#x3c;&amp;#x2f;table\"&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            Hello\n        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>"},{"location":"escaper/#escaping-urls","title":"Escaping URLs","text":"<p>Some HTML attributes like <code>href</code> or <code>url</code> need to be escaped differently:</p> <pre><code>&lt;a href=\"Escape untrusted data here!\"&gt;\n    Some link\n&lt;/a&gt;\n</code></pre> <p>You can escape a HTML attribute by using the :code:<code>escapeUrl</code> method:</p> <pre><code>&lt;a href=\"&lt;?php echo $e-&gt;escapeUrl('\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;a href=\"#'); ?&gt;\"&gt;\n    Some link\n&lt;/a&gt;\n</code></pre> <p>Which produces:</p> <pre><code>&lt;a href=\"%22%3E%3Cscript%3Ealert%281%29%3C%2Fscript%3E%3Ca%20href%3D%22%23\"&gt;\n    Some link\n&lt;/a&gt;\n</code></pre>"},{"location":"escaper/#escaping-css","title":"Escaping CSS","text":"<p>CSS identifiers/values can be escaped too:</p> <pre><code>&lt;a style=\"color: Escape untrusted data here\"&gt;\n    Some link\n&lt;/a&gt;\n</code></pre> <p>You can escape a CSS identifiers/value by using the :code:<code>escapeCss</code> method:</p> <pre><code>&lt;a style=\"color: &lt;?php echo $e-&gt;escapeCss('\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;a href=\"#'); ?&gt;\"&gt;\n    Some link\n&lt;/a&gt;\n</code></pre> <p>Which produces:</p> <pre><code>&lt;a style=\"color: \\22 \\3e \\3c script\\3e alert\\28 1\\29 \\3c \\2f script\\3e \\3c a\\20 href\\3d \\22 \\23 \"&gt;\n    Some link\n&lt;/a&gt;\n</code></pre>"},{"location":"escaper/#escaping-javascript","title":"Escaping JavaScript","text":"<p>Strings to be inserted into JavaScript code also must be properly escaped:</p> <pre><code>&lt;script&gt;\n    document.title = 'Escape untrusted data here';\n&lt;/script&gt;\n</code></pre> <p>You can escape JavaScript code by using the <code>escapeJs</code> method:</p> <pre><code>&lt;script&gt;\n    document.title = '&lt;?php echo $e-&gt;escapeJs(\"'; alert(100); var x='\"); ?&gt;';\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;script&gt;\n    document.title = '\\x27; alert(100); var x\\x3d\\x27';\n&lt;/script&gt;\n</code></pre>"},{"location":"events/","title":"Events Manager","text":"<p>The purpose of this component is to intercept the execution of most of the other components of the framework by creating 'hook points'. These hook points allow the developer to obtain status information, manipulate data or change the flow of execution during the process of a component.</p>"},{"location":"events/#naming-convention","title":"Naming Convention","text":"<p>Phalcon events use namespaces to avoid naming collisions. Each component in Phalcon occupies a different event namespace and you are free to create your own as you see fit. Event names are formatted as <code>component:event</code>. For example, as Phalcon\\Db occupies the <code>db</code> namespace, its <code>afterQuery</code> event's full name is <code>db:afterQuery</code>.</p> <p>When attaching event listeners to the events manager, you can use <code>component</code> to catch all events from that component (eg. <code>db</code> to catch all of the Phalcon\\Db events) or <code>component:event</code> to target a specific event (eg. <code>db:afterQuery</code>).</p>"},{"location":"events/#usage-example","title":"Usage Example","text":"<p>In the following example, we will use the EventsManager to listen for the <code>afterQuery</code> event produced in a MySQL connection managed by Phalcon\\Db:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as DbAdapter;\n\n$eventsManager = new EventsManager();\n\n$eventsManager-&gt;attach(\n    'db:afterQuery',\n    function (Event $event, $connection) {\n        echo $connection-&gt;getSQLStatement();\n    }\n);\n\n$connection = new DbAdapter(\n    [\n        'host'     =&gt; 'localhost',\n        'username' =&gt; 'root',\n        'password' =&gt; 'secret',\n        'dbname'   =&gt; 'invo',\n    ]\n);\n\n// Assign the eventsManager to the db adapter instance\n$connection-&gt;setEventsManager($eventsManager);\n\n// Send a SQL command to the database server\n$connection-&gt;query(\n    'SELECT * FROM products p WHERE p.status = 1'\n);\n</code></pre> <p>Now every time a query is executed, the SQL statement will be echoed out. The first parameter passed to the lambda function contains contextual information about the event that is running, the second is the source of the event (in this case the connection itself). A third parameter may also be specified which will contain arbitrary data specific to the event.</p> <p>NOTE</p> <p>You must explicitly set the Events Manager to a component using the <code>setEventsManager()</code> method in order for that component to trigger events. You can create a new Events Manager instance for each component or you can set the same Events Manager to multiple components as the naming convention will avoid conflicts </p> <p>Instead of using lambda functions, you can use event listener classes instead. Event listeners also allow you to listen to multiple events. In this example, we will implement the Phalcon\\Db\\Profiler to detect the SQL statements that are taking longer to execute than expected:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Profiler;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\File;\n\nclass MyDbListener\n{\n    protected $profiler;\n\n    protected $logger;\n\n    /**\n     * Creates the profiler and starts the logging\n     */\n    public function __construct()\n    {\n        $this-&gt;profiler = new Profiler();\n        $this-&gt;logger   = new Logger('../apps/logs/db.log');\n    }\n\n    /**\n     * This is executed if the event triggered is 'beforeQuery'\n     */\n    public function beforeQuery(Event $event, $connection)\n    {\n        $this-&gt;profiler-&gt;startProfile(\n            $connection-&gt;getSQLStatement()\n        );\n    }\n\n    /**\n     * This is executed if the event triggered is 'afterQuery'\n     */\n    public function afterQuery(Event $event, $connection)\n    {\n        $this-&gt;logger-&gt;log(\n            $connection-&gt;getSQLStatement(),\n            Logger::INFO\n        );\n\n        $this-&gt;profiler-&gt;stopProfile();\n    }\n\n    public function getProfiler()\n    {\n        return $this-&gt;profiler;\n    }\n}\n</code></pre> <p>Attaching an event listener to the events manager is as simple as:</p> <pre><code>&lt;?php\n\n// Create a database listener\n$dbListener = new MyDbListener();\n\n// Listen all the database events\n$eventsManager-&gt;attach(\n    'db',\n    $dbListener\n);\n</code></pre> <p>The resulting profile data can be obtained from the listener:</p> <pre><code>&lt;?php\n\n// Send a SQL command to the database server\n$connection-&gt;execute(\n    'SELECT * FROM products p WHERE p.status = 1'\n);\n\nforeach ($dbListener-&gt;getProfiler()-&gt;getProfiles() as $profile) {\n    echo 'SQL Statement: ', $profile-&gt;getSQLStatement(), '\\n';\n    echo 'Start Time: ', $profile-&gt;getInitialTime(), '\\n';\n    echo 'Final Time: ', $profile-&gt;getFinalTime(), '\\n';\n    echo 'Total Elapsed Time: ', $profile-&gt;getTotalElapsedSeconds(), '\\n';\n}\n</code></pre>"},{"location":"events/#creating-components-that-trigger-events","title":"Creating components that trigger Events","text":"<p>You can create components in your application that trigger events to an EventsManager. As a consequence, there may exist listeners that react to these events when generated. In the following example we're creating a component called <code>MyComponent</code>. This component is EventsManager aware (it implements Phalcon\\Events\\EventsAwareInterface); when its <code>someTask()</code> method is executed it triggers two events to any listener in the EventsManager:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\EventsAwareInterface;\nuse Phalcon\\Events\\ManagerInterface;\n\nclass MyComponent implements EventsAwareInterface\n{\n    protected $eventsManager;\n\n    public function setEventsManager(ManagerInterface $eventsManager)\n    {\n        $this-&gt;eventsManager = $eventsManager;\n    }\n\n    public function getEventsManager()\n    {\n        return $this-&gt;eventsManager;\n    }\n\n    public function someTask()\n    {\n        $this-&gt;eventsManager-&gt;fire('my-component:beforeSomeTask', $this);\n\n        // Do some task\n        echo 'Here, someTask\\n';\n\n        $this-&gt;eventsManager-&gt;fire('my-component:afterSomeTask', $this);\n    }\n}\n</code></pre> <p>Notice that in this example, we're using the <code>my-component</code> event namespace. Now we need to create an event listener for this component:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\n\nclass SomeListener\n{\n    public function beforeSomeTask(Event $event, $myComponent)\n    {\n        echo \"Here, beforeSomeTask\\n\";\n    }\n\n    public function afterSomeTask(Event $event, $myComponent)\n    {\n        echo \"Here, afterSomeTask\\n\";\n    }\n}\n</code></pre> <p>Now let's make everything work together:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Manager as EventsManager;\n\n// Create an Events Manager\n$eventsManager = new EventsManager();\n\n// Create the MyComponent instance\n$myComponent = new MyComponent();\n\n// Bind the eventsManager to the instance\n$myComponent-&gt;setEventsManager($eventsManager);\n\n// Attach the listener to the EventsManager\n$eventsManager-&gt;attach(\n    'my-component',\n    new SomeListener()\n);\n\n// Execute methods in the component\n$myComponent-&gt;someTask();\n</code></pre> <p>As <code>someTask()</code> is executed, the two methods in the listener will be executed, producing the following output:</p> <pre><code>Here, beforeSomeTask\nHere, someTask\nHere, afterSomeTask\n</code></pre> <p>Additional data may also be passed when triggering an event using the third parameter of <code>fire()</code>:</p> <pre><code>&lt;?php\n\n$eventsManager-&gt;fire('my-component:afterSomeTask', $this, $extraData);\n</code></pre> <p>In a listener the third parameter also receives this data:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\n\n// Receiving the data in the third parameter\n$eventsManager-&gt;attach(\n    'my-component',\n    function (Event $event, $component, $data) {\n        print_r($data);\n    }\n);\n\n// Receiving the data from the event context\n$eventsManager-&gt;attach(\n    'my-component',\n    function (Event $event, $component) {\n        print_r($event-&gt;getData());\n    }\n);\n</code></pre>"},{"location":"events/#using-services-from-the-di","title":"Using Services From The DI","text":"<p>By extending Phalcon\\Mvc\\User\\Plugin, you can access services from the DI, just like you would in a controller:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\User\\Plugin;\n\nclass SomeListener extends Plugin\n{\n    public function beforeSomeTask(Event $event, $myComponent)\n    {\n        echo 'Here, beforeSomeTask\\n';\n\n        $this-&gt;logger-&gt;debug(\n            'beforeSomeTask has been triggered'\n        );\n    }\n\n    public function afterSomeTask(Event $event, $myComponent)\n    {\n        echo 'Here, afterSomeTask\\n';\n\n        $this-&gt;logger-&gt;debug(\n            'afterSomeTask has been triggered'\n        );\n    }\n}\n</code></pre>"},{"location":"events/#event-propagationcancellation","title":"Event Propagation/Cancellation","text":"<p>Many listeners may be added to the same event manager. This means that for the same type of event, many listeners can be notified. The listeners are notified in the order they were registered in the EventsManager. Some events are cancelable, indicating that these may be stopped preventing other listeners from being notified about the event:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\n\n$eventsManager-&gt;attach(\n    'db',\n    function (Event $event, $connection) {\n        // We stop the event if it is cancelable\n        if ($event-&gt;isCancelable()) {\n            // Stop the event, so other listeners will not be notified about this\n            $event-&gt;stop();\n        }\n\n        // ...\n    }\n);\n</code></pre> <p>By default, events are cancelable - even most of the events produced by the framework are cancelables. You can fire a not-cancelable event by passing <code>false</code> in the fourth parameter of <code>fire()</code>:</p> <pre><code>&lt;?php\n\n$eventsManager-&gt;fire('my-component:afterSomeTask', $this, $extraData, false);\n</code></pre>"},{"location":"events/#listener-priorities","title":"Listener Priorities","text":"<p>When attaching listeners you can set a specific priority. With this feature you can attach listeners indicating the order in which they must be called:</p> <pre><code>&lt;?php\n\n$eventsManager-&gt;enablePriorities(true);\n\n$eventsManager-&gt;attach('db', new DbListener(), 150); // More priority\n$eventsManager-&gt;attach('db', new DbListener(), 100); // Normal priority\n$eventsManager-&gt;attach('db', new DbListener(), 50);  // Less priority\n</code></pre>"},{"location":"events/#collecting-responses","title":"Collecting Responses","text":"<p>The events manager can collect every response returned by every notified listener. This example explains how it works:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$eventsManager = new EventsManager();\n\n// Set up the events manager to collect responses\n$eventsManager-&gt;collectResponses(true);\n\n// Attach a listener\n$eventsManager-&gt;attach(\n    'custom:custom',\n    function () {\n        return 'first response';\n    }\n);\n\n// Attach a listener\n$eventsManager-&gt;attach(\n    'custom:custom',\n    function () {\n        return 'second response';\n    }\n);\n\n// Fire the event\n$eventsManager-&gt;fire('custom:custom', null);\n\n// Get all the collected responses\nprint_r($eventsManager-&gt;getResponses());\n</code></pre> <p>The above example produces:</p> <pre><code>    Array ( [0] =&gt; first response [1] =&gt; second response )\n</code></pre>"},{"location":"events/#implementing-your-own-eventsmanager","title":"Implementing your own EventsManager","text":"<p>The Phalcon\\Events\\ManagerInterface interface must be implemented to create your own EventsManager replacing the one provided by Phalcon.</p>"},{"location":"events/#list-of-events","title":"List of Events","text":"<p>The events available in Phalcon are:</p> Component Event ACL <code>acl:afterCheckAccess</code> ACL <code>acl:beforeCheckAccess</code> Application <code>application:afterHandleRequest</code> Application <code>application:afterStartModule</code> Application <code>application:beforeHandleRequest</code> Application <code>application:beforeSendResponse</code> Application <code>application:beforeStartModule</code> Application <code>application:boot</code> Application <code>application:viewRender</code> CLI <code>dispatch:beforeException</code> Collection <code>afterCreate</code> Collection <code>afterSave</code> Collection <code>afterUpdate</code> Collection <code>afterValidation</code> Collection <code>afterValidationOnCreate</code> Collection <code>afterValidationOnUpdate</code> Collection <code>beforeCreate</code> Collection <code>beforeSave</code> Collection <code>beforeUpdate</code> Collection <code>beforeValidation</code> Collection <code>beforeValidationOnCreate</code> Collection <code>beforeValidationOnUpdate</code> Collection <code>notDeleted</code> Collection <code>notSave</code> Collection <code>notSaved</code> Collection <code>onValidationFails</code> Collection <code>validation</code> Collection Manager <code>collectionManager:afterInitialize</code> Console <code>console:afterHandleTask</code> Console <code>console:afterStartModule</code> Console <code>console:beforeHandleTask</code> Console <code>console:beforeStartModule</code> Db <code>db:afterQuery</code> Db <code>db:beforeQuery</code> Db <code>db:beginTransaction</code> Db <code>db:createSavepoint</code> Db <code>db:commitTransaction</code> Db <code>db:releaseSavepoint</code> Db <code>db:rollbackTransaction</code> Db <code>db:rollbackSavepoint</code> Dispatcher <code>dispatch:afterExecuteRoute</code> Dispatcher <code>dispatch:afterDispatch</code> Dispatcher <code>dispatch:afterDispatchLoop</code> Dispatcher <code>dispatch:afterInitialize</code> Dispatcher <code>dispatch:beforeException</code> Dispatcher <code>dispatch:beforeExecuteRoute</code> Dispatcher <code>dispatch:beforeDispatch</code> Dispatcher <code>dispatch:beforeDispatchLoop</code> Dispatcher <code>dispatch:beforeForward</code> Dispatcher <code>dispatch:beforeNotFoundAction</code> Loader <code>loader:afterCheckClass</code> Loader <code>loader:beforeCheckClass</code> Loader <code>loader:beforeCheckPath</code> Loader <code>loader:pathFound</code> Micro <code>micro:afterHandleRoute</code> Micro <code>micro:afterExecuteRoute</code> Micro <code>micro:beforeExecuteRoute</code> Micro <code>micro:beforeHandleRoute</code> Micro <code>micro:beforeNotFound</code> Middleware <code>afterBinding</code> Middleware <code>afterExecuteRoute</code> Middleware <code>afterHandleRoute</code> Middleware <code>beforeExecuteRoute</code> Middleware <code>beforeHandleRoute</code> Middleware <code>beforeNotFound</code> Model <code>afterCreate</code> Model <code>afterDelete</code> Model <code>afterSave</code> Model <code>afterUpdate</code> Model <code>afterValidation</code> Model <code>afterValidationOnCreate</code> Model <code>afterValidationOnUpdate</code> Model <code>beforeDelete</code> Model <code>notDeleted</code> Model <code>beforeCreate</code> Model <code>beforeDelete</code> Model <code>beforeSave</code> Model <code>beforeUpdate</code> Model <code>beforeValidation</code> Model <code>beforeValidationOnCreate</code> Model <code>beforeValidationOnUpdate</code> Model <code>notSave</code> Model <code>notSaved</code> Model <code>onValidationFails</code> Model <code>prepareSave</code> Models Manager <code>modelsManager:afterInitialize</code> Request <code>request:afterAuthorizationResolve</code> Request <code>request:beforeAuthorizationResolve</code> Router <code>router:beforeCheckRoutes</code> Router <code>router:beforeCheckRoute</code> Router <code>router:matchedRoute</code> Router <code>router:notMatchedRoute</code> Router <code>router:afterCheckRoutes</code> Router <code>router:beforeMount</code> View <code>view:afterRender</code> View <code>view:afterRenderView</code> View <code>view:beforeRender</code> View <code>view:beforeRenderView</code> View <code>view:notFoundView</code> Volt <code>compileFilter</code> Volt <code>compileFunction</code> Volt <code>compileStatement</code> Volt <code>resolveExpression</code>"},{"location":"filter/","title":"Filtering and Sanitizing","text":"<p>Sanitizing user input is a critical part of software development. Trusting or neglecting to sanitize user input could lead to unauthorized access to the content of your application, mainly user data, or even the server your application is hosted on.</p> <p></p> <p>Full image on XKCD</p> <p>The Phalcon\\Filter component provides a set of commonly used filters and data sanitizing helpers. It provides object-oriented wrappers around the PHP filter extension.</p>"},{"location":"filter/#types-of-built-in-filters","title":"Types of Built-in Filters","text":"<p>The following are the built-in filters provided by this component:</p> Name Description absint Casts the value as an integer and returns the absolute value of it. alphanum Remove all characters except [a-zA-Z0-9] email Remove all characters except letters, digits and <code>!#$%&amp;*+-/=?^_</code>~@.[]`. float Remove all characters except digits, dot, plus and minus sign. float! Remove all characters except digits, dot, plus and minus sign and cast the result as a float. int Remove all characters except digits, plus and minus sign. int! Remove all characters except digits, plus and minus sign and cast the result as an integer. lower Applies the strtolower function string Strip tags and encode HTML entities, including single and double quotes. striptags Applies the strip_tags function trim Applies the trim function upper Applies the strtoupper function <p>Please note that the component uses the filter_var PHP function internally.</p> <p>Constants are available and can be used to define the type of filtering required:</p> <pre><code>&lt;?php\nconst FILTER_ABSINT     = \"absint\";\nconst FILTER_ALPHANUM   = \"alphanum\";\nconst FILTER_EMAIL      = \"email\";\nconst FILTER_FLOAT      = \"float\";\nconst FILTER_FLOAT_CAST = \"float!\";\nconst FILTER_INT        = \"int\";\nconst FILTER_INT_CAST   = \"int!\";\nconst FILTER_LOWER      = \"lower\";\nconst FILTER_STRING     = \"string\";\nconst FILTER_STRIPTAGS  = \"striptags\";\nconst FILTER_TRIM       = \"trim\";\nconst FILTER_UPPER      = \"upper\";\n</code></pre>"},{"location":"filter/#sanitizing-data","title":"Sanitizing data","text":"<p>Sanitizing is the process which removes specific characters from a value, that are not required or desired by the user or application. By sanitizing input we ensure that application integrity will be intact.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Filter;\n\n$filter = new Filter();\n\n// Returns 'someone@example.com'\n$filter-&gt;sanitize('some(one)@exa\\mple.com', 'email');\n\n// Returns 'hello'\n$filter-&gt;sanitize('hello&lt;&lt;', 'string');\n\n// Returns '100019'\n$filter-&gt;sanitize('!100a019', 'int');\n\n// Returns '100019.01'\n$filter-&gt;sanitize('!100a019.01a', 'float');\n</code></pre>"},{"location":"filter/#sanitizing-from-controllers","title":"Sanitizing from Controllers","text":"<p>You can access a Phalcon\\Filter object from your controllers when accessing <code>GET</code> or <code>POST</code> input data (through the request object). The first parameter is the name of the variable to be obtained; the second is the filter to be applied on it.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass ProductsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Sanitizing price from input\n        $price = $this-&gt;request-&gt;getPost('price', 'double');\n\n        // Sanitizing email from input\n        $email = $this-&gt;request-&gt;getPost('customerEmail', 'email');\n    }\n}\n</code></pre>"},{"location":"filter/#filtering-action-parameters","title":"Filtering Action Parameters","text":"<p>The next example shows you how to sanitize the action parameters within a controller action:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass ProductsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction($productId)\n    {\n        $productId = $this-&gt;filter-&gt;sanitize($productId, 'int');\n    }\n}\n</code></pre>"},{"location":"filter/#filtering-data","title":"Filtering data","text":"<p>In addition to sanitizing, Phalcon\\Filter also provides filtering by removing or modifying input data to the format we expect.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Filter;\n\n$filter = new Filter();\n\n// Returns 'Hello'\n$filter-&gt;sanitize('&lt;h1&gt;Hello&lt;/h1&gt;', 'striptags');\n\n// Returns 'Hello'\n$filter-&gt;sanitize('  Hello   ', 'trim');\n</code></pre>"},{"location":"filter/#combining-filters","title":"Combining Filters","text":"<p>You can also run multiple filters on a string at the same time by passing an array of filter identifiers as the second parameter:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Filter;\n\n$filter = new Filter();\n\n// Returns 'Hello'\n$filter-&gt;sanitize(\n    '   &lt;h1&gt; Hello &lt;/h1&gt;   ',\n    [\n        'striptags',\n        'trim',\n    ]\n);\n</code></pre>"},{"location":"filter/#adding-filters","title":"Adding filters","text":"<p>You can add your own filters to Phalcon\\Filter. The filter function could be an anonymous function:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Filter;\n\n$filter = new Filter();\n\n// Using an anonymous function\n$filter-&gt;add(\n    'md5',\n    function ($value) {\n        return preg_replace('/[^0-9a-f]/', '', $value);\n    }\n);\n\n// Sanitize with the 'md5' filter\n$filtered = $filter-&gt;sanitize($possibleMd5, 'md5');\n</code></pre> <p>Or, if you prefer, you can implement the filter in a class:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Filter;\n\nclass IPv4Filter\n{\n    public function filter($value)\n    {\n        return filter_var($value, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4);\n    }\n}\n\n$filter = new Filter();\n\n// Using an object\n$filter-&gt;add(\n    'ipv4',\n    new IPv4Filter()\n);\n\n// Sanitize with the 'ipv4' filter\n$filteredIp = $filter-&gt;sanitize('127.0.0.1', 'ipv4');\n</code></pre>"},{"location":"filter/#complex-sanitizing-and-filtering","title":"Complex Sanitizing and Filtering","text":"<p>PHP itself provides an excellent filter extension you can use. Check out its documentation: Data Filtering at PHP Documentation</p>"},{"location":"filter/#implementing-your-own-filter","title":"Implementing your own Filter","text":"<p>The Phalcon\\FilterInterface interface must be implemented to create your own filtering service replacing the one provided by Phalcon.</p>"},{"location":"flash/","title":"Flashing Messages","text":"<p>Flash messages are used to notify the user about the state of actions he/she made or simply show information to the users. These kinds of messages can be generated using this component.</p>"},{"location":"flash/#adapters","title":"Adapters","text":"<p>This component makes use of adapters to define the behavior of the messages after being passed to the Flasher:</p> Adapter Description API Direct Directly outputs the messages passed to the flasher Phalcon\\Flash\\Direct Session Temporarily stores the messages in session, then messages can be printed in the next request Phalcon\\Flash\\Session"},{"location":"flash/#usage","title":"Usage","text":"<p>Usually the Flash Messaging service is requested from the services container. If you're using Phalcon\\Di\\FactoryDefault then Phalcon\\Flash\\Direct is automatically registered as <code>flash</code> service and Phalcon\\Flash\\Session is automatically registered as <code>flashSession</code> service. You can also manually register it:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Flash\\Direct as FlashDirect;\nuse Phalcon\\Flash\\Session as FlashSession;\n\n// Set up the flash service\n$di-&gt;set(\n    'flash',\n    function () {\n        return new FlashDirect();\n    }\n);\n\n// Set up the flash session service\n$di-&gt;set(\n    'flashSession',\n    function () {\n        return new FlashSession();\n    }\n);\n</code></pre> <p>This way, you can use it in controllers or views:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        $this-&gt;flash-&gt;success('The post was correctly saved!');\n    }\n}\n</code></pre> <p>There are four built-in message types supported:</p> <pre><code>&lt;?php\n\n$this-&gt;flash-&gt;error('too bad! the form had errors');\n\n$this-&gt;flash-&gt;success('yes!, everything went very smoothly');\n\n$this-&gt;flash-&gt;notice('this a very important information');\n\n$this-&gt;flash-&gt;warning(\"best check yo self, you're not looking too good.\");\n</code></pre> <p>You can also add messages with your own types using the <code>message()</code> method:</p> <pre><code>&lt;?php\n\n$this-&gt;flash-&gt;message('debug', \"this is debug message, you don't say\");\n</code></pre>"},{"location":"flash/#printing-messages","title":"Printing Messages","text":"<p>Messages sent to the flash service are automatically formatted with HTML:</p> <pre><code>&lt;div class='errorMessage'&gt;too bad! the form had errors&lt;/div&gt;\n\n&lt;div class='successMessage'&gt;yes!, everything went very smoothly&lt;/div&gt;\n\n&lt;div class='noticeMessage'&gt;this a very important information&lt;/div&gt;\n\n&lt;div class='warningMessage'&gt;best check yo self, you're not looking too good.&lt;/div&gt;\n</code></pre> <p>As you can see, CSS classes are added automatically to the <code>&lt;div&gt;</code>s. These classes allow you to define the graphical presentation of the messages in the browser. The CSS classes can be overridden, for example, if you're using Twitter Bootstrap, classes can be configured as:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Flash\\Direct as FlashDirect;\n\n// Register the flash service with custom CSS classes\n$di-&gt;set(\n    'flash',\n    function () {\n        $flash = new FlashDirect(\n            [\n                'error'   =&gt; 'alert alert-danger',\n                'success' =&gt; 'alert alert-success',\n                'notice'  =&gt; 'alert alert-info',\n                'warning' =&gt; 'alert alert-warning',\n            ]\n        );\n\n        return $flash;\n    }\n);\n</code></pre> <p>Then the messages would be printed as follows:</p> <pre><code>&lt;div class='alert alert-danger'&gt;too bad! the form had errors&lt;/div&gt;\n\n&lt;div class='alert alert-success'&gt;yes!, everything went very smoothly&lt;/div&gt;\n\n&lt;div class='alert alert-info'&gt;this a very important information&lt;/div&gt;\n\n&lt;div class='alert alert-warning'&gt;best check yo self, you're not looking too good.&lt;/div&gt;\n</code></pre>"},{"location":"flash/#implicit-flush-vs-session","title":"Implicit Flush vs. Session","text":"<p>Depending on the adapter used to send the messages, it could be producing output directly, or be temporarily storing the messages in session to be shown later. When should you use each? That usually depends on the type of redirection you do after sending the messages. For example, if you make a <code>forward</code> is not necessary to store the messages in session, but if you do a HTTP redirect then, they need to be stored in session:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass ContactController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Store the post\n\n        // Using direct flash\n        $this-&gt;flash-&gt;success('Your information was stored correctly!');\n\n        // Forward to the index action\n        return $this-&gt;dispatcher-&gt;forward(\n            [\n                'action' =&gt; 'index'\n            ]\n        );\n    }\n}\n</code></pre> <p>Or using a HTTP redirection:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass ContactController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Store the post\n\n        // Using session flash\n        $this-&gt;flashSession-&gt;success('Your information was stored correctly!');\n\n        // Make a full HTTP redirection\n        return $this-&gt;response-&gt;redirect('contact/index');\n    }\n}\n</code></pre> <p>In this case you need to manually print the messages in the corresponding view:</p> <pre><code>&lt;!-- app/views/contact/index.phtml --&gt;\n\n&lt;p&gt;&lt;?php $this-&gt;flashSession-&gt;output() ?&gt;&lt;/p&gt;\n</code></pre> <p>The attribute <code>flashSession</code> is how the flash was previously set into the dependency injection container. You need to start the session first to successfully use the <code>flashSession</code> messenger.</p>"},{"location":"forms/","title":"Forms","text":"<p>Phalcon\\Forms\\Form is a component that helps with the creation and maintenance of forms in web applications.</p> <p>The following example shows its basic usage:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Select;\n\n$form = new Form();\n\n$form-&gt;add(\n    new Text(\n        'name'\n    )\n);\n\n$form-&gt;add(\n    new Text(\n        'telephone'\n    )\n);\n\n$form-&gt;add(\n    new Select(\n        'telephoneType',\n        [\n            'H' =&gt; 'Home',\n            'C' =&gt; 'Cell',\n        ]\n    )\n);\n</code></pre> <p>Forms can be rendered based on the form definition:</p> <pre><code>&lt;h1&gt;\n    Contacts\n&lt;/h1&gt;\n\n&lt;form method='post'&gt;\n\n    &lt;p&gt;\n        &lt;label&gt;\n            Name\n        &lt;/label&gt;\n\n        &lt;?php echo $form-&gt;render('name'); ?&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;\n        &lt;label&gt;\n            Telephone\n        &lt;/label&gt;\n\n        &lt;?php echo $form-&gt;render('telephone'); ?&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;\n        &lt;label&gt;\n            Type\n        &lt;/label&gt;\n\n        &lt;?php echo $form-&gt;render('telephoneType'); ?&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;\n        &lt;input type='submit' value='Save' /&gt;\n    &lt;/p&gt;\n\n&lt;/form&gt;\n</code></pre> <p>Each element in the form can be rendered as required by the developer. Internally, Phalcon\\Tag is used to produce the correct HTML for each element and you can pass additional HTML attributes as the second parameter of <code>render()</code>:</p> <pre><code>&lt;p&gt;\n    &lt;label&gt;\n        Name\n    &lt;/label&gt;\n\n    &lt;?php echo $form-&gt;render('name', ['maxlength' =&gt; 30, 'placeholder' =&gt; 'Type your name']); ?&gt;\n&lt;/p&gt;\n</code></pre> <p>HTML attributes also can be set in the element's definition:</p> <pre><code>&lt;?php\n\n$form-&gt;add(\n    new Text(\n        'name',\n        [\n            'maxlength'   =&gt; 30,\n            'placeholder' =&gt; 'Type your name',\n        ]\n    )\n);\n</code></pre>"},{"location":"forms/#initializing-forms","title":"Initializing forms","text":"<p>As seen before, forms can be initialized outside the form class by adding elements to it. You can re-use code or organize your form classes implementing the form in a separated file:</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Select;\n\nclass ContactForm extends Form\n{\n    public function initialize()\n    {\n        $this-&gt;add(\n            new Text(\n                'name'\n            )\n        );\n\n        $this-&gt;add(\n            new Text(\n                'telephone'\n            )\n        );\n\n        $this-&gt;add(\n            new Select(\n                'telephoneType',\n                TelephoneTypes::find(),\n                [\n                    'using' =&gt; [\n                        'id',\n                        'name',\n                    ],\n                    'useEmpty'   =&gt; true,\n                    'emptyText'  =&gt; 'Select one...',\n                    'emptyValue' =&gt; '',\n                ]\n            )\n        );\n    }\n}\n</code></pre> Additionally, the Select elements support the <code>useEmpty</code> option to enable the use of a blank element within the list of available options. The options <code>emptyText</code> and<code>emptyValue</code> are optional, which allow you to customize, respectively, the text and the value of the empty element</p> <p>Phalcon\\Forms\\Form extends Phalcon\\Di\\Injectable so you have access to the application services if needed:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Hidden;\n\nclass ContactForm extends Form\n{\n    /**\n     * This method returns the default value for field 'csrf'\n     */\n    public function getCsrf()\n    {\n        return $this-&gt;security-&gt;getToken();\n    }\n\n    public function initialize()\n    {\n        // Set the same form as entity\n        $this-&gt;setEntity($this);\n\n        // Add a text element to capture the 'email'\n        $this-&gt;add(\n            new Text(\n                'email'\n            )\n        );\n\n        // Add a text element to put a hidden CSRF\n        $this-&gt;add(\n            new Hidden(\n                'csrf'\n            )\n        );\n    }\n}\n</code></pre> <p>The associated entity added to the form in the initialization and custom user options are passed to the form constructor:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Hidden;\n\nclass UsersForm extends Form\n{\n    /**\n     * Forms initializer\n     *\n     * @param Users $user\n     * @param array $options\n     */\n    public function initialize(Users $user, array $options)\n    {\n        if ($options['edit']) {\n            $this-&gt;add(\n                new Hidden(\n                    'id'\n                )\n            );\n        } else {\n            $this-&gt;add(\n                new Text(\n                    'id'\n                )\n            );\n        }\n\n        $this-&gt;add(\n            new Text(\n                'name'\n            )\n        );\n    }\n}\n</code></pre> <p>In the form's instantiation you must use:</p> <pre><code>&lt;?php\n\n$form = new UsersForm(\n    new Users(),\n    [\n        'edit' =&gt; true,\n    ]\n);\n</code></pre>"},{"location":"forms/#validation","title":"Validation","text":"<p>Phalcon forms are integrated with the validation component to offer instant validation. Built-in or custom validators could be set to each element:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\nuse Phalcon\\Validation\\Validator\\StringLength;\n\n$name = new Text(\n    'name'\n);\n\n$name-&gt;addValidator(\n    new PresenceOf(\n        [\n            'message' =&gt; 'The name is required',\n        ]\n    )\n);\n\n$name-&gt;addValidator(\n    new StringLength(\n        [\n            'min'            =&gt; 10,\n            'messageMinimum' =&gt; 'The name is too short',\n        ]\n    )\n);\n\n$form-&gt;add($name);\n</code></pre> <p>Then you can validate the form according to the input entered by the user:</p> <pre><code>&lt;?php\n\nif (!$form-&gt;isValid($_POST)) {\n    $messages = $form-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo $message, '&lt;br&gt;';\n    }\n}\n</code></pre> <p>Validators are executed in the same order as they were registered.</p> <p>By default messages generated by all the elements in the form are joined so they can be traversed using a single foreach, you can change this behavior to get the messages separated by the field:</p> <pre><code>&lt;?php\n\nforeach ($form-&gt;getMessages(false) as $attribute =&gt; $messages) {\n    echo 'Messages generated by ', $attribute, ':', \"\\n\";\n\n    foreach ($messages as $message) {\n        echo $message, '&lt;br&gt;';\n    }\n}\n</code></pre> <p>Or get specific messages for an element:</p> <pre><code>&lt;?php\n\n$messages = $form-&gt;getMessagesFor('name');\n\nforeach ($messages as $message) {\n    echo $message, '&lt;br&gt;';\n}\n</code></pre>"},{"location":"forms/#filtering","title":"Filtering","text":"<p>A form is also able to filter data before it is validated. You can set filters in each element:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Element\\Text;\n\n$name = new Text(\n    'name'\n);\n\n// Set multiple filters\n$name-&gt;setFilters(\n    [\n        'string',\n        'trim',\n    ]\n);\n\n$form-&gt;add($name);\n\n$email = new Text(\n    'email'\n);\n\n// Set one filter\n$email-&gt;setFilters(\n    'email'\n);\n\n$form-&gt;add($email);\n</code></pre> <p>NOTE</p> <p>Learn more about filtering in Phalcon by reading the Filter documentation </p>"},{"location":"forms/#forms-entities","title":"Forms + Entities","text":"<p>An entity such as a model/collection/plain instance or just a plain PHP class can be linked to the form in order to set default values in the form's elements or assign the values from the form to the entity easily:</p> <pre><code>&lt;?php\n\n$robot = Robots::findFirst();\n\n$form = new Form($robot);\n\n$form-&gt;add(\n    new Text(\n        'name'\n    )\n);\n\n$form-&gt;add(\n    new Text(\n        'year'\n    )\n);\n</code></pre> <p>Once the form is rendered if there is no default values assigned to the elements it will use the ones provided by the entity:</p> <pre><code>&lt;?php echo $form-&gt;render('name'); ?&gt;\n</code></pre> <p>You can validate the form and assign the values from the user input in the following way:</p> <pre><code>&lt;?php\n\n$form-&gt;bind($_POST, $robot);\n\n// Check if the form is valid\nif ($form-&gt;isValid()) {\n    // Save the entity\n    $robot-&gt;save();\n}\n</code></pre> <p>Setting up a plain class as entity also is possible:</p> <pre><code>&lt;?php\n\nclass Preferences\n{\n    public $timezone = 'Europe/Amsterdam';\n\n    public $receiveEmails = 'No';\n}\n</code></pre> <p>Using this class as entity, allows the form to take the default values from it:</p> <pre><code>&lt;?php\n\n$form = new Form(\n    new Preferences()\n);\n\n$form-&gt;add(\n    new Select(\n        'timezone',\n        [\n            'America/New_York'  =&gt; 'New York',\n            'Europe/Amsterdam'  =&gt; 'Amsterdam',\n            'America/Sao_Paulo' =&gt; 'Sao Paulo',\n            'Asia/Tokyo'        =&gt; 'Tokyo',\n        ]\n    )\n);\n\n$form-&gt;add(\n    new Select(\n        'receiveEmails',\n        [\n            'Yes' =&gt; 'Yes, please!',\n            'No'  =&gt; 'No, thanks',\n        ]\n    )\n);\n</code></pre> <p>Entities can implement getters, which have a higher precedence than public properties. These methods give you more freedom to produce values:</p> <pre><code>&lt;?php\n\nclass Preferences\n{\n    public $timezone;\n\n    public $receiveEmails;\n\n    public function getTimezone()\n    {\n        return 'Europe/Amsterdam';\n    }\n\n    public function getReceiveEmails()\n    {\n        return 'No';\n    }\n}\n</code></pre>"},{"location":"forms/#form-elements","title":"Form Elements","text":"<p>Phalcon provides a set of built-in elements to use in your forms, all these elements are located in the Phalcon\\Forms\\Element namespace:</p> Name Description Phalcon\\Forms\\Element\\Text Generate <code>INPUT[type=text]</code> elements Phalcon\\Forms\\Element\\Password Generate <code>INPUT[type=password]</code> elements Phalcon\\Forms\\Element\\Select Generate <code>SELECT</code> tag (combo lists) elements based on choices Phalcon\\Forms\\Element\\Check Generate <code>INPUT[type=check]</code> elements Phalcon\\Forms\\Element\\TextArea Generate <code>TEXTAREA</code> elements Phalcon\\Forms\\Element\\Hidden Generate <code>INPUT[type=hidden]</code> elements Phalcon\\Forms\\Element\\File Generate <code>INPUT[type=file]</code> elements Phalcon\\Forms\\Element\\Date Generate <code>INPUT[type=date]</code> elements Phalcon\\Forms\\Element\\Numeric Generate <code>INPUT[type=number]</code> elements Phalcon\\Forms\\Element\\Submit Generate <code>INPUT[type=submit]</code> elements Phalcon\\Forms\\Element\\Text Generate <code>INPUT[type=text]</code> elements Phalcon\\Forms\\Element\\TextArea Generate <code>TEXTAREA</code> elements"},{"location":"forms/#event-callbacks","title":"Event Callbacks","text":"<p>Whenever forms are implemented as classes, the callbacks: <code>beforeValidation()</code> and <code>afterValidation()</code> can be implemented in the form's class to perform pre-validations and post-validations:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Form;\n\nclass ContactForm extends Form\n{\n    public function beforeValidation()\n    {\n\n    }\n}\n</code></pre>"},{"location":"forms/#rendering-forms","title":"Rendering Forms","text":"<p>You can render the form with total flexibility, the following example shows how to render each element using a standard procedure:</p> <pre><code>&lt;?php\n\n&lt;form method='post'&gt;\n    &lt;?php\n\n        // Traverse the form\n        foreach ($form as $element) {\n            // Get any generated messages for the current element\n            $messages = $form-&gt;getMessagesFor(\n                $element-&gt;getName()\n            );\n\n            if (count($messages)) {\n                // Print each element\n                echo '&lt;div class='messages'&gt;';\n\n                foreach ($messages as $message) {\n                    echo $message;\n                }\n\n                echo '&lt;/div&gt;';\n            }\n\n            echo '&lt;p&gt;';\n\n            echo '&lt;label for='', $element-&gt;getName(), ''&gt;', $element-&gt;getLabel(), '&lt;/label&gt;';\n\n            echo $element;\n\n            echo '&lt;/p&gt;';\n        }\n\n    ?&gt;\n\n    &lt;input type='submit' value='Send' /&gt;\n&lt;/form&gt;\n</code></pre> <p>Or reuse the logic in your form class:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Form;\n\nclass ContactForm extends Form\n{\n    public function initialize()\n    {\n        // ...\n    }\n\n    public function renderDecorated($name)\n    {\n        $element  = $this-&gt;get($name);\n\n        // Get any generated messages for the current element\n        $messages = $this-&gt;getMessagesFor(\n            $element-&gt;getName()\n        );\n\n        if (count($messages)) {\n            // Print each element\n            echo \"&lt;div class='messages'&gt;\";\n\n            foreach ($messages as $message) {\n                echo $this-&gt;flash-&gt;error($message);\n            }\n\n            echo '&lt;/div&gt;';\n        }\n\n        echo '&lt;p&gt;';\n\n        echo '&lt;label for=\"', $element-&gt;getName(), '\"&gt;', $element-&gt;getLabel(), '&lt;/label&gt;';\n\n        echo $element;\n\n        echo '&lt;/p&gt;';\n    }\n}\n</code></pre> <p>In the view:</p> <pre><code>&lt;?php\n\necho $element-&gt;renderDecorated('name');\n\necho $element-&gt;renderDecorated('telephone');\n</code></pre>"},{"location":"forms/#creating-form-elements","title":"Creating Form Elements","text":"<p>In addition to the form elements provided by Phalcon you can create your own custom elements:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Element;\n\nclass MyElement extends Element\n{\n    public function render($attributes = null)\n    {\n        $html = // ... Produce some HTML\n\n        return $html;\n    }\n}\n</code></pre>"},{"location":"forms/#forms-manager","title":"Forms Manager","text":"<p>This component provides a forms manager that can be used by the developer to register forms and access them via the service locator:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Manager as FormsManager;\n\n$di['forms'] = function () {\n    return new FormsManager();\n};\n</code></pre> <p>Forms are added to the forms manager and referenced by a unique name:</p> <pre><code>&lt;?php\n\n$this-&gt;forms-&gt;set(\n    'login',\n    new LoginForm()\n);\n</code></pre> <p>Using the unique name, forms can be accessed in any part of the application:</p> <pre><code>&lt;?php\n\n$loginForm = $this-&gt;forms-&gt;get('login');\n\necho $loginForm-&gt;render();\n</code></pre>"},{"location":"forms/#external-resources","title":"External Resources","text":"<ul> <li>V\u00f6kur\u00f3, is a sample application that uses the forms builder to create and manage forms, [GitHub]</li> </ul>"},{"location":"generating-backtrace/","title":"Generating a backtrace","text":"<p>Sometimes due to segmentation faults, Phalcon could crash some of your web server processes. Please help us to identify the problem by adding a crash backtrace to your bug report.</p> <p>Please follow this guide to understand how to generate the backtrace.</p> <p>https://bugs.php.net/bugs-generating-backtrace.php</p> <p>https://bugs.php.net/bugs-generating-backtrace-win32.php</p>"},{"location":"i18n/","title":"Internationalization","text":"<p>Phalcon is written in C as an extension for PHP. There is a PECL extension that offers internationalization functions to PHP applications called intl. Starting from PHP 5.4/5.5 this extension is bundled with PHP. Its documentation can be found in the pages of the official PHP manual.</p> <p>Phalcon does not offer this functionality, since creating such a component would be replicating existing code.</p> <p>In the examples below, we will show you how to implement the intl extension's functionality into Phalcon powered applications.</p> <p>NOTE</p> <p>This guide is not intended to be a complete documentation of the intl extension. Please visit its the documentation of the extension for a reference. </p>"},{"location":"i18n/#find-out-best-available-locale","title":"Find out best available Locale","text":"<p>There are several ways to find out the best available locale using intl. One of them is to check the HTTP <code>Accept-Language</code> header: </p> <pre><code>&lt;?php\n\n$locale = Locale::acceptFromHttp($_SERVER['HTTP_ACCEPT_LANGUAGE']);\n\n// Locale could be something like 'en_GB' or 'en'\necho $locale;\n</code></pre> <p>Below method returns a locale identified. It is used to get language, culture, or regionally-specific behavior from the Locale API.</p> <p>Examples of identifiers include:</p> <ul> <li>en-US (English, United States)</li> <li>ru-RU (Russian, Russia)</li> <li>zh-Hant-TW (Chinese, Traditional Script, Taiwan)</li> <li>fr-CA, fr-FR (French for Canada and France respectively)</li> </ul>"},{"location":"i18n/#formatting-messages-based-on-locale","title":"Formatting messages based on Locale","text":"<p>Part of creating a localized application is to produce concatenated, language-neutral messages. The MessageFormatter allows for the production of those messages.</p> <p>Printing numbers formatted based on some locale:</p> <pre><code>&lt;?php\n\n// Prints \u20ac 4 560\n$formatter = new MessageFormatter('fr_FR', '\u20ac {0, number, integer}');\necho $formatter-&gt;format([4560]);\n\n// Prints USD$ 4,560.5\n$formatter = new MessageFormatter('en_US', 'USD$ {0, number}');\necho $formatter-&gt;format([4560.50]);\n\n// Prints ARS$ 1.250,25\n$formatter = new MessageFormatter('es_AR', 'ARS$ {0, number}');\necho $formatter-&gt;format([1250.25]);\n</code></pre> <p>Message formatting using time and date patterns:</p> <pre><code>&lt;?php\n\n// Setting parameters\n$time   = time();\n$values = [7, $time, $time];\n\n// Prints 'At 3:50:31 PM on Apr 19, 2015, there was a disturbance on planet 7.'\n$pattern   = 'At {1, time} on {1, date}, there was a disturbance on planet {0, number}.';\n$formatter = new MessageFormatter('en_US', $pattern);\necho $formatter-&gt;format($values);\n\n// Prints '\u00c0 15:53:01 le 19 avr. 2015, il y avait une perturbation sur la plan\u00e8te 7.'\n$pattern   = '\u00c0 {1, time} le {1, date}, il y avait une perturbation sur la plan\u00e8te {0, number}.';\n$formatter = new MessageFormatter('fr_FR', $pattern);\necho $formatter-&gt;format($values);\n</code></pre>"},{"location":"i18n/#locale-sensitive-comparison","title":"Locale-Sensitive comparison","text":"<p>The Collator class provides string comparison capability with support for appropriate locale-sensitive sort orderings. Check the examples below on the usage of this class:</p> <pre><code>&lt;?php\n\n// Create a collator using Spanish locale\n$collator = new Collator('es');\n\n// Returns that the strings are equal, in spite of the emphasis on the 'o'\n$collator-&gt;setStrength(Collator::PRIMARY);\nvar_dump($collator-&gt;compare('una canci\u00f3n', 'una cancion'));\n\n// Returns that the strings are not equal\n$collator-&gt;setStrength(Collator::DEFAULT_VALUE);\nvar_dump($collator-&gt;compare('una canci\u00f3n', 'una cancion'));\n</code></pre>"},{"location":"i18n/#transliteration","title":"Transliteration","text":"<p>Transliterator provides transliteration of strings:</p> <pre><code>&lt;?php\n\n$id = 'Any-Latin; NFD; [:Nonspacing Mark:] Remove; NFC; [:Punctuation:] Remove; Lower();';\n$transliterator = Transliterator::create($id);\n\n$string = \"gar\u00e7on-\u00e9tudiant-o\u00f9-L'\u00e9cole\";\necho $transliterator-&gt;transliterate($string); // garconetudiantoulecole\n</code></pre>"},{"location":"image/","title":"Images","text":"<p>Phalcon\\Image is the component that allows you to manipulate image files. Multiple operations can be performed on the same image object.</p>"},{"location":"image/#adapters","title":"Adapters","text":"<p>This component makes use of adapters to encapsulate specific image manipulator programs. The following image manipulator programs are supported:</p> Class Description Phalcon\\Image\\Adapter\\Gd Requires the GD PHP extension Phalcon\\Image\\Adapter\\Imagick Requires the ImageMagick PHP extension"},{"location":"image/#factory","title":"Factory","text":"<p>Loads an Image Adapter class using <code>adapter</code> option.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Factory;\n\n$options = [\n    'width'   =&gt; 200,\n    'height'  =&gt; 200,\n    'file'    =&gt; 'upload/test.jpg',\n    'adapter' =&gt; 'imagick',\n];\n\n$image = Factory::load($options);\n</code></pre>"},{"location":"image/#implementing-your-own-adapters","title":"Implementing your own adapters","text":"<p>The Phalcon\\Image\\AdapterInterface interface must be implemented in order to create your own image adapters or extend the existing ones.</p>"},{"location":"image/#saving-and-rendering-images","title":"Saving and rendering images","text":"<p>Before we begin with the various features of the image component, it's worth understanding how to save and render these images.</p> <pre><code>&lt;?php\n\n$image = new \\Phalcon\\Image\\Adapter\\Gd('image.jpg');\n\n// ...\n\n// Overwrite the original image\n$image-&gt;save();\n</code></pre> <pre><code>&lt;?php\n\n$image = new \\Phalcon\\Image\\Adapter\\Gd('image.jpg');\n\n// ...\n\n// Save to 'new-image.jpg'\n$image-&gt;save('new-image.jpg');\n</code></pre> <p>You can also change the format of the image:</p> <pre><code>&lt;?php\n\n$image = new \\Phalcon\\Image\\Adapter\\Gd('image.jpg');\n\n// ...\n\n// Save as a PNG file\n$image-&gt;save('image.png');\n</code></pre> <p>When saving as a JPEG, you can also specify the quality as the second parameter:</p> <pre><code>&lt;?php\n\n$image = new \\Phalcon\\Image\\Adapter\\Gd('image.jpg');\n\n// ...\n\n// Save as a JPEG with 80% quality\n$image-&gt;save('image.jpg', 80);\n</code></pre>"},{"location":"image/#resizing-images","title":"Resizing images","text":"<p>There are several modes of resizing:</p> <ul> <li><code>\\Phalcon\\Image::WIDTH</code></li> <li><code>\\Phalcon\\Image::HEIGHT</code></li> <li><code>\\Phalcon\\Image::NONE</code></li> <li><code>\\Phalcon\\Image::TENSILE</code></li> <li><code>\\Phalcon\\Image::AUTO</code></li> <li><code>\\Phalcon\\Image::INVERSE</code></li> <li><code>\\Phalcon\\Image::PRECISE</code></li> </ul>"},{"location":"image/#phalconimagewidth","title":"<code>\\Phalcon\\Image::WIDTH</code>","text":"<p>The height will automatically be generated to keep the proportions the same; if you specify a height, it will be ignored.</p> <pre><code>&lt;?php\n\n$image = new \\Phalcon\\Image\\Adapter\\Gd('image.jpg');\n\n$image-&gt;resize(\n    300,\n    null,\n    \\Phalcon\\Image::WIDTH\n);\n\n$image-&gt;save('resized-image.jpg');\n</code></pre>"},{"location":"image/#phalconimageheight","title":"<code>\\Phalcon\\Image::HEIGHT</code>","text":"<p>The width will automatically be generated to keep the proportions the same; if you specify a width, it will be ignored.</p> <pre><code>&lt;?php\n\n$image = new \\Phalcon\\Image\\Adapter\\Gd('image.jpg');\n\n$image-&gt;resize(\n    null,\n    300,\n    \\Phalcon\\Image::HEIGHT\n);\n\n$image-&gt;save('resized-image.jpg');\n</code></pre>"},{"location":"image/#phalconimagenone","title":"<code>\\Phalcon\\Image::NONE</code>","text":"<ul> <li>The <code>NONE</code> constant ignores the original image's ratio.</li> <li>Neither width and height are required.</li> <li>If a dimension is not specified, the original dimension will be used.</li> <li>If the new proportions differ from the original proportions, the image may be distorted and stretched.</li> </ul> <pre><code>&lt;?php\n\n$image = new \\Phalcon\\Image\\Adapter\\Gd('image.jpg');\n\n$image-&gt;resize(\n    400,\n    200,\n    \\Phalcon\\Image::NONE\n);\n\n$image-&gt;save('resized-image.jpg');\n</code></pre>"},{"location":"image/#phalconimagetensile","title":"<code>\\Phalcon\\Image::TENSILE</code>","text":"<ul> <li>Similar to the <code>NONE</code> constant, the <code>TENSILE</code> constant ignores the original image's ratio.</li> <li>Both width and height are required.</li> <li>If the new proportions differ from the original proportions, the image may be distorted and stretched.</li> </ul> <pre><code>&lt;?php\n\n$image = new \\Phalcon\\Image\\Adapter\\Gd('image.jpg');\n\n$image-&gt;resize(\n    400,\n    200,\n    \\Phalcon\\Image::TENSILE\n);\n\n$image-&gt;save('resized-image.jpg');\n</code></pre>"},{"location":"image/#cropping-images","title":"Cropping images","text":"<p>For example, to get a 100px by 100px square from the centre of the image:</p> <pre><code>&lt;?php\n\n$image = new \\Phalcon\\Image\\Adapter\\Gd('image.jpg');\n\n$width   = 100;\n$height  = 100;\n$offsetX = (($image-&gt;getWidth() - $width) / 2);\n$offsetY = (($image-&gt;getHeight() - $height) / 2);\n\n$image-&gt;crop($width, $height, $offsetX, $offsetY);\n\n$image-&gt;save('cropped-image.jpg');\n</code></pre>"},{"location":"image/#rotating-images","title":"Rotating images","text":"<pre><code>&lt;?php\n\n$image = new \\Phalcon\\Image\\Adapter\\Gd('image.jpg');\n\n// Rotate an image by 90 degrees clockwise\n$image-&gt;rotate(90);\n\n$image-&gt;save('rotated-image.jpg');\n</code></pre>"},{"location":"image/#flipping-images","title":"Flipping images","text":"<p>You can flip an image horizontally (using the <code>\\Phalcon\\Image::HORIZONTAL</code> constant) and vertically (using the <code>\\Phalcon\\Image::VERTICAL</code> constant):</p> <pre><code>&lt;?php\n\n$image = new \\Phalcon\\Image\\Adapter\\Gd('image.jpg');\n\n// Flip an image horizontally\n$image-&gt;flip(\n    \\Phalcon\\Image::HORIZONTAL\n);\n\n$image-&gt;save('flipped-image.jpg');\n</code></pre>"},{"location":"image/#sharpening-images","title":"Sharpening images","text":"<p>The <code>sharpen()</code> method takes a single parameter - an integer between 0 (no effect) and 100 (very sharp):</p> <pre><code>&lt;?php\n\n$image = new \\Phalcon\\Image\\Adapter\\Gd('image.jpg');\n\n$image-&gt;sharpen(50);\n\n$image-&gt;save('sharpened-image.jpg');\n</code></pre>"},{"location":"image/#adding-watermarks-to-images","title":"Adding watermarks to images","text":"<pre><code>&lt;?php\n\n$image = new \\Phalcon\\Image\\Adapter\\Gd('image.jpg');\n\n$watermark = new \\Phalcon\\Image\\Adapter\\Gd('me.jpg');\n\n// Put the watermark in the top left corner\n$offsetX = 10;\n$offsetY = 10;\n\n$opacity = 70;\n\n$image-&gt;watermark(\n    $watermark,\n    $offsetX,\n    $offsetY,\n    $opacity\n);\n\n$image-&gt;save('watermarked-image.jpg');\n</code></pre> <p>Of course, you can also manipulate the watermarked image before applying it to the main image:</p> <pre><code>&lt;?php\n\n$image = new \\Phalcon\\Image\\Adapter\\Gd('image.jpg');\n\n$watermark = new \\Phalcon\\Image\\Adapter\\Gd('me.jpg');\n\n$watermark-&gt;resize(100, 100);\n$watermark-&gt;rotate(90);\n$watermark-&gt;sharpen(5);\n\n// Put the watermark in the bottom right corner with a 10px margin\n$offsetX = ($image-&gt;getWidth() - $watermark-&gt;getWidth() - 10);\n$offsetY = ($image-&gt;getHeight() - $watermark-&gt;getHeight() - 10);\n\n$opacity = 70;\n\n$image-&gt;watermark(\n    $watermark,\n    $offsetX,\n    $offsetY,\n    $opacity\n);\n\n$image-&gt;save('watermarked-image.jpg');\n</code></pre>"},{"location":"image/#blurring-images","title":"Blurring images","text":"<p>The <code>blur()</code> method takes a single parameter - an integer between 0 (no effect) and 100 (very blurry):</p> <pre><code>&lt;?php\n\n$image = new \\Phalcon\\Image\\Adapter\\Gd('image.jpg');\n\n$image-&gt;blur(50);\n\n$image-&gt;save('blurred-image.jpg');\n</code></pre>"},{"location":"image/#pixelating-images","title":"Pixelating images","text":"<p>The <code>pixelate()</code> method takes a single parameter - the higher the integer, the more pixelated the image becomes:</p> <pre><code>&lt;?php\n\n$image = new \\Phalcon\\Image\\Adapter\\Gd('image.jpg');\n\n$image-&gt;pixelate(10);\n\n$image-&gt;save('pixelated-image.jpg');\n</code></pre>"},{"location":"installation/","title":"Requirements","text":"<p>Phalcon needs PHP to run. Its loosely coupled design allows developers to install Phalcon and use its functionality without additional extensions. Certain components have dependencies to other extensions. For instance using database connectivity will require the <code>php_pdo</code> extension. If your RDBMS is MySql/MariaDb or Aurora databases you will need the <code>php_mysqlnd</code> extension also. Similarly, using a PostgreSql database with Phalcon requires the <code>php_pgsql</code> extension.</p>"},{"location":"installation/#hardware","title":"Hardware","text":"<p>Phalcon is designed to use as little resources as possible, while offering high performance. Although we have tested Phalcon in various low end environments, (such as 0.25GB RAM, 0.5 CPU), the hardware that you will choose will depend on the your application needs.</p> <p>Our website and blog (as well as other sites) are hosted on an Amazon VM with 512MB RAM and 1 vCPU.</p>"},{"location":"installation/#software","title":"Software","text":"<ul> <li>PHP &gt;= 5.5</li> </ul> <p>Pattern</p> <p>You should always try and use the latest version of Phalcon and PHP as both address bugs, security enhancements as well as performance. PHP 5.5 will be deprecated in the near future, and Phalcon 4 will only support PHP 7 </p> <p>Phalcon need the following extensions to run (minimal):</p> <ul> <li><code>curl</code></li> <li><code>gettext</code></li> <li><code>gd2</code> (to use the <code>Phalcon\\Image\\Adapter\\Gd</code> class)</li> <li><code>libpcre3-dev</code> (Debian/Ubuntu), <code>pcre-devel</code> (CentOS), <code>pcre</code> (macOS)</li> <li><code>json</code></li> <li><code>mbstring</code></li> <li><code>pdo_*</code></li> <li><code>fileinfo</code></li> <li><code>openssl</code></li> </ul>"},{"location":"installation/#optional-depending-on-the-needs-of-your-application","title":"Optional depending on the needs of your application","text":"<ul> <li>PDO Extension as well as the relevant RDBMS specific extension (i.e. MySQL, PostgreSql etc.)</li> <li>OpenSSL Extension</li> <li>Mbstring Extension</li> <li>Memcache, Memcached or other relevant cache adapters depending on your usage of cache</li> </ul>"},{"location":"installation/#installation","title":"Installation","text":"<p>Since Phalcon is compiled as a PHP extension, its installation is somewhat different than any other traditional PHP framework. Phalcon needs to be installed and loaded as a module on your web server.</p>"},{"location":"installation/#linux","title":"Linux","text":"<p>To install Phalcon on Linux, you will need to add our repository in your distribution and then install it.</p>"},{"location":"installation/#deb-based-distributions-debian-ubuntu-etc","title":"DEB based distributions (Debian, Ubuntu, etc.)","text":""},{"location":"installation/#repository-installation","title":"Repository installation","text":"<p>Add the repository to your distribution:</p>"},{"location":"installation/#stable-releases","title":"Stable releases","text":"<pre><code>curl -s https://packagecloud.io/install/repositories/phalcon/stable/script.deb.sh | sudo bash\n</code></pre> <p>or</p>"},{"location":"installation/#nightly-releases","title":"Nightly releases","text":"<pre><code>curl -s https://packagecloud.io/install/repositories/phalcon/nightly/script.deb.sh | sudo bash\n</code></pre> <p>NOTE</p> <p>This only needs to be done only once, unless your distribution changes or you want to switch from stable to nightly builds. </p>"},{"location":"installation/#phalcon-installation","title":"Phalcon installation","text":"<p>To install Phalcon you need to issue the following commands in your terminal:</p> <p></p>"},{"location":"installation/#php-5x","title":"PHP 5.x","text":"<pre><code>sudo apt-get update\nsudo apt-get install php5-phalcon\n</code></pre>"},{"location":"installation/#php-7","title":"PHP 7","text":"<pre><code>sudo apt-get update\nsudo apt-get install php7.0-phalcon\n</code></pre>"},{"location":"installation/#additional-ppas","title":"Additional PPAs","text":""},{"location":"installation/#ondrej-sury","title":"Ond\u0159ej Sur\u00fd","text":"<p>If you do not wish to use our repository at packagecloud.io, you can always use the one offered by Ond\u0159ej Sur\u00fd.</p> <p>Installation of the repo: <pre><code>sudo add-apt-repository ppa:ondrej/php\nsudo apt-get update\n</code></pre></p> <p>and Phalcon:</p> <pre><code>sudo apt-get install php-phalcon\n</code></pre>"},{"location":"installation/#rpm-based-distributions-centos-fedora-etc","title":"RPM based distributions (CentOS, Fedora, etc.)","text":""},{"location":"installation/#repository-installation_1","title":"Repository installation","text":"<p>Add the repository to your distribution:</p>"},{"location":"installation/#stable-releases_1","title":"Stable releases","text":"<pre><code>curl -s https://packagecloud.io/install/repositories/phalcon/stable/script.rpm.sh | sudo bash\n</code></pre> <p>or</p>"},{"location":"installation/#nightly-releases_1","title":"Nightly releases","text":"<pre><code>curl -s https://packagecloud.io/install/repositories/phalcon/nightly/script.rpm.sh | sudo bash\n</code></pre> <p>NOTE</p> <p>This only needs to be done only once, unless your distribution changes or you want to switch from stable to nightly builds. </p>"},{"location":"installation/#phalcon-installation_1","title":"Phalcon installation","text":"<p>To install Phalcon you need to issue the following commands in your terminal:</p> <p></p>"},{"location":"installation/#php-5x_1","title":"PHP 5.x","text":"<pre><code>sudo yum update\nsudo yum install php56u-phalcon\n</code></pre>"},{"location":"installation/#php-7_1","title":"PHP 7","text":"<pre><code>sudo yum update\nsudo yum install php70u-phalcon\n</code></pre>"},{"location":"installation/#additional-rpms","title":"Additional RPMs","text":""},{"location":"installation/#remi","title":"Remi","text":"<p>Remi Collet maintains an excellent repository for RPM based installations. You can find instructions on how to enable it for your distribution here.</p> <p>Installing Phalcon after that is as easy as:</p> <pre><code>yum install php56-php-phalcon3\n</code></pre> <p>Additional versions are available both architecture specific (x86/x64) as well as PHP specific (5.5, 5.6, 7.x)</p>"},{"location":"installation/#freebsd","title":"FreeBSD","text":"<p>A port is available for FreeBSD. To install it you will need to issue the following commands:</p>"},{"location":"installation/#pkg_add","title":"<code>pkg_add</code>","text":"<pre><code>pkg_add -r phalcon\n</code></pre>"},{"location":"installation/#source","title":"Source","text":"<pre><code>export CFLAGS=\"-O2 --fvisibility=hidden\"\n\ncd /usr/ports/www/phalcon\n\nmake install clean\n</code></pre>"},{"location":"installation/#gentoo","title":"Gentoo","text":"<p>An overlay for installing Phalcon can be found here https://github.com/smoke/phalcon-gentoo-overlay</p>"},{"location":"installation/#macos","title":"macOS","text":"<p>On a macOS system you can compile and install the extension with <code>brew</code>, <code>macports</code> or the source code:</p>"},{"location":"installation/#requirements_1","title":"Requirements","text":"<ul> <li>PHP 5.5.x/5.6.x/7.0.x/7.1.x development resources</li> <li>XCode</li> </ul>"},{"location":"installation/#brew","title":"Brew","text":"<p>As the homebrew/php tap has been deprecated and is in the process of being removed, A custom repository for Phalcon has been created.</p> <p>PHP 5.5 has not been ported to homebrew/core and as such no longer exists. PHP 7.2 on the other hand has been added. </p> <pre><code>brew tap tigerstrikemedia/homebrew-phalconphp\nbrew install php56-phalcon\nbrew install php70-phalcon\nbrew install php71-phalcon\nbrew install php72-phalcon\n</code></pre>"},{"location":"installation/#macports","title":"MacPorts","text":"<pre><code>sudo port install php55-phalcon\nsudo port install php56-phalcon\n</code></pre> <p>Edit your php.ini file and then append at the end:</p> <pre><code>extension=php_phalcon.so\n</code></pre> <p>Restart your webserver.</p>"},{"location":"installation/#windows","title":"Windows","text":"<p>To use Phalcon on Windows, you will need to install the phalcon.dll. We have compiled several DLLs depending on the target platform. The DLLs can be found in our download page.</p> <p>Identify your PHP installation as well as architecture. If you download the wrong DLL, Phalcon will not work. <code>phpinfo()</code> contains this information. In the example below, we will need the NTS version of the DLL:</p> <p></p> <p>The available DLLs are:</p> Architecture Version Type x64 7.x Thread safe x64 7.x Non Thread safe (NTS) x86 7.x Thread safe x86 7.x Non Thread safe (NTS) x64 5.6 Thread safe x64 5.6 Non Thread safe (NTS) x86 5.6 Thread safe x86 5.6 Non Thread safe (NTS) x64 5.5 Thread safe x64 5.5 Non Thread safe (NTS) x86 5.5 Thread safe x86 5.5 Non Thread safe (NTS) <p>Edit your php.ini file and then append at the end:</p> <pre><code>extension=php_phalcon.dll\n</code></pre> <p>Restart your webserver.</p>"},{"location":"installation/#compile-from-sources","title":"Compile from Sources","text":"<p>Compiling from source is similar to most environments (Linux/macOS).</p>"},{"location":"installation/#requirements_2","title":"Requirements","text":"<ul> <li>PHP 5.5.x/5.6.x/7.0.x/7.1.x development resources</li> <li>GCC compiler (Linux/Solaris/FreeBSD) or Xcode (macOS)</li> <li>re2c &gt;= 0.13</li> <li>libpcre-dev</li> </ul> <p>You can install these packages in your system with the relevant package manager. Instructions for popular linux distributions are below:</p>"},{"location":"installation/#ubuntu","title":"Ubuntu","text":"<pre><code>sudo apt-get install php5-dev libpcre3-dev gcc make\n</code></pre>"},{"location":"installation/#suse","title":"Suse","text":"<pre><code>sudo zypper install php5-devel gcc make\n</code></pre>"},{"location":"installation/#centosfedorarhel","title":"CentOS/Fedora/RHEL","text":"<pre><code>sudo yum install php-devel pcre-devel gcc make\n</code></pre>"},{"location":"installation/#compile-phalcon","title":"Compile Phalcon","text":"<p>We first need to clone Phalcon from the GitHub repository <pre><code>git clone https://github.com/phalcon/cphalcon\n</code></pre></p> <p>and now build the extension <pre><code>cd cphalcon/build\nsudo ./install\n</code></pre></p> <p>You will now need to add <code>extension=phalcon.so</code> to your PHP ini and restart your web server, so as to load the extension. <pre><code># Suse: Add a file called phalcon.ini in /etc/php5/conf.d/ with this content:\nextension=phalcon.so\n\n# CentOS/RedHat/Fedora: Add a file called phalcon.ini in /etc/php.d/ with this content:\nextension=phalcon.so\n\n# Ubuntu/Debian with apache2: Add a file called 30-phalcon.ini in /etc/php5/apache2/conf.d/ with this content:\nextension=phalcon.so\n\n# Ubuntu/Debian with php5-fpm: Add a file called 30-phalcon.ini in /etc/php5/fpm/conf.d/ with this content:\nextension=phalcon.so\n\n# Ubuntu/Debian with php5-cli: Add a file called 30-phalcon.ini in /etc/php5/cli/conf.d/ with this content:\nextension=phalcon.so\n</code></pre></p>"},{"location":"installation/#advanced-compilation","title":"Advanced Compilation","text":"<p>Phalcon automatically detects your architecture, however, you can force the compilation for a specific architecture:</p> <pre><code>cd cphalcon/build\n\n# One of the following:\nsudo ./install --arch 32bits\nsudo ./install --arch 64bits\nsudo ./install --arch safe\n</code></pre> <p>If the automatic installer fails you can build the extension manually:</p> <pre><code>git clone https://github.com/phalcon/cphalcon\n# cd cphalcon/build/php5/32bits\ncd cphalcon/build/php5/64bits\n\n# NOTE: for PHP 7 you have to use\n# cd cphalcon/build/php7/32bits\n# or\n# cd cphalcon/build/php7/64bits\n\nmake clean\nphpize --clean\n\nexport CFLAGS=\"-O2 --fvisibility=hidden\"\n./configure --enable-phalcon\n\nmake\nmake install\n</code></pre> <p>If you have specific php versions running:</p> <pre><code>git clone https://github.com/phalcon/cphalcon\n# cd cphalcon/build/php5/32bits\ncd cphalcon/build/php5/64bits\n\n# NOTE: for PHP 7 you have to use\n# cd cphalcon/build/php7/32bits\n# or\n# cd cphalcon/build/php7/64bits\n\nmake clean\n/opt/php-5.6.15/bin/phpize --clean\n\nexport CFLAGS=\"-O2 --fvisibility=hidden\"\n./configure --with-php-config=/opt/php-5.6.15/bin/php-config --enable-phalcon\n\nmake\nmake install\n</code></pre> <p>You will now need to add <code>extension=phalcon.so</code> to your PHP ini and restart your web server, so as to load the extension.</p> <p>You can create a small script in your web server root that has the following in it:</p> <pre><code>&lt;?php\n\nphpinfo();\n</code></pre> <p>and load it on your web browser. There should be a section for Phalcon. If there is not, make sure that your extension has been compiled properly, that you made the necessary changes to your <code>php.ini</code> and also that you have restarted your web server.</p> <p>You can also check your installation from the command line:</p> <pre><code>php -r 'print_r(get_loaded_extensions());'\n</code></pre> <p>This will output something similar to this:</p> <pre><code>Array\n(\n    [0] =&gt; Core\n    [1] =&gt; libxml\n    [2] =&gt; filter\n    [3] =&gt; SPL\n    [4] =&gt; standard\n    [5] =&gt; phalcon\n    [6] =&gt; pdo_mysql\n)\n</code></pre> <p>You can also see the modules installed using the CLI:</p> <pre><code>php -m\n</code></pre> <p>Pattern</p> <p>Note that in some Linux based systems, you might need to change two <code>php.ini</code> files, one for your web server (Apache/Nginx), and one for the CLI. If Phalcon is loaded only for say the web server, you will need to locate the CLI <code>php.ini</code> and make the necessary additions for the module to be loaded. </p>"},{"location":"introduction/","title":"Welcome","text":"<p>Welcome to the documentation for the Phalcon framework.</p>"},{"location":"introduction/#mission","title":"Mission","text":"<p>Our mission is to offer developers an advanced, feature rich tool, which they can use to develop powerful applications with low server consumption and high performance.</p>"},{"location":"introduction/#what-is-phalcon","title":"What is Phalcon","text":"<p>Phalcon is an open source full stack framework for PHP, written as a C-extension. Phalcon is optimized for high performance. Its unique architecture allows the framework to always be memory resident, offering its functionality whenever its needed, without expensive file stats and file reads that traditional PHP frameworks employ.</p>"},{"location":"introduction/#usage","title":"Usage","text":"<p>Developers do not need to know the C language to use Phalcon. Its interface is exposed as PHP classes under the <code>Phalcon</code> namespace, ready to be used. </p> <p>Phalcon is loosely coupled, allowing developers to use only the objects that they need as glue components based in the needs of their applications.</p> <p>The translation of the documentation is driven by enthusiasts and contributors. We welcome your participation in the translation effort with new translations and/or corrections. The translations are handled in GitHub for English, and Crowdin for other languages</p>"},{"location":"loader/","title":"Class Autoloader","text":"<p>Phalcon\\Loader allows you to load project classes automatically, based on some predefined rules. Since this component is written in C, it provides the lowest overhead in reading and interpreting external PHP files.</p> <p>The behavior of this component is based on the PHP's capability of autoloading classes. If a class that does not yet exist is used in any part of the code, a special handler will try to load it. Phalcon\\Loader serves as the special handler for this operation. By loading classes on a need-to-load basis, the overall performance is increased since the only file reads that occur are for the files needed. This technique is called lazy initialization.</p> <p>With this component you can load files from other projects or vendors, this autoloader is PSR-0 and PSR-4 compliant.</p> <p>Phalcon\\Loader offers four options to autoload classes. You can use them one at a time or combine them.</p>"},{"location":"loader/#security-layer","title":"Security Layer","text":"<p>Phalcon\\Loader offers a security layer sanitizing by default class names avoiding possible inclusion of unauthorized files. Consider the following example:</p> <pre><code>&lt;?php\n\n// Basic autoloader\nspl_autoload_register(\n    function ($className) {\n        $filepath = $className . '.php';\n\n        if (file_exists($filepath)) {\n            require $filepath;\n        }\n    }\n);\n</code></pre> <p>The above auto-loader lacks any kind of security. If a function mistakenly launches the auto-loader and a malicious prepared string is used as parameter this would allow to execute any file accessible by the application:</p> <pre><code>&lt;?php\n\n// This variable is not filtered and comes from an insecure source\n$className = '../processes/important-process';\n\n// Check if the class exists triggering the auto-loader\nif (class_exists($className)) {\n    // ...\n}\n</code></pre> <p>If <code>../processes/important-process.php</code> is a valid file, an external user could execute the file without authorization.</p> <p>To avoid these or most sophisticated attacks, Phalcon\\Loader removes invalid characters from the class name, reducing the possibility of being attacked.</p>"},{"location":"loader/#registering-namespaces","title":"Registering Namespaces","text":"<p>If you're organizing your code using namespaces, or using external libraries which do, the <code>registerNamespaces()</code> method provides the autoloading mechanism. It takes an associative array; the keys are namespace prefixes and their values are directories where the classes are located in. The namespace separator will be replaced by the directory separator when the loader tries to find the classes.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n// Creates the autoloader\n$loader = new Loader();\n\n// Register some namespaces\n$loader-&gt;registerNamespaces(\n    [\n       'Example\\Base'    =&gt; 'vendor/example/base',\n       'Example\\Adapter' =&gt; 'vendor/example/adapter',\n       'Example'         =&gt; 'vendor/example',\n    ]\n);\n\n// Register autoloader\n$loader-&gt;register();\n\n// The required class will automatically include the\n// file vendor/example/adapter/Some.php\n$some = new \\Example\\Adapter\\Some();\n</code></pre>"},{"location":"loader/#registering-directories","title":"Registering Directories","text":"<p>The third option is to register directories, in which classes could be found. This option is not recommended in terms of performance, since Phalcon will need to perform a significant number of file stats on each folder, looking for the file with the same name as the class. It's important to register the directories in relevance order.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n// Creates the autoloader\n$loader = new Loader();\n\n// Register some directories\n$loader-&gt;registerDirs(\n    [\n        'library/MyComponent',\n        'library/OtherComponent/Other',\n        'vendor/example/adapters',\n        'vendor/example',\n    ]\n);\n\n// Register autoloader\n$loader-&gt;register();\n\n// The required class will automatically include the file from\n// the first directory where it has been located\n// i.e. library/OtherComponent/Other/Some.php\n$some = new \\Some();\n</code></pre>"},{"location":"loader/#registering-classes","title":"Registering Classes","text":"<p>The last option is to register the class name and its path. This autoloader can be very useful when the folder convention of the project does not allow for easy retrieval of the file using the path and the class name. This is the fastest method of autoloading. However the more your application grows, the more classes/files need to be added to this autoloader, which will effectively make maintenance of the class list very cumbersome and it is not recommended.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n// Creates the autoloader\n$loader = new Loader();\n\n// Register some classes\n$loader-&gt;registerClasses(\n    [\n        'Some'         =&gt; 'library/OtherComponent/Other/Some.php',\n        'Example\\Base' =&gt; 'vendor/example/adapters/Example/BaseClass.php',\n    ]\n);\n\n// Register autoloader\n$loader-&gt;register();\n\n// Requiring a class will automatically include the file it references\n// in the associative array\n// i.e. library/OtherComponent/Other/Some.php\n$some = new \\Some();\n</code></pre>"},{"location":"loader/#registering-files","title":"Registering Files","text":"<p>You can also registers files that are <code>non-classes</code> hence needing a <code>require</code>. This is very useful for including files that only have functions:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n// Creates the autoloader\n$loader = new Loader();\n\n// Register some classes\n$loader-&gt;registerFiles(\n    [\n        'functions.php',\n        'arrayFunctions.php',\n    ]\n);\n\n// Register autoloader\n$loader-&gt;register();\n</code></pre> <p>These files are automatically loaded in the <code>register()</code> method.</p>"},{"location":"loader/#additional-file-extensions","title":"Additional file extensions","text":"<p>Some autoloading strategies such as  <code>prefixes</code>, <code>namespaces</code> or <code>directories</code> automatically append the <code>php</code> extension at the end of the checked file. If you are using additional extensions you could set it with the method <code>setExtensions</code>. Files are checked in the order as it were defined:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n// Creates the autoloader\n$loader = new Loader();\n\n// Set file extensions to check\n$loader-&gt;setExtensions(\n    [\n        'php',\n        'inc',\n        'phb',\n    ]\n);\n</code></pre>"},{"location":"loader/#file-checking-callback","title":"File checking callback","text":"<p>You can speed up the loader by setting a different file checking callback method using the <code>setFileCheckingCallback</code> method.</p> <p>The default behavior uses <code>is_file</code>. However you can also use <code>null</code> which will not check whether a file exists or not before loading it or you can use <code>stream_resolve_include_path</code> which is much faster than <code>is_file</code> but will cause problems if the target file is removed from the file system.</p> <pre><code>&lt;?php\n\n// Default behavior.\n$loader-&gt;setFileCheckingCallback(\"is_file\");\n\n// Faster than `is_file()`, but implies some issues if\n// the file is removed from the filesystem.\n$loader-&gt;setFileCheckingCallback(\"stream_resolve_include_path\");\n\n// Do not check file existence.\n$loader-&gt;setFileCheckingCallback(null);\n</code></pre>"},{"location":"loader/#modifying-current-strategies","title":"Modifying current strategies","text":"<p>Additional auto-loading data can be added to existing values by passing <code>true</code> as the second parameter:</p> <pre><code>&lt;?php\n\n// Adding more directories\n$loader-&gt;registerDirs(\n    [\n        '../app/library',\n        '../app/plugins',\n    ],\n    true\n);\n</code></pre>"},{"location":"loader/#autoloading-events","title":"Autoloading Events","text":"<p>In the following example, the <code>EventsManager</code> is working with the class loader, allowing us to obtain debugging information regarding the flow of operation:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Loader;\n\n$eventsManager = new EventsManager();\n\n$loader = new Loader();\n\n$loader-&gt;registerNamespaces(\n    [\n        'Example\\Base'    =&gt; 'vendor/example/base',\n        'Example\\Adapter' =&gt; 'vendor/example/adapter',\n        'Example'         =&gt; 'vendor/example',\n    ]\n);\n\n// Listen all the loader events\n$eventsManager-&gt;attach(\n    'loader:beforeCheckPath',\n    function (Event $event, Loader $loader) {\n        echo $loader-&gt;getCheckedPath();\n    }\n);\n\n$loader-&gt;setEventsManager($eventsManager);\n\n$loader-&gt;register();\n</code></pre> <p>Some events when returning boolean <code>false</code> could stop the active operation. The following events are supported:</p> Event Name Triggered Can stop operation? <code>beforeCheckClass</code> Triggered before starting the autoloading process Yes <code>pathFound</code> Triggered when the loader locate a class No <code>afterCheckClass</code> Triggered after finish the autoloading process. If this event is launched the autoloader didn't find the class file No"},{"location":"loader/#troubleshooting","title":"Troubleshooting","text":"<p>Some things to keep in mind when using the universal autoloader:</p> <ul> <li>Auto-loading process is case-sensitive, the class will be loaded as it is written in the code</li> <li>Strategies based on namespaces/prefixes are faster than the directories strategy</li> <li>If a cache bytecode like APC is installed this will used to retrieve the requested file (an implicit caching of the file is performed)</li> </ul>"},{"location":"logging/","title":"Logging","text":"<p>Phalcon\\Logger is a component whose purpose is to provide logging services for applications. It offers logging to different backends using different adapters. It also offers transaction logging, configuration options, different formats and filters. You can use the Phalcon\\Logger for every logging need your application has, from debugging processes to tracing application flow.</p>"},{"location":"logging/#adapters","title":"Adapters","text":"<p>This component makes use of adapters to store the logged messages. The use of adapters allows for a common logging interface which provides the ability to easily switch backends if necessary. The adapters supported are:</p> Adapter Description Phalcon\\Logger\\Adapter\\File Logs to a plain text file Phalcon\\Logger\\Adapter\\Stream Logs to a PHP Streams Phalcon\\Logger\\Adapter\\Syslog Logs to the system logger <code>Phalcon\\Logger\\Adapter\\FirePHP</code> Logs to the FirePHP"},{"location":"logging/#factory","title":"Factory","text":"<p>Loads Logger Adapter class using <code>adapter</code> option</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger\\Factory;\n\n$options = [\n    'name'    =&gt; 'log.txt',\n    'adapter' =&gt; 'file',\n];\n\n$logger = Factory::load($options);\n</code></pre>"},{"location":"logging/#creating-a-log","title":"Creating a Log","text":"<p>The example below shows how to create a log and add messages to it:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\File as FileAdapter;\n\n$logger = new FileAdapter('app/logs/test.log');\n\n// These are the different log levels available:\n\n$logger-&gt;critical(\n    'This is a critical message'\n);\n\n$logger-&gt;emergency(\n    'This is an emergency message'\n);\n\n$logger-&gt;debug(\n    'This is a debug message'\n);\n\n$logger-&gt;error(\n    'This is an error message'\n);\n\n$logger-&gt;info(\n    'This is an info message'\n);\n\n$logger-&gt;notice(\n    'This is a notice message'\n);\n\n$logger-&gt;warning(\n    'This is a warning message'\n);\n\n$logger-&gt;alert(\n    'This is an alert message'\n);\n\n// You can also use the log() method with a Logger constant:\n$logger-&gt;log(\n    'This is another error message',\n    Logger::ERROR\n);\n\n// If no constant is given, DEBUG is assumed.\n$logger-&gt;log(\n    'This is a message'\n);\n\n// You can also pass context parameters like this\n$logger-&gt;log(\n    'This is a {message}', \n    [ \n        'message' =&gt; 'parameter' \n    ]\n);\n</code></pre> <p>The log generated is below:</p> <pre><code>[Tue, 28 Jul 15 22:09:02 -0500][CRITICAL] This is a critical message\n[Tue, 28 Jul 15 22:09:02 -0500][EMERGENCY] This is an emergency message\n[Tue, 28 Jul 15 22:09:02 -0500][DEBUG] This is a debug message\n[Tue, 28 Jul 15 22:09:02 -0500][ERROR] This is an error message\n[Tue, 28 Jul 15 22:09:02 -0500][INFO] This is an info message\n[Tue, 28 Jul 15 22:09:02 -0500][NOTICE] This is a notice message\n[Tue, 28 Jul 15 22:09:02 -0500][WARNING] This is a warning message\n[Tue, 28 Jul 15 22:09:02 -0500][ALERT] This is an alert message\n[Tue, 28 Jul 15 22:09:02 -0500][ERROR] This is another error message\n[Tue, 28 Jul 15 22:09:02 -0500][DEBUG] This is a message\n[Tue, 28 Jul 15 22:09:02 -0500][DEBUG] This is a parameter\n</code></pre> <p>You can also set a log level using the <code>setLogLevel()</code> method. This method takes a Logger constant and will only save log messages that are as important or more important than the constant:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\File as FileAdapter;\n\n$logger = new FileAdapter('app/logs/test.log');\n\n$logger-&gt;setLogLevel(\n    Logger::CRITICAL\n);\n</code></pre> <p>In the example above, only critical and emergency messages will get saved to the log. By default, everything is saved.</p>"},{"location":"logging/#transactions","title":"Transactions","text":"<p>Logging data to an adapter i.e. File (file system) is always an expensive operation in terms of performance. To combat that, you can take advantage of logging transactions. Transactions store log data temporarily in memory and later on write the data to the relevant adapter (File in this case) in a single atomic operation.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger\\Adapter\\File as FileAdapter;\n\n// Create the logger\n$logger = new FileAdapter('app/logs/test.log');\n\n// Start a transaction\n$logger-&gt;begin();\n\n// Add messages\n\n$logger-&gt;alert(\n    'This is an alert'\n);\n\n$logger-&gt;error(\n    'This is another error'\n);\n\n// Commit messages to file\n$logger-&gt;commit();\n</code></pre>"},{"location":"logging/#logging-to-multiple-handlers","title":"Logging to Multiple Handlers","text":"<p>Phalcon\\Logger can send messages to multiple handlers with a just single call:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Multiple as MultipleStream;\nuse Phalcon\\Logger\\Adapter\\File as FileAdapter;\nuse Phalcon\\Logger\\Adapter\\Stream as StreamAdapter;\n\n$logger = new MultipleStream();\n\n\n\n$logger-&gt;push(\n    new FileAdapter('test.log')\n);\n\n$logger-&gt;push(\n    new StreamAdapter('php://stdout')\n);\n\n$logger-&gt;log(\n    'This is a message'\n);\n\n$logger-&gt;log(\n    'This is an error',\n    Logger::ERROR\n);\n\n$logger-&gt;error(\n    'This is another error'\n);\n</code></pre> <p>The messages are sent to the handlers in the order they were registered.</p>"},{"location":"logging/#message-formatting","title":"Message Formatting","text":"<p>This component makes use of <code>formatters</code> to format messages before sending them to the backend. The formatters available are:</p> Adapter Description Phalcon\\Logger\\Formatter\\Line Formats the messages using a one-line string Phalcon\\Logger\\Formatter\\Firephp Formats the messages so that they can be sent to FirePHP Phalcon\\Logger\\Formatter\\Json Prepares a message to be encoded with JSON Phalcon\\Logger\\Formatter\\Syslog Prepares a message to be sent to syslog"},{"location":"logging/#line-formatter","title":"Line Formatter","text":"<p>Formats the messages using a one-line string. The default logging format is:</p> <pre><code>[%date%][%type%] %message%\n</code></pre> <p>You can change the default format using <code>setFormat()</code>, this allows you to change the format of the logged messages by defining your own. The log format variables allowed are:</p> Variable Description %message% The message itself expected to be logged %date% Date the message was added %type% Uppercase string with message type <p>The example below shows how to change the log format:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger\\Formatter\\Line as LineFormatter;\n\n$formatter = new LineFormatter('%date% - %message%');\n\n// Changing the logger format\n$logger-&gt;setFormatter($formatter);\n</code></pre>"},{"location":"logging/#implementing-your-own-formatters","title":"Implementing your own formatters","text":"<p>The Phalcon\\Logger\\FormatterInterface interface must be implemented in order to create your own logger formatter or extend the existing ones.</p>"},{"location":"logging/#adapters_1","title":"Adapters","text":"<p>The following examples show the basic use of each adapter:</p>"},{"location":"logging/#stream-logger","title":"Stream Logger","text":"<p>The stream logger writes messages to a valid registered stream in PHP. A list of streams is available here:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger\\Adapter\\Stream as StreamAdapter;\n\n// Opens a stream using zlib compression\n$logger = new StreamAdapter('compress.zlib://week.log.gz');\n\n// Writes the logs to stderr\n$logger = new StreamAdapter('php://stderr');\n</code></pre>"},{"location":"logging/#file-logger","title":"File Logger","text":"<p>This logger uses plain files to log any kind of data. By default all logger files are opened using append mode which opens the files for writing only; placing the file pointer at the end of the file. If the file does not exist, an attempt will be made to create it. You can change this mode by passing additional options to the constructor:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger\\Adapter\\File as FileAdapter;\n\n// Create the file logger in 'w' mode\n$logger = new FileAdapter(\n    'app/logs/test.log',\n    [\n        'mode' =&gt; 'w',\n    ]\n);\n</code></pre>"},{"location":"logging/#syslog-logger","title":"Syslog Logger","text":"<p>This logger sends messages to the system logger. The syslog behavior may vary from one operating system to another.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger\\Adapter\\Syslog as SyslogAdapter;\n\n// Basic Usage\n$logger = new SyslogAdapter(null);\n\n// Setting ident/mode/facility\n$logger = new SyslogAdapter(\n    'ident-name',\n    [\n        'option'   =&gt; LOG_NDELAY,\n        'facility' =&gt; LOG_MAIL,\n    ]\n);\n</code></pre>"},{"location":"logging/#firephp-logger","title":"FirePHP Logger","text":"<p>This logger sends messages in HTTP response headers that are displayed by FirePHP, a Firebug extension for Firefox.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Firephp as Firephp;\n\n$logger = new Firephp('');\n\n$logger-&gt;log(\n    'This is a message'\n);\n\n$logger-&gt;log(\n    'This is an error',\n    Logger::ERROR\n);\n\n$logger-&gt;error(\n    'This is another error'\n);\n</code></pre>"},{"location":"logging/#implementing-your-own-adapters","title":"Implementing your own adapters","text":"<p>The Phalcon\\Logger\\AdapterInterface interface must be implemented in order to create your own logger adapters or extend the existing ones.</p>"},{"location":"mvc/","title":"The MVC Architecture","text":"<p>Phalcon offers the object-oriented classes, necessary to implement the Model, View, Controller architecture (often referred to as MVC) in your application. This design pattern is widely used by other web frameworks and desktop applications.</p> <p>MVC benefits include:</p> <ul> <li>Isolation of business logic from the user interface and the database layer</li> <li>Making it clear where different types of code belong for easier maintenance</li> </ul> <p>If you decide to use MVC, every request to your application resources will be managed by the MVC architecture. Phalcon classes are written in C language, offering a high performance approach of this pattern in a PHP based application.</p>"},{"location":"mvc/#models","title":"Models","text":"<p>A model represents the information (data) of the application and the rules to manipulate that data. Models are primarily used for managing the rules of interaction with a corresponding database table. In most cases, each table in your database will correspond to one model in your application. The bulk of your application's business logic will be concentrated in the models. Learn more</p>"},{"location":"mvc/#views","title":"Views","text":"<p>Views represent the user interface of your application. Views are often HTML files with embedded PHP code that perform tasks related solely to the presentation of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application. Learn more</p>"},{"location":"mvc/#controllers","title":"Controllers","text":"<p>The controllers provide the 'flow' between models and views. Controllers are responsible for processing the incoming requests from the web browser, interrogating the models for data, and passing that data on to the views for presentation. Learn more</p>"},{"location":"namespaces/","title":"Working with Namespaces","text":"<p>Namespaces can be used to avoid class name collisions; this means that if you have two controllers in an application with the same name, a namespace can be used to differentiate them. Namespaces are also useful for creating bundles or modules.</p>"},{"location":"namespaces/#setting-up-the-framework","title":"Setting up the framework","text":"<p>Using namespaces has some implications when loading the appropriate controller. To adjust the framework behavior to namespaces is necessary to perform one or all of the following tasks:</p> <p>Use an autoload strategy that takes into account the namespaces, for example with Phalcon\\Loader:</p> <pre><code>&lt;?php\n\n$loader-&gt;registerNamespaces(\n    [\n       'Store\\Admin\\Controllers' =&gt; '../bundles/admin/controllers/',\n       'Store\\Admin\\Models'      =&gt; '../bundles/admin/models/',\n    ]\n);\n</code></pre> <p>Specify it in the routes as a separate parameter in the route's paths: <pre><code>&lt;?php\n\n$router-&gt;add(\n    '/admin/users/my-profile',\n    [\n        'namespace'  =&gt; 'Store\\Admin',\n        'controller' =&gt; 'Users',\n        'action'     =&gt; 'profile',\n    ]\n);\n</code></pre></p> <p>Passing it as part of the route:</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    '/:namespace/admin/users/my-profile',\n    [\n        'namespace'  =&gt; 1,\n        'controller' =&gt; 'Users',\n        'action'     =&gt; 'profile',\n    ]\n);\n</code></pre> <p>If you are only working with the same namespace for every controller in your application, then you can define a default namespace in the Dispatcher, by doing this, you don't need to specify a full class name in the router path:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Dispatcher;\n\n// Registering a dispatcher\n$di-&gt;set(\n    'dispatcher',\n    function () {\n        $dispatcher = new Dispatcher();\n\n        $dispatcher-&gt;setDefaultNamespace(\n            'Store\\Admin\\Controllers'\n        );\n\n        return $dispatcher;\n    }\n);\n</code></pre>"},{"location":"namespaces/#controllers-in-namespaces","title":"Controllers in Namespaces","text":"<p>The following example shows how to implement a controller that use namespaces:</p> <pre><code>&lt;?php\n\nnamespace Store\\Admin\\Controllers;\n\nuse Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function profileAction()\n    {\n\n    }\n}\n</code></pre>"},{"location":"namespaces/#models-in-namespaces","title":"Models in Namespaces","text":"<p>Take the following into consideration when using models in namespaces:</p> <pre><code>&lt;?php\n\nnamespace Store\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n\n}\n</code></pre> <p>If models have relationships they must include the namespace too:</p> <pre><code>&lt;?php\n\nnamespace Store\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;hasMany(\n            'id',\n            'Store\\Models\\Parts',\n            'robots_id',\n            [\n                'alias' =&gt; 'parts',\n            ]\n        );\n    }\n}\n</code></pre> <p>In PHQL you must write the statements including namespaces:</p> <pre><code>&lt;?php\n\n$phql = 'SELECT r.* FROM Store\\Models\\Robots r JOIN Store\\Models\\Parts p';\n</code></pre>"},{"location":"new-feature-request-list/","title":"New Feature Request List","text":"Votes Description 030 ORM: Many to Many behaviour - save related phalcon/phalcon#138 027 Queue: Add redis queue adapter to replace beanstalkd phalcon/phalcon#153 023 ODM: MongoDB Driver support phalcon/cphalcon#11156  022 Volt: Support for embedding blocks into other blocks phalcon/phalcon#133 020 Url: UPDATE query with JOIN in PHQL phalcon/phalcon#146 018 HTTP: Ability to handle the request via Psr ServerRequest phalcon/cphalcon#14390 018 HTTP: Rework the Phalcon HTTP stack phalcon/cphalcon#12485 018 Router: generate URL for route with hostName phalcon/phalcon#141 018 Forms: Embedded Forms phalcon/phalcon#134 016 Application: Phalcon Authentication phalcon/phalcon#162 016 Tag: HTML OPTION attributes by Phalcon\\Tag::select() phalcon/phalcon#135 015 Volt: Volt with \"Literal\" tag phalcon/phalcon#136 014 Application: Use the same way to register modules Mvc/Cli/Micro 013 Db - add multi array insertion phalcon/cphalcon#14620 013 Router: Router enhancements and changes phalcon/phalcon#148 012 ORM: Prevent unnecessary database requests for relationships where key is NULL phalcon/cphalcon#14471 012 Validation: Add an option to cancel other validators only for the same field when the validator fails phalcon/cphalcon#1540 011 Db - Support MySQL 8 - phalcon/cphalcon#14719  011 Security: Don't change the CSRF token on every request phalcon/cphalcon#14413 010 Queue: Queue Service phalcon/phalcon#163 009 Security: different UUID versions phalcon/cphalcon#14955 009 Db: Postgres Arrays and array operators support phalcon/cphalcon#14579 009 ORM: Data Mapper Implementation phalcon/phalcon#166 009 Url: Url get() function enhancement request phalcon/phalcon#145 008 Http - Firewall https://github.com/phalcon/cphalcon/issues/11389 008 Security: Security Improvement phalcon/cphalcon#14456 007 Db - add support for Microsoft SQL Server phalcon/cphalcon#1184 007 Validation: Forms should transform \"\" to NULL unless explicitly told not to phalcon/phalcon#158 007 Form Elements: Add proper support to \\Phalcon\\Form for Radio button phalcon/phalcon#154 007 Application: Add module name to module class name format in Application::registerModules phalcon/cphalcon#12252 006 ROUTER: Initialize Router from Array https://github.com/phalcon/cphalcon/issues/15050 006 ORM: Global option for <code>reusable</code> in relationships phalcon/cphalcon#14788   006 Router: Nested route group phalcon/cphalcon#13904 006 Validation: PresenceOf and Regex validators phalcon/phalcon#157 005 DB: Add <code>POINT</code> column. Issue https://github.com/phalcon/cphalcon/issues/14769 005 Pagination: SQL Instrumental key pagination phalcon/cphalcon#14754 (using LIMIT instead of OFFSET) 005 Forms: beforeBind and afterBind for Form phalcon/cphalcon#14598 005 Config: Review logic of \"Load services from config\" phalcon/phalcon#176 005 ORM: Many-To-Many relation with composite PKs phalcon/cphalcon#13890 005 Storage: Phalcon JSON Flat-File CRUDS Support phalcon/cphalcon#13783 005 Volt: Volt output filters phalcon/phalcon#137 004 PHQL: Registering custom expressions in PHQL Dialects like PostgreSQL @@ Expression phalcon/cphalcon#14954 004 Assets Reintroduce Cssmin/Jsmin phalcon/cphalcon#14903 004 Forms: Forms: Multiple csrf phalcon/cphalcon#13922 004 ORM: ORM: add the ability to return a custom Phalcon\\Mvc\\Model\\Row class instance phalcon/phalcon#159 004 Dispatcher: Can't get module name from cli dispatcher phalcon/phalcon#152 004 Volt: volt strings do not know about escape sequences phalcon/phalcon#150 003 Application Micro: <code>removeExtraSlashes</code> should be <code>false</code> by default  phalcon/cphalcon#14920   003 ORM: New chunk() method for Phalcon ORM phalcon/cphalcon#14005 003 Models: ReusableInterface phalcon/phalcon#155 002 VIEW: Add has method to View https://github.com/phalcon/cphalcon/issues/14815 002 Volt: Volt: Block functions phalcon/cphalcon#14436 002 ORM: When the model uses <code>columns()</code>, it should bind the original model instead of <code>Phalcon\\Mvc\\Model\\Row</code> phalcon/phalcon#167 002 Helper: BCMath wrapper phalcon/cphalcon#14008 002 CLI: Lock for cli component phalcon/cphalcon#14006 002 Volt: Volt PHP 7 strict type support phalcon/cphalcon#13978 002 Application: Make Micro Collection create handler instance with DI phalcon/cphalcon#13967 002 ORM: Cascade update in ORM phalcon/cphalcon#13804 001 Dispatcher: can we add controller filter like cakephp4 phalcon/cphalcon#14902 001 URL: Add a global suffix to URL phalcon/cphalcon#14806 001 Translate: Gettext query domain phalcon/cphalcon#14527 001 General: Classes should not have application defaults phalcon/cphalcon#14412 001 Volt: Volt extends from virable or from absolute path phalcon/phalcon#175 001 Events: When no Event \"data\" is supplied, do not pass the parameter phalcon/cphalcon#13965 001 Volt: Volt cache system phalcon/cphalcon#13926 001 Image: Add Gmagic adapter for Phalcon\\Image phalcon/cphalcon#13884 001 Db: MySQL point field support missing phalcon/cphalcon#13670 001 DI: Make shared instances removable. phalcon/cphalcon#13285 001 DI: \\Phalcon\\Di add alias? phalcon/cphalcon#13042 001 Translate: SetLocale() not support multiple parameters phalcon/cphalcon#12202 001 Translate: Support 'context' in Gettext (msgctxt) phalcon/cphalcon#12201 000 Config: Introduce HJSON format phalcon/cphalcon#15696 000 Model: Add method to Mvc/Model/CriteriaInterface phalcon/cphalcon#14818 000 Model: Add the merge mode for the <code>Model::skipAttributes()</code> phalcon/cphalcon#14934 000 Link to docs in changelog -  https://github.com/phalcon/cphalcon/issues/14642 000 Model: set properties in Phalcon\\Mvc::refresh() phalcon/phalcon#174 000 Validator: add aspect ratios validation for Validator/Files phalcon/phalcon#173 000 HTTP Response: add setStreamToSend for response class phalcon/phalcon#268 000 Validator: validation :field should use translation pattern %field% phalcon/cphalcon#14308 000 Validator: regex for Validator/Files allowedTypes phalcon/phalcon#170 000 ORM: Query Builder duplicating JOIN clause phalcon/cphalcon#14214 000 ORM: suggest adding the alias method to the model phalcon/cphalcon#14185 000 Pagination: Dynamic Loop Counters When Using Pagination phalcon/cphalcon#14046 000 ORM: Map record to target model (Inheritance mapping) phalcon/cphalcon#14007 000 Volt: Remove Single Quotes From Volt Names phalcon/cphalcon#13942 000 Volt: Shorter Volt Filter Names or Optional Shorter Alias Names phalcon/cphalcon#13940 000 Translate: Proposal on adding a LocaleAwareInterface for Translate adapters (and interpolators) phalcon/cphalcon#13905 000 Dispatcher: setDefaultNamespace() Alias setNamespace() phalcon/cphalcon#13814 000 Db: Different types of messages in virtual foreign keys phalcon/cphalcon#13801 000 Session: Need the lock for redis session phalcon/phalcon#161 000 Validation: Why not to use ioc/factory style for validators like filters? phalcon/cphalcon#13567 000 View: View active render path not return to prev path after partial render phalcon/cphalcon#13554 000 Volt Compiler: Allow \\Phalcon\\Mvc\\View\\Engine\\Volt to accept Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler in the constructor phalcon/phalcon#274"},{"location":"new-feature-request/","title":"New Feature Request","text":"<p>A NFR is a short document explaining how a new feature request must be submitted, how it can be implemented, and how it can help core developers and others to understand implement it.</p> <p>A NFR contains: * Suggested syntax * Suggested class names and methods * A short documentation * If the feature is already implemented in other frameworks, a short explanation of how that was implemented and its advantages</p> <p>In the following cases a new feature request will be rejected: * The feature makes the framework slow * The feature doesn't provide any additional value to the framework * The NFR is not clear, bad documentation, unclear explanation, etc. * The NFR doesn't follow the current guidelines/philosophy of the framework * The NFR affects/breaks applications developed in current/older versions of the framework * The original poster doesn't provide feedback/input when requested * It's technically impossible to implement * It can only be used in the development/testing stages * Submitted/proposed classes/components don't follow the Single Responsibility Principle * Static methods aren't allowed</p> <p>To send a NFR you don't need to provide Zephir or C code or develop the feature. New Feture requests explain the goal of the intended implementation and open discussion on how best to implement it.</p> <p>All NFRs should be posted as a new issue on GitHub.</p>"},{"location":"new-pull-request/","title":"New Pull Request","text":"<p>A pull request is alterations to the code that either fixes a current issue or introduces new functionality.</p> <p>Your Pull request must include: * Issued to the correct branch. We do not accept Pull Requests to the <code>master</code> branch * Update to the CHANGELOG * Unit tests * Documentation if necessary and usage examples</p> <p>For fixing bugs, please ensure that you reference the issue in GitHub. If such issue does not exist, create one.</p> <p>For new functionality, again we will need to have an issue created and referenced. If the functionality you are introducing collides with the philosophy and implementation of Phalcon it will be rejected. Additionally any new functionality that introduces breaking changes will be rejected at least for the current version but could very well be implemented in the next major version. It is highly recommended to discuss your NFR and PR with the core team and most importantly with the community so as to get feedback.</p>"},{"location":"performance/","title":"Increasing Performance","text":"<p>Get faster applications requires refine many aspects: server, client, network, database, web server, static sources, etc. In this chapter we highlight scenarios where you can improve performance and how detect what is really slow in your application.</p>"},{"location":"performance/#profile-on-the-server","title":"Profile on the Server","text":"<p>Each application is different, the permanent profiling is important to understand where performance can be increased. Profiling gives us a real picture on what is really slow and what does not. Profiles can vary between a request and another, so it is important to make enough measurements to make conclusions.</p> <p>Profiling with XDebug</p> <p>XDebug provides an easier way to profile PHP applications, just install the extension and enable profiling in the php.ini:</p> <pre><code>xdebug.profiler_enable = On\n</code></pre> <p>Using a tool like Webgrind you can see which functions/methods are slower than others.</p>"},{"location":"performance/#profiling-with-xhprof","title":"Profiling with Xhprof","text":"<p>Xhprof is another interesting extension to profile PHP applications. Add the following line to the start of the bootstrap file:</p> <pre><code>&lt;?php\n\nxhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY);\n</code></pre> <p>Then at the end of the file save the profiled data:</p> <pre><code>&lt;?php\n\n$xhprof_data = xhprof_disable('/tmp');\n\n$XHPROF_ROOT = '/var/www/xhprof/';\ninclude_once $XHPROF_ROOT . '/xhprof_lib/utils/xhprof_lib.php';\ninclude_once $XHPROF_ROOT . '/xhprof_lib/utils/xhprof_runs.php';\n\n$xhprof_runs = new XHProfRuns_Default();\n$run_id = $xhprof_runs-&gt;save_run($xhprof_data, 'xhprof_testing');\n\necho \"http://localhost/xhprof/xhprof_html/index.php?run={$run_id}&amp;source=xhprof_testing\\n\";\n</code></pre> <p>Xhprof provides a built-in HTML viewer to analyze the profiled data:</p> <p></p> <p></p>"},{"location":"performance/#profiling-sql-statements","title":"Profiling SQL Statements","text":"<p>Most database systems provide tools to identify slow SQL statements. Detecting and fixing slow queries is very important in order to increase performance in the server side. In the Mysql case, you can use the slow query log to know what SQL queries are taking more time than expected:</p> <pre><code>log-slow-queries = /var/log/slow-queries.log\nlong_query_time = 1.5\n</code></pre>"},{"location":"performance/#profile-on-the-client","title":"Profile on the Client","text":"<p>Sometimes we may need to improve the loading of static elements such as images, javascript and css to improve performance. The following tools are useful to detect common bottlenecks in the client side:</p>"},{"location":"performance/#profile-with-chromefirefox","title":"Profile with Chrome/Firefox","text":"<p>Most modern browsers have tools to profile the page loading time. In Chrome you can use the web inspector to know how much time is taking the loading of the different resources required by a single page:</p> <p></p> <p>Firebug provides a similar functionality:</p> <p></p>"},{"location":"performance/#yahoo-yslow","title":"Yahoo! YSlow","text":"<p>YSlow analyzes web pages and suggests ways to improve their performance based on a set of rules for high performance web pages</p> <p></p>"},{"location":"performance/#profile-with-speed-tracer","title":"Profile with Speed Tracer","text":"<p>Speed Tracer is a tool to help you identify and fix performance problems in your web applications. It visualizes metrics that are taken from low level instrumentation points inside of the browser and analyzes them as your application runs. Speed Tracer is available as a Chrome extension and works on all platforms where extensions are currently supported (Windows and Linux).</p> <p></p> <p>This tool is very useful because it help you to get the real time used to render the whole page including HTML parsing, Javascript evaluation and CSS styling.</p>"},{"location":"performance/#use-a-recent-php-version","title":"Use a recent PHP version","text":"<p>PHP is faster every day, using the latest version improves the performance of your applications and also of Phalcon.</p>"},{"location":"performance/#use-a-php-bytecode-cache","title":"Use a PHP Bytecode Cache","text":"<p>APC as many other bytecode caches help an application to reduce the overhead of read, tokenize and parse PHP files in each request. Once the extension is installed use the following setting to enable APC:</p> <pre><code>apc.enabled = On\n</code></pre>"},{"location":"performance/#do-blocking-work-in-the-background","title":"Do blocking work in the background","text":"<p>Process a video, send e-mails, compress a file or an image, etc., are slow tasks that must be processed in background jobs. There are a variety of tools that provide queuing or messaging systems that work well with PHP:</p> <ul> <li>Beanstalkd</li> <li>Redis</li> <li>RabbitMQ</li> <li>Resque</li> <li>Gearman</li> <li>ZeroMQ</li> </ul>"},{"location":"performance/#google-page-speed","title":"Google Page Speed","text":"<p>mod_pagespeed speeds up your site and reduces page load time. This open-source Apache HTTP server module (also available for nginx as ngx_pagespeed) automatically applies web performance best practices to pages, and associated assets (CSS, JavaScript, images) without requiring that you modify your existing content or workflow.</p>"},{"location":"queue/","title":"Queueing","text":"<p>Activities like processing videos, resizing images or sending emails aren't suitable to be executed online or in real time because it may slow the loading time of pages and severely impact the user experience.</p> <p>The best solution here is to implement background jobs. The web application puts jobs into a queue and which will be processed separately.</p> <p>While you can find more sophisticated PHP extensions to address queueing in your applications like RabbitMQ; Phalcon provides a client for Beanstalk, a job queueing backend inspired by Memcached. It\u2019s simple, lightweight, and completely specialized for job queueing.</p> <p>Pattern</p> <p>Some of the data returned from queue methods require that the module Yaml be installed. Please refer to this for more information. You will need to use Yaml &gt;= 2.0.0 </p>"},{"location":"queue/#putting-jobs-into-the-queue","title":"Putting Jobs into the Queue","text":"<p>After connecting to Beanstalk you can insert as many jobs as required. You can define the message structure according to the needs of the application:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Queue\\Beanstalk;\n\n// Connect to the queue\n$queue = new Beanstalk(\n    [\n        'host' =&gt; '192.168.0.21',\n        'port' =&gt; '11300',\n    ]\n);\n\n// Insert the job in the queue\n$queue-&gt;put(\n    [\n        'processVideo' =&gt; 4871,\n    ]\n);\n</code></pre> <p>Available connection options are:</p> Option Description Default host IP where the beanstalk server is located 127.0.0.1 port Connection port 11300 <p>In the above example we stored a message which will allow a background job to process a video. The message is stored in the queue immediately and does not have a certain time to live.</p> <p>Additional options as: time to run, priority and delay can be passed as second parameter:</p> <pre><code>&lt;?php\n\n// Insert the job in the queue with options\n$queue-&gt;put(\n    [\n        'processVideo' =&gt; 4871,\n    ],\n    [\n        'priority' =&gt; 250,\n        'delay'    =&gt; 10,\n        'ttr'      =&gt; 3600,\n    ]\n);\n</code></pre> <p>The following options are available:</p> Option Description priority It's an integer &lt; 2**32. Jobs with smaller priority values will be scheduled before jobs with larger priorities. The most urgent priority is 0; the least urgent priority is 4,294,967,295. delay It's an integer number of seconds to wait before putting the job in the ready queue. The job will be in the 'delayed' state during this time. ttr Time to run -- is an integer number of seconds to allow a worker to run this job. This time is counted from the moment a worker reserves this job. <p>Every job put into the queue returns a <code>job id</code> which you can use to track the status of the job:</p> <pre><code>&lt;?php\n\n$jobId = $queue-&gt;put(\n    [\n        'processVideo' =&gt; 4871,\n    ]\n);\n</code></pre>"},{"location":"queue/#retrieving-messages","title":"Retrieving Messages","text":"<p>Once a job is placed into the queue, those messages can be consumed by a background worker which will have enough time to complete the task:</p> <pre><code>&lt;?php\n\nwhile (($job = $queue-&gt;peekReady()) !== false) {\n    $message = $job-&gt;getBody();\n\n    var_dump($message);\n\n    $job-&gt;delete();\n}\n</code></pre> <p>Jobs must be removed from the queue to avoid double processing. If multiple background jobs workers are implemented, jobs must be <code>reserved</code> so other workers don't re-process them while other workers have them reserved:</p> <pre><code>&lt;?php\n\nwhile (($job = $queue-&gt;reserve()) !== false) {\n    $message = $job-&gt;getBody();\n\n    var_dump($message);\n\n    $job-&gt;delete();\n}\n</code></pre> <p>Our client implements a basic set of the features provided by Beanstalkd but enough to allow you to build applications implementing queues.</p>"},{"location":"queue/#advanced-topics","title":"Advanced Topics","text":""},{"location":"queue/#multiple-queues","title":"Multiple Queues","text":"<p>Beanstalkd supports multiple queues (called 'tubes') to allow for a single queue server to act as a hub for a variety of workers.  Phalcon supports this readily.</p> <p>Viewing the tubes available on the server, and choosing a tube for the queue object to use:</p> <pre><code>&lt;?php\n\n$tube_array = $queue-&gt;listTubes();\n\n$queue-&gt;choose('myOtherTube');\n</code></pre> <p>All subsequent work with <code>$queue</code> now manipulates <code>myOtherTube</code> instead of <code>default</code>.</p> <p>You can view which tube the queue is using as well.</p> <pre><code>&lt;?php\n\n$current_tube = $queue-&gt;listTubeUsed();\n</code></pre>"},{"location":"queue/#tube-manipulation","title":"Tube Manipulation","text":"<p>Tubes can be paused and resumed if needed.  The example below pauses <code>myOtherTube</code> for 3 minutes.</p> <pre><code>&lt;?php\n\n$queue-&gt;pauseTube('myOtherTube', 180);\n</code></pre> <p>Setting the delay to 0 will resume normal operation.</p> <pre><code>&lt;?php\n\n$queue-&gt;pauseTube('myOtherTube', 0);\n</code></pre>"},{"location":"queue/#server-status","title":"Server Status","text":"<p>You can get information about the entire server or specific tubes.</p> <pre><code>&lt;?php\n\n$server_stats = $queue-&gt;stats();\n\n$tube_stats = $queue-&gt;statsTube('myOtherTube');\n\n$server_status = $queue-&gt;readStatus();\n</code></pre>"},{"location":"queue/#job-management","title":"Job Management","text":"<p>Beanstalkd supports the ability to manage jobs with both the idea of delaying a job and removing a job from the queue for later processing.</p> <p>Burying a job is typically used to deal with potential problems outside of the worker that can be resolved.  This takes the job and puts it into the buried queue.</p> <pre><code>&lt;?php\n\n$job = $queue-&gt;reserve();\n$job-&gt;bury();\n</code></pre> <p>A list of buried jobs is stored on the server.  You can inspect the first buried job in the queue.</p> <pre><code>&lt;?php\n\n$job_data = $queue-&gt;peekBuried();\n</code></pre> <p>If the buried queue is empty, this will return <code>false</code>, else it returns a Job object.</p> <p>You can kick the first [N] buried jobs in the buried queue to put it/them back in the ready queue.  Below is an example of kicking the first three buried jobs.</p> <pre><code>&lt;?php\n\n$queue-&gt;kick(3);\n</code></pre> <p>Releasing jobs back to the ready queue can be done, along with an optional delay.  This is handy for transient errors while processing a job.  Below is an example of putting a low (100) priority and a 3 minute delay on a job.</p> <pre><code>&lt;?php\n\n$job = $queue-&gt;reserve();\n\n$job-&gt;release(100, 180);\n</code></pre> <p>Priority and delay are the same as when <code>put</code>ing a job on the queue.</p> <p>Inspecting a job in the queue can be accomplished with <code>jobPeek($job_id)</code>.  The example below attempts to peek at job id 5.</p> <pre><code>&lt;?php\n\n$queue-&gt;jobPeek(5)\n</code></pre> <p>Jobs that have been <code>delete</code>ed cannot be inspected and will return <code>false</code>.  Ready, buried, and delayed jobs will return a Job object.</p>"},{"location":"queue/#further-reading","title":"Further Reading","text":"<p>The protocol text contains all of the internal operational details of BeanstalkD and is often considered the defacto documentation for BeanstalkD.</p>"},{"location":"reproducible-tests/","title":"Reproducible Tests","text":"<p>If you have found a bug it is important to add relevant reproducibility information to your issue to allow us to reproduce the bug and fix it quicker. If you have the application publicly on GitHub please submit the repository address along with the issue description. You can also use Gist to post any code you want to share with us.</p>"},{"location":"reproducible-tests/#creating-a-small-script","title":"Creating a small script","text":"<p>A small single-file script is usually the best way to reproduce a problem:</p> <pre><code>&lt;?php\n\n$di = new Phalcon\\DI\\FactoryDefault();\n\n//Register your custom services\n$di['session'] = function() {\n    $session = new \\Phalcon\\Session\\Adapter\\Files();\n    $session-&gt;start();\n    return $session;\n};\n\n$di['cookies'] = function() {\n    $cookies = new Phalcon\\Http\\Response\\Cookies();\n    $cookies-&gt;useEncryption(false);\n    return $cookies;\n};\n\nclass SomeClass extends \\Phalcon\\DI\\Injectable\n{\n    public function someMethod()\n    {\n        $cookies = $this-&gt;getDI()-&gt;getCookies();\n        $cookies-&gt;set(\"mycookie\", \"test\", time() + 3600, \"/\");\n    }\n}\n\n$c = new MyClass;\n$c-&gt;setDI($di);\n$c-&gt;someMethod();\n\n$di['cookies']-&gt;send();\n\nvar_dump($_SESSION);\nvar_dump($_COOKIE);\n</code></pre> <p>Depending on your application, you can use these skeletons in order to create your own script and reproduce the bug:</p> <p></p>"},{"location":"reproducible-tests/#database","title":"Database","text":"<p>Remember to add to the script how you registered the database service:</p> <pre><code>&lt;?php\n\n$di = new Phalcon\\DI\\FactoryDefault();\n\n$di-&gt;setShared('db', function () {\n    return new \\Phalcon\\Db\\Adapter\\PDO\\Mysql(array(\n        'host' =&gt; '127.0.0.1',\n        'username' =&gt; 'root',\n        'password' =&gt; '',\n        'dbname'   =&gt; 'test',\n        'charset'  =&gt; 'utf8',\n    ));\n});\n\n$result = $di['db']-&gt;query('SELECT * FROM customers');\n</code></pre> <p></p>"},{"location":"reproducible-tests/#singlemulti-module-applications","title":"Single/Multi-Module applications","text":"<p>Remember to add to the script how you are creating the Phalcon\\Mvc\\Application instance:</p> <pre><code>&lt;?php\n\n$di  = new \\Phalcon\\DI\\FactoryDefault();\n\n//other services\n\n$app = new \\Phalcon\\Mvc\\Application();\n$app-&gt;setDi($di);\n\n//register modules if any\n\necho $app-&gt;handle-&gt;getContent()\n</code></pre> <p>Include models and controllers as part of the test:</p> <pre><code>&lt;?php\n\n$di  = new \\Phalcon\\DI\\FactoryDefault();\n\n//other services\n\n$app = new \\Phalcon\\Mvc\\Application();\n$app-&gt;setDi($di);\n\nclass IndexController extends Phalcon\\Mvc\\Controller\n{\n    public function indexAction() { \n          /* your content here */\n    }\n}\n\nclass Users extends Phalcon\\Mvc\\Model\n{\n}\n\necho $app-&gt;handle-&gt;getContent()\n</code></pre> <p></p>"},{"location":"reproducible-tests/#micro-application","title":"Micro application","text":"<p>Follow this structure to create the script:</p> <pre><code>&lt;?php\n\n$di = new \\Phalcon\\DI\\FactoryDefault();\n\n$app = new \\Phalcon\\Mvc\\Micro($di);\n\n//define your routes here\n\n$app-&gt;handle();\n</code></pre> <p></p>"},{"location":"reproducible-tests/#orm","title":"ORM","text":"<p>You can provide your own database schema or even better use any of the phalcon test databases. Follow this structure to create the script:</p> <pre><code>&lt;?php\n\nuse Phalcon\\DI;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as Connection;\nuse Phalcon\\Mvc\\Model\\Manager as ModelsManager;\nuse Phalcon\\Mvc\\Model\\Metadata\\Memory as ModelsMetaData;\n\n$eventsManager = new EventsManager();\n\n$di = new DI();\n\n$connection = new Connection(array(\n    \"host\" =&gt; \"localhost\",\n    \"username\" =&gt; \"root\",\n    \"password\" =&gt; \"\",\n    \"dbname\" =&gt; \"test\"\n));\n\n$connection-&gt;setEventsManager($eventsManager);\n\n$eventsManager-&gt;attach('db',\n    function ($event, $connection) {\n        switch ($event-&gt;getType()) {\n            case 'beforeQuery':\n                echo $connection-&gt;getSqlStatement(), \"&lt;br&gt;\\n\";\n                break;\n        }\n    }\n);\n\n$di['db'] = $connection;\n$di['modelsManager'] = new ModelsManager();\n$di['modelsMetadata'] = new ModelsMetadata();\n\nif (!$connection-&gt;tableExists('user', 'test')) {\n    $connection-&gt;execute('CREATE TABLE user (id integer primary key auto_increment, email varchar(120) not null)');\n}\n\nclass User extends \\Phalcon\\Mvc\\Model\n{\n    public $id;\n\n    public $email;\n\n    public static function myCustomUserCreator()\n    {\n        $newUser = new User();\n        $newUser-&gt;email = 'test';\n        if ($newUser-&gt;save() == false) {\n            return false;\n        }\n        return $newUser-&gt;id;        \n    }\n}\n\necho User::myCustomUserCreator();\n</code></pre>"},{"location":"request/","title":"Request Environment","text":"<p>Every HTTP request (usually originated by a browser) contains additional information regarding the request such as header data, files, variables, etc. A web based application needs to parse that information so as to provide the correct response back to the requester. Phalcon\\Http\\Request encapsulates the information of the request, allowing you to access it in an object-oriented way.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n// Getting a request instance\n$request = new Request();\n\n// Check whether the request was made with method POST\nif ($request-&gt;isPost()) {\n    // Check whether the request was made with Ajax\n    if ($request-&gt;isAjax()) {\n        echo 'Request was made using POST and AJAX';\n    }\n}\n</code></pre>"},{"location":"request/#getting-values","title":"Getting Values","text":"<p>PHP automatically fills the superglobal arrays <code>$_GET</code> and <code>$_POST</code> depending on the type of the request. These arrays contain the values present in forms submitted or the parameters sent via the URL. The variables in the arrays are never sanitized and can contain illegal characters or even malicious code, which can lead to SQL injection or Cross Site Scripting (XSS) attacks.</p> <p>Phalcon\\Http\\Request allows you to access the values stored in the <code>$_REQUEST</code>, <code>$_GET</code> and <code>$_POST</code> arrays and sanitize or filter them with the filter service, (by default Phalcon\\Filter). The following examples offer the same behavior:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Filter;\n\n$filter = new Filter();\n\n// Manually applying the filter\n$email = $filter-&gt;sanitize($_POST['user_email'], 'email');\n\n// Manually applying the filter to the value\n$email = $filter-&gt;sanitize($request-&gt;getPost('user_email'), 'email');\n\n// Automatically applying the filter\n$email = $request-&gt;getPost('user_email', 'email');\n\n// Setting a default value if the param is null\n$email = $request-&gt;getPost('user_email', 'email', 'some@example.com');\n\n// Setting a default value if the param is null without filtering\n$email = $request-&gt;getPost('user_email', null, 'some@example.com');\n</code></pre>"},{"location":"request/#accessing-the-request-from-controllers","title":"Accessing the Request from Controllers","text":"<p>The most common place to access the request environment is in an action of a controller. To access the Phalcon\\Http\\Request object from a controller you will need to use the <code>$this-&gt;request</code> public property of the controller:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Check if request has made with POST\n        if ($this-&gt;request-&gt;isPost()) {\n            // Access POST data\n            $customerName = $this-&gt;request-&gt;getPost('name');\n            $customerBorn = $this-&gt;request-&gt;getPost('born');\n        }\n    }\n}\n</code></pre>"},{"location":"request/#uploading-files","title":"Uploading Files","text":"<p>Another common task is file uploading. Phalcon\\Http\\Request offers an object-oriented way to achieve this task:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function uploadAction()\n    {\n        // Check if the user has uploaded files\n        if ($this-&gt;request-&gt;hasFiles()) {\n            $files = $this-&gt;request-&gt;getUploadedFiles();\n\n            // Print the real file names and sizes\n            foreach ($files as $file) {\n                // Print file details\n                echo $file-&gt;getName(), ' ', $file-&gt;getSize(), '\\n';\n\n                // Move the file into the application\n                $file-&gt;moveTo(\n                    'files/' . $file-&gt;getName()\n                );\n            }\n        }\n    }\n}\n</code></pre> <p>Each object returned by <code>Phalcon\\Http\\Request::getUploadedFiles()</code> is an instance of the Phalcon\\Http\\Request\\File class. Using the <code>$_FILES</code> superglobal array offers the same behavior. <code>Phalcon\\Http\\Request\\File&gt;</code> encapsulates only the information related to each file uploaded with the request.</p>"},{"location":"request/#working-with-headers","title":"Working with Headers","text":"<p>As mentioned above, request headers contain useful information that allow us to send the proper response back to the user. The following examples show usages of that information:</p> <pre><code>&lt;?php\n\n// Get the Http-X-Requested-With header\n$requestedWith = $request-&gt;getHeader('HTTP_X_REQUESTED_WITH');\n\nif ($requestedWith === 'XMLHttpRequest') {\n    echo 'The request was made with Ajax';\n}\n\n// Same as above\nif ($request-&gt;isAjax()) {\n    echo 'The request was made with Ajax';\n}\n\n// Check the request layer\nif ($request-&gt;isSecure()) {\n    echo 'The request was made using a secure layer';\n}\n\n// Get the servers's IP address. ie. 192.168.0.100\n$ipAddress = $request-&gt;getServerAddress();\n\n// Get the client's IP address ie. 201.245.53.51\n$ipAddress = $request-&gt;getClientAddress();\n\n// Get the User Agent (HTTP_USER_AGENT)\n$userAgent = $request-&gt;getUserAgent();\n\n// Get the best acceptable content by the browser. ie text/xml\n$contentType = $request-&gt;getAcceptableContent();\n\n// Get the best charset accepted by the browser. ie. utf-8\n$charset = $request-&gt;getBestCharset();\n\n// Get the best language accepted configured in the browser. ie. en-us\n$language = $request-&gt;getBestLanguage();\n\n// Check if a header exists\nif ($request-&gt;hasHeader('my-header')) {\n    echo \"Mary had a little lamb\";\n}\n</code></pre>"},{"location":"request/#events","title":"Events","text":"<p>When using HTTP authorization, the <code>Authorization</code> header has the following format:</p> <pre><code>Authorization: &lt;type&gt; &lt;credentials&gt;\n</code></pre> <p>where <code>&lt;type&gt;</code> is an authentication type. A common type is <code>Basic</code>. Additional authentication types are described in IANA registry of Authentication schemes and Authentication for AWS servers (AWS4-HMAC-SHA256). In 99.99% use cases the authentication type is:</p> <ul> <li><code>AWS4-HMAC-SHA256</code></li> <li><code>Basic</code></li> <li><code>Bearer</code></li> <li><code>Digest</code></li> <li><code>HOBA</code></li> <li><code>Mutual</code></li> <li><code>Negotiate</code></li> <li><code>OAuth</code></li> <li><code>SCRAM-SHA-1</code></li> <li><code>SCRAM-SHA-256</code></li> <li><code>vapid</code></li> </ul> <p>You can use the <code>request:beforeAuthorizationResolve</code> and <code>request:afterAuthorizationResolve</code> events to perform additional operations before or after the authorization resolves. A custom authorization resolver is required.</p> <p>Example without using custom authorization resolver: <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$_SERVER['HTTP_AUTHORIZATION'] = 'Enigma Secret';\n\n$request = new Request();\nprint_r($request-&gt;getHeaders());\n</code></pre></p> <p>Result: </p> <pre><code>Array\n(\n    [Authorization] =&gt; Enigma Secret\n)\n\nType: Enigma\nCredentials: Secret\n</code></pre> <p>Example using custom authorization resolver: <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Events\\Manager;\n\nclass NegotiateAuthorizationListener\n{\n    public function afterAuthorizationResolve(Event $event, Request $request, array $data)\n    {\n        if (empty($data['server']['CUSTOM_KERBEROS_AUTH'])) {\n            return false;\n        }\n\n        list($type,) = explode(' ', $data['server']['CUSTOM_KERBEROS_AUTH'], 2);\n\n        if (!$type || stripos($type, 'negotiate') !== 0) {\n            return false;\n        }\n\n        return [\n           'Authorization'=&gt; $data['server']['CUSTOM_KERBEROS_AUTH'],\n        ];\n    }\n}\n\n$_SERVER['CUSTOM_KERBEROS_AUTH'] = 'Negotiate a87421000492aa874209af8bc028';\n\n$di = new Di();\n\n$di-&gt;set('eventsManager', function () {\n    $manager = new Manager();\n    $manager-&gt;attach('request', new NegotiateAuthorizationListener());\n\n    return $manager;\n});\n\n$request = new Request();\n$request-&gt;setDI($di);\n\nprint_r($request-&gt;getHeaders());\n</code></pre></p> <p>Result: </p> <pre><code>Array\n(\n    [Authorization] =&gt; Negotiate a87421000492aa874209af8bc028\n)\n\nType: Negotiate\nCredentials: a87421000492aa874209af8bc028\n</code></pre>"},{"location":"response/","title":"Returning Responses","text":"<p>Part of the HTTP cycle is returning responses to clients. Phalcon\\Http\\Response is the Phalcon component designed to achieve this task. HTTP responses are usually composed by headers and body. The following is an example of basic usage:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n// Getting a response instance\n$response = new Response();\n\n// Set status code\n$response-&gt;setStatusCode(404, 'Not Found');\n\n// Set the content of the response\n$response-&gt;setContent(\"Sorry, the page doesn't exist\");\n\n// Send response to the client\n$response-&gt;send();\n</code></pre> <p>If you are using the full MVC stack there is no need to create responses manually. However, if you need to return a response directly from a controller's action follow this example:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Mvc\\Controller;\n\nclass FeedController extends Controller\n{\n    public function getAction()\n    {\n        // Getting a response instance\n        $response = new Response();\n\n        $feed = // ... Load here the feed\n\n        // Set the content of the response\n        $response-&gt;setContent(\n            $feed-&gt;asString()\n        );\n\n        // Return the response\n        return $response;\n    }\n}\n</code></pre>"},{"location":"response/#working-with-headers","title":"Working with Headers","text":"<p>Headers are an important part of the HTTP response. It contains useful information about the response state like the HTTP status, type of response and much more.</p> <p>You can set headers in the following way:</p> <pre><code>&lt;?php\n\n// Setting a header by its name\n$response-&gt;setHeader('Content-Type', 'application/pdf');\n$response-&gt;setHeader('Content-Disposition', \"attachment; filename='downloaded.pdf'\");\n\n// Setting a raw header\n$response-&gt;setRawHeader('HTTP/1.1 200 OK');\n</code></pre> <p>A Phalcon\\Http\\Response\\Headers bag internally manages headers. This class retrieves the headers before sending it to client:</p> <pre><code>&lt;?php\n\n// Get the headers bag\n$headers = $response-&gt;getHeaders();\n\n// Get a header by its name\n$contentType = $headers-&gt;get('Content-Type');\n</code></pre>"},{"location":"response/#making-redirections","title":"Making Redirections","text":"<p>With Phalcon\\Http\\Response you can also execute HTTP redirections:</p> <pre><code>&lt;?php\n\n// Redirect to the default URI\n$response-&gt;redirect();\n\n// Redirect to the local base URI\n$response-&gt;redirect('posts/index');\n\n// Redirect to an external URL\n$response-&gt;redirect('http://en.wikipedia.org', true);\n\n// Redirect specifying the HTTP status code\n$response-&gt;redirect('http://www.example.com/new-location', true, 301);\n</code></pre> <p>All internal URIs are generated using the url service (by default Phalcon\\Mvc\\Url). This example demonstrates how you can redirect using a route you have defined in your application:</p> <pre><code>&lt;?php\n\n// Redirect based on a named route\nreturn $response-&gt;redirect(\n    [\n        'for'        =&gt; 'index-lang',\n        'lang'       =&gt; 'jp',\n        'controller' =&gt; 'index',\n    ]\n);\n</code></pre> <p>Even if there is a view associated with the current action, it will not be rendered since <code>redirect</code> disables the view.</p>"},{"location":"response/#http-cache","title":"HTTP Cache","text":"<p>One of the easiest ways to improve the performance in your applications and reduce the traffic is using HTTP Cache. Most modern browsers support HTTP caching and is one of the reasons why many websites are currently fast.</p> <p>HTTP Cache can be altered in the following header values sent by the application when serving a page for the first time:</p> <ul> <li><code>Expires:</code> With this header the application can set a date in the future or the past telling the browser when the page must expire.</li> <li><code>Cache-Control:</code> This header allows to specify how much time a page should be considered fresh in the browser.</li> <li><code>Last-Modified:</code> This header tells the browser which was the last time the site was updated avoiding page re-loads.</li> <li><code>ETag:</code> An etag is a unique identifier that must be created including the modification timestamp of the current page.</li> </ul>"},{"location":"response/#setting-an-expiration-time","title":"Setting an Expiration Time","text":"<p>The expiration date is one of the easiest and most effective ways to cache a page in the client (browser). Starting from the current date we add the amount of time the page will be stored in the browser cache. Until this date expires no new content will be requested from the server:</p> <pre><code>&lt;?php\n\n$expiryDate = new DateTime();\n$expiryDate-&gt;modify('+2 months');\n\n$response-&gt;setExpires($expiryDate);\n</code></pre> <p>The Response component automatically shows the date in GMT timezone as expected in an Expires header.</p> <p>If we set this value to a date in the past the browser will always refresh the requested page:</p> <pre><code>&lt;?php\n\n$expiryDate = new DateTime();\n$expiryDate-&gt;modify('-10 minutes');\n\n$response-&gt;setExpires($expiryDate);\n</code></pre> <p>Browsers rely on the client's clock to assess if this date has passed or not. The client clock can be modified to make pages expire and this may represent a limitation for this cache mechanism.</p>"},{"location":"response/#cache-control","title":"Cache-Control","text":"<p>This header provides a safer way to cache the pages served. We simply must specify a time in seconds telling the browser how long it must keep the page in its cache:</p> <pre><code>&lt;?php\n\n// Starting from now, cache the page for one day\n$response-&gt;setHeader('Cache-Control', 'max-age=86400');\n</code></pre> <p>The opposite effect (avoid page caching) is achieved in this way:</p> <pre><code>&lt;?php\n\n// Never cache the served page\n$response-&gt;setHeader('Cache-Control', 'private, max-age=0, must-revalidate');\n</code></pre>"},{"location":"response/#e-tag","title":"E-Tag","text":"<p>An <code>entity-tag</code> or <code>E-tag</code> is a unique identifier that helps the browser realize if the page has changed or not between two requests. The identifier must be calculated taking into account that this must change if the previously served content has changed:</p> <pre><code>&lt;?php\n\n// Calculate the E-Tag based on the modification time of the latest news\n$mostRecentDate = News::maximum(\n    [\n        'column' =&gt; 'created_at'\n    ]\n);\n\n$eTag = md5($mostRecentDate);\n\n// Send an E-Tag header\n$response-&gt;setHeader('E-Tag', $eTag);\n</code></pre>"},{"location":"routing/","title":"Routing","text":"<p>The router component allows you to define routes that are mapped to controllers or handlers that should receive the request. A router simply parses a URI to determine this information. The router has two modes: MVC mode and match-only mode. The first mode is ideal for working with MVC applications.</p>"},{"location":"routing/#defining-routes","title":"Defining Routes","text":"<p>Phalcon\\Mvc\\Router provides advanced routing capabilities. In MVC mode, you can define routes and map them to controllers/actions that you require. A route is defined as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n// Create the router\n$router = new Router();\n\n// Define a route\n$router-&gt;add(\n    '/admin/users/my-profile',\n    [\n        'controller' =&gt; 'users',\n        'action'     =&gt; 'profile',\n    ]\n);\n\n// Another route\n$router-&gt;add(\n    '/admin/users/change-password',\n    [\n        'controller' =&gt; 'users',\n        'action'     =&gt; 'changePassword',\n    ]\n);\n\n$router-&gt;handle();\n````\n\nThe first parameter of the `add()` method is the pattern you want to match and, optionally, the second parameter is a set of paths.\nIn this case, if the URI is `/admin/users/my-profile`, then the `users` controller with its action `profile` will be executed. It's important to remember that the router does not execute the controller and action, it only collects this information to inform the correct component (i.e. [Phalcon\\Mvc\\Dispatcher](api/Phalcon_Mvc_Dispatcher.md)) that this is the controller/action it should execute.\n\nAn application can have many paths and defining routes one by one can be a cumbersome task. In these cases we can create more flexible routes:\n\n```php\n&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n// Create the router\n$router = new Router();\n\n// Define a route\n$router-&gt;add(\n    '/admin/:controller/a/:action/:params',\n    [\n        'controller' =&gt; 1,\n        'action'     =&gt; 2,\n        'params'     =&gt; 3,\n    ]\n);\n</code></pre> <p>In the example above, we're using wildcards to make a route valid for many URIs. For example, by accessing the following URL (<code>/admin/users/a/delete/dave/301</code>) would produce:</p> Controller Action Parameter Parameter users delete dave 301 <p>The <code>add()</code> method receives a pattern that can optionally have predefined placeholders and regular expression modifiers. All the routing patterns must start with a forward slash character (<code>/</code>). The regular expression syntax used is the same as the PCRE regular expressions. Note that, it is not necessary to add regular expression delimiters. All route patterns are case-insensitive.</p> <p>The second parameter defines how the matched parts should bind to the controller/action/parameters. Matching parts are placeholders or subpatterns delimited by parentheses (round brackets). In the example given above, the first subpattern matched (<code>:controller</code>) is the controller part of the route, the second the action and so on.</p> <p>These placeholders help writing regular expressions that are more readable for developers and easier to understand. The following placeholders are supported:</p> Placeholder Regular Expression Usage <code>/:module</code> <code>/([a-zA-Z0-9\\_\\-]+)</code> Matches a valid module name with alpha-numeric characters only <code>/:controller</code> <code>/([a-zA-Z0-9\\_\\-]+)</code> Matches a valid controller name with alpha-numeric characters only <code>/:action</code> <code>/([a-zA-Z0-9_-]+)</code> Matches a valid action name with alpha-numeric characters only <code>/:params</code> <code>(/.*)*</code> Matches a list of optional words separated by slashes. Only use this placeholder at the end of a route <code>/:namespace</code> <code>/([a-zA-Z0-9\\_\\-]+)</code> Matches a single level namespace name <code>/:int</code> <code>/([0-9]+)</code> Matches an integer parameter <p>Controller names are camelized, this means that characters (<code>-</code>) and (<code>_</code>) are removed and the next character is uppercased. For instance, some_controller is converted to SomeController.</p> <p>Since you can add many routes as you need using the <code>add()</code> method, the order in which routes are added indicate their relevance, latest routes added have more relevance than first added. Internally, all defined routes are traversed in reverse order until Phalcon\\Mvc\\Router finds the one that matches the given URI and processes it, while ignoring the rest.</p>"},{"location":"routing/#parameters-with-names","title":"Parameters with Names","text":"<p>The example below demonstrates how to define names to route parameters:</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    '/news/([0-9]{4})/([0-9]{2})/([0-9]{2})/:params',\n    [\n        'controller' =&gt; 'posts',\n        'action'     =&gt; 'show',\n        'year'       =&gt; 1, // ([0-9]{4})\n        'month'      =&gt; 2, // ([0-9]{2})\n        'day'        =&gt; 3, // ([0-9]{2})\n        'params'     =&gt; 4, // :params\n    ]\n);\n</code></pre> <p>In the above example, the route doesn't define a <code>controller</code> or <code>action</code> part. These parts are replaced with fixed values (<code>posts</code> and <code>show</code>). The user will not know the controller that is really dispatched by the request. Inside the controller, those named parameters can be accessed as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction()\n    {\n        // Get 'year' parameter\n        $year = $this-&gt;dispatcher-&gt;getParam('year');\n\n        // Get 'month' parameter\n        $month = $this-&gt;dispatcher-&gt;getParam('month');\n\n        // Get 'day' parameter\n        $day = $this-&gt;dispatcher-&gt;getParam('day');\n\n        // ...\n    }\n}\n</code></pre> <p>Note that the values of the parameters are obtained from the dispatcher. This happens because it is the component that finally interacts with the drivers of your application. Moreover, there is also another way to create named parameters as part of the pattern:</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    '/documentation/{chapter}/{name}.{type:[a-z]+}',\n    [\n        'controller' =&gt; 'documentation',\n        'action'     =&gt; 'show',\n    ]\n);\n</code></pre> <p>You can access their values in the same way as before:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass DocumentationController extends Controller\n{\n    public function showAction()\n    {\n        // Get 'name' parameter\n        $name = $this-&gt;dispatcher-&gt;getParam('name');\n\n        // Get 'type' parameter\n        $type = $this-&gt;dispatcher-&gt;getParam('type');\n\n        // ...\n    }\n}\n</code></pre>"},{"location":"routing/#short-syntax","title":"Short Syntax","text":"<p>If you don't like using an array to define the route paths, an alternative syntax is also available. The following examples produce the same result:</p> <pre><code>&lt;?php\n\n// Short form\n$router-&gt;add(\n    '/posts/{year:[0-9]+}/{title:[a-z\\-]+}',\n    'Posts::show'\n);\n\n// Array form\n$router-&gt;add(\n    '/posts/([0-9]+)/([a-z\\-]+)',\n    [\n       'controller' =&gt; 'posts',\n       'action'     =&gt; 'show',\n       'year'       =&gt; 1,\n       'title'      =&gt; 2,\n    ]\n);\n</code></pre>"},{"location":"routing/#mixing-array-and-short-syntax","title":"Mixing Array and Short Syntax","text":"<p>Array and short syntax can be mixed to define a route, in this case note that named parameters automatically are added to the route paths according to the position on which they were defined:</p> <pre><code>&lt;?php\n\n// First position must be skipped because it is used for\n// the named parameter 'country'\n$router-&gt;add(\n    '/news/{country:[a-z]{2}}/([a-z+])/([a-z\\-+])',\n    [\n        'section' =&gt; 2, // Positions start with 2\n        'article' =&gt; 3,\n    ]\n);\n</code></pre>"},{"location":"routing/#routing-to-modules","title":"Routing to Modules","text":"<p>You can define routes whose paths include modules. This is specially suitable to multi-module applications. It's possible define a default route that includes a module wildcard:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router(false);\n\n$router-&gt;add(\n    '/:module/:controller/:action/:params',\n    [\n        'module'     =&gt; 1,\n        'controller' =&gt; 2,\n        'action'     =&gt; 3,\n        'params'     =&gt; 4,\n    ]\n);\n</code></pre> <p>In this case, the route always must have the module name as part of the URL. For example, the following URL: <code>/admin/users/edit/sonny</code>, will be processed as:</p> Module Controller Action Parameter admin users edit sonny <p>Or you can bind specific routes to specific modules:</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    '/login',\n    [\n        'module'     =&gt; 'backend',\n        'controller' =&gt; 'login',\n        'action'     =&gt; 'index',\n    ]\n);\n\n$router-&gt;add(\n    '/products/:action',\n    [\n        'module'     =&gt; 'frontend',\n        'controller' =&gt; 'products',\n        'action'     =&gt; 1,\n    ]\n);\n</code></pre> <p>Or bind them to specific namespaces:</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    '/:namespace/login',\n    [\n        'namespace'  =&gt; 1,\n        'controller' =&gt; 'login',\n        'action'     =&gt; 'index',\n    ]\n);\n</code></pre> <p>Namespaces/class names must be passed separated:</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    '/login',\n    [\n        'namespace'  =&gt; 'Backend\\Controllers',\n        'controller' =&gt; 'login',\n        'action'     =&gt; 'index',\n    ]\n);\n</code></pre>"},{"location":"routing/#http-method-restrictions","title":"HTTP Method Restrictions","text":"<p>When you add a route using simply <code>add()</code>, the route will be enabled for any HTTP method. Sometimes we can restrict a route to a specific method, this is especially useful when creating RESTful applications:</p> <pre><code>&lt;?php\n\n// This route only will be matched if the HTTP method is GET\n$router-&gt;addGet(\n    '/products/edit/{id}',\n    'Products::edit'\n);\n\n// This route only will be matched if the HTTP method is POST\n$router-&gt;addPost(\n    '/products/save',\n    'Products::save'\n);\n\n// This route will be matched if the HTTP method is POST or PUT\n$router-&gt;add(\n    '/products/update',\n    'Products::update'\n)-&gt;via(\n    [\n        'POST',\n        'PUT',\n    ]\n);\n</code></pre>"},{"location":"routing/#using-conversors","title":"Using conversors","text":"<p>Conversors allow you to freely transform the route's parameters before passing them to the dispatcher. The following examples show how to use them:</p> <pre><code>&lt;?php\n\n// The action name allows dashes, an action can be: /products/new-ipod-nano-4-generation\n$route = $router-&gt;add(\n    '/products/{slug:[a-z\\-]+}',\n    [\n        'controller' =&gt; 'products',\n        'action'     =&gt; 'show',\n    ]\n);\n\n$route-&gt;convert(\n    'slug',\n    function ($slug) {\n        // Transform the slug removing the dashes\n        return str_replace('-', '', $slug);\n    }\n);\n</code></pre> <p>Another use case for conversors is binding a model into a route. This allows the model to be passed into the defined action directly:</p> <pre><code>&lt;?php\n\n// This example works off the assumption that the ID is being used as parameter in the url: /products/4\n$route = $router-&gt;add(\n    '/products/{id}',\n    [\n        'controller' =&gt; 'products',\n        'action'     =&gt; 'show',\n    ]\n);\n\n$route-&gt;convert(\n    'id',\n    function ($id) {\n        // Fetch the model\n        return Product::findFirstById($id);\n    }\n);\n</code></pre>"},{"location":"routing/#groups-of-routes","title":"Groups of Routes","text":"<p>If a set of routes have common paths they can be grouped to easily maintain them:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\nuse Phalcon\\Mvc\\Router\\Group as RouterGroup;\n\n$router = new Router();\n\n// Create a group with a common module and controller\n$blog = new RouterGroup(\n    [\n        'module'     =&gt; 'blog',\n        'controller' =&gt; 'index',\n    ]\n);\n\n// All the routes start with /blog\n$blog-&gt;setPrefix('/blog');\n\n// Add a route to the group\n$blog-&gt;add(\n    '/save',\n    [\n        'action' =&gt; 'save',\n    ]\n);\n\n// Add another route to the group\n$blog-&gt;add(\n    '/edit/{id}',\n    [\n        'action' =&gt; 'edit',\n    ]\n);\n\n// This route maps to a controller different than the default\n$blog-&gt;add(\n    '/blog',\n    [\n        'controller' =&gt; 'blog',\n        'action'     =&gt; 'index',\n    ]\n);\n\n// Add the group to the router\n$router-&gt;mount($blog);\n</code></pre> <p>You can move groups of routes to separate files in order to improve the organization and code reusing in the application:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router\\Group as RouterGroup;\n\nclass BlogRoutes extends RouterGroup\n{\n    public function initialize()\n    {\n        // Default paths\n        $this-&gt;setPaths(\n            [\n                'module'    =&gt; 'blog',\n                'namespace' =&gt; 'Blog\\Controllers',\n            ]\n        );\n\n        // All the routes start with /blog\n        $this-&gt;setPrefix('/blog');\n\n        // Add a route to the group\n        $this-&gt;add(\n            '/save',\n            [\n                'action' =&gt; 'save',\n            ]\n        );\n\n        // Add another route to the group\n        $this-&gt;add(\n            '/edit/{id}',\n            [\n                'action' =&gt; 'edit',\n            ]\n        );\n\n        // This route maps to a controller different than the default\n        $this-&gt;add(\n            '/blog',\n            [\n                'controller' =&gt; 'blog',\n                'action'     =&gt; 'index',\n            ]\n        );\n    }\n}\n</code></pre> <p>Then mount the group in the router:</p> <pre><code>&lt;?php\n\n// Add the group to the router\n$router-&gt;mount(\n    new BlogRoutes()\n);\n</code></pre>"},{"location":"routing/#matching-routes","title":"Matching Routes","text":"<p>A valid URI must be passed to the Router so that it can process it and find a matching route. By default, the routing URI is taken from the <code>$_GET['_url']</code> variable that is created by the rewrite engine module. A couple of rewrite rules that work very well with Phalcon are:</p> <pre><code>RewriteEngine On\nRewriteCond   %{REQUEST_FILENAME} !-d\nRewriteCond   %{REQUEST_FILENAME} !-f\nRewriteRule   ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n</code></pre> <p>In this configuration, any requests to files or folders that don't exist will be sent to <code>index.php</code>. The following example shows how to use this component in stand-alone mode:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n// Creating a router\n$router = new Router();\n\n// Define routes here if any\n// ...\n\n// Taking URI from $_GET['_url']\n$router-&gt;handle();\n\n// Or Setting the URI value directly\n$router-&gt;handle('/employees/edit/17');\n\n// Getting the processed controller\necho $router-&gt;getControllerName();\n\n// Getting the processed action\necho $router-&gt;getActionName();\n\n// Get the matched route\n$route = $router-&gt;getMatchedRoute();\n</code></pre>"},{"location":"routing/#naming-routes","title":"Naming Routes","text":"<p>Each route that is added to the router is stored internally as a Phalcon\\Mvc\\Router\\Route object. That class encapsulates all the details of each route. For instance, we can give a name to a path to identify it uniquely in our application. This is especially useful if you want to create URLs from it.</p> <pre><code>&lt;?php\n\n$route = $router-&gt;add(\n    '/posts/{year}/{title}',\n    'Posts::show'\n);\n\n$route-&gt;setName('show-posts');\n</code></pre> <p>Then, using for example the component Phalcon\\Mvc\\Url we can build routes from its name:</p> <pre><code>&lt;?php\n\n// Returns /posts/2012/phalcon-1-0-released\necho $url-&gt;get(\n    [\n        'for'   =&gt; 'show-posts',\n        'year'  =&gt; '2012',\n        'title' =&gt; 'phalcon-1-0-released',\n    ]\n);\n</code></pre>"},{"location":"routing/#usage-examples","title":"Usage Examples","text":"<p>The following are examples of custom routes:</p> <pre><code>&lt;?php\n\n// Matches '/system/admin/a/edit/7001'\n$router-&gt;add(\n    '/system/:controller/a/:action/:params',\n    [\n        'controller' =&gt; 1,\n        'action'     =&gt; 2,\n        'params'     =&gt; 3,\n    ]\n);\n\n// Matches '/es/news'\n$router-&gt;add(\n    '/([a-z]{2})/:controller',\n    [\n        'controller' =&gt; 2,\n        'action'     =&gt; 'index',\n        'language'   =&gt; 1,\n    ]\n);\n\n// Matches '/es/news'\n$router-&gt;add(\n    '/{language:[a-z]{2}}/:controller',\n    [\n        'controller' =&gt; 2,\n        'action'     =&gt; 'index',\n    ]\n);\n\n// Matches '/admin/posts/edit/100'\n$router-&gt;add(\n    '/admin/:controller/:action/:int',\n    [\n        'controller' =&gt; 1,\n        'action'     =&gt; 2,\n        'id'         =&gt; 3,\n    ]\n);\n\n// Matches '/posts/2015/02/some-cool-content'\n$router-&gt;add(\n    '/posts/([0-9]{4})/([0-9]{2})/([a-z\\-]+)',\n    [\n        'controller' =&gt; 'posts',\n        'action'     =&gt; 'show',\n        'year'       =&gt; 1,\n        'month'      =&gt; 2,\n        'title'      =&gt; 3,\n    ]\n);\n\n// Matches '/manual/en/translate.adapter.html'\n$router-&gt;add(\n    '/manual/([a-z]{2})/([a-z\\.]+)\\.html',\n    [\n        'controller' =&gt; 'manual',\n        'action'     =&gt; 'show',\n        'language'   =&gt; 1,\n        'file'       =&gt; 2,\n    ]\n);\n\n// Matches /feed/fr/le-robots-hot-news.atom\n$router-&gt;add(\n    '/feed/{lang:[a-z]+}/{blog:[a-z\\-]+}\\.{type:[a-z\\-]+}',\n    'Feed::get'\n);\n\n// Matches /api/v1/users/peter.json\n$router-&gt;add(\n    '/api/(v1|v2)/{method:[a-z]+}/{param:[a-z]+}\\.(json|xml)',\n    [\n        'controller' =&gt; 'api',\n        'version'    =&gt; 1,\n        'format'     =&gt; 4,\n    ]\n);\n</code></pre> <p>NOTE</p> <p>Beware of characters allowed in regular expression for controllers and namespaces. As these become class names and in turn they're passed through the file system could be used by attackers to read unauthorized files. A safe regular expression is: <code>/([a-zA-Z0-9\\_\\-]+)</code> </p>"},{"location":"routing/#default-behavior","title":"Default Behavior","text":"<p>Phalcon\\Mvc\\Router has a default behavior that provides a very simple routing that always expects a URI that matches the following pattern: <code>/:controller/:action/:params</code></p> <p>For example, for a URL like this <code>https://phalcon.io/documentation/show/about.html</code>, this router will translate it as follows:</p> Controller Action Parameter documentation show about.html <p>If you don't want the router to have this behavior, you must create the router passing <code>false</code> as the first parameter:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n// Create the router without default routes\n$router = new Router(false);\n</code></pre>"},{"location":"routing/#setting-the-default-route","title":"Setting the default route","text":"<p>When your application is accessed without any route, the '/' route is used to determine what paths must be used to show the initial page in your website/application:</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    '/',\n    [\n        'controller' =&gt; 'index',\n        'action'     =&gt; 'index',\n    ]\n);\n</code></pre>"},{"location":"routing/#not-found-paths","title":"Not Found Paths","text":"<p>If none of the routes specified in the router are matched, you can define a group of paths to be used in this scenario:</p> <pre><code>&lt;?php\n\n// Set 404 paths\n$router-&gt;notFound(\n    [\n        'controller' =&gt; 'index',\n        'action'     =&gt; 'route404',\n    ]\n);\n</code></pre> <p>This is typically for an Error 404 page.</p> <p>This will only work if the router was created without default routes: <code>$router = Phalcon\\Mvc\\Router(FALSE);</code></p>"},{"location":"routing/#setting-default-paths","title":"Setting default paths","text":"<p>It's possible to define default values for the module, controller or action. When a route is missing any of those paths they can be automatically filled by the router:</p> <pre><code>&lt;?php\n\n// Setting a specific default\n$router-&gt;setDefaultModule('backend');\n$router-&gt;setDefaultNamespace('Backend\\Controllers');\n$router-&gt;setDefaultController('index');\n$router-&gt;setDefaultAction('index');\n\n// Using an array\n$router-&gt;setDefaults(\n    [\n        'controller' =&gt; 'index',\n        'action'     =&gt; 'index',\n    ]\n);\n</code></pre>"},{"location":"routing/#dealing-with-extratrailing-slashes","title":"Dealing with extra/trailing slashes","text":"<p>Sometimes a route could be accessed with extra/trailing slashes. Those extra slashes would lead to produce a not-found status in the dispatcher. You can set up the router to automatically remove the slashes from the end of handled route:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n// Remove trailing slashes automatically\n$router-&gt;removeExtraSlashes(true);\n</code></pre> <p>Or, you can modify specific routes to optionally accept trailing slashes:</p> <pre><code>&lt;?php\n\n// The [/]{0,1} allows this route to have optionally have a trailing slash\n$router-&gt;add(\n    '/{language:[a-z]{2}}/:controller[/]{0,1}',\n    [\n        'controller' =&gt; 2,\n        'action'     =&gt; 'index',\n    ]\n);\n</code></pre>"},{"location":"routing/#match-callbacks","title":"Match Callbacks","text":"<p>Sometimes, routes should only be matched if they meet specific conditions. You can add arbitrary conditions to routes using the <code>beforeMatch()</code> callback. If this function return <code>false</code>, the route will be treated as non-matched:</p> <pre><code>&lt;?php\n\n$route = $router-&gt;add('/login',\n    [\n        'module'     =&gt; 'admin',\n        'controller' =&gt; 'session',\n    ]\n);\n\n$route-&gt;beforeMatch(\n    function ($uri, $route) {\n        // Check if the request was made with Ajax\n        if (isset($_SERVER['HTTP_X_REQUESTED_WITH']) &amp;&amp; $_SERVER['HTTP_X_REQUESTED_WITH'] === 'XMLHttpRequest') {\n            return false;\n        }\n\n        return true;\n    }\n);\n</code></pre> <p>You can re-use these extra conditions in classes:</p> <pre><code>&lt;?php\n\nclass AjaxFilter\n{\n    public function check()\n    {\n        return $_SERVER['HTTP_X_REQUESTED_WITH'] === 'XMLHttpRequest';\n    }\n}\n</code></pre> <p>And use this class instead of the anonymous function:</p> <pre><code>&lt;?php\n\n$route = $router-&gt;add(\n    '/get/info/{id}',\n    [\n        'controller' =&gt; 'products',\n        'action'     =&gt; 'info',\n    ]\n);\n\n$route-&gt;beforeMatch(\n    [\n        new AjaxFilter(),\n        'check'\n    ]\n);\n</code></pre> <p>As of Phalcon 3, there is another way to check this:</p> <pre><code>&lt;?php\n\n$route = $router-&gt;add(\n    '/login',\n    [\n        'module'     =&gt; 'admin',\n        'controller' =&gt; 'session',\n    ]\n);\n\n$route-&gt;beforeMatch(\n    function ($uri, $route) {\n        /**\n         * @var string $uri\n         * @var \\Phalcon\\Mvc\\Router\\Route $route\n         * @var \\Phalcon\\DiInterface $this\n         * @var \\Phalcon\\Http\\Request $request\n         */\n        $request = $this-&gt;getShared('request');\n\n        // Check if the request was made with Ajax\n        return $request-&gt;isAjax();\n    }\n);\n</code></pre>"},{"location":"routing/#hostname-constraints","title":"Hostname Constraints","text":"<p>The router allows you to set hostname constraints, this means that specific routes or a group of routes can be restricted to only match if the route also meets the hostname constraint:</p> <pre><code>&lt;?php\n\n$route = $router-&gt;add(\n    '/login',\n    [\n        'module'     =&gt; 'admin',\n        'controller' =&gt; 'session',\n        'action'     =&gt; 'login',\n    ]\n);\n\n$route-&gt;setHostName('admin.company.com');\n</code></pre> <p>The hostname can also be passed as a regular expressions:</p> <pre><code>&lt;?php\n\n$route = $router-&gt;add(\n    '/login',\n    [\n        'module'     =&gt; 'admin',\n        'controller' =&gt; 'session',\n        'action'     =&gt; 'login',\n    ]\n);\n\n    $route-&gt;setHostName('([a-z]+).company.com');\n</code></pre> <p>In groups of routes you can set up a hostname constraint that apply for every route in the group:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router\\Group as RouterGroup;\n\n// Create a group with a common module and controller\n$blog = new RouterGroup(\n    [\n        'module'     =&gt; 'blog',\n        'controller' =&gt; 'posts',\n    ]\n);\n\n// Hostname restriction\n$blog-&gt;setHostName('blog.mycompany.com');\n\n// All the routes start with /blog\n$blog-&gt;setPrefix('/blog');\n\n// Default route\n$blog-&gt;add(\n    '/',\n    [\n        'action' =&gt; 'index',\n    ]\n);\n\n// Add a route to the group\n$blog-&gt;add(\n    '/save',\n    [\n        'action' =&gt; 'save',\n    ]\n);\n\n// Add another route to the group\n$blog-&gt;add(\n    '/edit/{id}',\n    [\n        'action' =&gt; 'edit',\n    ]\n);\n\n// Add the group to the router\n$router-&gt;mount($blog);\n</code></pre>"},{"location":"routing/#uri-sources","title":"URI Sources","text":"<p>By default the URI information is obtained from the <code>$_GET['_url']</code> variable, this is passed by the Rewrite-Engine to Phalcon, you can also use <code>$_SERVER['REQUEST_URI']</code> if required:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n// ...\n\n// Use $_GET['_url'] (default)\n$router-&gt;setUriSource(\n    Router::URI_SOURCE_GET_URL\n);\n\n// Use $_SERVER['REQUEST_URI']\n$router-&gt;setUriSource(\n    Router::URI_SOURCE_SERVER_REQUEST_URI\n);\n</code></pre> <p>Or you can manually pass a URI to the <code>handle()</code> method:</p> <pre><code>&lt;?php\n\n$router-&gt;handle('/some/route/to/handle');\n</code></pre> <p>Pattern</p> <p>Please note that using <code>Router::URI_SOURCE_GET_URL</code> automatically decodes the Uri, because it is based on the <code>$_REQUEST</code> superglobal. However, for the time being, using <code>Router::URI_SOURCE_SERVER_REQUEST_URI</code> will not automatically decode the Uri for you. This will change in the next major release.</p>"},{"location":"routing/#testing-your-routes","title":"Testing your routes","text":"<p>Since this component has no dependencies, you can create a file as shown below to test your routes:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n// These routes simulate real URIs\n$testRoutes = [\n    '/',\n    '/index',\n    '/index/index',\n    '/index/test',\n    '/products',\n    '/products/index/',\n    '/products/show/101',\n];\n\n$router = new Router();\n\n// Add here your custom routes\n// ...\n\n// Testing each route\nforeach ($testRoutes as $testRoute) {\n    // Handle the route\n    $router-&gt;handle($testRoute);\n\n    echo 'Testing ', $testRoute, '&lt;br&gt;';\n\n    // Check if some route was matched\n    if ($router-&gt;wasMatched()) {\n        echo 'Controller: ', $router-&gt;getControllerName(), '&lt;br&gt;';\n        echo 'Action: ', $router-&gt;getActionName(), '&lt;br&gt;';\n    } else {\n        echo \"The route wasn't matched by any route&lt;br&gt;\";\n    }\n\n    echo '&lt;br&gt;';\n}\n</code></pre>"},{"location":"routing/#events","title":"Events","text":"<p>Like many other components, routers also have events. None of the events can stop the operation. Below is a list of available events</p> Event Description <code>router:beforeCheckRoutes</code> Fired before check all loaded routes <code>router:beforeCheckRoute</code> Fired before check a route <code>router:matchedRoute</code> Fired when a route is matched <code>router:notMatchedRoute</code> Fired is any route is matched <code>router:afterCheckRoutes</code> Fired after check all routes <code>router:beforeMount</code> Fired before mount a new route"},{"location":"routing/#annotations-router","title":"Annotations Router","text":"<p>This component provides a variant that's integrated with the annotations service. Using this strategy you can write the routes directly in the controllers instead of adding them in the service registration:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router\\Annotations as RouterAnnotations;\n\n$di['router'] = function () {\n    // Use the annotations router. We're passing false as we don't want the router to add its default patterns\n    $router = new RouterAnnotations(false);\n\n    // Read the annotations from ProductsController if the URI starts with /api/products\n    $router-&gt;addResource('Products', '/api/products');\n\n    return $router;\n};\n</code></pre> <p>The annotations can be defined in the following way:</p> <pre><code>&lt;?php\n\n/**\n * @RoutePrefix('/api/products')\n */\nclass ProductsController\n{\n    /**\n     * @Get(\n     *     '/'\n     * )\n     */\n    public function indexAction()\n    {\n\n    }\n\n    /**\n     * @Get(\n     *     '/edit/{id:[0-9]+}',\n     *     name='edit-robot'\n     * )\n     */\n    public function editAction($id)\n    {\n\n    }\n\n    /**\n     * @Route(\n     *     '/save',\n     *     methods={'POST', 'PUT'},\n     *     name='save-robot'\n     * )\n     */\n    public function saveAction()\n    {\n\n    }\n\n    /**\n     * @Route(\n     *     '/delete/{id:[0-9]+}',\n     *     methods='DELETE',\n     *     conversors={\n     *         id='MyConversors::checkId'\n     *     }\n     * )\n     */\n    public function deleteAction($id)\n    {\n\n    }\n\n    public function infoAction($id)\n    {\n\n    }\n}\n</code></pre> <p>Only methods marked with valid annotations are used as routes. List of annotations supported:</p> Name Description Usage RoutePrefix A prefix to be prepended to each route URI. This annotation must be placed at the class' docblock <code>@RoutePrefix('/api/products')</code> Route This annotation marks a method as a route. This annotation must be placed in a method docblock <code>@Route('/api/products/show')</code> Get This annotation marks a method as a route restricting the HTTP method to <code>GET</code> <code>@Get('/api/products/search')</code> Post This annotation marks a method as a route restricting the HTTP method to <code>POST</code> <code>@Post('/api/products/save')</code> Put This annotation marks a method as a route restricting the HTTP method to <code>PUT</code> <code>@Put('/api/products/save')</code> Delete This annotation marks a method as a route restricting the HTTP method to <code>DELETE</code> <code>@Delete('/api/products/delete/{id}')</code> Options This annotation marks a method as a route restricting the HTTP method to <code>OPTIONS</code> <code>@Option('/api/products/info')</code> <p>For annotations that add routes, the following parameters are supported:</p> Name Description Usage methods Define one or more HTTP method that route must meet with <code>@Route('/api/products', methods={'GET', 'POST'})</code> name Define a name for the route <code>@Route('/api/products', name='get-products')</code> paths An array of paths like the one passed to <code>Phalcon\\Mvc\\Router::add()</code> <code>@Route('/posts/{id}/{slug}', paths={module='backend'})</code> conversors A hash of conversors to be applied to the parameters <code>@Route('/posts/{id}/{slug}', conversors={id='MyConversor::getId'})</code> <p>If you're using modules in your application, it is better use the <code>addModuleResource()</code> method:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router\\Annotations as RouterAnnotations;\n\n$di['router'] = function () {\n    // Use the annotations router\n    $router = new RouterAnnotations(false);\n\n    // Read the annotations from Backend\\Controllers\\ProductsController if the URI starts with /api/products\n    $router-&gt;addModuleResource('backend', 'Products', '/api/products');\n\n    return $router;\n};\n</code></pre>"},{"location":"routing/#registering-router-instance","title":"Registering Router instance","text":"<p>You can register router during service registration with Phalcon dependency injector to make it available inside the controllers.</p> <p>You need to add code below in your bootstrap file (for example <code>index.php</code> or <code>app/config/services.php</code> if you use Phalcon Developer Tools.</p> <pre><code>&lt;?php\n\n/**\n * Add routing capabilities\n */\n$di-&gt;set(\n    'router',\n    function () {\n        require __DIR__ . '/../app/config/routes.php';\n\n        return $router;\n    }\n);\n</code></pre> <p>You need to create <code>app/config/routes.php</code> and add router initialization code, for example:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n$router-&gt;add(\n    '/login',\n    [\n        'controller' =&gt; 'login',\n        'action'     =&gt; 'index',\n    ]\n);\n\n$router-&gt;add(\n    '/products/:action',\n    [\n        'controller' =&gt; 'products',\n        'action'     =&gt; 1,\n    ]\n);\n\nreturn $router;\n</code></pre>"},{"location":"routing/#implementing-your-own-router","title":"Implementing your own Router","text":"<p>The <code>Phalcon\\Mvc\\RouterInterface</code> interface must be implemented to create your own router replacing the one provided by Phalcon.</p>"},{"location":"security/","title":"Security","text":"<p>This component aids the developer in common security tasks such as password hashing and Cross-Site Request Forgery protection (CSRF).</p>"},{"location":"security/#password-hashing","title":"Password Hashing","text":"<p>Storing passwords in plain text is a bad security practice. Anyone with access to the database will immediately have access to all user accounts thus being able to engage in unauthorized activities. To combat that, many applications use the familiar one way hashing methods 'md5' and 'sha1'. However, hardware evolves each day, and becomes faster, these algorithms are becoming vulnerable to brute force attacks. These attacks are also known as rainbow tables.</p> <p>The security component uses bcrypt as the hashing algorithm. Thanks to the 'Eksblowfish' key setup algorithm, we can make the password encryption as <code>slow</code> as we want. Slow algorithms minimize the impact of bruce force attacks. </p> <p>Bcrypt, is an adaptive hash function based on the Blowfish symmetric block cipher cryptographic algorithm. It also introduces a security or work factor, which determines how slow the hash function will be to generate the hash. This effectively negates the use of FPGA or GPU hashing techniques.</p> <p>Should hardware becomes faster in the future, we can increase the work factor to mitigate this.</p> <p>This component offers a simple interface to use the algorithm:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function registerAction()\n    {\n        $user = new Users();\n\n        $login    = $this-&gt;request-&gt;getPost('login');\n        $password = $this-&gt;request-&gt;getPost('password');\n\n        $user-&gt;login = $login;\n\n        // Store the password hashed\n        $user-&gt;password = $this-&gt;security-&gt;hash($password);\n\n        $user-&gt;save();\n    }\n}\n</code></pre> <p>We saved the password hashed with a default work factor. A higher work factor will make the password less vulnerable as its encryption will be slow. We can check if the password is correct as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass SessionController extends Controller\n{\n    public function loginAction()\n    {\n        $login    = $this-&gt;request-&gt;getPost('login');\n        $password = $this-&gt;request-&gt;getPost('password');\n\n        $user = Users::findFirstByLogin($login);\n        if ($user) {\n            if ($this-&gt;security-&gt;checkHash($password, $user-&gt;password)) {\n                // The password is valid\n            }\n        } else {\n            // To protect against timing attacks. Regardless of whether a user\n            // exists or not, the script will take roughly the same amount as\n            // it will always be computing a hash.\n            $this-&gt;security-&gt;hash(rand());\n        }\n\n        // The validation has failed\n    }\n}\n</code></pre> <p>The salt is generated using pseudo-random bytes with the PHP's function openssl_random_pseudo_bytes so is required to have the openssl extension loaded.</p>"},{"location":"security/#cross-site-request-forgery-csrf-protection","title":"Cross-Site Request Forgery (CSRF) protection","text":"<p>This is another common attack against web sites and applications. Forms designed to perform tasks such as user registration or adding comments are vulnerable to this attack.</p> <p>The idea is to prevent the form values from being sent outside our application. To fix this, we generate a random nonce (token) in each form, add the token in the session and then validate the token once the form posts data back to our application by comparing the stored token in the session to the one submitted by the form:</p> <pre><code>&lt;?php echo Tag::form('session/login') ?&gt;\n\n    &lt;!-- Login and password inputs ... --&gt;\n\n    &lt;input type='hidden' name='&lt;?php echo $this-&gt;security-&gt;getTokenKey() ?&gt;'\n        value='&lt;?php echo $this-&gt;security-&gt;getToken() ?&gt;'/&gt;\n\n&lt;/form&gt;\n</code></pre> <p>Then in the controller's action you can check if the CSRF token is valid:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass SessionController extends Controller\n{\n    public function loginAction()\n    {\n        if ($this-&gt;request-&gt;isPost()) {\n            if ($this-&gt;security-&gt;checkToken()) {\n                // The token is OK\n            }\n        }\n    }\n}\n</code></pre> <p>Remember to add a session adapter to your Dependency Injector, otherwise the token check won't work:</p> <pre><code>&lt;?php\n\n$di-&gt;setShared(\n    'session',\n    function () {\n        $session = new \\Phalcon\\Session\\Adapter\\Files();\n\n        $session-&gt;start();\n\n        return $session;\n    }\n);\n</code></pre> <p>Adding a captcha to the form is also recommended to completely avoid the risks of this attack.</p>"},{"location":"security/#setting-up-the-component","title":"Setting up the component","text":"<p>This component is automatically registered in the services container as <code>security</code>, you can re-register it to setup its options:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Security;\n\n$di-&gt;set(\n    'security',\n    function () {\n        $security = new Security();\n\n        // Set the password hashing factor to 12 rounds\n        $security-&gt;setWorkFactor(12);\n\n        return $security;\n    },\n    true\n);\n</code></pre>"},{"location":"security/#random","title":"Random","text":"<p>The Phalcon\\Security\\Random class makes it really easy to generate lots of types of random data.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Security\\Random;\n\n$random = new Random();\n\n// ...\n$bytes      = $random-&gt;bytes();\n\n// Generate a random hex string of length $len.\n$hex        = $random-&gt;hex($len);\n\n// Generate a random base64 string of length $len.\n$base64     = $random-&gt;base64($len);\n\n// Generate a random URL-safe base64 string of length $len.\n$base64Safe = $random-&gt;base64Safe($len);\n\n// Generate a UUID (version 4).\n// See https://en.wikipedia.org/wiki/Universally_unique_identifier\n$uuid       = $random-&gt;uuid();\n\n// Generate a random integer between 0 and $n.\n$number     = $random-&gt;number($n);\n</code></pre>"},{"location":"security/#external-resources","title":"External Resources","text":"<ul> <li>V\u00f6kur\u00f3, is a sample application that uses the Security component for avoid CSRF and password hashing, GitHub</li> </ul>"},{"location":"session/","title":"Storing data in the Session","text":"<p>The session component provides object-oriented wrappers to access session data.</p> <p>Reasons to use this component instead of raw-sessions:</p> <ul> <li>You can easily isolate session data across applications on the same domain</li> <li>Intercept where session data is set/get in your application</li> <li>Change the session adapter according to the application needs</li> </ul>"},{"location":"session/#starting-the-session","title":"Starting the Session","text":"<p>Some applications are session-intensive, almost any action that performs requires access to session data. There are others who access session data casually. Thanks to the service container, we can ensure that the session is accessed only when it's clearly needed:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Adapter\\Files as Session;\n\n// Start the session the first time when some component request the session service\n$di-&gt;setShared(\n    'session',\n    function () {\n        $session = new Session();\n\n        $session-&gt;start();\n\n        return $session;\n    }\n);\n</code></pre>"},{"location":"session/#factory","title":"Factory","text":"<p>Loads Session Adapter class using <code>adapter</code> option</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Factory;\n\n$options = [\n    'uniqueId'   =&gt; 'my-private-app',\n    'host'       =&gt; '127.0.0.1',\n    'port'       =&gt; 11211,\n    'persistent' =&gt; true,\n    'lifetime'   =&gt; 3600,\n    'prefix'     =&gt; 'my_',\n    'adapter'    =&gt; 'memcache',\n];\n\n$session = Factory::load($options);\n$session-&gt;start();\n</code></pre>"},{"location":"session/#storingretrieving-data-in-session","title":"Storing/Retrieving data in Session","text":"<p>From a controller, a view or any other component that extends Phalcon\\Di\\Injectable you can access the session service and store items and retrieve them in the following way:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass UserController extends Controller\n{\n    public function indexAction()\n    {\n        // Set a session variable\n        $this-&gt;session-&gt;set('user-name', 'Michael');\n    }\n\n    public function welcomeAction()\n    {\n        // Check if the variable is defined\n        if ($this-&gt;session-&gt;has('user-name')) {\n            // Retrieve its value\n            $name = $this-&gt;session-&gt;get('user-name');\n        }\n    }\n\n}\n</code></pre>"},{"location":"session/#removingdestroying-sessions","title":"Removing/Destroying Sessions","text":"<p>It's also possible remove specific variables or destroy the whole session:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass UserController extends Controller\n{\n    public function removeAction()\n    {\n        // Remove a session variable\n        $this-&gt;session-&gt;remove('user-name');\n    }\n\n    public function logoutAction()\n    {\n        // Destroy the whole session\n        $this-&gt;session-&gt;destroy();\n    }\n}\n</code></pre>"},{"location":"session/#isolating-session-data-between-applications","title":"Isolating Session Data between Applications","text":"<p>Sometimes a user can use the same application twice, on the same server, in the same session. Surely, if we use variables in session, we want that every application have separate session data (even though the same code and same variable names). To solve this, you can add a prefix for every session variable created in a certain application:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Adapter\\Files as Session;\n\n// Isolating the session data\n$di-&gt;set(\n    'session',\n    function () {\n        // All variables created will prefixed with 'my-app-1'\n        $session = new Session(\n            [\n                'uniqueId' =&gt; 'my-app-1',\n            ]\n        );\n\n        $session-&gt;start();\n\n        return $session;\n    }\n);\n</code></pre> <p>Adding a unique ID is not necessary.</p>"},{"location":"session/#session-bags","title":"Session Bags","text":"<p>Phalcon\\Session\\Bag is a component that helps separating session data into <code>namespaces</code>. Working by this way you can easily create groups of session variables into the application. By only setting the variables in the <code>bag</code>, it's automatically stored in session:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Bag as SessionBag;\n\n$user = new SessionBag('user');\n\n$user-&gt;setDI($di);\n\n$user-&gt;name = 'Kimbra Johnson';\n$user-&gt;age  = 22;\n</code></pre>"},{"location":"session/#persistent-data-in-components","title":"Persistent Data in Components","text":"<p>Controller, components and classes that extends Phalcon\\Di\\Injectable may inject a Phalcon\\Session\\Bag. This class isolates variables for every class. Thanks to this you can persist data between requests in every class in an independent way.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass UserController extends Controller\n{\n    public function indexAction()\n    {\n        // Create a persistent variable 'name'\n        $this-&gt;persistent-&gt;name = 'Laura';\n    }\n\n    public function welcomeAction()\n    {\n        if (isset($this-&gt;persistent-&gt;name)) {\n            echo 'Welcome, ', $this-&gt;persistent-&gt;name;\n        }\n    }\n}\n</code></pre> <p>In a component:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\User\\Component;\n\nclass Security extends Component\n{\n    public function auth()\n    {\n        // Create a persistent variable 'name'\n        $this-&gt;persistent-&gt;name = 'Laura';\n    }\n\n    public function getAuthName()\n    {\n        return $this-&gt;persistent-&gt;name;\n    }\n}\n</code></pre> <p>The data added to the session (<code>$this-&gt;session</code>) are available throughout the application, while persistent (<code>$this-&gt;persistent</code>) can only be accessed in the scope of the current class.</p>"},{"location":"session/#implementing-your-own-adapters","title":"Implementing your own adapters","text":"<p>The Phalcon\\Session\\AdapterInterface interface must be implemented in order to create your own session adapters or extend the existing ones.</p> <p>There are more adapters available for this components in the Phalcon Incubator</p>"},{"location":"sponsors/","title":"Becoming a Sponsor","text":"<p>For those that wish to sponsor our work and further the development of Phalcon, we offer various sponsorship options that will fit any budget. Sponsoring our work allows us to devote more time to the project, offer faster responses to bugs and features and ensure the projects's stability.</p>"},{"location":"sponsors/#sponsors-and-supporters","title":"Sponsors and Supporters","text":"Support Us"},{"location":"tag/","title":"View Helpers (Tags)","text":"<p>Writing and maintaining HTML markup can quickly become a tedious task because of the naming conventions and numerous attributes that have to be taken into consideration. Phalcon deals with this complexity by offering the Phalcon\\Tag component which in turn offers view helpers to generate HTML markup.</p> <p>This component can be used in a plain HTML+PHP view or in a Volt template.</p> <p>NOTE</p> <p>This guide is not intended to be a complete documentation of available helpers and their arguments. Please visit the Phalcon\\Tag page in the API for a complete reference. </p>"},{"location":"tag/#document-type-of-content","title":"Document Type of Content","text":"<p>Phalcon offers the <code>Phalcon\\Tag::setDoctype()</code> helper to set document type of the content. The document type setting may affect HTML output produced by other tag helpers. For example, if you set XHTML document type family, helpers that return or output HTML tags will produce self-closing tags to follow valid XHTML standard.</p> <p>Available document type constants in Phalcon\\Tag namespace are:</p> Constant Document type HTML32 HTML 3.4 HTML401_STRICT HTML 4.01 Strict HTML401_TRANSITIONAL HTML 4.01 Transitional HTML401_FRAMESET HTML 4.01 Frameset HTML5 HTML 5 XHTML10_STRICT XHTML 1.0 Strict XHTML10_TRANSITIONAL XHTML 1.0 Transitional XHTML10_FRAMESET XHTML 1.0 Frameset XHTML11 XHTML 1.1 XHTML20 XHTML 2.0 XHTML5 XHTML 5 <p>Setting document type.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\n$this-&gt;tag-&gt;setDoctype(Tag::HTML401_STRICT);\n</code></pre> <p>Getting document type.</p> <pre><code>&lt;?= $this-&gt;tag-&gt;getDoctype() ?&gt;\n&lt;html&gt;\n&lt;!-- your HTML code --&gt;\n&lt;/html&gt;\n</code></pre> <p>The following HTML will be produced.</p> <pre><code>&lt;!DOCTYPE html PUBLIC '-//W3C//DTD HTML 4.01//EN'\n        'http://www.w3.org/TR/html4/strict.dtd'&gt;\n&lt;html&gt;\n&lt;!-- your HTML code --&gt;\n&lt;/html&gt;\n</code></pre> <p>Volt syntax:</p> <pre><code>{% raw %}\n{{ get_doctype() }}\n{% endraw %}\n&lt;html&gt;\n&lt;!-- your HTML code --&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"tag/#generating-links","title":"Generating Links","text":"<p>A real common task in any web application or website is to produce links that allow us to navigate from one page to another. When they are internal URLs we can create them in the following manner:</p> <pre><code>&lt;!-- for the default route --&gt;\n&lt;?= $this-&gt;tag-&gt;linkTo('products/search', 'Search') ?&gt;\n\n&lt;!-- with CSS attributes --&gt;\n&lt;?= $this-&gt;tag-&gt;linkTo(['products/edit/10', 'Edit', 'class' =&gt; 'edit-btn']) ?&gt;\n\n&lt;!-- for a named route --&gt;\n&lt;?= $this-&gt;tag-&gt;linkTo([['for' =&gt; 'show-product', 'title' =&gt; 123, 'name' =&gt; 'carrots'], 'Show']) ?&gt;\n</code></pre> <p>Actually, all produced URLs are generated by the component Phalcon\\Mvc\\Url. The same links can be generated with Volt:</p> <pre><code>{% raw %}\n&lt;!-- for the default route --&gt;\n{{ link_to('products/search', 'Search') }}\n\n&lt;!-- for a named route --&gt;\n{{ link_to(['for': 'show-product', 'id': 123, 'name': 'carrots'], 'Show') }}\n\n&lt;!-- for a named route with a HTML class --&gt;\n{{ link_to(['for': 'show-product', 'id': 123, 'name': 'carrots'], 'Show', 'class': 'edit-btn') }}\n{% endraw %}\n</code></pre>"},{"location":"tag/#creating-forms","title":"Creating Forms","text":"<p>Forms in web applications play an essential part in retrieving user input. The following example shows how to implement a simple search form using view helpers:</p> <pre><code>&lt;!-- Sending the form by method POST --&gt;\n&lt;?= $this-&gt;tag-&gt;form('products/search') ?&gt;\n    &lt;label for='q'&gt;Search:&lt;/label&gt;\n\n    &lt;?= $this-&gt;tag-&gt;textField('q') ?&gt;\n\n    &lt;?= $this-&gt;tag-&gt;submitButton('Search') ?&gt;\n&lt;?= $this-&gt;tag-&gt;endForm() ?&gt;\n\n&lt;!-- Specifying another method or attributes for the FORM tag --&gt;\n&lt;?= $this-&gt;tag-&gt;form(['products/search', 'method' =&gt; 'get']); ?&gt;\n    &lt;label for='q'&gt;Search:&lt;/label&gt;\n\n    &lt;?= $this-&gt;tag-&gt;textField('q'); ?&gt;\n\n    &lt;?= $this-&gt;tag-&gt;submitButton('Search'); ?&gt;\n&lt;?= $this-&gt;tag-&gt;endForm() ?&gt;\n</code></pre> <p>This last code will generate the following HTML:</p> <pre><code>&lt;form action='/store/products/search/' method='get'&gt;\n    &lt;label for='q'&gt;Search:&lt;/label&gt;\n\n    &lt;input type='text' id='q' value='' name='q' /&gt;\n\n    &lt;input type='submit' value='Search' /&gt;\n&lt;/form&gt;\n</code></pre> <p>Same form generated in Volt:</p> <pre><code>{% raw %}\n&lt;!-- Specifying another method or attributes for the FORM tag --&gt;\n{{ form('products/search', 'method': 'get') }}\n    &lt;label for='q'&gt;Search:&lt;/label&gt;\n\n    {{ text_field('q') }}\n\n    {{ submit_button('Search') }}\n{{ endForm() }}\n{% endraw %}\n</code></pre> <p>Phalcon also provides a form builder to create forms in an object-oriented manner.</p>"},{"location":"tag/#helpers-to-generate-form-elements","title":"Helpers to Generate Form Elements","text":"<p>Phalcon provides a series of helpers to generate form elements such as text fields, buttons and more. The first parameter of each helper is always the name of the element to be generated. When the form is submitted, the name will be passed along with the form data. In a controller you can get these values using the same name by using the <code>getPost()</code> and <code>getQuery()</code> methods on the request object (<code>$this-&gt;request</code>).</p> <pre><code>&lt;?php echo $this-&gt;tag-&gt;textField('username') ?&gt;\n\n&lt;?php echo $this-&gt;tag-&gt;textArea(\n    [\n        'comment',\n        'This is the content of the text-area',\n        'cols' =&gt; '6',\n        'rows' =&gt; 20,\n    ]\n) ?&gt;\n\n&lt;?php echo $this-&gt;tag-&gt;passwordField(\n    [\n        'password',\n        'size' =&gt; 30,\n    ]\n) ?&gt;\n\n&lt;?php echo $this-&gt;tag-&gt;hiddenField(\n    [\n        'parent_id',\n        'value' =&gt; '5',\n    ]\n) ?&gt;\n</code></pre> <p>Volt syntax:</p> <pre><code>{% raw %}\n{{ text_field('username') }}\n\n{{ text_area('comment', 'This is the content', 'cols': '6', 'rows': 20) }}\n\n{{ password_field('password', 'size': 30) }}\n\n{{ hidden_field('parent_id', 'value': '5') }}\n{% endraw %}\n</code></pre>"},{"location":"tag/#making-select-boxes","title":"Making Select Boxes","text":"<p>Generating select boxes (select box) is easy, especially if the related data is stored in PHP associative arrays. The helpers for select elements are <code>Phalcon\\Tag::select()</code> and <code>Phalcon\\Tag::selectStatic()</code>. <code>Phalcon\\Tag::select()</code> has been was specifically designed to work with the Phalcon Models (Phalcon\\Mvc\\Model), while <code>Phalcon\\Tag::selectStatic()</code> can with PHP arrays.</p> <pre><code>&lt;?php\n\n$products = Products::find(\"type = 'vegetables'\");\n\n// Using data from a resultset\necho $this-&gt;tag-&gt;select(\n    [\n        'productId',\n        $products,\n        'using' =&gt; [\n            'id',\n            'name',\n        ]\n    ]\n);\n\n// Using data from an array\necho $this-&gt;tag-&gt;selectStatic(\n    [\n        'status',\n        [\n            'A' =&gt; 'Active',\n            'I' =&gt; 'Inactive',\n        ]\n    ]\n);\n</code></pre> <p>The following HTML will generated:</p> <pre><code>    &lt;select id='productId' name='productId'&gt;\n        &lt;option value='101'&gt;Tomato&lt;/option&gt;\n        &lt;option value='102'&gt;Lettuce&lt;/option&gt;\n        &lt;option value='103'&gt;Beans&lt;/option&gt;\n    &lt;/select&gt;\n\n    &lt;select id='status' name='status'&gt;\n        &lt;option value='A'&gt;Active&lt;/option&gt;\n        &lt;option value='I'&gt;Inactive&lt;/option&gt;\n    &lt;/select&gt;\n</code></pre> <p>You can add an <code>empty</code> option to the generated HTML:</p> <pre><code>    &lt;?php\n\n    $products = Products::find(\"type = 'vegetables'\");\n\n    // Creating a Select Tag with an empty option\n    echo $this-&gt;tag-&gt;select(\n        [\n            'productId',\n            $products,\n            'using'    =&gt; [\n                'id',\n                'name',\n            ],\n            'useEmpty' =&gt; true,\n        ]\n    );\n</code></pre> <p>Produces this HTML:</p> <pre><code>&lt;select id='productId' name='productId'&gt;\n    &lt;option value=''&gt;Choose..&lt;/option&gt;\n    &lt;option value='101'&gt;Tomato&lt;/option&gt;\n    &lt;option value='102'&gt;Lettuce&lt;/option&gt;\n    &lt;option value='103'&gt;Beans&lt;/option&gt;\n&lt;/select&gt;\n</code></pre> <pre><code>&lt;?php\n\n$products = Products::find(\"type = 'vegetables'\");\n\n// Creating a Select Tag with an empty option with default text\necho $this-&gt;tag-&gt;select(\n    [\n        'productId',\n        $products,\n        'using'      =&gt; [\n            'id',\n            'name',\n        ],\n        'useEmpty'   =&gt; true,\n        'emptyText'  =&gt; 'Please, choose one...',\n        'emptyValue' =&gt; '@',\n    ]\n);\n</code></pre> <pre><code>&lt;select id='productId' name='productId'&gt;\n    &lt;option value='@'&gt;Please, choose one..&lt;/option&gt;\n    &lt;option value='101'&gt;Tomato&lt;/option&gt;\n    &lt;option value='102'&gt;Lettuce&lt;/option&gt;\n    &lt;option value='103'&gt;Beans&lt;/option&gt;\n&lt;/select&gt;\n</code></pre> <p>Volt syntax for above example:</p> <pre><code>{% raw %}\n{# Creating a Select Tag with an empty option with default text #}\n{{ select('productId', products, 'using': ['id', 'name'],\n    'useEmpty': true, 'emptyText': 'Please, choose one...', 'emptyValue': '@') }}\n{% endraw %}\n</code></pre>"},{"location":"tag/#assigning-html-attributes","title":"Assigning HTML attributes","text":"<p>All the helpers accept an array as their first parameter which can contain additional HTML attributes for the element generated.</p> <pre><code>&lt;?php $this-&gt;tag-&gt;textField(\n    [\n        'price',\n        'size'        =&gt; 20,\n        'maxlength'   =&gt; 30,\n        'placeholder' =&gt; 'Enter a price',\n    ]\n) ?&gt;\n</code></pre> <p>or using Volt:</p> <pre><code>{% raw %}\n{{ text_field('price', 'size': 20, 'maxlength': 30, 'placeholder': 'Enter a price') }}\n{% endraw %}\n</code></pre> <p>The following HTML is generated:</p> <pre><code>&lt;input type='text' name='price' id='price' size='20' maxlength='30'\n       placeholder='Enter a price' /&gt;\n</code></pre>"},{"location":"tag/#setting-helper-values","title":"Setting Helper Values","text":""},{"location":"tag/#from-controllers","title":"From Controllers","text":"<p>It is a good programming principle for MVC frameworks to set specific values for form elements in the view. You can set those values directly from the controller using <code>Phalcon\\Tag::setDefault()</code>. This helper preloads a value for any helpers present in the view. If any helper in the view has a name that matches the preloaded value, it will use it, unless a value is directly assigned on the helper in the view.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass ProductsController extends Controller\n{\n    public function indexAction()\n    {\n        $this-&gt;tag-&gt;setDefault('color', 'Blue');\n    }\n}\n</code></pre> <p>At the view, a selectStatic helper matches the same index used to preset the value. In this case <code>color</code>:</p> <pre><code>&lt;?php\n\necho $this-&gt;tag-&gt;selectStatic(\n    [\n        'color',\n        [\n            'Yellow' =&gt; 'Yellow',\n            'Blue'   =&gt; 'Blue',\n            'Red'    =&gt; 'Red',\n        ]\n    ]\n);\n</code></pre> <p>This will generate the following select tag with the value 'Blue' selected:</p> <pre><code>&lt;select id='color' name='color'&gt;\n    &lt;option value='Yellow'&gt;Yellow&lt;/option&gt;\n    &lt;option value='Blue' selected='selected'&gt;Blue&lt;/option&gt;\n    &lt;option value='Red'&gt;Red&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>"},{"location":"tag/#from-the-request","title":"From the Request","text":"<p>A special feature that the Phalcon\\Tag helpers have is that they keep the values of form helpers between requests. This way you can easily show validation messages without losing entered data.</p>"},{"location":"tag/#specifying-values-directly","title":"Specifying values directly","text":"<p>Every form helper supports the parameter 'value'. With it you can specify a value for the helper directly. When this parameter is present, any preset value using setDefault() or via request will be ignored.</p>"},{"location":"tag/#changing-dynamically-the-document-title","title":"Changing dynamically the Document Title","text":"<p>Phalcon\\Tag offers helpers to change dynamically the document title from the controller. The following example demonstrates just that:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function initialize()\n    {\n        $this-&gt;tag-&gt;setTitle('Your Website');\n    }\n\n    public function indexAction()\n    {\n        $this-&gt;tag-&gt;prependTitle('Index of Posts - ');\n    }\n}\n</code></pre> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;?php echo $this-&gt;tag-&gt;getTitle(); ?&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>The following HTML will generated:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Index of Posts - Your Website&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"tag/#static-content-helpers","title":"Static Content Helpers","text":"<p>Phalcon\\Tag also provide helpers to generate tags such as script, link or img. They aid in quick and easy generation of the static resources of your application</p>"},{"location":"tag/#images","title":"Images","text":"<pre><code>&lt;?php\n\n// Generate &lt;img src='/your-app/img/hello.gif'&gt;\necho $this-&gt;tag-&gt;image('img/hello.gif');\n\n// Generate &lt;img alt='alternative text' src='/your-app/img/hello.gif'&gt;\necho $this-&gt;tag-&gt;image(\n    [\n       'img/hello.gif',\n       'alt' =&gt; 'alternative text',\n    ]\n);\n</code></pre> <p>Volt syntax:</p> <pre><code>{% raw %}\n{# Generate &lt;img src='/your-app/img/hello.gif'&gt; #}\n{{ image('img/hello.gif') }}\n\n{# Generate &lt;img alt='alternative text' src='/your-app/img/hello.gif'&gt; #}\n{{ image('img/hello.gif', 'alt': 'alternative text') }}\n{% endraw %}\n</code></pre>"},{"location":"tag/#stylesheets","title":"Stylesheets","text":"<pre><code>&lt;?php\n\n// Generate &lt;link rel='stylesheet' href='http://fonts.googleapis.com/css?family=Rosario' type='text/css'&gt;\necho $this-&gt;tag-&gt;stylesheetLink('http://fonts.googleapis.com/css?family=Rosario', false);\n\n// Generate &lt;link rel='stylesheet' href='/your-app/css/styles.css' type='text/css'&gt;\necho $this-&gt;tag-&gt;stylesheetLink('css/styles.css');\n</code></pre> <p>Volt syntax: <pre><code>{% raw %}\n{# Generate &lt;link rel='stylesheet' href='http://fonts.googleapis.com/css?family=Rosario' type='text/css'&gt; #}\n{{ stylesheet_link('http://fonts.googleapis.com/css?family=Rosario', false) }}\n\n{# Generate &lt;link rel='stylesheet' href='/your-app/css/styles.css' type='text/css'&gt; #}\n{{ stylesheet_link('css/styles.css') }}\n{% endraw %}\n</code></pre></p>"},{"location":"tag/#javascript","title":"Javascript","text":"<pre><code>&lt;?php\n\n// Generate &lt;script src='http://localhost/javascript/jquery.min.js' type='text/javascript'&gt;&lt;/script&gt;\necho $this-&gt;tag-&gt;javascriptInclude('http://localhost/javascript/jquery.min.js', false);\n\n// Generate &lt;script src='/your-app/javascript/jquery.min.js' type='text/javascript'&gt;&lt;/script&gt;\necho $this-&gt;tag-&gt;javascriptInclude('javascript/jquery.min.js');\n</code></pre> <p>Volt syntax: <pre><code>{% raw %}\n{# Generate &lt;script src='http://localhost/javascript/jquery.min.js' type='text/javascript'&gt;&lt;/script&gt; #}\n{{ javascript_include('http://localhost/javascript/jquery.min.js', false) }}\n\n{# Generate &lt;script src='/your-app/javascript/jquery.min.js' type='text/javascript'&gt;&lt;/script&gt; #}\n{{ javascript_include('javascript/jquery.min.js') }}\n{% endraw %}\n</code></pre></p> <p></p>"},{"location":"tag/#html5-elements-generic-html-helper","title":"HTML5 elements - generic HTML helper","text":"<p>Phalcon offers a generic HTML helper that allows the generation of any kind of HTML element. It is up to the developer to produce a valid HTML element name to the helper.</p> <pre><code>&lt;?php\n\n// Generate\n// &lt;canvas id='canvas1' width='300' class='cnvclass'&gt;\n// This is my canvas\n// &lt;/canvas&gt;\necho $this-&gt;tag-&gt;tagHtml(\n    'canvas', \n    [\n        'id'    =&gt; 'canvas1', \n        'width' =&gt; '300', \n        'class' =&gt; 'cnvclass',\n    ], \n    false, \n    true, \n    true\n);\necho 'This is my canvas';\necho $this-&gt;tag-&gt;tagHtmlClose('canvas');\n</code></pre> <p>Volt syntax: <pre><code>{% raw %}\n{# Generate #}\n&lt;canvas id='canvas1' width='300' class='cnvclass'&gt;\nThis is my canvas\n&lt;/canvas&gt; #}\n{{ tag_html('canvas', ['id': 'canvas1', width': '300', 'class': 'cnvclass'], false, true, true) }}\n    This is my canvas\n{{ tag_html_close('canvas') }}\n{% endraw %}\n</code></pre></p>"},{"location":"tag/#tag-service","title":"Tag Service","text":"<p>Phalcon\\Tag is available via the tag service, this means you can access it from any part of the application where the services container is located:</p> <pre><code>&lt;?php echo $this-&gt;tag-&gt;linkTo('pages/about', 'About') ?&gt;\n</code></pre> <p>You can easily add new helpers to a custom component replacing the service 'tag' in the services container:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\nclass MyTags extends Tag\n{\n    // ...\n\n    // Create a new helper\n    public static function myAmazingHelper($parameters)\n    {\n        // ...\n    }\n\n    // Override an existing method\n    public static function textField($parameters)\n    {\n        // ...\n    }\n}\n</code></pre> <p>Then change the definition of the service tag:</p> <pre><code>&lt;?php\n\n$di['tag'] = function () {\n    return new MyTags();\n};\n</code></pre>"},{"location":"tag/#creating-your-own-helpers","title":"Creating your own helpers","text":"<p>You can easily create your own helpers. First, start by creating a new folder within the same directory as your controllers and models. Give it a title that is relative to what you are creating. For our example here, we can call it 'customhelpers'. Next we will create a new file titled <code>MyTags.php</code> within this new directory. At this point, we have a structure that looks similar to : <code>/app/customhelpers/MyTags.php</code>. In <code>MyTags.php</code>, we will extend the Phalcon\\Tag and implement your own helper. Below is a simple example of a custom helper:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\nclass MyTags extends Tag\n{\n    /**\n     * Generates a widget to show a HTML5 audio tag\n     *\n     * @param array\n     * @return string\n     */\n    public static function audioField($parameters)\n    {\n        // Converting parameters to array if it is not\n        if (!is_array($parameters)) {\n            $parameters = [$parameters];\n        }\n\n        // Determining attributes 'id' and 'name'\n        if (!isset($parameters[0])) {\n            $parameters[0] = $parameters['id'];\n        }\n\n        $id = $parameters[0];\n\n        if (!isset($parameters['name'])) {\n            $parameters['name'] = $id;\n        } else {\n            if (!$parameters['name']) {\n                $parameters['name'] = $id;\n            }\n        }\n\n        // Determining widget value,\n        // \\Phalcon\\Tag::setDefault() allows to set the widget value\n        if (isset($parameters['value'])) {\n            $value = $parameters['value'];\n\n            unset($parameters['value']);\n        } else {\n            $value = self::getValue($id);\n        }\n\n        // Generate the tag code\n        $code = '&lt;audio id=\"' . $id . '\" value=\"' . $value . '\" ';\n\n        foreach ($parameters as $key =&gt; $attributeValue) {\n            if (!is_integer($key)) {\n                $code.= $key . '=\"' . $attributeValue . '\" ';\n            }\n        }\n\n        $code.=' /&gt;';\n\n        return $code;\n    }\n}\n</code></pre> <p>After creating our custom helper, we will autoload the new directory that contains our helper class from our <code>index.php</code> located in the public directory.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Di\\FactoryDefault();\nuse Phalcon\\Exception as PhalconException;\n\ntry {\n    $loader = new Loader();\n\n    $loader-&gt;registerDirs(\n        [\n            '../app/controllers',\n            '../app/models',\n            '../app/customhelpers', // Add the new helpers folder\n        ]\n    );\n\n    $loader-&gt;register();\n\n    $di = new FactoryDefault();\n\n    // Assign our new tag a definition so we can call it\n    $di-&gt;set(\n        'MyTags',\n        function () {\n            return new MyTags();\n        }\n    );\n\n    $application = new Application($di);\n\n    $response = $application-&gt;handle();\n\n    $response-&gt;send();\n} catch (PhalconException $e) {\n    echo 'PhalconException: ', $e-&gt;getMessage();\n}\n</code></pre> <p>Now you are ready to use your new helper within your views:</p> <pre><code>&lt;body&gt;\n\n    &lt;?php\n\n    echo MyTags::audioField(\n        [\n            'name' =&gt; 'test',\n            'id'   =&gt; 'audio_test',\n            'src'  =&gt; '/path/to/audio.mp3',\n        ]\n    );\n\n    ?&gt;\n\n&lt;/body&gt;\n</code></pre> <p>You can also check out Volt a faster template engine for PHP, where you can use a more developer friendly syntax for helpers provided by Phalcon\\Tag.</p>"},{"location":"translate/","title":"Multi-lingual Support","text":"<p>The component <code>Phalcon\\Translate</code> aids in creating multilingual applications. Applications using this component, display content in different languages, based on the user's chosen language supported by the application.</p>"},{"location":"translate/#adapters","title":"Adapters","text":"<p>This component makes use of adapters to read translation messages from different sources in a unified way.</p> Adapter Description Phalcon\\Translate\\Adapter\\NativeArray Uses PHP arrays to store the messages. This is the best option in terms of performance."},{"location":"translate/#factory","title":"Factory","text":"<p>Loads Translate Adapter class using <code>adapter</code> option</p> <pre><code>&lt;?php\n\nuse Phalcon\\Translate\\Factory;\n\n$options = [\n    'locale'        =&gt; 'de_DE.UTF-8',\n    'defaultDomain' =&gt; 'translations',\n    'directory'     =&gt; '/path/to/application/locales',\n    'category'      =&gt; LC_MESSAGES,\n    'adapter'       =&gt; 'gettext',\n];\n\n$translate = Factory::load($options);\n</code></pre>"},{"location":"translate/#component-usage","title":"Component Usage","text":"<p>Translation strings are stored in files. The structure of these files could vary depending of the adapter used. Phalcon gives you the freedom to organize your translation strings. A simple structure could be:</p> <pre><code>app/messages/en.php\napp/messages/es.php\napp/messages/fr.php\napp/messages/zh.php\n</code></pre> <p>Each file contains an array of the translations in a key/value manner. For each translation file, keys are unique. The same array is used in different files, where keys remain the same and values contain the translated strings depending on each language.</p> <pre><code>&lt;?php\n\n// app/messages/en.php\n$messages = [\n    'hi'      =&gt; 'Hello',\n    'bye'     =&gt; 'Good Bye',\n    'hi-name' =&gt; 'Hello %name%',\n    'song'    =&gt; 'This song is %song%',\n];\n</code></pre> <pre><code>&lt;?php\n\n// app/messages/fr.php\n$messages = [\n    'hi'      =&gt; 'Bonjour',\n    'bye'     =&gt; 'Au revoir',\n    'hi-name' =&gt; 'Bonjour %name%',\n    'song'    =&gt; 'La chanson est %song%',\n];\n</code></pre> <p>Implementing the translation mechanism in your application is trivial but depends on how you wish to implement it. You can use an automatic detection of the language from the user's browser or you can provide a settings page where the user can select their language.</p> <p>A simple way of detecting the user's language is to parse the <code>$_SERVER['HTTP_ACCEPT_LANGUAGE']</code> contents, or if you wish, access it directly by calling <code>$this-&gt;request-&gt;getBestLanguage()</code> from an action/controller:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Translate\\Adapter\\NativeArray;\n\nclass UserController extends Controller\n{\n    protected function getTranslation()\n    {\n        // Ask browser what is the best language\n        $language = $this-&gt;request-&gt;getBestLanguage();\n        $messages = [];\n\n        $translationFile = 'app/messages/' . $language . '.php';\n\n        // Check if we have a translation file for that lang\n        if (file_exists($translationFile)) {\n            require $translationFile;\n        } else {\n            // Fallback to some default\n            require 'app/messages/en.php';\n        }\n\n        // Return a translation object $messages comes from the require\n        // statement above\n        return new NativeArray(\n            [\n                'content' =&gt; $messages,\n            ]\n        );\n    }\n\n    public function indexAction()\n    {\n        $this-&gt;view-&gt;name = 'Mike';\n        $this-&gt;view-&gt;t    = $this-&gt;getTranslation();\n    }\n}\n</code></pre> <p>The <code>_getTranslation()</code> method is available for all actions that require translations. The <code>$t</code> variable is passed to the views, and with it, we can translate strings in that layer:</p> <pre><code>&lt;!-- welcome --&gt;\n&lt;!-- String: hi =&gt; 'Hello' --&gt;\n&lt;p&gt;&lt;?php echo $t-&gt;_('hi'), ' ', $name; ?&gt;&lt;/p&gt;\n</code></pre> <p>The <code>_()</code> method is returning the translated string based on the index passed. Some strings need to incorporate placeholders for calculated data i.e. <code>Hello %name%</code>. These placeholders can be replaced with passed parameters in the <code>_()</code> method. The passed parameters are in the form of a key/value array, where the key matches the placeholder name and the value is the actual data to be replaced:</p> <pre><code>&lt;!-- welcome --&gt;\n&lt;!-- String: hi-name =&gt; 'Hello %name%' --&gt;\n&lt;p&gt;&lt;?php echo $t-&gt;_('hi-name', ['name' =&gt; $name]); ?&gt;&lt;/p&gt;\n</code></pre> <p>Some applications implement multilingual on the URL such as <code>https://www.mozilla.org/**es-ES**/firefox/</code>. Phalcon can implement this by using a Router.</p> <p>The implementation above is helpful but it requires a base controller to implement the <code>_getTranslation()</code> and return the <code>Phalcon\\Translate\\Adapter\\NativeArray</code> component. Additionaly the component needs to be set in the view as seen above in the <code>$t</code> variable.</p> <p>You can always wrap this functionality in its own class and register that class in the DI container:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\User\\Component;\nuse Phalcon\\Translate\\Adapter\\NativeArray;\n\nclass Locale extends Component\n{\n    public function getTranslator()\n    {\n        // Ask browser what is the best language\n        $language = $this-&gt;request-&gt;getBestLanguage();\n\n        /**\n         * We are using JSON based files for storing translations. \n         * You will need to check if the file exists! \n         */\n        $translations = json_decode(\n            file_get_contents('app/messages/' . $language . '.json'),\n            true\n        );\n\n        // Return a translation object $messages comes from the require\n        // statement above\n        return new NativeArray(\n            [\n                'content' =&gt; $translations,\n            ]\n        );\n    }\n}\n</code></pre> <p>This way you can use the component in controllers:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass MyController extends Controller\n{\n    public function indexAction()\n    {\n        $name = 'Mike';\n        $text = $this-&gt;locale-&gt;_('hi-name', ['name' =&gt; $name]);\n\n        $this-&gt;view-&gt;text = $text;\n    }\n}\n</code></pre> <p>or in a view directly</p> <pre><code>&lt;?php echo $locale-&gt;_('hi-name', ['name' =&gt; 'Mike']);\n</code></pre>"},{"location":"translate/#implementing-your-own-adapters","title":"Implementing your own adapters","text":"<p>The Phalcon\\Translate\\AdapterInterface interface must be implemented in order to create your own translate adapters or extend the existing ones:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Translate\\AdapterInterface;\n\nclass MyTranslateAdapter implements AdapterInterface\n{\n    /**\n     * Adapter constructor\n     *\n     * @param array $options\n     */\n    public function __construct(array $options);\n\n    /**\n     * @param  string     $translateKey\n     * @param  array|null $placeholders\n     * @return string\n     */\n    public function t($translateKey, $placeholders = null);\n\n    /**\n     * Returns the translation string of the given key\n     *\n     * @param   string $translateKey\n     * @param   array $placeholders\n     * @return  string\n     */\n    public function _(string $translateKey, $placeholders = null): string;\n\n    /**\n     * Returns the translation related to the given key\n     *\n     * @param   string $index\n     * @param   array $placeholders\n     * @return  string\n     */\n    public function query(string $index, $placeholders = null): string;\n\n    /**\n     * Check whether is defined a translation key in the internal array\n     *\n     * @param   string $index\n     * @return  bool\n     */\n    public function exists(string $index): bool;\n}\n</code></pre> <p>There are more adapters available for this components in the Phalcon Incubator</p>"},{"location":"tutorial-basic/","title":"Tutorial - basic","text":"<p>Throughout this tutorial, we'll walk you through the creation of an application with a simple registration form from the ground up. The following guide is to provided to introduce you to Phalcon framework's design aspects. </p> <p>This tutorial covers the implementation of a simple MVC application, showing how fast and easy it can be done with Phalcon. This tutorial will get you started and help create an application that you can extend to address many needs. The code in this tutorial can also be used as a playground to learn other Phalcon specific concepts and ideas.</p> <p>Pattern</p> <p></p> <p>If you just want to get started you can skip this and create a Phalcon project automatically with our developer tools. (It is recommended that if you have not had experience with to come back here if you get stuck)</p> <p>The best way to use this guide is to follow along and try to have fun. You can get the complete code here. If you get hung-up on something please visit us on Discord or in our Forum.</p>"},{"location":"tutorial-basic/#file-structure","title":"File structure","text":"<p>A key feature of Phalcon is it's loosely coupled, you can build a Phalcon project with a directory structure that is convenient for your specific application. That said some uniformity is helpful when collaborating with others, so this tutorial will use a \"Standard\" structure where you should feel at home if you have worked with other MVC's in the past.  <pre><code>.\n\u2514\u2500\u2500 tutorial\n    \u251c\u2500\u2500 app\n    \u2502   \u251c\u2500\u2500 controllers\n    \u2502   \u2502   \u251c\u2500\u2500 IndexController.php\n    \u2502   \u2502   \u2514\u2500\u2500 SignupController.php\n    \u2502   \u251c\u2500\u2500 models\n    \u2502   \u2502   \u2514\u2500\u2500 Users.php\n    \u2502   \u2514\u2500\u2500 views\n    \u2514\u2500\u2500 public\n        \u251c\u2500\u2500 css\n        \u251c\u2500\u2500 img\n        \u251c\u2500\u2500 index.php\n        \u2514\u2500\u2500 js\n</code></pre></p> <p>NOTE</p> <p>You will not see a <code>vendor</code> directory as all of Phalcon's core dependencies are loaded into memory via the Phalcon extension you should have installed. If you missed that part have not installed the Phalcon extension please go back and finish the installation before continuing.</p> <p>If this is all brand new it is recommended that you install the Phalcon Devtools since it leverages PHP's built-in server you to get your app running without having to configure a web server by adding this .htrouter to the root of your project.</p> <p>Otherwise if you want to use Nginx here are some additional setup here.</p> <p>Apache can also be used with these additional setup here.</p> <p>Finally, if you flavor is Cherokee use the setup here.</p>"},{"location":"tutorial-basic/#bootstrap","title":"Bootstrap","text":"<p>The first file you need to create is the bootstrap file. This file acts as the entry-point and configuration for your application. In this file, you can implement initialization of components as well as application behavior.</p> <p>This file handles 3 things: - Registration of component autoloaders - Configuring Services and registering them with the Dependency Injection context - Resolving the application's HTTP requests</p>"},{"location":"tutorial-basic/#autoloaders","title":"Autoloaders","text":"<p>Autoloaders leverage a PSR-4 compliant file loader running through the Phalcon. Common things that should be added to the autoloader are your controllers and models. You can register directories which will search for files within the application's namespace. If you want to read about other ways that you can use autoloaders head here.</p> <p>To start, lets register our app's <code>controllers</code> and <code>models</code> directories. Don't forget to include the loader from <code>Phalcon\\Loader</code>.</p> <p><code>public/index.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n// Define some absolute path constants to aid in locating resources\ndefine('BASE_PATH', dirname(__DIR__ . '/..'));\ndefine('APP_PATH', BASE_PATH . '/app');\n// ...\n\n$loader = new Loader();\n\n$loader-&gt;registerDirs(\n    [\n        APP_PATH . '/controllers/',\n        APP_PATH . '/models/',\n    ]\n);\n\n$loader-&gt;register();\n</code></pre></p>"},{"location":"tutorial-basic/#dependency-management","title":"Dependency Management","text":"<p>Since Phalcon is loosely coupled, services are registered with the frameworks Dependency Manager so they can be injected automatically to components and services wrapped in the IoC container. Frequently you will encounter the term DI which stands for Dependency Injection. Dependency Injection and Inversion of Control(IoC) may sound like a complex feature but in Phalcon their use is very simple and practical. Phalcon's IoC container consists of the following concepts: - Service Container: a \"bag\" where we globally store the services that our application needs to function. - Service or Component: Data processing object which will be injected into components</p> <p>Each time the framework requires a component or service, it will ask the container using an agreed upon name for the service. Don't forget to include <code>Phalcon\\Di</code> with setting up the service container.</p> <p>NOTE</p> <p>If you are still interested in the details please see this article by Martin Fowler. Also we have a great tutorial covering many use cases.</p>"},{"location":"tutorial-basic/#factory-default","title":"Factory Default","text":"<p>The Phalcon\\Di\\FactoryDefault is a variant of Phalcon\\Di. To make things easier, it will automatically register most of the components that come with Phalcon. We recommend that you register your services manually but this has been included to help lower the barrier of entry when getting used to Dependency Management. Later, you can always specify once you become more comfortable with the concept.</p> <p>Services can be registered in several ways, but for our tutorial, we'll use an anonymous function:</p> <p><code>public/index.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\n\n// ...\n\n// Create a DI\n$di = new FactoryDefault();\n</code></pre></p> <p>In the next part, we register the \"view\" service indicating the directory where the framework will find the views files. As the views do not correspond to classes, they cannot be charged with an autoloader.</p> <p><code>public/index.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\n\n// ...\n\n// Setup the view component\n$di-&gt;set(\n    'view',\n    function () {\n        $view = new View();\n        $view-&gt;setViewsDir(APP_PATH . '/views/');\n        return $view;\n    }\n);\n</code></pre></p> <p>Next, we register a base URI so that all URIs generated by Phalcon match the application's base path of \"/\". This will become important later on in this tutorial when we use the class <code>Phalcon\\Tag</code> to generate a hyperlink.</p> <p><code>public/index.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Url as UrlProvider;\n\n// ...\n\n// Setup a base URI\n$di-&gt;set(\n    'url',\n    function () {\n        $url = new UrlProvider();\n        $url-&gt;setBaseUri('/');\n        return $url;\n    }\n);\n</code></pre></p>"},{"location":"tutorial-basic/#handling-the-application-request","title":"Handling the application request","text":"<p>In the last part of this file, we find Phalcon\\Mvc\\Application. Its purpose is to initialize the request environment, route the incoming request, and then dispatch any discovered actions; it aggregates any responses and returns them when the process is complete.</p> <p><code>public/index.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Application;\n\n// ...\n\n$application = new Application($di);\n$response = $application-&gt;handle();\n$response-&gt;send();\n</code></pre></p>"},{"location":"tutorial-basic/#putting-everything-together","title":"Putting everything together","text":"<p>The <code>tutorial/public/index.php</code> file should look like:</p> <p><code>public/index.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Mvc\\Url as UrlProvider;\n\n// Define some absolute path constants to aid in locating resources\ndefine('BASE_PATH', dirname(__DIR__));\ndefine('APP_PATH', BASE_PATH . '/app');\n\n// Register an autoloader\n$loader = new Loader();\n\n$loader-&gt;registerDirs(\n    [\n        APP_PATH . '/controllers/',\n        APP_PATH . '/models/',\n    ]\n);\n\n$loader-&gt;register();\n\n// Create a DI\n$di = new FactoryDefault();\n\n// Setup the view component\n$di-&gt;set(\n    'view',\n    function () {\n        $view = new View();\n        $view-&gt;setViewsDir(APP_PATH . '/views/');\n        return $view;\n    }\n);\n\n// Setup a base URI\n$di-&gt;set(\n    'url',\n    function () {\n        $url = new UrlProvider();\n        $url-&gt;setBaseUri('/');\n        return $url;\n    }\n);\n\n$application = new Application($di);\n\ntry {\n    // Handle the request\n    $response = $application-&gt;handle();\n\n    $response-&gt;send();\n} catch (\\Exception $e) {\n    echo 'Exception: ', $e-&gt;getMessage();\n}\n</code></pre></p> <p>As you can see, the bootstrap file is very short and we do not need to include any additional files. Congratulations you are well on your to having created a flexible MVC application in less than 30 lines of code.</p>"},{"location":"tutorial-basic/#creating-a-controller","title":"Creating a Controller","text":"<p>By default Phalcon will look for a controller named <code>IndexController</code>. It is the starting point when no controller or action has been added in the request (eg. <code>http://localhost:8000/</code>). An <code>IndexController</code> and its <code>IndexAction</code> should resemble the following example:</p> <p><code>app/controllers/IndexController.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    public function indexAction()\n    {\n        echo '&lt;h1&gt;Hello!&lt;/h1&gt;';\n    }\n}\n</code></pre></p> <p>The controller classes must have the suffix <code>Controller</code> and controller actions must have the suffix <code>Action</code>. If you access the application from your browser, you should see something like this:</p> <p></p> <p>Congratulations, you're phlying with Phalcon!</p>"},{"location":"tutorial-basic/#sending-output-to-a-view","title":"Sending output to a view","text":"<p>Sending output to the screen from the controller is at times necessary but not desirable as most purists in the MVC community will attest. Everything must be passed to the view that is responsible for outputting data on screen. Phalcon will look for a view with the same name as the last executed action inside a directory named as the last executed controller. In our case (<code>app/views/index/index.phtml</code>):</p> <p><code>app/views/index/index.phtml</code> <pre><code>&lt;?php echo \"&lt;h1&gt;Hello!&lt;/h1&gt;\";\n</code></pre></p> <p>Our controller (<code>app/controllers/IndexController.php</code>) now has an empty action definition:</p> <p><code>app/controllers/IndexController.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n}\n</code></pre></p> <p>The browser output should remain the same. The <code>Phalcon\\Mvc\\View</code> static component is automatically created when the action execution has ended. Learn more about views usage here.</p>"},{"location":"tutorial-basic/#designing-a-sign-up-form","title":"Designing a sign-up form","text":"<p>Now we will change the <code>index.phtml</code> view file, to add a link to a new controller named \"signup\". The goal is to allow users to sign up within our application.</p> <p><code>app/views/index/index.phtml</code> <pre><code>&lt;?php\n\necho \"&lt;h1&gt;Hello!&lt;/h1&gt;\";\n\necho PHP_EOL;\n\necho PHP_EOL;\n\necho $this-&gt;tag-&gt;linkTo(\n    'signup',\n    'Sign Up Here!'\n);\n</code></pre></p> <p>The generated HTML code displays an anchor (<code>&lt;a&gt;</code>) HTML tag linking to a new controller:</p> <p><code>app/views/index/index.phtml</code> (rendered) <pre><code>&lt;h1&gt;Hello!&lt;/h1&gt;\n\n&lt;a href=\"/signup\"&gt;Sign Up Here!&lt;/a&gt;\n</code></pre></p> <p>To generate the tag we use the class <code>Phalcon\\Tag</code>. This is a utility class that allows us to build HTML tags with framework conventions in mind. As this class is also a service registered in the DI we use <code>$this-&gt;tag</code> to access it.</p> <p>A more detailed article regarding HTML generation can be found here.</p> <p></p> <p>Here is the Signup controller (<code>app/controllers/SignupController.php</code>):</p> <p><code>app/controllers/SignupController.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass SignupController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n}\n</code></pre></p> <p>The empty index action gives the clean pass to a view with the form definition (<code>app/views/signup/index.phtml</code>):</p> <p><code>app/views/signup/index.phtml</code> <pre><code>&lt;h2&gt;Sign up using this form&lt;/h2&gt;\n\n&lt;?php echo $this-&gt;tag-&gt;form(\"signup/register\"); ?&gt;\n\n    &lt;p&gt;\n        &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n        &lt;?php echo $this-&gt;tag-&gt;textField(\"name\"); ?&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;\n        &lt;label for=\"email\"&gt;E-Mail&lt;/label&gt;\n        &lt;?php echo $this-&gt;tag-&gt;textField(\"email\"); ?&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;\n        &lt;?php echo $this-&gt;tag-&gt;submitButton(\"Register\"); ?&gt;\n    &lt;/p&gt;\n\n&lt;/form&gt;\n</code></pre></p> <p>Viewing the form in your browser will show something like this:</p> <p></p> <p>Phalcon\\Tag also provides useful methods to build form elements.</p> <p>The <code>Phalcon\\Tag::form()</code> method receives only one parameter for instance, a relative URI to a controller/action in the application.</p> <p>By clicking the \"Send\" button, you will notice an exception thrown from the framework, indicating that we are missing the <code>register</code> action in the controller <code>signup</code>. Our <code>public/index.php</code> file throws this exception:</p> <pre><code>Exception: Action \"register\" was not found on handler \"signup\"\n</code></pre> <p>Implementing that method will remove the exception:</p> <p><code>app/controllers/SignupController.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass SignupController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function registerAction()\n    {\n\n    }\n}\n</code></pre></p> <p>If you click the \"Send\" button again, you will see a blank page. The name and email input provided by the user should be stored in a database. According to MVC guidelines, database interactions must be done through models so as to ensure clean object-oriented code.</p>"},{"location":"tutorial-basic/#creating-a-model","title":"Creating a Model","text":"<p>Phalcon brings the first ORM for PHP entirely written in C-language. Instead of increasing the complexity of development, it simplifies it.</p> <p>Before creating our first model, we need to create a database table outside of Phalcon to map it to. A simple table to store registered users can be created like this:</p> <p><code>create_users_table.sql</code> <pre><code>CREATE TABLE `users` (\n    `id`    int(10)     unsigned NOT NULL AUTO_INCREMENT,\n    `name`  varchar(70)          NOT NULL,\n    `email` varchar(70)          NOT NULL,\n\n    PRIMARY KEY (`id`)\n);\n</code></pre></p> <p>A model should be located in the <code>app/models</code> directory (<code>app/models/Users.php</code>). The model maps to the \"users\" table:</p> <p><code>app/models/Users.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Users extends Model\n{\n    public $id;\n    public $name;\n    public $email;\n}\n</code></pre></p>"},{"location":"tutorial-basic/#setting-a-database-connection","title":"Setting a Database Connection","text":"<p>In order to use a database connection and subsequently access data through our models, we need to specify it in our bootstrap process. A database connection is just another service that our application has that can be used for several components:</p> <p><code>public/index.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as DbAdapter;\n\n// Setup the database service\n$di-&gt;set(\n    'db',\n    function () {\n        return new DbAdapter(\n            [\n                'host'     =&gt; '127.0.0.1',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'tutorial1',\n            ]\n        );\n    }\n);\n</code></pre></p> <p>With the correct database parameters, our models are ready to work and interact with the rest of the application.</p>"},{"location":"tutorial-basic/#storing-data-using-models","title":"Storing data using models","text":"<p><code>app/controllers/SignupController.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass SignupController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function registerAction()\n    {\n        $user = new Users();\n\n        // Store and check for errors\n        $success = $user-&gt;save(\n            $this-&gt;request-&gt;getPost(),\n            [\n                \"name\",\n                \"email\",\n            ]\n        );\n\n        if ($success) {\n            echo \"Thanks for registering!\";\n        } else {\n            echo \"Sorry, the following problems were generated: \";\n\n            $messages = $user-&gt;getMessages();\n\n            foreach ($messages as $message) {\n                echo $message-&gt;getMessage(), \"&lt;br/&gt;\";\n            }\n        }\n\n        $this-&gt;view-&gt;disable();\n    }\n}\n</code></pre></p> <p>At the beginning of the <code>registerAction</code> we create an empty user object from the Users class, which manages a User's record. The class's public properties map to the fields of the <code>users</code> table in our database. Setting the relevant values in the new record and calling <code>save()</code> will store the data in the database for that record. The <code>save()</code> method returns a boolean value which indicates whether the storing of the data was successful or not.</p> <p>The ORM automatically escapes the input preventing SQL injections so we only need to pass the request to the <code>save()</code> method.</p> <p>Additional validation happens automatically on fields that are defined as not null (required). If we don't enter any of the required fields in the sign-up form our screen will look like this:</p> <p></p>"},{"location":"tutorial-basic/#list-of-users","title":"List of users","text":"<p>Now let's see how to obtain and see the users that we have registered in the database.</p> <p>The first thing that we are going to do in our <code>indexAction</code> of the<code>IndexController</code> is to show the result of the search of all the users, which is done simply in the following way <code>Users::find()</code>. Let's see how our <code>indexAction</code> would look</p> <p><code>app/controllers/IndexController.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    /**\n     * Welcome and user list\n     */\n    public function indexAction()\n    {\n        $this-&gt;view-&gt;users = Users::find();\n    }\n}\n</code></pre></p> <p>Now, in our view file <code>views/index/index.phtml</code> we will have access to the users found in the database. These will be available in the variable <code>$users</code>. This variable has the same name as the one we use in <code>$this-&gt;view-&gt;users</code>.</p> <p>The view will look like this:</p> <p><code>views/index/index.phtml</code> <pre><code>&lt;?php\n\necho \"&lt;h1&gt;Hello!&lt;/h1&gt;\";\n\necho $this-&gt;tag-&gt;linkTo([\"signup\", \"Sign Up Here!\", 'class' =&gt; 'btn btn-primary']);\n\nif ($users-&gt;count() &gt; 0) {\n    ?&gt;\n    &lt;table class=\"table table-bordered table-hover\"&gt;\n        &lt;thead class=\"thead-light\"&gt;\n        &lt;tr&gt;\n            &lt;th&gt;#&lt;/th&gt;\n            &lt;th&gt;Name&lt;/th&gt;\n            &lt;th&gt;Email&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tfoot&gt;\n        &lt;tr&gt;\n            &lt;td colspan=\"3\"&gt;Users quantity: &lt;?php echo $users-&gt;count(); ?&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;/tfoot&gt;\n        &lt;tbody&gt;\n        &lt;?php foreach ($users as $user) { ?&gt;\n            &lt;tr&gt;\n                &lt;td&gt;&lt;?php echo $user-&gt;id; ?&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;?php echo $user-&gt;name; ?&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;?php echo $user-&gt;email; ?&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;?php } ?&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n    &lt;?php\n}\n</code></pre></p> <p>As you can see our variables <code>$users</code> can be iterated and counted, this we will see in depth later on when viewing the models.</p> <p></p>"},{"location":"tutorial-basic/#adding-style","title":"Adding Style","text":"<p>To give a design touch to our first application we will add bootstrap and a small template that will be used in all views.</p> <p>We will add an <code>index.phtml</code> file in the<code>views</code> folder, with the following content:</p> <p><code>app/views/index.phtml</code> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Phalcon Tutorial&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=\"container\"&gt;\n    &lt;?php echo $this-&gt;getContent(); ?&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>The most important thing to highlight in our template is the function <code>getContent()</code> which will give us the content generated by the view. Now, our application will be something like this:</p> <p> </p>"},{"location":"tutorial-basic/#conclusion","title":"Conclusion","text":"<p>As you can see, it's easy to start building an application using Phalcon. The fact that Phalcon runs from an extension significantly reduces the footprint of projects as well as giving it a considerable performance boost. </p> <p>If you are ready to learn more check out the Rest Tutorial next.</p>"},{"location":"tutorial-invo/","title":"Tutorial: INVO","text":"<p>In this second tutorial, we'll explain a more complete application in order to gain a deeper understanding of developing with Phalcon. INVO is one of the sample applications we have created. INVO is a small website that allows users to generate invoices and do other tasks such as manage customers and products. You can clone its code from GitHub.</p> <p>INVO was made with the client-side framework Bootstrap. Although the application does not generate actual invoices, it still serves as an example showing how the framework works.</p>"},{"location":"tutorial-invo/#project-structure","title":"Project Structure","text":"<p>Once you clone the project in your document root you'll see the following structure:</p> <pre><code>invo/\n    app/\n        config/\n        controllers/\n        forms/\n        library/\n        logs/\n        models/\n        plugins/\n        views/\n    cache/\n        volt/\n    docs/\n    public/\n        css/\n        fonts/\n        js/\n    schemas/\n</code></pre> <p>As you know, Phalcon does not impose a particular file structure for application development. This project has a simple MVC structure and a public document root.</p> <p>Once you open the application in your browser <code>http://localhost/invo</code> you'll see something like this:</p> <p></p> <p>The application is divided into two parts: a frontend and a backend. The frontend is a public area where visitors can receive information about INVO and request contact information. The backend is an administrative area where registered users can manage their products and customers.</p>"},{"location":"tutorial-invo/#routing","title":"Routing","text":"<p>INVO uses the standard route that is built-in with the Router component. These routes match the following pattern: <code>/:controller/:action/:params</code>. This means that the first part of a URI is the controller, the second the controller action and the rest are the parameters.</p> <p>The following route <code>/session/register</code> executes the controller <code>SessionController</code> and its action <code>registerAction</code>.</p>"},{"location":"tutorial-invo/#configuration","title":"Configuration","text":"<p>INVO has a configuration file that sets general parameters in the application. This file is located at <code>app/config/config.ini</code> and is loaded in the very first lines of the application bootstrap (<code>public/index.php</code>):</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config\\Adapter\\Ini as ConfigIni;\n\n// ...\n\n// Read the configuration\n$config = new ConfigIni(\n    APP_PATH . 'app/config/config.ini'\n);\n</code></pre> <p>Phalcon Config (Phalcon\\Config) allows us to manipulate the file in an object-oriented way. In this example, we're using an ini file for configuration but Phalcon has adapters for other file types as well. The configuration file contains the following settings:</p> <pre><code>[database]\nhost     = localhost\nusername = root\npassword = secret\nname     = invo\n\n[application]\ncontrollersDir = app/controllers/\nmodelsDir      = app/models/\nviewsDir       = app/views/\npluginsDir     = app/plugins/\nformsDir       = app/forms/\nlibraryDir     = app/library/\nbaseUri        = /invo/\n</code></pre> <p>Phalcon doesn't have any pre-defined settings convention. Sections help us to organize the options as appropriate. In this file there are two sections to be used later: <code>application</code> and <code>database</code>.</p>"},{"location":"tutorial-invo/#autoloaders","title":"Autoloaders","text":"<p>The second part that appears in the bootstrap file (<code>public/index.php</code>) is the autoloader:</p> <pre><code>&lt;?php\n\n/**\n * Auto-loader configuration\n */\nrequire APP_PATH . 'app/config/loader.php';\n</code></pre> <p>The autoloader registers a set of directories in which the application will look for the classes that it will eventually need.</p> <pre><code>&lt;?php\n\n$loader = new Phalcon\\Loader();\n\n// We're a registering a set of directories taken from the configuration file\n$loader-&gt;registerDirs(\n    [\n        APP_PATH . $config-&gt;application-&gt;controllersDir,\n        APP_PATH . $config-&gt;application-&gt;pluginsDir,\n        APP_PATH . $config-&gt;application-&gt;libraryDir,\n        APP_PATH . $config-&gt;application-&gt;modelsDir,\n        APP_PATH . $config-&gt;application-&gt;formsDir,\n    ]\n);\n\n$loader-&gt;register();\n</code></pre> <p>Note that the above code has registered the directories that were defined in the configuration file. The only directory that is not registered is the viewsDir because it contains HTML + PHP files but no classes. Also, note that we use a constant called APP_PATH. This constant is defined in the bootstrap (<code>public/index.php</code>) to allow us to have a reference to the root of our project:</p> <pre><code>&lt;?php\n\n// ...\n\ndefine(\n    'APP_PATH',\n    realpath('..') . '/'\n);\n</code></pre>"},{"location":"tutorial-invo/#registering-services","title":"Registering services","text":"<p>Another file that is required in the bootstrap is (<code>app/config/services.php</code>). This file allows us to organize the services that INVO uses.</p> <pre><code>&lt;?php\n\n/**\n * Load application services\n */\nrequire APP_PATH . 'app/config/services.php';\n</code></pre> <p>Service registration is achieved with closures for lazy loading the required components:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Url as UrlProvider;\n\n// ...\n\n/**\n * The URL component is used to generate all kind of URLs in the application\n */\n$di-&gt;set(\n    'url',\n    function () use ($config) {\n        $url = new UrlProvider();\n\n        $url-&gt;setBaseUri(\n            $config-&gt;application-&gt;baseUri\n        );\n\n        return $url;\n    }\n);\n</code></pre> <p>We will discuss this file in depth later.</p>"},{"location":"tutorial-invo/#handling-the-request","title":"Handling the Request","text":"<p>If we skip to the end of the file (<code>public/index.php</code>), the request is finally handled by Phalcon\\Mvc\\Application which initializes and executes all that is necessary to make the application run:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Application;\n\n// ...\n\n$application = new Application($di);\n\n$response = $application-&gt;handle();\n\n$response-&gt;send();\n</code></pre>"},{"location":"tutorial-invo/#dependency-injection","title":"Dependency Injection","text":"<p>In the first line of the code block above, the Application class constructor is receiving the variable <code>$di</code> as an argument. What is the purpose of that variable? Phalcon is a highly decoupled framework so we need a component that acts as glue to make everything work together. That component is Phalcon\\Di. It's a service container that also performs dependency injection and service location, instantiating all components as they are needed by the application.</p> <p>There are many ways of registering services in the container. In INVO, most services have been registered using anonymous functions/closures. Thanks to this, the objects are instantiated in a lazy way, reducing the resources needed by the application.</p> <p>For instance, in the following excerpt the session service is registered. The anonymous function will only be called when the application requires access to the session data:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Adapter\\Files as Session;\n\n// ...\n\n// Start the session the first time a component requests the session service\n$di-&gt;set(\n    'session',\n    function () {\n        $session = new Session();\n\n        $session-&gt;start();\n\n        return $session;\n    }\n);\n</code></pre> <p>Here, we have the freedom to change the adapter, perform additional initialization and much more. Note that the service was registered using the name <code>session</code>. This is a convention that will allow the framework to identify the active service in the services container.</p> <p>A request can use many services and registering each service individually can be a cumbersome task. For that reason, the framework provides a variant of Phalcon\\Di called Phalcon\\Di\\FactoryDefault whose task is to register all services providing a full-stack framework.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\n\n// ...\n\n// The FactoryDefault Dependency Injector automatically registers the\n// right services providing a full-stack framework\n$di = new FactoryDefault();\n</code></pre> <p>It registers the majority of services with components provided by the framework as standard. If we need to override the definition of some service we could just set it again as we did above with <code>session</code> or <code>url</code>. This is the reason for the existence of the variable <code>$di</code>.</p>"},{"location":"tutorial-invo/#log-into-the-application","title":"Log into the Application","text":"<p>A <code>log in</code> facility will allow us to work on backend controllers. The separation between backend controllers and frontend ones is only logical. All controllers are located in the same directory (<code>app/controllers/</code>).</p> <p>To enter the system, users must have a valid username and password. Users are stored in the table <code>users</code> in the database <code>invo</code>.</p> <p>Before we can start a session, we need to configure the connection to the database in the application. A service called <code>db</code> is set up in the service container with the connection information. As with the autoloader, we are again taking parameters from the configuration file in order to configure a service:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as DbAdapter;\n\n// ...\n\n// Database connection is created based on parameters defined in the configuration file\n$di-&gt;set(\n    'db',\n    function () use ($config) {\n        return new DbAdapter(\n            [\n                'host'     =&gt; $config-&gt;database-&gt;host,\n                'username' =&gt; $config-&gt;database-&gt;username,\n                'password' =&gt; $config-&gt;database-&gt;password,\n                'dbname'   =&gt; $config-&gt;database-&gt;name,\n            ]\n        );\n    }\n);\n</code></pre> <p>Here, we return an instance of the MySQL connection adapter. If needed, you could do extra actions such as adding a logger, a profiler or change the adapter, setting it up as you want.</p> <p>The following simple form (<code>app/views/session/index.volt</code>) requests the login information. We've removed some HTML code to make the example more concise:</p> <pre><code>{% raw %}\n{{ form('session/start') }}\n    &lt;fieldset&gt;\n        &lt;div&gt;\n            &lt;label for='email'&gt;\n                Username/Email\n            &lt;/label&gt;\n\n            &lt;div&gt;\n                {{ text_field('email') }}\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div&gt;\n            &lt;label for='password'&gt;\n                Password\n            &lt;/label&gt;\n\n            &lt;div&gt;\n                {{ password_field('password') }}\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div&gt;\n            {{ submit_button('Login') }}\n        &lt;/div&gt;\n    &lt;/fieldset&gt;\n{{ endForm() }}\n{% endraw %}\n</code></pre> <p>Instead of using raw PHP as the previous tutorial, we started to use Volt. This is a built-in template engine inspired by Jinja_ providing a simpler and friendly syntax to create templates. It will not take too long before you become familiar with Volt.</p> <p>The <code>SessionController::startAction</code> function (<code>app/controllers/SessionController.php</code>) has the task of validating the data entered in the form including checking for a valid user in the database:</p> <pre><code>&lt;?php\n\nclass SessionController extends ControllerBase\n{\n    // ...\n\n    private function _registerSession($user)\n    {\n        $this-&gt;session-&gt;set(\n            'auth',\n            [\n                'id'   =&gt; $user-&gt;id,\n                'name' =&gt; $user-&gt;name,\n            ]\n        );\n    }\n\n    /**\n     * This action authenticate and logs a user into the application\n     */\n    public function startAction()\n    {\n        if ($this-&gt;request-&gt;isPost()) {\n            // Get the data from the user\n            $email    = $this-&gt;request-&gt;getPost('email');\n            $password = $this-&gt;request-&gt;getPost('password');\n\n            // Find the user in the database\n            $user = Users::findFirst(\n                [\n                    \"(email = :email: OR username = :email:) AND password = :password: AND active = 'Y'\",\n                    'bind' =&gt; [\n                        'email'    =&gt; $email,\n                        'password' =&gt; sha1($password),\n                    ]\n                ]\n            );\n\n            if ($user !== false) {\n                $this-&gt;_registerSession($user);\n\n                $this-&gt;flash-&gt;success(\n                    'Welcome ' . $user-&gt;name\n                );\n\n                // Forward to the 'invoices' controller if the user is valid\n                return $this-&gt;dispatcher-&gt;forward(\n                    [\n                        'controller' =&gt; 'invoices',\n                        'action'     =&gt; 'index',\n                    ]\n                );\n            }\n\n            $this-&gt;flash-&gt;error(\n                'Wrong email/password'\n            );\n        }\n\n        // Forward to the login form again\n        return $this-&gt;dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'session',\n                'action'     =&gt; 'index',\n            ]\n        );\n    }\n}\n</code></pre> <p>For the sake of simplicity, we have used sha1 to store the password hashes in the database, however, this algorithm is not recommended in real applications, use bcrypt instead.</p> <p>Note that multiple public attributes are accessed in the controller like: <code>$this-&gt;flash</code>, <code>$this-&gt;request</code> or <code>$this-&gt;session</code>. These are services defined in the services container from earlier (<code>app/config/services.php</code>). When they're accessed the first time, they are injected as part of the controller. These services are <code>shared</code>, which means that we are always accessing the same instance regardless of the place where we invoke them. For instance, here we invoke the <code>session</code> service and then we store the user identity in the variable <code>auth</code>:</p> <pre><code>&lt;?php\n\n$this-&gt;session-&gt;set(\n    'auth',\n    [\n        'id'   =&gt; $user-&gt;id,\n        'name' =&gt; $user-&gt;name,\n    ]\n);\n</code></pre> <p>Another important aspect of this section is how the user is validated as a valid one, first we validate whether the request has been made using method <code>POST</code>:</p> <pre><code>&lt;?php\n\nif ($this-&gt;request-&gt;isPost()) {\n    // ...\n}\n</code></pre> <p>Then, we receive the parameters from the form:</p> <pre><code>&lt;?php\n\n$email    = $this-&gt;request-&gt;getPost('email');\n$password = $this-&gt;request-&gt;getPost('password');\n</code></pre> <p>Now, we have to check if there is one user with the same username or email and password:</p> <pre><code>&lt;?php\n\n$user = Users::findFirst(\n    [\n        \"(email = :email: OR username = :email:) AND password = :password: AND active = 'Y'\",\n        'bind' =&gt; [\n            'email'    =&gt; $email,\n            'password' =&gt; sha1($password),\n        ]\n    ]\n);\n</code></pre> <p>Note, the use of 'bound parameters', placeholders <code>:email:</code> and <code>:password:</code> are placed where values should be, then the values are 'bound' using the parameter <code>bind</code>. This safely replaces the values for those columns without having the risk of a SQL injection.</p> <p>If the user is valid we register it in session and forwards him/her to the dashboard:</p> <pre><code>&lt;?php\n\nif ($user !== false) {\n    $this-&gt;_registerSession($user);\n\n    $this-&gt;flash-&gt;success(\n        'Welcome ' . $user-&gt;name\n    );\n\n    return $this-&gt;dispatcher-&gt;forward(\n        [\n            'controller' =&gt; 'invoices',\n            'action'     =&gt; 'index',\n        ]\n    );\n}\n</code></pre> <p>If the user does not exist we forward the user back again to action where the form is displayed:</p> <pre><code>&lt;?php\n\nreturn $this-&gt;dispatcher-&gt;forward(\n    [\n        'controller' =&gt; 'session',\n        'action'     =&gt; 'index',\n    ]\n);\n</code></pre>"},{"location":"tutorial-invo/#securing-the-backend","title":"Securing the Backend","text":"<p>The backend is a private area where only registered users have access. Therefore, it is necessary to check that only registered users have access to these controllers. If you aren't logged into the application and you try to access, for example, the products controller (which is private) you will see a screen like this:</p> <p></p> <p>Every time someone attempts to access any controller/action, the application verifies that the current role (in session) has access to it, otherwise it displays a message like the above and forwards the flow to the home page.</p> <p>Now let's find out how the application accomplishes this. The first thing to know is that there is a component called Dispatcher. It is informed about the route found by the Routing component. Then, it is responsible for loading the appropriate controller and execute the corresponding action method.</p> <p>Normally, the framework creates the Dispatcher automatically. In our case, we want to perform a verification before executing the required action, checking if the user has access to it or not. To achieve this, we have replaced the component by creating a function in the bootstrap:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Dispatcher;\n\n// ...\n\n/**\n * MVC dispatcher\n */\n$di-&gt;set(\n    'dispatcher',\n    function () {\n        // ...\n\n        $dispatcher = new Dispatcher();\n\n        return $dispatcher;\n    }\n);\n</code></pre> <p>We now have total control over the Dispatcher used in the application. Many components in the framework trigger events that allow us to modify their internal flow of operation. As the Dependency Injector component acts as glue for components, a new component called EventsManager allows us to intercept the events produced by a component, routing the events to listeners.</p>"},{"location":"tutorial-invo/#events-management","title":"Events Management","text":"<p>The EventsManager allows us to attach listeners to a particular type of event. The type that interests us now is 'dispatch'. The following code filters all events produced by the Dispatcher:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$di-&gt;set(\n    'dispatcher',\n    function () {\n        // Create an events manager\n        $eventsManager = new EventsManager();\n\n        // Listen for events produced in the dispatcher using the Security plugin\n        $eventsManager-&gt;attach(\n            'dispatch:beforeExecuteRoute',\n            new SecurityPlugin()\n        );\n\n        // Handle exceptions and not-found exceptions using NotFoundPlugin\n        $eventsManager-&gt;attach(\n            'dispatch:beforeException',\n            new NotFoundPlugin()\n        );\n\n        $dispatcher = new Dispatcher();\n\n        // Assign the events manager to the dispatcher\n        $dispatcher-&gt;setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n</code></pre> <p>When an event called <code>beforeExecuteRoute</code> is triggered the following plugin will be notified:</p> <pre><code>&lt;?php\n\n/**\n * Check if the user is allowed to access certain action using the SecurityPlugin\n */\n$eventsManager-&gt;attach(\n    'dispatch:beforeExecuteRoute',\n    new SecurityPlugin()\n);\n</code></pre> <p>When a <code>beforeException</code> is triggered then other plugin is notified:</p> <pre><code>&lt;?php\n\n/**\n * Handle exceptions and not-found exceptions using NotFoundPlugin\n */\n$eventsManager-&gt;attach(\n    'dispatch:beforeException',\n    new NotFoundPlugin()\n);\n</code></pre> <p>SecurityPlugin is a class located at (<code>app/plugins/SecurityPlugin.php</code>). This class implements the method <code>beforeExecuteRoute</code>. This is the same name as one of the events produced in the Dispatcher:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\User\\Plugin;\nuse Phalcon\\Mvc\\Dispatcher;\n\nclass SecurityPlugin extends Plugin\n{\n    // ...\n\n    public function beforeExecuteRoute(Event $event, Dispatcher $dispatcher)\n    {\n        // ...\n    }\n}\n</code></pre> <p>The hook events always receive a first parameter that contains contextual information of the event produced (<code>$event</code>) and a second one that is the object that produced the event itself (<code>$dispatcher</code>). It is not mandatory that plugins extend the class Phalcon\\Mvc\\User\\Plugin, but by doing this they gain easier access to the services available in the application.</p> <p>Now, we're verifying the role in the current session, checking if the user has access using the ACL list. If the user does not have access we redirect to the home screen as explained before:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\User\\Plugin;\nuse Phalcon\\Mvc\\Dispatcher;\n\nclass SecurityPlugin extends Plugin\n{\n    // ...\n\n    public function beforeExecuteRoute(Event $event, Dispatcher $dispatcher)\n    {\n        // Check whether the 'auth' variable exists in session to define the active role\n        $auth = $this-&gt;session-&gt;get('auth');\n\n        if (!$auth) {\n            $role = 'Guests';\n        } else {\n            $role = 'Users';\n        }\n\n        // Take the active controller/action from the dispatcher\n        $controller = $dispatcher-&gt;getControllerName();\n        $action     = $dispatcher-&gt;getActionName();\n\n        // Obtain the ACL list\n        $acl = $this-&gt;getAcl();\n\n        // Check if the Role have access to the controller (resource)\n        $allowed = $acl-&gt;isAllowed($role, $controller, $action);\n\n        if (!$allowed) {\n            // If he doesn't have access forward him to the index controller\n            $this-&gt;flash-&gt;error(\n                \"You don't have access to this module\"\n            );\n\n            $dispatcher-&gt;forward(\n                [\n                    'controller' =&gt; 'index',\n                    'action'     =&gt; 'index',\n                ]\n            );\n\n            // Returning 'false' we tell to the dispatcher to stop the current operation\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"tutorial-invo/#getting-the-acl-list","title":"Getting the ACL list","text":"<p>In the above example we have obtained the ACL using the method <code>$this-&gt;getAcl()</code>. This method is also implemented in the Plugin. Now we are going to explain step-by-step how we built the access control list (ACL):</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl;\nuse Phalcon\\Acl\\Role;\nuse Phalcon\\Acl\\Adapter\\Memory as AclList;\n\n// Create the ACL\n$acl = new AclList();\n\n// The default action is DENY access\n$acl-&gt;setDefaultAction(\n    Acl::DENY\n);\n\n// Register two roles, Users is registered users\n// and guests are users without a defined identity\n$roles = [\n    'users'  =&gt; new Role('Users'),\n    'guests' =&gt; new Role('Guests'),\n];\n\nforeach ($roles as $role) {\n    $acl-&gt;addRole($role);\n}\n</code></pre> <p>Now, we define the resources for each area respectively. Controller names are resources and their actions are accesses for the resources:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Resource;\n\n// ...\n\n// Private area resources (backend)\n$privateResources = [\n    'companies'    =&gt; ['index', 'search', 'new', 'edit', 'save', 'create', 'delete'],\n    'products'     =&gt; ['index', 'search', 'new', 'edit', 'save', 'create', 'delete'],\n    'producttypes' =&gt; ['index', 'search', 'new', 'edit', 'save', 'create', 'delete'],\n    'invoices'     =&gt; ['index', 'profile'],\n];\n\nforeach ($privateResources as $resourceName =&gt; $actions) {\n    $acl-&gt;addResource(\n        new Resource($resourceName),\n        $actions\n    );\n}\n\n\n\n// Public area resources (frontend)\n$publicResources = [\n    'index'    =&gt; ['index'],\n    'about'    =&gt; ['index'],\n    'register' =&gt; ['index'],\n    'errors'   =&gt; ['show404', 'show500'],\n    'session'  =&gt; ['index', 'register', 'start', 'end'],\n    'contact'  =&gt; ['index', 'send'],\n];\n\nforeach ($publicResources as $resourceName =&gt; $actions) {\n    $acl-&gt;addResource(\n        new Resource($resourceName),\n        $actions\n    );\n}\n</code></pre> <p>The ACL now knows about the existing controllers and their related actions. Role <code>Users</code> has access to all the resources of both frontend and backend. The role <code>Guests</code> only has access to the public area:</p> <pre><code>&lt;?php\n\n// Grant access to public areas to both users and guests\nforeach ($roles as $role) {\n    foreach ($publicResources as $resource =&gt; $actions) {\n        $acl-&gt;allow(\n            $role-&gt;getName(),\n            $resource,\n            '*'\n        );\n    }\n}\n\n// Grant access to private area only to role Users\nforeach ($privateResources as $resource =&gt; $actions) {\n    foreach ($actions as $action) {\n        $acl-&gt;allow(\n            'Users',\n            $resource,\n            $action\n        );\n    }\n}\n</code></pre>"},{"location":"tutorial-invo/#working-with-the-crud","title":"Working with the CRUD","text":"<p>Backends usually provide forms to allow users to manipulate data. Continuing the explanation of INVO, we now address the creation of CRUDs, a very common task that Phalcon will facilitate you using forms, validations, paginators and more.</p> <p>Most options that manipulate data in INVO (companies, products and types of products) were developed using a basic and common CRUD (Create, Read, Update and Delete). Each CRUD contains the following files:</p> <pre><code>invo/\n    app/\n        controllers/\n            ProductsController.php\n        models/\n            Products.php\n        forms/\n            ProductsForm.php\n        views/\n            products/\n                edit.volt\n                index.volt\n                new.volt\n                search.volt\n</code></pre> <p>Each controller has the following actions:</p> <pre><code>&lt;?php\n\nclass ProductsController extends ControllerBase\n{\n    /**\n     * The start action, it shows the 'search' view\n     */\n    public function indexAction()\n    {\n        // ...\n    }\n\n    /**\n     * Execute the 'search' based on the criteria sent from the 'index'\n     * Returning a paginator for the results\n     */\n    public function searchAction()\n    {\n        // ...\n    }\n\n    /**\n     * Shows the view to create a 'new' product\n     */\n    public function newAction()\n    {\n        // ...\n    }\n\n    /**\n     * Shows the view to 'edit' an existing product\n     */\n    public function editAction()\n    {\n        // ...\n    }\n\n    /**\n     * Creates a product based on the data entered in the 'new' action\n     */\n    public function createAction()\n    {\n        // ...\n    }\n\n    /**\n     * Updates a product based on the data entered in the 'edit' action\n     */\n    public function saveAction()\n    {\n        // ...\n    }\n\n    /**\n     * Deletes an existing product\n     */\n    public function deleteAction($id)\n    {\n        // ...\n    }\n}\n</code></pre>"},{"location":"tutorial-invo/#the-search-form","title":"The Search Form","text":"<p>Every CRUD starts with a search form. This form shows each field that the table has (products), allowing the user to create a search criteria for any field. The <code>products</code> table has a relationship with the table <code>products_types</code>. In this case, we previously queried the records in this table in order to facilitate the search by that field:</p> <pre><code>&lt;?php\n\n/**\n * The start action, it shows the 'search' view\n */\npublic function indexAction()\n{\n    $this-&gt;persistent-&gt;searchParams = null;\n\n    $this-&gt;view-&gt;form = new ProductsForm();\n}\n</code></pre> <p>An instance of the <code>ProductsForm</code> form (<code>app/forms/ProductsForm.php</code>) is passed to the view. This form defines the fields that are visible to the user:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Hidden;\nuse Phalcon\\Forms\\Element\\Select;\nuse Phalcon\\Validation\\Validator\\Email;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\nuse Phalcon\\Validation\\Validator\\Numericality;\n\nclass ProductsForm extends Form\n{\n    /**\n     * Initialize the products form\n     */\n    public function initialize($entity = null, $options = [])\n    {\n        if (!isset($options['edit'])) {\n            $element = new Text('id');\n            $element-&gt;setLabel('Id');\n            $this-&gt;add($element);\n        } else {\n            $this-&gt;add(new Hidden('id'));\n        }\n\n        $name = new Text('name');\n        $name-&gt;setLabel('Name');\n        $name-&gt;setFilters(\n            [\n                'striptags',\n                'string',\n            ]\n        );\n        $name-&gt;addValidators(\n            [\n                new PresenceOf(\n                    [\n                        'message' =&gt; 'Name is required',\n                    ]\n                )\n            ]\n        );\n        $this-&gt;add($name);\n\n        $type = new Select(\n            'profilesId',\n            ProductTypes::find(),\n            [\n                'using'      =&gt; [\n                    'id',\n                    'name',\n                ],\n                'useEmpty'   =&gt; true,\n                'emptyText'  =&gt; '...',\n                'emptyValue' =&gt; '',\n            ]\n        );\n\n        $this-&gt;add($type);\n\n        $price = new Text('price');\n        $price-&gt;setLabel('Price');\n        $price-&gt;setFilters(\n            [\n                'float',\n            ]\n        );\n        $price-&gt;addValidators(\n            [\n                new PresenceOf(\n                    [\n                        'message' =&gt; 'Price is required',\n                    ]\n                ),\n                new Numericality(\n                    [\n                        'message' =&gt; 'Price is required',\n                    ]\n                ),\n            ]\n        );\n        $this-&gt;add($price);\n    }\n}\n</code></pre> <p>The form is declared using an object-oriented scheme based on the elements provided by the forms component. Every element follows almost the same structure:</p> <pre><code>&lt;?php\n\n// Create the element\n$name = new Text('name');\n\n// Set its label\n$name-&gt;setLabel('Name');\n\n// Before validating the element apply these filters\n$name-&gt;setFilters(\n    [\n        'striptags',\n        'string',\n    ]\n);\n\n// Apply this validators\n$name-&gt;addValidators(\n    [\n        new PresenceOf(\n            [\n                'message' =&gt; 'Name is required',\n            ]\n        )\n    ]\n);\n\n// Add the element to the form\n$this-&gt;add($name);\n</code></pre> <p>Other elements are also used in this form:</p> <pre><code>&lt;?php\n\n// Add a hidden input to the form\n$this-&gt;add(\n    new Hidden('id')\n);\n\n// ...\n\n$productTypes = ProductTypes::find();\n\n// Add a HTML Select (list) to the form\n// and fill it with data from 'product_types'\n$type = new Select(\n    'profilesId',\n    $productTypes,\n    [\n        'using'      =&gt; [\n            'id',\n            'name',\n        ],\n        'useEmpty'   =&gt; true,\n        'emptyText'  =&gt; '...',\n        'emptyValue' =&gt; '',\n    ]\n);\n</code></pre> <p>Note that <code>ProductTypes::find()</code> contains the data necessary to fill the SELECT tag using <code>Phalcon\\Tag::select()</code>. Once the form is passed to the view, it can be rendered and presented to the user:</p> <pre><code>{% raw %}\n{{ form('products/search') }}\n\n    &lt;h2&gt;\n        Search products\n    &lt;/h2&gt;\n\n    &lt;fieldset&gt;\n\n        {% for element in form %}\n            &lt;div class='control-group'&gt;\n                {{ element.label(['class': 'control-label']) }}\n\n                &lt;div class='controls'&gt;\n                    {{ element }}\n                &lt;/div&gt;\n            &lt;/div&gt;\n        {% endfor %}\n\n\n\n        &lt;div class='control-group'&gt;\n            {{ submit_button('Search', 'class': 'btn btn-primary') }}\n        &lt;/div&gt;\n\n    &lt;/fieldset&gt;\n\n{{ endForm() }}\n{% endraw %}\n</code></pre> <p>This produces the following HTML:</p> <pre><code>&lt;form action='/invo/products/search' method='post'&gt;\n\n    &lt;h2&gt;\n        Search products\n    &lt;/h2&gt;\n\n    &lt;fieldset&gt;\n\n        &lt;div class='control-group'&gt;\n            &lt;label for='id' class='control-label'&gt;Id&lt;/label&gt;\n\n            &lt;div class='controls'&gt;\n                &lt;input type='text' id='id' name='id' /&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class='control-group'&gt;\n            &lt;label for='name' class='control-label'&gt;Name&lt;/label&gt;\n\n            &lt;div class='controls'&gt;\n                &lt;input type='text' id='name' name='name' /&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class='control-group'&gt;\n            &lt;label for='profilesId' class='control-label'&gt;profilesId&lt;/label&gt;\n\n            &lt;div class='controls'&gt;\n                &lt;select id='profilesId' name='profilesId'&gt;\n                    &lt;option value=''&gt;...&lt;/option&gt;\n                    &lt;option value='1'&gt;Vegetables&lt;/option&gt;\n                    &lt;option value='2'&gt;Fruits&lt;/option&gt;\n                &lt;/select&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class='control-group'&gt;\n            &lt;label for='price' class='control-label'&gt;Price&lt;/label&gt;\n\n            &lt;div class='controls'&gt;\n                &lt;input type='text' id='price' name='price' /&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class='control-group'&gt;\n            &lt;input type='submit' value='Search' class='btn btn-primary' /&gt;\n        &lt;/div&gt;\n\n    &lt;/fieldset&gt;\n\n&lt;/form&gt;\n</code></pre> <p>When the form is submitted, the <code>search</code> action is executed in the controller performing the search based on the data entered by the user.</p>"},{"location":"tutorial-invo/#performing-a-search","title":"Performing a Search","text":"<p>The <code>search</code> action has two behaviors. When accessed via POST, it performs a search based on the data sent from the form but when accessed via GET it moves the current page in the paginator. To differentiate HTTP methods, we check it using the Request component:</p> <pre><code>&lt;?php\n\n/**\n * Execute the 'search' based on the criteria sent from the 'index'\n * Returning a paginator for the results\n */\npublic function searchAction()\n{\n    if ($this-&gt;request-&gt;isPost()) {\n        // Create the query conditions\n    } else {\n        // Paginate using the existing conditions\n    }\n\n    // ...\n}\n</code></pre> <p>With the help of Phalcon\\Mvc\\Model\\Criteria, we can create the search conditions intelligently based on the data types and values sent from the form:</p> <pre><code>&lt;?php\n\n$query = Criteria::fromInput(\n    $this-&gt;di,\n    'Products',\n    $this-&gt;request-&gt;getPost()\n);\n</code></pre> <p>This method verifies which values are different from '' (empty string) and null and takes them into account to create the search criteria:</p> <ul> <li>If the field data type is text or similar (char, varchar, text, etc.) It uses an SQL <code>like</code> operator to filter the results.</li> <li>If the data type is not text or similar, it'll use the operator <code>=</code>.</li> </ul> <p>Additionally, <code>Criteria</code> ignores all the <code>$_POST</code> variables that do not match any field in the table. Values are automatically escaped using <code>bound parameters</code>.</p> <p>Now, we store the produced parameters in the controller's session bag:</p> <pre><code>&lt;?php\n\n$this-&gt;persistent-&gt;searchParams = $query-&gt;getParams();\n</code></pre> <p>A session bag, is a special attribute in a controller that persists between requests using the session service. When accessed, this attribute injects a Phalcon\\Session\\Bag instance that is independent in each controller.</p> <p>Then, based on the built params we perform the query:</p> <pre><code>&lt;?php\n\n$products = Products::find($parameters);\n\nif (count($products) === 0) {\n    $this-&gt;flash-&gt;notice(\n        'The search did not found any products'\n    );\n\n    return $this-&gt;dispatcher-&gt;forward(\n        [\n            'controller' =&gt; 'products',\n            'action'     =&gt; 'index',\n        ]\n    );\n}\n</code></pre> <p>If the search doesn't return any product, we forward the user to the index action again. Let's pretend the search returned results, then we create a paginator to navigate easily through them:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Paginator\\Adapter\\Model as Paginator;\n\n// ...\n\n$paginator = new Paginator(\n    [\n        'data'  =&gt; $products,   // Data to paginate\n        'limit' =&gt; 5,           // Rows per page\n        'page'  =&gt; $numberPage, // Active page\n    ]\n);\n\n// Get active page in the paginator\n$page = $paginator-&gt;getPaginate();\n</code></pre> <p>Finally we pass the returned page to view:</p> <pre><code>&lt;?php\n\n$this-&gt;view-&gt;page = $page;\n</code></pre> <p>In the view (<code>app/views/products/search.volt</code>), we traverse the results corresponding to the current page, showing every row in the current page to the user:</p> <pre><code>{% raw %}\n{% for product in page.items %}\n    {% if loop.first %}\n        &lt;table&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;\n                    &lt;th&gt;Id&lt;/th&gt;\n                    &lt;th&gt;Product Type&lt;/th&gt;\n                    &lt;th&gt;Name&lt;/th&gt;\n                    &lt;th&gt;Price&lt;/th&gt;\n                    &lt;th&gt;Active&lt;/th&gt;\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n    {% endif %}\n\n    &lt;tr&gt;\n        &lt;td&gt;\n            {{ product.id }}\n        &lt;/td&gt;\n\n        &lt;td&gt;\n            {{ product.getProductTypes().name }}\n        &lt;/td&gt;\n\n        &lt;td&gt;\n            {{ product.name }}\n        &lt;/td&gt;\n\n        &lt;td&gt;\n            {{ '%.2f'|format(product.price) }}\n        &lt;/td&gt;\n\n        &lt;td&gt;\n            {{ product.getActiveDetail() }}\n        &lt;/td&gt;\n\n        &lt;td width='7%'&gt;\n            {{ link_to('products/edit/' ~ product.id, 'Edit') }}\n        &lt;/td&gt;\n\n        &lt;td width='7%'&gt;\n            {{ link_to('products/delete/' ~ product.id, 'Delete') }}\n        &lt;/td&gt;\n    &lt;/tr&gt;\n\n    {% if loop.last %}\n            &lt;/tbody&gt;\n            &lt;tbody&gt;\n                &lt;tr&gt;\n                    &lt;td colspan='7'&gt;\n                        &lt;div&gt;\n                            {{ link_to('products/search', 'First') }}\n                            {{ link_to('products/search?page=' ~ page.before, 'Previous') }}\n                            {{ link_to('products/search?page=' ~ page.next, 'Next') }}\n                            {{ link_to('products/search?page=' ~ page.last, 'Last') }}\n                            &lt;span class='help-inline'&gt;{{ page.current }} of {{ page.total_pages }}&lt;/span&gt;\n                        &lt;/div&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    {% endif %}\n{% else %}\n    No products are recorded\n{% endfor %}\n{% endraw %}\n</code></pre> <p>There are many things in the above example that worth detailing. First of all, active items in the current page are traversed using a Volt's <code>for</code>. Volt provides a simpler syntax for a PHP <code>foreach</code>.</p> <pre><code>{% raw %}\n{% for product in page.items %}\n{% endraw %}\n</code></pre> <p>Which in PHP is the same as:</p> <pre><code>&lt;?php foreach ($page-&gt;items as $product) { ?&gt;\n</code></pre> <p>The whole <code>for</code> block provides the following:</p> <pre><code>{% raw %}\n{% for product in page.items %}\n    {% if loop.first %}\n        Executed before the first product in the loop\n    {% endif %}\n\n    Executed for every product of page.items\n\n    {% if loop.last %}\n        Executed after the last product is loop\n    {% endif %}\n{% else %}\n    Executed if page.items does not have any products\n{% endfor %}\n{% endraw %}\n</code></pre> <p>Now you can go back to the view and find out what every block is doing. Every field in <code>product</code> is printed accordingly:</p> <pre><code>{% raw %}\n&lt;tr&gt;\n    &lt;td&gt;\n        {{ product.id }}\n    &lt;/td&gt;\n\n    &lt;td&gt;\n        {{ product.productTypes.name }}\n    &lt;/td&gt;\n\n    &lt;td&gt;\n        {{ product.name }}\n    &lt;/td&gt;\n\n    &lt;td&gt;\n        {{ '%.2f'|format(product.price) }}\n    &lt;/td&gt;\n\n    &lt;td&gt;\n        {{ product.getActiveDetail() }}\n    &lt;/td&gt;\n\n    &lt;td width='7%'&gt;\n        {{ link_to('products/edit/' ~ product.id, 'Edit') }}\n    &lt;/td&gt;\n\n    &lt;td width='7%'&gt;\n        {{ link_to('products/delete/' ~ product.id, 'Delete') }}\n    &lt;/td&gt;\n&lt;/tr&gt;\n{% endraw %}\n</code></pre> <p>As we seen before using <code>product.id</code> is the same as in PHP as doing: <code>$product-&gt;id</code>, we made the same with <code>product.name</code> and so on. Other fields are rendered differently, for instance, let's focus in <code>product.productTypes.name</code>. To understand this part, we have to check the Products model (<code>app/models/Products.php</code>):</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\n/**\n * Products\n */\nclass Products extends Model\n{\n    // ...\n\n    /**\n     * Products initializer\n     */\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            'product_types_id',\n            'ProductTypes',\n            'id',\n            [\n                'reusable' =&gt; true,\n            ]\n        );\n    }\n\n    // ...\n}\n</code></pre> <p>A model can have a method called <code>initialize()</code>, this method is called once per request and it serves the ORM to initialize a model. In this case, 'Products' is initialized by defining that this model has a one-to-many relationship to another model called 'ProductTypes'.</p> <p><pre><code>&lt;?php\n\n$this-&gt;belongsTo(\n    'product_types_id',\n    'ProductTypes',\n    'id',\n    [\n        'reusable' =&gt; true,\n    ]\n);\n</code></pre> Which means, the local attribute <code>product_types_id</code> in <code>Products</code> has an one-to-many relation to the <code>ProductTypes</code> model in its attribute <code>id</code>. By defining this relationship we can access the name of the product type by using:</p> <pre><code>{% raw %}\n&lt;td&gt;{{ product.productTypes.name }}&lt;/td&gt;\n{% endraw %}\n</code></pre> <p>The field <code>price</code> is printed by its formatted using a Volt filter:</p> <pre><code>{% raw %}\n&lt;td&gt;{{ '%.2f'|format(product.price) }}&lt;/td&gt;\n{% endraw %}\n</code></pre> <p>In plain PHP, this would be:</p> <pre><code>&lt;?php echo sprintf('%.2f', $product-&gt;price) ?&gt;\n</code></pre> <p>Printing whether the product is active or not uses a helper implemented in the model:</p> <pre><code>{% raw %}\n&lt;td&gt;{{ product.getActiveDetail() }}&lt;/td&gt;\n{% endraw %}\n</code></pre> <p>This method is defined in the model.</p>"},{"location":"tutorial-invo/#creating-and-updating-records","title":"Creating and Updating Records","text":"<p>Now let's see how the CRUD creates and updates records. From the <code>new</code> and <code>edit</code> views, the data entered by the user is sent to the <code>create</code> and <code>save</code> actions that perform actions of <code>creating</code> and <code>updating</code> products, respectively.</p> <p>In the creation case, we recover the data submitted and assign them to a new <code>Products</code> instance:</p> <pre><code>&lt;?php\n\n/**\n * Creates a product based on the data entered in the 'new' action\n */\npublic function createAction()\n{\n    if (!$this-&gt;request-&gt;isPost()) {\n        return $this-&gt;dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'products',\n                'action'     =&gt; 'index',\n            ]\n        );\n    }\n\n    $form = new ProductsForm();\n\n    $product = new Products();\n\n    $product-&gt;id               = $this-&gt;request-&gt;getPost('id', 'int');\n    $product-&gt;product_types_id = $this-&gt;request-&gt;getPost('product_types_id', 'int');\n    $product-&gt;name             = $this-&gt;request-&gt;getPost('name', 'striptags');\n    $product-&gt;price            = $this-&gt;request-&gt;getPost('price', 'double');\n    $product-&gt;active           = $this-&gt;request-&gt;getPost('active');\n\n    // ...\n}\n</code></pre> <p>Remember the filters we defined in the Products form? Data is filtered before being assigned to the object <code>$product</code>. This filtering is optional; the ORM also escapes the input data and performs additional casting according to the column types:</p> <pre><code>&lt;?php\n\n// ...\n\n$name = new Text('name');\n\n$name-&gt;setLabel('Name');\n\n// Filters for name\n$name-&gt;setFilters(\n    [\n        'striptags',\n        'string',\n    ]\n);\n\n// Validators for name\n$name-&gt;addValidators(\n    [\n        new PresenceOf(\n            [\n                'message' =&gt; 'Name is required',\n            ]\n        )\n    ]\n);\n\n$this-&gt;add($name);\n</code></pre> <p>When saving, we'll know whether the data conforms to the business rules and validations implemented in the form <code>ProductsForm</code> form (<code>app/forms/ProductsForm.php</code>):</p> <pre><code>&lt;?php\n\n// ...\n\n$form = new ProductsForm();\n\n$product = new Products();\n\n// Validate the input\n$data = $this-&gt;request-&gt;getPost();\n\nif (!$form-&gt;isValid($data, $product)) {\n    $messages = $form-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        $this-&gt;flash-&gt;error($message);\n    }\n\n    return $this-&gt;dispatcher-&gt;forward(\n        [\n            'controller' =&gt; 'products',\n            'action'     =&gt; 'new',\n        ]\n    );\n}\n</code></pre> <p>Finally, if the form does not return any validation message we can save the product instance:</p> <pre><code>&lt;?php\n\n// ...\n\nif ($product-&gt;save() === false) {\n    $messages = $product-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        $this-&gt;flash-&gt;error($message);\n    }\n\n    return $this-&gt;dispatcher-&gt;forward(\n        [\n            'controller' =&gt; 'products',\n            'action'     =&gt; 'new',\n        ]\n    );\n}\n\n$form-&gt;clear();\n\n$this-&gt;flash-&gt;success(\n    'Product was created successfully'\n);\n\nreturn $this-&gt;dispatcher-&gt;forward(\n    [\n        'controller' =&gt; 'products',\n        'action'     =&gt; 'index',\n    ]\n);\n</code></pre> <p>Now, in the case of updating a product, we must first present the user with the data that is currently in the edited record:</p> <pre><code>&lt;?php\n\n/**\n * Edits a product based on its id\n */\npublic function editAction($id)\n{\n    if (!$this-&gt;request-&gt;isPost()) {\n        $product = Products::findFirstById($id);\n\n        if (!$product) {\n            $this-&gt;flash-&gt;error(\n                'Product was not found'\n            );\n\n            return $this-&gt;dispatcher-&gt;forward(\n                [\n                    'controller' =&gt; 'products',\n                    'action'     =&gt; 'index',\n                ]\n            );\n        }\n\n        $this-&gt;view-&gt;form = new ProductsForm(\n            $product,\n            [\n                'edit' =&gt; true,\n            ]\n        );\n    }\n}\n</code></pre> <p>The data found is bound to the form by passing the model as first parameter. Thanks to this, the user can change any value and then sent it back to the database through to the <code>save</code> action:</p> <pre><code>&lt;?php\n\n/**\n * Updates a product based on the data entered in the 'edit' action\n */\npublic function saveAction()\n{\n    if (!$this-&gt;request-&gt;isPost()) {\n        return $this-&gt;dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'products',\n                'action'     =&gt; 'index',\n            ]\n        );\n    }\n\n    $id = $this-&gt;request-&gt;getPost('id', 'int');\n\n    $product = Products::findFirstById($id);\n\n    if (!$product) {\n        $this-&gt;flash-&gt;error(\n            'Product does not exist'\n        );\n\n        return $this-&gt;dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'products',\n                'action'     =&gt; 'index',\n            ]\n        );\n    }\n\n    $form = new ProductsForm();\n\n    $data = $this-&gt;request-&gt;getPost();\n\n    if (!$form-&gt;isValid($data, $product)) {\n        $messages = $form-&gt;getMessages();\n\n        foreach ($messages as $message) {\n            $this-&gt;flash-&gt;error($message);\n        }\n\n        return $this-&gt;dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'products',\n                'action'     =&gt; 'new',\n            ]\n        );\n    }\n\n    if ($product-&gt;save() === false) {\n        $messages = $product-&gt;getMessages();\n\n        foreach ($messages as $message) {\n            $this-&gt;flash-&gt;error($message);\n        }\n\n        return $this-&gt;dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'products',\n                'action'     =&gt; 'new',\n            ]\n        );\n    }\n\n    $form-&gt;clear();\n\n    $this-&gt;flash-&gt;success(\n        'Product was updated successfully'\n    );\n\n    return $this-&gt;dispatcher-&gt;forward(\n        [\n            'controller' =&gt; 'products',\n            'action'     =&gt; 'index',\n        ]\n    );\n}\n</code></pre>"},{"location":"tutorial-invo/#user-components","title":"User Components","text":"<p>All the UI elements and visual style of the application has been achieved mostly through Bootstrap. Some elements, such as the navigation bar changes according to the state of the application. For example, in the upper right corner, the link <code>Log in / Sign Up</code> changes to <code>Log out</code> if a user is logged into the application.</p> <p>This part of the application is implemented in the component <code>Elements</code> (<code>app/library/Elements.php</code>).</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\User\\Component;\n\nclass Elements extends Component\n{\n    public function getMenu()\n    {\n        // ...\n    }\n\n    public function getTabs()\n    {\n        // ...\n    }\n}\n</code></pre> <p>This class extends the Phalcon\\Mvc\\User\\Component. It is not imposed to extend a component with this class, but it helps to get access more quickly to the application services. Now, we are going to register our first user component in the services container:</p> <pre><code>&lt;?php\n\n// Register a user component\n$di-&gt;set(\n    'elements',\n    function () {\n        return new Elements();\n    }\n);\n</code></pre> <p>As controllers, plugins or components within a view, this component also has access to the services registered in the container and by just accessing an attribute with the same name as a previously registered service:</p> <pre><code>{% raw %}\n&lt;div class='navbar navbar-fixed-top'&gt;\n    &lt;div class='navbar-inner'&gt;\n        &lt;div class='container'&gt;\n            &lt;a class='btn btn-navbar' data-toggle='collapse' data-target='.nav-collapse'&gt;\n                &lt;span class='icon-bar'&gt;&lt;/span&gt;\n                &lt;span class='icon-bar'&gt;&lt;/span&gt;\n                &lt;span class='icon-bar'&gt;&lt;/span&gt;\n            &lt;/a&gt;\n\n            &lt;a class='brand' href='#'&gt;INVO&lt;/a&gt;\n\n            {{ elements.getMenu() }}\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class='container'&gt;\n    {{ content() }}\n\n    &lt;hr&gt;\n\n    &lt;footer&gt;\n        &lt;p&gt;&amp;copy; Company 2017&lt;/p&gt;\n    &lt;/footer&gt;\n&lt;/div&gt;\n{% endraw %}\n</code></pre> <p>The important part is:</p> <pre><code>{% raw %}\n{{ elements.getMenu() }}\n{% endraw %}\n</code></pre>"},{"location":"tutorial-invo/#changing-the-title-dynamically","title":"Changing the Title Dynamically","text":"<p>When you browse between one option and another will see that the title changes dynamically indicating where we are currently working. This is achieved in each controller initializer:</p> <pre><code>&lt;?php\n\nclass ProductsController extends ControllerBase\n{\n    public function initialize()\n    {\n        // Set the document title\n        $this-&gt;tag-&gt;setTitle(\n            'Manage your product types'\n        );\n\n        parent::initialize();\n    }\n\n    // ...\n}\n</code></pre> <p>Note, that the method <code>parent::initialize()</code> is also called, it adds more data to the title:</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass ControllerBase extends Controller\n{\n    protected function initialize()\n    {\n        // Prepend the application name to the title\n        $this-&gt;tag-&gt;prependTitle('INVO | ');\n    }\n\n    // ...\n}\n</code></pre> Finally, the title is printed in the main view (app/views/index.volt):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;?php echo $this-&gt;tag-&gt;getTitle(); ?&gt;\n    &lt;/head&gt;\n\n    &lt;!-- ... --&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"tutorial-rest/","title":"Tutorial: Creating a Simple REST API","text":"<p>In this tutorial, we will explain how to create a simple application that provides a RESTful API using the different HTTP methods:</p> <ul> <li><code>GET</code> to retrieve and search data</li> <li><code>POST</code> to add data</li> <li><code>PUT</code> to update data</li> <li><code>DELETE</code> to delete data</li> </ul>"},{"location":"tutorial-rest/#defining-the-api","title":"Defining the API","text":"<p>The API consists of the following methods:</p> Method URL Action <code>GET</code> /api/robots Retrieves all robots <code>GET</code> /api/robots/search/Astro Searches for robots with 'Astro' in their name <code>GET</code> /api/robots/2 Retrieves robots based on primary key <code>POST</code> /api/robots Adds a new robot <code>PUT</code> /api/robots/2 Updates robots based on primary key <code>DELETE</code> /api/robots/2 Deletes robots based on primary key"},{"location":"tutorial-rest/#creating-the-application","title":"Creating the Application","text":"<p>As the application is so simple, we will not implement any full MVC environment to develop it. In this case, we will use a micro application to meet our goal.</p> <p>The following file structure is more than enough:</p> <pre><code>my-rest-api/\n    models/\n        Robots.php\n    index.php\n    .htaccess\n</code></pre> <p>First, we need a <code>.htaccess</code> file that contains all the rules to rewrite the request URIs to the <code>index.php</code> file (application entry-point):</p> <pre><code>&lt;IfModule mod_rewrite.c&gt;\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n&lt;/IfModule&gt;\n</code></pre> <p>The bulk of our code will be placed in <code>index.php</code>. The file is created as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n\n// Define the routes here\n\n$app-&gt;handle();\n</code></pre> <p>Now we will create the routes as we defined above:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n\n// Retrieves all robots\n$app-&gt;get(\n    '/api/robots',\n    function () {\n        // Operation to fetch all the robots\n    }\n);\n\n// Searches for robots with $name in their name\n$app-&gt;get(\n    '/api/robots/search/{name}',\n    function ($name) {\n        // Operation to fetch robot with name $name\n    }\n);\n\n// Retrieves robots based on primary key\n$app-&gt;get(\n    '/api/robots/{id:[0-9]+}',\n    function ($id) {\n        // Operation to fetch robot with id $id\n    }\n);\n\n// Adds a new robot\n$app-&gt;post(\n    '/api/robots',\n    function () {\n        // Operation to create a fresh robot\n    }\n);\n\n// Updates robots based on primary key\n$app-&gt;put(\n    '/api/robots/{id:[0-9]+}',\n    function ($id) {\n        // Operation to update a robot with id $id\n    }\n);\n\n// Deletes robots based on primary key\n$app-&gt;delete(\n    '/api/robots/{id:[0-9]+}',\n    function ($id) {\n        // Operation to delete the robot with id $id\n    }\n);\n\n$app-&gt;handle();\n</code></pre> <p>Each route is defined with a method with the same name as the HTTP method, as first parameter we pass a route pattern, followed by a handler. In this case, the handler is an anonymous function. The following route: <code>/api/robots/{id:[0-9]+}</code>, by example, explicitly sets that the <code>id</code> parameter must have a numeric format.</p> <p>When a defined route matches the requested URI then the application executes the corresponding handler.</p>"},{"location":"tutorial-rest/#creating-a-model","title":"Creating a Model","text":"<p>Our API provides information about <code>robots</code>, these data are stored in a database. The following model allows us to access that table in an object-oriented way. We have implemented some business rules using built-in validators and simple validations. Doing this will give us the peace of mind that saved data meet the requirements of our application. This model file should be placed in your <code>Models</code> folder.</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Message;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Uniqueness\nuse Phalcon\\Validation\\Validator\\InclusionIn;\n\n\nclass Robots extends Model\n{\n    public function validation()\n    {\n        $validator = new Validation();\n\n        // Type must be: droid, mechanical or virtual\n        $validator-&gt;add(\n            \"type\",\n            new InclusionIn(\n                [\n                    'message' =&gt; 'Type must be \"droid\", \"mechanical\", or \"virtual\"',\n                    'domain' =&gt; [\n                        'droid',\n                        'mechanical',\n                        'virtual',\n                    ],\n                ]\n            )\n        );\n\n        // Robot name must be unique\n        $validator-&gt;add(\n            'name',\n            new Uniqueness(\n                [\n                    'field'   =&gt; 'name',\n                    'message' =&gt; 'The robot name must be unique',\n                ]\n            )\n        );\n\n        // Year cannot be less than zero\n        if ($this-&gt;year &lt; 0) {\n            $this-&gt;appendMessage(\n                new Message('The year cannot be less than zero')\n            );\n        }\n\n        // Check if any messages have been produced\n        if ($this-&gt;validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n</code></pre> <p>Now, we must set up a connection to be used by this model and load it within our app [File: <code>index.php</code>]:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as PdoMysql;\n\n// Use Loader() to autoload our model\n$loader = new Loader();\n\n$loader-&gt;registerNamespaces(\n    [\n        'Store\\Toys' =&gt; __DIR__ . '/models/',\n    ]\n);\n\n$loader-&gt;register();\n\n$di = new FactoryDefault();\n\n// Set up the database service\n$di-&gt;set(\n    'db',\n    function () {\n        return new PdoMysql(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'asimov',\n                'password' =&gt; 'zeroth',\n                'dbname'   =&gt; 'robotics',\n            ]\n        );\n    }\n);\n\n// Create and bind the DI to the application\n$app = new Micro($di);\n</code></pre>"},{"location":"tutorial-rest/#retrieving-data","title":"Retrieving Data","text":"<p>The first <code>handler</code> that we will implement is which by method GET returns all available robots. Let's use PHQL to perform this simple query returning the results as JSON. [File: <code>index.php</code>]</p> <pre><code>&lt;?php\n\n// Retrieves all robots\n$app-&gt;get(\n    '/api/robots',\n    function () use ($app) {\n        $phql = 'SELECT * FROM Store\\Toys\\Robots ORDER BY name';\n\n        $robots = $app-&gt;modelsManager-&gt;executeQuery($phql);\n\n        $data = [];\n\n        foreach ($robots as $robot) {\n            $data[] = [\n                'id'   =&gt; $robot-&gt;id,\n                'name' =&gt; $robot-&gt;name,\n            ];\n        }\n\n        echo json_encode($data);\n    }\n);\n</code></pre> <p>PHQL, allow us to write queries using a high-level, object-oriented SQL dialect that internally translates to the right SQL statements depending on the database system we are using. The clause <code>use</code> in the anonymous function allows us to pass some variables from the global to local scope easily.</p> <p>The searching by name handler would look like [File: <code>index.php</code>]:</p> <pre><code>&lt;?php\n\n// Searches for robots with $name in their name\n$app-&gt;get(\n    '/api/robots/search/{name}',\n    function ($name) use ($app) {\n        $phql = 'SELECT * FROM Store\\Toys\\Robots WHERE name LIKE :name: ORDER BY name';\n\n        $robots = $app-&gt;modelsManager-&gt;executeQuery(\n            $phql,\n            [\n                'name' =&gt; '%' . $name . '%'\n            ]\n        );\n\n        $data = [];\n\n        foreach ($robots as $robot) {\n            $data[] = [\n                'id'   =&gt; $robot-&gt;id,\n                'name' =&gt; $robot-&gt;name,\n            ];\n        }\n\n        echo json_encode($data);\n    }\n);\n</code></pre> <p>Searching by the field <code>id</code> it's quite similar, in this case, we're also notifying if the robot was found or not [File: <code>index.php</code>]:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n// Retrieves robots based on primary key\n$app-&gt;get(\n    '/api/robots/{id:[0-9]+}',\n    function ($id) use ($app) {\n        $phql = 'SELECT * FROM Store\\Toys\\Robots WHERE id = :id:';\n\n        $robot = $app-&gt;modelsManager-&gt;executeQuery(\n            $phql,\n            [\n                'id' =&gt; $id,\n            ]\n        )-&gt;getFirst();\n\n\n\n        // Create a response\n        $response = new Response();\n\n        if ($robot === false) {\n            $response-&gt;setJsonContent(\n                [\n                    'status' =&gt; 'NOT-FOUND'\n                ]\n            );\n        } else {\n            $response-&gt;setJsonContent(\n                [\n                    'status' =&gt; 'FOUND',\n                    'data'   =&gt; [\n                        'id'   =&gt; $robot-&gt;id,\n                        'name' =&gt; $robot-&gt;name\n                    ]\n                ]\n            );\n        }\n\n        return $response;\n    }\n);\n</code></pre>"},{"location":"tutorial-rest/#inserting-data","title":"Inserting Data","text":"<p>Taking the data as a JSON string inserted in the body of the request, we also use PHQL for insertion [File: <code>index.php</code>]:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n// Adds a new robot\n$app-&gt;post(\n    '/api/robots',\n    function () use ($app) {\n        $robot = $app-&gt;request-&gt;getJsonRawBody();\n\n        $phql = 'INSERT INTO Store\\Toys\\Robots (name, type, year) VALUES (:name:, :type:, :year:)';\n\n        $status = $app-&gt;modelsManager-&gt;executeQuery(\n            $phql,\n            [\n                'name' =&gt; $robot-&gt;name,\n                'type' =&gt; $robot-&gt;type,\n                'year' =&gt; $robot-&gt;year,\n            ]\n        );\n\n        // Create a response\n        $response = new Response();\n\n        // Check if the insertion was successful\n        if ($status-&gt;success() === true) {\n            // Change the HTTP status\n            $response-&gt;setStatusCode(201, 'Created');\n\n            $robot-&gt;id = $status-&gt;getModel()-&gt;id;\n\n            $response-&gt;setJsonContent(\n                [\n                    'status' =&gt; 'OK',\n                    'data'   =&gt; $robot,\n                ]\n            );\n        } else {\n            // Change the HTTP status\n            $response-&gt;setStatusCode(409, 'Conflict');\n\n            // Send errors to the client\n            $errors = [];\n\n            foreach ($status-&gt;getMessages() as $message) {\n                $errors[] = $message-&gt;getMessage();\n            }\n\n            $response-&gt;setJsonContent(\n                [\n                    'status'   =&gt; 'ERROR',\n                    'messages' =&gt; $errors,\n                ]\n            );\n        }\n\n        return $response;\n    }\n);\n</code></pre>"},{"location":"tutorial-rest/#updating-data","title":"Updating Data","text":"<p>The data update is similar to insertion. The <code>id</code> passed as parameter indicates what robot must be updated [File: <code>index.php</code>]:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n// Updates robots based on primary key\n$app-&gt;put(\n    '/api/robots/{id:[0-9]+}',\n    function ($id) use ($app) {\n        $robot = $app-&gt;request-&gt;getJsonRawBody();\n\n        $phql = 'UPDATE Store\\Toys\\Robots SET name = :name:, type = :type:, year = :year: WHERE id = :id:';\n\n        $status = $app-&gt;modelsManager-&gt;executeQuery(\n            $phql,\n            [\n                'id'   =&gt; $id,\n                'name' =&gt; $robot-&gt;name,\n                'type' =&gt; $robot-&gt;type,\n                'year' =&gt; $robot-&gt;year,\n            ]\n        );\n\n        // Create a response\n        $response = new Response();\n\n        // Check if the insertion was successful\n        if ($status-&gt;success() === true) {\n            $response-&gt;setJsonContent(\n                [\n                    'status' =&gt; 'OK'\n                ]\n            );\n        } else {\n            // Change the HTTP status\n            $response-&gt;setStatusCode(409, 'Conflict');\n\n            $errors = [];\n\n            foreach ($status-&gt;getMessages() as $message) {\n                $errors[] = $message-&gt;getMessage();\n            }\n\n            $response-&gt;setJsonContent(\n                [\n                    'status'   =&gt; 'ERROR',\n                    'messages' =&gt; $errors,\n                ]\n            );\n        }\n\n        return $response;\n    }\n);\n</code></pre>"},{"location":"tutorial-rest/#deleting-data","title":"Deleting Data","text":"<p>The data delete is similar to update. The <code>id</code> passed as parameter indicates what robot must be deleted [File: <code>index.php</code>]:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n// Deletes robots based on primary key\n$app-&gt;delete(\n    '/api/robots/{id:[0-9]+}',\n    function ($id) use ($app) {\n        $phql = 'DELETE FROM Store\\Toys\\Robots WHERE id = :id:';\n\n        $status = $app-&gt;modelsManager-&gt;executeQuery(\n            $phql,\n            [\n                'id' =&gt; $id,\n            ]\n        );\n\n        // Create a response\n        $response = new Response();\n\n        if ($status-&gt;success() === true) {\n            $response-&gt;setJsonContent(\n                [\n                    'status' =&gt; 'OK'\n                ]\n            );\n        } else {\n            // Change the HTTP status\n            $response-&gt;setStatusCode(409, 'Conflict');\n\n            $errors = [];\n\n            foreach ($status-&gt;getMessages() as $message) {\n                $errors[] = $message-&gt;getMessage();\n            }\n\n            $response-&gt;setJsonContent(\n                [\n                    'status'   =&gt; 'ERROR',\n                    'messages' =&gt; $errors,\n                ]\n            );\n        }\n\n        return $response;\n    }\n);\n</code></pre>"},{"location":"tutorial-rest/#creating-database","title":"Creating database","text":"<p>Now we will create database for our application. Run SQL queries as follows: <pre><code>CREATE DATABASE `robotics`;\nCREATE TABLE `robotics`.`robots` (\n `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n `name` varchar(200) COLLATE utf8_bin NOT NULL,\n `type` varchar(200) COLLATE utf8_bin NOT NULL,\n `year` smallint(2) unsigned NOT NULL,\n PRIMARY KEY (`id`)\n)\n</code></pre></p>"},{"location":"tutorial-rest/#testing-our-application","title":"Testing our Application","text":"<p>Using curl we'll test every route in our application verifying its proper operation.</p> <p>Obtain all the robots:</p> <pre><code>curl -i -X GET http://localhost/my-rest-api/api/robots\n\nHTTP/1.1 200 OK\nDate: Tue, 21 Jul 2015 07:05:13 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 117\nContent-Type: text/html; charset=UTF-8\n\n[{\"id\":\"1\",\"name\":\"Robotina\"},{\"id\":\"2\",\"name\":\"Astro Boy\"},{\"id\":\"3\",\"name\":\"Terminator\"}]\n</code></pre> <p>Search a robot by its name:</p> <pre><code>curl -i -X GET http://localhost/my-rest-api/api/robots/search/Astro\n\nHTTP/1.1 200 OK\nDate: Tue, 21 Jul 2015 07:09:23 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 31\nContent-Type: text/html; charset=UTF-8\n\n[{\"id\":\"2\",\"name\":\"Astro Boy\"}]\n</code></pre> <p>Obtain a robot by its id:</p> <pre><code>curl -i -X GET http://localhost/my-rest-api/api/robots/3\n\nHTTP/1.1 200 OK\nDate: Tue, 21 Jul 2015 07:12:18 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 56\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"FOUND\",\"data\":{\"id\":\"3\",\"name\":\"Terminator\"}}\n</code></pre> <p>Insert a new robot:</p> <pre><code>curl -i -X POST -d '{\"name\":\"C-3PO\",\"type\":\"droid\",\"year\":1977}'\n    http://localhost/my-rest-api/api/robots\n\nHTTP/1.1 201 Created\nDate: Tue, 21 Jul 2015 07:15:09 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 75\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"OK\",\"data\":{\"name\":\"C-3PO\",\"type\":\"droid\",\"year\":1977,\"id\":\"4\"}}\n</code></pre> <p>Try to insert a new robot with the name of an existing robot:</p> <pre><code>curl -i -X POST -d '{\"name\":\"C-3PO\",\"type\":\"droid\",\"year\":1977}'\n    http://localhost/my-rest-api/api/robots\n\nHTTP/1.1 409 Conflict\nDate: Tue, 21 Jul 2015 07:18:28 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 63\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"ERROR\",\"messages\":[\"The robot name must be unique\"]}\n</code></pre> <p>Or update a robot with an unknown type:</p> <pre><code>curl -i -X PUT -d '{\"name\":\"ASIMO\",\"type\":\"humanoid\",\"year\":2000}'\n    http://localhost/my-rest-api/api/robots/4\n\nHTTP/1.1 409 Conflict\nDate: Tue, 21 Jul 2015 08:48:01 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 104\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"ERROR\",\"messages\":[\"Value of field 'type' must be part of\n    list: droid, mechanical, virtual\"]}\n</code></pre> <p>Finally, delete a robot:</p> <pre><code>curl -i -X DELETE http://localhost/my-rest-api/api/robots/4\n\nHTTP/1.1 200 OK\nDate: Tue, 21 Jul 2015 08:49:29 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 15\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"OK\"}\n</code></pre>"},{"location":"tutorial-rest/#conclusion","title":"Conclusion","text":"<p>As we saw, developing a RESTful API with Phalcon is easy using   micro applications and PHQL.</p>"},{"location":"tutorial-vokuro/","title":"Tutorial: V\u00f6kur\u00f3","text":"<p>V\u00f6kur\u00f3 is another sample application you can use to learn more about Phalcon. V\u00f6kur\u00f3 is a small website that shows how to implement a security features and management of users and permissions. You can clone its code from GitHub.</p>"},{"location":"tutorial-vokuro/#project-structure","title":"Project Structure","text":"<p>Once you clone the project in your document root you'll see the following structure:</p> <pre><code>vokuro/\n    app/\n        config/\n        controllers/\n        forms/\n        library/\n        models/\n        views/\n    cache/\n    public/\n        css/\n        img/\n    schemas/\n</code></pre> <p>This project follows a quite similar structure to INVO. Once you open the application in your browser <code>http://localhost/vokuro</code> you'll see something like this:</p> <p></p> <p>The application is divided into two parts, a frontend, where visitors can sign up the service and a backend where administrative users can manage registered users. Both frontend and backend are combined in a single module.</p>"},{"location":"tutorial-vokuro/#load-classes-and-dependencies","title":"Load Classes and Dependencies","text":"<p>This project uses Phalcon\\Loader to load controllers, models, forms, etc. within the project and composer to load the project's dependencies. So, the first thing you have to do before execute V\u00f6kur\u00f3 is install its dependencies via composer. Assuming you have it correctly installed, type the following command in the console:</p> <pre><code>cd vokuro\ncomposer install\n</code></pre> <p>V\u00f6kur\u00f3 sends emails to confirm the sign up of registered users using Swift, the <code>composer.json</code> looks like:</p> <pre><code>{\n    \"require\" : {\n        \"php\": \"&gt;=5.5.0\",\n        \"ext-phalcon\": \"&gt;=3.0.0\",\n        \"swiftmailer/swiftmailer\": \"^5.4\",\n        \"amazonwebservices/aws-sdk-for-php\": \"~1.0\"\n    }\n}\n</code></pre> <p>Now, there is a file called <code>app/config/loader.php</code> where all the auto-loading stuff is set up. At the end of this file you can see that the composer autoloader is included enabling the application to autoload any of the classes in the downloaded dependencies:</p> <pre><code>&lt;?php\n\n// ...\n\n// Use composer autoloader to load vendor classes\nrequire_once BASE_PATH . '/vendor/autoload.php';\n</code></pre> <p>Moreover, V\u00f6kur\u00f3, unlike the INVO, utilizes namespaces for controllers and models which is the recommended practice to structure a project. This way the autoloader looks slightly different than the one we saw before (<code>app/config/loader.php</code>):</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n$loader = new Loader();\n\n$loader-&gt;registerNamespaces(\n    [\n        'Vokuro\\Models'      =&gt; $config-&gt;application-&gt;modelsDir,\n        'Vokuro\\Controllers' =&gt; $config-&gt;application-&gt;controllersDir,\n        'Vokuro\\Forms'       =&gt; $config-&gt;application-&gt;formsDir,\n        'Vokuro'             =&gt; $config-&gt;application-&gt;libraryDir,\n    ]\n);\n\n$loader-&gt;register();\n\n// ...\n</code></pre> <p>Instead of using <code>registerDirectories()</code>, we use <code>registerNamespaces()</code>. Every namespace points to a directory defined in the configuration file (app/config/config.php). For instance the namespace <code>Vokuro\\Controllers</code> points to <code>app/controllers</code> so all the classes required by the application within this namespace requires it in its definition:</p> <pre><code>&lt;?php\n\nnamespace Vokuro\\Controllers;\n\nclass AboutController extends ControllerBase\n{\n    // ...\n}\n</code></pre>"},{"location":"tutorial-vokuro/#sign-up","title":"Sign Up","text":"<p>First, let's check how users are registered in V\u00f6kur\u00f3. When a user clicks the <code>Create an Account</code> button, the controller SessionController is invoked and the action <code>signup</code> is executed:</p> <pre><code>&lt;?php\n\nnamespace Vokuro\\Controllers;\n\nuse Vokuro\\Forms\\SignUpForm;\n\nclass SessionController extends ControllerBase\n{\n    public function signupAction()\n    {\n        $form = new SignUpForm();\n\n        // ...\n\n        $this-&gt;view-&gt;form = $form;\n    }\n}\n</code></pre> <p>This action simply pass a form instance of <code>SignUpForm</code> to the view, which itself is rendered to allow the user enter the login details:</p> <pre><code>{% raw %}\n{{ form('class': 'form-search') }}\n\n    &lt;h2&gt;\n        Sign Up\n    &lt;/h2&gt;\n\n    &lt;p&gt;{{ form.label('name') }}&lt;/p&gt;\n    &lt;p&gt;\n        {{ form.render('name') }}\n        {{ form.messages('name') }}\n    &lt;/p&gt;\n\n    &lt;p&gt;{{ form.label('email') }}&lt;/p&gt;\n    &lt;p&gt;\n        {{ form.render('email') }}\n        {{ form.messages('email') }}\n    &lt;/p&gt;\n\n    &lt;p&gt;{{ form.label('password') }}&lt;/p&gt;\n    &lt;p&gt;\n        {{ form.render('password') }}\n        {{ form.messages('password') }}\n    &lt;/p&gt;\n\n    &lt;p&gt;{{ form.label('confirmPassword') }}&lt;/p&gt;\n    &lt;p&gt;\n        {{ form.render('confirmPassword') }}\n        {{ form.messages('confirmPassword') }}\n    &lt;/p&gt;\n\n    &lt;p&gt;\n        {{ form.render('terms') }} {{ form.label('terms') }}\n        {{ form.messages('terms') }}\n    &lt;/p&gt;\n\n    &lt;p&gt;{{ form.render('Sign Up') }}&lt;/p&gt;\n\n    {{ form.render('csrf', ['value': security.getToken()]) }}\n    {{ form.messages('csrf') }}\n\n    &lt;hr&gt;\n\n{{ endForm() }}\n{% endraw %}\n</code></pre>"},{"location":"unit-testing/","title":"Overview","text":"<p>Writing proper tests can assist in writing better software. If you set up proper test cases you can eliminate most functional bugs and better maintain your software.</p>"},{"location":"unit-testing/#integrating-phpunit-with-phalcon","title":"Integrating PHPUnit with Phalcon","text":"<p>If you don't already have phpunit installed, you can do it by using the following composer command:</p> <pre><code>composer require --dev phpunit/phpunit:^5.0\n</code></pre> <p>or by manually adding it to <code>composer.json</code>:</p> <pre><code>{\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^5.0\"\n    }\n}\n</code></pre> <p>Once PHPUnit is installed create a directory called <code>tests</code> in project root directory:</p> <pre><code>app/\npublic/\ntests/\n</code></pre> <p>Next, we need a 'helper' file to bootstrap the application for unit testing.</p>"},{"location":"unit-testing/#the-phpunit-helper-file","title":"The PHPUnit helper file","text":"<p>A helper file is required to bootstrap the application for running the tests. We have prepared a sample file. Put the file in your <code>tests/</code> directory as <code>TestHelper.php</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Loader;\n\nini_set(\"display_errors\", 1);\nerror_reporting(E_ALL);\n\ndefine(\"ROOT_PATH\", __DIR__);\n\nset_include_path(\n    ROOT_PATH . PATH_SEPARATOR . get_include_path()\n);\n\n// Required for phalcon/incubator\ninclude __DIR__ . \"/../vendor/autoload.php\";\n\n// Use the application autoloader to autoload the classes\n// Autoload the dependencies found in composer\n$loader = new Loader();\n\n$loader-&gt;registerDirs(\n    [\n        ROOT_PATH,\n    ]\n);\n\n$loader-&gt;register();\n\n$di = new FactoryDefault();\n\nDi::reset();\n\n// Add any needed services to the DI here\n\nDi::setDefault($di);\n</code></pre> <p>Should you need to test any components from your own library, add them to the autoloader or use the autoloader from your main application.</p> <p>To help you build the Unit Tests, we made a few abstract classes you can use to bootstrap the Unit Tests themselves. These files exist in the Phalcon Incubator.</p> <p>You can use the Incubator library by adding it as a dependency:</p> <pre><code>composer require phalcon/incubator\n</code></pre> <p>or by manually adding it to <code>composer.json</code>:</p> <pre><code>{\n    \"require\": {\n        \"phalcon/incubator\": \"^3.0\"\n    }\n}\n</code></pre> <p>You can also clone the repository using the repo link above.</p>"},{"location":"unit-testing/#the-phpunitxml-file","title":"The <code>phpunit.xml</code> file","text":"<p>Now, create a <code>phpunit.xml</code> file as follows:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n&lt;phpunit bootstrap=\"./TestHelper.php\"\n         backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         verbose=\"true\"\n         colors=\"false\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n         syntaxCheck=\"true\"&gt;\n\n    &lt;testsuite name=\"Phalcon - Testsuite\"&gt;\n        &lt;directory&gt;./&lt;/directory&gt;\n    &lt;/testsuite&gt;\n&lt;/phpunit&gt;\n</code></pre> <p>Modify the <code>phpunit.xml</code> to fit your needs and save it in <code>tests</code>. This will run any tests under the <code>tests</code> directory.</p>"},{"location":"unit-testing/#sample-unit-test","title":"Sample Unit Test","text":"<p>To run any Unit Tests you need to define them. The autoloader will make sure the proper files are loaded so all you need to do is create the files and phpunit will run the tests for you.</p> <p>This example does not contain a config file, most test cases however, do need one. You can add it to the <code>DI</code> to get the <code>UnitTestCase</code> file.</p> <p>First create a base Unit Test called <code>UnitTestCase.php</code> in your <code>tests</code> directory:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Test\\UnitTestCase as PhalconTestCase;\n\nabstract class UnitTestCase extends PhalconTestCase\n{\n    /**\n     * @var bool\n     */\n    private $_loaded = false;\n\n    public function setUp()\n    {\n        parent::setUp();\n\n        // Load any additional services that might be required during testing\n        $di = Di::getDefault();\n\n        // Get any DI components here. If you have a config, be sure to pass it to the parent\n\n        $this-&gt;setDi($di);\n\n        $this-&gt;_loaded = true;\n    }\n\n    /**\n     * Check if the test case is setup properly\n     *\n     * @throws \\PHPUnit_Framework_IncompleteTestError;\n     */\n    public function __destruct()\n    {\n        if (!$this-&gt;_loaded) {\n            throw new \\PHPUnit_Framework_IncompleteTestError(\n                \"Please run parent::setUp().\"\n            );\n        }\n    }\n}\n</code></pre> <p>It's always a good idea to separate your Unit Tests in namespaces. For this test we will create the namespace 'Test'. So create a file called <code>tests\\Test\\UnitTest.php</code>:</p> <pre><code>&lt;?php\n\nnamespace Test;\n\n/**\n * Class UnitTest\n */\nclass UnitTest extends \\UnitTestCase\n{\n    public function testTestCase()\n    {\n        $this-&gt;assertEquals(\n            \"works\",\n            \"works\",\n            \"This is OK\"\n        );\n\n        $this-&gt;assertEquals(\n            \"works\",\n            \"works1\",\n            \"This will fail\"\n        );\n    }\n}\n</code></pre> <p>Now when you execute <code>phpunit</code> in your command-line from the <code>tests</code> directory you will get the following output:</p> <pre><code>$ phpunit\nPHPUnit 3.7.23 by Sebastian Bergmann.\n\nConfiguration read from /var/www/tests/phpunit.xml\n\nTime: 3 ms, Memory: 3.45Mb\n\nThere was 1 failure:\n\n1) Test\\UnitTest::testTestCase\nThis will fail\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'works'\n+'works1'\n\n/var/www/tests/Test/UnitTest.php:25\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n</code></pre> <p>Now you can start building your Unit Tests. You can view a good guide here. We also recommend reading the PHPUnit documentation if you're not familiar with PHPUnit.</p>"},{"location":"url/","title":"Generating URLs and Paths","text":"<p>Phalcon\\Mvc\\Url is the component responsible of generate URLs in a Phalcon application. It's capable of produce independent URLs based on routes.</p>"},{"location":"url/#setting-a-base-uri","title":"Setting a base URI","text":"<p>Depending of which directory of your document root your application is installed, it may have a base URI or not.</p> <p>For example, if your document root is <code>/var/www/htdocs</code> and your application is installed in <code>/var/www/htdocs/invo</code> then your baseUri will be <code>/invo/</code>. If you are using a VirtualHost or your application is installed on the document root, then your baseUri is <code>/</code>. Execute the following code to know the base URI detected by Phalcon:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Url;\n\n$url = new Url();\n\necho $url-&gt;getBaseUri();\n</code></pre> <p>By default, Phalcon automatically may detect your baseUri, but if you want to increase the performance of your application is recommended setting up it manually:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Url;\n\n$url = new Url();\n\n// Setting a relative base URI\n$url-&gt;setBaseUri('/invo/');\n\n// Setting a full domain as base URI\n$url-&gt;setBaseUri('//my.domain.com/');\n\n// Setting a full domain as base URI\n$url-&gt;setBaseUri('http://my.domain.com/my-app/');\n</code></pre> <p>Usually, this component must be registered in the Dependency Injector container, so you can set up it there:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Url;\n\n$di-&gt;set(\n    'url',\n    function () {\n        $url = new Url();\n\n        $url-&gt;setBaseUri('/invo/');\n\n        return $url;\n    }\n);\n</code></pre>"},{"location":"url/#generating-uris","title":"Generating URIs","text":"<p>If you are using the Router with its default behavior, your application is able to match routes based on the following pattern: </p> <p>Pattern</p> <p>/:controller/:action/:params </p> <p>Accordingly, it is easy to create routes that satisfy that pattern (or any other pattern defined in the router) passing a string to the method <code>get</code>:</p> <pre><code>&lt;?php echo $url-&gt;get('products/save'); ?&gt;\n</code></pre> <p>Note that isn't necessary to prepend the base URI. If you have named routes you can easily change it creating it dynamically. For Example if you have the following route:</p> <pre><code>&lt;?php\n\n$router\n    -&gt;add(\n        '/blog/{year}/{month}/{title}',\n        [\n            'controller' =&gt; 'posts',\n            'action'     =&gt; 'show',\n        ]\n    )\n    -&gt;setName('show-post');\n</code></pre> <p>A URL can be generated in the following way:</p> <pre><code>&lt;?php\n\n// This produces: /blog/2015/01/some-blog-post\n$url-&gt;get(\n    [\n        'for'   =&gt; 'show-post',\n        'year'  =&gt; '2015',\n        'month' =&gt; '01',\n        'title' =&gt; 'some-blog-post',\n    ]\n);\n</code></pre>"},{"location":"url/#producing-urls-without-mod_rewrite","title":"Producing URLs without mod_rewrite","text":"<p>You can use this component also to create URLs without mod_rewrite:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Url;\n\n$url = new Url();\n\n// Pass the URI in $_GET['_url']\n$url-&gt;setBaseUri('/invo/index.php?_url=/');\n\n// This produce: /invo/index.php?_url=/products/save\necho $url-&gt;get('products/save');\n</code></pre> <p>You can also use <code>$_SERVER['REQUEST_URI']</code>:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Url;\n\n$url = new Url();\n\n// Pass the URI in $_GET['_url']\n$url-&gt;setBaseUri('/invo/index.php?_url=/');\n\n// Pass the URI using $_SERVER['REQUEST_URI']\n$url-&gt;setBaseUri('/invo/index.php/');\n</code></pre> <p>In this case, it's necessary to manually handle the required URI in the Router:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n// ... Define routes\n\n$uri = str_replace($_SERVER['SCRIPT_NAME'], '', $_SERVER['REQUEST_URI']);\n\n$router-&gt;handle($uri);\n</code></pre> <p>The produced routes would look like:</p> <pre><code>&lt;?php\n\n// This produce: /invo/index.php/products/save\necho $url-&gt;get('products/save');\n</code></pre>"},{"location":"url/#producing-urls-from-volt","title":"Producing URLs from Volt","text":"<p>The function <code>url</code> is available in volt to generate URLs using this component:</p> <pre><code>{% raw %}\n&lt;a href='{{ url('posts/edit/1002') }}'&gt;Edit&lt;/a&gt;\n{% endraw %}\n</code></pre> <p>Generate static routes:</p> <pre><code>{% raw %}\n&lt;link rel='stylesheet' href='{{ static_url('css/style.css') }}' type='text/css' /&gt;\n{% endraw %}\n</code></pre>"},{"location":"url/#static-vs-dynamic-uris","title":"Static vs. Dynamic URIs","text":"<p>This component allow you to set up a different base URI for static resources in the application:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Url;\n\n$url = new Url();\n\n// Dynamic URIs are\n$url-&gt;setBaseUri('/');\n\n// Static resources go through a CDN\n$url-&gt;setStaticBaseUri('http://static.mywebsite.com/');\n</code></pre> <p>Phalcon\\Tag will request both dynamic and static URIs using this component.</p>"},{"location":"url/#implementing-your-own-url-generator","title":"Implementing your own URL Generator","text":"<p>The Phalcon\\Mvc\\UrlInterface interface must be implemented to create your own URL generator replacing the one provided by Phalcon.</p>"},{"location":"validation/","title":"Validation","text":"<p>Phalcon\\Validation is an independent validation component that validates an arbitrary set of data. This component can be used to implement validation rules on data objects that do not belong to a model or collection.</p> <p>The following example shows its basic usage:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Email;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\n\n$validation = new Validation();\n\n$validation-&gt;add(\n    'name',\n    new PresenceOf(\n        [\n            'message' =&gt; 'The name is required',\n        ]\n    )\n);\n\n$validation-&gt;add(\n    'email',\n    new PresenceOf(\n        [\n            'message' =&gt; 'The e-mail is required',\n        ]\n    )\n);\n\n$validation-&gt;add(\n    'email',\n    new Email(\n        [\n            'message' =&gt; 'The e-mail is not valid',\n        ]\n    )\n);\n\n$messages = $validation-&gt;validate($_POST);\n\nif (count($messages)) {\n    foreach ($messages as $message) {\n        echo $message, '&lt;br&gt;';\n    }\n}\n</code></pre> <p>The loosely-coupled design of this component allows you to create your own validators along with the ones provided by the framework.</p>"},{"location":"validation/#initializing-validation","title":"Initializing Validation","text":"<p>Validation chains can be initialized in a direct manner by just adding validators to the Phalcon\\Validation object. You can put your validations in a separate file for better re-use code and organization:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Email;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\n\nclass MyValidation extends Validation\n{\n    public function initialize()\n    {\n        $this-&gt;add(\n            'name',\n            new PresenceOf(\n                [\n                    'message' =&gt; 'The name is required',\n                ]\n            )\n        );\n\n        $this-&gt;add(\n            'email',\n            new PresenceOf(\n                [\n                    'message' =&gt; 'The e-mail is required',\n                ]\n            )\n        );\n\n        $this-&gt;add(\n            'email',\n            new Email(\n                [\n                    'message' =&gt; 'The e-mail is not valid',\n                ]\n            )\n        );\n    }\n}\n</code></pre> <p>Then initialize and use your own validator:</p> <pre><code>&lt;?php\n\n$validation = new MyValidation();\n\n$messages = $validation-&gt;validate($_POST);\n\nif (count($messages)) {\n    foreach ($messages as $message) {\n        echo $message, '&lt;br&gt;';\n    }\n}\n</code></pre>"},{"location":"validation/#validators","title":"Validators","text":"<p>Phalcon exposes a set of built-in validators for this component:</p> Class Explanation Phalcon\\Validation\\Validator\\Alnum Validates that a field's value is only alphanumeric character(s). Phalcon\\Validation\\Validator\\Alpha Validates that a field's value is only alphabetic character(s). Phalcon\\Validation\\Validator\\Date Validates that a field's value is a valid date. Phalcon\\Validation\\Validator\\Digit Validates that a field's value is only numeric character(s). Phalcon\\Validation\\Validator\\File Validates that a field's value is a correct file. Phalcon\\Validation\\Validator\\Uniqueness Validates that a field's value is unique in the related model. Phalcon\\Validation\\Validator\\Numericality Validates that a field's value is a valid numeric value. Phalcon\\Validation\\Validator\\PresenceOf Validates that a field's value is not null or empty string. Phalcon\\Validation\\Validator\\Identical Validates that a field's value is the same as a specified value Phalcon\\Validation\\Validator\\Email Validates that field contains a valid email format Phalcon\\Validation\\Validator\\ExclusionIn Validates that a value is not within a list of possible values Phalcon\\Validation\\Validator\\InclusionIn Validates that a value is within a list of possible values Phalcon\\Validation\\Validator\\Regex Validates that the value of a field matches a regular expression Phalcon\\Validation\\Validator\\StringLength Validates the length of a string Phalcon\\Validation\\Validator\\Between Validates that a value is between two values Phalcon\\Validation\\Validator\\Confirmation Validates that a value is the same as another present in the data Phalcon\\Validation\\Validator\\Url Validates that field contains a valid URL Phalcon\\Validation\\Validator\\CreditCard Validates a credit card number Phalcon\\Validation\\Validator\\Callback Validates using callback function <p>The following example explains how to create additional validators for this component:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Message;\nuse Phalcon\\Validation\\Validator;\n\nclass IpValidator extends Validator\n{\n    /**\n     * Executes the validation\n     *\n     * @param Validation $validator\n     * @param string     $attribute\n     * @return boolean\n     */\n    public function validate(Validation $validator, $attribute)\n    {\n        $value = $validator-&gt;getValue($attribute);\n\n        if (!filter_var($value, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 | FILTER_FLAG_IPV6)) {\n            $message = $this-&gt;getOption('message');\n\n            if (!$message) {\n                $message = 'The IP is not valid';\n            }\n\n            $validator-&gt;appendMessage(\n                new Message($message, $attribute, 'Ip')\n            );\n\n            return false;\n        }\n\n        return true;\n    }\n}\n</code></pre> <p>It is important that validators return a valid boolean value indicating if the validation was successful or not.</p>"},{"location":"validation/#callback-validator","title":"Callback Validator","text":"<p>By using Phalcon\\Validation\\Validator\\Callback you can execute custom function which must return boolean or new validator class which will be used to validate the same field. By returning <code>true</code> validation will be successful, returning <code>false</code> will mean validation failed. When executing this validator Phalcon will pass data depending what it is - if it's an entity (i.e. a model, a <code>stdClass</code> etc.) then entity will be passed, otherwise data (i.e an array like <code>$_POST</code>). There is example:</p> <pre><code>&lt;?php\n\nuse \\Phalcon\\Validation;\nuse \\Phalcon\\Validation\\Validator\\Callback;\nuse \\Phalcon\\Validation\\Validator\\PresenceOf;\n\n$validation = new Validation();\n$validation-&gt;add(\n    'amount',\n    new Callback(\n        [\n            'callback' =&gt; function($data) {\n                return $data['amount'] % 2 == 0;\n            },\n            'message'  =&gt; 'Only even number of products are accepted'\n        ]\n    )\n);\n$validation-&gt;add(\n    'amount',\n    new Callback(\n        [\n            'callback' =&gt; function($data) {\n                if($data['amount'] % 2 == 0) {\n                    return $data['amount'] != 2;\n                }\n\n                return true;\n            },\n            'message' =&gt; \"You can't buy 2 products\"\n        ]\n    )\n);\n$validation-&gt;add(\n    'description',\n    new Callback(\n        [\n            'callback' =&gt; function($data) {\n                if($data['amount'] &gt;= 10) {\n                    return new PresenceOf(\n                        [\n                            'message' =&gt; 'You must write why you need so big amount.'\n                        ]\n                    );\n                }\n\n                return true;\n            }\n        ]\n    )\n);\n\n$messages = $validation-&gt;validate(['amount' =&gt; 1]);  // will return message from first validator\n$messages = $validation-&gt;validate(['amount' =&gt; 2]);  // will return message from second validator\n$messages = $validation-&gt;validate(['amount' =&gt; 10]); // will return message from validator returned by third validator\n</code></pre>"},{"location":"validation/#validation-messages","title":"Validation Messages","text":"<p>Phalcon\\Validation has a messaging subsystem that provides a flexible way to output or store the validation messages generated during the validation processes.</p> <p>Each message consists of an instance of the class Phalcon\\Validation\\Message. The set of messages generated can be retrieved with the <code>getMessages()</code> method. Each message provides extended information like the attribute that generated the message or the message type:</p> <pre><code>&lt;?php\n\n$messages = $validation-&gt;validate();\n\nif (count($messages)) {\n    foreach ($messages as $message) {\n        echo 'Message: ', $message-&gt;getMessage(), \"\\n\";\n        echo 'Field: ', $message-&gt;getField(), \"\\n\";\n        echo 'Type: ', $message-&gt;getType(), \"\\n\";\n    }\n}\n</code></pre> <p>You can pass a <code>message</code> parameter to change/translate the default message in each validator, even it's possible to use the wildcard <code>:field</code> in the message to be replaced by the label of the field:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation\\Validator\\Email;\n\n$validation-&gt;add(\n    'email',\n    new Email(\n        [\n            'message' =&gt; 'The e-mail is not valid',\n        ]\n    )\n);\n</code></pre> <p>By default, the <code>getMessages()</code> method returns all the messages generated during validation. You can filter messages for a specific field using the <code>filter()</code> method:</p> <pre><code>&lt;?php\n\n$messages = $validation-&gt;validate();\n\nif (count($messages)) {\n    // Filter only the messages generated for the field 'name'\n    $filteredMessages = $messages-&gt;filter('name');\n\n    foreach ($filteredMessages as $message) {\n        echo $message;\n    }\n}\n</code></pre>"},{"location":"validation/#filtering-of-data","title":"Filtering of Data","text":"<p>Data can be filtered prior to the validation ensuring that malicious or incorrect data is not validated.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\n\n$validation = new Validation();\n\n$validation-&gt;add(\n    'name',\n    new PresenceOf(\n        [\n            'message' =&gt; 'The name is required',\n        ]\n    )\n);\n\n$validation-&gt;add(\n    'email',\n    new PresenceOf(\n        [\n            'message' =&gt; 'The email is required',\n        ]\n    )\n);\n\n// Filter any extra space\n$validation-&gt;setFilters('name', 'trim');\n$validation-&gt;setFilters('email', 'trim');\n</code></pre> <p>Filtering and sanitizing is performed using the filter component. You can add more filters to this component or use the built-in ones.</p>"},{"location":"validation/#validation-events","title":"Validation Events","text":"<p>When validations are organized in classes, you can implement the <code>beforeValidation()</code> and <code>afterValidation()</code> methods to perform additional checks, filters, clean-up, etc. If the <code>beforeValidation()</code> method returns false the validation is automatically cancelled:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\n\nclass LoginValidation extends Validation\n{\n    public function initialize()\n    {\n        // ...\n    }\n\n    /**\n     * Executed before validation\n     *\n     * @param array $data\n     * @param object $entity\n     * @param Phalcon\\Validation\\Message\\Group $messages\n     * @return bool\n     */\n    public function beforeValidation($data, $entity, $messages)\n    {\n        if ($this-&gt;request-&gt;getHttpHost() !== 'admin.mydomain.com') {\n            $messages-&gt;appendMessage(\n                new Message('Only users can log on in the administration domain')\n            );\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Executed after validation\n     *\n     * @param array $data\n     * @param object $entity\n     * @param Phalcon\\Validation\\Message\\Group $messages\n     */\n    public function afterValidation($data, $entity, $messages)\n    {\n        // ... Add additional messages or perform more validations\n    }\n}\n</code></pre>"},{"location":"validation/#cancelling-validations","title":"Cancelling Validations","text":"<p>By default all validators assigned to a field are tested regardless if one of them have failed or not. You can change this behavior by telling the validation component which validator may stop the validation:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Regex;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\n\n$validation = new Validation();\n\n$validation-&gt;add(\n    'telephone',\n    new PresenceOf(\n        [\n            'message'      =&gt; 'The telephone is required',\n            'cancelOnFail' =&gt; true,\n        ]\n    )\n);\n\n$validation-&gt;add(\n    'telephone',\n    new Regex(\n        [\n            'message' =&gt; 'The telephone is required',\n            'pattern' =&gt; '/\\+44 [0-9]+/',\n        ]\n    )\n);\n\n$validation-&gt;add(\n    'telephone',\n    new StringLength(\n        [\n            'messageMinimum' =&gt; 'The telephone is too short',\n            'min'            =&gt; 2,\n        ]\n    )\n);\n</code></pre> <p>The first validator has the option <code>cancelOnFail</code> with a value of <code>true</code>, therefore if that validator fails the remaining validators in the chain are not executed.</p> <p>If you are creating custom validators you can dynamically stop the validation chain by setting the <code>cancelOnFail</code> option:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Message;\nuse Phalcon\\Validation\\Validator;\n\nclass MyValidator extends Validator\n{\n    /**\n     * Executes the validation\n     *\n     * @param Phalcon\\Validation $validator\n     * @param string $attribute\n     * @return boolean\n     */\n    public function validate(Validation $validator, $attribute)\n    {\n        // If the attribute value is name we must stop the chain\n        if ($attribute === 'name') {\n            $validator-&gt;setOption('cancelOnFail', true);\n        }\n\n        // ...\n    }\n}\n</code></pre>"},{"location":"validation/#avoid-validating-empty-values","title":"Avoid validating empty values","text":"<p>You can pass the option <code>allowEmpty</code> to all the built-in validators to avoid the validation to be performed if an empty value is passed:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Regex;\n\n$validation = new Validation();\n\n$validation-&gt;add(\n    'telephone',\n    new Regex(\n        [\n            'message'    =&gt; 'The telephone is required',\n            'pattern'    =&gt; '/\\+44 [0-9]+/',\n            'allowEmpty' =&gt; true,\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#recursive-validation","title":"Recursive Validation","text":"<p>You can also run Validation instances within another via the <code>afterValidation()</code> method. In this example, validating the <code>CompanyValidation</code> instance will also check the <code>PhoneValidation</code> instance:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\n\nclass CompanyValidation extends Validation\n{\n    /**\n     * @var PhoneValidation\n     */\n    protected $phoneValidation;\n\n    public function initialize()\n    {\n        $this-&gt;phoneValidation = new PhoneValidation();\n    }\n\n    public function afterValidation($data, $entity, $messages)\n    {\n        $phoneValidationMessages = $this-&gt;phoneValidation-&gt;validate(\n            $data['phone']\n        );\n\n        $messages-&gt;appendMessages(\n            $phoneValidationMessages\n        );\n    }\n}\n</code></pre>"},{"location":"views/","title":"Using Views","text":"<p>Views represent the user interface of your application. Views are often HTML files with embedded PHP code that perform tasks related solely to the presentation of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application.</p> <p>Phalcon\\Mvc\\View and Phalcon\\Mvc\\View\\Simple are responsible for the managing the view layer of your MVC application.</p>"},{"location":"views/#integrating-views-with-controllers","title":"Integrating Views with Controllers","text":"<p>Phalcon automatically passes the execution to the view component as soon as a particular controller has completed its cycle. The view component will look in the views folder for a folder named as the same name of the last controller executed and then for a file named as the last action executed. For instance, if a request is made to the URL http://127.0.0.1/blog/posts/show/301, Phalcon will parse the URL as follows:</p> Server Address 127.0.0.1 Phalcon Directory blog Controller posts Action show Parameter 301 <p>The dispatcher will look for a <code>PostsController</code> and its action <code>showAction</code>. A simple controller file for this example:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction($postId)\n    {\n        // Pass the $postId parameter to the view\n        $this-&gt;view-&gt;postId = $postId;\n    }\n}\n</code></pre> <p>The <code>setVar()</code> method allows us to create view variables on demand so that they can be used in the view template. The example above demonstrates how to pass the <code>$postId</code> parameter to the respective view template.</p>"},{"location":"views/#hierarchical-rendering","title":"Hierarchical Rendering","text":"<p>Phalcon\\Mvc\\View supports a hierarchy of files and is the default component for view rendering in Phalcon. This hierarchy allows for common layout points (commonly used views), as well as controller named folders defining respective view templates.</p> <p>This component uses by default PHP itself as the template engine, therefore views should have the <code>.phtml</code> extension. If the views directory is app/views then view component will find automatically for these 3 view files.</p> Name File Description Action View app/views/posts/show.phtml This is the view related to the action. It only will be shown when the <code>show</code> action is executed. Controller Layout app/views/layouts/posts.phtml This is the view related to the controller. It only will be shown for every action executed within the controller \"posts\". All the code implemented in the layout will be reused for all the actions in this controller. Main Layout app/views/index.phtml This is main action it will be shown for every controller or action executed within the application. <p>You are not required to implement all of the files mentioned above. Phalcon\\Mvc\\View will simply move to the next view level in the hierarchy of files. If all three view files are implemented, they will be processed as follows:</p> <pre><code>&lt;!-- app/views/posts/show.phtml --&gt;\n\n&lt;h3&gt;This is show view!&lt;/h3&gt;\n\n&lt;p&gt;I have received the parameter &lt;?php echo $postId; ?&gt;&lt;/p&gt;\n</code></pre> <pre><code>&lt;!-- app/views/layouts/posts.phtml --&gt;\n\n&lt;h2&gt;This is the \"posts\" controller layout!&lt;/h2&gt;\n\n&lt;?php echo $this-&gt;getContent(); ?&gt;\n</code></pre> <pre><code>&lt;!-- app/views/index.phtml --&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Example&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;h1&gt;This is main layout!&lt;/h1&gt;\n\n        &lt;?php echo $this-&gt;getContent(); ?&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Note the lines where the method <code>$this-&gt;getContent()</code> was called. This method instructs Phalcon\\Mvc\\View on where to inject the contents of the previous view executed in the hierarchy. For the example above, the output will be:</p> <p>.. figure:: ../_static/img/views-1.png    :align: center</p> <p>The generated HTML by the request will be:</p> <pre><code>&lt;!-- app/views/index.phtml --&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Example&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;h1&gt;This is main layout!&lt;/h1&gt;\n\n        &lt;!-- app/views/layouts/posts.phtml --&gt;\n\n        &lt;h2&gt;This is the \"posts\" controller layout!&lt;/h2&gt;\n\n        &lt;!-- app/views/posts/show.phtml --&gt;\n\n        &lt;h3&gt;This is show view!&lt;/h3&gt;\n\n        &lt;p&gt;I have received the parameter 101&lt;/p&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"views/#using-templates","title":"Using Templates","text":"<p>Templates are views that can be used to share common view code. They act as controller layouts, so you need to place them in the layouts directory.</p> <p>Templates can be rendered before the layout (using <code>$this-&gt;view-&gt;setTemplateBefore()</code>) or they can be rendered after the layout (using <code>this-&gt;view-&gt;setTemplateAfter()</code>). In the following example the template (<code>layouts/common.phtml</code>) is rendered after the main layout (<code>layouts/posts.phtml</code>):</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function initialize()\n    {\n        $this-&gt;view-&gt;setTemplateAfter('common');\n    }\n\n    public function lastAction()\n    {\n        $this-&gt;flash-&gt;notice(\n            'These are the latest posts'\n        );\n    }\n}\n</code></pre> <pre><code>&lt;!-- app/views/index.phtml --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Blog's title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;?php echo $this-&gt;getContent(); ?&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>&lt;!-- app/views/layouts/common.phtml --&gt;\n\n&lt;ul class='menu'&gt;\n    &lt;li&gt;&lt;a href='/'&gt;Home&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href='/articles'&gt;Articles&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href='/contact'&gt;Contact us&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;div class='content'&gt;&lt;?php echo $this-&gt;getContent(); ?&gt;&lt;/div&gt;\n</code></pre> <pre><code>&lt;!-- app/views/layouts/posts.phtml --&gt;\n\n&lt;h1&gt;Blog Title&lt;/h1&gt;\n\n&lt;?php echo $this-&gt;getContent(); ?&gt;\n</code></pre> <pre><code>&lt;!-- app/views/posts/last.phtml --&gt;\n\n&lt;article&gt;\n    &lt;h2&gt;This is a title&lt;/h2&gt;\n    &lt;p&gt;This is the post content&lt;/p&gt;\n&lt;/article&gt;\n\n&lt;article&gt;\n    &lt;h2&gt;This is another title&lt;/h2&gt;\n    &lt;p&gt;This is another post content&lt;/p&gt;\n&lt;/article&gt;\n</code></pre> <p>The final output will be the following:</p> <pre><code>&lt;!-- app/views/index.phtml --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Blog's title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;!-- app/views/layouts/common.phtml --&gt;\n\n        &lt;ul class='menu'&gt;\n            &lt;li&gt;&lt;a href='/'&gt;Home&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href='/articles'&gt;Articles&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href='/contact'&gt;Contact us&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n\n        &lt;div class='content'&gt;\n\n            &lt;!-- app/views/layouts/posts.phtml --&gt;\n\n            &lt;h1&gt;Blog Title&lt;/h1&gt;\n\n            &lt;!-- app/views/posts/last.phtml --&gt;\n\n            &lt;article&gt;\n                &lt;h2&gt;This is a title&lt;/h2&gt;\n                &lt;p&gt;This is the post content&lt;/p&gt;\n            &lt;/article&gt;\n\n            &lt;article&gt;\n                &lt;h2&gt;This is another title&lt;/h2&gt;\n                &lt;p&gt;This is another post content&lt;/p&gt;\n            &lt;/article&gt;\n\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>If we had used <code>$this-&gt;view-&gt;setTemplateBefore('common')</code>, this would be the final output:</p> <pre><code>&lt;!-- app/views/index.phtml --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Blog's title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;!-- app/views/layouts/posts.phtml --&gt;\n\n        &lt;h1&gt;Blog Title&lt;/h1&gt;\n\n        &lt;!-- app/views/layouts/common.phtml --&gt;\n\n        &lt;ul class='menu'&gt;\n            &lt;li&gt;&lt;a href='/'&gt;Home&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href='/articles'&gt;Articles&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href='/contact'&gt;Contact us&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n\n        &lt;div class='content'&gt;\n\n            &lt;!-- app/views/posts/last.phtml --&gt;\n\n            &lt;article&gt;\n                &lt;h2&gt;This is a title&lt;/h2&gt;\n                &lt;p&gt;This is the post content&lt;/p&gt;\n            &lt;/article&gt;\n\n            &lt;article&gt;\n                &lt;h2&gt;This is another title&lt;/h2&gt;\n                &lt;p&gt;This is another post content&lt;/p&gt;\n            &lt;/article&gt;\n\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"views/#control-rendering-levels","title":"Control Rendering Levels","text":"<p>As seen above, Phalcon\\Mvc\\View supports a view hierarchy. You might need to control the level of rendering produced by the view component. The method <code>Phalcon\\Mvc\\View::setRenderLevel()</code> offers this functionality.</p> <p>This method can be invoked from the controller or from a superior view layer to interfere with the rendering process.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function findAction()\n    {\n        // This is an Ajax response so it doesn't generate any kind of view\n        $this-&gt;view-&gt;setRenderLevel(\n            View::LEVEL_NO_RENDER\n        );\n\n        // ...\n    }\n\n    public function showAction($postId)\n    {\n        // Shows only the view related to the action\n        $this-&gt;view-&gt;setRenderLevel(\n            View::LEVEL_ACTION_VIEW\n        );\n    }\n}\n</code></pre> <p>The available render levels are:</p> Class Constant Description Order <code>LEVEL_NO_RENDER</code> Indicates to avoid generating any kind of presentation. <code>LEVEL_ACTION_VIEW</code> Generates the presentation to the view associated to the action. 1 <code>LEVEL_BEFORE_TEMPLATE</code> Generates presentation templates prior to the controller layout. 2 <code>LEVEL_LAYOUT</code> Generates the presentation to the controller layout. 3 <code>LEVEL_AFTER_TEMPLATE</code> Generates the presentation to the templates after the controller layout. 4 <code>LEVEL_MAIN_LAYOUT</code> Generates the presentation to the main layout. File views/index.phtml 5"},{"location":"views/#disabling-render-levels","title":"Disabling render levels","text":"<p>You can permanently or temporarily disable render levels. A level could be permanently disabled if it isn't used at all in the whole application:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\n\n$di-&gt;set(\n    'view',\n    function () {\n        $view = new View();\n\n        // Disable several levels\n        $view-&gt;disableLevel(\n            [\n                View::LEVEL_LAYOUT      =&gt; true,\n                View::LEVEL_MAIN_LAYOUT =&gt; true,\n            ]\n        );\n\n        return $view;\n    },\n    true\n);\n</code></pre> <p>Or disable temporarily in some part of the application:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function findAction()\n    {\n        $this-&gt;view-&gt;disableLevel(\n            View::LEVEL_MAIN_LAYOUT\n        );\n    }\n}\n</code></pre>"},{"location":"views/#picking-views","title":"Picking Views","text":"<p>As mentioned above, when Phalcon\\Mvc\\View is managed by Phalcon\\Mvc\\Application the view rendered is the one related with the last controller and action executed. You could override this by using the <code>Phalcon\\Mvc\\View::pick()</code> method:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass ProductsController extends Controller\n{\n    public function listAction()\n    {\n        // Pick 'views-dir/products/search' as view to render\n        $this-&gt;view-&gt;pick('products/search');\n\n        // Pick 'views-dir/books/list' as view to render\n        $this-&gt;view-&gt;pick(\n            [\n                'books',\n            ]\n        );\n\n        // Pick 'views-dir/products/search' as view to render\n        $this-&gt;view-&gt;pick(\n            [\n                1 =&gt; 'search',\n            ]\n        );\n    }\n}\n</code></pre>"},{"location":"views/#disabling-the-view","title":"Disabling the view","text":"<p>If your controller does not produce any output in the view (or not even have one) you may disable the view component avoiding unnecessary processing:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function closeSessionAction()\n    {\n        // Close session\n        // ...\n\n        // Disable the view to avoid rendering\n        $this-&gt;view-&gt;disable();\n    }\n}\n</code></pre> <p>Alternatively, you can return <code>false</code> to produce the same effect:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function closeSessionAction()\n    {\n        // ...\n\n        // Disable the view to avoid rendering\n        return false;\n    }\n}\n</code></pre> <p>You can return a <code>response</code> object to avoid disable the view manually:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function closeSessionAction()\n    {\n        // Close session\n        // ...\n\n        // A HTTP Redirect\n        return $this-&gt;response-&gt;redirect('index/index');\n    }\n}\n</code></pre>"},{"location":"views/#simple-rendering","title":"Simple Rendering","text":"<p>Phalcon\\Mvc\\View\\Simple is an alternative component to Phalcon\\Mvc\\View. It keeps most of the philosophy of Phalcon\\Mvc\\View but lacks of a hierarchy of files which is, in fact, the main feature of its counterpart.</p> <p>This component allows the developer to have control of when a view is rendered and its location. In addition, this component can leverage of view inheritance available in template engines such as <code>Volt</code> and others.</p> <p>The default component must be replaced in the service container:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View\\Simple as SimpleView;\n\n$di-&gt;set(\n    'view',\n    function () {\n        $view = new SimpleView();\n\n        $view-&gt;setViewsDir('../app/views/');\n\n        return $view;\n    },\n    true\n);\n</code></pre> <p>Automatic rendering must be disabled in Phalcon\\Mvc\\Application (if needed):</p> <pre><code>&lt;?php\n\nuse Exception;\nuse Phalcon\\Mvc\\Application;\n\ntry {\n    $application = new Application($di);\n\n    $application-&gt;useImplicitView(false);\n\n    $response = $application-&gt;handle();\n\n    $response-&gt;send();\n} catch (Exception $e) {\n    echo $e-&gt;getMessage();\n}\n</code></pre> <p>To render a view it's necessary to call the render method explicitly indicating the relative path to the view you want to display:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n        // Render 'views-dir/index.phtml'\n        echo $this-&gt;view-&gt;render('index');\n\n        // Render 'views-dir/posts/show.phtml'\n        echo $this-&gt;view-&gt;render('posts/show');\n\n        // Render 'views-dir/index.phtml' passing variables\n        echo $this-&gt;view-&gt;render(\n            'index',\n            [\n                'posts' =&gt; Posts::find(),\n            ]\n        );\n\n        // Render 'views-dir/posts/show.phtml' passing variables\n        echo $this-&gt;view-&gt;render(\n            'posts/show',\n            [\n                'posts' =&gt; Posts::find(),\n            ]\n        );\n    }\n}\n</code></pre> <p>This is different to Phalcon\\Mvc\\View who's <code>render()</code> method uses controllers and actions as parameters:</p> <pre><code>&lt;?php\n\n$params = [\n    'posts' =&gt; Posts::find(),\n];\n\n// Phalcon\\Mvc\\View\n$view = new \\Phalcon\\Mvc\\View();\necho $view-&gt;render('posts', 'show', $params);\n\n// Phalcon\\Mvc\\View\\Simple\n$simpleView = new \\Phalcon\\Mvc\\View\\Simple();\necho $simpleView-&gt;render('posts/show', $params);\n</code></pre>"},{"location":"views/#using-partials","title":"Using Partials","text":"<p>Partial templates are another way of breaking the rendering process into simpler more manageable chunks that can be reused by different parts of the application. With a partial, you can move the code for rendering a particular piece of a response to its own file.</p> <p>One way to use partials is to treat them as the equivalent of subroutines: as a way to move details out of a view so that your code can be more easily understood. For example, you might have a view that looks like this:</p> <pre><code>&lt;div class='top'&gt;&lt;?php $this-&gt;partial('shared/ad_banner'); ?&gt;&lt;/div&gt;\n\n&lt;div class='content'&gt;\n    &lt;h1&gt;Robots&lt;/h1&gt;\n\n    &lt;p&gt;Check out our specials for robots:&lt;/p&gt;\n    ...\n&lt;/div&gt;\n\n&lt;div class='footer'&gt;&lt;?php $this-&gt;partial('shared/footer'); ?&gt;&lt;/div&gt;\n</code></pre> <p>The <code>partial()</code> method does accept a second parameter as an array of variables/parameters that only will exists in the scope of the partial:</p> <pre><code>&lt;?php $this-&gt;partial('shared/ad_banner', ['id' =&gt; $site-&gt;id, 'size' =&gt; 'big']); ?&gt;\n</code></pre>"},{"location":"views/#transfer-values-from-the-controller-to-views","title":"Transfer values from the controller to views","text":"<p>Phalcon\\Mvc\\View is available in each controller using the view variable (<code>$this-&gt;view</code>). You can use that object to set variables directly to the view from a controller action by using the <code>setVar()</code> method.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction()\n    {\n        $user  = Users::findFirst();\n        $posts = $user-&gt;getPosts();\n\n        // Pass all the username and the posts to the views\n        $this-&gt;view-&gt;setVar('username', $user-&gt;username);\n        $this-&gt;view-&gt;setVar('posts', $posts);\n\n        // Using the magic setter\n        $this-&gt;view-&gt;username = $user-&gt;username;\n        $this-&gt;view-&gt;posts    = $posts;\n\n        // Passing more than one variable at the same time\n        $this-&gt;view-&gt;setVars(\n            [\n                'username' =&gt; $user-&gt;username,\n                'posts'    =&gt; $posts,\n            ]\n        );\n    }\n}\n</code></pre> <p>A variable with the name of the first parameter of <code>setVar()</code> will be created in the view, ready to be used. The variable can be of any type, from a simple string, integer etc. variable to a more complex structure such as array, collection etc.</p> <pre><code>&lt;h1&gt;\n    {{ username }}'s Posts\n&lt;/h1&gt;\n\n&lt;div class='post'&gt;\n&lt;?php\n\n    foreach ($posts as $post) {\n        echo '&lt;h2&gt;', $post-&gt;title, '&lt;/h2&gt;';\n    }\n\n?&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"views/#caching-view-fragments","title":"Caching View Fragments","text":"<p>Sometimes when you develop dynamic websites and some areas of them are not updated very often, the output is exactly the same between requests. Phalcon\\Mvc\\View offers caching a part or the whole rendered output to increase performance.</p> <p>Phalcon\\Mvc\\View integrates with <code>Phalcon\\Cache</code> to provide an easier way to cache output fragments. You could manually set the cache handler or set a global handler:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function showAction()\n    {\n        // Cache the view using the default settings\n        $this-&gt;view-&gt;cache(true);\n    }\n\n    public function showArticleAction()\n    {\n        // Cache this view for 1 hour\n        $this-&gt;view-&gt;cache(\n            [\n                'lifetime' =&gt; 3600,\n            ]\n        );\n    }\n\n    public function resumeAction()\n    {\n        // Cache this view for 1 day with the key 'resume-cache'\n        $this-&gt;view-&gt;cache(\n            [\n                'lifetime' =&gt; 86400,\n                'key'      =&gt; 'resume-cache',\n            ]\n        );\n    }\n\n    public function downloadAction()\n    {\n        // Passing a custom service\n        $this-&gt;view-&gt;cache(\n            [\n                'service'  =&gt; 'myCache',\n                'lifetime' =&gt; 86400,\n                'key'      =&gt; 'resume-cache',\n            ]\n        );\n    }\n}\n</code></pre> <p>When we do not define a key to the cache, the component automatically creates one using an MD5 hash of the name of the controller and view currently being rendered in the format of <code>controller/view</code>. It is a good practice to define a key for each action so you can easily identify the cache associated with each view.</p> <p>When the View component needs to cache something it will request a cache service from the services container. The service name convention for this service is <code>viewCache</code>:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Frontend\\Output as OutputFrontend;\nuse Phalcon\\Cache\\Backend\\Memcache as MemcacheBackend;\n\n// Set the views cache service\n$di-&gt;set(\n    'viewCache',\n    function () {\n        // Cache data for one day by default\n        $frontCache = new OutputFrontend(\n            [\n                'lifetime' =&gt; 86400,\n            ]\n        );\n\n        // Memcached connection settings\n        $cache = new MemcacheBackend(\n            $frontCache,\n            [\n                'host' =&gt; 'localhost',\n                'port' =&gt; '11211',\n            ]\n        );\n\n        return $cache;\n    }\n);\n</code></pre> <p>NOTE</p> <p>The frontend must always be Phalcon\\Cache\\Frontend\\Output and the service <code>viewCache</code> must be registered as always open (not shared) in the services container (DI). </p> <p>When using views, caching can be used to prevent controllers from needing to generate view data on each request.</p> <p>To achieve this we must identify uniquely each cache with a key. First we verify that the cache does not exist or has expired to make the calculations/queries to display data in the view:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass DownloadController extends Controller\n{\n    public function indexAction()\n    {\n        // Check whether the cache with key 'downloads' exists or has expired\n        if ($this-&gt;view-&gt;getCache()-&gt;exists('downloads')) {\n            // Query the latest downloads\n            $latest = Downloads::find(\n                [\n                    'order' =&gt; 'created_at DESC',\n                ]\n            );\n\n            $this-&gt;view-&gt;latest = $latest;\n        }\n\n        // Enable the cache with the same key 'downloads'\n        $this-&gt;view-&gt;cache(\n            [\n                'key' =&gt; 'downloads',\n            ]\n        );\n    }\n}\n</code></pre>"},{"location":"views/#template-engines","title":"Template Engines","text":"<p>Template Engines help designers to create views without the use of a complicated syntax. Phalcon includes a powerful and fast templating engine called <code>Volt</code>. Phalcon\\Mvc\\View allows you to use other template engines instead of plain PHP or Volt.</p> <p>Using a different template engine, usually requires complex text parsing using external PHP libraries in order to generate the final output for the user. This usually increases the number of resources that your application will use.</p> <p>If an external template engine is used, Phalcon\\Mvc\\View provides exactly the same view hierarchy and it's still possible to access the API inside these templates with a little more effort.</p> <p>This component uses adapters, these help Phalcon to speak with those external template engines in a unified way, let's see how to do that integration.</p>"},{"location":"views/#creating-your-own-template-engine-adapter","title":"Creating your own Template Engine Adapter","text":"<p>There are many template engines, which you might want to integrate or create one of your own. The first step to start using an external template engine is create an adapter for it.</p> <p>A template engine adapter is a class that acts as bridge between Phalcon\\Mvc\\View and the template engine itself. Usually it only needs two methods implemented: <code>__construct()</code> and <code>render()</code>. The first one receives the Phalcon\\Mvc\\View instance that creates the engine adapter and the DI container used by the application.</p> <p>The method <code>render()</code> accepts an absolute path to the view file and the view parameters set using <code>$this-&gt;view-&gt;setVar()</code>. You could read or require it when it's necessary.</p> <pre><code>&lt;?php\n\nuse Phalcon\\DiInterface;\nuse Phalcon\\Mvc\\Engine;\n\nclass MyTemplateAdapter extends Engine\n{\n    /**\n     * Adapter constructor\n     *\n     * @param \\Phalcon\\Mvc\\View $view\n     * @param \\Phalcon\\Di $di\n     */\n    public function __construct($view, DiInterface $di)\n    {\n        // Initialize here the adapter\n        parent::__construct($view, $di);\n    }\n\n    /**\n     * Renders a view using the template engine\n     *\n     * @param string $path\n     * @param array $params\n     */\n    public function render($path, $params)\n    {\n        // Access view\n        $view = $this-&gt;_view;\n\n        // Access options\n        $options = $this-&gt;_options;\n\n        // Render the view\n        // ...\n    }\n}\n</code></pre>"},{"location":"views/#changing-the-template-engine","title":"Changing the Template Engine","text":"<p>You can replace the template engine completely or use more than one template engine at the same time. The method <code>Phalcon\\Mvc\\View::registerEngines()</code> accepts an array containing data that define the template engines. The key of each engine is an extension that aids in distinguishing one from another. Template files related to the particular engine must have those extensions.</p> <p>The order that the template engines are defined with <code>Phalcon\\Mvc\\View::registerEngines()</code> defines the relevance of execution. If Phalcon\\Mvc\\View finds two views with the same name but different extensions, it will only render the first one.</p> <p>If you want to register a template engine or a set of them for each request in the application. You could register it when the view service is created:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\n\n// Setting up the view component\n$di-&gt;set(\n    'view',\n    function () {\n        $view = new View();\n\n        // A trailing directory separator is required\n        $view-&gt;setViewsDir('../app/views/');\n\n        // Set the engine\n        $view-&gt;registerEngines(\n            [\n                '.my-html' =&gt; 'MyTemplateAdapter',\n            ]\n        );\n\n        // Using more than one template engine\n        $view-&gt;registerEngines(\n            [\n                '.my-html' =&gt; 'MyTemplateAdapter',\n                '.phtml'   =&gt; 'Phalcon\\Mvc\\View\\Engine\\Php',\n            ]\n        );\n\n        return $view;\n    },\n    true\n);\n</code></pre> <p>There are adapters available for several template engines on the Phalcon Incubator</p>"},{"location":"views/#injecting-services-in-view","title":"Injecting services in View","text":"<p>Every view executed is included inside a Phalcon\\Di\\Injectable instance, providing easy access to the application's service container.</p> <p>The following example shows how to write a jQuery ajax request using a URL with the framework conventions. The service <code>url</code> (usually Phalcon\\Mvc\\Url) is injected in the view by accessing a property with the same name:</p> <pre><code>&lt;script type='text/javascript'&gt;\n\n$.ajax({\n    url: '&lt;?php echo $this-&gt;url-&gt;get('cities/get'); ?&gt;'\n})\n.done(function () {\n    alert('Done!');\n});\n\n&lt;/script&gt;\n</code></pre>"},{"location":"views/#stand-alone-component","title":"Stand-Alone Component","text":"<p>All the components in Phalcon can be used as glue components individually because they are loosely coupled to each other:</p>"},{"location":"views/#hierarchical-rendering_1","title":"Hierarchical Rendering","text":"<p>Using Phalcon\\Mvc\\View in a stand-alone mode can be demonstrated below:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\n\n$view = new View();\n\n// A trailing directory separator is required\n$view-&gt;setViewsDir('../app/views/');\n\n// Passing variables to the views, these will be created as local variables\n$view-&gt;setVar('someProducts', $products);\n$view-&gt;setVar('someFeatureEnabled', true);\n\n// Start the output buffering\n$view-&gt;start();\n\n// Render all the view hierarchy related to the view products/list.phtml\n$view-&gt;render('products', 'list');\n\n// Finish the output buffering\n$view-&gt;finish();\n\necho $view-&gt;getContent();\n</code></pre> <p>A short syntax is also available:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\n\n$view = new View();\n\necho $view-&gt;getRender(\n    'products',\n    'list',\n    [\n        'someProducts'       =&gt; $products,\n        'someFeatureEnabled' =&gt; true,\n    ],\n    function ($view) {\n        // Set any extra options here\n\n        $view-&gt;setViewsDir('../app/views/');\n\n        $view-&gt;setRenderLevel(\n            View::LEVEL_LAYOUT\n        );\n    }\n);\n</code></pre>"},{"location":"views/#simple-rendering_1","title":"Simple Rendering","text":"<p>Using Phalcon\\Mvc\\View\\Simple in a stand-alone mode can be demonstrated below:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View\\Simple as SimpleView;\n\n$view = new SimpleView();\n\n// A trailing directory separator is required\n$view-&gt;setViewsDir('../app/views/');\n\n// Render a view and return its contents as a string\necho $view-&gt;render('templates/welcomeMail');\n\n// Render a view passing parameters\necho $view-&gt;render(\n    'templates/welcomeMail',\n    [\n        'email'   =&gt; $email,\n        'content' =&gt; $content,\n    ]\n);\n</code></pre>"},{"location":"views/#view-events","title":"View Events","text":"<p>Phalcon\\Mvc\\View and Phalcon\\Mvc\\View\\Simple are able to send events to an <code>EventsManager</code> if it is present. Events are triggered using the type <code>view</code>. Some events when returning boolean false could stop the active operation. The following events are supported:</p> Event Name Triggered Can stop operation? beforeRender Triggered before starting the render process Yes beforeRenderView Triggered before rendering an existing view Yes afterRenderView Triggered after rendering an existing view No afterRender Triggered after completing the render process No notFoundView Triggered when a view was not found No <p>The following example demonstrates how to attach listeners to this component:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Mvc\\View;\n\n$di-&gt;set(\n    'view',\n    function () {\n        // Create an events manager\n        $eventsManager = new EventsManager();\n\n        // Attach a listener for type 'view'\n        $eventsManager-&gt;attach(\n            'view',\n            function (Event $event, $view) {\n                echo $event-&gt;getType(), ' - ', $view-&gt;getActiveRenderPath(), PHP_EOL;\n            }\n        );\n\n        $view = new View();\n\n        $view-&gt;setViewsDir('../app/views/');\n\n        // Bind the eventsManager to the view component\n        $view-&gt;setEventsManager($eventsManager);\n\n        return $view;\n    },\n    true\n);\n</code></pre> <p>The following example shows how to create a plugin that cleans/repair the HTML produced by the render process using Tidy:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\n\nclass TidyPlugin\n{\n    public function afterRender(Event $event, $view)\n    {\n        $tidyConfig = [\n            'clean'          =&gt; true,\n            'output-xhtml'   =&gt; true,\n            'show-body-only' =&gt; true,\n            'wrap'           =&gt; 0,\n        ];\n\n        $tidy = tidy_parse_string(\n            $view-&gt;getContent(),\n            $tidyConfig,\n            'UTF8'\n        );\n\n        $tidy-&gt;cleanRepair();\n\n        $view-&gt;setContent(\n            (string) $tidy\n        );\n    }\n}\n\n// Attach the plugin as a listener\n$eventsManager-&gt;attach(\n    'view:afterRender',\n    new TidyPlugin()\n);\n</code></pre>"},{"location":"volt/","title":"Volt: Template Engine","text":"<p>Volt is an ultra-fast and designer friendly templating language written in C for PHP. It provides you a set of helpers to write views in an easy way. Volt is highly integrated with other components of Phalcon, just as you can use it as a stand-alone component in your applications.</p> <p>Volt is inspired by Jinja, originally created by Armin Ronacher. Therefore many developers will be in familiar territory using the same syntax they have been using with similar template engines. Volt's syntax and features have been enhanced with more elements and of course with the performance that developers have been accustomed to while working with Phalcon.</p>"},{"location":"volt/#introduction","title":"Introduction","text":"<p>Volt views are compiled to pure PHP code, so basically they save the effort of writing PHP code manually:</p> <pre><code>{% raw %}\n{# app/views/products/show.volt #}\n\n{% block last_products %}\n\n{% for product in products %}\n    * Name: {{ product.name|e }}\n    {% if product.status === 'Active' %}\n       Price: {{ product.price + product.taxes/100 }}\n    {% endif  %}\n{% endfor  %}\n\n{% endblock %}\n{% endraw %}\n</code></pre>"},{"location":"volt/#activating-volt","title":"Activating Volt","text":"<p>As with other templating engines, you may register Volt in the view component, using a new extension or reusing the standard <code>.phtml</code>:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\View\\Engine\\Volt;\n\n// Register Volt as a service\n$di-&gt;set(\n    'voltService',\n    function ($view, $di) {\n        $volt = new Volt($view, $di);\n\n        $volt-&gt;setOptions(\n            [\n                'compiledPath'      =&gt; '../app/compiled-templates/',\n                'compiledExtension' =&gt; '.compiled',\n            ]\n        );\n\n        return $volt;\n    }\n);\n\n// Register Volt as template engine\n$di-&gt;set(\n    'view',\n    function () {\n        $view = new View();\n\n        $view-&gt;setViewsDir('../app/views/');\n\n        $view-&gt;registerEngines(\n            [\n                '.volt' =&gt; 'voltService',\n            ]\n        );\n\n        return $view;\n    }\n);\n</code></pre> <p>Use the standard <code>.phtml</code> extension:</p> <pre><code>&lt;?php\n\n$view-&gt;registerEngines(\n    [\n        '.phtml' =&gt; 'voltService',\n    ]\n);\n</code></pre> <p>You don't have to specify the Volt Service in the DI; you can also use the Volt engine with the default settings:</p> <p><pre><code>&lt;?php\n\n$view-&gt;registerEngines(\n    [\n        '.volt' =&gt; Phalcon\\Mvc\\View\\Engine\\Volt::class,\n    ]\n);\n</code></pre> ` If you do not want to reuse Volt as a service, you can pass an anonymous function to register the engine instead of a service name:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\View\\Engine\\Volt;\n\n// Register Volt as template engine with an anonymous function\n$di-&gt;set(\n    'view',\n    function () {\n        $view = new View();\n\n        $view-&gt;setViewsDir('../app/views/');\n\n        $view-&gt;registerEngines(\n            [\n                '.volt' =&gt; function ($view, $di) {\n                    $volt = new Volt($view, $di);\n\n                    // Set some options here\n\n                    return $volt;\n                }\n            ]\n        );\n\n        return $view;\n    }\n);\n</code></pre> <p>The following options are available in Volt:</p> Option Description Default <code>autoescape</code> Enables globally autoescape of HTML <code>false</code> <code>compileAlways</code> Tell Volt if the templates must be compiled in each request or only when they change <code>false</code> <code>compiledExtension</code> An additional extension appended to the compiled PHP file <code>.php</code> <code>compiledPath</code> A writable path where the compiled PHP templates will be placed <code>./</code> <code>compiledSeparator</code> Volt replaces the directory separators / and \\ by this separator in order to create a single file in the compiled directory <code>%%</code> <code>prefix</code> Allows to prepend a prefix to the templates in the compilation path <code>null</code> <code>stat</code> Whether Phalcon must check if exists differences between the template file and its compiled path <code>true</code> <p>The compilation path is generated according to the above options, if the developer wants total freedom defining the compilation path, an anonymous function can be used to generate it, this function receives the relative path to the template in the views directory. The following examples show how to change the compilation path dynamically:</p> <pre><code>&lt;?php\n\n// Just append the .php extension to the template path\n// leaving the compiled templates in the same directory\n$volt-&gt;setOptions(\n    [\n        'compiledPath' =&gt; function ($templatePath) {\n            return $templatePath . '.php';\n        }\n    ]\n);\n\n// Recursively create the same structure in another directory\n$volt-&gt;setOptions(\n    [\n        'compiledPath' =&gt; function ($templatePath) {\n            $dirName = dirname($templatePath);\n\n            if (!is_dir('cache/' . $dirName)) {\n                mkdir('cache/' . $dirName , 0777 , true);\n            }\n\n            return 'cache/' . $dirName . '/'. $templatePath . '.php';\n        }\n    ]\n);\n</code></pre>"},{"location":"volt/#basic-usage","title":"Basic Usage","text":"<p>A view consists of Volt code, PHP and HTML. A set of special delimiters is available to enter into Volt mode. <code>{% raw %}{% ... %}{% endraw %}</code> is used to execute statements such as for-loops or assign values and <code>{% raw %}{{ ... }}{% endraw %}</code>, prints the result of an expression to the template.</p> <p>Below is a minimal template that illustrates a few basics:</p> <pre><code>{% raw %}\n{# app/views/posts/show.phtml #}\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;{{ title }} - An example blog&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        {% if show_navigation %}\n            &lt;ul id='navigation'&gt;\n                {% for item in menu %}\n                    &lt;li&gt;\n                        &lt;a href='{{ item.href }}'&gt;\n                            {{ item.caption }}\n                        &lt;/a&gt;\n                    &lt;/li&gt;\n                {% endfor %}\n            &lt;/ul&gt;\n        {% endif %}\n\n        &lt;h1&gt;{{ post.title }}&lt;/h1&gt;\n\n        &lt;div class='content'&gt;\n            {{ post.content }}\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n{% endraw %}\n</code></pre> <p>Using Phalcon\\Mvc\\View you can pass variables from the controller to the views. In the above example, four variables were passed to the view: <code>show_navigation</code>, <code>menu</code>, <code>title</code> and <code>post</code>:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function showAction()\n    {\n        $post = Post::findFirst();\n        $menu = Menu::findFirst();\n\n        $this-&gt;view-&gt;show_navigation = true;\n        $this-&gt;view-&gt;menu            = $menu;\n        $this-&gt;view-&gt;title           = $post-&gt;title;\n        $this-&gt;view-&gt;post            = $post;\n\n        // Or...\n\n        $this-&gt;view-&gt;setVar('show_navigation', true);\n        $this-&gt;view-&gt;setVar('menu',            $menu);\n        $this-&gt;view-&gt;setVar('title',           $post-&gt;title);\n        $this-&gt;view-&gt;setVar('post',            $post);\n    }\n}\n</code></pre>"},{"location":"volt/#variables","title":"Variables","text":"<p>Object variables may have attributes which can be accessed using the syntax: <code>foo.bar</code>. If you are passing arrays, you have to use the square bracket syntax: <code>foo['bar']</code></p> <pre><code>{% raw %}\n{{ post.title }} {# for $post-&gt;title #}\n{{ post['title'] }} {# for $post['title'] #}\n{% endraw %}\n</code></pre>"},{"location":"volt/#filters","title":"Filters","text":"<p>Variables can be formatted or modified using filters. The pipe operator <code>|</code> is used to apply filters to variables:</p> <pre><code>{% raw %}\n{{ post.title|e }}\n{{ post.content|striptags }}\n{{ name|capitalize|trim }}\n{% endraw %}\n</code></pre> <p>The following is the list of available built-in filters in Volt:</p> Filter Description <code>abs</code> Applies the abs PHP function to a value. <code>capitalize</code> Capitalizes a string by applying the ucwords PHP function to the value <code>convert_encoding</code> Converts a string from one charset to another <code>default</code> Sets a default value in case that the evaluated expression is empty (is not set or evaluates to a falsy value) <code>e</code> Applies <code>Phalcon\\Escaper-&gt;escapeHtml()</code> to the value <code>escape</code> Applies <code>Phalcon\\Escaper-&gt;escapeHtml()</code> to the value <code>escape_attr</code> Applies <code>Phalcon\\Escaper-&gt;escapeHtmlAttr()</code> to the value <code>escape_css</code> Applies <code>Phalcon\\Escaper-&gt;escapeCss()</code> to the value <code>escape_js</code> Applies <code>Phalcon\\Escaper-&gt;escapeJs()</code> to the value <code>format</code> Formats a string using sprintf. <code>json_encode</code> Converts a value into its JSON representation <code>json_decode</code> Converts a value from its JSON representation to a PHP representation <code>join</code> Joins the array parts using a separator join <code>keys</code> Returns the array keys using array_keys <code>left_trim</code> Applies the ltrim PHP function to the value. Removing extra spaces <code>length</code> Counts the string length or how many items are in an array or object <code>lower</code> Change the case of a string to lowercase <code>nl2br</code> Changes newlines <code>\\n</code> by line breaks (<code>&lt;br /&gt;</code>). Uses the PHP function nl2br <code>right_trim</code> Applies the rtrim PHP function to the value. Removing extra spaces <code>sort</code> Sorts an array using the PHP function asort <code>stripslashes</code> Applies the stripslashes PHP function to the value. Removing escaped quotes <code>striptags</code> Applies the striptags PHP function to the value. Removing HTML tags <code>trim</code> Applies the trim PHP function to the value. Removing extra spaces <code>upper</code> Change the case of a string to uppercase <code>url_encode</code> Applies the urlencode PHP function to the value <p>Examples:</p> <pre><code>{% raw %}\n{# e or escape filter #}\n{{ '&lt;h1&gt;Hello&lt;h1&gt;'|e }}\n{{ '&lt;h1&gt;Hello&lt;h1&gt;'|escape }}\n\n{# trim filter #}\n{{ '   hello   '|trim }}\n\n{# striptags filter #}\n{{ '&lt;h1&gt;Hello&lt;h1&gt;'|striptags }}\n\n{# slashes filter #}\n{{ ''this is a string''|slashes }}\n\n{# stripslashes filter #}\n{{ '\\'this is a string\\''|stripslashes }}\n\n{# capitalize filter #}\n{{ 'hello'|capitalize }}\n\n{# lower filter #}\n{{ 'HELLO'|lower }}\n\n{# upper filter #}\n{{ 'hello'|upper }}\n\n{# length filter #}\n{{ 'robots'|length }}\n{{ [1, 2, 3]|length }}\n\n{# nl2br filter #}\n{{ 'some\\ntext'|nl2br }}\n\n{# sort filter #}\n{% set sorted = [3, 1, 2]|sort %}\n\n{# keys filter #}\n{% set keys = ['first': 1, 'second': 2, 'third': 3]|keys %}\n\n{# join filter #}\n{% set joined = 'a'..'z'|join(',') %}\n\n{# format filter #}\n{{ 'My real name is %s'|format(name) }}\n\n{# json_encode filter #}\n{% set encoded = robots|json_encode %}\n\n{# json_decode filter #}\n{% set decoded = '{'one':1,'two':2,'three':3}'|json_decode %}\n\n{# url_encode filter #}\n{{ post.permanent_link|url_encode }}\n\n{# convert_encoding filter #}\n{{ 'd\u00e9sol\u00e9'|convert_encoding('utf8', 'latin1') }}\n{% endraw %}\n</code></pre>"},{"location":"volt/#comments","title":"Comments","text":"<p>Comments may also be added to a template using the <code>{% raw %}{# ... #}{% endraw %}</code> delimiters. All text inside them is just ignored in the final output:</p> <pre><code>{% raw %}\n{# note: this is a comment\n    {% set price = 100; %}\n#}\n{% endraw %}\n</code></pre>"},{"location":"volt/#list-of-control-structures","title":"List of Control Structures","text":"<p>Volt provides a set of basic but powerful control structures for use in templates:</p>"},{"location":"volt/#for","title":"For","text":"<p>Loop over each item in a sequence. The following example shows how to traverse a set of 'robots' and print his/her name:</p> <pre><code>{% raw %}\n&lt;h1&gt;Robots&lt;/h1&gt;\n&lt;ul&gt;\n    {% for robot in robots %}\n        &lt;li&gt;\n            {{ robot.name|e }}\n        &lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n{% endraw %}\n</code></pre> <p>for-loops can also be nested:</p> <pre><code>{% raw %}\n&lt;h1&gt;Robots&lt;/h1&gt;\n{% for robot in robots %}\n    {% for part in robot.parts %}\n        Robot: {{ robot.name|e }} Part: {{ part.name|e }} &lt;br /&gt;\n    {% endfor %}\n{% endfor %}\n{% endraw %}\n</code></pre> <p>You can get the element <code>keys</code> as in the PHP counterpart using the following syntax:</p> <pre><code>{% raw %}\n{% set numbers = ['one': 1, 'two': 2, 'three': 3] %}\n\n{% for name, value in numbers %}\n    Name: {{ name }} Value: {{ value }}\n{% endfor %}\n{% endraw %}\n</code></pre> <p>An <code>if</code> evaluation can be optionally set:</p> <pre><code>{% raw %}\n{% set numbers = ['one': 1, 'two': 2, 'three': 3] %}\n\n{% for value in numbers if value &lt; 2 %}\n    Value: {{ value }}\n{% endfor %}\n\n{% for name, value in numbers if name !== 'two' %}\n    Name: {{ name }} Value: {{ value }}\n{% endfor %}\n{% endraw %}\n</code></pre> <p>If an <code>else</code> is defined inside the <code>for</code>, it will be executed if the expression in the iterator result in zero iterations:</p> <pre><code>{% raw %}\n&lt;h1&gt;Robots&lt;/h1&gt;\n{% for robot in robots %}\n    Robot: {{ robot.name|e }} Part: {{ part.name|e }} &lt;br /&gt;\n{% else %}\n    There are no robots to show\n{% endfor %}\n{% endraw %}\n</code></pre> <p>Alternative syntax:</p> <pre><code>{% raw %}\n&lt;h1&gt;Robots&lt;/h1&gt;\n{% for robot in robots %}\n    Robot: {{ robot.name|e }} Part: {{ part.name|e }} &lt;br /&gt;\n{% elsefor %}\n    There are no robots to show\n{% endfor %}\n{% endraw %}\n</code></pre>"},{"location":"volt/#loop-controls","title":"Loop Controls","text":"<p>The <code>break</code> and <code>continue</code> statements can be used to exit from a loop or force an iteration in the current block:</p> <pre><code>{% raw %}\n{# skip the even robots #}\n{% for index, robot in robots %}\n    {% if index is even %}\n        {% continue %}\n    {% endif %}\n    ...\n{% endfor %}\n{% endraw %}\n</code></pre> <pre><code>{% raw %}\n{# exit the foreach on the first even robot #}\n{% for index, robot in robots %}\n    {% if index is even %}\n        {% break %}\n    {% endif %}\n    ...\n{% endfor %}\n{% endraw %}\n</code></pre>"},{"location":"volt/#if","title":"If","text":"<p>As PHP, an <code>if</code> statement checks if an expression is evaluated as true or false:</p> <pre><code>{% raw %}\n&lt;h1&gt;Cyborg Robots&lt;/h1&gt;\n&lt;ul&gt;\n    {% for robot in robots %}\n        {% if robot.type === 'cyborg' %}\n            &lt;li&gt;{{ robot.name|e }}&lt;/li&gt;\n        {% endif %}\n    {% endfor %}\n&lt;/ul&gt;\n{% endraw %}\n</code></pre> <p>The else clause is also supported:</p> <pre><code>{% raw %}\n&lt;h1&gt;Robots&lt;/h1&gt;\n&lt;ul&gt;\n    {% for robot in robots %}\n        {% if robot.type === 'cyborg' %}\n            &lt;li&gt;{{ robot.name|e }}&lt;/li&gt;\n        {% else %}\n            &lt;li&gt;{{ robot.name|e }} (not a cyborg)&lt;/li&gt;\n        {% endif %}\n    {% endfor %}\n&lt;/ul&gt;\n{% endraw %}\n</code></pre> <p>The <code>elseif</code> control flow structure can be used together with if to emulate a <code>switch</code> block:</p> <pre><code>{% raw %}\n{% if robot.type === 'cyborg' %}\n    Robot is a cyborg\n{% elseif robot.type === 'virtual' %}\n    Robot is virtual\n{% elseif robot.type === 'mechanical' %}\n    Robot is mechanical\n{% endif %}\n{% endraw %}\n</code></pre>"},{"location":"volt/#switch","title":"Switch","text":"<p>An alternative to the <code>if</code> statement is <code>switch</code>, allowing you to create logical execution paths in your application:</p> <pre><code>{% raw %}\n{% switch foo %}\n    {% case 0 %}\n    {% case 1 %}\n    {% case 2 %}\n        \"foo\" is less than 3 but not negative\n        {% break %}\n    {% case 3 %}\n        \"foo\" is 3\n        {% break %}\n    {% default %}\n        \"foo\" is {{ foo }}\n{% endswitch %}\n{% endraw %}\n</code></pre> <p>The <code>switch</code> statement executes statement by statement, therefore the <code>break</code> statement is necessary in some cases. Any output (including whitespace) between a switch statement and the first <code>case</code> will result in a syntax error. Empty lines and whitespaces can therefore be cleared to reduce the number of errors see here.</p>"},{"location":"volt/#case-without-switch","title":"<code>case</code> without <code>switch</code>","text":"<p><pre><code>{% raw %}\n{% case EXPRESSION %}\n{% endraw %}\n</code></pre> Will throw <code>Fatal error: Uncaught Phalcon\\Mvc\\View\\Exception: Unexpected CASE</code>.</p>"},{"location":"volt/#switch-without-endswitch","title":"<code>switch</code> without <code>endswitch</code>","text":"<pre><code>{% raw %}\n{% switch EXPRESSION %}\n{% endraw %}\nWill throw `Fatal error: Uncaught Phalcon\\Mvc\\View\\Exception: Syntax error, unexpected EOF in ..., there is a 'switch' block without 'endswitch'`.\n</code></pre>"},{"location":"volt/#default-without-switch","title":"<code>default</code> without <code>switch</code>","text":"<p><pre><code>{% raw %}\n{% default %}\n{% endraw %}\n</code></pre> Will not throw an error because <code>default</code> is a reserved word for filters like <code>{% raw %}{{ EXPRESSION | default(VALUE) }}{% endraw %}</code> but in this case the expression will only output an empty char '' .</p>"},{"location":"volt/#nested-switch","title":"nested <code>switch</code>","text":"<pre><code>{% raw %}\n{% switch EXPRESSION %}\n  {% switch EXPRESSION %}\n  {% endswitch %}\n{% endswitch %}\n{% endraw %}\n</code></pre> <p>Will throw <code>Fatal error: Uncaught Phalcon\\Mvc\\View\\Exception: A nested switch detected. There is no nested switch-case statements support in ... on line ...</code></p>"},{"location":"volt/#a-switch-without-an-expression","title":"a <code>switch</code> without an expression","text":"<pre><code>{% raw %}\n{% switch %}\n  {% case EXPRESSION %}\n      {% break %}\n{% endswitch %}\n{% endraw %}\n</code></pre> <p>Will throw <code>Fatal error: Uncaught Phalcon\\Mvc\\View\\Exception: Syntax error, unexpected token {% raw %}%}{% endraw %} in ... on line ...</code></p>"},{"location":"volt/#loop-context","title":"Loop Context","text":"<p>A special variable is available inside <code>for</code> loops providing you information about</p> Variable Description <code>loop.index</code> The current iteration of the loop. (1 indexed) <code>loop.index0</code> The current iteration of the loop. (0 indexed) <code>loop.revindex</code> The number of iterations from the end of the loop (1 indexed) <code>loop.revindex0</code> The number of iterations from the end of the loop (0 indexed) <code>loop.first</code> True if in the first iteration. <code>loop.last</code> True if in the last iteration. <code>loop.length</code> The number of items to iterate <p>Example: </p> <pre><code>{% raw %}\n{% for robot in robots %}\n    {% if loop.first %}\n        &lt;table&gt;\n            &lt;tr&gt;\n                &lt;th&gt;#&lt;/th&gt;\n                &lt;th&gt;Id&lt;/th&gt;\n                &lt;th&gt;Name&lt;/th&gt;\n            &lt;/tr&gt;\n    {% endif %}\n            &lt;tr&gt;\n                &lt;td&gt;{{ loop.index }}&lt;/td&gt;\n                &lt;td&gt;{{ robot.id }}&lt;/td&gt;\n                &lt;td&gt;{{ robot.name }}&lt;/td&gt;\n            &lt;/tr&gt;\n    {% if loop.last %}\n        &lt;/table&gt;\n    {% endif %}\n{% endfor %}\n{% endraw %}\n</code></pre>"},{"location":"volt/#assignments","title":"Assignments","text":"<p>Variables may be changed in a template using the instruction <code>set</code>:</p> <pre><code>{% raw %}\n{% set fruits = ['Apple', 'Banana', 'Orange'] %}\n\n{% set name = robot.name %}\n{% endraw %}\n</code></pre> <p>Multiple assignments are allowed in the same instruction:</p> <pre><code>{% raw %}\n{% set fruits = ['Apple', 'Banana', 'Orange'], name = robot.name, active = true %}\n{% endraw %}\n</code></pre> <p>Additionally, you can use compound assignment operators:</p> <pre><code>{% raw %}\n{% set price += 100.00 %}\n\n{% set age *= 5 %}\n{% endraw %}\n</code></pre> <p>The following operators are available:</p> Operator Description <code>=</code> Standard Assignment <code>+=</code> Addition assignment <code>-=</code> Subtraction assignment <code>\\*=</code> Multiplication assignment <code>/=</code> Division assignment"},{"location":"volt/#expressions","title":"Expressions","text":"<p>Volt provides a basic set of expression support, including literals and common operators. A expression can be evaluated and printed using the <code>{% raw %}{{{% endraw %}</code> and <code>{% raw %}}}{% endraw %}</code> delimiters:</p> <pre><code>{% raw %}\n{{ (1 + 1) * 2 }}\n{% endraw %}\n</code></pre> <p>If an expression needs to be evaluated without be printed the <code>do</code> statement can be used:</p> <pre><code>{% raw %}\n{% do (1 + 1) * 2 %}\n{% endraw %}\n</code></pre>"},{"location":"volt/#literals","title":"Literals","text":"<p>The following literals are supported:</p> Filter Description <code>'this is a string'</code> Text between double quotes or single quotes are handled as strings <code>100.25</code> Numbers with a decimal part are handled as doubles/floats <code>100</code> Numbers without a decimal part are handled as integers <code>false</code> Constant 'false' is the boolean false value <code>true</code> Constant 'true' is the boolean true value <code>null</code> Constant 'null' is the Null value"},{"location":"volt/#arrays","title":"Arrays","text":"<p>Whether you're using PHP 5.3 or &gt;= 5.4 you can create arrays by enclosing a list of values in square brackets:</p> <pre><code>{% raw %}\n{# Simple array #}\n{{ ['Apple', 'Banana', 'Orange'] }}\n\n{# Other simple array #}\n{{ ['Apple', 1, 2.5, false, null] }}\n\n{# Multi-Dimensional array #}\n{{ [[1, 2], [3, 4], [5, 6]] }}\n\n{# Hash-style array #}\n{{ ['first': 1, 'second': 4/2, 'third': '3'] }}\n{% endraw %}\n</code></pre> <p>Curly braces also can be used to define arrays or hashes:</p> <pre><code>{% raw %}\n{% set myArray = {'Apple', 'Banana', 'Orange'} %}\n{% set myHash  = {'first': 1, 'second': 4/2, 'third': '3'} %}\n{% endraw %}\n</code></pre>"},{"location":"volt/#math","title":"Math","text":"<p>You may make calculations in templates using the following operators:</p> Operator Description <code>+</code> Perform an adding operation. <code>{% raw %}{{ 2 + 3 }}{% endraw %}</code> returns 5 <code>-</code> Perform a substraction operation <code>{% raw %}{{ 2 - 3 }}{% endraw %}</code> returns -1 <code>*</code> Perform a multiplication operation <code>{% raw %}{{ 2 * 3 }}{% endraw %}</code> returns 6 <code>/</code> Perform a division operation <code>{% raw %}{{ 10 / 2 }}{% endraw %}</code> returns 5 <code>%</code> Calculate the remainder of an integer division <code>{% raw %}{{ 10 % 3 }}{% endraw %}</code> returns 1"},{"location":"volt/#comparisons","title":"Comparisons","text":"<p>The following comparison operators are available:</p> Operator Description <code>==</code> Check whether both operands are equal <code>!=</code> Check whether both operands aren't equal <code>&lt;&gt;</code> Check whether both operands aren't equal <code>&gt;</code> Check whether left operand is greater than right operand <code>&lt;</code> Check whether left operand is less than right operand <code>&lt;=</code> Check whether left operand is less or equal than right operand <code>&gt;=</code> Check whether left operand is greater or equal than right operand <code>===</code> Check whether both operands are identical <code>!==</code> Check whether both operands aren't identical"},{"location":"volt/#logic","title":"Logic","text":"<p>Logic operators are useful in the <code>if</code> expression evaluation to combine multiple tests:</p> Operator Description <code>or</code> Return true if the left or right operand is evaluated as true <code>and</code> Return true if both left and right operands are evaluated as true <code>not</code> Negates an expression <code>( expr )</code> Parenthesis groups expressions"},{"location":"volt/#other-operators","title":"Other Operators","text":"<p>Additional operators seen the following operators are available:</p> Operator Description <code>~</code> Concatenates both operands <code>{% raw %}{{ 'hello ' ~ 'world' }}{% endraw %}</code> <code>|</code> Applies a filter in the right operand to the left <code>{% raw %}{{ 'hello'|uppercase }}{% endraw %}</code> <code>..</code> Creates a range <code>{% raw %}{{ 'a'..'z' }}{% endraw %}</code> <code>{% raw %}{{ 1..10 }}{% endraw %}</code> <code>is</code> Same as == (equals), also performs tests <code>in</code> To check if an expression is contained into other expressions <code>if 'a' in 'abc'</code> <code>is not</code> Same as != (not equals) <code>'a' ? 'b' : 'c'</code> Ternary operator. The same as the PHP ternary operator <code>++</code> Increments a value <code>--</code> Decrements a value <p>The following example shows how to use operators:</p> <pre><code>{% raw %}\n{% set robots = ['Voltron', 'Astro Boy', 'Terminator', 'C3PO'] %}\n\n{% for index in 0..robots|length %}\n    {% if robots[index] is defined %}\n        {{ 'Name: ' ~ robots[index] }}\n    {% endif %}\n{% endfor %}\n{% endraw %}\n</code></pre>"},{"location":"volt/#tests","title":"Tests","text":"<p>Tests can be used to test if a variable has a valid expected value. The operator <code>is</code> is used to perform the tests:</p> <pre><code>{% raw %}\n{% set robots = ['1': 'Voltron', '2': 'Astro Boy', '3': 'Terminator', '4': 'C3PO'] %}\n\n{% for position, name in robots %}\n    {% if position is odd %}\n        {{ name }}\n    {% endif %}\n{% endfor %}\n{% endraw %}\n</code></pre> <p>The following built-in tests are available in Volt:</p> Test Description <code>defined</code> Checks if a variable is defined (<code>isset()</code>) <code>divisibleby</code> Checks if a value is divisible by other value <code>empty</code> Checks if a variable is empty <code>even</code> Checks if a numeric value is even <code>iterable</code> Checks if a value is iterable. Can be traversed by a 'for' statement <code>numeric</code> Checks if value is numeric <code>odd</code> Checks if a numeric value is odd <code>sameas</code> Checks if a value is identical to other value <code>scalar</code> Checks if value is scalar (not an array or object) <code>type</code> Checks if a value is of the specified type <p>More examples:</p> <pre><code>{% raw %}\n{% if robot is defined %}\n    The robot variable is defined\n{% endif %}\n\n{% if robot is empty %}\n    The robot is null or isn't defined\n{% endif %}\n\n{% for key, name in [1: 'Voltron', 2: 'Astroy Boy', 3: 'Bender'] %}\n    {% if key is even %}\n        {{ name }}\n    {% endif %}\n{% endfor %}\n\n{% for key, name in [1: 'Voltron', 2: 'Astroy Boy', 3: 'Bender'] %}\n    {% if key is odd %}\n        {{ name }}\n    {% endif %}\n{% endfor %}\n\n{% for key, name in [1: 'Voltron', 2: 'Astroy Boy', 'third': 'Bender'] %}\n    {% if key is numeric %}\n        {{ name }}\n    {% endif %}\n{% endfor %}\n\n{% set robots = [1: 'Voltron', 2: 'Astroy Boy'] %}\n{% if robots is iterable %}\n    {% for robot in robots %}\n        ...\n    {% endfor %}\n{% endif %}\n\n{% set world = 'hello' %}\n{% if world is sameas('hello') %}\n    {{ 'it's hello' }}\n{% endif %}\n\n{% set external = false %}\n{% if external is type('boolean') %}\n    {{ 'external is false or true' }}\n{% endif %}\n{% endraw %}\n</code></pre>"},{"location":"volt/#macros","title":"Macros","text":"<p>Macros can be used to reuse logic in a template, they act as PHP functions, can receive parameters and return values:</p> <pre><code>{% raw %}\n{# Macro 'display a list of links to related topics' #}\n{%- macro related_bar(related_links) %}\n    &lt;ul&gt;\n        {%- for link in related_links %}\n            &lt;li&gt;\n                &lt;a href='{{ url(link.url) }}' title='{{ link.title|striptags }}'&gt;\n                    {{ link.text }}\n                &lt;/a&gt;\n            &lt;/li&gt;\n        {%- endfor %}\n    &lt;/ul&gt;\n{%- endmacro %}\n\n{# Print related links #}\n{{ related_bar(links) }}\n\n&lt;div&gt;This is the content&lt;/div&gt;\n\n{# Print related links again #}\n{{ related_bar(links) }}\n{% endraw %}\n</code></pre> <p>When calling macros, parameters can be passed by name:</p> <pre><code>{% raw %}\n{%- macro error_messages(message, field, type) %}\n    &lt;div&gt;\n        &lt;span class='error-type'&gt;{{ type }}&lt;/span&gt;\n        &lt;span class='error-field'&gt;{{ field }}&lt;/span&gt;\n        &lt;span class='error-message'&gt;{{ message }}&lt;/span&gt;\n    &lt;/div&gt;\n{%- endmacro %}\n\n{# Call the macro #}\n{{ error_messages('type': 'Invalid', 'message': 'The name is invalid', 'field': 'name') }}\n{% endraw %}\n</code></pre> <p>Macros can return values:</p> <pre><code>{% raw %}\n{%- macro my_input(name, class) %}\n    {% return text_field(name, 'class': class) %}\n{%- endmacro %}\n\n{# Call the macro #}\n{{ '&lt;p&gt;' ~ my_input('name', 'input-text') ~ '&lt;/p&gt;' }}\n{% endraw %}\n</code></pre> <p>And receive optional parameters:</p> <pre><code>{% raw %}\n{%- macro my_input(name, class='input-text') %}\n    {% return text_field(name, 'class': class) %}\n{%- endmacro %}\n\n{# Call the macro #}\n{{ '&lt;p&gt;' ~ my_input('name') ~ '&lt;/p&gt;' }}\n{{ '&lt;p&gt;' ~ my_input('name', 'input-text') ~ '&lt;/p&gt;' }}\n{% endraw %}\n</code></pre>"},{"location":"volt/#using-tag-helpers","title":"Using Tag Helpers","text":"<p>Volt is highly integrated with Phalcon\\Tag, so it's easy to use the helpers provided by that component in a Volt template:</p> <pre><code>{% raw %}\n{{ javascript_include('js/jquery.js') }}\n\n{{ form('products/save', 'method': 'post') }}\n\n    &lt;label for='name'&gt;Name&lt;/label&gt;\n    {{ text_field('name', 'size': 32) }}\n\n    &lt;label for='type'&gt;Type&lt;/label&gt;\n    {{ select('type', productTypes, 'using': ['id', 'name']) }}\n\n    {{ submit_button('Send') }}\n\n{{ end_form() }}\n{% endraw %}\n</code></pre> <p>The following PHP is generated:</p> <pre><code>&lt;?php echo Phalcon\\Tag::javascriptInclude('js/jquery.js') ?&gt;\n\n&lt;?php echo Phalcon\\Tag::form(array('products/save', 'method' =&gt; 'post')); ?&gt;\n\n    &lt;label for='name'&gt;Name&lt;/label&gt;\n    &lt;?php echo Phalcon\\Tag::textField(array('name', 'size' =&gt; 32)); ?&gt;\n\n    &lt;label for='type'&gt;Type&lt;/label&gt;\n    &lt;?php echo Phalcon\\Tag::select(array('type', $productTypes, 'using' =&gt; array('id', 'name'))); ?&gt;\n\n    &lt;?php echo Phalcon\\Tag::submitButton('Send'); ?&gt;\n\n{% raw %}\n{{ end_form() }}\n{% endraw %}\n</code></pre> <p>To call a Phalcon\\Tag helper, you only need to call an uncamelized version of the method:</p> Method Volt function <code>Phalcon\\Tag::checkField</code> <code>check_field</code> <code>Phalcon\\Tag::dateField</code> <code>date_field</code> <code>Phalcon\\Tag::emailField</code> <code>email_field</code> <code>Phalcon\\Tag::endForm</code> <code>end_form</code> <code>Phalcon\\Tag::fileField</code> <code>file_field</code> <code>Phalcon\\Tag::form</code> <code>form</code> <code>Phalcon\\Tag::friendlyTitle</code> <code>friendly_title</code> <code>Phalcon\\Tag::getTitle</code> <code>get_title</code> <code>Phalcon\\Tag::hiddenField</code> <code>hidden_field</code> <code>Phalcon\\Tag::image</code> <code>image</code> <code>Phalcon\\Tag::javascriptInclude</code> <code>javascript_include</code> <code>Phalcon\\Tag::linkTo</code> <code>link_to</code> <code>Phalcon\\Tag::numericField</code> <code>numeric_field</code> <code>Phalcon\\Tag::passwordField</code> <code>password_field</code> <code>Phalcon\\Tag::radioField</code> <code>radio_field</code> <code>Phalcon\\Tag::select</code> <code>select</code> <code>Phalcon\\Tag::selectStatic</code> <code>select_static</code> <code>Phalcon\\Tag::stylesheetLink</code> <code>stylesheet_link</code> <code>Phalcon\\Tag::submitButton</code> <code>submit_button</code> <code>Phalcon\\Tag::textArea</code> <code>text_area</code> <code>Phalcon\\Tag::textField</code> <code>text_field</code>"},{"location":"volt/#functions","title":"Functions","text":"<p>The following built-in functions are available in Volt:</p> Name Description <code>content</code> Includes the content produced in a previous rendering stage <code>get_content</code> Same as <code>content</code> <code>partial</code> Dynamically loads a partial view in the current template <code>super</code> Render the contents of the parent block <code>time</code> Calls the PHP function with the same name <code>date</code> Calls the PHP function with the same name <code>dump</code> Calls the PHP function <code>var_dump()</code> <code>version</code> Returns the current version of the framework <code>constant</code> Reads a PHP constant <code>url</code> Generate a URL using the 'url' service"},{"location":"volt/#view-integration","title":"View Integration","text":"<p>Also, Volt is integrated with Phalcon\\Mvc\\View, you can play with the view hierarchy and include partials as well:</p> <pre><code>{% raw %}\n{{ content() }}\n\n&lt;!-- Simple include of a partial --&gt;\n&lt;div id='footer'&gt;{{ partial('partials/footer') }}&lt;/div&gt;\n\n&lt;!-- Passing extra variables --&gt;\n&lt;div id='footer'&gt;{{ partial('partials/footer', ['links': links]) }}&lt;/div&gt;\n{% endraw %}\n</code></pre> <p>A partial is included in runtime, Volt also provides <code>include</code>, this compiles the content of a view and returns its contents as part of the view which was included:</p> <pre><code>{% raw %}\n{# Simple include of a partial #}\n&lt;div id='footer'&gt;\n    {% include 'partials/footer' %}\n&lt;/div&gt;\n\n{# Passing extra variables #}\n&lt;div id='footer'&gt;\n    {% include 'partials/footer' with ['links': links] %}\n&lt;/div&gt;\n{% endraw %}\n</code></pre>"},{"location":"volt/#include","title":"Include","text":"<p><code>include</code> has a special behavior that will help us improve performance a bit when using Volt, if you specify the extension when including the file and it exists when the template is compiled, Volt can inline the contents of the template in the parent template where it's included. Templates aren't inlined if the <code>include</code> have variables passed with <code>with</code>:</p> <pre><code>{% raw %}\n{# The contents of 'partials/footer.volt' is compiled and inlined #}\n&lt;div id='footer'&gt;\n    {% include 'partials/footer.volt' %}\n&lt;/div&gt;\n{% endraw %}\n</code></pre>"},{"location":"volt/#partial-vs-include","title":"Partial vs Include","text":"<p>Keep the following points in mind when choosing to use the <code>partial</code> function or <code>include</code>:</p> Type Description <code>partial</code> allows you to include templates made in Volt and in other template engines as well allows you to pass an expression like a variable allowing to include the content of other view dynamically is better if the content that you have to include changes frequently <code>includes</code> copies the compiled content into the view which improves the performance only allows to include templates made with Volt requires an existing template at compile time"},{"location":"volt/#template-inheritance","title":"Template Inheritance","text":"<p>With template inheritance you can create base templates that can be extended by others templates allowing to reuse code. A base template define blocks than can be overridden by a child template. Let's pretend that we have the following base template:</p> <pre><code>{% raw %}\n{# templates/base.volt #}\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        {% block head %}\n            &lt;link rel='stylesheet' href='style.css' /&gt;\n        {% endblock %}\n\n        &lt;title&gt;{% block title %}{% endblock %} - My Webpage&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id='content'&gt;{% block content %}{% endblock %}&lt;/div&gt;\n\n        &lt;div id='footer'&gt;\n            {% block footer %}&amp;copy; Copyright 2015, All rights reserved.{% endblock %}\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n{% endraw %}\n</code></pre> <p>From other template we could extend the base template replacing the blocks:</p> <pre><code>{% raw %}\n{% extends 'templates/base.volt' %}\n\n{% block title %}Index{% endblock %}\n\n{% block head %}&lt;style type='text/css'&gt;.important { color: #336699; }&lt;/style&gt;{% endblock %}\n\n{% block content %}\n    &lt;h1&gt;Index&lt;/h1&gt;\n    &lt;p class='important'&gt;Welcome on my awesome homepage.&lt;/p&gt;\n{% endblock %}\n{% endraw %}\n</code></pre> <p>Not all blocks must be replaced at a child template, only those that are needed. The final output produced will be the following:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;style type='text/css'&gt;.important { color: #336699; }&lt;/style&gt;\n\n        &lt;title&gt;Index - My Webpage&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id='content'&gt;\n            &lt;h1&gt;Index&lt;/h1&gt;\n            &lt;p class='important'&gt;Welcome on my awesome homepage.&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;div id='footer'&gt;\n            &amp;copy; Copyright 2015, All rights reserved.\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"volt/#multiple-inheritance","title":"Multiple Inheritance","text":"<p>Extended templates can extend other templates. The following example illustrates this:</p> <pre><code>{% raw %}\n{# main.volt #}\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Title&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        {% block content %}{% endblock %}\n    &lt;/body&gt;\n&lt;/html&gt;\n{% endraw %}\n</code></pre> <p>Template <code>layout.volt</code> extends <code>main.volt</code></p> <pre><code>{% raw %}\n{# layout.volt #}\n{% extends 'main.volt' %}\n\n{% block content %}\n\n    &lt;h1&gt;Table of contents&lt;/h1&gt;\n\n{% endblock %}\n{% endraw %}\n</code></pre> <p>Finally a view that extends <code>layout.volt</code>:</p> <pre><code>{% raw %}\n{# index.volt #}\n{% extends 'layout.volt' %}\n\n{% block content %}\n\n    {{ super() }}\n\n    &lt;ul&gt;\n        &lt;li&gt;Some option&lt;/li&gt;\n        &lt;li&gt;Some other option&lt;/li&gt;\n    &lt;/ul&gt;\n\n{% endblock %}\n{% endraw %}\n</code></pre> <p>Rendering <code>index.volt</code> produces:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Title&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;h1&gt;Table of contents&lt;/h1&gt;\n\n        &lt;ul&gt;\n            &lt;li&gt;Some option&lt;/li&gt;\n            &lt;li&gt;Some other option&lt;/li&gt;\n        &lt;/ul&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Note the call to the function <code>super()</code>. With that function it's possible to render the contents of the parent block. As partials, the path set to <code>extends</code> is a relative path under the current views directory (i.e. <code>app/views/</code>).</p> <p>NOTE</p> <p>By default, and for performance reasons, Volt only checks for changes in the children templates to know when to re-compile to plain PHP again, so it is recommended initialize Volt with the option <code>'compileAlways' =&gt; true</code>. Thus, the templates are compiled always taking into account changes in the parent templates. </p>"},{"location":"volt/#autoescape-mode","title":"Autoescape mode","text":"<p>You can enable auto-escaping of all variables printed in a block using the autoescape mode:</p> <pre><code>{% raw %}\nManually escaped: {{ robot.name|e }}\n\n{% autoescape true %}\n    Autoescaped: {{ robot.name }}\n    {% autoescape false %}\n        No Autoescaped: {{ robot.name }}\n    {% endautoescape %}\n{% endautoescape %}\n{% endraw %}\n</code></pre>"},{"location":"volt/#extending-volt","title":"Extending Volt","text":"<p>Unlike other template engines, Volt itself is not required to run the compiled templates. Once the templates are compiled there is no dependence on Volt. With performance independence in mind, Volt only acts as a compiler for PHP templates.</p> <p>The Volt compiler allow you to extend it adding more functions, tests or filters to the existing ones.</p>"},{"location":"volt/#functions_1","title":"Functions","text":"<p>Functions act as normal PHP functions, a valid string name is required as function name. Functions can be added using two strategies, returning a simple string or using an anonymous function. Always is required that the chosen strategy returns a valid PHP string expression:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View\\Engine\\Volt;\n\n$volt = new Volt($view, $di);\n\n$compiler = $volt-&gt;getCompiler();\n\n// This binds the function name 'shuffle' in Volt to the PHP function 'str_shuffle'\n$compiler-&gt;addFunction('shuffle', 'str_shuffle');\n</code></pre> <p>Register the function with an anonymous function. This case we use <code>$resolvedArgs</code> to pass the arguments exactly as were passed in the arguments:</p> <pre><code>&lt;?php\n\n$compiler-&gt;addFunction(\n    'widget',\n    function ($resolvedArgs, $exprArgs) {\n        return 'MyLibrary\\Widgets::get(' . $resolvedArgs . ')';\n    }\n);\n</code></pre> <p>Treat the arguments independently and unresolved:</p> <pre><code>&lt;?php\n\n$compiler-&gt;addFunction(\n    'repeat',\n    function ($resolvedArgs, $exprArgs) use ($compiler) {\n        // Resolve the first argument\n        $firstArgument = $compiler-&gt;expression($exprArgs[0]['expr']);\n\n        // Checks if the second argument was passed\n        if (isset($exprArgs[1])) {\n            $secondArgument = $compiler-&gt;expression($exprArgs[1]['expr']);\n        } else {\n            // Use '10' as default\n            $secondArgument = '10';\n        }\n\n        return 'str_repeat(' . $firstArgument . ', ' . $secondArgument . ')';\n    }\n);\n</code></pre> <p>Generate the code based on some function availability:</p> <pre><code>&lt;?php\n\n$compiler-&gt;addFunction(\n    'contains_text',\n    function ($resolvedArgs, $exprArgs) {\n        if (function_exists('mb_stripos')) {\n            return 'mb_stripos(' . $resolvedArgs . ')';\n        } else {\n            return 'stripos(' . $resolvedArgs . ')';\n        }\n    }\n);\n</code></pre> <p>Built-in functions can be overridden adding a function with its name:</p> <pre><code>&lt;?php\n\n// Replace built-in function dump\n$compiler-&gt;addFunction('dump', 'print_r');\n</code></pre>"},{"location":"volt/#filters_1","title":"Filters","text":"<p>A filter has the following form in a template: leftExpr|name(optional-args). Adding new filters is similar as seen with the functions:</p> <pre><code>&lt;?php\n\n// This creates a filter 'hash' that uses the PHP function 'md5'\n$compiler-&gt;addFilter('hash', 'md5');\n</code></pre> <pre><code>&lt;?php\n\n$compiler-&gt;addFilter(\n    'int',\n    function ($resolvedArgs, $exprArgs) {\n        return 'intval(' . $resolvedArgs . ')';\n    }\n);\n</code></pre> <p>Built-in filters can be overridden adding a function with its name:</p> <pre><code>&lt;?php\n\n// Replace built-in filter 'capitalize'\n$compiler-&gt;addFilter('capitalize', 'lcfirst');\n</code></pre>"},{"location":"volt/#extensions","title":"Extensions","text":"<p>With extensions the developer has more flexibility to extend the template engine, and override the compilation of a specific instruction, change the behavior of an expression or operator, add functions/filters, and more.</p> <p>An extension is a class that implements the events triggered by Volt as a method of itself. For example, the class below allows to use any PHP function in Volt:</p> <pre><code>&lt;?php\n\nclass PhpFunctionExtension\n{\n    /**\n     * This method is called on any attempt to compile a function call\n     */\n    public function compileFunction($name, $arguments)\n    {\n        if (function_exists($name)) {\n            return $name . '('. $arguments . ')';\n        }\n    }\n}\n</code></pre> <p>The above class implements the method <code>compileFunction</code> which is invoked before any attempt to compile a function call in any template. The purpose of the extension is to verify if a function to be compiled is a PHP function allowing to call it from the template. Events in extensions must return valid PHP code, this will be used as result of the compilation instead of the one generated by Volt. If an event doesn't return an string the compilation is done using the default behavior provided by the engine.</p> <p>The following compilation events are available to be implemented in extensions:</p> Event/Method Description <code>compileFunction</code> Triggered before trying to compile any function call in a template <code>compileFilter</code> Triggered before trying to compile any filter call in a template <code>resolveExpression</code> Triggered before trying to compile any expression. This allows the developer to override operators <code>compileStatement</code> Triggered before trying to compile any expression. This allows the developer to override any statement <p>Volt extensions must be in registered in the compiler making them available in compile time:</p> <pre><code>&lt;?php\n\n// Register the extension in the compiler\n$compiler-&gt;addExtension(\n    new PhpFunctionExtension()\n);\n</code></pre>"},{"location":"volt/#caching-view-fragments","title":"Caching view fragments","text":"<p>With Volt it's easy cache view fragments. This caching improves performance preventing that the contents of a block from being executed by PHP each time the view is displayed:</p> <pre><code>{% raw %}\n{% cache 'sidebar' %}\n    &lt;!-- generate this content is slow so we are going to cache it --&gt;\n{% endcache %}\n{% endraw %}\n</code></pre> <p>Setting a specific number of seconds:</p> <pre><code>{% raw %}\n{# cache the sidebar by 1 hour #}\n{% cache 'sidebar' 3600 %}\n    &lt;!-- generate this content is slow so we are going to cache it --&gt;\n{% endcache %}\n{% endraw %}\n</code></pre> <p>Any valid expression can be used as cache key:</p> <pre><code>{% raw %}\n{% cache ('article-' ~ post.id) 3600 %}\n\n    &lt;h1&gt;{{ post.title }}&lt;/h1&gt;\n\n    &lt;p&gt;{{ post.content }}&lt;/p&gt;\n\n{% endcache %}\n{% endraw %}\n</code></pre> <p>The caching is done by the <code>Phalcon\\Cache</code> component via the view component. Learn more about how this integration works in the section Caching View Fragments.</p>"},{"location":"volt/#inject-services-into-a-template","title":"Inject Services into a Template","text":"<p>If a service container (DI) is available for Volt, you can use the services by only accessing the name of the service in the template:</p> <pre><code>{% raw %}\n{# Inject the 'flash' service #}\n&lt;div id='messages'&gt;{{ flash.output() }}&lt;/div&gt;\n\n{# Inject the 'security' service #}\n&lt;input type='hidden' name='token' value='{{ security.getToken() }}'&gt;\n{% endraw %}\n</code></pre>"},{"location":"volt/#stand-alone-component","title":"Stand-alone component","text":"<p>Using Volt in a stand-alone mode can be demonstrated below:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler as VoltCompiler;\n\n// Create a compiler\n$compiler = new VoltCompiler();\n\n// Optionally add some options\n$compiler-&gt;setOptions(\n    [\n        // ...\n    ]\n);\n\n// Compile a template string returning PHP code\necho $compiler-&gt;compileString(\n    \"{{ 'hello' }}\"\n);\n\n// Compile a template in a file specifying the destination file\n$compiler-&gt;compileFile(\n    'layouts/main.volt',\n    'cache/layouts/main.volt.php'\n);\n\n// Compile a template in a file based on the options passed to the compiler\n$compiler-&gt;compile(\n    'layouts/main.volt'\n);\n\n// Require the compiled templated (optional)\nrequire $compiler-&gt;getCompiledTemplatePath();\n</code></pre>"},{"location":"volt/#external-resources","title":"External Resources","text":"<ul> <li>A bundle for Sublime/Textmate is available here</li> <li>Phosphorum, the Phalcon's forum, also uses Volt, GitHub</li> <li>V\u00f6kur\u00f3, is another sample application that use Volt, GitHub</li> </ul>"},{"location":"webserver-setup/","title":"Web Server Setup","text":"<p>In order for the routing of the Phalcon application to work, you will need to set up your web server to process the redirects properly. Setup instructions for popular web servers are:</p>"},{"location":"webserver-setup/#php-fpm","title":"PHP-FPM","text":"<p>The PHP-FPM (FastCGI Process Manager) is usually used to allow the processing of PHP files. Nowadays, PHP-FPM is bundled with all Linux based PHP distributions.</p> <p>On Windows PHP-FPM is in the PHP distribution archive through the file <code>php-cgi.exe</code> and you can start it with this script to help set options. Windows does not support unix sockets so this script will start fast-cgi in TCP mode on port <code>9000</code>.</p> <p>Create the file <code>php-fcgi.bat</code> with the following contents:</p> <pre><code>@ECHO OFF\nECHO Starting PHP FastCGI...\nset PATH=C:\\PHP;%PATH%\nc:\\bin\\RunHiddenConsole.exe C:\\PHP\\php-cgi.exe -b 127.0.0.1:9000\n</code></pre>"},{"location":"webserver-setup/#php-built-in-webserver-for-developers","title":"PHP Built-In Webserver (For Developers)","text":"<p>To speed up getting your Phalcon application running in development the easiest way is to use this built-in PHP server. Do not use this server in a production environment. The following configurations for Nginx and Apache are what you need.</p>"},{"location":"webserver-setup/#phalcon-configuration","title":"Phalcon configuration","text":"<p>To enable dynamic URI rewrites, without Apache or Nginx, that Phalcon needs, you can use the following router file: .htrouter.php</p> <p>If you created your application with Phalcon-Devtools this file should already exist in the root directory of your project and you can start the server with the following command:</p> <pre><code>$(which php) -S localhost:8000 -t public .htrouter.php\n</code></pre> <p>The anatomy of the command above: - <code>$(which php)</code> - will insert the absolute path to your PHP binary - <code>-S localhost:8000</code> - invokes server mode with the provided <code>host:port</code> - <code>-t public</code> - defines the servers root directory, necessary for php to route requests to assets like JS, CSS, and images in your public directory - <code>.htrouter.php</code> - the entry point that will be evaluated for each request</p> <p>Then point your browser to http://localhost:8000/ to check if everything is working.</p>"},{"location":"webserver-setup/#nginx","title":"Nginx","text":"<p>Nginx is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server. Unlike traditional servers, Nginx doesn't rely on threads to handle requests. Instead it uses a much more scalable event-driven (asynchronous) architecture. This architecture uses small, but more importantly, predictable amounts of memory under load.</p> <p>Phalcon with Nginx and PHP-FPM provide a powerful set of tools that offer maximum performance for your PHP applications.</p>"},{"location":"webserver-setup/#install-nginx","title":"Install Nginx","text":"<p>NginX Offical Site</p>"},{"location":"webserver-setup/#phalcon-configuration_1","title":"Phalcon configuration","text":"<p>You can use following potential configuration to setup Nginx with Phalcon:</p> <pre><code>server {\n    # Port 80 will require Nginx to be started with root permissions\n    # Depending on how you install Nginx to use port 80 you will need\n    # to start the server with `sudo` ports about 1000 do not require\n    # root privileges\n    # listen      80;\n\n    listen        8000;\n    server_name   default;\n\n    ##########################\n    # In production require SSL\n    # listen 443 ssl default_server;\n\n    # ssl on;\n    # ssl_session_timeout  5m;\n    # ssl_protocols  SSLv2 SSLv3 TLSv1;\n    # ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;\n    # ssl_prefer_server_ciphers   on;\n\n    # These locations depend on where you store your certs\n    # ssl_certificate        /var/nginx/certs/default.cert;\n    # ssl_certificate_key    /var/nginx/certs/default.key;\n    ##########################\n\n    # This is the folder that index.php is in\n    root /var/www/default/public;\n    index index.php index.html index.htm;\n\n    charset utf-8;\n    client_max_body_size 100M;\n    fastcgi_read_timeout 1800;\n\n    # Represents the root of the domain\n    # http://localhost:8000/[index.php]\n    location / {\n        # Matches URLS `$_GET['_url']`\n        try_files $uri $uri/ /index.php?_url=$uri&amp;$args;\n    }\n\n    # When the HTTP request does not match the above\n    # and the file ends in .php\n    location ~ [^/]\\.php(/|$) {\n        # try_files $uri =404;\n\n        # Ubuntu and PHP7.0-fpm in socket mode\n        # This path is dependent on the version of PHP install\n        fastcgi_pass  unix:/var/run/php/php7.0-fpm.sock;\n\n\n        # Alternatively you use PHP-FPM in TCP mode (Required on Windows)\n        # You will need to configure FPM to listen on a standard port\n        # https://www.nginx.com/resources/wiki/start/topics/examples/phpfastcgionwindows/\n        # fastcgi_pass  127.0.0.1:9000;\n\n        fastcgi_index /index.php;\n\n        include fastcgi_params;\n        fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n        if (!-f $document_root$fastcgi_script_name) {\n            return 404;\n        }\n\n        fastcgi_param PATH_INFO       $fastcgi_path_info;\n        # fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;\n        # and set php.ini cgi.fix_pathinfo=0\n\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    }\n\n    location ~ /\\.ht {\n        deny all;\n    }\n\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico)$ {\n        expires       max;\n        log_not_found off;\n        access_log    off;\n    }\n}\n</code></pre>"},{"location":"webserver-setup/#start-nginx","title":"Start Nginx","text":"<p>Usually <code>start nginx</code> from the command line but this depends on your installation method.</p>"},{"location":"webserver-setup/#apache","title":"Apache","text":"<p>Apache is a popular and well known web server available on many platforms.</p>"},{"location":"webserver-setup/#phalcon-configuration_2","title":"Phalcon configuration","text":"<p>The following are potential configurations you can use to setup Apache with Phalcon. These notes are primarily focused on the configuration of the <code>mod_rewrite</code> module allowing to use friendly URLs and the router component. Commonly an application has the following structure:</p> <pre><code>test/\n  app/\n    controllers/\n    models/\n    views/\n  public/\n    css/\n    img/\n    js/\n    index.php\n</code></pre>"},{"location":"webserver-setup/#document-root","title":"Document root","text":"<p>This being the most common case, the application is installed in any directory under the document root. In this case, we use two <code>.htaccess</code> files, the first one to hide the application code forwarding all requests to the application's document root (<code>public/</code>). </p>"},{"location":"webserver-setup/#note-that-using-htaccess-files-requires-your-apache-installation-to-have-the-allowoverride-all-option-set","title":"Note that using <code>.htaccess</code> files requires your apache installation to have the <code>AllowOverride All</code> option set.","text":"<pre><code># test/.htaccess\n\n&lt;IfModule mod_rewrite.c&gt;\n    RewriteEngine on\n    RewriteRule   ^$ public/    [L]\n    RewriteRule   ((?s).*) public/$1 [L]\n&lt;/IfModule&gt;\n</code></pre> <p>A second <code>.htaccess</code> file is located in the <code>public/</code> directory, this re-writes all the URIs to the <code>public/index.php</code> file:</p> <pre><code># test/public/.htaccess\n\n&lt;IfModule mod_rewrite.c&gt;\n    RewriteEngine On\n    RewriteCond   %{REQUEST_FILENAME} !-d\n    RewriteCond   %{REQUEST_FILENAME} !-f\n    RewriteRule   ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n&lt;/IfModule&gt;\n</code></pre> <p>For users that are using the Persian letter '\u0645' (meem) in uri parameters, there is an issue with <code>mod_rewrite</code>. To allow the matching to work as it does with English characters, you will need to change your <code>.htaccess</code> file:</p> <pre><code># test/public/.htaccess\n\n&lt;IfModule mod_rewrite.c&gt;\n    RewriteEngine On\n    RewriteCond   %{REQUEST_FILENAME} !-d\n    RewriteCond   %{REQUEST_FILENAME} !-f\n    RewriteRule   ^([0-9A-Za-z\\x7f-\\xff]*)$ index.php?params=$1 [L]\n&lt;/IfModule&gt;\n</code></pre> <p>If your uri contains characters other than English, you might need to resort to the above change to allow <code>mod_rewrite</code> to accurately match your route.</p>"},{"location":"webserver-setup/#apache-configuration","title":"Apache configuration","text":"<p>If you do not want to use <code>.htaccess</code> files you can move these configurations to the apache's main configuration file: <pre><code>&lt;IfModule mod_rewrite.c&gt;\n\n    &lt;Directory \"/var/www/test\"&gt;\n        RewriteEngine on\n        RewriteRule  ^$ public/    [L]\n        RewriteRule  ((?s).*) public/$1 [L]\n    &lt;/Directory&gt;\n\n    &lt;Directory \"/var/www/test/public\"&gt;\n        RewriteEngine On\n        RewriteCond   %{REQUEST_FILENAME} !-d\n        RewriteCond   %{REQUEST_FILENAME} !-f\n        RewriteRule   ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n    &lt;/Directory&gt;\n\n&lt;/IfModule&gt;\n</code></pre></p>"},{"location":"webserver-setup/#virtual-hosts","title":"Virtual Hosts","text":"<p>And this second configuration allows you to install a Phalcon application in a virtual host: <pre><code>&lt;VirtualHost *:80&gt;\n\n    ServerAdmin    admin@example.host\n    DocumentRoot   \"/var/vhosts/test/public\"\n    DirectoryIndex index.php\n    ServerName     example.host\n    ServerAlias    www.example.host\n\n    &lt;Directory \"/var/vhosts/test/public\"&gt;\n        Options       All\n        AllowOverride All\n        Require       all granted\n    &lt;/Directory&gt;\n\n&lt;/VirtualHost&gt;\n</code></pre></p>"},{"location":"webserver-setup/#cherokee","title":"Cherokee","text":"<p>Cherokee is a high-performance web server. It is very fast, flexible and easy to configure.</p>"},{"location":"webserver-setup/#phalcon-configuration_3","title":"Phalcon configuration","text":"<p>Cherokee provides a friendly graphical interface to configure almost every setting available in the web server.</p> <p>Start the cherokee administrator by executing as root <code>/path-to-cherokee/sbin/cherokee-admin</code></p> <p></p> <p>Create a new virtual host by clicking on <code>vServers</code>, then add a new virtual server:</p> <p></p> <p>The recently added virtual server must appear at the left bar of the screen. In the <code>Behaviors</code> tab you will see a set of default behaviors for this virtual server. Click the <code>Rule Management</code> button. Remove those labeled as <code>Directory /cherokee_themes</code> and <code>Directory /icons</code>:</p> <p></p> <p>Add the <code>PHP Language</code> behavior using the wizard. This behavior allows you to run PHP applications:</p> <p></p> <p>Normally this behavior does not require additional settings. Add another behavior, this time in the <code>Manual Configuration</code> section. In <code>Rule Type</code> choose <code>File Exists</code>, then make sure the option <code>Match any file</code> is enabled:</p> <p></p> <p>In the 'Handler' tab choose <code>List &amp; Send</code> as handler:</p> <p></p> <p>Edit the <code>Default</code> behavior in order to enable the URL-rewrite engine. Change the handler to <code>Redirection</code>, then add the following regular expression to the engine <code>^(.*)$</code>:</p> <p></p> <p>Finally, make sure the behaviors have the following order:</p> <p></p> <p>Execute the application in a browser:</p> <p></p>"},{"location":"webserver-wamp/","title":"Installation on WAMP","text":"<p>WampServer is a Windows web development environment. It allows you to create web applications with Apache2, PHP and a MySQL database. Below are detailed instructions on how to install Phalcon on WampServer for Windows. Using the latest WampServer version is highly recommended.</p>"},{"location":"webserver-wamp/#download-the-right-version-of-phalcon","title":"Download the right version of Phalcon","text":"<p>WAMP has both 32 and 64 bit versions. From the download section, you can download the Phalcon DLL that suits your WAMPP installation.</p> <p>After downloading the Phalcon library you will have a zip file like the one shown below:</p> <p>Extract the library from the archive to get the Phalcon DLL</p> <p>Copy the file <code>php_phalcon.dll</code> to the PHP extensions folder. If WAMP is installed in the <code>C:\\wamp</code> folder, the extension needs to be in <code>C:\\wamp\\bin\\php\\php5.5.12\\ext</code> (assuming your WAMP installation installed PHP 5.5.12).</p> <p>Edit the <code>php.ini</code> file, it is located at <code>C:\\wamp\\bin\\php\\php5.5.12\\php.ini</code>. It can be edited with Notepad or a similar program. We recommend Notepad++ to avoid issues with line endings. Append at the end of the file:</p> <p><code>ini  extension=php_phalcon.dll</code></p> <p>and save it.</p> <p>Also edit the <code>php.ini</code> file, which is located at <code>C:\\wamp\\bin\\apache\\apache2.4.9\\bin\\php.ini</code>. Append at the end of the file: </p> <pre><code>extension=php_phalcon.dll \n</code></pre> <p>and save it.</p> <p>Restart the Apache Web Server. Do a single click on the WampServer icon at system tray. Choose <code>Restart All Services</code> from the pop-up menu. Check out that tray icon will become green again.</p> <p>Open your browser to navigate to http://localhost. The WAMP welcome page will appear. Check the section <code>extensions loaded</code> to ensure that phalcon was loaded.</p> <p>Congratulations! You are now phlying with Phalcon.</p>"},{"location":"webserver-wamp/#related-guides","title":"Related Guides","text":"<ul> <li>General Installation</li> <li>Installation on XAMPP</li> </ul>"},{"location":"webserver-xampp/","title":"Installation on XAMPP","text":"<p>XAMPP is an easy to install Apache distribution containing MySQL, PHP and Perl. Once you download XAMPP, all you have to do is extract it and start using it. Below are detailed instructions on how to install Phalcon on XAMPP for Windows. Using the latest XAMPP version is highly recommended.</p>"},{"location":"webserver-xampp/#download-the-right-version-of-phalcon","title":"Download the right version of Phalcon","text":"<p>XAMPP is always releasing 32 bit versions of Apache and PHP. You will need to download the x86 version of Phalcon for Windows from the download section.</p> <p>After downloading the Phalcon library you will have a zip file like the one shown below:</p> <p>Extract the library from the archive to get the Phalcon DLL</p> <p>Copy the file <code>php_phalcon.dll</code> to the PHP extensions directory. If you have installed XAMPP in the <code>C:\\xampp</code> folder, the extension needs to be in <code>C:\\xampp\\php\\ext</code></p> <p>Edit the <code>php.ini</code> file, it is located at <code>C:\\xampp\\php\\php.ini</code>. It can be edited with Notepad or a similar program. We recommend Notepad++ to avoid issues with line endings. Append at the end of the file:</p> <pre><code>extension=php_phalcon.dll\n</code></pre> <p>and save it.</p> <p>Restart the Apache Web Server from the XAMPP Control Center. This will load the new PHP configuration.</p> <p>Open your browser to navigate to <code>http://localhost</code>. The XAMPP welcome page will appear. Click on the link <code>phpinfo()</code>.</p> <p>phpinfo will output a significant amount of information on screen about the current state of PHP. Scroll down to check if the phalcon extension has been loaded correctly.</p> <p>If you can see the phalcon version in the <code>phpinfo()</code> output, congratulations!, You are now phlying with Phalcon.</p>"},{"location":"webserver-xampp/#screencast","title":"Screencast","text":"<p>The following screencast is a step by step guide to install Phalcon on Windows:</p>"},{"location":"webserver-xampp/#related-guides","title":"Related Guides","text":"<ul> <li>General Installation</li> <li>Installation on WAMP</li> </ul>"},{"location":"api/","title":"API Index","text":""},{"location":"api/#api-index","title":"API Index","text":""},{"location":"api/#acl","title":"Acl","text":"<ul> <li>Phalcon\\Acl</li> <li>Phalcon\\Acl\\Adapter</li> <li>Phalcon\\Acl\\AdapterInterface</li> <li>Phalcon\\Acl\\Adapter\\Memory</li> <li>Phalcon\\Acl\\Exception</li> <li>Phalcon\\Acl\\Resource</li> <li>Phalcon\\Acl\\ResourceAware</li> <li>Phalcon\\Acl\\ResourceInterface</li> <li>Phalcon\\Acl\\Role</li> <li>Phalcon\\Acl\\RoleAware</li> <li>Phalcon\\Acl\\RoleInterface</li> </ul>"},{"location":"api/#annotations","title":"Annotations","text":"<ul> <li>Phalcon\\Annotations\\Adapter</li> <li>Phalcon\\Annotations\\AdapterInterface</li> <li>Phalcon\\Annotations\\Adapter\\Apc</li> <li>Phalcon\\Annotations\\Adapter\\Apcu</li> <li>Phalcon\\Annotations\\Adapter\\Files</li> <li>Phalcon\\Annotations\\Adapter\\Memory</li> <li>Phalcon\\Annotations\\Adapter\\Xcache</li> <li>Phalcon\\Annotations\\Annotation</li> <li>Phalcon\\Annotations\\Collection</li> <li>Phalcon\\Annotations\\Exception</li> <li>Phalcon\\Annotations\\Factory</li> <li>Phalcon\\Annotations\\Reader</li> <li>Phalcon\\Annotations\\ReaderInterface</li> <li>Phalcon\\Annotations\\Reflection</li> </ul>"},{"location":"api/#application","title":"Application","text":"<ul> <li>Phalcon\\Application</li> <li>Phalcon\\Application\\Exception</li> </ul>"},{"location":"api/#assets","title":"Assets","text":"<ul> <li>Phalcon\\Assets\\Collection</li> <li>Phalcon\\Assets\\Exception</li> <li>Phalcon\\Assets\\FilterInterface</li> <li>Phalcon\\Assets\\Filters\\Cssmin</li> <li>Phalcon\\Assets\\Filters\\Jsmin</li> <li>Phalcon\\Assets\\Filters\\None</li> <li>Phalcon\\Assets\\Inline</li> <li>Phalcon\\Assets\\Inline\\Css</li> <li>Phalcon\\Assets\\Inline\\Js</li> <li>Phalcon\\Assets\\Manager</li> <li>Phalcon\\Assets\\Resource</li> <li>Phalcon\\Assets\\ResourceInterface</li> <li>Phalcon\\Assets\\Resource\\Css</li> <li>Phalcon\\Assets\\Resource\\Js</li> </ul>"},{"location":"api/#cache","title":"Cache","text":"<ul> <li>Phalcon\\Cache\\Backend</li> <li>Phalcon\\Cache\\BackendInterface</li> <li>Phalcon\\Cache\\Backend\\Apc</li> <li>Phalcon\\Cache\\Backend\\Apcu</li> <li>Phalcon\\Cache\\Backend\\Factory</li> <li>Phalcon\\Cache\\Backend\\File</li> <li>Phalcon\\Cache\\Backend\\Libmemcached</li> <li>Phalcon\\Cache\\Backend\\Memcache</li> <li>Phalcon\\Cache\\Backend\\Memory</li> <li>Phalcon\\Cache\\Backend\\Mongo</li> <li>Phalcon\\Cache\\Backend\\Redis</li> <li>Phalcon\\Cache\\Backend\\Xcache</li> <li>Phalcon\\Cache\\Exception</li> <li>Phalcon\\Cache\\FrontendInterface</li> <li>Phalcon\\Cache\\Frontend\\Base64</li> <li>Phalcon\\Cache\\Frontend\\Data</li> <li>Phalcon\\Cache\\Frontend\\Factory</li> <li>Phalcon\\Cache\\Frontend\\Igbinary</li> <li>Phalcon\\Cache\\Frontend\\Json</li> <li>Phalcon\\Cache\\Frontend\\Msgpack</li> <li>Phalcon\\Cache\\Frontend\\None</li> <li>Phalcon\\Cache\\Frontend\\Output</li> <li>Phalcon\\Cache\\Multiple</li> </ul>"},{"location":"api/#cli","title":"Cli","text":"<ul> <li>Phalcon\\Cli\\Console</li> <li>Phalcon\\Cli\\Console\\Exception</li> <li>Phalcon\\Cli\\Dispatcher</li> <li>Phalcon\\Cli\\DispatcherInterface</li> <li>Phalcon\\Cli\\Dispatcher\\Exception</li> <li>Phalcon\\Cli\\Router</li> <li>Phalcon\\Cli\\RouterInterface</li> <li>Phalcon\\Cli\\Router\\Exception</li> <li>Phalcon\\Cli\\Router\\Route</li> <li>Phalcon\\Cli\\Router\\RouteInterface</li> <li>Phalcon\\Cli\\Task</li> <li>Phalcon\\Cli\\TaskInterface</li> </ul>"},{"location":"api/#config","title":"Config","text":"<ul> <li>Phalcon\\Config</li> <li>Phalcon\\Config\\Adapter\\Grouped</li> <li>Phalcon\\Config\\Adapter\\Ini</li> <li>Phalcon\\Config\\Adapter\\Json</li> <li>Phalcon\\Config\\Adapter\\Php</li> <li>Phalcon\\Config\\Adapter\\Yaml</li> <li>Phalcon\\Config\\Exception</li> <li>Phalcon\\Config\\Factory</li> </ul>"},{"location":"api/#crypt","title":"Crypt","text":"<ul> <li>Phalcon\\Crypt</li> <li>Phalcon\\CryptInterface</li> <li>Phalcon\\Crypt\\Exception</li> <li>Phalcon\\Crypt\\Mismatch</li> </ul>"},{"location":"api/#db","title":"Db","text":"<ul> <li>Phalcon\\Db</li> <li>Phalcon\\Db\\Adapter</li> <li>Phalcon\\Db\\AdapterInterface</li> <li>Phalcon\\Db\\Adapter\\Pdo</li> <li>Phalcon\\Db\\Adapter\\Pdo\\Factory</li> <li>Phalcon\\Db\\Adapter\\Pdo\\Mysql</li> <li>Phalcon\\Db\\Adapter\\Pdo\\Postgresql</li> <li>Phalcon\\Db\\Adapter\\Pdo\\Sqlite</li> <li>Phalcon\\Db\\Column</li> <li>Phalcon\\Db\\ColumnInterface</li> <li>Phalcon\\Db\\Dialect</li> <li>Phalcon\\Db\\DialectInterface</li> <li>Phalcon\\Db\\Dialect\\Mysql</li> <li>Phalcon\\Db\\Dialect\\Postgresql</li> <li>Phalcon\\Db\\Dialect\\Sqlite</li> <li>Phalcon\\Db\\Exception</li> <li>Phalcon\\Db\\Index</li> <li>Phalcon\\Db\\IndexInterface</li> <li>Phalcon\\Db\\Profiler</li> <li>Phalcon\\Db\\Profiler\\Item</li> <li>Phalcon\\Db\\RawValue</li> <li>Phalcon\\Db\\Reference</li> <li>Phalcon\\Db\\ReferenceInterface</li> <li>Phalcon\\Db\\ResultInterface</li> <li>Phalcon\\Db\\Result\\Pdo</li> </ul>"},{"location":"api/#debug","title":"Debug","text":"<ul> <li>Phalcon\\Debug</li> <li>Phalcon\\Debug\\Dump</li> <li>Phalcon\\Debug\\Exception</li> </ul>"},{"location":"api/#di","title":"Di","text":"<ul> <li>Phalcon\\Di</li> <li>Phalcon\\DiInterface</li> <li>Phalcon\\Di\\Exception</li> <li>Phalcon\\Di\\FactoryDefault</li> <li>Phalcon\\Di\\FactoryDefault\\Cli</li> <li>Phalcon\\Di\\Injectable</li> <li>Phalcon\\Di\\InjectionAwareInterface</li> <li>Phalcon\\Di\\Service</li> <li>Phalcon\\Di\\ServiceInterface</li> <li>Phalcon\\Di\\ServiceProviderInterface</li> <li>Phalcon\\Di\\Service\\Builder</li> </ul>"},{"location":"api/#dispatcher","title":"Dispatcher","text":"<ul> <li>Phalcon\\Dispatcher</li> <li>Phalcon\\DispatcherInterface</li> </ul>"},{"location":"api/#escaper","title":"Escaper","text":"<ul> <li>Phalcon\\Escaper</li> <li>Phalcon\\EscaperInterface</li> <li>Phalcon\\Escaper\\Exception</li> </ul>"},{"location":"api/#events","title":"Events","text":"<ul> <li>Phalcon\\Events\\Event</li> <li>Phalcon\\Events\\EventInterface</li> <li>Phalcon\\Events\\EventsAwareInterface</li> <li>Phalcon\\Events\\Exception</li> <li>Phalcon\\Events\\Manager</li> <li>Phalcon\\Events\\ManagerInterface</li> </ul>"},{"location":"api/#exception","title":"Exception","text":"<ul> <li>Phalcon\\Exception</li> </ul>"},{"location":"api/#factory","title":"Factory","text":"<ul> <li>Phalcon\\Factory</li> <li>Phalcon\\FactoryInterface</li> <li>Phalcon\\Factory\\Exception</li> </ul>"},{"location":"api/#filter","title":"Filter","text":"<ul> <li>Phalcon\\Filter</li> <li>Phalcon\\FilterInterface</li> <li>Phalcon\\Filter\\Exception</li> <li>Phalcon\\Filter\\UserFilterInterface</li> </ul>"},{"location":"api/#flash","title":"Flash","text":"<ul> <li>Phalcon\\Flash</li> <li>Phalcon\\FlashInterface</li> <li>Phalcon\\Flash\\Direct</li> <li>Phalcon\\Flash\\Exception</li> <li>Phalcon\\Flash\\Session</li> </ul>"},{"location":"api/#forms","title":"Forms","text":"<ul> <li>Phalcon\\Forms\\Element</li> <li>Phalcon\\Forms\\ElementInterface</li> <li>Phalcon\\Forms\\Element\\Check</li> <li>Phalcon\\Forms\\Element\\Date</li> <li>Phalcon\\Forms\\Element\\Email</li> <li>Phalcon\\Forms\\Element\\File</li> <li>Phalcon\\Forms\\Element\\Hidden</li> <li>Phalcon\\Forms\\Element\\Numeric</li> <li>Phalcon\\Forms\\Element\\Password</li> <li>Phalcon\\Forms\\Element\\Radio</li> <li>Phalcon\\Forms\\Element\\Select</li> <li>Phalcon\\Forms\\Element\\Submit</li> <li>Phalcon\\Forms\\Element\\Text</li> <li>Phalcon\\Forms\\Element\\TextArea</li> <li>Phalcon\\Forms\\Exception</li> <li>Phalcon\\Forms\\Form</li> <li>Phalcon\\Forms\\Manager</li> </ul>"},{"location":"api/#http","title":"Http","text":"<ul> <li>Phalcon\\Http\\Cookie</li> <li>Phalcon\\Http\\CookieInterface</li> <li>Phalcon\\Http\\Cookie\\Exception</li> <li>Phalcon\\Http\\Request</li> <li>Phalcon\\Http\\RequestInterface</li> <li>Phalcon\\Http\\Request\\Exception</li> <li>Phalcon\\Http\\Request\\File</li> <li>Phalcon\\Http\\Request\\FileInterface</li> <li>Phalcon\\Http\\Response</li> <li>Phalcon\\Http\\ResponseInterface</li> <li>Phalcon\\Http\\Response\\Cookies</li> <li>Phalcon\\Http\\Response\\CookiesInterface</li> <li>Phalcon\\Http\\Response\\Exception</li> <li>Phalcon\\Http\\Response\\Headers</li> <li>Phalcon\\Http\\Response\\HeadersInterface</li> </ul>"},{"location":"api/#image","title":"Image","text":"<ul> <li>Phalcon\\Image</li> <li>Phalcon\\Image\\Adapter</li> <li>Phalcon\\Image\\AdapterInterface</li> <li>Phalcon\\Image\\Adapter\\Gd</li> <li>Phalcon\\Image\\Adapter\\Imagick</li> <li>Phalcon\\Image\\Exception</li> <li>Phalcon\\Image\\Factory</li> </ul>"},{"location":"api/#kernel","title":"Kernel","text":"<ul> <li>Phalcon\\Kernel</li> </ul>"},{"location":"api/#loader","title":"Loader","text":"<ul> <li>Phalcon\\Loader</li> <li>Phalcon\\Loader\\Exception</li> </ul>"},{"location":"api/#logger","title":"Logger","text":"<ul> <li>Phalcon\\Logger</li> <li>Phalcon\\Logger\\Adapter</li> <li>Phalcon\\Logger\\AdapterInterface</li> <li>Phalcon\\Logger\\Adapter\\File</li> <li>Phalcon\\Logger\\Adapter\\Firephp</li> <li>Phalcon\\Logger\\Adapter\\Stream</li> <li>Phalcon\\Logger\\Adapter\\Syslog</li> <li>Phalcon\\Logger\\Exception</li> <li>Phalcon\\Logger\\Factory</li> <li>Phalcon\\Logger\\Formatter</li> <li>Phalcon\\Logger\\FormatterInterface</li> <li>Phalcon\\Logger\\Formatter\\Firephp</li> <li>Phalcon\\Logger\\Formatter\\Json</li> <li>Phalcon\\Logger\\Formatter\\Line</li> <li>Phalcon\\Logger\\Formatter\\Syslog</li> <li>Phalcon\\Logger\\Item</li> <li>Phalcon\\Logger\\Multiple</li> </ul>"},{"location":"api/#mvc","title":"Mvc","text":"<ul> <li>Phalcon\\Mvc\\Application</li> <li>Phalcon\\Mvc\\Application\\Exception</li> <li>Phalcon\\Mvc\\Collection</li> <li>Phalcon\\Mvc\\CollectionInterface</li> <li>Phalcon\\Mvc\\Collection\\Behavior</li> <li>Phalcon\\Mvc\\Collection\\BehaviorInterface</li> <li>Phalcon\\Mvc\\Collection\\Behavior\\SoftDelete</li> <li>Phalcon\\Mvc\\Collection\\Behavior\\Timestampable</li> <li>Phalcon\\Mvc\\Collection\\Document</li> <li>Phalcon\\Mvc\\Collection\\Exception</li> <li>Phalcon\\Mvc\\Collection\\Manager</li> <li>Phalcon\\Mvc\\Collection\\ManagerInterface</li> <li>Phalcon\\Mvc\\Controller</li> <li>Phalcon\\Mvc\\ControllerInterface</li> <li>Phalcon\\Mvc\\Controller\\BindModelInterface</li> <li>Phalcon\\Mvc\\Dispatcher</li> <li>Phalcon\\Mvc\\DispatcherInterface</li> <li>Phalcon\\Mvc\\Dispatcher\\Exception</li> <li>Phalcon\\Mvc\\EntityInterface</li> <li>Phalcon\\Mvc\\Micro</li> <li>Phalcon\\Mvc\\Micro\\Collection</li> <li>Phalcon\\Mvc\\Micro\\CollectionInterface</li> <li>Phalcon\\Mvc\\Micro\\Exception</li> <li>Phalcon\\Mvc\\Micro\\LazyLoader</li> <li>Phalcon\\Mvc\\Micro\\MiddlewareInterface</li> <li>Phalcon\\Mvc\\Model</li> <li>Phalcon\\Mvc\\ModelInterface</li> <li>Phalcon\\Mvc\\Model\\Exception</li> <li>Phalcon\\Mvc\\Model\\Behavior</li> <li>Phalcon\\Mvc\\Model\\BehaviorInterface</li> <li>Phalcon\\Mvc\\Model\\Behavior\\SoftDelete</li> <li>Phalcon\\Mvc\\Model\\Behavior\\Timestampable</li> <li>Phalcon\\Mvc\\Model\\Binder</li> <li>Phalcon\\Mvc\\Model\\BinderInterface</li> <li>Phalcon\\Mvc\\Model\\Binder\\BindableInterface</li> <li>Phalcon\\Mvc\\Model\\Criteria</li> <li>Phalcon\\Mvc\\Model\\CriteriaInterface</li> <li>Phalcon\\Mvc\\Model\\Manager</li> <li>Phalcon\\Mvc\\Model\\ManagerInterface</li> <li>Phalcon\\Mvc\\Model\\Message</li> <li>Phalcon\\Mvc\\Model\\MessageInterface</li> <li>Phalcon\\Mvc\\Model\\MetaData</li> <li>Phalcon\\Mvc\\Model\\MetaDataInterface</li> <li>Phalcon\\Mvc\\Model\\MetaData\\Apc</li> <li>Phalcon\\Mvc\\Model\\MetaData\\Files</li> <li>Phalcon\\Mvc\\Model\\MetaData\\Libmemcached</li> <li>Phalcon\\Mvc\\Model\\MetaData\\Memcache</li> <li>Phalcon\\Mvc\\Model\\MetaData\\Memory</li> <li>Phalcon\\Mvc\\Model\\MetaData\\Redis</li> <li>Phalcon\\Mvc\\Model\\MetaData\\Session</li> <li>Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface</li> <li>Phalcon\\Mvc\\Model\\MetaData\\Strategy\\Annotations</li> <li>Phalcon\\Mvc\\Model\\MetaData\\Strategy\\Introspection</li> <li>Phalcon\\Mvc\\Model\\MetaData\\Xcache</li> <li>Phalcon\\Mvc\\Model\\Query</li> <li>Phalcon\\Mvc\\Model\\QueryInterface</li> <li>Phalcon\\Mvc\\Model\\Query\\Builder</li> <li>Phalcon\\Mvc\\Model\\Query\\BuilderInterface</li> <li>Phalcon\\Mvc\\Model\\Query\\Lang</li> <li>Phalcon\\Mvc\\Model\\Query\\Status</li> <li>Phalcon\\Mvc\\Model\\Query\\StatusInterface</li> <li>Phalcon\\Mvc\\Model\\Relation</li> <li>Phalcon\\Mvc\\Model\\RelationInterface</li> <li>Phalcon\\Mvc\\Model\\ResultInterface</li> <li>Phalcon\\Mvc\\Model\\Resultset</li> <li>Phalcon\\Mvc\\Model\\ResultsetInterface</li> <li>Phalcon\\Mvc\\Model\\Resultset\\Complex</li> <li>Phalcon\\Mvc\\Model\\Resultset\\Simple</li> <li>Phalcon\\Mvc\\Model\\Row</li> <li>Phalcon\\Mvc\\Model\\Transaction</li> <li>Phalcon\\Mvc\\Model\\TransactionInterface</li> <li>Phalcon\\Mvc\\Model\\Transaction\\Exception</li> <li>Phalcon\\Mvc\\Model\\Transaction\\Failed</li> <li>Phalcon\\Mvc\\Model\\Transaction\\Manager</li> <li>Phalcon\\Mvc\\Model\\Transaction\\ManagerInterface</li> <li>Phalcon\\Mvc\\Model\\ValidationFailed</li> <li>Phalcon\\Mvc\\Model\\Validator</li> <li>Phalcon\\Mvc\\Model\\Validator\\Email</li> <li>Phalcon\\Mvc\\Model\\Validator\\Exclusionin</li> <li>Phalcon\\Mvc\\Model\\Validator\\Inclusionin</li> <li>Phalcon\\Mvc\\Model\\Validator\\Ip</li> <li>Phalcon\\Mvc\\Model\\Validator\\Numericality</li> <li>Phalcon\\Mvc\\Model\\Validator\\PresenceOf</li> <li>Phalcon\\Mvc\\Model\\Validator\\Regex</li> <li>Phalcon\\Mvc\\Model\\Validator\\StringLength</li> <li>Phalcon\\Mvc\\Model\\Validator\\Uniqueness</li> <li>Phalcon\\Mvc\\Model\\Validator\\Url</li> <li>Phalcon\\Mvc\\Model\\ValidatorInterface</li> <li>Phalcon\\Mvc\\ModuleDefinitionInterface</li> <li>Phalcon\\Mvc\\Router</li> <li>Phalcon\\Mvc\\RouterInterface</li> <li>Phalcon\\Mvc\\Router\\Annotations</li> <li>Phalcon\\Mvc\\Router\\Exception</li> <li>Phalcon\\Mvc\\Router\\Group</li> <li>Phalcon\\Mvc\\Router\\GroupInterface</li> <li>Phalcon\\Mvc\\Router\\Route</li> <li>Phalcon\\Mvc\\Router\\RouteInterface</li> <li>Phalcon\\Mvc\\Url</li> <li>Phalcon\\Mvc\\UrlInterface</li> <li>Phalcon\\Mvc\\Url\\Exception</li> <li>Phalcon\\Mvc\\User\\Component</li> <li>Phalcon\\Mvc\\User\\Module</li> <li>Phalcon\\Mvc\\User\\Plugin</li> <li>Phalcon\\Mvc\\View</li> <li>Phalcon\\Mvc\\ViewBaseInterface</li> <li>Phalcon\\Mvc\\ViewInterface</li> <li>Phalcon\\Mvc\\View\\Engine</li> <li>Phalcon\\Mvc\\View\\EngineInterface</li> <li>Phalcon\\Mvc\\View\\Engine\\Php</li> <li>Phalcon\\Mvc\\View\\Engine\\Volt</li> <li>Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler</li> <li>Phalcon\\Mvc\\View\\Engine\\Volt\\Exception</li> <li>Phalcon\\Mvc\\View\\Exception</li> <li>Phalcon\\Mvc\\View\\Simple</li> </ul>"},{"location":"api/#paginator","title":"Paginator","text":"<ul> <li>Phalcon\\Paginator\\Adapter</li> <li>Phalcon\\Paginator\\AdapterInterface</li> <li>Phalcon\\Paginator\\Adapter\\Model</li> <li>Phalcon\\Paginator\\Adapter\\NativeArray</li> <li>Phalcon\\Paginator\\Adapter\\QueryBuilder</li> <li>Phalcon\\Paginator\\Exception</li> <li>Phalcon\\Paginator\\Factory</li> </ul>"},{"location":"api/#queue","title":"Queue","text":"<ul> <li>Phalcon\\Queue\\Beanstalk</li> <li>Phalcon\\Queue\\Beanstalk\\Exception</li> <li>Phalcon\\Queue\\Beanstalk\\Job</li> </ul>"},{"location":"api/#registry","title":"Registry","text":"<ul> <li>Phalcon\\Registry</li> </ul>"},{"location":"api/#security","title":"Security","text":"<ul> <li>Phalcon\\Security</li> <li>Phalcon\\Security\\Exception</li> <li>Phalcon\\Security\\Random</li> </ul>"},{"location":"api/#session","title":"Session","text":"<ul> <li>Phalcon\\Session\\Adapter</li> <li>Phalcon\\Session\\AdapterInterface</li> <li>Phalcon\\Session\\Adapter\\Files</li> <li>Phalcon\\Session\\Adapter\\Libmemcached</li> <li>Phalcon\\Session\\Adapter\\Memcache</li> <li>Phalcon\\Session\\Adapter\\Redis</li> <li>Phalcon\\Session\\Bag</li> <li>Phalcon\\Session\\BagInterface</li> <li>Phalcon\\Session\\Exception</li> <li>Phalcon\\Session\\Factory</li> </ul>"},{"location":"api/#tag","title":"Tag","text":"<ul> <li>Phalcon\\Tag</li> <li>Phalcon\\Tag\\Exception</li> <li>Phalcon\\Tag\\Select</li> </ul>"},{"location":"api/#text","title":"Text","text":"<ul> <li>Phalcon\\Text</li> </ul>"},{"location":"api/#translate","title":"Translate","text":"<ul> <li>Phalcon\\Translate</li> <li>Phalcon\\Translate\\Adapter</li> <li>Phalcon\\Translate\\AdapterInterface</li> <li>Phalcon\\Translate\\Adapter\\Csv</li> <li>Phalcon\\Translate\\Adapter\\Gettext</li> <li>Phalcon\\Translate\\Adapter\\NativeArray</li> <li>Phalcon\\Translate\\Exception</li> <li>Phalcon\\Translate\\Factory</li> <li>Phalcon\\Translate\\InterpolatorInterface</li> <li>Phalcon\\Translate\\Interpolator\\AssociativeArray</li> <li>Phalcon\\Translate\\Interpolator\\IndexedArray</li> </ul>"},{"location":"api/#validation","title":"Validation","text":"<ul> <li>Phalcon\\Validation</li> <li>Phalcon\\Validation\\CombinedFieldsValidator</li> <li>Phalcon\\Validation\\Exception</li> <li>Phalcon\\Validation\\Message</li> <li>Phalcon\\Validation\\MessageInterface</li> <li>Phalcon\\Validation\\Message\\Group</li> <li>Phalcon\\Validation\\Validator</li> <li>Phalcon\\Validation\\Validator\\Alnum</li> <li>Phalcon\\Validation\\Validator\\Alpha</li> <li>Phalcon\\Validation\\Validator\\Between</li> <li>Phalcon\\Validation\\Validator\\Callback</li> <li>Phalcon\\Validation\\Validator\\Confirmation</li> <li>Phalcon\\Validation\\Validator\\CreditCard</li> <li>Phalcon\\Validation\\Validator\\Date</li> <li>Phalcon\\Validation\\Validator\\Digit</li> <li>Phalcon\\Validation\\Validator\\Email</li> <li>Phalcon\\Validation\\Validator\\Exception</li> <li>Phalcon\\Validation\\Validator\\ExclusionIn</li> <li>Phalcon\\Validation\\Validator\\File</li> <li>Phalcon\\Validation\\Validator\\Identical</li> <li>Phalcon\\Validation\\Validator\\InclusionIn</li> <li>Phalcon\\Validation\\Validator\\Numericality</li> <li>Phalcon\\Validation\\Validator\\PresenceOf</li> <li>Phalcon\\Validation\\Validator\\Regex</li> <li>Phalcon\\Validation\\Validator\\StringLength</li> <li>Phalcon\\Validation\\Validator\\Uniqueness</li> <li>Phalcon\\Validation\\Validator\\Url</li> <li>Phalcon\\Validation\\ValidatorInterface</li> <li>Phalcon\\ValidationInterface</li> </ul>"},{"location":"api/#version","title":"Version","text":"<ul> <li>Phalcon\\Version</li> </ul>"},{"location":"api/Phalcon_Acl/","title":"Abstract class Phalcon\\Acl","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Acl/#constants","title":"Constants","text":"<p>integer ALLOW</p> <p>integer DENY</p>"},{"location":"api/Phalcon_Acl/#abstract-class-phalconacladapter","title":"Abstract class Phalcon\\Acl\\Adapter","text":"<p>implements Phalcon\\Acl\\AdapterInterface, Phalcon\\Events\\EventsAwareInterface</p> <p>Source on GitHub</p> <p>Adapter for Phalcon\\Acl adapters</p>"},{"location":"api/Phalcon_Acl/#methods","title":"Methods","text":"<p>public  getActiveRole ()</p> <p>Role which the list is checking if it's allowed to certain resource/access</p> <p>public  getActiveResource ()</p> <p>Resource which the list is checking if some role can access it</p> <p>public  getActiveAccess ()</p> <p>Active access which the list is checking if some role can access it</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager)</p> <p>Sets the events manager</p> <p>public  getEventsManager ()</p> <p>Returns the internal event manager</p> <p>public  setDefaultAction (mixed $defaultAccess)</p> <p>Sets the default access level (Phalcon\\Acl::ALLOW or Phalcon\\Acl::DENY)</p> <p>public  getDefaultAction ()</p> <p>Returns the default ACL access level</p> <p>abstract public  setNoArgumentsDefaultAction (mixed $defaultAccess) inherited from Phalcon\\Acl\\AdapterInterface</p> <p>...</p> <p>abstract public  getNoArgumentsDefaultAction () inherited from Phalcon\\Acl\\AdapterInterface</p> <p>...</p> <p>abstract public  addRole (mixed $role, [mixed $accessInherits]) inherited from Phalcon\\Acl\\AdapterInterface</p> <p>...</p> <p>abstract public  addInherit (mixed $roleName, mixed $roleToInherit) inherited from Phalcon\\Acl\\AdapterInterface</p> <p>...</p> <p>abstract public  isRole (mixed $roleName) inherited from Phalcon\\Acl\\AdapterInterface</p> <p>...</p> <p>abstract public  isResource (mixed $resourceName) inherited from Phalcon\\Acl\\AdapterInterface</p> <p>...</p> <p>abstract public  addResource (mixed $resourceObject, mixed $accessList) inherited from Phalcon\\Acl\\AdapterInterface</p> <p>...</p> <p>abstract public  addResourceAccess (mixed $resourceName, mixed $accessList) inherited from Phalcon\\Acl\\AdapterInterface</p> <p>...</p> <p>abstract public  dropResourceAccess (mixed $resourceName, mixed $accessList) inherited from Phalcon\\Acl\\AdapterInterface</p> <p>...</p> <p>abstract public  allow (mixed $roleName, mixed $resourceName, mixed $access, [mixed $func]) inherited from Phalcon\\Acl\\AdapterInterface</p> <p>...</p> <p>abstract public  deny (mixed $roleName, mixed $resourceName, mixed $access, [mixed $func]) inherited from Phalcon\\Acl\\AdapterInterface</p> <p>...</p> <p>abstract public  isAllowed (mixed $roleName, mixed $resourceName, mixed $access, [array $parameters]) inherited from Phalcon\\Acl\\AdapterInterface</p> <p>...</p> <p>abstract public  getRoles () inherited from Phalcon\\Acl\\AdapterInterface</p> <p>...</p> <p>abstract public  getResources () inherited from Phalcon\\Acl\\AdapterInterface</p> <p>...</p>"},{"location":"api/Phalcon_Acl/#class-phalconacladaptermemory","title":"Class Phalcon\\Acl\\Adapter\\Memory","text":"<p>extends abstract class Phalcon\\Acl\\Adapter</p> <p>implements Phalcon\\Events\\EventsAwareInterface, Phalcon\\Acl\\AdapterInterface</p> <p>Source on GitHub</p> <p>Manages ACL lists in memory</p> <pre><code>&lt;?php\n\n$acl = new \\Phalcon\\Acl\\Adapter\\Memory();\n\n$acl-&gt;setDefaultAction(\n    \\Phalcon\\Acl::DENY\n);\n\n// Register roles\n$roles = [\n    \"users\"  =&gt; new \\Phalcon\\Acl\\Role(\"Users\"),\n    \"guests\" =&gt; new \\Phalcon\\Acl\\Role(\"Guests\"),\n];\nforeach ($roles as $role) {\n    $acl-&gt;addRole($role);\n}\n\n// Private area resources\n$privateResources = [\n    \"companies\" =&gt; [\"index\", \"search\", \"new\", \"edit\", \"save\", \"create\", \"delete\"],\n    \"products\"  =&gt; [\"index\", \"search\", \"new\", \"edit\", \"save\", \"create\", \"delete\"],\n    \"invoices\"  =&gt; [\"index\", \"profile\"],\n];\n\nforeach ($privateResources as $resourceName =&gt; $actions) {\n    $acl-&gt;addResource(\n        new \\Phalcon\\Acl\\Resource($resourceName),\n        $actions\n    );\n}\n\n// Public area resources\n$publicResources = [\n    \"index\"   =&gt; [\"index\"],\n    \"about\"   =&gt; [\"index\"],\n    \"session\" =&gt; [\"index\", \"register\", \"start\", \"end\"],\n    \"contact\" =&gt; [\"index\", \"send\"],\n];\n\nforeach ($publicResources as $resourceName =&gt; $actions) {\n    $acl-&gt;addResource(\n        new \\Phalcon\\Acl\\Resource($resourceName),\n        $actions\n    );\n}\n\n// Grant access to public areas to both users and guests\nforeach ($roles as $role){\n    foreach ($publicResources as $resource =&gt; $actions) {\n        $acl-&gt;allow($role-&gt;getName(), $resource, \"*\");\n    }\n}\n\n// Grant access to private area to role Users\nforeach ($privateResources as $resource =&gt; $actions) {\n    foreach ($actions as $action) {\n        $acl-&gt;allow(\"Users\", $resource, $action);\n    }\n}\n</code></pre>"},{"location":"api/Phalcon_Acl/#methods_1","title":"Methods","text":"<p>public  __construct ()</p> <p>Phalcon\\Acl\\Adapter\\Memory constructor</p> <p>public  addRole (RoleInterface | string $role, [array | string $accessInherits])</p> <p>Adds a role to the ACL list. Second parameter allows inheriting access data from other existing role Example:</p> <pre><code>&lt;?php\n\n$acl-&gt;addRole(\n    new Phalcon\\Acl\\Role(\"administrator\"),\n    \"consultant\"\n);\n\n$acl-&gt;addRole(\"administrator\", \"consultant\");\n</code></pre> <p>public  addInherit (mixed $roleName, mixed $roleToInherit)</p> <p>Do a role inherit from another existing role</p> <p>public  isRole (mixed $roleName)</p> <p>Check whether role exist in the roles list</p> <p>public  isResource (mixed $resourceName)</p> <p>Check whether resource exist in the resources list</p> <p>public  addResource (Phalcon\\Acl\\Resource | string $resourceValue, array | string $accessList)</p> <p>Adds a resource to the ACL list Access names can be a particular action, by example search, update, delete, etc or a list of them Example:</p> <pre><code>&lt;?php\n\n// Add a resource to the the list allowing access to an action\n$acl-&gt;addResource(\n    new Phalcon\\Acl\\Resource(\"customers\"),\n    \"search\"\n);\n\n$acl-&gt;addResource(\"customers\", \"search\");\n\n// Add a resource  with an access list\n$acl-&gt;addResource(\n    new Phalcon\\Acl\\Resource(\"customers\"),\n    [\n        \"create\",\n        \"search\",\n    ]\n);\n\n$acl-&gt;addResource(\n    \"customers\",\n    [\n        \"create\",\n        \"search\",\n    ]\n);\n</code></pre> <p>public  addResourceAccess (mixed $resourceName, array | string $accessList)</p> <p>Adds access to resources</p> <p>public  dropResourceAccess (mixed $resourceName, array | string $accessList)</p> <p>Removes an access from a resource</p> <p>protected  _allowOrDeny (mixed $roleName, mixed $resourceName, mixed $access, mixed $action, [mixed $func])</p> <p>Checks if a role has access to a resource</p> <p>public  allow (mixed $roleName, mixed $resourceName, mixed $access, [mixed $func])</p> <p>Allow access to a role on a resource You can use '*' as wildcard Example:</p> <pre><code>&lt;?php\n\n//Allow access to guests to search on customers\n$acl-&gt;allow(\"guests\", \"customers\", \"search\");\n\n//Allow access to guests to search or create on customers\n$acl-&gt;allow(\"guests\", \"customers\", [\"search\", \"create\"]);\n\n//Allow access to any role to browse on products\n$acl-&gt;allow(\"*\", \"products\", \"browse\");\n\n//Allow access to any role to browse on any resource\n$acl-&gt;allow(\"*\", \"*\", \"browse\");\n</code></pre> <p>public  deny (mixed $roleName, mixed $resourceName, mixed $access, [mixed $func])</p> <p>Deny access to a role on a resource You can use '*' as wildcard Example:</p> <pre><code>&lt;?php\n\n//Deny access to guests to search on customers\n$acl-&gt;deny(\"guests\", \"customers\", \"search\");\n\n//Deny access to guests to search or create on customers\n$acl-&gt;deny(\"guests\", \"customers\", [\"search\", \"create\"]);\n\n//Deny access to any role to browse on products\n$acl-&gt;deny(\"*\", \"products\", \"browse\");\n\n//Deny access to any role to browse on any resource\n$acl-&gt;deny(\"*\", \"*\", \"browse\");\n</code></pre> <p>public  isAllowed (RoleInterface | RoleAware | string $roleName, ResourceInterface | ResourceAware | string $resourceName, mixed $access, [array $parameters])</p> <p>Check whether a role is allowed to access an action from a resource</p> <pre><code>&lt;?php\n\n//Does andres have access to the customers resource to create?\n$acl-&gt;isAllowed(\"andres\", \"Products\", \"create\");\n\n//Do guests have access to any resource to edit?\n$acl-&gt;isAllowed(\"guests\", \"*\", \"edit\");\n</code></pre> <p>public  setNoArgumentsDefaultAction (mixed $defaultAccess)</p> <p>Sets the default access level (Phalcon\\Acl::ALLOW or Phalcon\\Acl::DENY) for no arguments provided in isAllowed action if there exists func for accessKey</p> <p>public  getNoArgumentsDefaultAction ()</p> <p>Returns the default ACL access level for no arguments provided in isAllowed action if there exists func for accessKey</p> <p>public  getRoles ()</p> <p>Return an array with every role registered in the list</p> <p>public  getResources ()</p> <p>Return an array with every resource registered in the list</p> <p>public  getActiveRole () inherited from Phalcon\\Acl\\Adapter</p> <p>Role which the list is checking if it's allowed to certain resource/access</p> <p>public  getActiveResource () inherited from Phalcon\\Acl\\Adapter</p> <p>Resource which the list is checking if some role can access it</p> <p>public  getActiveAccess () inherited from Phalcon\\Acl\\Adapter</p> <p>Active access which the list is checking if some role can access it</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Acl\\Adapter</p> <p>Sets the events manager</p> <p>public  getEventsManager () inherited from Phalcon\\Acl\\Adapter</p> <p>Returns the internal event manager</p> <p>public  setDefaultAction (mixed $defaultAccess) inherited from Phalcon\\Acl\\Adapter</p> <p>Sets the default access level (Phalcon\\Acl::ALLOW or Phalcon\\Acl::DENY)</p> <p>public  getDefaultAction () inherited from Phalcon\\Acl\\Adapter</p> <p>Returns the default ACL access level</p>"},{"location":"api/Phalcon_Acl/#interface-phalconacladapterinterface","title":"Interface Phalcon\\Acl\\AdapterInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Acl/#methods_2","title":"Methods","text":"<p>abstract public  setDefaultAction (mixed $defaultAccess)</p> <p>Sets the default access level (Phalcon\\Acl::ALLOW or Phalcon\\Acl::DENY)</p> <p>abstract public  getDefaultAction ()</p> <p>Returns the default ACL access level</p> <p>abstract public  setNoArgumentsDefaultAction (mixed $defaultAccess)</p> <p>Sets the default access level (Phalcon\\Acl::ALLOW or Phalcon\\Acl::DENY) for no arguments provided in isAllowed action if there exists func for accessKey</p> <p>abstract public  getNoArgumentsDefaultAction ()</p> <p>Returns the default ACL access level for no arguments provided in isAllowed action if there exists func for accessKey</p> <p>abstract public  addRole (mixed $role, [mixed $accessInherits])</p> <p>Adds a role to the ACL list. Second parameter lets to inherit access data from other existing role</p> <p>abstract public  addInherit (mixed $roleName, mixed $roleToInherit)</p> <p>Do a role inherit from another existing role</p> <p>abstract public  isRole (mixed $roleName)</p> <p>Check whether role exist in the roles list</p> <p>abstract public  isResource (mixed $resourceName)</p> <p>Check whether resource exist in the resources list</p> <p>abstract public  addResource (mixed $resourceObject, mixed $accessList)</p> <p>Adds a resource to the ACL list Access names can be a particular action, by example search, update, delete, etc or a list of them</p> <p>abstract public  addResourceAccess (mixed $resourceName, mixed $accessList)</p> <p>Adds access to resources</p> <p>abstract public  dropResourceAccess (mixed $resourceName, mixed $accessList)</p> <p>Removes an access from a resource</p> <p>abstract public  allow (mixed $roleName, mixed $resourceName, mixed $access, [mixed $func])</p> <p>Allow access to a role on a resource</p> <p>abstract public  deny (mixed $roleName, mixed $resourceName, mixed $access, [mixed $func])</p> <p>Deny access to a role on a resource</p> <p>abstract public  isAllowed (mixed $roleName, mixed $resourceName, mixed $access, [array $parameters])</p> <p>Check whether a role is allowed to access an action from a resource</p> <p>abstract public  getActiveRole ()</p> <p>Returns the role which the list is checking if it's allowed to certain resource/access</p> <p>abstract public  getActiveResource ()</p> <p>Returns the resource which the list is checking if some role can access it</p> <p>abstract public  getActiveAccess ()</p> <p>Returns the access which the list is checking if some role can access it</p> <p>abstract public  getRoles ()</p> <p>Return an array with every role registered in the list</p> <p>abstract public  getResources ()</p> <p>Return an array with every resource registered in the list</p>"},{"location":"api/Phalcon_Acl/#class-phalconaclexception","title":"Class Phalcon\\Acl\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Acl/#methods_3","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Acl/#class-phalconaclresource","title":"Class Phalcon\\Acl\\Resource","text":"<p>implements Phalcon\\Acl\\ResourceInterface</p> <p>Source on GitHub</p> <p>This class defines resource entity and its description</p>"},{"location":"api/Phalcon_Acl/#methods_4","title":"Methods","text":"<p>public  getName ()</p> <p>Resource name</p> <p>public  __toString ()</p> <p>Resource name</p> <p>public  getDescription ()</p> <p>Resource description</p> <p>public  __construct (mixed $name, [mixed $description])</p> <p>Phalcon\\Acl\\Resource constructor</p>"},{"location":"api/Phalcon_Acl/#interface-phalconaclresourceaware","title":"Interface Phalcon\\Acl\\ResourceAware","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Acl/#methods_5","title":"Methods","text":"<p>abstract public  getResourceName ()</p> <p>Returns resource name</p>"},{"location":"api/Phalcon_Acl/#interface-phalconaclresourceinterface","title":"Interface Phalcon\\Acl\\ResourceInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Acl/#methods_6","title":"Methods","text":"<p>abstract public  getName ()</p> <p>Returns the resource name</p> <p>abstract public  getDescription ()</p> <p>Returns resource description</p> <p>abstract public  __toString ()</p> <p>Magic method __toString</p>"},{"location":"api/Phalcon_Acl/#class-phalconaclrole","title":"Class Phalcon\\Acl\\Role","text":"<p>implements Phalcon\\Acl\\RoleInterface</p> <p>Source on GitHub</p> <p>This class defines role entity and its description</p>"},{"location":"api/Phalcon_Acl/#methods_7","title":"Methods","text":"<p>public  getName ()</p> <p>Role name</p> <p>public  __toString ()</p> <p>Role name</p> <p>public  getDescription ()</p> <p>Role description</p> <p>public  __construct (mixed $name, [mixed $description])</p> <p>Phalcon\\Acl\\Role constructor</p>"},{"location":"api/Phalcon_Acl/#interface-phalconaclroleaware","title":"Interface Phalcon\\Acl\\RoleAware","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Acl/#methods_8","title":"Methods","text":"<p>abstract public  getRoleName ()</p> <p>Returns role name</p>"},{"location":"api/Phalcon_Acl/#interface-phalconaclroleinterface","title":"Interface Phalcon\\Acl\\RoleInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Acl/#methods_9","title":"Methods","text":"<p>abstract public  getName ()</p> <p>Returns the role name</p> <p>abstract public  getDescription ()</p> <p>Returns role description</p> <p>abstract public  __toString ()</p> <p>Magic method __toString</p>"},{"location":"api/Phalcon_Annotations/","title":"Abstract class Phalcon\\Annotations\\Adapter","text":"<p>implements Phalcon\\Annotations\\AdapterInterface</p> <p>Source on GitHub</p> <p>This is the base class for Phalcon\\Annotations adapters</p>"},{"location":"api/Phalcon_Annotations/#methods","title":"Methods","text":"<p>public  setReader (Phalcon\\Annotations\\ReaderInterface $reader)</p> <p>Sets the annotations parser</p> <p>public  getReader ()</p> <p>Returns the annotation reader</p> <p>public  get (string | object $className)</p> <p>Parses or retrieves all the annotations found in a class</p> <p>public  getMethods (mixed $className)</p> <p>Returns the annotations found in all the class' methods</p> <p>public  getMethod (mixed $className, mixed $methodName)</p> <p>Returns the annotations found in a specific method</p> <p>public  getProperties (mixed $className)</p> <p>Returns the annotations found in all the class' methods</p> <p>public  getProperty (mixed $className, mixed $propertyName)</p> <p>Returns the annotations found in a specific property</p>"},{"location":"api/Phalcon_Annotations/#class-phalconannotationsadapterapc","title":"Class Phalcon\\Annotations\\Adapter\\Apc","text":"<p>extends abstract class Phalcon\\Annotations\\Adapter</p> <p>implements Phalcon\\Annotations\\AdapterInterface</p> <p>Source on GitHub</p> <p>Stores the parsed annotations in APC. This adapter is suitable for production</p> <pre><code>&lt;?php\n\nuse Phalcon\\Annotations\\Adapter\\Apc;\n\n$annotations = new Apc();\n</code></pre>"},{"location":"api/Phalcon_Annotations/#methods_1","title":"Methods","text":"<p>public  __construct ([array $options])</p> <p>Phalcon\\Annotations\\Adapter\\Apc constructor</p> <p>public  read (mixed $key)</p> <p>Reads parsed annotations from APC</p> <p>public  write (mixed $key, Phalcon\\Annotations\\Reflection $data)</p> <p>Writes parsed annotations to APC</p> <p>public  setReader (Phalcon\\Annotations\\ReaderInterface $reader) inherited from Phalcon\\Annotations\\Adapter</p> <p>Sets the annotations parser</p> <p>public  getReader () inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotation reader</p> <p>public  get (string | object $className) inherited from Phalcon\\Annotations\\Adapter</p> <p>Parses or retrieves all the annotations found in a class</p> <p>public  getMethods (mixed $className) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in all the class' methods</p> <p>public  getMethod (mixed $className, mixed $methodName) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in a specific method</p> <p>public  getProperties (mixed $className) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in all the class' methods</p> <p>public  getProperty (mixed $className, mixed $propertyName) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in a specific property</p>"},{"location":"api/Phalcon_Annotations/#class-phalconannotationsadapterapcu","title":"Class Phalcon\\Annotations\\Adapter\\Apcu","text":"<p>extends abstract class Phalcon\\Annotations\\Adapter</p> <p>implements Phalcon\\Annotations\\AdapterInterface</p> <p>Source on GitHub</p> <p>Stores the parsed annotations in APCu. This adapter is suitable for production</p> <pre><code>&lt;?php\n\nuse Phalcon\\Annotations\\Adapter\\Apcu;\n\n$annotations = new Apcu();\n</code></pre>"},{"location":"api/Phalcon_Annotations/#methods_2","title":"Methods","text":"<p>public  __construct ([array $options])</p> <p>Phalcon\\Annotations\\Adapter\\Apcu constructor</p> <p>public  read (mixed $key)</p> <p>Reads parsed annotations from APCu</p> <p>public  write (mixed $key, Phalcon\\Annotations\\Reflection $data)</p> <p>Writes parsed annotations to APCu</p> <p>public  setReader (Phalcon\\Annotations\\ReaderInterface $reader) inherited from Phalcon\\Annotations\\Adapter</p> <p>Sets the annotations parser</p> <p>public  getReader () inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotation reader</p> <p>public  get (string | object $className) inherited from Phalcon\\Annotations\\Adapter</p> <p>Parses or retrieves all the annotations found in a class</p> <p>public  getMethods (mixed $className) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in all the class' methods</p> <p>public  getMethod (mixed $className, mixed $methodName) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in a specific method</p> <p>public  getProperties (mixed $className) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in all the class' methods</p> <p>public  getProperty (mixed $className, mixed $propertyName) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in a specific property</p>"},{"location":"api/Phalcon_Annotations/#class-phalconannotationsadapterfiles","title":"Class Phalcon\\Annotations\\Adapter\\Files","text":"<p>extends abstract class Phalcon\\Annotations\\Adapter</p> <p>implements Phalcon\\Annotations\\AdapterInterface</p> <p>Source on GitHub</p> <p>Stores the parsed annotations in files. This adapter is suitable for production</p> <pre><code>&lt;?php\n\nuse Phalcon\\Annotations\\Adapter\\Files;\n\n$annotations = new Files(\n    [\n        \"annotationsDir\" =&gt; \"app/cache/annotations/\",\n    ]\n);\n</code></pre>"},{"location":"api/Phalcon_Annotations/#methods_3","title":"Methods","text":"<p>public  __construct ([array $options])</p> <p>Phalcon\\Annotations\\Adapter\\Files constructor</p> <p>public Phalcon\\Annotations\\Reflection read (string $key)</p> <p>Reads parsed annotations from files</p> <p>public  write (mixed $key, Phalcon\\Annotations\\Reflection $data)</p> <p>Writes parsed annotations to files</p> <p>public  setReader (Phalcon\\Annotations\\ReaderInterface $reader) inherited from Phalcon\\Annotations\\Adapter</p> <p>Sets the annotations parser</p> <p>public  getReader () inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotation reader</p> <p>public  get (string | object $className) inherited from Phalcon\\Annotations\\Adapter</p> <p>Parses or retrieves all the annotations found in a class</p> <p>public  getMethods (mixed $className) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in all the class' methods</p> <p>public  getMethod (mixed $className, mixed $methodName) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in a specific method</p> <p>public  getProperties (mixed $className) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in all the class' methods</p> <p>public  getProperty (mixed $className, mixed $propertyName) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in a specific property</p>"},{"location":"api/Phalcon_Annotations/#class-phalconannotationsadaptermemory","title":"Class Phalcon\\Annotations\\Adapter\\Memory","text":"<p>extends abstract class Phalcon\\Annotations\\Adapter</p> <p>implements Phalcon\\Annotations\\AdapterInterface</p> <p>Source on GitHub</p> <p>Stores the parsed annotations in memory. This adapter is the suitable development/testing</p>"},{"location":"api/Phalcon_Annotations/#methods_4","title":"Methods","text":"<p>public  read (mixed $key)</p> <p>Reads parsed annotations from memory</p> <p>public  write (mixed $key, Phalcon\\Annotations\\Reflection $data)</p> <p>Writes parsed annotations to memory</p> <p>public  setReader (Phalcon\\Annotations\\ReaderInterface $reader) inherited from Phalcon\\Annotations\\Adapter</p> <p>Sets the annotations parser</p> <p>public  getReader () inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotation reader</p> <p>public  get (string | object $className) inherited from Phalcon\\Annotations\\Adapter</p> <p>Parses or retrieves all the annotations found in a class</p> <p>public  getMethods (mixed $className) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in all the class' methods</p> <p>public  getMethod (mixed $className, mixed $methodName) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in a specific method</p> <p>public  getProperties (mixed $className) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in all the class' methods</p> <p>public  getProperty (mixed $className, mixed $propertyName) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in a specific property</p>"},{"location":"api/Phalcon_Annotations/#class-phalconannotationsadapterxcache","title":"Class Phalcon\\Annotations\\Adapter\\Xcache","text":"<p>extends abstract class Phalcon\\Annotations\\Adapter</p> <p>implements Phalcon\\Annotations\\AdapterInterface</p> <p>Source on GitHub</p> <p>Stores the parsed annotations to XCache. This adapter is suitable for production</p> <pre><code>&lt;?php\n\n$annotations = new \\Phalcon\\Annotations\\Adapter\\Xcache();\n</code></pre>"},{"location":"api/Phalcon_Annotations/#methods_5","title":"Methods","text":"<p>public Phalcon\\Annotations\\Reflection read (string $key)</p> <p>Reads parsed annotations from XCache</p> <p>public  write (mixed $key, Phalcon\\Annotations\\Reflection $data)</p> <p>Writes parsed annotations to XCache</p> <p>public  setReader (Phalcon\\Annotations\\ReaderInterface $reader) inherited from Phalcon\\Annotations\\Adapter</p> <p>Sets the annotations parser</p> <p>public  getReader () inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotation reader</p> <p>public  get (string | object $className) inherited from Phalcon\\Annotations\\Adapter</p> <p>Parses or retrieves all the annotations found in a class</p> <p>public  getMethods (mixed $className) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in all the class' methods</p> <p>public  getMethod (mixed $className, mixed $methodName) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in a specific method</p> <p>public  getProperties (mixed $className) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in all the class' methods</p> <p>public  getProperty (mixed $className, mixed $propertyName) inherited from Phalcon\\Annotations\\Adapter</p> <p>Returns the annotations found in a specific property</p>"},{"location":"api/Phalcon_Annotations/#interface-phalconannotationsadapterinterface","title":"Interface Phalcon\\Annotations\\AdapterInterface","text":"<p>Source on GitHub</p> <p>This interface must be implemented by adapters in Phalcon\\Annotations</p>"},{"location":"api/Phalcon_Annotations/#methods_6","title":"Methods","text":"<p>abstract public  setReader (Phalcon\\Annotations\\ReaderInterface $reader)</p> <p>Sets the annotations parser</p> <p>abstract public  getReader ()</p> <p>Returns the annotation reader</p> <p>abstract public  get (string|object $className)</p> <p>Parses or retrieves all the annotations found in a class</p> <p>abstract public  getMethods (string $className)</p> <p>Returns the annotations found in all the class methods</p> <p>abstract public  getMethod (string $className, string $methodName)</p> <p>Returns the annotations found in a specific method</p> <p>abstract public  getProperties (string $className)</p> <p>Returns the annotations found in all the class methods</p> <p>abstract public  getProperty (string $className, string $propertyName)</p> <p>Returns the annotations found in a specific property</p>"},{"location":"api/Phalcon_Annotations/#class-phalconannotationsannotation","title":"Class Phalcon\\Annotations\\Annotation","text":"<p>Source on GitHub</p> <p>Represents a single annotation in an annotations collection</p>"},{"location":"api/Phalcon_Annotations/#methods_7","title":"Methods","text":"<p>public  __construct (array $reflectionData)</p> <p>Phalcon\\Annotations\\Annotation constructor</p> <p>public  getName ()</p> <p>Returns the annotation's name</p> <p>public mixed getExpression (array $expr)</p> <p>Resolves an annotation expression</p> <p>public array getExprArguments ()</p> <p>Returns the expression arguments without resolving</p> <p>public array getArguments ()</p> <p>Returns the expression arguments</p> <p>public  numberArguments ()</p> <p>Returns the number of arguments that the annotation has</p> <p>public mixed getArgument (int | string $position)</p> <p>Returns an argument in a specific position</p> <p>public boolean hasArgument (int | string $position)</p> <p>Returns an argument in a specific position</p> <p>public mixed getNamedArgument (mixed $name)</p> <p>Returns a named argument</p> <p>public mixed getNamedParameter (mixed $name)</p> <p>Returns a named parameter</p>"},{"location":"api/Phalcon_Annotations/#class-phalconannotationscollection","title":"Class Phalcon\\Annotations\\Collection","text":"<p>implements Iterator, Traversable, Countable</p> <p>Source on GitHub</p> <p>Represents a collection of annotations. This class allows to traverse a group of annotations easily</p> <pre><code>&lt;?php\n\n//Traverse annotations\nforeach ($classAnnotations as $annotation) {\n    echo \"Name=\", $annotation-&gt;getName(), PHP_EOL;\n}\n\n//Check if the annotations has a specific\nvar_dump($classAnnotations-&gt;has(\"Cacheable\"));\n\n//Get an specific annotation in the collection\n$annotation = $classAnnotations-&gt;get(\"Cacheable\");\n</code></pre>"},{"location":"api/Phalcon_Annotations/#methods_8","title":"Methods","text":"<p>public  __construct ([array $reflectionData])</p> <p>Phalcon\\Annotations\\Collection constructor</p> <p>public  count ()</p> <p>Returns the number of annotations in the collection</p> <p>public  rewind ()</p> <p>Rewinds the internal iterator</p> <p>public Phalcon\\Annotations\\Annotation current ()</p> <p>Returns the current annotation in the iterator</p> <p>public  key ()</p> <p>Returns the current position/key in the iterator</p> <p>public  next ()</p> <p>Moves the internal iteration pointer to the next position</p> <p>public  valid ()</p> <p>Check if the current annotation in the iterator is valid</p> <p>public  getAnnotations ()</p> <p>Returns the internal annotations as an array</p> <p>public  get (string $name)</p> <p>Returns the first annotation that match a name</p> <p>public  getAll (string $name)</p> <p>Returns all the annotations that match a name</p> <p>public  has (string $name)</p> <p>Check if an annotation exists in a collection</p>"},{"location":"api/Phalcon_Annotations/#class-phalconannotationsexception","title":"Class Phalcon\\Annotations\\Exception","text":"<p>extends class Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Annotations/#methods_9","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Annotations/#class-phalconannotationsfactory","title":"Class Phalcon\\Annotations\\Factory","text":"<p>extends abstract class Phalcon\\Factory</p> <p>implements Phalcon\\FactoryInterface</p> <p>Source on GitHub</p> <p>Loads Annotations Adapter class using 'adapter' option</p> <pre><code>&lt;?php\n\nuse Phalcon\\Annotations\\Factory;\n\n$options = [\n    \"prefix\"   =&gt; \"annotations\",\n    \"lifetime\" =&gt; \"3600\",\n    \"adapter\"  =&gt; \"apc\",\n];\n$annotations = Factory::load($options);\n</code></pre>"},{"location":"api/Phalcon_Annotations/#methods_10","title":"Methods","text":"<p>public static  load (Phalcon\\Config | array $config)</p> <p>protected static  loadClass (mixed $namespace, mixed $config) inherited from Phalcon\\Factory</p> <p>...</p>"},{"location":"api/Phalcon_Annotations/#class-phalconannotationsreader","title":"Class Phalcon\\Annotations\\Reader","text":"<p>implements Phalcon\\Annotations\\ReaderInterface</p> <p>Source on GitHub</p> <p>Parses docblocks returning an array with the found annotations</p>"},{"location":"api/Phalcon_Annotations/#methods_11","title":"Methods","text":"<p>public  parse (mixed $className)</p> <p>Reads annotations from the class dockblocks, its methods and/or properties</p> <p>public static  parseDocBlock (mixed $docBlock, [mixed $file], [mixed $line])</p> <p>Parses a raw doc block returning the annotations found</p>"},{"location":"api/Phalcon_Annotations/#interface-phalconannotationsreaderinterface","title":"Interface Phalcon\\Annotations\\ReaderInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Annotations/#methods_12","title":"Methods","text":"<p>abstract public  parse (mixed $className)</p> <p>Reads annotations from the class dockblocks, its methods and/or properties</p> <p>abstract public static  parseDocBlock (mixed $docBlock, [mixed $file], [mixed $line])</p> <p>Parses a raw doc block returning the annotations found</p>"},{"location":"api/Phalcon_Annotations/#class-phalconannotationsreflection","title":"Class Phalcon\\Annotations\\Reflection","text":"<p>Source on GitHub</p> <p>Allows to manipulate the annotations reflection in an OO manner</p> <pre><code>&lt;?php\n\nuse Phalcon\\Annotations\\Reader;\nuse Phalcon\\Annotations\\Reflection;\n\n// Parse the annotations in a class\n$reader = new Reader();\n$parsing = $reader-&gt;parse(\"MyComponent\");\n\n// Create the reflection\n$reflection = new Reflection($parsing);\n\n// Get the annotations in the class docblock\n$classAnnotations = $reflection-&gt;getClassAnnotations();\n</code></pre>"},{"location":"api/Phalcon_Annotations/#methods_13","title":"Methods","text":"<p>public  __construct ([array $reflectionData])</p> <p>Phalcon\\Annotations\\Reflection constructor</p> <p>public  getClassAnnotations ()</p> <p>Returns the annotations found in the class docblock</p> <p>public  getMethodsAnnotations ()</p> <p>Returns the annotations found in the methods' docblocks</p> <p>public  getPropertiesAnnotations ()</p> <p>Returns the annotations found in the properties' docblocks</p> <p>public array getReflectionData ()</p> <p>Returns the raw parsing intermediate definitions used to construct the reflection</p> <p>public static array data __set_state (mixed $data)</p> <p>Restores the state of a Phalcon\\Annotations\\Reflection variable export</p>"},{"location":"api/Phalcon_Application/","title":"Abstract class Phalcon\\Application","text":"<p>extends abstract class Phalcon\\Di\\Injectable</p> <p>implements Phalcon\\Events\\EventsAwareInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>Base class for Phalcon\\Cli\\Console and Phalcon\\Mvc\\Application.</p>"},{"location":"api/Phalcon_Application/#methods","title":"Methods","text":"<p>public  __construct ([Phalcon\\DiInterface $dependencyInjector])</p> <p>Phalcon\\Application Constructor</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager)</p> <p>Sets the events manager</p> <p>public  getEventsManager ()</p> <p>Returns the internal event manager</p> <p>public  registerModules (array $modules, [mixed $merge])</p> <p>Register an array of modules present in the application</p> <pre><code>&lt;?php\n\n$this-&gt;registerModules(\n    [\n        \"frontend\" =&gt; [\n            \"className\" =&gt; \"Multiple\\Frontend\\Module\",\n            \"path\"      =&gt; \"../apps/frontend/Module.php\",\n        ],\n        \"backend\" =&gt; [\n            \"className\" =&gt; \"Multiple\\Backend\\Module\",\n            \"path\"      =&gt; \"../apps/backend/Module.php\",\n        ],\n    ]\n);\n</code></pre> <p>public  getModules ()</p> <p>Return the modules registered in the application</p> <p>public  getModule (mixed $name)</p> <p>Gets the module definition registered in the application via module name</p> <p>public  setDefaultModule (mixed $defaultModule)</p> <p>Sets the module name to be used if the router doesn't return a valid module</p> <p>public  getDefaultModule ()</p> <p>Returns the default module name</p> <p>abstract public  handle ()</p> <p>Handles a request</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal dependency injector</p> <p>public  __get (string $propertyName) inherited from Phalcon\\Di\\Injectable</p> <p>Magic method __get</p> <p>layout: default title: 'Phalcon\\Application\\Exception'</p>"},{"location":"api/Phalcon_Application/#class-phalconapplicationexception","title":"Class Phalcon\\Application\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Application/#methods_1","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Assets/","title":"Class Phalcon\\Assets\\Collection","text":"<p>implements Countable, Iterator, Traversable</p> <p>Source on GitHub</p> <p>Represents a collection of resources</p>"},{"location":"api/Phalcon_Assets/#methods","title":"Methods","text":"<p>public  getPrefix ()</p> <p>...</p> <p>public  getLocal ()</p> <p>...</p> <p>public  getResources ()</p> <p>...</p> <p>public  getCodes ()</p> <p>...</p> <p>public  getPosition ()</p> <p>...</p> <p>public  getFilters ()</p> <p>...</p> <p>public  getAttributes ()</p> <p>...</p> <p>public  getJoin ()</p> <p>...</p> <p>public  getTargetUri ()</p> <p>...</p> <p>public  getTargetPath ()</p> <p>...</p> <p>public  getTargetLocal ()</p> <p>...</p> <p>public  getSourcePath ()</p> <p>...</p> <p>public  __construct ()</p> <p>Phalcon\\Assets\\Collection constructor</p> <p>public  add (Phalcon\\Assets\\Resource $resource)</p> <p>Adds a resource to the collection</p> <p>public  addInline (Phalcon\\Assets\\Inline $code)</p> <p>Adds an inline code to the collection</p> <p>public  has (Phalcon\\Assets\\ResourceInterface $resource)</p> <p>Checks this the resource is added to the collection.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Assets\\Resource;\nuse Phalcon\\Assets\\Collection;\n\n$collection = new Collection();\n\n$resource = new Resource(\"js\", \"js/jquery.js\");\n$resource-&gt;has($resource); // true\n</code></pre> <p>public  addCss (mixed $path, [mixed $local], [mixed $filter], [mixed $attributes])</p> <p>Adds a CSS resource to the collection</p> <p>public  addInlineCss (mixed $content, [mixed $filter], [mixed $attributes])</p> <p>Adds an inline CSS to the collection</p> <p>public Phalcon\\Assets\\Collection addJs (string $path, [boolean $local], [boolean $filter], [array $attributes])</p> <p>Adds a javascript resource to the collection</p> <p>public  addInlineJs (mixed $content, [mixed $filter], [mixed $attributes])</p> <p>Adds an inline javascript to the collection</p> <p>public  count ()</p> <p>Returns the number of elements in the form</p> <p>public  rewind ()</p> <p>Rewinds the internal iterator</p> <p>public  current ()</p> <p>Returns the current resource in the iterator</p> <p>public int key ()</p> <p>Returns the current position/key in the iterator</p> <p>public  next ()</p> <p>Moves the internal iteration pointer to the next position</p> <p>public  valid ()</p> <p>Check if the current element in the iterator is valid</p> <p>public  setTargetPath (mixed $targetPath)</p> <p>Sets the target path of the file for the filtered/join output</p> <p>public  setSourcePath (mixed $sourcePath)</p> <p>Sets a base source path for all the resources in this collection</p> <p>public  setTargetUri (mixed $targetUri)</p> <p>Sets a target uri for the generated HTML</p> <p>public  setPrefix (mixed $prefix)</p> <p>Sets a common prefix for all the resources</p> <p>public  setLocal (mixed $local)</p> <p>Sets if the collection uses local resources by default</p> <p>public  setAttributes (array $attributes)</p> <p>Sets extra HTML attributes</p> <p>public  setFilters (array $filters)</p> <p>Sets an array of filters in the collection</p> <p>public  setTargetLocal (mixed $targetLocal)</p> <p>Sets the target local</p> <p>public  join (mixed $join)</p> <p>Sets if all filtered resources in the collection must be joined in a single result file</p> <p>public  getRealTargetPath (mixed $basePath)</p> <p>Returns the complete location where the joined/filtered collection must be written</p> <p>public  addFilter (Phalcon\\Assets\\FilterInterface $filter)</p> <p>Adds a filter to the collection</p> <p>final protected  addResource (Phalcon\\Assets\\ResourceInterface $resource)</p> <p>Adds a resource or inline-code to the collection</p>"},{"location":"api/Phalcon_Assets/#class-phalconassetsexception","title":"Class Phalcon\\Assets\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Assets/#methods_1","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Assets/#interface-phalconassetsfilterinterface","title":"Interface Phalcon\\Assets\\FilterInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Assets/#methods_2","title":"Methods","text":"<p>abstract public  filter (mixed $content)</p> <p>...</p>"},{"location":"api/Phalcon_Assets/#class-phalconassetsfilterscssmin","title":"Class Phalcon\\Assets\\Filters\\Cssmin","text":"<p>implements Phalcon\\Assets\\FilterInterface</p> <p>Source on GitHub</p> <p>Minify the css - removes comments removes newlines and line feeds keeping removes last semicolon from last property</p>"},{"location":"api/Phalcon_Assets/#methods_3","title":"Methods","text":"<p>public  filter (mixed $content)</p> <p>Filters the content using CSSMIN</p>"},{"location":"api/Phalcon_Assets/#class-phalconassetsfiltersjsmin","title":"Class Phalcon\\Assets\\Filters\\Jsmin","text":"<p>implements Phalcon\\Assets\\FilterInterface</p> <p>Source on GitHub</p> <p>Deletes the characters which are insignificant to JavaScript. Comments will be removed. Tabs will be replaced with spaces. Carriage returns will be replaced with linefeeds. Most spaces and linefeeds will be removed.</p>"},{"location":"api/Phalcon_Assets/#methods_4","title":"Methods","text":"<p>public  filter (mixed $content)</p> <p>Filters the content using JSMIN</p>"},{"location":"api/Phalcon_Assets/#class-phalconassetsfiltersnone","title":"Class Phalcon\\Assets\\Filters\\None","text":"<p>implements Phalcon\\Assets\\FilterInterface</p> <p>Source on GitHub</p> <p>Returns the content without make any modification to the original source</p>"},{"location":"api/Phalcon_Assets/#methods_5","title":"Methods","text":"<p>public  filter (mixed $content)</p> <p>Returns the content without be touched</p>"},{"location":"api/Phalcon_Assets/#class-phalconassetsinline","title":"Class Phalcon\\Assets\\Inline","text":"<p>implements Phalcon\\Assets\\ResourceInterface</p> <p>Source on GitHub</p> <p>Represents an inline asset</p> <pre><code>&lt;?php\n\n$inline = new \\Phalcon\\Assets\\Inline(\"js\", \"alert('hello world');\");\n</code></pre>"},{"location":"api/Phalcon_Assets/#methods_6","title":"Methods","text":"<p>public  getType ()</p> <p>...</p> <p>public  getContent ()</p> <p>...</p> <p>public  getFilter ()</p> <p>...</p> <p>public  getAttributes ()</p> <p>...</p> <p>public  __construct (string $type, string $content, [boolean $filter], [array $attributes])</p> <p>Phalcon\\Assets\\Inline constructor</p> <p>public  setType (mixed $type)</p> <p>Sets the inline's type</p> <p>public  setFilter (mixed $filter)</p> <p>Sets if the resource must be filtered or not</p> <p>public  setAttributes (array $attributes)</p> <p>Sets extra HTML attributes</p> <p>public  getResourceKey ()</p> <p>Gets the resource's key.</p>"},{"location":"api/Phalcon_Assets/#class-phalconassetsinlinecss","title":"Class Phalcon\\Assets\\Inline\\Css","text":"<p>extends class Phalcon\\Assets\\Inline</p> <p>implements Phalcon\\Assets\\ResourceInterface</p> <p>Source on GitHub</p> <p>Represents an inlined CSS</p>"},{"location":"api/Phalcon_Assets/#methods_7","title":"Methods","text":"<p>public  __construct (string $content, [boolean $filter], [array $attributes])</p> <p>Phalcon\\Assets\\Inline\\Css Constructor</p> <p>public string getType () inherited from Phalcon\\Assets\\Inline</p> <p>Gets the resource's type.</p> <p>public string getContent () inherited from Phalcon\\Assets\\Inline</p> <p>Gets the content.</p> <p>public boolean getFilter () inherited from Phalcon\\Assets\\Inline</p> <p>Gets if the resource must be filtered or not.</p> <p>public array getAttributes () inherited from Phalcon\\Assets\\Inline</p> <p>Gets extra HTML attributes.</p> <p>public self setType (string $type) inherited from Phalcon\\Assets\\Inline</p> <p>Sets the inline's type</p> <p>public self setFilter (boolean $filter) inherited from Phalcon\\Assets\\Inline</p> <p>Sets if the resource must be filtered or not</p> <p>public self setAttributes (array $attributes) inherited from Phalcon\\Assets\\Inline</p> <p>Sets extra HTML attributes</p> <p>public string getResourceKey () inherited from Phalcon\\Assets\\Inline</p> <p>Gets the resource's key.</p>"},{"location":"api/Phalcon_Assets/#class-phalconassetsinlinejs","title":"Class Phalcon\\Assets\\Inline\\Js","text":"<p>extends class Phalcon\\Assets\\Inline</p> <p>implements Phalcon\\Assets\\ResourceInterface</p> <p>Source on GitHub</p> <p>Represents an inline Javascript</p>"},{"location":"api/Phalcon_Assets/#methods_8","title":"Methods","text":"<p>public  __construct (string $content, [boolean $filter], [array $attributes])</p> <p>public  getType () inherited from Phalcon\\Assets\\Inline</p> <p>...</p> <p>public  getContent () inherited from Phalcon\\Assets\\Inline</p> <p>...</p> <p>public  getFilter () inherited from Phalcon\\Assets\\Inline</p> <p>...</p> <p>public  getAttributes () inherited from Phalcon\\Assets\\Inline</p> <p>...</p> <p>public  setType (mixed $type) inherited from Phalcon\\Assets\\Inline</p> <p>Sets the inline's type</p> <p>public  setFilter (mixed $filter) inherited from Phalcon\\Assets\\Inline</p> <p>Sets if the resource must be filtered or not</p> <p>public  setAttributes (array $attributes) inherited from Phalcon\\Assets\\Inline</p> <p>Sets extra HTML attributes</p> <p>public  getResourceKey () inherited from Phalcon\\Assets\\Inline</p> <p>Gets the resource's key.</p>"},{"location":"api/Phalcon_Assets/#class-phalconassetsmanager","title":"Class Phalcon\\Assets\\Manager","text":"<p>Source on GitHub</p> <p>Manages collections of CSS/Javascript assets</p>"},{"location":"api/Phalcon_Assets/#methods_9","title":"Methods","text":"<p>public  __construct ([array $options])</p> <p>public  setOptions (array $options)</p> <p>Sets the manager options</p> <p>public  getOptions ()</p> <p>Returns the manager options</p> <p>public  useImplicitOutput (mixed $implicitOutput)</p> <p>Sets if the HTML generated must be directly printed or returned</p> <p>public  addCss (mixed $path, [mixed $local], [mixed $filter], [mixed $attributes])</p> <p>Adds a Css resource to the 'css' collection</p> <pre><code>&lt;?php\n\n$assets-&gt;addCss(\"css/bootstrap.css\");\n$assets-&gt;addCss(\"https://bootstrap.my-cdn.com/style.css\", false);\n</code></pre> <p>public  addInlineCss (mixed $content, [mixed $filter], [mixed $attributes])</p> <p>Adds an inline Css to the 'css' collection</p> <p>public  addJs (mixed $path, [mixed $local], [mixed $filter], [mixed $attributes])</p> <p>Adds a javascript resource to the 'js' collection</p> <pre><code>&lt;?php\n\n$assets-&gt;addJs(\"scripts/jquery.js\");\n$assets-&gt;addJs(\"https://jquery.my-cdn.com/jquery.js\", false);\n</code></pre> <p>public  addInlineJs (mixed $content, [mixed $filter], [mixed $attributes])</p> <p>Adds an inline javascript to the 'js' collection</p> <p>public  addResourceByType (mixed $type, Phalcon\\Assets\\Resource $resource)</p> <p>Adds a resource by its type</p> <pre><code>&lt;?php\n\n$assets-&gt;addResourceByType(\"css\",\n    new \\Phalcon\\Assets\\Resource\\Css(\"css/style.css\")\n);\n</code></pre> <p>public  addInlineCodeByType (mixed $type, Phalcon\\Assets\\Inline $code)</p> <p>Adds an inline code by its type</p> <p>public  addResource (Phalcon\\Assets\\Resource $resource)</p> <p>Adds a raw resource to the manager</p> <pre><code>&lt;?php\n\n$assets-&gt;addResource(\n    new Phalcon\\Assets\\Resource(\"css\", \"css/style.css\")\n);\n</code></pre> <p>public  addInlineCode (Phalcon\\Assets\\Inline $code)</p> <p>Adds a raw inline code to the manager</p> <p>public  set (mixed $id, Phalcon\\Assets\\Collection $collection)</p> <p>Sets a collection in the Assets Manager</p> <pre><code>&lt;?php\n\n$assets-&gt;set(\"js\", $collection);\n</code></pre> <p>public  get (mixed $id)</p> <p>Returns a collection by its id.</p> <pre><code>&lt;?php\n\n$scripts = $assets-&gt;get(\"js\");\n</code></pre> <p>public  getCss ()</p> <p>Returns the CSS collection of assets</p> <p>public  getJs ()</p> <p>Returns the CSS collection of assets</p> <p>public  collection (mixed $name)</p> <p>Creates/Returns a collection of resources</p> <p>public  output (Phalcon\\Assets\\Collection $collection, callback $callback, string $type)</p> <p>Traverses a collection calling the callback to generate its HTML</p> <p>public  outputInline (Phalcon\\Assets\\Collection $collection, string $type)</p> <p>Traverses a collection and generate its HTML</p> <p>public  outputCss ([string $collectionName])</p> <p>Prints the HTML for CSS resources</p> <p>public  outputInlineCss ([string $collectionName])</p> <p>Prints the HTML for inline CSS</p> <p>public  outputJs ([string $collectionName])</p> <p>Prints the HTML for JS resources</p> <p>public  outputInlineJs ([string $collectionName])</p> <p>Prints the HTML for inline JS</p> <p>public  getCollections ()</p> <p>Returns existing collections in the manager</p> <p>public  exists (mixed $id)</p> <p>Returns true or false if collection exists.</p> <pre><code>&lt;?php\n\nif ($assets-&gt;exists(\"jsHeader\")) {\n    // \\Phalcon\\Assets\\Collection\n    $collection = $assets-&gt;get(\"jsHeader\");\n}\n</code></pre>"},{"location":"api/Phalcon_Assets/#class-phalconassetsresource","title":"Class Phalcon\\Assets\\Resource","text":"<p>implements Phalcon\\Assets\\ResourceInterface</p> <p>Source on GitHub</p> <p>Represents an asset resource</p> <pre><code>&lt;?php\n\n$resource = new \\Phalcon\\Assets\\Resource(\"js\", \"javascripts/jquery.js\");\n</code></pre>"},{"location":"api/Phalcon_Assets/#methods_10","title":"Methods","text":"<p>public  getType ()</p> <p>public  getPath ()</p> <p>public  getLocal ()</p> <p>public  getFilter ()</p> <p>public  getAttributes ()</p> <p>public  getSourcePath ()</p> <p>...</p> <p>public  getTargetPath ()</p> <p>...</p> <p>public  getTargetUri ()</p> <p>...</p> <p>public  __construct (string $type, string $path, [boolean $local], [boolean $filter], [array $attributes])</p> <p>Phalcon\\Assets\\Resource constructor</p> <p>public  setType (mixed $type)</p> <p>Sets the resource's type</p> <p>public  setPath (mixed $path)</p> <p>Sets the resource's path</p> <p>public  setLocal (mixed $local)</p> <p>Sets if the resource is local or external</p> <p>public  setFilter (mixed $filter)</p> <p>Sets if the resource must be filtered or not</p> <p>public  setAttributes (array $attributes)</p> <p>Sets extra HTML attributes</p> <p>public  setTargetUri (mixed $targetUri)</p> <p>Sets a target uri for the generated HTML</p> <p>public  setSourcePath (mixed $sourcePath)</p> <p>Sets the resource's source path</p> <p>public  setTargetPath (mixed $targetPath)</p> <p>Sets the resource's target path</p> <p>public  getContent ([mixed $basePath])</p> <p>Returns the content of the resource as an string Optionally a base path where the resource is located can be set</p> <p>public  getRealTargetUri ()</p> <p>Returns the real target uri for the generated HTML</p> <p>public  getRealSourcePath ([mixed $basePath])</p> <p>Returns the complete location where the resource is located</p> <p>public  getRealTargetPath ([mixed $basePath])</p> <p>Returns the complete location where the resource must be written</p> <p>public  getResourceKey ()</p> <p>Gets the resource's key.</p>"},{"location":"api/Phalcon_Assets/#class-phalconassetsresourcecss","title":"Class Phalcon\\Assets\\Resource\\Css","text":"<p>extends class Phalcon\\Assets\\Resource</p> <p>implements Phalcon\\Assets\\ResourceInterface</p> <p>Source on GitHub</p> <p>Represents CSS resources</p>"},{"location":"api/Phalcon_Assets/#methods_11","title":"Methods","text":"<p>public  __construct (string $path, [boolean $local], [boolean $filter], [array $attributes])</p> <p>public  getType () inherited from Phalcon\\Assets\\Resource</p> <p>public  getPath () inherited from Phalcon\\Assets\\Resource</p> <p>public  getLocal () inherited from Phalcon\\Assets\\Resource</p> <p>public  getFilter () inherited from Phalcon\\Assets\\Resource</p> <p>public  getAttributes () inherited from Phalcon\\Assets\\Resource</p> <p>public  getSourcePath () inherited from Phalcon\\Assets\\Resource</p> <p>...</p> <p>public  getTargetPath () inherited from Phalcon\\Assets\\Resource</p> <p>...</p> <p>public  getTargetUri () inherited from Phalcon\\Assets\\Resource</p> <p>...</p> <p>public  setType (mixed $type) inherited from Phalcon\\Assets\\Resource</p> <p>Sets the resource's type</p> <p>public  setPath (mixed $path) inherited from Phalcon\\Assets\\Resource</p> <p>Sets the resource's path</p> <p>public  setLocal (mixed $local) inherited from Phalcon\\Assets\\Resource</p> <p>Sets if the resource is local or external</p> <p>public  setFilter (mixed $filter) inherited from Phalcon\\Assets\\Resource</p> <p>Sets if the resource must be filtered or not</p> <p>public  setAttributes (array $attributes) inherited from Phalcon\\Assets\\Resource</p> <p>Sets extra HTML attributes</p> <p>public  setTargetUri (mixed $targetUri) inherited from Phalcon\\Assets\\Resource</p> <p>Sets a target uri for the generated HTML</p> <p>public  setSourcePath (mixed $sourcePath) inherited from Phalcon\\Assets\\Resource</p> <p>Sets the resource's source path</p> <p>public  setTargetPath (mixed $targetPath) inherited from Phalcon\\Assets\\Resource</p> <p>Sets the resource's target path</p> <p>public  getContent ([mixed $basePath]) inherited from Phalcon\\Assets\\Resource</p> <p>Returns the content of the resource as an string Optionally a base path where the resource is located can be set</p> <p>public  getRealTargetUri () inherited from Phalcon\\Assets\\Resource</p> <p>Returns the real target uri for the generated HTML</p> <p>public  getRealSourcePath ([mixed $basePath]) inherited from Phalcon\\Assets\\Resource</p> <p>Returns the complete location where the resource is located</p> <p>public  getRealTargetPath ([mixed $basePath]) inherited from Phalcon\\Assets\\Resource</p> <p>Returns the complete location where the resource must be written</p> <p>public  getResourceKey () inherited from Phalcon\\Assets\\Resource</p> <p>Gets the resource's key.</p>"},{"location":"api/Phalcon_Assets/#class-phalconassetsresourcejs","title":"Class Phalcon\\Assets\\Resource\\Js","text":"<p>extends class Phalcon\\Assets\\Resource</p> <p>implements Phalcon\\Assets\\ResourceInterface</p> <p>Source on GitHub</p> <p>Represents Javascript resources</p>"},{"location":"api/Phalcon_Assets/#methods_12","title":"Methods","text":"<p>public  __construct (string $path, [boolean $local], [boolean $filter], [array $attributes])</p> <p>public  getType () inherited from Phalcon\\Assets\\Resource</p> <p>public  getPath () inherited from Phalcon\\Assets\\Resource</p> <p>public  getLocal () inherited from Phalcon\\Assets\\Resource</p> <p>public  getFilter () inherited from Phalcon\\Assets\\Resource</p> <p>public  getAttributes () inherited from Phalcon\\Assets\\Resource</p> <p>public  getSourcePath () inherited from Phalcon\\Assets\\Resource</p> <p>...</p> <p>public  getTargetPath () inherited from Phalcon\\Assets\\Resource</p> <p>...</p> <p>public  getTargetUri () inherited from Phalcon\\Assets\\Resource</p> <p>...</p> <p>public  setType (mixed $type) inherited from Phalcon\\Assets\\Resource</p> <p>Sets the resource's type</p> <p>public  setPath (mixed $path) inherited from Phalcon\\Assets\\Resource</p> <p>Sets the resource's path</p> <p>public  setLocal (mixed $local) inherited from Phalcon\\Assets\\Resource</p> <p>Sets if the resource is local or external</p> <p>public  setFilter (mixed $filter) inherited from Phalcon\\Assets\\Resource</p> <p>Sets if the resource must be filtered or not</p> <p>public  setAttributes (array $attributes) inherited from Phalcon\\Assets\\Resource</p> <p>Sets extra HTML attributes</p> <p>public  setTargetUri (mixed $targetUri) inherited from Phalcon\\Assets\\Resource</p> <p>Sets a target uri for the generated HTML</p> <p>public  setSourcePath (mixed $sourcePath) inherited from Phalcon\\Assets\\Resource</p> <p>Sets the resource's source path</p> <p>public  setTargetPath (mixed $targetPath) inherited from Phalcon\\Assets\\Resource</p> <p>Sets the resource's target path</p> <p>public  getContent ([mixed $basePath]) inherited from Phalcon\\Assets\\Resource</p> <p>Returns the content of the resource as an string Optionally a base path where the resource is located can be set</p> <p>public  getRealTargetUri () inherited from Phalcon\\Assets\\Resource</p> <p>Returns the real target uri for the generated HTML</p> <p>public  getRealSourcePath ([mixed $basePath]) inherited from Phalcon\\Assets\\Resource</p> <p>Returns the complete location where the resource is located</p> <p>public  getRealTargetPath ([mixed $basePath]) inherited from Phalcon\\Assets\\Resource</p> <p>Returns the complete location where the resource must be written</p> <p>public  getResourceKey () inherited from Phalcon\\Assets\\Resource</p> <p>Gets the resource's key.</p>"},{"location":"api/Phalcon_Assets/#interface-phalconassetsresourceinterface","title":"Interface Phalcon\\Assets\\ResourceInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Assets/#methods_13","title":"Methods","text":"<p>abstract public  setType (mixed $type)</p> <p>...</p> <p>abstract public  getType ()</p> <p>...</p> <p>abstract public  setFilter (mixed $filter)</p> <p>...</p> <p>abstract public  getFilter ()</p> <p>...</p> <p>abstract public  setAttributes (array $attributes)</p> <p>...</p> <p>abstract public  getAttributes ()</p> <p>...</p> <p>abstract public  getResourceKey ()</p> <p>...</p>"},{"location":"api/Phalcon_Cache/","title":"Abstract class Phalcon\\Cache\\Backend","text":"<p>implements Phalcon\\Cache\\BackendInterface</p> <p>Source on GitHub</p> <p>This class implements common functionality for backend adapters. A backend cache adapter may extend this class</p>"},{"location":"api/Phalcon_Cache/#methods","title":"Methods","text":"<p>public  getFrontend ()</p> <p>...</p> <p>public  setFrontend (mixed $frontend)</p> <p>...</p> <p>public  getOptions ()</p> <p>...</p> <p>public  setOptions (mixed $options)</p> <p>...</p> <p>public  getLastKey ()</p> <p>...</p> <p>public  setLastKey (mixed $lastKey)</p> <p>...</p> <p>public  __construct (Phalcon\\Cache\\FrontendInterface $frontend, [array $options])</p> <p>Phalcon\\Cache\\Backend constructor</p> <p>public mixed start (int | string $keyName, [int $lifetime])</p> <p>Starts a cache. The keyname allows to identify the created fragment</p> <p>public  stop ([mixed $stopBuffer])</p> <p>Stops the frontend without store any cached content</p> <p>public  isFresh ()</p> <p>Checks whether the last cache is fresh or cached</p> <p>public  isStarted ()</p> <p>Checks whether the cache has starting buffering or not</p> <p>public int getLifetime ()</p> <p>Gets the last lifetime set</p> <p>abstract public  get (mixed $keyName, [mixed $lifetime]) inherited from Phalcon\\Cache\\BackendInterface</p> <p>...</p> <p>abstract public  save ([mixed $keyName], [mixed $content], [mixed $lifetime], [mixed $stopBuffer]) inherited from Phalcon\\Cache\\BackendInterface</p> <p>...</p> <p>abstract public  delete (mixed $keyName) inherited from Phalcon\\Cache\\BackendInterface</p> <p>...</p> <p>abstract public  queryKeys ([mixed $prefix]) inherited from Phalcon\\Cache\\BackendInterface</p> <p>...</p> <p>abstract public  exists ([mixed $keyName], [mixed $lifetime]) inherited from Phalcon\\Cache\\BackendInterface</p> <p>...</p>"},{"location":"api/Phalcon_Cache/#class-phalconcachebackendapc","title":"Class Phalcon\\Cache\\Backend\\Apc","text":"<p>extends abstract class Phalcon\\Cache\\Backend</p> <p>implements Phalcon\\Cache\\BackendInterface</p> <p>Source on GitHub</p> <p>Allows to cache output fragments, PHP data and raw data using an APC backend</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Backend\\Apc;\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n// Cache data for 2 days\n$frontCache = new FrontData(\n    [\n        \"lifetime\" =&gt; 172800,\n    ]\n);\n\n$cache = new Apc(\n    $frontCache,\n    [\n        \"prefix\" =&gt; \"app-data\",\n    ]\n);\n\n// Cache arbitrary data\n$cache-&gt;save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// Get data\n$data = $cache-&gt;get(\"my-data\");\n</code></pre>"},{"location":"api/Phalcon_Cache/#methods_1","title":"Methods","text":"<p>public  get (mixed $keyName, [mixed $lifetime])</p> <p>Returns a cached content</p> <p>public  save ([string | int $keyName], [string $content], [int $lifetime], [boolean $stopBuffer])</p> <p>Stores cached content into the APC backend and stops the frontend</p> <p>public  increment ([string $keyName], [mixed $value])</p> <p>Increment of a given key, by number $value</p> <p>public  decrement ([string $keyName], [mixed $value])</p> <p>Decrement of a given key, by number $value</p> <p>public  delete (mixed $keyName)</p> <p>Deletes a value from the cache by its key</p> <p>public  queryKeys ([mixed $prefix])</p> <p>Query the existing cached keys.</p> <pre><code>&lt;?php\n\n$cache-&gt;save(\"users-ids\", [1, 2, 3]);\n$cache-&gt;save(\"projects-ids\", [4, 5, 6]);\n\nvar_dump($cache-&gt;queryKeys(\"users\")); // [\"users-ids\"]\n</code></pre> <p>public  exists ([string | int $keyName], [int $lifetime])</p> <p>Checks if cache exists and it hasn't expired</p> <p>public  flush ()</p> <p>Immediately invalidates all existing items.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Backend\\Apc;\n\n$cache = new Apc($frontCache, [\"prefix\" =&gt; \"app-data\"]);\n\n$cache-&gt;save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// 'my-data' and all other used keys are deleted\n$cache-&gt;flush();\n</code></pre> <p>public  getFrontend () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setFrontend (mixed $frontend) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  getOptions () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setOptions (mixed $options) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  getLastKey () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setLastKey (mixed $lastKey) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  __construct (Phalcon\\Cache\\FrontendInterface $frontend, [array $options]) inherited from Phalcon\\Cache\\Backend</p> <p>Phalcon\\Cache\\Backend constructor</p> <p>public mixed start (int | string $keyName, [int $lifetime]) inherited from Phalcon\\Cache\\Backend</p> <p>Starts a cache. The keyname allows to identify the created fragment</p> <p>public  stop ([mixed $stopBuffer]) inherited from Phalcon\\Cache\\Backend</p> <p>Stops the frontend without store any cached content</p> <p>public  isFresh () inherited from Phalcon\\Cache\\Backend</p> <p>Checks whether the last cache is fresh or cached</p> <p>public  isStarted () inherited from Phalcon\\Cache\\Backend</p> <p>Checks whether the cache has starting buffering or not</p> <p>public int getLifetime () inherited from Phalcon\\Cache\\Backend</p> <p>Gets the last lifetime set</p>"},{"location":"api/Phalcon_Cache/#class-phalconcachebackendapcu","title":"Class Phalcon\\Cache\\Backend\\Apcu","text":"<p>extends abstract class Phalcon\\Cache\\Backend</p> <p>implements Phalcon\\Cache\\BackendInterface</p> <p>Source on GitHub</p> <p>Allows to cache output fragments, PHP data and raw data using an APCu backend</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Backend\\Apcu;\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n// Cache data for 2 days\n$frontCache = new FrontData(\n    [\n        \"lifetime\" =&gt; 172800,\n    ]\n);\n\n$cache = new Apcu(\n    $frontCache,\n    [\n        \"prefix\" =&gt; \"app-data\",\n    ]\n);\n\n// Cache arbitrary data\n$cache-&gt;save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// Get data\n$data = $cache-&gt;get(\"my-data\");\n</code></pre>"},{"location":"api/Phalcon_Cache/#methods_2","title":"Methods","text":"<p>public  get (mixed $keyName, [mixed $lifetime])</p> <p>Returns a cached content</p> <p>public  save ([string | int $keyName], [string $content], [int $lifetime], [boolean $stopBuffer])</p> <p>Stores cached content into the APCu backend and stops the frontend</p> <p>public  increment ([string $keyName], [mixed $value])</p> <p>Increment of a given key, by number $value</p> <p>public  decrement ([string $keyName], [mixed $value])</p> <p>Decrement of a given key, by number $value</p> <p>public  delete (mixed $keyName)</p> <p>Deletes a value from the cache by its key</p> <p>public  queryKeys ([mixed $prefix])</p> <p>Query the existing cached keys.</p> <pre><code>&lt;?php\n\n$cache-&gt;save(\"users-ids\", [1, 2, 3]);\n$cache-&gt;save(\"projects-ids\", [4, 5, 6]);\n\nvar_dump($cache-&gt;queryKeys(\"users\")); // [\"users-ids\"]\n</code></pre> <p>public  exists ([string | int $keyName], [int $lifetime])</p> <p>Checks if cache exists and it hasn't expired</p> <p>public  flush ()</p> <p>Immediately invalidates all existing items.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Backend\\Apcu;\n\n$cache = new Apcu($frontCache, [\"prefix\" =&gt; \"app-data\"]);\n\n$cache-&gt;save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// 'my-data' and all other used keys are deleted\n$cache-&gt;flush();\n</code></pre> <p>public  getFrontend () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setFrontend (mixed $frontend) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  getOptions () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setOptions (mixed $options) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  getLastKey () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setLastKey (mixed $lastKey) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  __construct (Phalcon\\Cache\\FrontendInterface $frontend, [array $options]) inherited from Phalcon\\Cache\\Backend</p> <p>Phalcon\\Cache\\Backend constructor</p> <p>public mixed start (int | string $keyName, [int $lifetime]) inherited from Phalcon\\Cache\\Backend</p> <p>Starts a cache. The keyname allows to identify the created fragment</p> <p>public  stop ([mixed $stopBuffer]) inherited from Phalcon\\Cache\\Backend</p> <p>Stops the frontend without store any cached content</p> <p>public  isFresh () inherited from Phalcon\\Cache\\Backend</p> <p>Checks whether the last cache is fresh or cached</p> <p>public  isStarted () inherited from Phalcon\\Cache\\Backend</p> <p>Checks whether the cache has starting buffering or not</p> <p>public int getLifetime () inherited from Phalcon\\Cache\\Backend</p> <p>Gets the last lifetime set</p>"},{"location":"api/Phalcon_Cache/#class-phalconcachebackendfactory","title":"Class Phalcon\\Cache\\Backend\\Factory","text":"<p>extends abstract class Phalcon\\Factory</p> <p>implements Phalcon\\FactoryInterface</p> <p>Source on GitHub</p> <p>Loads Backend Cache Adapter class using 'adapter' option, if frontend will be provided as array it will call Frontend Cache Factory</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Backend\\Factory;\nuse Phalcon\\Cache\\Frontend\\Data;\n\n$options = [\n    \"prefix\"   =&gt; \"app-data\",\n    \"frontend\" =&gt; new Data(),\n    \"adapter\"  =&gt; \"apc\",\n];\n$backendCache = Factory::load($options);\n</code></pre>"},{"location":"api/Phalcon_Cache/#methods_3","title":"Methods","text":"<p>public static  load (Phalcon\\Config | array $config)</p> <p>protected static  loadClass (mixed $namespace, mixed $config)</p> <p>...</p>"},{"location":"api/Phalcon_Cache/#class-phalconcachebackendfile","title":"Class Phalcon\\Cache\\Backend\\File","text":"<p>extends abstract class Phalcon\\Cache\\Backend</p> <p>implements Phalcon\\Cache\\BackendInterface</p> <p>Source on GitHub</p> <p>Allows to cache output fragments using a file backend</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Backend\\File;\nuse Phalcon\\Cache\\Frontend\\Output as FrontOutput;\n\n// Cache the file for 2 days\n$frontendOptions = [\n    \"lifetime\" =&gt; 172800,\n];\n\n// Create an output cache\n$frontCache = FrontOutput($frontOptions);\n\n// Set the cache directory\n$backendOptions = [\n    \"cacheDir\" =&gt; \"../app/cache/\",\n];\n\n// Create the File backend\n$cache = new File($frontCache, $backendOptions);\n\n$content = $cache-&gt;start(\"my-cache\");\n\nif ($content === null) {\n    echo \"&lt;h1&gt;\", time(), \"&lt;/h1&gt;\";\n\n    $cache-&gt;save();\n} else {\n    echo $content;\n}\n</code></pre>"},{"location":"api/Phalcon_Cache/#methods_4","title":"Methods","text":"<p>public  __construct (Phalcon\\Cache\\FrontendInterface $frontend, array $options)</p> <p>Phalcon\\Cache\\Backend\\File constructor</p> <p>public  get (mixed $keyName, [mixed $lifetime])</p> <p>Returns a cached content</p> <p>public  save ([int | string $keyName], [string $content], [int $lifetime], [boolean $stopBuffer])</p> <p>Stores cached content into the file backend and stops the frontend</p> <p>public  delete (int | string $keyName)</p> <p>Deletes a value from the cache by its key</p> <p>public  queryKeys ([mixed $prefix])</p> <p>Query the existing cached keys.</p> <pre><code>&lt;?php\n\n$cache-&gt;save(\"users-ids\", [1, 2, 3]);\n$cache-&gt;save(\"projects-ids\", [4, 5, 6]);\n\nvar_dump($cache-&gt;queryKeys(\"users\")); // [\"users-ids\"]\n</code></pre> <p>public  exists ([string | int $keyName], [int $lifetime])</p> <p>Checks if cache exists and it isn't expired</p> <p>public  increment ([string | int $keyName], [mixed $value])</p> <p>Increment of a given key, by number $value</p> <p>public  decrement ([string | int $keyName], [mixed $value])</p> <p>Decrement of a given key, by number $value</p> <p>public  flush ()</p> <p>Immediately invalidates all existing items.</p> <p>public  getKey (mixed $key)</p> <p>Return a file-system safe identifier for a given key</p> <p>public  useSafeKey (mixed $useSafeKey)</p> <p>Set whether to use the safekey or not</p> <p>public  getFrontend () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setFrontend (mixed $frontend) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  getOptions () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setOptions (mixed $options) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  getLastKey () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setLastKey (mixed $lastKey) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public mixed start (int | string $keyName, [int $lifetime]) inherited from Phalcon\\Cache\\Backend</p> <p>Starts a cache. The keyname allows to identify the created fragment</p> <p>public  stop ([mixed $stopBuffer]) inherited from Phalcon\\Cache\\Backend</p> <p>Stops the frontend without store any cached content</p> <p>public  isFresh () inherited from Phalcon\\Cache\\Backend</p> <p>Checks whether the last cache is fresh or cached</p> <p>public  isStarted () inherited from Phalcon\\Cache\\Backend</p> <p>Checks whether the cache has starting buffering or not</p> <p>public int getLifetime () inherited from Phalcon\\Cache\\Backend</p> <p>Gets the last lifetime set</p>"},{"location":"api/Phalcon_Cache/#class-phalconcachebackendlibmemcached","title":"Class Phalcon\\Cache\\Backend\\Libmemcached","text":"<p>extends abstract class Phalcon\\Cache\\Backend</p> <p>implements Phalcon\\Cache\\BackendInterface</p> <p>Source on GitHub</p> <p>Allows to cache output fragments, PHP data or raw data to a libmemcached backend. Per default persistent memcached connection pools are used.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Backend\\Libmemcached;\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n// Cache data for 2 days\n$frontCache = new FrontData(\n    [\n        \"lifetime\" =&gt; 172800,\n    ]\n);\n\n// Create the Cache setting memcached connection options\n$cache = new Libmemcached(\n    $frontCache,\n    [\n        \"servers\" =&gt; [\n            [\n                \"host\"   =&gt; \"127.0.0.1\",\n                \"port\"   =&gt; 11211,\n                \"weight\" =&gt; 1,\n            ],\n        ],\n        \"client\" =&gt; [\n            \\Memcached::OPT_HASH       =&gt; \\Memcached::HASH_MD5,\n            \\Memcached::OPT_PREFIX_KEY =&gt; \"prefix.\",\n        ],\n    ]\n);\n\n// Cache arbitrary data\n$cache-&gt;save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// Get data\n$data = $cache-&gt;get(\"my-data\");\n</code></pre>"},{"location":"api/Phalcon_Cache/#methods_5","title":"Methods","text":"<p>public  __construct (Phalcon\\Cache\\FrontendInterface $frontend, [array $options])</p> <p>Phalcon\\Cache\\Backend\\Memcache constructor</p> <p>public  _connect ()</p> <p>Create internal connection to memcached</p> <p>public  get (mixed $keyName, [mixed $lifetime])</p> <p>Returns a cached content</p> <p>public  save ([int | string $keyName], [string $content], [int $lifetime], [boolean $stopBuffer])</p> <p>Stores cached content into the file backend and stops the frontend</p> <p>public boolean delete (int | string $keyName)</p> <p>Deletes a value from the cache by its key</p> <p>public  queryKeys ([mixed $prefix])</p> <p>Query the existing cached keys.</p> <pre><code>&lt;?php\n\n$cache-&gt;save(\"users-ids\", [1, 2, 3]);\n$cache-&gt;save(\"projects-ids\", [4, 5, 6]);\n\nvar_dump($cache-&gt;queryKeys(\"users\")); // [\"users-ids\"]\n</code></pre> <p>public  exists ([string $keyName], [int $lifetime])</p> <p>Checks if cache exists and it isn't expired</p> <p>public  increment ([string $keyName], [mixed $value])</p> <p>Increment of given $keyName by $value</p> <p>public  decrement ([string $keyName], [mixed $value])</p> <p>Decrement of $keyName by given $value</p> <p>public  flush ()</p> <p>Immediately invalidates all existing items. Memcached does not support flush() per default. If you require flush() support, set $config[\"statsKey\"]. All modified keys are stored in \"statsKey\". Note: statsKey has a negative performance impact.</p> <pre><code>&lt;?php\n\n$cache = new \\Phalcon\\Cache\\Backend\\Libmemcached(\n    $frontCache,\n    [\n        \"statsKey\" =&gt; \"_PHCM\",\n    ]\n);\n\n$cache-&gt;save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// 'my-data' and all other used keys are deleted\n$cache-&gt;flush();\n</code></pre> <p>public  getFrontend () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setFrontend (mixed $frontend) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  getOptions () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setOptions (mixed $options) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  getLastKey () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setLastKey (mixed $lastKey) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public mixed start (int | string $keyName, [int $lifetime]) inherited from Phalcon\\Cache\\Backend</p> <p>Starts a cache. The keyname allows to identify the created fragment</p> <p>public  stop ([mixed $stopBuffer]) inherited from Phalcon\\Cache\\Backend</p> <p>Stops the frontend without store any cached content</p> <p>public  isFresh () inherited from Phalcon\\Cache\\Backend</p> <p>Checks whether the last cache is fresh or cached</p> <p>public  isStarted () inherited from Phalcon\\Cache\\Backend</p> <p>Checks whether the cache has starting buffering or not</p> <p>public int getLifetime () inherited from Phalcon\\Cache\\Backend</p> <p>Gets the last lifetime set</p>"},{"location":"api/Phalcon_Cache/#class-phalconcachebackendmemcache","title":"Class Phalcon\\Cache\\Backend\\Memcache","text":"<p>extends abstract class Phalcon\\Cache\\Backend</p> <p>implements Phalcon\\Cache\\BackendInterface</p> <p>Source on GitHub</p> <p>Allows to cache output fragments, PHP data or raw data to a memcache backend</p> <p>This adapter uses the special memcached key \"_PHCM\" to store all the keys internally used by the adapter</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Backend\\Memcache;\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n// Cache data for 2 days\n$frontCache = new FrontData(\n    [\n        \"lifetime\" =&gt; 172800,\n    ]\n);\n\n// Create the Cache setting memcached connection options\n$cache = new Memcache(\n    $frontCache,\n    [\n        \"host\"       =&gt; \"localhost\",\n        \"port\"       =&gt; 11211,\n        \"persistent\" =&gt; false,\n    ]\n);\n\n// Cache arbitrary data\n$cache-&gt;save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// Get data\n$data = $cache-&gt;get(\"my-data\");\n</code></pre>"},{"location":"api/Phalcon_Cache/#methods_6","title":"Methods","text":"<p>public  __construct (Phalcon\\Cache\\FrontendInterface $frontend, [array $options])</p> <p>Phalcon\\Cache\\Backend\\Memcache constructor</p> <p>public  _connect ()</p> <p>Create internal connection to memcached</p> <p>public  addServers (mixed $host, mixed $port, [mixed $persistent])</p> <p>Add servers to memcache pool</p> <p>public  get (mixed $keyName, [mixed $lifetime])</p> <p>Returns a cached content</p> <p>public  save ([int | string $keyName], [string $content], [int $lifetime], [boolean $stopBuffer])</p> <p>Stores cached content into the file backend and stops the frontend</p> <p>public boolean delete (int | string $keyName)</p> <p>Deletes a value from the cache by its key</p> <p>public  queryKeys ([mixed $prefix])</p> <p>Query the existing cached keys.</p> <pre><code>&lt;?php\n\n$cache-&gt;save(\"users-ids\", [1, 2, 3]);\n$cache-&gt;save(\"projects-ids\", [4, 5, 6]);\n\nvar_dump($cache-&gt;queryKeys(\"users\")); // [\"users-ids\"]\n</code></pre> <p>public  exists ([string $keyName], [int $lifetime])</p> <p>Checks if cache exists and it isn't expired</p> <p>public  increment ([string $keyName], [mixed $value])</p> <p>Increment of given $keyName by $value</p> <p>public  decrement ([string $keyName], [mixed $value])</p> <p>Decrement of $keyName by given $value</p> <p>public  flush ()</p> <p>Immediately invalidates all existing items.</p> <p>public  getFrontend () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setFrontend (mixed $frontend) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  getOptions () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setOptions (mixed $options) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  getLastKey () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setLastKey (mixed $lastKey) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public mixed start (int | string $keyName, [int $lifetime]) inherited from Phalcon\\Cache\\Backend</p> <p>Starts a cache. The keyname allows to identify the created fragment</p> <p>public  stop ([mixed $stopBuffer]) inherited from Phalcon\\Cache\\Backend</p> <p>Stops the frontend without store any cached content</p> <p>public  isFresh () inherited from Phalcon\\Cache\\Backend</p> <p>Checks whether the last cache is fresh or cached</p> <p>public  isStarted () inherited from Phalcon\\Cache\\Backend</p> <p>Checks whether the cache has starting buffering or not</p> <p>public int getLifetime () inherited from Phalcon\\Cache\\Backend</p> <p>Gets the last lifetime set</p>"},{"location":"api/Phalcon_Cache/#class-phalconcachebackendmemory","title":"Class Phalcon\\Cache\\Backend\\Memory","text":"<p>extends abstract class Phalcon\\Cache\\Backend</p> <p>implements Phalcon\\Cache\\BackendInterface, Serializable</p> <p>Source on GitHub</p> <p>Stores content in memory. Data is lost when the request is finished</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Backend\\Memory;\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n// Cache data\n$frontCache = new FrontData();\n\n$cache = new Memory($frontCache);\n\n// Cache arbitrary data\n$cache-&gt;save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// Get data\n$data = $cache-&gt;get(\"my-data\");\n</code></pre>"},{"location":"api/Phalcon_Cache/#methods_7","title":"Methods","text":"<p>public  get (mixed $keyName, [mixed $lifetime])</p> <p>Returns a cached content</p> <p>public  save ([string $keyName], [string $content], [int $lifetime], [boolean $stopBuffer])</p> <p>Stores cached content into the backend and stops the frontend</p> <p>public boolean delete (string $keyName)</p> <p>Deletes a value from the cache by its key</p> <p>public  queryKeys ([mixed $prefix])</p> <p>Query the existing cached keys.</p> <pre><code>&lt;?php\n\n$cache-&gt;save(\"users-ids\", [1, 2, 3]);\n$cache-&gt;save(\"projects-ids\", [4, 5, 6]);\n\nvar_dump($cache-&gt;queryKeys(\"users\")); // [\"users-ids\"]\n</code></pre> <p>public  exists ([string | int $keyName], [int $lifetime])</p> <p>Checks if cache exists and it hasn't expired</p> <p>public  increment ([string $keyName], [mixed $value])</p> <p>Increment of given $keyName by $value</p> <p>public  decrement ([string $keyName], [mixed $value])</p> <p>Decrement of $keyName by given $value</p> <p>public  flush ()</p> <p>Immediately invalidates all existing items.</p> <p>public  serialize ()</p> <p>Required for interface \\Serializable</p> <p>public  unserialize (mixed $data)</p> <p>Required for interface \\Serializable</p> <p>public  getFrontend () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setFrontend (mixed $frontend) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  getOptions () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setOptions (mixed $options) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  getLastKey () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setLastKey (mixed $lastKey) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  __construct (Phalcon\\Cache\\FrontendInterface $frontend, [array $options]) inherited from Phalcon\\Cache\\Backend</p> <p>Phalcon\\Cache\\Backend constructor</p> <p>public mixed start (int | string $keyName, [int $lifetime]) inherited from Phalcon\\Cache\\Backend</p> <p>Starts a cache. The keyname allows to identify the created fragment</p> <p>public  stop ([mixed $stopBuffer]) inherited from Phalcon\\Cache\\Backend</p> <p>Stops the frontend without store any cached content</p> <p>public  isFresh () inherited from Phalcon\\Cache\\Backend</p> <p>Checks whether the last cache is fresh or cached</p> <p>public  isStarted () inherited from Phalcon\\Cache\\Backend</p> <p>Checks whether the cache has starting buffering or not</p> <p>public int getLifetime () inherited from Phalcon\\Cache\\Backend</p> <p>Gets the last lifetime set</p>"},{"location":"api/Phalcon_Cache/#class-phalconcachebackendmongo","title":"Class Phalcon\\Cache\\Backend\\Mongo","text":"<p>extends abstract class Phalcon\\Cache\\Backend</p> <p>implements Phalcon\\Cache\\BackendInterface</p> <p>Source on GitHub</p> <p>Allows to cache output fragments, PHP data or raw data to a MongoDb backend</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Backend\\Mongo;\nuse Phalcon\\Cache\\Frontend\\Base64;\n\n// Cache data for 2 days\n$frontCache = new Base64(\n    [\n        \"lifetime\" =&gt; 172800,\n    ]\n);\n\n// Create a MongoDB cache\n$cache = new Mongo(\n    $frontCache,\n    [\n        \"server\"     =&gt; \"mongodb://localhost\",\n        \"db\"         =&gt; \"caches\",\n        \"collection\" =&gt; \"images\",\n    ]\n);\n\n// Cache arbitrary data\n$cache-&gt;save(\n    \"my-data\",\n    file_get_contents(\"some-image.jpg\")\n);\n\n// Get data\n$data = $cache-&gt;get(\"my-data\");\n</code></pre>"},{"location":"api/Phalcon_Cache/#methods_8","title":"Methods","text":"<p>public  __construct (Phalcon\\Cache\\FrontendInterface $frontend, [array $options])</p> <p>Phalcon\\Cache\\Backend\\Mongo constructor</p> <p>final protected MongoCollection _getCollection ()</p> <p>Returns a MongoDb collection based on the backend parameters</p> <p>public  get (mixed $keyName, [mixed $lifetime])</p> <p>Returns a cached content</p> <p>public  save ([int | string $keyName], [string $content], [int $lifetime], [boolean $stopBuffer])</p> <p>Stores cached content into the file backend and stops the frontend</p> <p>public boolean delete (int | string $keyName)</p> <p>Deletes a value from the cache by its key</p> <p>public  queryKeys ([mixed $prefix])</p> <p>Query the existing cached keys.</p> <pre><code>&lt;?php\n\n$cache-&gt;save(\"users-ids\", [1, 2, 3]);\n$cache-&gt;save(\"projects-ids\", [4, 5, 6]);\n\nvar_dump($cache-&gt;queryKeys(\"users\")); // [\"users-ids\"]\n</code></pre> <p>public  exists ([string $keyName], [int $lifetime])</p> <p>Checks if cache exists and it isn't expired</p> <p>public collection-&gt;remove(...) gc ()</p> <p>gc</p> <p>public  increment (int | string $keyName, [mixed $value])</p> <p>Increment of a given key by $value</p> <p>public  decrement (int | string $keyName, [mixed $value])</p> <p>Decrement of a given key by $value</p> <p>public  flush ()</p> <p>Immediately invalidates all existing items.</p> <p>public  getFrontend () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setFrontend (mixed $frontend) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  getOptions () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setOptions (mixed $options) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  getLastKey () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setLastKey (mixed $lastKey) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public mixed start (int | string $keyName, [int $lifetime]) inherited from Phalcon\\Cache\\Backend</p> <p>Starts a cache. The keyname allows to identify the created fragment</p> <p>public  stop ([mixed $stopBuffer]) inherited from Phalcon\\Cache\\Backend</p> <p>Stops the frontend without store any cached content</p> <p>public  isFresh () inherited from Phalcon\\Cache\\Backend</p> <p>Checks whether the last cache is fresh or cached</p> <p>public  isStarted () inherited from Phalcon\\Cache\\Backend</p> <p>Checks whether the cache has starting buffering or not</p> <p>public int getLifetime () inherited from Phalcon\\Cache\\Backend</p> <p>Gets the last lifetime set</p>"},{"location":"api/Phalcon_Cache/#class-phalconcachebackendredis","title":"Class Phalcon\\Cache\\Backend\\Redis","text":"<p>extends abstract class Phalcon\\Cache\\Backend</p> <p>implements Phalcon\\Cache\\BackendInterface</p> <p>Source on GitHub</p> <p>Allows to cache output fragments, PHP data or raw data to a redis backend</p> <p>This adapter uses the special redis key \"_PHCR\" to store all the keys internally used by the adapter</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Backend\\Redis;\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n// Cache data for 2 days\n$frontCache = new FrontData(\n    [\n        \"lifetime\" =&gt; 172800,\n    ]\n);\n\n// Create the Cache setting redis connection options\n$cache = new Redis(\n    $frontCache,\n    [\n        \"host\"       =&gt; \"localhost\",\n        \"port\"       =&gt; 6379,\n        \"auth\"       =&gt; \"foobared\",\n        \"persistent\" =&gt; false,\n        \"index\"      =&gt; 0,\n    ]\n);\n\n// Cache arbitrary data\n$cache-&gt;save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// Get data\n$data = $cache-&gt;get(\"my-data\");\n</code></pre>"},{"location":"api/Phalcon_Cache/#methods_9","title":"Methods","text":"<p>public  __construct (Phalcon\\Cache\\FrontendInterface $frontend, [array $options])</p> <p>Phalcon\\Cache\\Backend\\Redis constructor</p> <p>public  _connect ()</p> <p>Create internal connection to redis</p> <p>public  get (mixed $keyName, [mixed $lifetime])</p> <p>Returns a cached content</p> <p>public  save ([int | string $keyName], [string $content], [int $lifetime], [boolean $stopBuffer])</p> <p>Stores cached content into the file backend and stops the frontend</p> <pre><code>&lt;?php\n\n$cache-&gt;save(\"my-key\", $data);\n\n// Save data termlessly\n$cache-&gt;save(\"my-key\", $data, -1);\n</code></pre> <p>public  delete (int | string $keyName)</p> <p>Deletes a value from the cache by its key</p> <p>public  queryKeys ([mixed $prefix])</p> <p>Query the existing cached keys.</p> <pre><code>&lt;?php\n\n$cache-&gt;save(\"users-ids\", [1, 2, 3]);\n$cache-&gt;save(\"projects-ids\", [4, 5, 6]);\n\nvar_dump($cache-&gt;queryKeys(\"users\")); // [\"users-ids\"]\n</code></pre> <p>public  exists ([string $keyName], [int $lifetime])</p> <p>Checks if cache exists and it isn't expired</p> <p>public  increment ([string $keyName], [mixed $value])</p> <p>Increment of given $keyName by $value</p> <p>public  decrement ([string $keyName], [mixed $value])</p> <p>Decrement of $keyName by given $value</p> <p>public  flush ()</p> <p>Immediately invalidates all existing items.</p> <p>public  getFrontend () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setFrontend (mixed $frontend) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  getOptions () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setOptions (mixed $options) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  getLastKey () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setLastKey (mixed $lastKey) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public mixed start (int | string $keyName, [int $lifetime]) inherited from Phalcon\\Cache\\Backend</p> <p>Starts a cache. The keyname allows to identify the created fragment</p> <p>public  stop ([mixed $stopBuffer]) inherited from Phalcon\\Cache\\Backend</p> <p>Stops the frontend without store any cached content</p> <p>public  isFresh () inherited from Phalcon\\Cache\\Backend</p> <p>Checks whether the last cache is fresh or cached</p> <p>public  isStarted () inherited from Phalcon\\Cache\\Backend</p> <p>Checks whether the cache has starting buffering or not</p> <p>public int getLifetime () inherited from Phalcon\\Cache\\Backend</p> <p>Gets the last lifetime set</p>"},{"location":"api/Phalcon_Cache/#class-phalconcachebackendxcache","title":"Class Phalcon\\Cache\\Backend\\Xcache","text":"<p>extends abstract class Phalcon\\Cache\\Backend</p> <p>implements Phalcon\\Cache\\BackendInterface</p> <p>Source on GitHub</p> <p>Allows to cache output fragments, PHP data and raw data using an XCache backend</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Backend\\Xcache;\nuse Phalcon\\Cache\\Frontend\\Data as FrontData;\n\n// Cache data for 2 days\n$frontCache = new FrontData(\n    [\n       \"lifetime\" =&gt; 172800,\n    ]\n);\n\n$cache = new Xcache(\n    $frontCache,\n    [\n        \"prefix\" =&gt; \"app-data\",\n    ]\n);\n\n// Cache arbitrary data\n$cache-&gt;save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// Get data\n$data = $cache-&gt;get(\"my-data\");\n</code></pre>"},{"location":"api/Phalcon_Cache/#methods_10","title":"Methods","text":"<p>public  __construct (Phalcon\\Cache\\FrontendInterface $frontend, [array $options])</p> <p>Phalcon\\Cache\\Backend\\Xcache constructor</p> <p>public  get (mixed $keyName, [mixed $lifetime])</p> <p>Returns a cached content</p> <p>public  save ([int | string $keyName], [string $content], [int $lifetime], [boolean $stopBuffer])</p> <p>Stores cached content into the file backend and stops the frontend</p> <p>public boolean delete (int | string $keyName)</p> <p>Deletes a value from the cache by its key</p> <p>public  queryKeys ([mixed $prefix])</p> <p>Query the existing cached keys.</p> <pre><code>&lt;?php\n\n$cache-&gt;save(\"users-ids\", [1, 2, 3]);\n$cache-&gt;save(\"projects-ids\", [4, 5, 6]);\n\nvar_dump($cache-&gt;queryKeys(\"users\")); // [\"users-ids\"]\n</code></pre> <p>public  exists ([string $keyName], [int $lifetime])</p> <p>Checks if cache exists and it isn't expired</p> <p>public  increment (string $keyName, [mixed $value])</p> <p>Atomic increment of a given key, by number $value</p> <p>public  decrement (string $keyName, [mixed $value])</p> <p>Atomic decrement of a given key, by number $value</p> <p>public  flush ()</p> <p>Immediately invalidates all existing items.</p> <p>public  getFrontend () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setFrontend (mixed $frontend) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  getOptions () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setOptions (mixed $options) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  getLastKey () inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public  setLastKey (mixed $lastKey) inherited from Phalcon\\Cache\\Backend</p> <p>...</p> <p>public mixed start (int | string $keyName, [int $lifetime]) inherited from Phalcon\\Cache\\Backend</p> <p>Starts a cache. The keyname allows to identify the created fragment</p> <p>public  stop ([mixed $stopBuffer]) inherited from Phalcon\\Cache\\Backend</p> <p>Stops the frontend without store any cached content</p> <p>public  isFresh () inherited from Phalcon\\Cache\\Backend</p> <p>Checks whether the last cache is fresh or cached</p> <p>public  isStarted () inherited from Phalcon\\Cache\\Backend</p> <p>Checks whether the cache has starting buffering or not</p> <p>public int getLifetime () inherited from Phalcon\\Cache\\Backend</p> <p>Gets the last lifetime set</p>"},{"location":"api/Phalcon_Cache/#interface-phalconcachebackendinterface","title":"Interface Phalcon\\Cache\\BackendInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Cache/#methods_11","title":"Methods","text":"<p>abstract public  start (mixed $keyName, [mixed $lifetime])</p> <p>...</p> <p>abstract public  stop ([mixed $stopBuffer])</p> <p>...</p> <p>abstract public  getFrontend ()</p> <p>...</p> <p>abstract public  getOptions ()</p> <p>...</p> <p>abstract public  isFresh ()</p> <p>...</p> <p>abstract public  isStarted ()</p> <p>...</p> <p>abstract public  setLastKey (mixed $lastKey)</p> <p>...</p> <p>abstract public  getLastKey ()</p> <p>...</p> <p>abstract public  get (mixed $keyName, [mixed $lifetime])</p> <p>...</p> <p>abstract public  save ([mixed $keyName], [mixed $content], [mixed $lifetime], [mixed $stopBuffer])</p> <p>...</p> <p>abstract public  delete (mixed $keyName)</p> <p>...</p> <p>abstract public  queryKeys ([mixed $prefix])</p> <p>...</p> <p>abstract public  exists ([mixed $keyName], [mixed $lifetime])</p> <p>...</p>"},{"location":"api/Phalcon_Cache/#class-phalconcacheexception","title":"Class Phalcon\\Cache\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Cache/#methods_12","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Cache/#class-phalconcachefrontendbase64","title":"Class Phalcon\\Cache\\Frontend\\Base64","text":"<p>implements Phalcon\\Cache\\FrontendInterface</p> <p>Source on GitHub</p> <p>Allows to cache data converting/deconverting them to base64.</p> <p>This adapter uses the base64_encode/base64_decode PHP's functions</p> <pre><code>&lt;?php\n\n&lt;?php\n\n// Cache the files for 2 days using a Base64 frontend\n$frontCache = new \\Phalcon\\Cache\\Frontend\\Base64(\n    [\n        \"lifetime\" =&gt; 172800,\n    ]\n);\n\n//Create a MongoDB cache\n$cache = new \\Phalcon\\Cache\\Backend\\Mongo(\n    $frontCache,\n    [\n        \"server\"     =&gt; \"mongodb://localhost\",\n        \"db\"         =&gt; \"caches\",\n        \"collection\" =&gt; \"images\",\n    ]\n);\n\n$cacheKey = \"some-image.jpg.cache\";\n\n// Try to get cached image\n$image = $cache-&gt;get($cacheKey);\n\nif ($image === null) {\n    // Store the image in the cache\n    $cache-&gt;save(\n        $cacheKey,\n        file_get_contents(\"tmp-dir/some-image.jpg\")\n    );\n}\n\nheader(\"Content-Type: image/jpeg\");\n\necho $image;\n</code></pre>"},{"location":"api/Phalcon_Cache/#methods_13","title":"Methods","text":"<p>public  __construct ([array $frontendOptions])</p> <p>Phalcon\\Cache\\Frontend\\Base64 constructor</p> <p>public  getLifetime ()</p> <p>Returns the cache lifetime</p> <p>public  isBuffering ()</p> <p>Check whether if frontend is buffering output</p> <p>public  start ()</p> <p>Starts output frontend. Actually, does nothing in this adapter</p> <p>public string getContent ()</p> <p>Returns output cached content</p> <p>public  stop ()</p> <p>Stops output frontend</p> <p>public  beforeStore (mixed $data)</p> <p>Serializes data before storing them</p> <p>public  afterRetrieve (mixed $data)</p> <p>Unserializes data after retrieval</p>"},{"location":"api/Phalcon_Cache/#class-phalconcachefrontenddata","title":"Class Phalcon\\Cache\\Frontend\\Data","text":"<p>implements Phalcon\\Cache\\FrontendInterface</p> <p>Source on GitHub</p> <p>Allows to cache native PHP data in a serialized form</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Backend\\File;\nuse Phalcon\\Cache\\Frontend\\Data;\n\n// Cache the files for 2 days using a Data frontend\n$frontCache = new Data(\n    [\n        \"lifetime\" =&gt; 172800,\n    ]\n);\n\n// Create the component that will cache \"Data\" to a 'File' backend\n// Set the cache file directory - important to keep the '/' at the end of\n// of the value for the folder\n$cache = new File(\n    $frontCache,\n    [\n        \"cacheDir\" =&gt; \"../app/cache/\",\n    ]\n);\n\n$cacheKey = \"robots_order_id.cache\";\n\n// Try to get cached records\n$robots = $cache-&gt;get($cacheKey);\n\nif ($robots === null) {\n    // $robots is null due to cache expiration or data does not exist\n    // Make the database call and populate the variable\n    $robots = Robots::find(\n        [\n            \"order\" =&gt; \"id\",\n        ]\n    );\n\n    // Store it in the cache\n    $cache-&gt;save($cacheKey, $robots);\n}\n\n// Use $robots :)\nforeach ($robots as $robot) {\n    echo $robot-&gt;name, \"\\n\";\n}\n</code></pre>"},{"location":"api/Phalcon_Cache/#methods_14","title":"Methods","text":"<p>public  __construct ([array $frontendOptions])</p> <p>Phalcon\\Cache\\Frontend\\Data constructor</p> <p>public  getLifetime ()</p> <p>Returns the cache lifetime</p> <p>public  isBuffering ()</p> <p>Check whether if frontend is buffering output</p> <p>public  start ()</p> <p>Starts output frontend. Actually, does nothing</p> <p>public string getContent ()</p> <p>Returns output cached content</p> <p>public  stop ()</p> <p>Stops output frontend</p> <p>public  beforeStore (mixed $data)</p> <p>Serializes data before storing them</p> <p>public  afterRetrieve (mixed $data)</p> <p>Unserializes data after retrieval</p>"},{"location":"api/Phalcon_Cache/#class-phalconcachefrontendfactory","title":"Class Phalcon\\Cache\\Frontend\\Factory","text":"<p>extends abstract class Phalcon\\Factory</p> <p>implements Phalcon\\FactoryInterface</p> <p>Source on GitHub</p> <p>Loads Frontend Cache Adapter class using 'adapter' option</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Frontend\\Factory;\n\n$options = [\n    \"lifetime\" =&gt; 172800,\n    \"adapter\"  =&gt; \"data\",\n];\n$frontendCache = Factory::load($options);\n</code></pre>"},{"location":"api/Phalcon_Cache/#methods_15","title":"Methods","text":"<p>public static  load (Phalcon\\Config | array $config)</p> <p>protected static  loadClass (mixed $namespace, mixed $config)</p> <p>...</p>"},{"location":"api/Phalcon_Cache/#class-phalconcachefrontendigbinary","title":"Class Phalcon\\Cache\\Frontend\\Igbinary","text":"<p>extends class Phalcon\\Cache\\Frontend\\Data</p> <p>implements Phalcon\\Cache\\FrontendInterface</p> <p>Source on GitHub</p> <p>Allows to cache native PHP data in a serialized form using igbinary extension</p> <pre><code>&lt;?php\n\n// Cache the files for 2 days using Igbinary frontend\n$frontCache = new \\Phalcon\\Cache\\Frontend\\Igbinary(\n    [\n        \"lifetime\" =&gt; 172800,\n    ]\n);\n\n// Create the component that will cache \"Igbinary\" to a \"File\" backend\n// Set the cache file directory - important to keep the \"/\" at the end of\n// of the value for the folder\n$cache = new \\Phalcon\\Cache\\Backend\\File(\n    $frontCache,\n    [\n        \"cacheDir\" =&gt; \"../app/cache/\",\n    ]\n);\n\n$cacheKey = \"robots_order_id.cache\";\n\n// Try to get cached records\n$robots = $cache-&gt;get($cacheKey);\n\nif ($robots === null) {\n    // $robots is null due to cache expiration or data do not exist\n    // Make the database call and populate the variable\n    $robots = Robots::find(\n        [\n            \"order\" =&gt; \"id\",\n        ]\n    );\n\n    // Store it in the cache\n    $cache-&gt;save($cacheKey, $robots);\n}\n\n// Use $robots :)\nforeach ($robots as $robot) {\n    echo $robot-&gt;name, \"\\n\";\n}\n</code></pre>"},{"location":"api/Phalcon_Cache/#methods_16","title":"Methods","text":"<p>public  __construct ([array $frontendOptions])</p> <p>Phalcon\\Cache\\Frontend\\Data constructor</p> <p>public  getLifetime ()</p> <p>Returns the cache lifetime</p> <p>public  isBuffering ()</p> <p>Check whether if frontend is buffering output</p> <p>public  start ()</p> <p>Starts output frontend. Actually, does nothing</p> <p>public string getContent ()</p> <p>Returns output cached content</p> <p>public  stop ()</p> <p>Stops output frontend</p> <p>public  beforeStore (mixed $data)</p> <p>Serializes data before storing them</p> <p>public  afterRetrieve (mixed $data)</p> <p>Unserializes data after retrieval</p>"},{"location":"api/Phalcon_Cache/#class-phalconcachefrontendjson","title":"Class Phalcon\\Cache\\Frontend\\Json","text":"<p>implements Phalcon\\Cache\\FrontendInterface</p> <p>Source on GitHub</p> <p>Allows to cache data converting/deconverting them to JSON.</p> <p>This adapter uses the json_encode/json_decode PHP's functions</p> <p>As the data is encoded in JSON other systems accessing the same backend could process them</p> <pre><code>&lt;?php\n\n&lt;?php\n\n// Cache the data for 2 days\n$frontCache = new \\Phalcon\\Cache\\Frontend\\Json(\n    [\n        \"lifetime\" =&gt; 172800,\n    ]\n);\n\n// Create the Cache setting memcached connection options\n$cache = new \\Phalcon\\Cache\\Backend\\Memcache(\n    $frontCache,\n    [\n        \"host\"       =&gt; \"localhost\",\n        \"port\"       =&gt; 11211,\n        \"persistent\" =&gt; false,\n    ]\n);\n\n// Cache arbitrary data\n$cache-&gt;save(\"my-data\", [1, 2, 3, 4, 5]);\n\n// Get data\n$data = $cache-&gt;get(\"my-data\");\n</code></pre>"},{"location":"api/Phalcon_Cache/#methods_17","title":"Methods","text":"<p>public  __construct ([array $frontendOptions])</p> <p>Phalcon\\Cache\\Frontend\\Base64 constructor</p> <p>public  getLifetime ()</p> <p>Returns the cache lifetime</p> <p>public  isBuffering ()</p> <p>Check whether if frontend is buffering output</p> <p>public  start ()</p> <p>Starts output frontend. Actually, does nothing</p> <p>public string getContent ()</p> <p>Returns output cached content</p> <p>public  stop ()</p> <p>Stops output frontend</p> <p>public  beforeStore (mixed $data)</p> <p>Serializes data before storing them</p> <p>public  afterRetrieve (mixed $data)</p> <p>Unserializes data after retrieval</p>"},{"location":"api/Phalcon_Cache/#class-phalconcachefrontendmsgpack","title":"Class Phalcon\\Cache\\Frontend\\Msgpack","text":"<p>extends class Phalcon\\Cache\\Frontend\\Data</p> <p>implements Phalcon\\Cache\\FrontendInterface</p> <p>Source on GitHub</p> <p>Allows to cache native PHP data in a serialized form using msgpack extension This adapter uses a Msgpack frontend to store the cached content and requires msgpack extension.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Backend\\File;\nuse Phalcon\\Cache\\Frontend\\Msgpack;\n\n// Cache the files for 2 days using Msgpack frontend\n$frontCache = new Msgpack(\n    [\n        \"lifetime\" =&gt; 172800,\n    ]\n);\n\n// Create the component that will cache \"Msgpack\" to a \"File\" backend\n// Set the cache file directory - important to keep the \"/\" at the end of\n// of the value for the folder\n$cache = new File(\n    $frontCache,\n    [\n        \"cacheDir\" =&gt; \"../app/cache/\",\n    ]\n);\n\n$cacheKey = \"robots_order_id.cache\";\n\n// Try to get cached records\n$robots = $cache-&gt;get($cacheKey);\n\nif ($robots === null) {\n    // $robots is null due to cache expiration or data do not exist\n    // Make the database call and populate the variable\n    $robots = Robots::find(\n        [\n            \"order\" =&gt; \"id\",\n        ]\n    );\n\n    // Store it in the cache\n    $cache-&gt;save($cacheKey, $robots);\n}\n\n// Use $robots\nforeach ($robots as $robot) {\n    echo $robot-&gt;name, \"\\n\";\n}\n</code></pre>"},{"location":"api/Phalcon_Cache/#methods_18","title":"Methods","text":"<p>public  __construct ([array $frontendOptions])</p> <p>Phalcon\\Cache\\Frontend\\Msgpack constructor</p> <p>public  getLifetime ()</p> <p>Returns the cache lifetime</p> <p>public  isBuffering ()</p> <p>Check whether if frontend is buffering output</p> <p>public  start ()</p> <p>Starts output frontend. Actually, does nothing</p> <p>public  getContent ()</p> <p>Returns output cached content</p> <p>public  stop ()</p> <p>Stops output frontend</p> <p>public  beforeStore (mixed $data)</p> <p>Serializes data before storing them</p> <p>public  afterRetrieve (mixed $data)</p> <p>Unserializes data after retrieval</p>"},{"location":"api/Phalcon_Cache/#class-phalconcachefrontendnone","title":"Class Phalcon\\Cache\\Frontend\\None","text":"<p>implements Phalcon\\Cache\\FrontendInterface</p> <p>Source on GitHub</p> <p>Discards any kind of frontend data input. This frontend does not have expiration time or any other options</p> <pre><code>&lt;?php\n\n&lt;?php\n\n//Create a None Cache\n$frontCache = new \\Phalcon\\Cache\\Frontend\\None();\n\n// Create the component that will cache \"Data\" to a \"Memcached\" backend\n// Memcached connection settings\n$cache = new \\Phalcon\\Cache\\Backend\\Memcache(\n    $frontCache,\n    [\n        \"host\" =&gt; \"localhost\",\n        \"port\" =&gt; \"11211\",\n    ]\n);\n\n$cacheKey = \"robots_order_id.cache\";\n\n// This Frontend always return the data as it's returned by the backend\n$robots = $cache-&gt;get($cacheKey);\n\nif ($robots === null) {\n    // This cache doesn't perform any expiration checking, so the data is always expired\n    // Make the database call and populate the variable\n    $robots = Robots::find(\n        [\n            \"order\" =&gt; \"id\",\n        ]\n    );\n\n    $cache-&gt;save($cacheKey, $robots);\n}\n\n// Use $robots :)\nforeach ($robots as $robot) {\n    echo $robot-&gt;name, \"\\n\";\n}\n</code></pre>"},{"location":"api/Phalcon_Cache/#methods_19","title":"Methods","text":"<p>public  getLifetime ()</p> <p>Returns cache lifetime, always one second expiring content</p> <p>public  isBuffering ()</p> <p>Check whether if frontend is buffering output, always false</p> <p>public  start ()</p> <p>Starts output frontend</p> <p>public string getContent ()</p> <p>Returns output cached content</p> <p>public  stop ()</p> <p>Stops output frontend</p> <p>public  beforeStore (mixed $data)</p> <p>Prepare data to be stored</p> <p>public  afterRetrieve (mixed $data)</p> <p>Prepares data to be retrieved to user</p>"},{"location":"api/Phalcon_Cache/#class-phalconcachefrontendoutput","title":"Class Phalcon\\Cache\\Frontend\\Output","text":"<p>implements Phalcon\\Cache\\FrontendInterface</p> <p>Source on GitHub</p> <p>Allows to cache output fragments captured with ob_* functions</p> <pre><code>&lt;?php\n\n\nuse Phalcon\\Tag;\nuse Phalcon\\Cache\\Backend\\File;\nuse Phalcon\\Cache\\Frontend\\Output;\n\n// Create an Output frontend. Cache the files for 2 days\n$frontCache = new Output(\n    [\n        \"lifetime\" =&gt; 172800,\n    ]\n);\n\n// Create the component that will cache from the \"Output\" to a \"File\" backend\n// Set the cache file directory - it's important to keep the \"/\" at the end of\n// the value for the folder\n$cache = new File(\n    $frontCache,\n    [\n        \"cacheDir\" =&gt; \"../app/cache/\",\n    ]\n);\n\n// Get/Set the cache file to ../app/cache/my-cache.html\n$content = $cache-&gt;start(\"my-cache.html\");\n\n// If $content is null then the content will be generated for the cache\nif (null === $content) {\n    // Print date and time\n    echo date(\"r\");\n\n    // Generate a link to the sign-up action\n    echo Tag::linkTo(\n        [\n            \"user/signup\",\n            \"Sign Up\",\n            \"class\" =&gt; \"signup-button\",\n        ]\n    );\n\n    // Store the output into the cache file\n    $cache-&gt;save();\n} else {\n    // Echo the cached output\n    echo $content;\n}\n</code></pre>"},{"location":"api/Phalcon_Cache/#methods_20","title":"Methods","text":"<p>public  __construct ([array $frontendOptions])</p> <p>Phalcon\\Cache\\Frontend\\Output constructor</p> <p>public  getLifetime ()</p> <p>Returns the cache lifetime</p> <p>public  isBuffering ()</p> <p>Check whether if frontend is buffering output</p> <p>public  start ()</p> <p>Starts output frontend. Currently, does nothing</p> <p>public string getContent ()</p> <p>Returns output cached content</p> <p>public  stop ()</p> <p>Stops output frontend</p> <p>public  beforeStore (mixed $data)</p> <p>Serializes data before storing them</p> <p>public  afterRetrieve (mixed $data)</p> <p>Unserializes data after retrieval</p>"},{"location":"api/Phalcon_Cache/#interface-phalconcachefrontendinterface","title":"Interface Phalcon\\Cache\\FrontendInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Cache/#methods_21","title":"Methods","text":"<p>abstract public  getLifetime ()</p> <p>...</p> <p>abstract public  isBuffering ()</p> <p>...</p> <p>abstract public  start ()</p> <p>...</p> <p>abstract public  getContent ()</p> <p>...</p> <p>abstract public  stop ()</p> <p>...</p> <p>abstract public  beforeStore (mixed $data)</p> <p>...</p> <p>abstract public  afterRetrieve (mixed $data)</p> <p>...</p>"},{"location":"api/Phalcon_Cache/#class-phalconcachemultiple","title":"Class Phalcon\\Cache\\Multiple","text":"<p>Source on GitHub</p> <p>Allows to read to chained backend adapters writing to multiple backends</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Frontend\\Data as DataFrontend;\nuse Phalcon\\Cache\\Multiple;\nuse Phalcon\\Cache\\Backend\\Apc as ApcCache;\nuse Phalcon\\Cache\\Backend\\Memcache as MemcacheCache;\nuse Phalcon\\Cache\\Backend\\File as FileCache;\n\n$ultraFastFrontend = new DataFrontend(\n    [\n        \"lifetime\" =&gt; 3600,\n    ]\n);\n\n$fastFrontend = new DataFrontend(\n    [\n        \"lifetime\" =&gt; 86400,\n    ]\n);\n\n$slowFrontend = new DataFrontend(\n    [\n        \"lifetime\" =&gt; 604800,\n    ]\n);\n\n//Backends are registered from the fastest to the slower\n$cache = new Multiple(\n    [\n        new ApcCache(\n            $ultraFastFrontend,\n            [\n                \"prefix\" =&gt; \"cache\",\n            ]\n        ),\n        new MemcacheCache(\n            $fastFrontend,\n            [\n                \"prefix\" =&gt; \"cache\",\n                \"host\"   =&gt; \"localhost\",\n                \"port\"   =&gt; \"11211\",\n            ]\n        ),\n        new FileCache(\n            $slowFrontend,\n            [\n                \"prefix\"   =&gt; \"cache\",\n                \"cacheDir\" =&gt; \"../app/cache/\",\n            ]\n        ),\n    ]\n);\n\n//Save, saves in every backend\n$cache-&gt;save(\"my-key\", $data);\n</code></pre>"},{"location":"api/Phalcon_Cache/#methods_22","title":"Methods","text":"<p>public  __construct ([Phalcon\\Cache\\BackendInterface $backends])</p> <p>Phalcon\\Cache\\Multiple constructor</p> <p>public  push (Phalcon\\Cache\\BackendInterface $backend)</p> <p>Adds a backend</p> <p>public mixed get (string | int $keyName, [int $lifetime])</p> <p>Returns a cached content reading the internal backends</p> <p>public  start (string | int $keyName, [int $lifetime])</p> <p>Starts every backend</p> <p>public  save ([string $keyName], [string $content], [int $lifetime], [boolean $stopBuffer])</p> <p>Stores cached content into all backends and stops the frontend</p> <p>public boolean delete (string | int $keyName)</p> <p>Deletes a value from each backend</p> <p>public  exists ([string | int $keyName], [int $lifetime])</p> <p>Checks if cache exists in at least one backend</p> <p>public  flush ()</p> <p>Flush all backend(s)</p>"},{"location":"api/Phalcon_Cli/","title":"Class Phalcon\\Cli\\Console","text":"<p>extends abstract class Phalcon\\Application</p> <p>implements Phalcon\\Di\\InjectionAwareInterface, Phalcon\\Events\\EventsAwareInterface</p> <p>Source on GitHub</p> <p>This component allows to create CLI applications using Phalcon</p>"},{"location":"api/Phalcon_Cli/#methods","title":"Methods","text":"<p>public  addModules (array $modules)</p> <p>Merge modules with the existing ones</p> <pre><code>&lt;?php\n\n$application-&gt;addModules(\n    [\n        \"admin\" =&gt; [\n            \"className\" =&gt; \"Multiple\\Admin\\Module\",\n            \"path\"      =&gt; \"../apps/admin/Module.php\",\n        ],\n    ]\n);\n</code></pre> <p>public  handle ([array $arguments])</p> <p>Handle the whole command-line tasks</p> <p>public  setArgument ([array $arguments], [mixed $str], [mixed $shift])</p> <p>Set an specific argument</p> <p>public  __construct ([Phalcon\\DiInterface $dependencyInjector]) inherited from Phalcon\\Application</p> <p>Phalcon\\Application</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Application</p> <p>Sets the events manager</p> <p>public  getEventsManager () inherited from Phalcon\\Application</p> <p>Returns the internal event manager</p> <p>public  registerModules (array $modules, [mixed $merge]) inherited from Phalcon\\Application</p> <p>Register an array of modules present in the application</p> <pre><code>&lt;?php\n\n$this-&gt;registerModules(\n    [\n        \"frontend\" =&gt; [\n            \"className\" =&gt; \"Multiple\\Frontend\\Module\",\n            \"path\"      =&gt; \"../apps/frontend/Module.php\",\n        ],\n        \"backend\" =&gt; [\n            \"className\" =&gt; \"Multiple\\Backend\\Module\",\n            \"path\"      =&gt; \"../apps/backend/Module.php\",\n        ],\n    ]\n);\n</code></pre> <p>public  getModules () inherited from Phalcon\\Application</p> <p>Return the modules registered in the application</p> <p>public  getModule (mixed $name) inherited from Phalcon\\Application</p> <p>Gets the module definition registered in the application via module name</p> <p>public  setDefaultModule (mixed $defaultModule) inherited from Phalcon\\Application</p> <p>Sets the module name to be used if the router doesn't return a valid module</p> <p>public  getDefaultModule () inherited from Phalcon\\Application</p> <p>Returns the default module name</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal dependency injector</p> <p>public  __get (mixed $propertyName) inherited from Phalcon\\Di\\Injectable</p> <p>Magic method __get</p>"},{"location":"api/Phalcon_Cli/#class-phalconcliconsoleexception","title":"Class Phalcon\\Cli\\Console\\Exception","text":"<p>extends class Phalcon\\Application\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Cli/#methods_1","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Cli/#class-phalconclidispatcher","title":"Class Phalcon\\Cli\\Dispatcher","text":"<p>extends abstract class Phalcon\\Dispatcher</p> <p>implements Phalcon\\Events\\EventsAwareInterface, Phalcon\\Di\\InjectionAwareInterface, Phalcon\\DispatcherInterface, Phalcon\\Cli\\DispatcherInterface</p> <p>Source on GitHub</p> <p>Dispatching is the process of taking the command-line arguments, extracting the module name, task name, action name, and optional parameters contained in it, and then instantiating a task and calling an action on it.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Cli\\Dispatcher;\n\n$di = new Di();\n$dispatcher = new Dispatcher();\n$dispatcher-&gt;setDi($di);\n\n$dispatcher-&gt;setTaskName(\"posts\");\n$dispatcher-&gt;setActionName(\"index\");\n$dispatcher-&gt;setParams([]);\n\n$handle = $dispatcher-&gt;dispatch();\n</code></pre>"},{"location":"api/Phalcon_Cli/#constants","title":"Constants","text":"<p>integer EXCEPTION_NO_DI</p> <p>integer EXCEPTION_CYCLIC_ROUTING</p> <p>integer EXCEPTION_HANDLER_NOT_FOUND</p> <p>integer EXCEPTION_INVALID_HANDLER</p> <p>integer EXCEPTION_INVALID_PARAMS</p> <p>integer EXCEPTION_ACTION_NOT_FOUND</p>"},{"location":"api/Phalcon_Cli/#methods_2","title":"Methods","text":"<p>public  setTaskSuffix (mixed $taskSuffix)</p> <p>Sets the default task suffix</p> <p>public  setDefaultTask (mixed $taskName)</p> <p>Sets the default task name</p> <p>public  setTaskName (mixed $taskName)</p> <p>Sets the task name to be dispatched</p> <p>public  getTaskName ()</p> <p>Gets last dispatched task name</p> <p>protected  _throwDispatchException (mixed $message, [mixed $exceptionCode])</p> <p>Throws an internal exception</p> <p>protected  _handleException (Exception $exception)</p> <p>Handles a user exception</p> <p>public  getLastTask ()</p> <p>Returns the latest dispatched controller</p> <p>public  getActiveTask ()</p> <p>Returns the active task in the dispatcher</p> <p>public  setOptions (array $options)</p> <p>Set the options to be dispatched</p> <p>public  getOptions ()</p> <p>Get dispatched options</p> <p>public  getOption (mixed $option, [string | array $filters], [mixed $defaultValue])</p> <p>Gets an option by its name or numeric index</p> <p>public  hasOption (mixed $option)</p> <p>Check if an option exists</p> <p>public  callActionMethod (mixed $handler, mixed $actionMethod, [array $params])</p> <p>Calls the action method.</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Dispatcher</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Dispatcher</p> <p>Returns the internal dependency injector</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Dispatcher</p> <p>Sets the events manager</p> <p>public  getEventsManager () inherited from Phalcon\\Dispatcher</p> <p>Returns the internal event manager</p> <p>public  setActionSuffix (mixed $actionSuffix) inherited from Phalcon\\Dispatcher</p> <p>Sets the default action suffix</p> <p>public  getActionSuffix () inherited from Phalcon\\Dispatcher</p> <p>Gets the default action suffix</p> <p>public  setModuleName (mixed $moduleName) inherited from Phalcon\\Dispatcher</p> <p>Sets the module where the controller is (only informative)</p> <p>public  getModuleName () inherited from Phalcon\\Dispatcher</p> <p>Gets the module where the controller class is</p> <p>public  setNamespaceName (mixed $namespaceName) inherited from Phalcon\\Dispatcher</p> <p>Sets the namespace where the controller class is</p> <p>public  getNamespaceName () inherited from Phalcon\\Dispatcher</p> <p>Gets a namespace to be prepended to the current handler name</p> <p>public  setDefaultNamespace (mixed $namespaceName) inherited from Phalcon\\Dispatcher</p> <p>Sets the default namespace</p> <p>public  getDefaultNamespace () inherited from Phalcon\\Dispatcher</p> <p>Returns the default namespace</p> <p>public  setDefaultAction (mixed $actionName) inherited from Phalcon\\Dispatcher</p> <p>Sets the default action name</p> <p>public  setActionName (mixed $actionName) inherited from Phalcon\\Dispatcher</p> <p>Sets the action name to be dispatched</p> <p>public  getActionName () inherited from Phalcon\\Dispatcher</p> <p>Gets the latest dispatched action name</p> <p>public  setParams (array $params) inherited from Phalcon\\Dispatcher</p> <p>Sets action params to be dispatched</p> <p>public  getParams () inherited from Phalcon\\Dispatcher</p> <p>Gets action params</p> <p>public  setParam (mixed $param, mixed $value) inherited from Phalcon\\Dispatcher</p> <p>Set a param by its name or numeric index</p> <p>public mixed getParam (mixed $param, [string | array $filters], [mixed $defaultValue]) inherited from Phalcon\\Dispatcher</p> <p>Gets a param by its name or numeric index</p> <p>public boolean hasParam (mixed $param) inherited from Phalcon\\Dispatcher</p> <p>Check if a param exists</p> <p>public  getActiveMethod () inherited from Phalcon\\Dispatcher</p> <p>Returns the current method to be/executed in the dispatcher</p> <p>public  isFinished () inherited from Phalcon\\Dispatcher</p> <p>Checks if the dispatch loop is finished or has more pendent controllers/tasks to dispatch</p> <p>public  setReturnedValue (mixed $value) inherited from Phalcon\\Dispatcher</p> <p>Sets the latest returned value by an action manually</p> <p>public mixed getReturnedValue () inherited from Phalcon\\Dispatcher</p> <p>Returns value returned by the latest dispatched action</p> <p>public  setModelBinding (mixed $value, [mixed $cache]) inherited from Phalcon\\Dispatcher</p> <p>Enable/Disable model binding during dispatch</p> <pre><code>&lt;?php\n\n$di-&gt;set('dispatcher', function() {\n    $dispatcher = new Dispatcher();\n\n    $dispatcher-&gt;setModelBinding(true, 'cache');\n    return $dispatcher;\n});\n</code></pre> <p>public  setModelBinder (Phalcon\\Mvc\\Model\\BinderInterface $modelBinder, [mixed $cache]) inherited from Phalcon\\Dispatcher</p> <p>Enable model binding during dispatch</p> <pre><code>&lt;?php\n\n$di-&gt;set('dispatcher', function() {\n    $dispatcher = new Dispatcher();\n\n    $dispatcher-&gt;setModelBinder(new Binder(), 'cache');\n    return $dispatcher;\n});\n</code></pre> <p>public  getModelBinder () inherited from Phalcon\\Dispatcher</p> <p>Gets model binder</p> <p>public object dispatch () inherited from Phalcon\\Dispatcher</p> <p>Dispatches a handle action taking into account the routing parameters</p> <p>protected object _dispatch () inherited from Phalcon\\Dispatcher</p> <p>Dispatches a handle action taking into account the routing parameters</p> <p>public  forward (array $forward) inherited from Phalcon\\Dispatcher</p> <p>Forwards the execution flow to another controller/action.</p> <pre><code>&lt;?php\n\n$this-&gt;dispatcher-&gt;forward(\n    [\n        \"controller\" =&gt; \"posts\",\n        \"action\"     =&gt; \"index\",\n    ]\n);\n</code></pre> <p>public  wasForwarded () inherited from Phalcon\\Dispatcher</p> <p>Check if the current executed action was forwarded by another one</p> <p>public  getHandlerClass () inherited from Phalcon\\Dispatcher</p> <p>Possible class name that will be located to dispatch the request</p> <p>public  getBoundModels () inherited from Phalcon\\Dispatcher</p> <p>Returns bound models from binder instance</p> <pre><code>&lt;?php\n\nclass UserController extends Controller\n{\n    public function showAction(User $user)\n    {\n        $boundModels = $this-&gt;dispatcher-&gt;getBoundModels(); // return array with $user\n    }\n}\n</code></pre> <p>protected  _resolveEmptyProperties () inherited from Phalcon\\Dispatcher</p> <p>Set empty properties to their defaults (where defaults are available)</p>"},{"location":"api/Phalcon_Cli/#class-phalconclidispatcherexception","title":"Class Phalcon\\Cli\\Dispatcher\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Cli/#methods_3","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Cli/#interface-phalconclidispatcherinterface","title":"Interface Phalcon\\Cli\\DispatcherInterface","text":"<p>implements Phalcon\\DispatcherInterface</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Cli/#methods_4","title":"Methods","text":"<p>abstract public  setTaskSuffix (mixed $taskSuffix)</p> <p>...</p> <p>abstract public  setDefaultTask (mixed $taskName)</p> <p>...</p> <p>abstract public  setTaskName (mixed $taskName)</p> <p>...</p> <p>abstract public  getTaskName ()</p> <p>...</p> <p>abstract public  getLastTask ()</p> <p>...</p> <p>abstract public  getActiveTask ()</p> <p>...</p> <p>abstract public  setActionSuffix (mixed $actionSuffix) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  getActionSuffix () inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  setDefaultNamespace (mixed $defaultNamespace) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  setDefaultAction (mixed $actionName) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  setNamespaceName (mixed $namespaceName) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  setModuleName (mixed $moduleName) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  setActionName (mixed $actionName) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  getActionName () inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  setParams (mixed $params) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  getParams () inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  setParam (mixed $param, mixed $value) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  getParam (mixed $param, [mixed $filters]) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  hasParam (mixed $param) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  isFinished () inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  getReturnedValue () inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  dispatch () inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  forward (mixed $forward) inherited from Phalcon\\DispatcherInterface</p> <p>...</p>"},{"location":"api/Phalcon_Cli/#class-phalconclirouter","title":"Class Phalcon\\Cli\\Router","text":"<p>implements Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>Phalcon\\Cli\\Router is the standard framework router. Routing is the process of taking a command-line arguments and decomposing it into parameters to determine which module, task, and action of that task should receive the request</p> <pre><code>&lt;?php\n\n$router = new \\Phalcon\\Cli\\Router();\n\n$router-&gt;handle(\n    [\n        \"module\" =&gt; \"main\",\n        \"task\"   =&gt; \"videos\",\n        \"action\" =&gt; \"process\",\n    ]\n);\n\necho $router-&gt;getTaskName();\n</code></pre>"},{"location":"api/Phalcon_Cli/#methods_5","title":"Methods","text":"<p>public  __construct ([mixed $defaultRoutes])</p> <p>Phalcon\\Cli\\Router constructor</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the dependency injector</p> <p>public  getDI ()</p> <p>Returns the internal dependency injector</p> <p>public  setDefaultModule (mixed $moduleName)</p> <p>Sets the name of the default module</p> <p>public  setDefaultTask (mixed $taskName)</p> <p>Sets the default controller name</p> <p>public  setDefaultAction (mixed $actionName)</p> <p>Sets the default action name</p> <p>public  setDefaults (array $defaults)</p> <p>Sets an array of default paths. If a route is missing a path the router will use the defined here This method must not be used to set a 404 route</p> <pre><code>&lt;?php\n\n$router-&gt;setDefaults(\n    [\n        \"module\" =&gt; \"common\",\n        \"action\" =&gt; \"index\",\n    ]\n);\n</code></pre> <p>public  handle ([array $arguments])</p> <p>Handles routing information received from command-line arguments</p> <p>public Phalcon\\Cli\\Router\\Route add (string $pattern, [string/array $paths])</p> <p>Adds a route to the router</p> <pre><code>&lt;?php\n\n$router-&gt;add(\"/about\", \"About::main\");\n</code></pre> <p>public  getModuleName ()</p> <p>Returns processed module name</p> <p>public  getTaskName ()</p> <p>Returns processed task name</p> <p>public  getActionName ()</p> <p>Returns processed action name</p> <p>public array getParams ()</p> <p>Returns processed extra params</p> <p>public  getMatchedRoute ()</p> <p>Returns the route that matches the handled URI</p> <p>public array getMatches ()</p> <p>Returns the sub expressions in the regular expression matched</p> <p>public  wasMatched ()</p> <p>Checks if the router matches any of the defined routes</p> <p>public  getRoutes ()</p> <p>Returns all the routes defined in the router</p> <p>public Phalcon\\Cli\\Router\\Route getRouteById (int $id)</p> <p>Returns a route object by its id</p> <p>public  getRouteByName (mixed $name)</p> <p>Returns a route object by its name</p>"},{"location":"api/Phalcon_Cli/#class-phalconclirouterexception","title":"Class Phalcon\\Cli\\Router\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Cli/#methods_6","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Cli/#class-phalconclirouterroute","title":"Class Phalcon\\Cli\\Router\\Route","text":"<p>Source on GitHub</p> <p>This class represents every route added to the router</p>"},{"location":"api/Phalcon_Cli/#constants_1","title":"Constants","text":"<p>string DEFAULT_DELIMITER</p>"},{"location":"api/Phalcon_Cli/#methods_7","title":"Methods","text":"<p>public  __construct (string $pattern, [array $paths])</p> <p>Phalcon\\Cli\\Router\\Route constructor</p> <p>public  compilePattern (mixed $pattern)</p> <p>Replaces placeholders from pattern returning a valid PCRE regular expression</p> <p>public array | boolean extractNamedParams (string $pattern)</p> <p>Extracts parameters from a string</p> <p>public  reConfigure (string $pattern, [array $paths])</p> <p>Reconfigure the route adding a new pattern and a set of paths</p> <p>public  getName ()</p> <p>Returns the route's name</p> <p>public  setName (mixed $name)</p> <p>Sets the route's name</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    \"/about\",\n    [\n        \"controller\" =&gt; \"about\",\n    ]\n)-&gt;setName(\"about\");\n</code></pre> <p>public Phalcon\\Cli\\Router\\Route beforeMatch (callback $callback)</p> <p>Sets a callback that is called if the route is matched. The developer can implement any arbitrary conditions here If the callback returns false the route is treated as not matched</p> <p>public mixed getBeforeMatch ()</p> <p>Returns the 'before match' callback if any</p> <p>public  getRouteId ()</p> <p>Returns the route's id</p> <p>public  getPattern ()</p> <p>Returns the route's pattern</p> <p>public  getCompiledPattern ()</p> <p>Returns the route's compiled pattern</p> <p>public  getPaths ()</p> <p>Returns the paths</p> <p>public  getReversedPaths ()</p> <p>Returns the paths using positions as keys and names as values</p> <p>public Phalcon\\Cli\\Router\\Route convert (string $name, callable $converter)</p> <p>Adds a converter to perform an additional transformation for certain parameter</p> <p>public  getConverters ()</p> <p>Returns the router converter</p> <p>public static  reset ()</p> <p>Resets the internal route id generator</p> <p>public static  delimiter ([mixed $delimiter])</p> <p>Set the routing delimiter</p> <p>public static  getDelimiter ()</p> <p>Get routing delimiter</p>"},{"location":"api/Phalcon_Cli/#interface-phalconclirouterrouteinterface","title":"Interface Phalcon\\Cli\\Router\\RouteInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Cli/#methods_8","title":"Methods","text":"<p>abstract public  compilePattern (mixed $pattern)</p> <p>...</p> <p>abstract public  reConfigure (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  getName ()</p> <p>...</p> <p>abstract public  setName (mixed $name)</p> <p>...</p> <p>abstract public  getRouteId ()</p> <p>...</p> <p>abstract public  getPattern ()</p> <p>...</p> <p>abstract public  getCompiledPattern ()</p> <p>...</p> <p>abstract public  getPaths ()</p> <p>...</p> <p>abstract public  getReversedPaths ()</p> <p>...</p> <p>abstract public static  reset ()</p> <p>...</p>"},{"location":"api/Phalcon_Cli/#interface-phalconclirouterinterface","title":"Interface Phalcon\\Cli\\RouterInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Cli/#methods_9","title":"Methods","text":"<p>abstract public  setDefaultModule (mixed $moduleName)</p> <p>...</p> <p>abstract public  setDefaultTask (mixed $taskName)</p> <p>...</p> <p>abstract public  setDefaultAction (mixed $actionName)</p> <p>...</p> <p>abstract public  setDefaults (array $defaults)</p> <p>...</p> <p>abstract public  handle ([mixed $arguments])</p> <p>...</p> <p>abstract public  add (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  getModuleName ()</p> <p>...</p> <p>abstract public  getTaskName ()</p> <p>...</p> <p>abstract public  getActionName ()</p> <p>...</p> <p>abstract public  getParams ()</p> <p>...</p> <p>abstract public  getMatchedRoute ()</p> <p>...</p> <p>abstract public  getMatches ()</p> <p>...</p> <p>abstract public  wasMatched ()</p> <p>...</p> <p>abstract public  getRoutes ()</p> <p>...</p> <p>abstract public  getRouteById (mixed $id)</p> <p>...</p> <p>abstract public  getRouteByName (mixed $name)</p> <p>...</p>"},{"location":"api/Phalcon_Cli/#class-phalconclitask","title":"Class Phalcon\\Cli\\Task","text":"<p>extends abstract class Phalcon\\Di\\Injectable</p> <p>implements Phalcon\\Events\\EventsAwareInterface, Phalcon\\Di\\InjectionAwareInterface, Phalcon\\Cli\\TaskInterface</p> <p>Source on GitHub</p> <p>Every command-line task should extend this class that encapsulates all the task functionality</p> <p>A task can be used to run \"tasks\" such as migrations, cronjobs, unit-tests, or anything that you want. The Task class should at least have a \"mainAction\" method</p> <pre><code>&lt;?php\n\nclass HelloTask extends \\Phalcon\\Cli\\Task\n{\n    // This action will be executed by default\n    public function mainAction()\n    {\n\n    }\n\n    public function findAction()\n    {\n\n    }\n}\n</code></pre>"},{"location":"api/Phalcon_Cli/#methods_10","title":"Methods","text":"<p>final public  __construct ()</p> <p>Phalcon\\Cli\\Task constructor</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal dependency injector</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the event manager</p> <p>public  getEventsManager () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal event manager</p> <p>public  __get (mixed $propertyName) inherited from Phalcon\\Di\\Injectable</p> <p>Magic method __get</p>"},{"location":"api/Phalcon_Cli/#interface-phalconclitaskinterface","title":"Interface Phalcon\\Cli\\TaskInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Config/","title":"Class Phalcon\\Config","text":"<p>implements ArrayAccess, Countable</p> <p>Source on GitHub</p> <p>Phalcon\\Config is designed to simplify the access to, and the use of, configuration data within applications. It provides a nested object property based user interface for accessing this configuration data within application code.</p> <pre><code>&lt;?php\n\n$config = new \\Phalcon\\Config(\n    [\n        \"database\" =&gt; [\n            \"adapter\"  =&gt; \"Mysql\",\n            \"host\"     =&gt; \"localhost\",\n            \"username\" =&gt; \"scott\",\n            \"password\" =&gt; \"cheetah\",\n            \"dbname\"   =&gt; \"test_db\",\n        ],\n        \"phalcon\" =&gt; [\n            \"controllersDir\" =&gt; \"../app/controllers/\",\n            \"modelsDir\"      =&gt; \"../app/models/\",\n            \"viewsDir\"       =&gt; \"../app/views/\",\n        ],\n    ]\n);\n</code></pre>"},{"location":"api/Phalcon_Config/#constants","title":"Constants","text":"<p>string DEFAULT_PATH_DELIMITER</p>"},{"location":"api/Phalcon_Config/#methods","title":"Methods","text":"<p>public  __construct ([array $arrayConfig])</p> <p>Phalcon\\Config constructor</p> <p>public  offsetExists (mixed $index)</p> <p>Allows to check whether an attribute is defined using the array-syntax</p> <pre><code>&lt;?php\n\nvar_dump(\n    isset($config[\"database\"])\n);\n</code></pre> <p>public  path (mixed $path, [mixed $defaultValue], [mixed $delimiter])</p> <p>Returns a value from current config using a dot separated path.</p> <pre><code>&lt;?php\n\necho $config-&gt;path(\"unknown.path\", \"default\", \".\");\n</code></pre> <p>public  get (mixed $index, [mixed $defaultValue])</p> <p>Gets an attribute from the configuration, if the attribute isn't defined returns null If the value is exactly null or is not defined the default value will be used instead</p> <pre><code>&lt;?php\n\necho $config-&gt;get(\"controllersDir\", \"../app/controllers/\");\n</code></pre> <p>public  offsetGet (mixed $index)</p> <p>Gets an attribute using the array-syntax</p> <pre><code>&lt;?php\n\nprint_r(\n    $config[\"database\"]\n);\n</code></pre> <p>public  offsetSet (mixed $index, mixed $value)</p> <p>Sets an attribute using the array-syntax</p> <pre><code>&lt;?php\n\n$config[\"database\"] = [\n    \"type\" =&gt; \"Sqlite\",\n];\n</code></pre> <p>public  offsetUnset (mixed $index)</p> <p>Unsets an attribute using the array-syntax</p> <pre><code>&lt;?php\n\nunset($config[\"database\"]);\n</code></pre> <p>public  merge (Phalcon\\Config $config)</p> <p>Merges a configuration into the current one</p> <pre><code>&lt;?php\n\n$appConfig = new \\Phalcon\\Config(\n    [\n        \"database\" =&gt; [\n            \"host\" =&gt; \"localhost\",\n        ],\n    ]\n);\n\n$globalConfig-&gt;merge($appConfig);\n</code></pre> <p>public  toArray ()</p> <p>Converts recursively the object to an array</p> <pre><code>&lt;?php\n\nprint_r(\n    $config-&gt;toArray()\n);\n</code></pre> <p>public  count ()</p> <p>Returns the count of properties set in the config</p> <p><pre><code>&lt;?php\n\nprint count($config);\n</code></pre> or</p> <pre><code>&lt;?php\n\nprint $config-&gt;count();\n</code></pre> <p>public static  __set_state (array $data)</p> <p>Restores the state of a Phalcon\\Config object</p> <p>public static  setPathDelimiter ([mixed $delimiter])</p> <p>Sets the default path delimiter</p> <p>public static  getPathDelimiter ()</p> <p>Gets the default path delimiter</p> <p>final protected Config merged config _merge (Config $config, [mixed $instance])</p> <p>Helper method for merge configs (forwarding nested config instance)</p>"},{"location":"api/Phalcon_Config/#class-phalconconfigadaptergrouped","title":"Class Phalcon\\Config\\Adapter\\Grouped","text":"<p>extends class Phalcon\\Config</p> <p>implements Countable, ArrayAccess</p> <p>Source on GitHub</p> <p>Reads multiple files (or arrays) and merges them all together.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config\\Adapter\\Grouped;\n\n$config = new Grouped(\n    [\n        \"path/to/config.php\",\n        \"path/to/config.dist.php\",\n    ]\n);\n</code></pre> <pre><code>&lt;?php\n\nuse Phalcon\\Config\\Adapter\\Grouped;\n\n$config = new Grouped(\n    [\n        \"path/to/config.json\",\n        \"path/to/config.dist.json\",\n    ],\n    \"json\"\n);\n</code></pre> <pre><code>&lt;?php\n\nuse Phalcon\\Config\\Adapter\\Grouped;\n\n$config = new Grouped(\n    [\n        [\n            \"filePath\" =&gt; \"path/to/config.php\",\n            \"adapter\"  =&gt; \"php\",\n        ],\n        [\n            \"filePath\" =&gt; \"path/to/config.json\",\n            \"adapter\"  =&gt; \"json\",\n        ],\n        [\n            \"adapter\"  =&gt; \"array\",\n            \"config\"   =&gt; [\n                \"property\" =&gt; \"value\",\n        ],\n    ],\n);\n</code></pre>"},{"location":"api/Phalcon_Config/#constants_1","title":"Constants","text":"<p>string DEFAULT_PATH_DELIMITER</p>"},{"location":"api/Phalcon_Config/#methods_1","title":"Methods","text":"<p>public  __construct (array $arrayConfig, [mixed $defaultAdapter])</p> <p>Phalcon\\Config\\Adapter\\Grouped constructor</p> <p>public  offsetExists (mixed $index) inherited from Phalcon\\Config</p> <p>Allows to check whether an attribute is defined using the array-syntax</p> <pre><code>&lt;?php\n\nvar_dump(\n    isset($config[\"database\"])\n);\n</code></pre> <p>public  path (mixed $path, [mixed $defaultValue], [mixed $delimiter]) inherited from Phalcon\\Config</p> <p>Returns a value from current config using a dot separated path.</p> <pre><code>&lt;?php\n\necho $config-&gt;path(\"unknown.path\", \"default\", \".\");\n</code></pre> <p>public  get (mixed $index, [mixed $defaultValue]) inherited from Phalcon\\Config</p> <p>Gets an attribute from the configuration, if the attribute isn't defined returns null If the value is exactly null or is not defined the default value will be used instead</p> <pre><code>&lt;?php\n\necho $config-&gt;get(\"controllersDir\", \"../app/controllers/\");\n</code></pre> <p>public  offsetGet (mixed $index) inherited from Phalcon\\Config</p> <p>Gets an attribute using the array-syntax</p> <pre><code>&lt;?php\n\nprint_r(\n    $config[\"database\"]\n);\n</code></pre> <p>public  offsetSet (mixed $index, mixed $value) inherited from Phalcon\\Config</p> <p>Sets an attribute using the array-syntax</p> <pre><code>&lt;?php\n\n$config[\"database\"] = [\n    \"type\" =&gt; \"Sqlite\",\n];\n</code></pre> <p>public  offsetUnset (mixed $index) inherited from Phalcon\\Config</p> <p>Unsets an attribute using the array-syntax</p> <pre><code>&lt;?php\n\nunset($config[\"database\"]);\n</code></pre> <p>public  merge (Phalcon\\Config $config) inherited from Phalcon\\Config</p> <p>Merges a configuration into the current one</p> <pre><code>&lt;?php\n\n$appConfig = new \\Phalcon\\Config(\n    [\n        \"database\" =&gt; [\n            \"host\" =&gt; \"localhost\",\n        ],\n    ]\n);\n\n$globalConfig-&gt;merge($appConfig);\n</code></pre> <p>public  toArray () inherited from Phalcon\\Config</p> <p>Converts recursively the object to an array</p> <pre><code>&lt;?php\n\nprint_r(\n    $config-&gt;toArray()\n);\n</code></pre> <p>public  count () inherited from Phalcon\\Config</p> <p>Returns the count of properties set in the config</p> <p><pre><code>&lt;?php\n\nprint count($config);\n</code></pre> or</p> <pre><code>&lt;?php\n\nprint $config-&gt;count();\n</code></pre> <p>public static  __set_state (array $data) inherited from Phalcon\\Config</p> <p>Restores the state of a Phalcon\\Config object</p> <p>public static  setPathDelimiter ([mixed $delimiter]) inherited from Phalcon\\Config</p> <p>Sets the default path delimiter</p> <p>public static  getPathDelimiter () inherited from Phalcon\\Config</p> <p>Gets the default path delimiter</p> <p>final protected Config merged config _merge (Config $config, [mixed $instance]) inherited from Phalcon\\Config</p> <p>Helper method for merge configs (forwarding nested config instance)</p>"},{"location":"api/Phalcon_Config/#class-phalconconfigadapterini","title":"Class Phalcon\\Config\\Adapter\\Ini","text":"<p>extends class Phalcon\\Config</p> <p>implements Countable, ArrayAccess</p> <p>Source on GitHub</p> <p>Reads ini files and converts them to Phalcon\\Config objects.</p> <p>Given the next configuration file:</p> <pre><code>&lt;?php\n\n[database]\nadapter = Mysql\nhost = localhost\nusername = scott\npassword = cheetah\ndbname = test_db\n\n[phalcon]\ncontrollersDir = \"../app/controllers/\"\nmodelsDir = \"../app/models/\"\nviewsDir = \"../app/views/\"\n</code></pre> <p>You can read it as follows:</p> <pre><code>&lt;?php\n\n$config = new \\Phalcon\\Config\\Adapter\\Ini(\"path/config.ini\");\n\necho $config-&gt;phalcon-&gt;controllersDir;\necho $config-&gt;database-&gt;username;\n</code></pre> <p>PHP constants may also be parsed in the ini file, so if you define a constant as an ini value before calling the constructor, the constant's value will be integrated into the results. To use it this way you must specify the optional second parameter as INI_SCANNER_NORMAL when calling the constructor:</p> <pre><code>&lt;?php\n\n$config = new \\Phalcon\\Config\\Adapter\\Ini(\n    \"path/config-with-constants.ini\",\n    INI_SCANNER_NORMAL\n);\n</code></pre>"},{"location":"api/Phalcon_Config/#constants_2","title":"Constants","text":"<p>string DEFAULT_PATH_DELIMITER</p>"},{"location":"api/Phalcon_Config/#methods_2","title":"Methods","text":"<p>public  __construct (mixed $filePath, [mixed $mode])</p> <p>Phalcon\\Config\\Adapter\\Ini constructor</p> <p>protected  _parseIniString (mixed $path, mixed $value)</p> <p>Build multidimensional array from string</p> <pre><code>&lt;?php\n\n$this-&gt;_parseIniString(\"path.hello.world\", \"value for last key\");\n\n// result\n[\n     \"path\" =&gt; [\n         \"hello\" =&gt; [\n             \"world\" =&gt; \"value for last key\",\n         ],\n     ],\n];\n</code></pre> <p>protected  _cast (mixed $ini)</p> <p>We have to cast values manually because parse_ini_file() has a poor implementation.</p> <p>public  offsetExists (mixed $index) inherited from Phalcon\\Config</p> <p>Allows to check whether an attribute is defined using the array-syntax</p> <pre><code>&lt;?php\n\nvar_dump(\n    isset($config[\"database\"])\n);\n</code></pre> <p>public  path (mixed $path, [mixed $defaultValue], [mixed $delimiter]) inherited from Phalcon\\Config</p> <p>Returns a value from current config using a dot separated path.</p> <pre><code>&lt;?php\n\necho $config-&gt;path(\"unknown.path\", \"default\", \".\");\n</code></pre> <p>public  get (mixed $index, [mixed $defaultValue]) inherited from Phalcon\\Config</p> <p>Gets an attribute from the configuration, if the attribute isn't defined returns null If the value is exactly null or is not defined the default value will be used instead</p> <pre><code>&lt;?php\n\necho $config-&gt;get(\"controllersDir\", \"../app/controllers/\");\n</code></pre> <p>public  offsetGet (mixed $index) inherited from Phalcon\\Config</p> <p>Gets an attribute using the array-syntax</p> <pre><code>&lt;?php\n\nprint_r(\n    $config[\"database\"]\n);\n</code></pre> <p>public  offsetSet (mixed $index, mixed $value) inherited from Phalcon\\Config</p> <p>Sets an attribute using the array-syntax</p> <pre><code>&lt;?php\n\n$config[\"database\"] = [\n    \"type\" =&gt; \"Sqlite\",\n];\n</code></pre> <p>public  offsetUnset (mixed $index) inherited from Phalcon\\Config</p> <p>Unsets an attribute using the array-syntax</p> <pre><code>&lt;?php\n\nunset($config[\"database\"]);\n</code></pre> <p>public  merge (Phalcon\\Config $config) inherited from Phalcon\\Config</p> <p>Merges a configuration into the current one</p> <pre><code>&lt;?php\n\n$appConfig = new \\Phalcon\\Config(\n    [\n        \"database\" =&gt; [\n            \"host\" =&gt; \"localhost\",\n        ],\n    ]\n);\n\n$globalConfig-&gt;merge($appConfig);\n</code></pre> <p>public  toArray () inherited from Phalcon\\Config</p> <p>Converts recursively the object to an array</p> <pre><code>&lt;?php\n\nprint_r(\n    $config-&gt;toArray()\n);\n</code></pre> <p>public  count () inherited from Phalcon\\Config</p> <p>Returns the count of properties set in the config</p> <p><pre><code>&lt;?php\n\nprint count($config);\n</code></pre> or</p> <pre><code>&lt;?php\n\nprint $config-&gt;count();\n</code></pre> <p>public static  __set_state (array $data) inherited from Phalcon\\Config</p> <p>Restores the state of a Phalcon\\Config object</p> <p>public static  setPathDelimiter ([mixed $delimiter]) inherited from Phalcon\\Config</p> <p>Sets the default path delimiter</p> <p>public static  getPathDelimiter () inherited from Phalcon\\Config</p> <p>Gets the default path delimiter</p> <p>final protected Config merged config _merge (Config $config, [mixed $instance]) inherited from Phalcon\\Config</p> <p>Helper method for merge configs (forwarding nested config instance)</p>"},{"location":"api/Phalcon_Config/#class-phalconconfigadapterjson","title":"Class Phalcon\\Config\\Adapter\\Json","text":"<p>extends class Phalcon\\Config</p> <p>implements Countable, ArrayAccess</p> <p>Source on GitHub</p> <p>Reads JSON files and converts them to Phalcon\\Config objects.</p> <p>Given the following configuration file:</p> <pre><code>&lt;?php\n\n{\"phalcon\":{\"baseuri\":\"\\/phalcon\\/\"},\"models\":{\"metadata\":\"memory\"}}\n</code></pre> <p>You can read it as follows:</p> <pre><code>&lt;?php\n\n$config = new Phalcon\\Config\\Adapter\\Json(\"path/config.json\");\n\necho $config-&gt;phalcon-&gt;baseuri;\necho $config-&gt;models-&gt;metadata;\n</code></pre>"},{"location":"api/Phalcon_Config/#constants_3","title":"Constants","text":"<p>string DEFAULT_PATH_DELIMITER</p>"},{"location":"api/Phalcon_Config/#methods_3","title":"Methods","text":"<p>public  __construct (mixed $filePath)</p> <p>Phalcon\\Config\\Adapter\\Json constructor</p> <p>public  offsetExists (mixed $index) inherited from Phalcon\\Config</p> <p>Allows to check whether an attribute is defined using the array-syntax</p> <pre><code>&lt;?php\n\nvar_dump(\n    isset($config[\"database\"])\n);\n</code></pre> <p>public  path (mixed $path, [mixed $defaultValue], [mixed $delimiter]) inherited from Phalcon\\Config</p> <p>Returns a value from current config using a dot separated path.</p> <pre><code>&lt;?php\n\necho $config-&gt;path(\"unknown.path\", \"default\", \".\");\n</code></pre> <p>public  get (mixed $index, [mixed $defaultValue]) inherited from Phalcon\\Config</p> <p>Gets an attribute from the configuration, if the attribute isn't defined returns null If the value is exactly null or is not defined the default value will be used instead</p> <pre><code>&lt;?php\n\necho $config-&gt;get(\"controllersDir\", \"../app/controllers/\");\n</code></pre> <p>public  offsetGet (mixed $index) inherited from Phalcon\\Config</p> <p>Gets an attribute using the array-syntax</p> <pre><code>&lt;?php\n\nprint_r(\n    $config[\"database\"]\n);\n</code></pre> <p>public  offsetSet (mixed $index, mixed $value) inherited from Phalcon\\Config</p> <p>Sets an attribute using the array-syntax</p> <pre><code>&lt;?php\n\n$config[\"database\"] = [\n    \"type\" =&gt; \"Sqlite\",\n];\n</code></pre> <p>public  offsetUnset (mixed $index) inherited from Phalcon\\Config</p> <p>Unsets an attribute using the array-syntax</p> <pre><code>&lt;?php\n\nunset($config[\"database\"]);\n</code></pre> <p>public  merge (Phalcon\\Config $config) inherited from Phalcon\\Config</p> <p>Merges a configuration into the current one</p> <pre><code>&lt;?php\n\n$appConfig = new \\Phalcon\\Config(\n    [\n        \"database\" =&gt; [\n            \"host\" =&gt; \"localhost\",\n        ],\n    ]\n);\n\n$globalConfig-&gt;merge($appConfig);\n</code></pre> <p>public  toArray () inherited from Phalcon\\Config</p> <p>Converts recursively the object to an array</p> <pre><code>&lt;?php\n\nprint_r(\n    $config-&gt;toArray()\n);\n</code></pre> <p>public  count () inherited from Phalcon\\Config</p> <p>Returns the count of properties set in the config</p> <p><pre><code>&lt;?php\n\nprint count($config);\n</code></pre> or</p> <pre><code>&lt;?php\n\nprint $config-&gt;count();\n</code></pre> <p>public static  __set_state (array $data) inherited from Phalcon\\Config</p> <p>Restores the state of a Phalcon\\Config object</p> <p>public static  setPathDelimiter ([mixed $delimiter]) inherited from Phalcon\\Config</p> <p>Sets the default path delimiter</p> <p>public static  getPathDelimiter () inherited from Phalcon\\Config</p> <p>Gets the default path delimiter</p> <p>final protected Config merged config _merge (Config $config, [mixed $instance]) inherited from Phalcon\\Config</p> <p>Helper method for merge configs (forwarding nested config instance)</p>"},{"location":"api/Phalcon_Config/#class-phalconconfigadapterphp","title":"Class Phalcon\\Config\\Adapter\\Php","text":"<p>extends class Phalcon\\Config</p> <p>implements Countable, ArrayAccess</p> <p>Source on GitHub</p> <p>Reads php files and converts them to Phalcon\\Config objects.</p> <p>Given the next configuration file:</p> <pre><code>&lt;?php\n\n&lt;?php\n\nreturn [\n    \"database\" =&gt; [\n        \"adapter\"  =&gt; \"Mysql\",\n        \"host\"     =&gt; \"localhost\",\n        \"username\" =&gt; \"scott\",\n        \"password\" =&gt; \"cheetah\",\n        \"dbname\"   =&gt; \"test_db\",\n    ],\n    \"phalcon\" =&gt; [\n        \"controllersDir\" =&gt; \"../app/controllers/\",\n        \"modelsDir\"      =&gt; \"../app/models/\",\n        \"viewsDir\"       =&gt; \"../app/views/\",\n    ],\n];\n</code></pre> <p>You can read it as follows:</p> <pre><code>&lt;?php\n\n$config = new \\Phalcon\\Config\\Adapter\\Php(\"path/config.php\");\n\necho $config-&gt;phalcon-&gt;controllersDir;\necho $config-&gt;database-&gt;username;\n</code></pre>"},{"location":"api/Phalcon_Config/#constants_4","title":"Constants","text":"<p>string DEFAULT_PATH_DELIMITER</p>"},{"location":"api/Phalcon_Config/#methods_4","title":"Methods","text":"<p>public  __construct (mixed $filePath)</p> <p>Phalcon\\Config\\Adapter\\Php constructor</p> <p>public  offsetExists (mixed $index) inherited from Phalcon\\Config</p> <p>Allows to check whether an attribute is defined using the array-syntax</p> <pre><code>&lt;?php\n\nvar_dump(\n    isset($config[\"database\"])\n);\n</code></pre> <p>public  path (mixed $path, [mixed $defaultValue], [mixed $delimiter]) inherited from Phalcon\\Config</p> <p>Returns a value from current config using a dot separated path.</p> <pre><code>&lt;?php\n\necho $config-&gt;path(\"unknown.path\", \"default\", \".\");\n</code></pre> <p>public  get (mixed $index, [mixed $defaultValue]) inherited from Phalcon\\Config</p> <p>Gets an attribute from the configuration, if the attribute isn't defined returns null If the value is exactly null or is not defined the default value will be used instead</p> <pre><code>&lt;?php\n\necho $config-&gt;get(\"controllersDir\", \"../app/controllers/\");\n</code></pre> <p>public  offsetGet (mixed $index) inherited from Phalcon\\Config</p> <p>Gets an attribute using the array-syntax</p> <pre><code>&lt;?php\n\nprint_r(\n    $config[\"database\"]\n);\n</code></pre> <p>public  offsetSet (mixed $index, mixed $value) inherited from Phalcon\\Config</p> <p>Sets an attribute using the array-syntax</p> <pre><code>&lt;?php\n\n$config[\"database\"] = [\n    \"type\" =&gt; \"Sqlite\",\n];\n</code></pre> <p>public  offsetUnset (mixed $index) inherited from Phalcon\\Config</p> <p>Unsets an attribute using the array-syntax</p> <pre><code>&lt;?php\n\nunset($config[\"database\"]);\n</code></pre> <p>public  merge (Phalcon\\Config $config) inherited from Phalcon\\Config</p> <p>Merges a configuration into the current one</p> <pre><code>&lt;?php\n\n$appConfig = new \\Phalcon\\Config(\n    [\n        \"database\" =&gt; [\n            \"host\" =&gt; \"localhost\",\n        ],\n    ]\n);\n\n$globalConfig-&gt;merge($appConfig);\n</code></pre> <p>public  toArray () inherited from Phalcon\\Config</p> <p>Converts recursively the object to an array</p> <pre><code>&lt;?php\n\nprint_r(\n    $config-&gt;toArray()\n);\n</code></pre> <p>public  count () inherited from Phalcon\\Config</p> <p>Returns the count of properties set in the config</p> <p><pre><code>&lt;?php\n\nprint count($config);\n</code></pre> or</p> <pre><code>&lt;?php\n\nprint $config-&gt;count();\n</code></pre> <p>public static  __set_state (array $data) inherited from Phalcon\\Config</p> <p>Restores the state of a Phalcon\\Config object</p> <p>public static  setPathDelimiter ([mixed $delimiter]) inherited from Phalcon\\Config</p> <p>Sets the default path delimiter</p> <p>public static  getPathDelimiter () inherited from Phalcon\\Config</p> <p>Gets the default path delimiter</p> <p>final protected Config merged config _merge (Config $config, [mixed $instance]) inherited from Phalcon\\Config</p> <p>Helper method for merge configs (forwarding nested config instance)</p>"},{"location":"api/Phalcon_Config/#class-phalconconfigadapteryaml","title":"Class Phalcon\\Config\\Adapter\\Yaml","text":"<p>extends class Phalcon\\Config</p> <p>implements Countable, ArrayAccess</p> <p>Source on GitHub</p> <p>Reads YAML files and converts them to Phalcon\\Config objects.</p> <p>Given the following configuration file:</p> <pre><code>&lt;?php\n\nphalcon:\n  baseuri:        /phalcon/\n  controllersDir: !approot  /app/controllers/\nmodels:\n  metadata: memory\n</code></pre> <p>You can read it as follows:</p> <pre><code>&lt;?php\n\ndefine(\n    \"APPROOT\",\n    dirname(__DIR__)\n);\n\n$config = new \\Phalcon\\Config\\Adapter\\Yaml(\n    \"path/config.yaml\",\n    [\n        \"!approot\" =&gt; function($value) {\n            return APPROOT . $value;\n        },\n    ]\n);\n\necho $config-&gt;phalcon-&gt;controllersDir;\necho $config-&gt;phalcon-&gt;baseuri;\necho $config-&gt;models-&gt;metadata;\n</code></pre>"},{"location":"api/Phalcon_Config/#constants_5","title":"Constants","text":"<p>string DEFAULT_PATH_DELIMITER</p>"},{"location":"api/Phalcon_Config/#methods_5","title":"Methods","text":"<p>public  __construct (mixed $filePath, [array $callbacks])</p> <p>Phalcon\\Config\\Adapter\\Yaml constructor</p> <p>public  offsetExists (mixed $index) inherited from Phalcon\\Config</p> <p>Allows to check whether an attribute is defined using the array-syntax</p> <pre><code>&lt;?php\n\nvar_dump(\n    isset($config[\"database\"])\n);\n</code></pre> <p>public  path (mixed $path, [mixed $defaultValue], [mixed $delimiter]) inherited from Phalcon\\Config</p> <p>Returns a value from current config using a dot separated path.</p> <pre><code>&lt;?php\n\necho $config-&gt;path(\"unknown.path\", \"default\", \".\");\n</code></pre> <p>public  get (mixed $index, [mixed $defaultValue]) inherited from Phalcon\\Config</p> <p>Gets an attribute from the configuration, if the attribute isn't defined returns null If the value is exactly null or is not defined the default value will be used instead</p> <pre><code>&lt;?php\n\necho $config-&gt;get(\"controllersDir\", \"../app/controllers/\");\n</code></pre> <p>public  offsetGet (mixed $index) inherited from Phalcon\\Config</p> <p>Gets an attribute using the array-syntax</p> <pre><code>&lt;?php\n\nprint_r(\n    $config[\"database\"]\n);\n</code></pre> <p>public  offsetSet (mixed $index, mixed $value) inherited from Phalcon\\Config</p> <p>Sets an attribute using the array-syntax</p> <pre><code>&lt;?php\n\n$config[\"database\"] = [\n    \"type\" =&gt; \"Sqlite\",\n];\n</code></pre> <p>public  offsetUnset (mixed $index) inherited from Phalcon\\Config</p> <p>Unsets an attribute using the array-syntax</p> <pre><code>&lt;?php\n\nunset($config[\"database\"]);\n</code></pre> <p>public  merge (Phalcon\\Config $config) inherited from Phalcon\\Config</p> <p>Merges a configuration into the current one</p> <pre><code>&lt;?php\n\n$appConfig = new \\Phalcon\\Config(\n    [\n        \"database\" =&gt; [\n            \"host\" =&gt; \"localhost\",\n        ],\n    ]\n);\n\n$globalConfig-&gt;merge($appConfig);\n</code></pre> <p>public  toArray () inherited from Phalcon\\Config</p> <p>Converts recursively the object to an array</p> <pre><code>&lt;?php\n\nprint_r(\n    $config-&gt;toArray()\n);\n</code></pre> <p>public  count () inherited from Phalcon\\Config</p> <p>Returns the count of properties set in the config</p> <p><pre><code>&lt;?php\n\nprint count($config);\n</code></pre> or</p> <pre><code>&lt;?php\n\nprint $config-&gt;count();\n</code></pre> <p>public static  __set_state (array $data) inherited from Phalcon\\Config</p> <p>Restores the state of a Phalcon\\Config object</p> <p>public static  setPathDelimiter ([mixed $delimiter]) inherited from Phalcon\\Config</p> <p>Sets the default path delimiter</p> <p>public static  getPathDelimiter () inherited from Phalcon\\Config</p> <p>Gets the default path delimiter</p> <p>final protected Config merged config _merge (Config $config, [mixed $instance]) inherited from Phalcon\\Config</p> <p>Helper method for merge configs (forwarding nested config instance)</p>"},{"location":"api/Phalcon_Config/#class-phalconconfigexception","title":"Class Phalcon\\Config\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Config/#methods_6","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Config/#class-phalconconfigfactory","title":"Class Phalcon\\Config\\Factory","text":"<p>extends abstract class Phalcon\\Factory</p> <p>implements Phalcon\\FactoryInterface</p> <p>Source on GitHub</p> <p>Loads Config Adapter class using 'adapter' option, if no extension is provided it will be added to filePath</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config\\Factory;\n\n$options = [\n    \"filePath\" =&gt; \"path/config\",\n    \"adapter\"  =&gt; \"php\",\n];\n$config = Factory::load($options);\n</code></pre>"},{"location":"api/Phalcon_Config/#methods_7","title":"Methods","text":"<p>public static  load (Phalcon\\Config | array $config)</p> <p>protected static  loadClass (mixed $namespace, mixed $config)</p> <p>...</p>"},{"location":"api/Phalcon_Crypt/","title":"Class Phalcon\\Crypt","text":"<p>implements Phalcon\\CryptInterface</p> <p>Source on GitHub</p> <p>Provides encryption facilities to phalcon applications</p> <pre><code>&lt;?php\n\n$crypt = new \\Phalcon\\Crypt();\n\n$key  = \"le password\";\n$text = \"This is a secret text\";\n\n$encrypted = $crypt-&gt;encrypt($text, $key);\n\necho $crypt-&gt;decrypt($encrypted, $key);\n</code></pre>"},{"location":"api/Phalcon_Crypt/#constants","title":"Constants","text":"<p>integer PADDING_ANSI_X_923</p> <p>integer PADDING_DEFAULT</p> <p>integer PADDING_ISO_10126</p> <p>integer PADDING_ISO_IEC_7816_4</p> <p>integer PADDING_PKCS7</p> <p>integer PADDING_SPACE</p> <p>integer PADDING_ZERO</p>"},{"location":"api/Phalcon_Crypt/#properties","title":"Properties","text":""},{"location":"api/Phalcon_Crypt/#protected","title":"Protected","text":"<p>string $_key;</p> <p>integer $_padding = 0;</p> <p>string $_cipher = \"aes-256-cfb\";</p> <p>array $availableCiphers;</p> <p>Available cipher methods.</p> <p>integer $ivLength = 16; The cipher iv length.</p> <p>string $hashAlgo = \"sha256\";</p> <p>The name of hashing algorithm.</p> <p>boolean $useSigning = false; Whether calculating message digest enabled or not  NOTE: This feature will be enabled by default in Phalcon 4.0.0</p>"},{"location":"api/Phalcon_Crypt/#methods","title":"Methods","text":""},{"location":"api/Phalcon_Crypt/#public","title":"Public","text":"<p>public __construct(string $cipher = \"aes-256-cfb\", boolean $useSigning = false)</p> <p>Class constructor. Allows the user to set the algorithm used to calculate a digest of the message (signing) and to force signing or not.</p> <p>public decrypt (mixed $text [, mixed $key = null]): string</p> <p>Decrypts an encrypted text</p> <p>Throws Phalcon\\Crypt\\Mismatch</p> <pre><code>&lt;?php\n\n$encrypted = $crypt-&gt;decrypt(\n    $encrypted,\n    \"T4\\xb1\\x8d\\xa9\\x98\\x05\\\\x8c\\xbe\\x1d\\x07&amp;[\\x99\\x18\\xa4~Lc1\\xbeW\\xb3\"\n);\n</code></pre> <p>public decryptBase64 (string $text [,mixed $key = null [,boolean $safe = false]]): string</p> <p>Decrypt a text that is coded as a base64 string</p> <p>Throws Phalcon\\Crypt\\Mismatch</p> <p>public encrypt (mixed $text [, mixed $key = null]): string</p> <p>Encrypts a text</p> <pre><code>&lt;?php\n\n$encrypted = $crypt-&gt;encrypt(\n    \"Top secret\",\n    \"T4\\xb1\\x8d\\xa9\\x98\\x05\\\\x8c\\xbe\\x1d\\x07&amp;[\\x99\\x18\\xa4~Lc1\\xbeW\\xb3\"\n);\n</code></pre> <p>public encryptBase64 (string $text [,mixed $key = null [,boolean $safe = false]]): string</p> <p>Encrypts a text returning the result as a base64 string</p> <p>public getAvailableCiphers (): array</p> <p>Returns a list of available ciphers</p> <p>public getAvailableHashAlgos (): array</p> <p>Return a list of registered hashing algorithms suitable for hash_hmac.</p> <p>public getCipher ()</p> <p>Returns the current cipher</p> <p>public getHashAlgo (): string</p> <p>Return the name of hashing algorithm.</p> <p>public getKey (): string</p> <p>Returns the encryption key</p> <p>public setCipher (mixed $cipher): Phalcon\\Crypt</p> <p>Sets the cipher algorithm for data encryption and decryption. The <code>aes-256-gcm</code> is the preferable cipher, but it is not usable until the openssl library is upgraded, which is available in PHP 7.1. The <code>aes-256-ctr</code> is arguably the best choice for cipher algorithm for current openssl library version.</p> <p>Throws: Phalcon\\Crypt\\Exception</p> <p>public setHashAlgo (string $hashAlgo): Phalcon\\Crypt</p> <p>Set the name of hashing algorithm to calculate the message digest. Throws Phalcon\\Crypt\\Exception if the algorithm is not supported by the system</p> <p>public setKey (mixed $key): Phalcon\\Crypt</p> <p>Sets the encryption key. The <code>$key</code> should have been previously generated in a cryptographically safe way.</p> <p>Bad key: <code>le password</code></p> <p>Better (but still unsafe): <code>#1dj8$=dp?.ak//j1V$~%*0X</code></p> <p>Good key: <code>T4\\xb1\\x8d\\xa9\\x98\\x05\\\\x8c\\xbe\\x1d\\x07&amp;[\\x99\\x18\\xa4~Lc1\\xbeW\\xb3</code></p> <p>See also: : Phalcon\\Security\\Random</p> <p>public setPadding (mixed $scheme): Phalcon\\Crypt</p> <p>Changes the padding scheme used</p> <p>public useSigning (boolean $useSigning): Phalcon\\Crypt</p> <p>Sets if the calculating message digest must used (signing). NOTE: This feature will be enabled by default in Phalcon 4.0.0 or greater</p>"},{"location":"api/Phalcon_Crypt/#protected_1","title":"Protected","text":"<p>protected  _cryptPadText (mixed $text, mixed $mode, mixed $blockSize, mixed $paddingType)</p> <p>Pads texts before encryption.</p> <p>See: https://www.di-mgt.com.au/cryptopad.html</p> <p>protected  _cryptUnpadText (mixed $text, mixed $mode, mixed $blockSize, mixed $paddingType)</p> <p>Removes a padding from a text. If the function detects that the text was not padded, it will return it unmodified</p> Type Name Description string $text Message to be unpadded string $mode Encryption mode; unpadding is applied only in CBC or ECB mode int $blockSize Cipher block size int $paddingType Padding scheme <p>protected assertCipherIsAvailable (string $cipher)</p> <p>Assert the cipher is available.</p> <p>Throws Phalcon\\Crypt\\Exception</p> <p>protected assertHashAlgorithmAvailable (string $hashAlgo)</p> <p>Assert the hash algorithm is available.</p> <p>Throws Phalcon\\Crypt\\Exception</p> <p>protected getIvLength (string $cipher): int</p> <p>Initialize available cipher algorithms.</p> <p>Throws Phalcon\\Crypt\\Exception</p> <p>protected initializeAvailableCiphers ()</p> <p>Initialize available cipher algorithms.</p> <p>Throws Phalcon\\Crypt\\Exception</p>"},{"location":"api/Phalcon_Crypt/#class-phalconcryptexception","title":"Class Phalcon\\Crypt\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Crypt/#methods_1","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Crypt/#class-phalconcryptmismatch","title":"Class Phalcon\\Crypt\\Mismatch","text":"<p>extends class Phalcon\\Crypt\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Crypt/#methods_2","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Crypt/#interface-phalconcryptinterface","title":"Interface Phalcon\\CryptInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Crypt/#methods_3","title":"Methods","text":"<p>abstract public  setCipher (mixed $cipher)</p> <p>...</p> <p>abstract public  getCipher ()</p> <p>...</p> <p>abstract public  setKey (mixed $key)</p> <p>...</p> <p>abstract public  getKey ()</p> <p>...</p> <p>abstract public  encrypt (mixed $text, [mixed $key])</p> <p>...</p> <p>abstract public  decrypt (mixed $text, [mixed $key])</p> <p>...</p> <p>abstract public  encryptBase64 (mixed $text, [mixed $key])</p> <p>...</p> <p>abstract public  decryptBase64 (mixed $text, [mixed $key])</p> <p>...</p> <p>abstract public  getAvailableCiphers ()</p> <p>...</p>"},{"location":"api/Phalcon_Db/","title":"Abstract class Phalcon\\Db","text":"<p>Source on GitHub</p> <p>Phalcon\\Db and its related classes provide a simple SQL database interface for Phalcon Framework. The Phalcon\\Db is the basic class you use to connect your PHP application to an RDBMS. There is a different adapter class for each brand of RDBMS.</p> <p>This component is intended to lower level database operations. If you want to interact with databases using higher level of abstraction use Phalcon\\Mvc\\Model.</p> <p>Phalcon\\Db is an abstract class. You only can use it with a database adapter like Phalcon\\Db\\Adapter\\Pdo</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db;\nuse Phalcon\\Db\\Exception;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as MysqlConnection;\n\ntry {\n    $connection = new MysqlConnection(\n        [\n            \"host\"     =&gt; \"192.168.0.11\",\n            \"username\" =&gt; \"sigma\",\n            \"password\" =&gt; \"secret\",\n            \"dbname\"   =&gt; \"blog\",\n            \"port\"     =&gt; \"3306\",\n        ]\n    );\n\n    $result = $connection-&gt;query(\n        \"SELECT * FROM robots LIMIT 5\"\n    );\n\n    $result-&gt;setFetchMode(Db::FETCH_NUM);\n\n    while ($robot = $result-&gt;fetch()) {\n        print_r($robot);\n    }\n} catch (Exception $e) {\n    echo $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre>"},{"location":"api/Phalcon_Db/#constants","title":"Constants","text":"<p>integer FETCH_LAZY</p> <p>integer FETCH_ASSOC</p> <p>integer FETCH_NAMED</p> <p>integer FETCH_NUM</p> <p>integer FETCH_BOTH</p> <p>integer FETCH_OBJ</p> <p>integer FETCH_BOUND</p> <p>integer FETCH_COLUMN</p> <p>integer FETCH_CLASS</p> <p>integer FETCH_INTO</p> <p>integer FETCH_FUNC</p> <p>integer FETCH_GROUP</p> <p>integer FETCH_UNIQUE</p> <p>integer FETCH_KEY_PAIR</p> <p>integer FETCH_CLASSTYPE</p> <p>integer FETCH_SERIALIZE</p> <p>integer FETCH_PROPS_LATE</p>"},{"location":"api/Phalcon_Db/#methods","title":"Methods","text":"<p>public static  setup (array $options)</p> <p>Enables/disables options in the Database component</p>"},{"location":"api/Phalcon_Db/#abstract-class-phalcondbadapter","title":"Abstract class Phalcon\\Db\\Adapter","text":"<p>implements Phalcon\\Db\\AdapterInterface, Phalcon\\Events\\EventsAwareInterface</p> <p>Source on GitHub</p> <p>Base class for Phalcon\\Db adapters</p>"},{"location":"api/Phalcon_Db/#methods_1","title":"Methods","text":"<p>public  getDialectType ()</p> <p>Name of the dialect used</p> <p>public  getType ()</p> <p>Type of database system the adapter is used for</p> <p>public  getSqlVariables ()</p> <p>Active SQL bound parameter variables</p> <p>public  __construct (array $descriptor)</p> <p>Phalcon\\Db\\Adapter constructor</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager)</p> <p>Sets the event manager</p> <p>public  getEventsManager ()</p> <p>Returns the internal event manager</p> <p>public  setDialect (Phalcon\\Db\\DialectInterface $dialect)</p> <p>Sets the dialect used to produce the SQL</p> <p>public  getDialect ()</p> <p>Returns internal dialect instance</p> <p>public  fetchOne (mixed $sqlQuery, [mixed $fetchMode], [mixed $bindParams], [mixed $bindTypes])</p> <p>Returns the first row in a SQL query result</p> <pre><code>&lt;?php\n\n// Getting first robot\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\");\nprint_r($robot);\n\n// Getting first robot with associative indexes only\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\", \\Phalcon\\Db::FETCH_ASSOC);\nprint_r($robot);\n</code></pre> <p>public array fetchAll (string $sqlQuery, [int $fetchMode], [array $bindParams], [array $bindTypes])</p> <p>Dumps the complete result of a query into an array</p> <pre><code>&lt;?php\n\n// Getting all robots with associative indexes only\n$robots = $connection-&gt;fetchAll(\n    \"SELECT * FROM robots\",\n    \\Phalcon\\Db::FETCH_ASSOC\n);\n\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n // Getting all robots that contains word \"robot\" withing the name\n$robots = $connection-&gt;fetchAll(\n    \"SELECT * FROM robots WHERE name LIKE :name\",\n    \\Phalcon\\Db::FETCH_ASSOC,\n    [\n        \"name\" =&gt; \"%robot%\",\n    ]\n);\nforeach($robots as $robot) {\n    print_r($robot);\n}\n</code></pre> <p>public string | ** fetchColumn (string $sqlQuery, [array $placeholders], [int | string $column])</p> <p>Returns the n'th field of first row in a SQL query result</p> <pre><code>&lt;?php\n\n// Getting count of robots\n$robotsCount = $connection-&gt;fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n// Getting name of last edited robot\n$robot = $connection-&gt;fetchColumn(\n    \"SELECT id, name FROM robots order by modified desc\",\n    1\n);\nprint_r($robot);\n</code></pre> <p>public boolean insert (string | array $table, array $values, [array $fields], [array $dataTypes])</p> <p>Inserts data into a table using custom RDBMS SQL syntax</p> <pre><code>&lt;?php\n\n// Inserting a new robot\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\"Astro Boy\", 1952],\n    [\"name\", \"year\"]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</code></pre> <p>public boolean insertAsDict (string $table, array $data, [array $dataTypes])</p> <p>Inserts data into a table using custom RBDM SQL syntax</p> <pre><code>&lt;?php\n\n// Inserting a new robot\n$success = $connection-&gt;insertAsDict(\n    \"robots\",\n    [\n        \"name\" =&gt; \"Astro Boy\",\n        \"year\" =&gt; 1952,\n    ]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</code></pre> <p>public boolean update (string | array $table, array $fields, array $values, [string | array $whereCondition], [array $dataTypes])</p> <p>Updates data on a table using custom RBDM SQL syntax</p> <p><pre><code>&lt;?php\n\n// Updating existing robot\n$success = $connection-&gt;update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n// Updating existing robot with array condition and $dataTypes\n$success = $connection-&gt;update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    [\n        \"conditions\" =&gt; \"id = ?\",\n        \"bind\"       =&gt; [$some_unsafe_id],\n        \"bindTypes\"  =&gt; [PDO::PARAM_INT], // use only if you use $dataTypes param\n    ],\n    [\n        PDO::PARAM_STR\n    ]\n);\n</code></pre> Warning! If $whereCondition is string it not escaped.</p> <p>public boolean updateAsDict (string $table, array $data, [string $whereCondition], [array $dataTypes])</p> <p>Updates data on a table using custom RBDM SQL syntax Another, more convenient syntax</p> <pre><code>&lt;?php\n\n// Updating existing robot\n$success = $connection-&gt;updateAsDict(\n    \"robots\",\n    [\n        \"name\" =&gt; \"New Astro Boy\",\n    ],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n</code></pre> <p>public boolean delete (string | array $table, [string $whereCondition], [array $placeholders], [array $dataTypes])</p> <p>Deletes data from a table using custom RBDM SQL syntax</p> <pre><code>&lt;?php\n\n// Deleting existing robot\n$success = $connection-&gt;delete(\n    \"robots\",\n    \"id = 101\"\n);\n\n// Next SQL sentence is generated\nDELETE FROM `robots` WHERE `id` = 101\n</code></pre> <p>public  escapeIdentifier (array | string $identifier)</p> <p>Escapes a column/table/schema name</p> <pre><code>&lt;?php\n\n$escapedTable = $connection-&gt;escapeIdentifier(\n    \"robots\"\n);\n\n$escapedTable = $connection-&gt;escapeIdentifier(\n    [\n        \"store\",\n        \"robots\",\n    ]\n);\n</code></pre> <p>public string getColumnList (array $columnList)</p> <p>Gets a list of columns</p> <p>public  limit (mixed $sqlQuery, mixed $number)</p> <p>Appends a LIMIT clause to $sqlQuery argument</p> <pre><code>&lt;?php\n\necho $connection-&gt;limit(\"SELECT * FROM robots\", 5);\n</code></pre> <p>public  tableExists (mixed $tableName, [mixed $schemaName])</p> <p>Generates SQL checking for the existence of a schema.table</p> <pre><code>&lt;?php\n\nvar_dump(\n    $connection-&gt;tableExists(\"blog\", \"posts\")\n);\n</code></pre> <p>public  viewExists (mixed $viewName, [mixed $schemaName])</p> <p>Generates SQL checking for the existence of a schema.view</p> <pre><code>&lt;?php\n\nvar_dump(\n    $connection-&gt;viewExists(\"active_users\", \"posts\")\n);\n</code></pre> <p>public  forUpdate (mixed $sqlQuery)</p> <p>Returns a SQL modified with a FOR UPDATE clause</p> <p>public  sharedLock (mixed $sqlQuery)</p> <p>Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <p>public  createTable (mixed $tableName, mixed $schemaName, array $definition)</p> <p>Creates a table</p> <p>public  dropTable (mixed $tableName, [mixed $schemaName], [mixed $ifExists])</p> <p>Drops a table from a schema/database</p> <p>public  createView (mixed $viewName, array $definition, [mixed $schemaName])</p> <p>Creates a view</p> <p>public  dropView (mixed $viewName, [mixed $schemaName], [mixed $ifExists])</p> <p>Drops a view</p> <p>public  addColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column)</p> <p>Adds a column to a table</p> <p>public  modifyColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column, [Phalcon\\Db\\ColumnInterface $currentColumn])</p> <p>Modifies a table column based on a definition</p> <p>public  dropColumn (mixed $tableName, mixed $schemaName, mixed $columnName)</p> <p>Drops a column from a table</p> <p>public  addIndex (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index)</p> <p>Adds an index to a table</p> <p>public  dropIndex (mixed $tableName, mixed $schemaName, mixed $indexName)</p> <p>Drop an index from a table</p> <p>public  addPrimaryKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index)</p> <p>Adds a primary key to a table</p> <p>public  dropPrimaryKey (mixed $tableName, mixed $schemaName)</p> <p>Drops a table's primary key</p> <p>public  addForeignKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ReferenceInterface $reference)</p> <p>Adds a foreign key to a table</p> <p>public  dropForeignKey (mixed $tableName, mixed $schemaName, mixed $referenceName)</p> <p>Drops a foreign key from a table</p> <p>public  getColumnDefinition (Phalcon\\Db\\ColumnInterface $column)</p> <p>Returns the SQL column definition from a column</p> <p>public  listTables ([mixed $schemaName])</p> <p>List all tables on a database</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;listTables(\"blog\")\n);\n</code></pre> <p>public  listViews ([mixed $schemaName])</p> <p>List all views on a database</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;listViews(\"blog\")\n);\n</code></pre> <p>public Phalcon\\Db\\Index describeIndexes (string $table, [string $schema])</p> <p>Lists table indexes</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;describeIndexes(\"robots_parts\")\n);\n</code></pre> <p>public  describeReferences (mixed $table, [mixed $schema])</p> <p>Lists table references</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;describeReferences(\"robots_parts\")\n);\n</code></pre> <p>public  tableOptions (mixed $tableName, [mixed $schemaName])</p> <p>Gets creation options from a table</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;tableOptions(\"robots\")\n);\n</code></pre> <p>public  createSavepoint (mixed $name)</p> <p>Creates a new savepoint</p> <p>public  releaseSavepoint (mixed $name)</p> <p>Releases given savepoint</p> <p>public  rollbackSavepoint (mixed $name)</p> <p>Rollbacks given savepoint</p> <p>public  setNestedTransactionsWithSavepoints (mixed $nestedTransactionsWithSavepoints)</p> <p>Set if nested transactions should use savepoints</p> <p>public  isNestedTransactionsWithSavepoints ()</p> <p>Returns if nested transactions should use savepoints</p> <p>public  getNestedTransactionSavepointName ()</p> <p>Returns the savepoint name to use for nested transactions</p> <p>public  getDefaultIdValue ()</p> <p>Returns the default identity value to be inserted in an identity column</p> <pre><code>&lt;?php\n\n// Inserting a new robot with a valid default value for the column 'id'\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        $connection-&gt;getDefaultIdValue(),\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"id\",\n        \"name\",\n        \"year\",\n    ]\n);\n</code></pre> <p>public  getDefaultValue ()</p> <p>Returns the default value to make the RBDM use the default value declared in the table definition</p> <pre><code>&lt;?php\n\n// Inserting a new robot with a valid default value for the column 'year'\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        $connection-&gt;getDefaultValue()\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n</code></pre> <p>public  supportSequences ()</p> <p>Check whether the database system requires a sequence to produce auto-numeric values</p> <p>public  useExplicitIdValue ()</p> <p>Check whether the database system requires an explicit value for identity columns</p> <p>public  getDescriptor ()</p> <p>Return descriptor used to connect to the active database</p> <p>public string getConnectionId ()</p> <p>Gets the active connection unique identifier</p> <p>public  getSQLStatement ()</p> <p>Active SQL statement in the object</p> <p>public  getRealSQLStatement ()</p> <p>Active SQL statement in the object without replace bound parameters</p> <p>public array getSQLBindTypes ()</p> <p>Active SQL statement in the object</p> <p>abstract public  connect ([array $descriptor]) inherited from Phalcon\\Db\\AdapterInterface</p> <p>...</p> <p>abstract public  query (mixed $sqlStatement, [mixed $placeholders], [mixed $dataTypes]) inherited from Phalcon\\Db\\AdapterInterface</p> <p>...</p> <p>abstract public  execute (mixed $sqlStatement, [mixed $placeholders], [mixed $dataTypes]) inherited from Phalcon\\Db\\AdapterInterface</p> <p>...</p> <p>abstract public  affectedRows () inherited from Phalcon\\Db\\AdapterInterface</p> <p>...</p> <p>abstract public  close () inherited from Phalcon\\Db\\AdapterInterface</p> <p>...</p> <p>abstract public  escapeString (mixed $str) inherited from Phalcon\\Db\\AdapterInterface</p> <p>...</p> <p>abstract public  lastInsertId ([mixed $sequenceName]) inherited from Phalcon\\Db\\AdapterInterface</p> <p>...</p> <p>abstract public  begin ([mixed $nesting]) inherited from Phalcon\\Db\\AdapterInterface</p> <p>...</p> <p>abstract public  rollback ([mixed $nesting]) inherited from Phalcon\\Db\\AdapterInterface</p> <p>...</p> <p>abstract public  commit ([mixed $nesting]) inherited from Phalcon\\Db\\AdapterInterface</p> <p>...</p> <p>abstract public  isUnderTransaction () inherited from Phalcon\\Db\\AdapterInterface</p> <p>...</p> <p>abstract public  getInternalHandler () inherited from Phalcon\\Db\\AdapterInterface</p> <p>...</p> <p>abstract public  describeColumns (mixed $table, [mixed $schema]) inherited from Phalcon\\Db\\AdapterInterface</p> <p>...</p>"},{"location":"api/Phalcon_Db/#abstract-class-phalcondbadapterpdo","title":"Abstract class Phalcon\\Db\\Adapter\\Pdo","text":"<p>extends abstract class Phalcon\\Db\\Adapter</p> <p>implements Phalcon\\Events\\EventsAwareInterface, Phalcon\\Db\\AdapterInterface</p> <p>Source on GitHub</p> <p>Phalcon\\Db\\Adapter\\Pdo is the Phalcon\\Db that internally uses PDO to connect to a database</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n$config = [\n    \"host\"     =&gt; \"localhost\",\n    \"dbname\"   =&gt; \"blog\",\n    \"port\"     =&gt; 3306,\n    \"username\" =&gt; \"sigma\",\n    \"password\" =&gt; \"secret\",\n];\n\n$connection = new Mysql($config);\n</code></pre>"},{"location":"api/Phalcon_Db/#methods_2","title":"Methods","text":"<p>public  __construct (array $descriptor)</p> <p>Constructor for Phalcon\\Db\\Adapter\\Pdo</p> <p>public  connect ([array $descriptor])</p> <p>This method is automatically called in \\Phalcon\\Db\\Adapter\\Pdo constructor. Call it when you need to restore a database connection.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n// Make a connection\n$connection = new Mysql(\n    [\n        \"host\"     =&gt; \"localhost\",\n        \"username\" =&gt; \"sigma\",\n        \"password\" =&gt; \"secret\",\n        \"dbname\"   =&gt; \"blog\",\n        \"port\"     =&gt; 3306,\n    ]\n);\n\n// Reconnect\n$connection-&gt;connect();\n</code></pre> <p>public  prepare (mixed $sqlStatement)</p> <p>Returns a PDO prepared statement to be executed with 'executePrepared'</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Column;\n\n$statement = $db-&gt;prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection-&gt;executePrepared(\n    $statement,\n    [\n        \"name\" =&gt; \"Voltron\",\n    ],\n    [\n        \"name\" =&gt; Column::BIND_PARAM_INT,\n    ]\n);\n</code></pre> <p>public PDOStatement executePrepared (PDOStatement $statement, array $placeholders, array $dataTypes)</p> <p>Executes a prepared statement binding. This function uses integer indexes starting from zero</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Column;\n\n$statement = $db-&gt;prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection-&gt;executePrepared(\n    $statement,\n    [\n        \"name\" =&gt; \"Voltron\",\n    ],\n    [\n        \"name\" =&gt; Column::BIND_PARAM_INT,\n    ]\n);\n</code></pre> <p>public  query (mixed $sqlStatement, [mixed $bindParams], [mixed $bindTypes])</p> <p>Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server is returning rows</p> <pre><code>&lt;?php\n\n// Querying data\n$resultset = $connection-&gt;query(\n    \"SELECT * FROM robots WHERE type = 'mechanical'\"\n);\n\n$resultset = $connection-&gt;query(\n    \"SELECT * FROM robots WHERE type = ?\",\n    [\n        \"mechanical\",\n    ]\n);\n</code></pre> <p>public  execute (mixed $sqlStatement, [mixed $bindParams], [mixed $bindTypes])</p> <p>Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server doesn't return any rows</p> <pre><code>&lt;?php\n\n// Inserting data\n$success = $connection-&gt;execute(\n    \"INSERT INTO robots VALUES (1, 'Astro Boy')\"\n);\n\n$success = $connection-&gt;execute(\n    \"INSERT INTO robots VALUES (?, ?)\",\n    [\n        1,\n        \"Astro Boy\",\n    ]\n);\n</code></pre> <p>public  affectedRows ()</p> <p>Returns the number of affected rows by the latest INSERT/UPDATE/DELETE executed in the database system</p> <pre><code>&lt;?php\n\n$connection-&gt;execute(\n    \"DELETE FROM robots\"\n);\n\necho $connection-&gt;affectedRows(), \" were deleted\";\n</code></pre> <p>public  close ()</p> <p>Closes the active connection returning success. Phalcon automatically closes and destroys active connections when the request ends</p> <p>public  escapeString (mixed $str)</p> <p>Escapes a value to avoid SQL injections according to the active charset in the connection</p> <pre><code>&lt;?php\n\n$escapedStr = $connection-&gt;escapeString(\"some dangerous value\");\n</code></pre> <p>public  convertBoundParams (mixed $sql, [array $params])</p> <p>Converts bound parameters such as :name: or ?1 into PDO bind params ?</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;convertBoundParams(\n        \"SELECT * FROM robots WHERE name = :name:\",\n        [\n            \"Bender\",\n        ]\n    )\n);\n</code></pre> <p>public int | boolean lastInsertId ([string $sequenceName])</p> <p>Returns the insert id for the auto_increment/serial column inserted in the latest executed SQL statement</p> <pre><code>&lt;?php\n\n// Inserting a new robot\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n\n// Getting the generated id\n$id = $connection-&gt;lastInsertId();\n</code></pre> <p>public  begin ([mixed $nesting])</p> <p>Starts a transaction in the connection</p> <p>public  rollback ([mixed $nesting])</p> <p>Rollbacks the active transaction in the connection</p> <p>public  commit ([mixed $nesting])</p> <p>Commits the active transaction in the connection</p> <p>public  getTransactionLevel ()</p> <p>Returns the current transaction nesting level</p> <p>public  isUnderTransaction ()</p> <p>Checks whether the connection is under a transaction</p> <pre><code>&lt;?php\n\n$connection-&gt;begin();\n\n// true\nvar_dump(\n    $connection-&gt;isUnderTransaction()\n);\n</code></pre> <p>public  getInternalHandler ()</p> <p>Return internal PDO handler</p> <p>public array getErrorInfo ()</p> <p>Return the error info, if any</p> <p>public  getDialectType () inherited from Phalcon\\Db\\Adapter</p> <p>Name of the dialect used</p> <p>public  getType () inherited from Phalcon\\Db\\Adapter</p> <p>Type of database system the adapter is used for</p> <p>public  getSqlVariables () inherited from Phalcon\\Db\\Adapter</p> <p>Active SQL bound parameter variables</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Db\\Adapter</p> <p>Sets the event manager</p> <p>public  getEventsManager () inherited from Phalcon\\Db\\Adapter</p> <p>Returns the internal event manager</p> <p>public  setDialect (Phalcon\\Db\\DialectInterface $dialect) inherited from Phalcon\\Db\\Adapter</p> <p>Sets the dialect used to produce the SQL</p> <p>public  getDialect () inherited from Phalcon\\Db\\Adapter</p> <p>Returns internal dialect instance</p> <p>public  fetchOne (mixed $sqlQuery, [mixed $fetchMode], [mixed $bindParams], [mixed $bindTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Returns the first row in a SQL query result</p> <pre><code>&lt;?php\n\n// Getting first robot\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\");\nprint_r($robot);\n\n// Getting first robot with associative indexes only\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\", \\Phalcon\\Db::FETCH_ASSOC);\nprint_r($robot);\n</code></pre> <p>public array fetchAll (string $sqlQuery, [int $fetchMode], [array $bindParams], [array $bindTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Dumps the complete result of a query into an array</p> <pre><code>&lt;?php\n\n// Getting all robots with associative indexes only\n$robots = $connection-&gt;fetchAll(\n    \"SELECT * FROM robots\",\n    \\Phalcon\\Db::FETCH_ASSOC\n);\n\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n // Getting all robots that contains word \"robot\" withing the name\n$robots = $connection-&gt;fetchAll(\n    \"SELECT * FROM robots WHERE name LIKE :name\",\n    \\Phalcon\\Db::FETCH_ASSOC,\n    [\n        \"name\" =&gt; \"%robot%\",\n    ]\n);\nforeach($robots as $robot) {\n    print_r($robot);\n}\n</code></pre> <p>public string | ** fetchColumn (string $sqlQuery, [array $placeholders], [int | string $column]) inherited from Phalcon\\Db\\Adapter</p> <p>Returns the n'th field of first row in a SQL query result</p> <pre><code>&lt;?php\n\n// Getting count of robots\n$robotsCount = $connection-&gt;fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n// Getting name of last edited robot\n$robot = $connection-&gt;fetchColumn(\n    \"SELECT id, name FROM robots order by modified desc\",\n    1\n);\nprint_r($robot);\n</code></pre> <p>public boolean insert (string | array $table, array $values, [array $fields], [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Inserts data into a table using custom RDBMS SQL syntax</p> <pre><code>&lt;?php\n\n// Inserting a new robot\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\"Astro Boy\", 1952],\n    [\"name\", \"year\"]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</code></pre> <p>public boolean insertAsDict (string $table, array $data, [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Inserts data into a table using custom RBDM SQL syntax</p> <pre><code>&lt;?php\n\n// Inserting a new robot\n$success = $connection-&gt;insertAsDict(\n    \"robots\",\n    [\n        \"name\" =&gt; \"Astro Boy\",\n        \"year\" =&gt; 1952,\n    ]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</code></pre> <p>public boolean update (string | array $table, array $fields, array $values, [string | array $whereCondition], [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Updates data on a table using custom RBDM SQL syntax</p> <p><pre><code>&lt;?php\n\n// Updating existing robot\n$success = $connection-&gt;update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n// Updating existing robot with array condition and $dataTypes\n$success = $connection-&gt;update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    [\n        \"conditions\" =&gt; \"id = ?\",\n        \"bind\"       =&gt; [$some_unsafe_id],\n        \"bindTypes\"  =&gt; [PDO::PARAM_INT], // use only if you use $dataTypes param\n    ],\n    [\n        PDO::PARAM_STR\n    ]\n);\n</code></pre> Warning! If $whereCondition is string it not escaped.</p> <p>public boolean updateAsDict (string $table, array $data, [string $whereCondition], [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Updates data on a table using custom RBDM SQL syntax Another, more convenient syntax</p> <pre><code>&lt;?php\n\n// Updating existing robot\n$success = $connection-&gt;updateAsDict(\n    \"robots\",\n    [\n        \"name\" =&gt; \"New Astro Boy\",\n    ],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n</code></pre> <p>public boolean delete (string | array $table, [string $whereCondition], [array $placeholders], [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Deletes data from a table using custom RBDM SQL syntax</p> <pre><code>&lt;?php\n\n// Deleting existing robot\n$success = $connection-&gt;delete(\n    \"robots\",\n    \"id = 101\"\n);\n\n// Next SQL sentence is generated\nDELETE FROM `robots` WHERE `id` = 101\n</code></pre> <p>public  escapeIdentifier (array | string $identifier) inherited from Phalcon\\Db\\Adapter</p> <p>Escapes a column/table/schema name</p> <pre><code>&lt;?php\n\n$escapedTable = $connection-&gt;escapeIdentifier(\n    \"robots\"\n);\n\n$escapedTable = $connection-&gt;escapeIdentifier(\n    [\n        \"store\",\n        \"robots\",\n    ]\n);\n</code></pre> <p>public string getColumnList (array $columnList) inherited from Phalcon\\Db\\Adapter</p> <p>Gets a list of columns</p> <p>public  limit (mixed $sqlQuery, mixed $number) inherited from Phalcon\\Db\\Adapter</p> <p>Appends a LIMIT clause to $sqlQuery argument</p> <pre><code>&lt;?php\n\necho $connection-&gt;limit(\"SELECT * FROM robots\", 5);\n</code></pre> <p>public  tableExists (mixed $tableName, [mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>Generates SQL checking for the existence of a schema.table</p> <pre><code>&lt;?php\n\nvar_dump(\n    $connection-&gt;tableExists(\"blog\", \"posts\")\n);\n</code></pre> <p>public  viewExists (mixed $viewName, [mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>Generates SQL checking for the existence of a schema.view</p> <pre><code>&lt;?php\n\nvar_dump(\n    $connection-&gt;viewExists(\"active_users\", \"posts\")\n);\n</code></pre> <p>public  forUpdate (mixed $sqlQuery) inherited from Phalcon\\Db\\Adapter</p> <p>Returns a SQL modified with a FOR UPDATE clause</p> <p>public  sharedLock (mixed $sqlQuery) inherited from Phalcon\\Db\\Adapter</p> <p>Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <p>public  createTable (mixed $tableName, mixed $schemaName, array $definition) inherited from Phalcon\\Db\\Adapter</p> <p>Creates a table</p> <p>public  dropTable (mixed $tableName, [mixed $schemaName], [mixed $ifExists]) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a table from a schema/database</p> <p>public  createView (mixed $viewName, array $definition, [mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>Creates a view</p> <p>public  dropView (mixed $viewName, [mixed $schemaName], [mixed $ifExists]) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a view</p> <p>public  addColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column) inherited from Phalcon\\Db\\Adapter</p> <p>Adds a column to a table</p> <p>public  modifyColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column, [Phalcon\\Db\\ColumnInterface $currentColumn]) inherited from Phalcon\\Db\\Adapter</p> <p>Modifies a table column based on a definition</p> <p>public  dropColumn (mixed $tableName, mixed $schemaName, mixed $columnName) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a column from a table</p> <p>public  addIndex (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index) inherited from Phalcon\\Db\\Adapter</p> <p>Adds an index to a table</p> <p>public  dropIndex (mixed $tableName, mixed $schemaName, mixed $indexName) inherited from Phalcon\\Db\\Adapter</p> <p>Drop an index from a table</p> <p>public  addPrimaryKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index) inherited from Phalcon\\Db\\Adapter</p> <p>Adds a primary key to a table</p> <p>public  dropPrimaryKey (mixed $tableName, mixed $schemaName) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a table's primary key</p> <p>public  addForeignKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ReferenceInterface $reference) inherited from Phalcon\\Db\\Adapter</p> <p>Adds a foreign key to a table</p> <p>public  dropForeignKey (mixed $tableName, mixed $schemaName, mixed $referenceName) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a foreign key from a table</p> <p>public  getColumnDefinition (Phalcon\\Db\\ColumnInterface $column) inherited from Phalcon\\Db\\Adapter</p> <p>Returns the SQL column definition from a column</p> <p>public  listTables ([mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>List all tables on a database</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;listTables(\"blog\")\n);\n</code></pre> <p>public  listViews ([mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>List all views on a database</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;listViews(\"blog\")\n);\n</code></pre> <p>public Phalcon\\Db\\Index describeIndexes (string $table, [string $schema]) inherited from Phalcon\\Db\\Adapter</p> <p>Lists table indexes</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;describeIndexes(\"robots_parts\")\n);\n</code></pre> <p>public  describeReferences (mixed $table, [mixed $schema]) inherited from Phalcon\\Db\\Adapter</p> <p>Lists table references</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;describeReferences(\"robots_parts\")\n);\n</code></pre> <p>public  tableOptions (mixed $tableName, [mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>Gets creation options from a table</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;tableOptions(\"robots\")\n);\n</code></pre> <p>public  createSavepoint (mixed $name) inherited from Phalcon\\Db\\Adapter</p> <p>Creates a new savepoint</p> <p>public  releaseSavepoint (mixed $name) inherited from Phalcon\\Db\\Adapter</p> <p>Releases given savepoint</p> <p>public  rollbackSavepoint (mixed $name) inherited from Phalcon\\Db\\Adapter</p> <p>Rollbacks given savepoint</p> <p>public  setNestedTransactionsWithSavepoints (mixed $nestedTransactionsWithSavepoints) inherited from Phalcon\\Db\\Adapter</p> <p>Set if nested transactions should use savepoints</p> <p>public  isNestedTransactionsWithSavepoints () inherited from Phalcon\\Db\\Adapter</p> <p>Returns if nested transactions should use savepoints</p> <p>public  getNestedTransactionSavepointName () inherited from Phalcon\\Db\\Adapter</p> <p>Returns the savepoint name to use for nested transactions</p> <p>public  getDefaultIdValue () inherited from Phalcon\\Db\\Adapter</p> <p>Returns the default identity value to be inserted in an identity column</p> <pre><code>&lt;?php\n\n// Inserting a new robot with a valid default value for the column 'id'\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        $connection-&gt;getDefaultIdValue(),\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"id\",\n        \"name\",\n        \"year\",\n    ]\n);\n</code></pre> <p>public  getDefaultValue () inherited from Phalcon\\Db\\Adapter</p> <p>Returns the default value to make the RBDM use the default value declared in the table definition</p> <pre><code>&lt;?php\n\n// Inserting a new robot with a valid default value for the column 'year'\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        $connection-&gt;getDefaultValue()\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n</code></pre> <p>public  supportSequences () inherited from Phalcon\\Db\\Adapter</p> <p>Check whether the database system requires a sequence to produce auto-numeric values</p> <p>public  useExplicitIdValue () inherited from Phalcon\\Db\\Adapter</p> <p>Check whether the database system requires an explicit value for identity columns</p> <p>public  getDescriptor () inherited from Phalcon\\Db\\Adapter</p> <p>Return descriptor used to connect to the active database</p> <p>public string getConnectionId () inherited from Phalcon\\Db\\Adapter</p> <p>Gets the active connection unique identifier</p> <p>public  getSQLStatement () inherited from Phalcon\\Db\\Adapter</p> <p>Active SQL statement in the object</p> <p>public  getRealSQLStatement () inherited from Phalcon\\Db\\Adapter</p> <p>Active SQL statement in the object without replace bound parameters</p> <p>public array getSQLBindTypes () inherited from Phalcon\\Db\\Adapter</p> <p>Active SQL statement in the object</p> <p>abstract public  describeColumns (mixed $table, [mixed $schema]) inherited from Phalcon\\Db\\AdapterInterface</p> <p>...</p>"},{"location":"api/Phalcon_Db/#class-phalcondbadapterpdofactory","title":"Class Phalcon\\Db\\Adapter\\Pdo\\Factory","text":"<p>extends abstract class Phalcon\\Factory</p> <p>implements Phalcon\\FactoryInterface</p> <p>Source on GitHub</p> <p>Loads PDO Adapter class using 'adapter' option</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Pdo\\Factory;\n\n$options = [\n    \"host\"     =&gt; \"localhost\",\n    \"dbname\"   =&gt; \"blog\",\n    \"port\"     =&gt; 3306,\n    \"username\" =&gt; \"sigma\",\n    \"password\" =&gt; \"secret\",\n    \"adapter\"  =&gt; \"mysql\",\n];\n$db = Factory::load($options);\n</code></pre>"},{"location":"api/Phalcon_Db/#methods_3","title":"Methods","text":"<p>public static  load (Phalcon\\Config | array $config)</p> <p>protected static  loadClass (mixed $namespace, mixed $config) inherited from Phalcon\\Factory</p> <p>...</p>"},{"location":"api/Phalcon_Db/#class-phalcondbadapterpdomysql","title":"Class Phalcon\\Db\\Adapter\\Pdo\\Mysql","text":"<p>extends abstract class Phalcon\\Db\\Adapter\\Pdo</p> <p>implements Phalcon\\Db\\AdapterInterface, Phalcon\\Events\\EventsAwareInterface</p> <p>Source on GitHub</p> <p>Specific functions for the Mysql database system</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n$config = [\n    \"host\"     =&gt; \"localhost\",\n    \"dbname\"   =&gt; \"blog\",\n    \"port\"     =&gt; 3306,\n    \"username\" =&gt; \"sigma\",\n    \"password\" =&gt; \"secret\",\n];\n\n$connection = new Mysql($config);\n</code></pre>"},{"location":"api/Phalcon_Db/#methods_4","title":"Methods","text":"<p>public  describeColumns (mixed $table, [mixed $schema])</p> <p>Returns an array of Phalcon\\Db\\Column objects describing a table</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;describeColumns(\"posts\")\n);\n</code></pre> <p>public Phalcon\\Db\\IndexInterface describeIndexes (string $table, [string $schema])</p> <p>Lists table indexes</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;describeIndexes(\"robots_parts\")\n);\n</code></pre> <p>public  describeReferences (mixed $table, [mixed $schema])</p> <p>Lists table references</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;describeReferences(\"robots_parts\")\n);\n</code></pre> <p>public  __construct (array $descriptor) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Constructor for Phalcon\\Db\\Adapter\\Pdo</p> <p>public  connect ([array $descriptor]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>This method is automatically called in \\Phalcon\\Db\\Adapter\\Pdo constructor. Call it when you need to restore a database connection.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n// Make a connection\n$connection = new Mysql(\n    [\n        \"host\"     =&gt; \"localhost\",\n        \"username\" =&gt; \"sigma\",\n        \"password\" =&gt; \"secret\",\n        \"dbname\"   =&gt; \"blog\",\n        \"port\"     =&gt; 3306,\n    ]\n);\n\n// Reconnect\n$connection-&gt;connect();\n</code></pre> <p>public  prepare (mixed $sqlStatement) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Returns a PDO prepared statement to be executed with 'executePrepared'</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Column;\n\n$statement = $db-&gt;prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection-&gt;executePrepared(\n    $statement,\n    [\n        \"name\" =&gt; \"Voltron\",\n    ],\n    [\n        \"name\" =&gt; Column::BIND_PARAM_INT,\n    ]\n);\n</code></pre> <p>public PDOStatement executePrepared (PDOStatement $statement, array $placeholders, array $dataTypes) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Executes a prepared statement binding. This function uses integer indexes starting from zero</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Column;\n\n$statement = $db-&gt;prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection-&gt;executePrepared(\n    $statement,\n    [\n        \"name\" =&gt; \"Voltron\",\n    ],\n    [\n        \"name\" =&gt; Column::BIND_PARAM_INT,\n    ]\n);\n</code></pre> <p>public  query (mixed $sqlStatement, [mixed $bindParams], [mixed $bindTypes]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server is returning rows</p> <pre><code>&lt;?php\n\n// Querying data\n$resultset = $connection-&gt;query(\n    \"SELECT * FROM robots WHERE type = 'mechanical'\"\n);\n\n$resultset = $connection-&gt;query(\n    \"SELECT * FROM robots WHERE type = ?\",\n    [\n        \"mechanical\",\n    ]\n);\n</code></pre> <p>public  execute (mixed $sqlStatement, [mixed $bindParams], [mixed $bindTypes]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server doesn't return any rows</p> <pre><code>&lt;?php\n\n// Inserting data\n$success = $connection-&gt;execute(\n    \"INSERT INTO robots VALUES (1, 'Astro Boy')\"\n);\n\n$success = $connection-&gt;execute(\n    \"INSERT INTO robots VALUES (?, ?)\",\n    [\n        1,\n        \"Astro Boy\",\n    ]\n);\n</code></pre> <p>public  affectedRows () inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Returns the number of affected rows by the latest INSERT/UPDATE/DELETE executed in the database system</p> <pre><code>&lt;?php\n\n$connection-&gt;execute(\n    \"DELETE FROM robots\"\n);\n\necho $connection-&gt;affectedRows(), \" were deleted\";\n</code></pre> <p>public  close () inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Closes the active connection returning success. Phalcon automatically closes and destroys active connections when the request ends</p> <p>public  escapeString (mixed $str) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Escapes a value to avoid SQL injections according to the active charset in the connection</p> <pre><code>&lt;?php\n\n$escapedStr = $connection-&gt;escapeString(\"some dangerous value\");\n</code></pre> <p>public  convertBoundParams (mixed $sql, [array $params]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Converts bound parameters such as :name: or ?1 into PDO bind params ?</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;convertBoundParams(\n        \"SELECT * FROM robots WHERE name = :name:\",\n        [\n            \"Bender\",\n        ]\n    )\n);\n</code></pre> <p>public int | boolean lastInsertId ([string $sequenceName]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Returns the insert id for the auto_increment/serial column inserted in the latest executed SQL statement</p> <pre><code>&lt;?php\n\n// Inserting a new robot\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n\n// Getting the generated id\n$id = $connection-&gt;lastInsertId();\n</code></pre> <p>public  begin ([mixed $nesting]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Starts a transaction in the connection</p> <p>public  rollback ([mixed $nesting]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Rollbacks the active transaction in the connection</p> <p>public  commit ([mixed $nesting]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Commits the active transaction in the connection</p> <p>public  getTransactionLevel () inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Returns the current transaction nesting level</p> <p>public  isUnderTransaction () inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Checks whether the connection is under a transaction</p> <pre><code>&lt;?php\n\n$connection-&gt;begin();\n\n// true\nvar_dump(\n    $connection-&gt;isUnderTransaction()\n);\n</code></pre> <p>public  getInternalHandler () inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Return internal PDO handler</p> <p>public array getErrorInfo () inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Return the error info, if any</p> <p>public  getDialectType () inherited from Phalcon\\Db\\Adapter</p> <p>Name of the dialect used</p> <p>public  getType () inherited from Phalcon\\Db\\Adapter</p> <p>Type of database system the adapter is used for</p> <p>public  getSqlVariables () inherited from Phalcon\\Db\\Adapter</p> <p>Active SQL bound parameter variables</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Db\\Adapter</p> <p>Sets the event manager</p> <p>public  getEventsManager () inherited from Phalcon\\Db\\Adapter</p> <p>Returns the internal event manager</p> <p>public  setDialect (Phalcon\\Db\\DialectInterface $dialect) inherited from Phalcon\\Db\\Adapter</p> <p>Sets the dialect used to produce the SQL</p> <p>public  getDialect () inherited from Phalcon\\Db\\Adapter</p> <p>Returns internal dialect instance</p> <p>public  fetchOne (mixed $sqlQuery, [mixed $fetchMode], [mixed $bindParams], [mixed $bindTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Returns the first row in a SQL query result</p> <pre><code>&lt;?php\n\n// Getting first robot\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\");\nprint_r($robot);\n\n// Getting first robot with associative indexes only\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\", \\Phalcon\\Db::FETCH_ASSOC);\nprint_r($robot);\n</code></pre> <p>public array fetchAll (string $sqlQuery, [int $fetchMode], [array $bindParams], [array $bindTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Dumps the complete result of a query into an array</p> <pre><code>&lt;?php\n\n// Getting all robots with associative indexes only\n$robots = $connection-&gt;fetchAll(\n    \"SELECT * FROM robots\",\n    \\Phalcon\\Db::FETCH_ASSOC\n);\n\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n // Getting all robots that contains word \"robot\" withing the name\n$robots = $connection-&gt;fetchAll(\n    \"SELECT * FROM robots WHERE name LIKE :name\",\n    \\Phalcon\\Db::FETCH_ASSOC,\n    [\n        \"name\" =&gt; \"%robot%\",\n    ]\n);\nforeach($robots as $robot) {\n    print_r($robot);\n}\n</code></pre> <p>public string | ** fetchColumn (string $sqlQuery, [array $placeholders], [int | string $column]) inherited from Phalcon\\Db\\Adapter</p> <p>Returns the n'th field of first row in a SQL query result</p> <pre><code>&lt;?php\n\n// Getting count of robots\n$robotsCount = $connection-&gt;fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n// Getting name of last edited robot\n$robot = $connection-&gt;fetchColumn(\n    \"SELECT id, name FROM robots order by modified desc\",\n    1\n);\nprint_r($robot);\n</code></pre> <p>public boolean insert (string | array $table, array $values, [array $fields], [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Inserts data into a table using custom RDBMS SQL syntax</p> <pre><code>&lt;?php\n\n// Inserting a new robot\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\"Astro Boy\", 1952],\n    [\"name\", \"year\"]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</code></pre> <p>public boolean insertAsDict (string $table, array $data, [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Inserts data into a table using custom RBDM SQL syntax</p> <pre><code>&lt;?php\n\n// Inserting a new robot\n$success = $connection-&gt;insertAsDict(\n    \"robots\",\n    [\n        \"name\" =&gt; \"Astro Boy\",\n        \"year\" =&gt; 1952,\n    ]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</code></pre> <p>public boolean update (string | array $table, array $fields, array $values, [string | array $whereCondition], [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Updates data on a table using custom RBDM SQL syntax</p> <p><pre><code>&lt;?php\n\n// Updating existing robot\n$success = $connection-&gt;update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n// Updating existing robot with array condition and $dataTypes\n$success = $connection-&gt;update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    [\n        \"conditions\" =&gt; \"id = ?\",\n        \"bind\"       =&gt; [$some_unsafe_id],\n        \"bindTypes\"  =&gt; [PDO::PARAM_INT], // use only if you use $dataTypes param\n    ],\n    [\n        PDO::PARAM_STR\n    ]\n);\n</code></pre> Warning! If $whereCondition is string it not escaped.</p> <p>public boolean updateAsDict (string $table, array $data, [string $whereCondition], [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Updates data on a table using custom RBDM SQL syntax Another, more convenient syntax</p> <pre><code>&lt;?php\n\n// Updating existing robot\n$success = $connection-&gt;updateAsDict(\n    \"robots\",\n    [\n        \"name\" =&gt; \"New Astro Boy\",\n    ],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n</code></pre> <p>public boolean delete (string | array $table, [string $whereCondition], [array $placeholders], [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Deletes data from a table using custom RBDM SQL syntax</p> <pre><code>&lt;?php\n\n// Deleting existing robot\n$success = $connection-&gt;delete(\n    \"robots\",\n    \"id = 101\"\n);\n\n// Next SQL sentence is generated\nDELETE FROM `robots` WHERE `id` = 101\n</code></pre> <p>public  escapeIdentifier (array | string $identifier) inherited from Phalcon\\Db\\Adapter</p> <p>Escapes a column/table/schema name</p> <pre><code>&lt;?php\n\n$escapedTable = $connection-&gt;escapeIdentifier(\n    \"robots\"\n);\n\n$escapedTable = $connection-&gt;escapeIdentifier(\n    [\n        \"store\",\n        \"robots\",\n    ]\n);\n</code></pre> <p>public string getColumnList (array $columnList) inherited from Phalcon\\Db\\Adapter</p> <p>Gets a list of columns</p> <p>public  limit (mixed $sqlQuery, mixed $number) inherited from Phalcon\\Db\\Adapter</p> <p>Appends a LIMIT clause to $sqlQuery argument</p> <pre><code>&lt;?php\n\necho $connection-&gt;limit(\"SELECT * FROM robots\", 5);\n</code></pre> <p>public  tableExists (mixed $tableName, [mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>Generates SQL checking for the existence of a schema.table</p> <pre><code>&lt;?php\n\nvar_dump(\n    $connection-&gt;tableExists(\"blog\", \"posts\")\n);\n</code></pre> <p>public  viewExists (mixed $viewName, [mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>Generates SQL checking for the existence of a schema.view</p> <pre><code>&lt;?php\n\nvar_dump(\n    $connection-&gt;viewExists(\"active_users\", \"posts\")\n);\n</code></pre> <p>public  forUpdate (mixed $sqlQuery) inherited from Phalcon\\Db\\Adapter</p> <p>Returns a SQL modified with a FOR UPDATE clause</p> <p>public  sharedLock (mixed $sqlQuery) inherited from Phalcon\\Db\\Adapter</p> <p>Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <p>public  createTable (mixed $tableName, mixed $schemaName, array $definition) inherited from Phalcon\\Db\\Adapter</p> <p>Creates a table</p> <p>public  dropTable (mixed $tableName, [mixed $schemaName], [mixed $ifExists]) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a table from a schema/database</p> <p>public  createView (mixed $viewName, array $definition, [mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>Creates a view</p> <p>public  dropView (mixed $viewName, [mixed $schemaName], [mixed $ifExists]) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a view</p> <p>public  addColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column) inherited from Phalcon\\Db\\Adapter</p> <p>Adds a column to a table</p> <p>public  modifyColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column, [Phalcon\\Db\\ColumnInterface $currentColumn]) inherited from Phalcon\\Db\\Adapter</p> <p>Modifies a table column based on a definition</p> <p>public  dropColumn (mixed $tableName, mixed $schemaName, mixed $columnName) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a column from a table</p> <p>public  addIndex (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index) inherited from Phalcon\\Db\\Adapter</p> <p>Adds an index to a table</p> <p>public  dropIndex (mixed $tableName, mixed $schemaName, mixed $indexName) inherited from Phalcon\\Db\\Adapter</p> <p>Drop an index from a table</p> <p>public  addPrimaryKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index) inherited from Phalcon\\Db\\Adapter</p> <p>Adds a primary key to a table</p> <p>public  dropPrimaryKey (mixed $tableName, mixed $schemaName) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a table's primary key</p> <p>public  addForeignKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ReferenceInterface $reference) inherited from Phalcon\\Db\\Adapter</p> <p>Adds a foreign key to a table</p> <p>public  dropForeignKey (mixed $tableName, mixed $schemaName, mixed $referenceName) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a foreign key from a table</p> <p>public  getColumnDefinition (Phalcon\\Db\\ColumnInterface $column) inherited from Phalcon\\Db\\Adapter</p> <p>Returns the SQL column definition from a column</p> <p>public  listTables ([mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>List all tables on a database</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;listTables(\"blog\")\n);\n</code></pre> <p>public  listViews ([mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>List all views on a database</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;listViews(\"blog\")\n);\n</code></pre> <p>public  tableOptions (mixed $tableName, [mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>Gets creation options from a table</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;tableOptions(\"robots\")\n);\n</code></pre> <p>public  createSavepoint (mixed $name) inherited from Phalcon\\Db\\Adapter</p> <p>Creates a new savepoint</p> <p>public  releaseSavepoint (mixed $name) inherited from Phalcon\\Db\\Adapter</p> <p>Releases given savepoint</p> <p>public  rollbackSavepoint (mixed $name) inherited from Phalcon\\Db\\Adapter</p> <p>Rollbacks given savepoint</p> <p>public  setNestedTransactionsWithSavepoints (mixed $nestedTransactionsWithSavepoints) inherited from Phalcon\\Db\\Adapter</p> <p>Set if nested transactions should use savepoints</p> <p>public  isNestedTransactionsWithSavepoints () inherited from Phalcon\\Db\\Adapter</p> <p>Returns if nested transactions should use savepoints</p> <p>public  getNestedTransactionSavepointName () inherited from Phalcon\\Db\\Adapter</p> <p>Returns the savepoint name to use for nested transactions</p> <p>public  getDefaultIdValue () inherited from Phalcon\\Db\\Adapter</p> <p>Returns the default identity value to be inserted in an identity column</p> <pre><code>&lt;?php\n\n// Inserting a new robot with a valid default value for the column 'id'\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        $connection-&gt;getDefaultIdValue(),\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"id\",\n        \"name\",\n        \"year\",\n    ]\n);\n</code></pre> <p>public  getDefaultValue () inherited from Phalcon\\Db\\Adapter</p> <p>Returns the default value to make the RBDM use the default value declared in the table definition</p> <pre><code>&lt;?php\n\n// Inserting a new robot with a valid default value for the column 'year'\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        $connection-&gt;getDefaultValue()\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n</code></pre> <p>public  supportSequences () inherited from Phalcon\\Db\\Adapter</p> <p>Check whether the database system requires a sequence to produce auto-numeric values</p> <p>public  useExplicitIdValue () inherited from Phalcon\\Db\\Adapter</p> <p>Check whether the database system requires an explicit value for identity columns</p> <p>public  getDescriptor () inherited from Phalcon\\Db\\Adapter</p> <p>Return descriptor used to connect to the active database</p> <p>public string getConnectionId () inherited from Phalcon\\Db\\Adapter</p> <p>Gets the active connection unique identifier</p> <p>public  getSQLStatement () inherited from Phalcon\\Db\\Adapter</p> <p>Active SQL statement in the object</p> <p>public  getRealSQLStatement () inherited from Phalcon\\Db\\Adapter</p> <p>Active SQL statement in the object without replace bound parameters</p> <p>public array getSQLBindTypes () inherited from Phalcon\\Db\\Adapter</p> <p>Active SQL statement in the object</p>"},{"location":"api/Phalcon_Db/#class-phalcondbadapterpdopostgresql","title":"Class Phalcon\\Db\\Adapter\\Pdo\\Postgresql","text":"<p>extends abstract class Phalcon\\Db\\Adapter\\Pdo</p> <p>implements Phalcon\\Db\\AdapterInterface, Phalcon\\Events\\EventsAwareInterface</p> <p>Source on GitHub</p> <p>Specific functions for the Postgresql database system</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Pdo\\Postgresql;\n\n$config = [\n    \"host\"     =&gt; \"localhost\",\n    \"dbname\"   =&gt; \"blog\",\n    \"port\"     =&gt; 5432,\n    \"username\" =&gt; \"postgres\",\n    \"password\" =&gt; \"secret\",\n];\n\n$connection = new Postgresql($config);\n</code></pre>"},{"location":"api/Phalcon_Db/#methods_5","title":"Methods","text":"<p>public  connect ([array $descriptor])</p> <p>This method is automatically called in Phalcon\\Db\\Adapter\\Pdo constructor. Call it when you need to restore a database connection.</p> <p>public  describeColumns (mixed $table, [mixed $schema])</p> <p>Returns an array of Phalcon\\Db\\Column objects describing a table</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;describeColumns(\"posts\")\n);\n</code></pre> <p>public  createTable (mixed $tableName, mixed $schemaName, array $definition)</p> <p>Creates a table</p> <p>public  modifyColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column, [Phalcon\\Db\\ColumnInterface $currentColumn])</p> <p>Modifies a table column based on a definition</p> <p>public  useExplicitIdValue ()</p> <p>Check whether the database system requires an explicit value for identity columns</p> <p>public  getDefaultIdValue ()</p> <p>Returns the default identity value to be inserted in an identity column</p> <pre><code>&lt;?php\n\n// Inserting a new robot with a valid default value for the column 'id'\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        $connection-&gt;getDefaultIdValue(),\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"id\",\n        \"name\",\n        \"year\",\n    ]\n);\n</code></pre> <p>public  supportSequences ()</p> <p>Check whether the database system requires a sequence to produce auto-numeric values</p> <p>public  __construct (array $descriptor) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Constructor for Phalcon\\Db\\Adapter\\Pdo</p> <p>public  prepare (mixed $sqlStatement) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Returns a PDO prepared statement to be executed with 'executePrepared'</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Column;\n\n$statement = $db-&gt;prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection-&gt;executePrepared(\n    $statement,\n    [\n        \"name\" =&gt; \"Voltron\",\n    ],\n    [\n        \"name\" =&gt; Column::BIND_PARAM_INT,\n    ]\n);\n</code></pre> <p>public PDOStatement executePrepared (PDOStatement $statement, array $placeholders, array $dataTypes) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Executes a prepared statement binding. This function uses integer indexes starting from zero</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Column;\n\n$statement = $db-&gt;prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection-&gt;executePrepared(\n    $statement,\n    [\n        \"name\" =&gt; \"Voltron\",\n    ],\n    [\n        \"name\" =&gt; Column::BIND_PARAM_INT,\n    ]\n);\n</code></pre> <p>public  query (mixed $sqlStatement, [mixed $bindParams], [mixed $bindTypes]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server is returning rows</p> <pre><code>&lt;?php\n\n// Querying data\n$resultset = $connection-&gt;query(\n    \"SELECT * FROM robots WHERE type = 'mechanical'\"\n);\n\n$resultset = $connection-&gt;query(\n    \"SELECT * FROM robots WHERE type = ?\",\n    [\n        \"mechanical\",\n    ]\n);\n</code></pre> <p>public  execute (mixed $sqlStatement, [mixed $bindParams], [mixed $bindTypes]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server doesn't return any rows</p> <pre><code>&lt;?php\n\n// Inserting data\n$success = $connection-&gt;execute(\n    \"INSERT INTO robots VALUES (1, 'Astro Boy')\"\n);\n\n$success = $connection-&gt;execute(\n    \"INSERT INTO robots VALUES (?, ?)\",\n    [\n        1,\n        \"Astro Boy\",\n    ]\n);\n</code></pre> <p>public  affectedRows () inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Returns the number of affected rows by the latest INSERT/UPDATE/DELETE executed in the database system</p> <pre><code>&lt;?php\n\n$connection-&gt;execute(\n    \"DELETE FROM robots\"\n);\n\necho $connection-&gt;affectedRows(), \" were deleted\";\n</code></pre> <p>public  close () inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Closes the active connection returning success. Phalcon automatically closes and destroys active connections when the request ends</p> <p>public  escapeString (mixed $str) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Escapes a value to avoid SQL injections according to the active charset in the connection</p> <pre><code>&lt;?php\n\n$escapedStr = $connection-&gt;escapeString(\"some dangerous value\");\n</code></pre> <p>public  convertBoundParams (mixed $sql, [array $params]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Converts bound parameters such as :name: or ?1 into PDO bind params ?</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;convertBoundParams(\n        \"SELECT * FROM robots WHERE name = :name:\",\n        [\n            \"Bender\",\n        ]\n    )\n);\n</code></pre> <p>public int | boolean lastInsertId ([string $sequenceName]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Returns the insert id for the auto_increment/serial column inserted in the latest executed SQL statement</p> <pre><code>&lt;?php\n\n// Inserting a new robot\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n\n// Getting the generated id\n$id = $connection-&gt;lastInsertId();\n</code></pre> <p>public  begin ([mixed $nesting]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Starts a transaction in the connection</p> <p>public  rollback ([mixed $nesting]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Rollbacks the active transaction in the connection</p> <p>public  commit ([mixed $nesting]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Commits the active transaction in the connection</p> <p>public  getTransactionLevel () inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Returns the current transaction nesting level</p> <p>public  isUnderTransaction () inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Checks whether the connection is under a transaction</p> <pre><code>&lt;?php\n\n$connection-&gt;begin();\n\n// true\nvar_dump(\n    $connection-&gt;isUnderTransaction()\n);\n</code></pre> <p>public  getInternalHandler () inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Return internal PDO handler</p> <p>public array getErrorInfo () inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Return the error info, if any</p> <p>public  getDialectType () inherited from Phalcon\\Db\\Adapter</p> <p>Name of the dialect used</p> <p>public  getType () inherited from Phalcon\\Db\\Adapter</p> <p>Type of database system the adapter is used for</p> <p>public  getSqlVariables () inherited from Phalcon\\Db\\Adapter</p> <p>Active SQL bound parameter variables</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Db\\Adapter</p> <p>Sets the event manager</p> <p>public  getEventsManager () inherited from Phalcon\\Db\\Adapter</p> <p>Returns the internal event manager</p> <p>public  setDialect (Phalcon\\Db\\DialectInterface $dialect) inherited from Phalcon\\Db\\Adapter</p> <p>Sets the dialect used to produce the SQL</p> <p>public  getDialect () inherited from Phalcon\\Db\\Adapter</p> <p>Returns internal dialect instance</p> <p>public  fetchOne (mixed $sqlQuery, [mixed $fetchMode], [mixed $bindParams], [mixed $bindTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Returns the first row in a SQL query result</p> <pre><code>&lt;?php\n\n// Getting first robot\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\");\nprint_r($robot);\n\n// Getting first robot with associative indexes only\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\", \\Phalcon\\Db::FETCH_ASSOC);\nprint_r($robot);\n</code></pre> <p>public array fetchAll (string $sqlQuery, [int $fetchMode], [array $bindParams], [array $bindTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Dumps the complete result of a query into an array</p> <pre><code>&lt;?php\n\n// Getting all robots with associative indexes only\n$robots = $connection-&gt;fetchAll(\n    \"SELECT * FROM robots\",\n    \\Phalcon\\Db::FETCH_ASSOC\n);\n\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n // Getting all robots that contains word \"robot\" withing the name\n$robots = $connection-&gt;fetchAll(\n    \"SELECT * FROM robots WHERE name LIKE :name\",\n    \\Phalcon\\Db::FETCH_ASSOC,\n    [\n        \"name\" =&gt; \"%robot%\",\n    ]\n);\nforeach($robots as $robot) {\n    print_r($robot);\n}\n</code></pre> <p>public string | ** fetchColumn (string $sqlQuery, [array $placeholders], [int | string $column]) inherited from Phalcon\\Db\\Adapter</p> <p>Returns the n'th field of first row in a SQL query result</p> <pre><code>&lt;?php\n\n// Getting count of robots\n$robotsCount = $connection-&gt;fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n// Getting name of last edited robot\n$robot = $connection-&gt;fetchColumn(\n    \"SELECT id, name FROM robots order by modified desc\",\n    1\n);\nprint_r($robot);\n</code></pre> <p>public boolean insert (string | array $table, array $values, [array $fields], [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Inserts data into a table using custom RDBMS SQL syntax</p> <pre><code>&lt;?php\n\n// Inserting a new robot\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\"Astro Boy\", 1952],\n    [\"name\", \"year\"]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</code></pre> <p>public boolean insertAsDict (string $table, array $data, [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Inserts data into a table using custom RBDM SQL syntax</p> <pre><code>&lt;?php\n\n// Inserting a new robot\n$success = $connection-&gt;insertAsDict(\n    \"robots\",\n    [\n        \"name\" =&gt; \"Astro Boy\",\n        \"year\" =&gt; 1952,\n    ]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</code></pre> <p>public boolean update (string | array $table, array $fields, array $values, [string | array $whereCondition], [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Updates data on a table using custom RBDM SQL syntax</p> <p><pre><code>&lt;?php\n\n// Updating existing robot\n$success = $connection-&gt;update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n// Updating existing robot with array condition and $dataTypes\n$success = $connection-&gt;update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    [\n        \"conditions\" =&gt; \"id = ?\",\n        \"bind\"       =&gt; [$some_unsafe_id],\n        \"bindTypes\"  =&gt; [PDO::PARAM_INT], // use only if you use $dataTypes param\n    ],\n    [\n        PDO::PARAM_STR\n    ]\n);\n</code></pre> Warning! If $whereCondition is string it not escaped.</p> <p>public boolean updateAsDict (string $table, array $data, [string $whereCondition], [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Updates data on a table using custom RBDM SQL syntax Another, more convenient syntax</p> <pre><code>&lt;?php\n\n// Updating existing robot\n$success = $connection-&gt;updateAsDict(\n    \"robots\",\n    [\n        \"name\" =&gt; \"New Astro Boy\",\n    ],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n</code></pre> <p>public boolean delete (string | array $table, [string $whereCondition], [array $placeholders], [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Deletes data from a table using custom RBDM SQL syntax</p> <pre><code>&lt;?php\n\n// Deleting existing robot\n$success = $connection-&gt;delete(\n    \"robots\",\n    \"id = 101\"\n);\n\n// Next SQL sentence is generated\nDELETE FROM `robots` WHERE `id` = 101\n</code></pre> <p>public  escapeIdentifier (array | string $identifier) inherited from Phalcon\\Db\\Adapter</p> <p>Escapes a column/table/schema name</p> <pre><code>&lt;?php\n\n$escapedTable = $connection-&gt;escapeIdentifier(\n    \"robots\"\n);\n\n$escapedTable = $connection-&gt;escapeIdentifier(\n    [\n        \"store\",\n        \"robots\",\n    ]\n);\n</code></pre> <p>public string getColumnList (array $columnList) inherited from Phalcon\\Db\\Adapter</p> <p>Gets a list of columns</p> <p>public  limit (mixed $sqlQuery, mixed $number) inherited from Phalcon\\Db\\Adapter</p> <p>Appends a LIMIT clause to $sqlQuery argument</p> <pre><code>&lt;?php\n\necho $connection-&gt;limit(\"SELECT * FROM robots\", 5);\n</code></pre> <p>public  tableExists (mixed $tableName, [mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>Generates SQL checking for the existence of a schema.table</p> <pre><code>&lt;?php\n\nvar_dump(\n    $connection-&gt;tableExists(\"blog\", \"posts\")\n);\n</code></pre> <p>public  viewExists (mixed $viewName, [mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>Generates SQL checking for the existence of a schema.view</p> <pre><code>&lt;?php\n\nvar_dump(\n    $connection-&gt;viewExists(\"active_users\", \"posts\")\n);\n</code></pre> <p>public  forUpdate (mixed $sqlQuery) inherited from Phalcon\\Db\\Adapter</p> <p>Returns a SQL modified with a FOR UPDATE clause</p> <p>public  sharedLock (mixed $sqlQuery) inherited from Phalcon\\Db\\Adapter</p> <p>Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <p>public  dropTable (mixed $tableName, [mixed $schemaName], [mixed $ifExists]) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a table from a schema/database</p> <p>public  createView (mixed $viewName, array $definition, [mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>Creates a view</p> <p>public  dropView (mixed $viewName, [mixed $schemaName], [mixed $ifExists]) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a view</p> <p>public  addColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column) inherited from Phalcon\\Db\\Adapter</p> <p>Adds a column to a table</p> <p>public  dropColumn (mixed $tableName, mixed $schemaName, mixed $columnName) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a column from a table</p> <p>public  addIndex (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index) inherited from Phalcon\\Db\\Adapter</p> <p>Adds an index to a table</p> <p>public  dropIndex (mixed $tableName, mixed $schemaName, mixed $indexName) inherited from Phalcon\\Db\\Adapter</p> <p>Drop an index from a table</p> <p>public  addPrimaryKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index) inherited from Phalcon\\Db\\Adapter</p> <p>Adds a primary key to a table</p> <p>public  dropPrimaryKey (mixed $tableName, mixed $schemaName) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a table's primary key</p> <p>public  addForeignKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ReferenceInterface $reference) inherited from Phalcon\\Db\\Adapter</p> <p>Adds a foreign key to a table</p> <p>public  dropForeignKey (mixed $tableName, mixed $schemaName, mixed $referenceName) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a foreign key from a table</p> <p>public  getColumnDefinition (Phalcon\\Db\\ColumnInterface $column) inherited from Phalcon\\Db\\Adapter</p> <p>Returns the SQL column definition from a column</p> <p>public  listTables ([mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>List all tables on a database</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;listTables(\"blog\")\n);\n</code></pre> <p>public  listViews ([mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>List all views on a database</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;listViews(\"blog\")\n);\n</code></pre> <p>public Phalcon\\Db\\Index describeIndexes (string $table, [string $schema]) inherited from Phalcon\\Db\\Adapter</p> <p>Lists table indexes</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;describeIndexes(\"robots_parts\")\n);\n</code></pre> <p>public  describeReferences (mixed $table, [mixed $schema]) inherited from Phalcon\\Db\\Adapter</p> <p>Lists table references</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;describeReferences(\"robots_parts\")\n);\n</code></pre> <p>public  tableOptions (mixed $tableName, [mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>Gets creation options from a table</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;tableOptions(\"robots\")\n);\n</code></pre> <p>public  createSavepoint (mixed $name) inherited from Phalcon\\Db\\Adapter</p> <p>Creates a new savepoint</p> <p>public  releaseSavepoint (mixed $name) inherited from Phalcon\\Db\\Adapter</p> <p>Releases given savepoint</p> <p>public  rollbackSavepoint (mixed $name) inherited from Phalcon\\Db\\Adapter</p> <p>Rollbacks given savepoint</p> <p>public  setNestedTransactionsWithSavepoints (mixed $nestedTransactionsWithSavepoints) inherited from Phalcon\\Db\\Adapter</p> <p>Set if nested transactions should use savepoints</p> <p>public  isNestedTransactionsWithSavepoints () inherited from Phalcon\\Db\\Adapter</p> <p>Returns if nested transactions should use savepoints</p> <p>public  getNestedTransactionSavepointName () inherited from Phalcon\\Db\\Adapter</p> <p>Returns the savepoint name to use for nested transactions</p> <p>public  getDefaultValue () inherited from Phalcon\\Db\\Adapter</p> <p>Returns the default value to make the RBDM use the default value declared in the table definition</p> <pre><code>&lt;?php\n\n// Inserting a new robot with a valid default value for the column 'year'\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        $connection-&gt;getDefaultValue()\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n</code></pre> <p>public  getDescriptor () inherited from Phalcon\\Db\\Adapter</p> <p>Return descriptor used to connect to the active database</p> <p>public string getConnectionId () inherited from Phalcon\\Db\\Adapter</p> <p>Gets the active connection unique identifier</p> <p>public  getSQLStatement () inherited from Phalcon\\Db\\Adapter</p> <p>Active SQL statement in the object</p> <p>public  getRealSQLStatement () inherited from Phalcon\\Db\\Adapter</p> <p>Active SQL statement in the object without replace bound parameters</p> <p>public array getSQLBindTypes () inherited from Phalcon\\Db\\Adapter</p> <p>Active SQL statement in the object</p>"},{"location":"api/Phalcon_Db/#class-phalcondbadapterpdosqlite","title":"Class Phalcon\\Db\\Adapter\\Pdo\\Sqlite","text":"<p>extends abstract class Phalcon\\Db\\Adapter\\Pdo</p> <p>implements Phalcon\\Db\\AdapterInterface, Phalcon\\Events\\EventsAwareInterface</p> <p>Source on GitHub</p> <p>Specific functions for the Sqlite database system</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Pdo\\Sqlite;\n\n$connection = new Sqlite(\n    [\n        \"dbname\" =&gt; \"/tmp/test.sqlite\",\n    ]\n);\n</code></pre>"},{"location":"api/Phalcon_Db/#methods_6","title":"Methods","text":"<p>public  connect ([array $descriptor])</p> <p>This method is automatically called in Phalcon\\Db\\Adapter\\Pdo constructor. Call it when you need to restore a database connection.</p> <p>public  describeColumns (mixed $table, [mixed $schema])</p> <p>Returns an array of Phalcon\\Db\\Column objects describing a table</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;describeColumns(\"posts\")\n);\n</code></pre> <p>public Phalcon\\Db\\IndexInterface describeIndexes (string $table, [string $schema])</p> <p>Lists table indexes</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;describeIndexes(\"robots_parts\")\n);\n</code></pre> <p>public Phalcon\\Db\\ReferenceInterface describeReferences (string $table, [string $schema])</p> <p>Lists table references</p> <p>public  useExplicitIdValue ()</p> <p>Check whether the database system requires an explicit value for identity columns</p> <p>public  getDefaultValue ()</p> <p>Returns the default value to make the RBDM use the default value declared in the table definition</p> <pre><code>&lt;?php\n\n// Inserting a new robot with a valid default value for the column 'year'\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        $connection-&gt;getDefaultValue(),\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n</code></pre> <p>public  __construct (array $descriptor) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Constructor for Phalcon\\Db\\Adapter\\Pdo</p> <p>public  prepare (mixed $sqlStatement) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Returns a PDO prepared statement to be executed with 'executePrepared'</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Column;\n\n$statement = $db-&gt;prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection-&gt;executePrepared(\n    $statement,\n    [\n        \"name\" =&gt; \"Voltron\",\n    ],\n    [\n        \"name\" =&gt; Column::BIND_PARAM_INT,\n    ]\n);\n</code></pre> <p>public PDOStatement executePrepared (PDOStatement $statement, array $placeholders, array $dataTypes) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Executes a prepared statement binding. This function uses integer indexes starting from zero</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Column;\n\n$statement = $db-&gt;prepare(\n    \"SELECT * FROM robots WHERE name = :name\"\n);\n\n$result = $connection-&gt;executePrepared(\n    $statement,\n    [\n        \"name\" =&gt; \"Voltron\",\n    ],\n    [\n        \"name\" =&gt; Column::BIND_PARAM_INT,\n    ]\n);\n</code></pre> <p>public  query (mixed $sqlStatement, [mixed $bindParams], [mixed $bindTypes]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server is returning rows</p> <pre><code>&lt;?php\n\n// Querying data\n$resultset = $connection-&gt;query(\n    \"SELECT * FROM robots WHERE type = 'mechanical'\"\n);\n\n$resultset = $connection-&gt;query(\n    \"SELECT * FROM robots WHERE type = ?\",\n    [\n        \"mechanical\",\n    ]\n);\n</code></pre> <p>public  execute (mixed $sqlStatement, [mixed $bindParams], [mixed $bindTypes]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server doesn't return any rows</p> <pre><code>&lt;?php\n\n// Inserting data\n$success = $connection-&gt;execute(\n    \"INSERT INTO robots VALUES (1, 'Astro Boy')\"\n);\n\n$success = $connection-&gt;execute(\n    \"INSERT INTO robots VALUES (?, ?)\",\n    [\n        1,\n        \"Astro Boy\",\n    ]\n);\n</code></pre> <p>public  affectedRows () inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Returns the number of affected rows by the latest INSERT/UPDATE/DELETE executed in the database system</p> <pre><code>&lt;?php\n\n$connection-&gt;execute(\n    \"DELETE FROM robots\"\n);\n\necho $connection-&gt;affectedRows(), \" were deleted\";\n</code></pre> <p>public  close () inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Closes the active connection returning success. Phalcon automatically closes and destroys active connections when the request ends</p> <p>public  escapeString (mixed $str) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Escapes a value to avoid SQL injections according to the active charset in the connection</p> <pre><code>&lt;?php\n\n$escapedStr = $connection-&gt;escapeString(\"some dangerous value\");\n</code></pre> <p>public  convertBoundParams (mixed $sql, [array $params]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Converts bound parameters such as :name: or ?1 into PDO bind params ?</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;convertBoundParams(\n        \"SELECT * FROM robots WHERE name = :name:\",\n        [\n            \"Bender\",\n        ]\n    )\n);\n</code></pre> <p>public int | boolean lastInsertId ([string $sequenceName]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Returns the insert id for the auto_increment/serial column inserted in the latest executed SQL statement</p> <pre><code>&lt;?php\n\n// Inserting a new robot\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n\n// Getting the generated id\n$id = $connection-&gt;lastInsertId();\n</code></pre> <p>public  begin ([mixed $nesting]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Starts a transaction in the connection</p> <p>public  rollback ([mixed $nesting]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Rollbacks the active transaction in the connection</p> <p>public  commit ([mixed $nesting]) inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Commits the active transaction in the connection</p> <p>public  getTransactionLevel () inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Returns the current transaction nesting level</p> <p>public  isUnderTransaction () inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Checks whether the connection is under a transaction</p> <pre><code>&lt;?php\n\n$connection-&gt;begin();\n\n// true\nvar_dump(\n    $connection-&gt;isUnderTransaction()\n);\n</code></pre> <p>public  getInternalHandler () inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Return internal PDO handler</p> <p>public array getErrorInfo () inherited from Phalcon\\Db\\Adapter\\Pdo</p> <p>Return the error info, if any</p> <p>public  getDialectType () inherited from Phalcon\\Db\\Adapter</p> <p>Name of the dialect used</p> <p>public  getType () inherited from Phalcon\\Db\\Adapter</p> <p>Type of database system the adapter is used for</p> <p>public  getSqlVariables () inherited from Phalcon\\Db\\Adapter</p> <p>Active SQL bound parameter variables</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Db\\Adapter</p> <p>Sets the event manager</p> <p>public  getEventsManager () inherited from Phalcon\\Db\\Adapter</p> <p>Returns the internal event manager</p> <p>public  setDialect (Phalcon\\Db\\DialectInterface $dialect) inherited from Phalcon\\Db\\Adapter</p> <p>Sets the dialect used to produce the SQL</p> <p>public  getDialect () inherited from Phalcon\\Db\\Adapter</p> <p>Returns internal dialect instance</p> <p>public  fetchOne (mixed $sqlQuery, [mixed $fetchMode], [mixed $bindParams], [mixed $bindTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Returns the first row in a SQL query result</p> <pre><code>&lt;?php\n\n// Getting first robot\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\");\nprint_r($robot);\n\n// Getting first robot with associative indexes only\n$robot = $connection-&gt;fetchOne(\"SELECT * FROM robots\", \\Phalcon\\Db::FETCH_ASSOC);\nprint_r($robot);\n</code></pre> <p>public array fetchAll (string $sqlQuery, [int $fetchMode], [array $bindParams], [array $bindTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Dumps the complete result of a query into an array</p> <pre><code>&lt;?php\n\n// Getting all robots with associative indexes only\n$robots = $connection-&gt;fetchAll(\n    \"SELECT * FROM robots\",\n    \\Phalcon\\Db::FETCH_ASSOC\n);\n\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n // Getting all robots that contains word \"robot\" withing the name\n$robots = $connection-&gt;fetchAll(\n    \"SELECT * FROM robots WHERE name LIKE :name\",\n    \\Phalcon\\Db::FETCH_ASSOC,\n    [\n        \"name\" =&gt; \"%robot%\",\n    ]\n);\nforeach($robots as $robot) {\n    print_r($robot);\n}\n</code></pre> <p>public string | ** fetchColumn (string $sqlQuery, [array $placeholders], [int | string $column]) inherited from Phalcon\\Db\\Adapter</p> <p>Returns the n'th field of first row in a SQL query result</p> <pre><code>&lt;?php\n\n// Getting count of robots\n$robotsCount = $connection-&gt;fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n// Getting name of last edited robot\n$robot = $connection-&gt;fetchColumn(\n    \"SELECT id, name FROM robots order by modified desc\",\n    1\n);\nprint_r($robot);\n</code></pre> <p>public boolean insert (string | array $table, array $values, [array $fields], [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Inserts data into a table using custom RDBMS SQL syntax</p> <pre><code>&lt;?php\n\n// Inserting a new robot\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\"Astro Boy\", 1952],\n    [\"name\", \"year\"]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</code></pre> <p>public boolean insertAsDict (string $table, array $data, [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Inserts data into a table using custom RBDM SQL syntax</p> <pre><code>&lt;?php\n\n// Inserting a new robot\n$success = $connection-&gt;insertAsDict(\n    \"robots\",\n    [\n        \"name\" =&gt; \"Astro Boy\",\n        \"year\" =&gt; 1952,\n    ]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</code></pre> <p>public boolean update (string | array $table, array $fields, array $values, [string | array $whereCondition], [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Updates data on a table using custom RBDM SQL syntax</p> <p><pre><code>&lt;?php\n\n// Updating existing robot\n$success = $connection-&gt;update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n// Updating existing robot with array condition and $dataTypes\n$success = $connection-&gt;update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    [\n        \"conditions\" =&gt; \"id = ?\",\n        \"bind\"       =&gt; [$some_unsafe_id],\n        \"bindTypes\"  =&gt; [PDO::PARAM_INT], // use only if you use $dataTypes param\n    ],\n    [\n        PDO::PARAM_STR\n    ]\n);\n</code></pre> Warning! If $whereCondition is string it not escaped.</p> <p>public boolean updateAsDict (string $table, array $data, [string $whereCondition], [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Updates data on a table using custom RBDM SQL syntax Another, more convenient syntax</p> <pre><code>&lt;?php\n\n// Updating existing robot\n$success = $connection-&gt;updateAsDict(\n    \"robots\",\n    [\n        \"name\" =&gt; \"New Astro Boy\",\n    ],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n</code></pre> <p>public boolean delete (string | array $table, [string $whereCondition], [array $placeholders], [array $dataTypes]) inherited from Phalcon\\Db\\Adapter</p> <p>Deletes data from a table using custom RBDM SQL syntax</p> <pre><code>&lt;?php\n\n// Deleting existing robot\n$success = $connection-&gt;delete(\n    \"robots\",\n    \"id = 101\"\n);\n\n// Next SQL sentence is generated\nDELETE FROM `robots` WHERE `id` = 101\n</code></pre> <p>public  escapeIdentifier (array | string $identifier) inherited from Phalcon\\Db\\Adapter</p> <p>Escapes a column/table/schema name</p> <pre><code>&lt;?php\n\n$escapedTable = $connection-&gt;escapeIdentifier(\n    \"robots\"\n);\n\n$escapedTable = $connection-&gt;escapeIdentifier(\n    [\n        \"store\",\n        \"robots\",\n    ]\n);\n</code></pre> <p>public string getColumnList (array $columnList) inherited from Phalcon\\Db\\Adapter</p> <p>Gets a list of columns</p> <p>public  limit (mixed $sqlQuery, mixed $number) inherited from Phalcon\\Db\\Adapter</p> <p>Appends a LIMIT clause to $sqlQuery argument</p> <pre><code>&lt;?php\n\necho $connection-&gt;limit(\"SELECT * FROM robots\", 5);\n</code></pre> <p>public  tableExists (mixed $tableName, [mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>Generates SQL checking for the existence of a schema.table</p> <pre><code>&lt;?php\n\nvar_dump(\n    $connection-&gt;tableExists(\"blog\", \"posts\")\n);\n</code></pre> <p>public  viewExists (mixed $viewName, [mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>Generates SQL checking for the existence of a schema.view</p> <pre><code>&lt;?php\n\nvar_dump(\n    $connection-&gt;viewExists(\"active_users\", \"posts\")\n);\n</code></pre> <p>public  forUpdate (mixed $sqlQuery) inherited from Phalcon\\Db\\Adapter</p> <p>Returns a SQL modified with a FOR UPDATE clause</p> <p>public  sharedLock (mixed $sqlQuery) inherited from Phalcon\\Db\\Adapter</p> <p>Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <p>public  createTable (mixed $tableName, mixed $schemaName, array $definition) inherited from Phalcon\\Db\\Adapter</p> <p>Creates a table</p> <p>public  dropTable (mixed $tableName, [mixed $schemaName], [mixed $ifExists]) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a table from a schema/database</p> <p>public  createView (mixed $viewName, array $definition, [mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>Creates a view</p> <p>public  dropView (mixed $viewName, [mixed $schemaName], [mixed $ifExists]) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a view</p> <p>public  addColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column) inherited from Phalcon\\Db\\Adapter</p> <p>Adds a column to a table</p> <p>public  modifyColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column, [Phalcon\\Db\\ColumnInterface $currentColumn]) inherited from Phalcon\\Db\\Adapter</p> <p>Modifies a table column based on a definition</p> <p>public  dropColumn (mixed $tableName, mixed $schemaName, mixed $columnName) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a column from a table</p> <p>public  addIndex (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index) inherited from Phalcon\\Db\\Adapter</p> <p>Adds an index to a table</p> <p>public  dropIndex (mixed $tableName, mixed $schemaName, mixed $indexName) inherited from Phalcon\\Db\\Adapter</p> <p>Drop an index from a table</p> <p>public  addPrimaryKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index) inherited from Phalcon\\Db\\Adapter</p> <p>Adds a primary key to a table</p> <p>public  dropPrimaryKey (mixed $tableName, mixed $schemaName) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a table's primary key</p> <p>public  addForeignKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ReferenceInterface $reference) inherited from Phalcon\\Db\\Adapter</p> <p>Adds a foreign key to a table</p> <p>public  dropForeignKey (mixed $tableName, mixed $schemaName, mixed $referenceName) inherited from Phalcon\\Db\\Adapter</p> <p>Drops a foreign key from a table</p> <p>public  getColumnDefinition (Phalcon\\Db\\ColumnInterface $column) inherited from Phalcon\\Db\\Adapter</p> <p>Returns the SQL column definition from a column</p> <p>public  listTables ([mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>List all tables on a database</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;listTables(\"blog\")\n);\n</code></pre> <p>public  listViews ([mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>List all views on a database</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;listViews(\"blog\")\n);\n</code></pre> <p>public  tableOptions (mixed $tableName, [mixed $schemaName]) inherited from Phalcon\\Db\\Adapter</p> <p>Gets creation options from a table</p> <pre><code>&lt;?php\n\nprint_r(\n    $connection-&gt;tableOptions(\"robots\")\n);\n</code></pre> <p>public  createSavepoint (mixed $name) inherited from Phalcon\\Db\\Adapter</p> <p>Creates a new savepoint</p> <p>public  releaseSavepoint (mixed $name) inherited from Phalcon\\Db\\Adapter</p> <p>Releases given savepoint</p> <p>public  rollbackSavepoint (mixed $name) inherited from Phalcon\\Db\\Adapter</p> <p>Rollbacks given savepoint</p> <p>public  setNestedTransactionsWithSavepoints (mixed $nestedTransactionsWithSavepoints) inherited from Phalcon\\Db\\Adapter</p> <p>Set if nested transactions should use savepoints</p> <p>public  isNestedTransactionsWithSavepoints () inherited from Phalcon\\Db\\Adapter</p> <p>Returns if nested transactions should use savepoints</p> <p>public  getNestedTransactionSavepointName () inherited from Phalcon\\Db\\Adapter</p> <p>Returns the savepoint name to use for nested transactions</p> <p>public  getDefaultIdValue () inherited from Phalcon\\Db\\Adapter</p> <p>Returns the default identity value to be inserted in an identity column</p> <pre><code>&lt;?php\n\n// Inserting a new robot with a valid default value for the column 'id'\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        $connection-&gt;getDefaultIdValue(),\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"id\",\n        \"name\",\n        \"year\",\n    ]\n);\n</code></pre> <p>public  supportSequences () inherited from Phalcon\\Db\\Adapter</p> <p>Check whether the database system requires a sequence to produce auto-numeric values</p> <p>public  getDescriptor () inherited from Phalcon\\Db\\Adapter</p> <p>Return descriptor used to connect to the active database</p> <p>public string getConnectionId () inherited from Phalcon\\Db\\Adapter</p> <p>Gets the active connection unique identifier</p> <p>public  getSQLStatement () inherited from Phalcon\\Db\\Adapter</p> <p>Active SQL statement in the object</p> <p>public  getRealSQLStatement () inherited from Phalcon\\Db\\Adapter</p> <p>Active SQL statement in the object without replace bound parameters</p> <p>public array getSQLBindTypes () inherited from Phalcon\\Db\\Adapter</p> <p>Active SQL statement in the object</p>"},{"location":"api/Phalcon_Db/#interface-phalcondbadapterinterface","title":"Interface Phalcon\\Db\\AdapterInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Db/#methods_7","title":"Methods","text":"<p>abstract public  fetchOne (mixed $sqlQuery, [mixed $fetchMode], [mixed $placeholders])</p> <p>...</p> <p>abstract public  fetchAll (mixed $sqlQuery, [mixed $fetchMode], [mixed $placeholders])</p> <p>...</p> <p>abstract public  insert (mixed $table, array $values, [mixed $fields], [mixed $dataTypes])</p> <p>...</p> <p>abstract public  update (mixed $table, mixed $fields, mixed $values, [mixed $whereCondition], [mixed $dataTypes])</p> <p>...</p> <p>abstract public  delete (mixed $table, [mixed $whereCondition], [mixed $placeholders], [mixed $dataTypes])</p> <p>...</p> <p>abstract public  getColumnList (mixed $columnList)</p> <p>...</p> <p>abstract public  limit (mixed $sqlQuery, mixed $number)</p> <p>...</p> <p>abstract public  tableExists (mixed $tableName, [mixed $schemaName])</p> <p>...</p> <p>abstract public  viewExists (mixed $viewName, [mixed $schemaName])</p> <p>...</p> <p>abstract public  forUpdate (mixed $sqlQuery)</p> <p>...</p> <p>abstract public  sharedLock (mixed $sqlQuery)</p> <p>...</p> <p>abstract public  createTable (mixed $tableName, mixed $schemaName, array $definition)</p> <p>...</p> <p>abstract public  dropTable (mixed $tableName, [mixed $schemaName], [mixed $ifExists])</p> <p>...</p> <p>abstract public  createView (mixed $viewName, array $definition, [mixed $schemaName])</p> <p>...</p> <p>abstract public  dropView (mixed $viewName, [mixed $schemaName], [mixed $ifExists])</p> <p>...</p> <p>abstract public  addColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column)</p> <p>...</p> <p>abstract public  modifyColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column, [Phalcon\\Db\\ColumnInterface $currentColumn])</p> <p>...</p> <p>abstract public  dropColumn (mixed $tableName, mixed $schemaName, mixed $columnName)</p> <p>...</p> <p>abstract public  addIndex (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index)</p> <p>...</p> <p>abstract public  dropIndex (mixed $tableName, mixed $schemaName, mixed $indexName)</p> <p>...</p> <p>abstract public  addPrimaryKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index)</p> <p>...</p> <p>abstract public  dropPrimaryKey (mixed $tableName, mixed $schemaName)</p> <p>...</p> <p>abstract public  addForeignKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ReferenceInterface $reference)</p> <p>...</p> <p>abstract public  dropForeignKey (mixed $tableName, mixed $schemaName, mixed $referenceName)</p> <p>...</p> <p>abstract public  getColumnDefinition (Phalcon\\Db\\ColumnInterface $column)</p> <p>...</p> <p>abstract public  listTables ([mixed $schemaName])</p> <p>...</p> <p>abstract public  listViews ([mixed $schemaName])</p> <p>...</p> <p>abstract public  getDescriptor ()</p> <p>...</p> <p>abstract public  getConnectionId ()</p> <p>...</p> <p>abstract public  getSQLStatement ()</p> <p>...</p> <p>abstract public  getRealSQLStatement ()</p> <p>...</p> <p>abstract public  getSQLVariables ()</p> <p>...</p> <p>abstract public  getSQLBindTypes ()</p> <p>...</p> <p>abstract public  getType ()</p> <p>...</p> <p>abstract public  getDialectType ()</p> <p>...</p> <p>abstract public  getDialect ()</p> <p>...</p> <p>abstract public  connect ([array $descriptor])</p> <p>...</p> <p>abstract public  query (mixed $sqlStatement, [mixed $placeholders], [mixed $dataTypes])</p> <p>...</p> <p>abstract public  execute (mixed $sqlStatement, [mixed $placeholders], [mixed $dataTypes])</p> <p>...</p> <p>abstract public  affectedRows ()</p> <p>...</p> <p>abstract public  close ()</p> <p>...</p> <p>abstract public  escapeIdentifier (mixed $identifier)</p> <p>...</p> <p>abstract public  escapeString (mixed $str)</p> <p>...</p> <p>abstract public  lastInsertId ([mixed $sequenceName])</p> <p>...</p> <p>abstract public  begin ([mixed $nesting])</p> <p>...</p> <p>abstract public  rollback ([mixed $nesting])</p> <p>...</p> <p>abstract public  commit ([mixed $nesting])</p> <p>...</p> <p>abstract public  isUnderTransaction ()</p> <p>...</p> <p>abstract public  getInternalHandler ()</p> <p>...</p> <p>abstract public  describeIndexes (mixed $table, [mixed $schema])</p> <p>...</p> <p>abstract public  describeReferences (mixed $table, [mixed $schema])</p> <p>...</p> <p>abstract public  tableOptions (mixed $tableName, [mixed $schemaName])</p> <p>...</p> <p>abstract public  useExplicitIdValue ()</p> <p>...</p> <p>abstract public  getDefaultIdValue ()</p> <p>...</p> <p>abstract public  supportSequences ()</p> <p>...</p> <p>abstract public  createSavepoint (mixed $name)</p> <p>...</p> <p>abstract public  releaseSavepoint (mixed $name)</p> <p>...</p> <p>abstract public  rollbackSavepoint (mixed $name)</p> <p>...</p> <p>abstract public  setNestedTransactionsWithSavepoints (mixed $nestedTransactionsWithSavepoints)</p> <p>...</p> <p>abstract public  isNestedTransactionsWithSavepoints ()</p> <p>...</p> <p>abstract public  getNestedTransactionSavepointName ()</p> <p>...</p> <p>abstract public  describeColumns (mixed $table, [mixed $schema])</p> <p>...</p>"},{"location":"api/Phalcon_Db/#class-phalcondbcolumn","title":"Class Phalcon\\Db\\Column","text":"<p>implements Phalcon\\Db\\ColumnInterface</p> <p>Source on GitHub</p> <p>Allows to define columns to be used on create or alter table operations</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Column as Column;\n\n// Column definition\n$column = new Column(\n    \"id\",\n    [\n        \"type\"          =&gt; Column::TYPE_INTEGER,\n        \"size\"          =&gt; 10,\n        \"unsigned\"      =&gt; true,\n        \"notNull\"       =&gt; true,\n        \"autoIncrement\" =&gt; true,\n        \"first\"         =&gt; true,\n    ]\n);\n\n// Add column to existing table\n$connection-&gt;addColumn(\"robots\", null, $column);\n</code></pre>"},{"location":"api/Phalcon_Db/#constants_1","title":"Constants","text":"<p>integer TYPE_INTEGER</p> <p>integer TYPE_DATE</p> <p>integer TYPE_VARCHAR</p> <p>integer TYPE_DECIMAL</p> <p>integer TYPE_DATETIME</p> <p>integer TYPE_CHAR</p> <p>integer TYPE_TEXT</p> <p>integer TYPE_FLOAT</p> <p>integer TYPE_BOOLEAN</p> <p>integer TYPE_DOUBLE</p> <p>integer TYPE_TINYBLOB</p> <p>integer TYPE_BLOB</p> <p>integer TYPE_MEDIUMBLOB</p> <p>integer TYPE_LONGBLOB</p> <p>integer TYPE_BIGINTEGER</p> <p>integer TYPE_JSON</p> <p>integer TYPE_JSONB</p> <p>integer TYPE_TIMESTAMP</p> <p>integer BIND_PARAM_NULL</p> <p>integer BIND_PARAM_INT</p> <p>integer BIND_PARAM_STR</p> <p>integer BIND_PARAM_BLOB</p> <p>integer BIND_PARAM_BOOL</p> <p>integer BIND_PARAM_DECIMAL</p> <p>integer BIND_SKIP</p>"},{"location":"api/Phalcon_Db/#methods_8","title":"Methods","text":"<p>public  getName ()</p> <p>Column's name</p> <p>public  getSchemaName ()</p> <p>Schema which table related is</p> <p>public  getType ()</p> <p>Column data type</p> <p>public  getTypeReference ()</p> <p>Column data type reference</p> <p>public  getTypeValues ()</p> <p>Column data type values</p> <p>public  getSize ()</p> <p>Integer column size</p> <p>public  getScale ()</p> <p>Integer column number scale</p> <p>public  getDefault ()</p> <p>Default column value</p> <p>public  __construct (mixed $name, array $definition)</p> <p>Phalcon\\Db\\Column constructor</p> <p>public  isUnsigned ()</p> <p>Returns true if number column is unsigned</p> <p>public  isNotNull ()</p> <p>Not null</p> <p>public  isPrimary ()</p> <p>Column is part of the primary key?</p> <p>public  isAutoIncrement ()</p> <p>Auto-Increment</p> <p>public  isNumeric ()</p> <p>Check whether column have an numeric type</p> <p>public  isFirst ()</p> <p>Check whether column have first position in table</p> <p>public string getAfterPosition ()</p> <p>Check whether field absolute to position in table</p> <p>public  getBindType ()</p> <p>Returns the type of bind handling</p> <p>public static  __set_state (array $data)</p> <p>Restores the internal state of a Phalcon\\Db\\Column object</p> <p>public  hasDefault ()</p> <p>Check whether column has default value</p>"},{"location":"api/Phalcon_Db/#interface-phalcondbcolumninterface","title":"Interface Phalcon\\Db\\ColumnInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Db/#methods_9","title":"Methods","text":"<p>abstract public  getSchemaName ()</p> <p>...</p> <p>abstract public  getName ()</p> <p>...</p> <p>abstract public  getType ()</p> <p>...</p> <p>abstract public  getTypeReference ()</p> <p>...</p> <p>abstract public  getTypeValues ()</p> <p>...</p> <p>abstract public  getSize ()</p> <p>...</p> <p>abstract public  getScale ()</p> <p>...</p> <p>abstract public  isUnsigned ()</p> <p>...</p> <p>abstract public  isNotNull ()</p> <p>...</p> <p>abstract public  isPrimary ()</p> <p>...</p> <p>abstract public  isAutoIncrement ()</p> <p>...</p> <p>abstract public  isNumeric ()</p> <p>...</p> <p>abstract public  isFirst ()</p> <p>...</p> <p>abstract public  getAfterPosition ()</p> <p>...</p> <p>abstract public  getBindType ()</p> <p>...</p> <p>abstract public  getDefault ()</p> <p>...</p> <p>abstract public  hasDefault ()</p> <p>...</p> <p>abstract public static  __set_state (array $data)</p> <p>...</p>"},{"location":"api/Phalcon_Db/#abstract-class-phalcondbdialect","title":"Abstract class Phalcon\\Db\\Dialect","text":"<p>implements Phalcon\\Db\\DialectInterface</p> <p>Source on GitHub</p> <p>This is the base class to each database dialect. This implements common methods to transform intermediate code into its RDBMS related syntax</p>"},{"location":"api/Phalcon_Db/#methods_10","title":"Methods","text":"<p>public  registerCustomFunction (mixed $name, mixed $customFunction)</p> <p>Registers custom SQL functions</p> <p>public  getCustomFunctions ()</p> <p>Returns registered functions</p> <p>final public  escapeSchema (mixed $str, [mixed $escapeChar])</p> <p>Escape Schema</p> <p>final public  escape (mixed $str, [mixed $escapeChar])</p> <p>Escape identifiers</p> <p>public  limit (mixed $sqlQuery, mixed $number)</p> <p>Generates the SQL for LIMIT clause</p> <pre><code>&lt;?php\n\n$sql = $dialect-&gt;limit(\"SELECT * FROM robots\", 10);\necho $sql; // SELECT * FROM robots LIMIT 10\n\n$sql = $dialect-&gt;limit(\"SELECT * FROM robots\", [10, 50]);\necho $sql; // SELECT * FROM robots LIMIT 10 OFFSET 50\n</code></pre> <p>public  forUpdate (mixed $sqlQuery)</p> <p>Returns a SQL modified with a FOR UPDATE clause</p> <pre><code>&lt;?php\n\n$sql = $dialect-&gt;forUpdate(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots FOR UPDATE\n</code></pre> <p>public  sharedLock (mixed $sqlQuery)</p> <p>Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <pre><code>&lt;?php\n\n$sql = $dialect-&gt;sharedLock(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots LOCK IN SHARE MODE\n</code></pre> <p>final public  getColumnList (array $columnList, [mixed $escapeChar], [mixed $bindCounts])</p> <p>Gets a list of columns with escaped identifiers</p> <pre><code>&lt;?php\n\necho $dialect-&gt;getColumnList(\n    [\n        \"column1\",\n        \"column\",\n    ]\n);\n</code></pre> <p>final public  getSqlColumn (mixed $column, [mixed $escapeChar], [mixed $bindCounts])</p> <p>Resolve Column expressions</p> <p>public  getSqlExpression (array $expression, [mixed $escapeChar], [mixed $bindCounts])</p> <p>Transforms an intermediate representation for an expression into a database system valid expression</p> <p>final public  getSqlTable (mixed $table, [mixed $escapeChar])</p> <p>Transform an intermediate representation of a schema/table into a database system valid expression</p> <p>public  select (array $definition)</p> <p>Builds a SELECT statement</p> <p>public  supportsSavepoints ()</p> <p>Checks whether the platform supports savepoints</p> <p>public  supportsReleaseSavepoints ()</p> <p>Checks whether the platform supports releasing savepoints.</p> <p>public  createSavepoint (mixed $name)</p> <p>Generate SQL to create a new savepoint</p> <p>public  releaseSavepoint (mixed $name)</p> <p>Generate SQL to release a savepoint</p> <p>public  rollbackSavepoint (mixed $name)</p> <p>Generate SQL to rollback a savepoint</p> <p>final protected  getSqlExpressionScalar (array $expression, [mixed $escapeChar], [mixed $bindCounts])</p> <p>Resolve Column expressions</p> <p>final protected  getSqlExpressionObject (array $expression, [mixed $escapeChar], [mixed $bindCounts])</p> <p>Resolve object expressions</p> <p>final protected  getSqlExpressionQualified (array $expression, [mixed $escapeChar])</p> <p>Resolve qualified expressions</p> <p>final protected  getSqlExpressionBinaryOperations (array $expression, [mixed $escapeChar], [mixed $bindCounts])</p> <p>Resolve binary operations expressions</p> <p>final protected  getSqlExpressionUnaryOperations (array $expression, [mixed $escapeChar], [mixed $bindCounts])</p> <p>Resolve unary operations expressions</p> <p>final protected  getSqlExpressionFunctionCall (array $expression, mixed $escapeChar, [mixed $bindCounts])</p> <p>Resolve function calls</p> <p>final protected  getSqlExpressionList (array $expression, [mixed $escapeChar], [mixed $bindCounts])</p> <p>Resolve Lists</p> <p>final protected  getSqlExpressionAll (array $expression, [mixed $escapeChar])</p> <p>Resolve *</p> <p>final protected  getSqlExpressionCastValue (array $expression, [mixed $escapeChar], [mixed $bindCounts])</p> <p>Resolve CAST of values</p> <p>final protected  getSqlExpressionConvertValue (array $expression, [mixed $escapeChar], [mixed $bindCounts])</p> <p>Resolve CONVERT of values encodings</p> <p>final protected  getSqlExpressionCase (array $expression, [mixed $escapeChar], [mixed $bindCounts])</p> <p>Resolve CASE expressions</p> <p>final protected  getSqlExpressionFrom (mixed $expression, [mixed $escapeChar])</p> <p>Resolve a FROM clause</p> <p>final protected  getSqlExpressionJoins (mixed $expression, [mixed $escapeChar], [mixed $bindCounts])</p> <p>Resolve a JOINs clause</p> <p>final protected  getSqlExpressionWhere (mixed $expression, [mixed $escapeChar], [mixed $bindCounts])</p> <p>Resolve a WHERE clause</p> <p>final protected  getSqlExpressionGroupBy (mixed $expression, [mixed $escapeChar], [mixed $bindCounts])</p> <p>Resolve a GROUP BY clause</p> <p>final protected  getSqlExpressionHaving (array $expression, [mixed $escapeChar], [mixed $bindCounts])</p> <p>Resolve a HAVING clause</p> <p>final protected  getSqlExpressionOrderBy (mixed $expression, [mixed $escapeChar], [mixed $bindCounts])</p> <p>Resolve an ORDER BY clause</p> <p>final protected  getSqlExpressionLimit (mixed $expression, [mixed $escapeChar], [mixed $bindCounts])</p> <p>Resolve a LIMIT clause</p> <p>protected  prepareColumnAlias (mixed $qualified, [mixed $alias], [mixed $escapeChar])</p> <p>Prepares column for this RDBMS</p> <p>protected  prepareTable (mixed $table, [mixed $schema], [mixed $alias], [mixed $escapeChar])</p> <p>Prepares table for this RDBMS</p> <p>protected  prepareQualified (mixed $column, [mixed $domain], [mixed $escapeChar])</p> <p>Prepares qualified for this RDBMS</p> <p>abstract public  getColumnDefinition (Phalcon\\Db\\ColumnInterface $column) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  addColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  modifyColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column, [Phalcon\\Db\\ColumnInterface $currentColumn]) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  dropColumn (mixed $tableName, mixed $schemaName, mixed $columnName) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  addIndex (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  dropIndex (mixed $tableName, mixed $schemaName, mixed $indexName) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  addPrimaryKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  dropPrimaryKey (mixed $tableName, mixed $schemaName) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  addForeignKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ReferenceInterface $reference) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  dropForeignKey (mixed $tableName, mixed $schemaName, mixed $referenceName) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  createTable (mixed $tableName, mixed $schemaName, array $definition) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  createView (mixed $viewName, array $definition, [mixed $schemaName]) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  dropTable (mixed $tableName, mixed $schemaName) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  dropView (mixed $viewName, [mixed $schemaName], [mixed $ifExists]) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  tableExists (mixed $tableName, [mixed $schemaName]) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  viewExists (mixed $viewName, [mixed $schemaName]) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  describeColumns (mixed $table, [mixed $schema]) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  listTables ([mixed $schemaName]) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  describeIndexes (mixed $table, [mixed $schema]) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  describeReferences (mixed $table, [mixed $schema]) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p> <p>abstract public  tableOptions (mixed $table, [mixed $schema]) inherited from Phalcon\\Db\\DialectInterface</p> <p>...</p>"},{"location":"api/Phalcon_Db/#class-phalcondbdialectmysql","title":"Class Phalcon\\Db\\Dialect\\Mysql","text":"<p>extends abstract class Phalcon\\Db\\Dialect</p> <p>implements Phalcon\\Db\\DialectInterface</p> <p>Source on GitHub</p> <p>Generates database specific SQL for the MySQL RDBMS</p>"},{"location":"api/Phalcon_Db/#methods_11","title":"Methods","text":"<p>public  getColumnDefinition (Phalcon\\Db\\ColumnInterface $column)</p> <p>Gets the column name in MySQL</p> <p>public  addColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column)</p> <p>Generates SQL to add a column to a table</p> <p>public  modifyColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column, [Phalcon\\Db\\ColumnInterface $currentColumn])</p> <p>Generates SQL to modify a column in a table</p> <p>public  dropColumn (mixed $tableName, mixed $schemaName, mixed $columnName)</p> <p>Generates SQL to delete a column from a table</p> <p>public  addIndex (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index)</p> <p>Generates SQL to add an index to a table</p> <p>public  dropIndex (mixed $tableName, mixed $schemaName, mixed $indexName)</p> <p>Generates SQL to delete an index from a table</p> <p>public  addPrimaryKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index)</p> <p>Generates SQL to add the primary key to a table</p> <p>public  dropPrimaryKey (mixed $tableName, mixed $schemaName)</p> <p>Generates SQL to delete primary key from a table</p> <p>public  addForeignKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ReferenceInterface $reference)</p> <p>Generates SQL to add an index to a table</p> <p>public  dropForeignKey (mixed $tableName, mixed $schemaName, mixed $referenceName)</p> <p>Generates SQL to delete a foreign key from a table</p> <p>public  createTable (mixed $tableName, mixed $schemaName, array $definition)</p> <p>Generates SQL to create a table</p> <p>public  truncateTable (mixed $tableName, mixed $schemaName)</p> <p>Generates SQL to truncate a table</p> <p>public  dropTable (mixed $tableName, [mixed $schemaName], [mixed $ifExists])</p> <p>Generates SQL to drop a table</p> <p>public  createView (mixed $viewName, array $definition, [mixed $schemaName])</p> <p>Generates SQL to create a view</p> <p>public  dropView (mixed $viewName, [mixed $schemaName], [mixed $ifExists])</p> <p>Generates SQL to drop a view</p> <p>public  tableExists (mixed $tableName, [mixed $schemaName])</p> <p>Generates SQL checking for the existence of a schema.table</p> <pre><code>&lt;?php\n\necho $dialect-&gt;tableExists(\"posts\", \"blog\");\n\necho $dialect-&gt;tableExists(\"posts\");\n</code></pre> <p>public  viewExists (mixed $viewName, [mixed $schemaName])</p> <p>Generates SQL checking for the existence of a schema.view</p> <p>public  describeColumns (mixed $table, [mixed $schema])</p> <p>Generates SQL describing a table</p> <pre><code>&lt;?php\n\nprint_r(\n    $dialect-&gt;describeColumns(\"posts\")\n);\n</code></pre> <p>public  listTables ([mixed $schemaName])</p> <p>List all tables in database</p> <pre><code>&lt;?php\n\nprint_r(\n    $dialect-&gt;listTables(\"blog\")\n);\n</code></pre> <p>public  listViews ([mixed $schemaName])</p> <p>Generates the SQL to list all views of a schema or user</p> <p>public  describeIndexes (mixed $table, [mixed $schema])</p> <p>Generates SQL to query indexes on a table</p> <p>public  describeReferences (mixed $table, [mixed $schema])</p> <p>Generates SQL to query foreign keys on a table</p> <p>public  tableOptions (mixed $table, [mixed $schema])</p> <p>Generates the SQL to describe the table creation options</p> <p>protected  _getTableOptions (array $definition)</p> <p>Generates SQL to add the table creation options</p> <p>public  registerCustomFunction (mixed $name, mixed $customFunction) inherited from Phalcon\\Db\\Dialect</p> <p>Registers custom SQL functions</p> <p>public  getCustomFunctions () inherited from Phalcon\\Db\\Dialect</p> <p>Returns registered functions</p> <p>final public  escapeSchema (mixed $str, [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Escape Schema</p> <p>final public  escape (mixed $str, [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Escape identifiers</p> <p>public  limit (mixed $sqlQuery, mixed $number) inherited from Phalcon\\Db\\Dialect</p> <p>Generates the SQL for LIMIT clause</p> <pre><code>&lt;?php\n\n$sql = $dialect-&gt;limit(\"SELECT * FROM robots\", 10);\necho $sql; // SELECT * FROM robots LIMIT 10\n\n$sql = $dialect-&gt;limit(\"SELECT * FROM robots\", [10, 50]);\necho $sql; // SELECT * FROM robots LIMIT 10 OFFSET 50\n</code></pre> <p>public  forUpdate (mixed $sqlQuery) inherited from Phalcon\\Db\\Dialect</p> <p>Returns a SQL modified with a FOR UPDATE clause</p> <pre><code>&lt;?php\n\n$sql = $dialect-&gt;forUpdate(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots FOR UPDATE\n</code></pre> <p>public  sharedLock (mixed $sqlQuery) inherited from Phalcon\\Db\\Dialect</p> <p>Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <pre><code>&lt;?php\n\n$sql = $dialect-&gt;sharedLock(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots LOCK IN SHARE MODE\n</code></pre> <p>final public  getColumnList (array $columnList, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Gets a list of columns with escaped identifiers</p> <pre><code>&lt;?php\n\necho $dialect-&gt;getColumnList(\n    [\n        \"column1\",\n        \"column\",\n    ]\n);\n</code></pre> <p>final public  getSqlColumn (mixed $column, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve Column expressions</p> <p>public  getSqlExpression (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Transforms an intermediate representation for an expression into a database system valid expression</p> <p>final public  getSqlTable (mixed $table, [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Transform an intermediate representation of a schema/table into a database system valid expression</p> <p>public  select (array $definition) inherited from Phalcon\\Db\\Dialect</p> <p>Builds a SELECT statement</p> <p>public  supportsSavepoints () inherited from Phalcon\\Db\\Dialect</p> <p>Checks whether the platform supports savepoints</p> <p>public  supportsReleaseSavepoints () inherited from Phalcon\\Db\\Dialect</p> <p>Checks whether the platform supports releasing savepoints.</p> <p>public  createSavepoint (mixed $name) inherited from Phalcon\\Db\\Dialect</p> <p>Generate SQL to create a new savepoint</p> <p>public  releaseSavepoint (mixed $name) inherited from Phalcon\\Db\\Dialect</p> <p>Generate SQL to release a savepoint</p> <p>public  rollbackSavepoint (mixed $name) inherited from Phalcon\\Db\\Dialect</p> <p>Generate SQL to rollback a savepoint</p> <p>final protected  getSqlExpressionScalar (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve Column expressions</p> <p>final protected  getSqlExpressionObject (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve object expressions</p> <p>final protected  getSqlExpressionQualified (array $expression, [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve qualified expressions</p> <p>final protected  getSqlExpressionBinaryOperations (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve binary operations expressions</p> <p>final protected  getSqlExpressionUnaryOperations (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve unary operations expressions</p> <p>final protected  getSqlExpressionFunctionCall (array $expression, mixed $escapeChar, [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve function calls</p> <p>final protected  getSqlExpressionList (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve Lists</p> <p>final protected  getSqlExpressionAll (array $expression, [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve *</p> <p>final protected  getSqlExpressionCastValue (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve CAST of values</p> <p>final protected  getSqlExpressionConvertValue (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve CONVERT of values encodings</p> <p>final protected  getSqlExpressionCase (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve CASE expressions</p> <p>final protected  getSqlExpressionFrom (mixed $expression, [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve a FROM clause</p> <p>final protected  getSqlExpressionJoins (mixed $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve a JOINs clause</p> <p>final protected  getSqlExpressionWhere (mixed $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve a WHERE clause</p> <p>final protected  getSqlExpressionGroupBy (mixed $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve a GROUP BY clause</p> <p>final protected  getSqlExpressionHaving (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve a HAVING clause</p> <p>final protected  getSqlExpressionOrderBy (mixed $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve an ORDER BY clause</p> <p>final protected  getSqlExpressionLimit (mixed $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve a LIMIT clause</p> <p>protected  prepareColumnAlias (mixed $qualified, [mixed $alias], [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Prepares column for this RDBMS</p> <p>protected  prepareTable (mixed $table, [mixed $schema], [mixed $alias], [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Prepares table for this RDBMS</p> <p>protected  prepareQualified (mixed $column, [mixed $domain], [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Prepares qualified for this RDBMS</p>"},{"location":"api/Phalcon_Db/#class-phalcondbdialectpostgresql","title":"Class Phalcon\\Db\\Dialect\\Postgresql","text":"<p>extends abstract class Phalcon\\Db\\Dialect</p> <p>implements Phalcon\\Db\\DialectInterface</p> <p>Source on GitHub</p> <p>Generates database specific SQL for the PostgreSQL RDBMS</p>"},{"location":"api/Phalcon_Db/#methods_12","title":"Methods","text":"<p>public  getColumnDefinition (Phalcon\\Db\\ColumnInterface $column)</p> <p>Gets the column name in PostgreSQL</p> <p>public  addColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column)</p> <p>Generates SQL to add a column to a table</p> <p>public  modifyColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column, [Phalcon\\Db\\ColumnInterface $currentColumn])</p> <p>Generates SQL to modify a column in a table</p> <p>public  dropColumn (mixed $tableName, mixed $schemaName, mixed $columnName)</p> <p>Generates SQL to delete a column from a table</p> <p>public  addIndex (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index)</p> <p>Generates SQL to add an index to a table</p> <p>public  dropIndex (mixed $tableName, mixed $schemaName, mixed $indexName)</p> <p>Generates SQL to delete an index from a table</p> <p>public  addPrimaryKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index)</p> <p>Generates SQL to add the primary key to a table</p> <p>public  dropPrimaryKey (mixed $tableName, mixed $schemaName)</p> <p>Generates SQL to delete primary key from a table</p> <p>public  addForeignKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ReferenceInterface $reference)</p> <p>Generates SQL to add an index to a table</p> <p>public  dropForeignKey (mixed $tableName, mixed $schemaName, mixed $referenceName)</p> <p>Generates SQL to delete a foreign key from a table</p> <p>public  createTable (mixed $tableName, mixed $schemaName, array $definition)</p> <p>Generates SQL to create a table</p> <p>public  truncateTable (mixed $tableName, mixed $schemaName)</p> <p>Generates SQL to truncate a table</p> <p>public  dropTable (mixed $tableName, [mixed $schemaName], [mixed $ifExists])</p> <p>Generates SQL to drop a table</p> <p>public  createView (mixed $viewName, array $definition, [mixed $schemaName])</p> <p>Generates SQL to create a view</p> <p>public  dropView (mixed $viewName, [mixed $schemaName], [mixed $ifExists])</p> <p>Generates SQL to drop a view</p> <p>public  tableExists (mixed $tableName, [mixed $schemaName])</p> <p>Generates SQL checking for the existence of a schema.table</p> <pre><code>&lt;?php\n\necho $dialect-&gt;tableExists(\"posts\", \"blog\");\n\necho $dialect-&gt;tableExists(\"posts\");\n</code></pre> <p>public  viewExists (mixed $viewName, [mixed $schemaName])</p> <p>Generates SQL checking for the existence of a schema.view</p> <p>public  describeColumns (mixed $table, [mixed $schema])</p> <p>Generates SQL describing a table</p> <pre><code>&lt;?php\n\nprint_r(\n    $dialect-&gt;describeColumns(\"posts\")\n);\n</code></pre> <p>public  listTables ([mixed $schemaName])</p> <p>List all tables in database</p> <pre><code>&lt;?php\n\nprint_r(\n    $dialect-&gt;listTables(\"blog\")\n);\n</code></pre> <p>public string listViews ([string $schemaName])</p> <p>Generates the SQL to list all views of a schema or user</p> <p>public  describeIndexes (mixed $table, [mixed $schema])</p> <p>Generates SQL to query indexes on a table</p> <p>public  describeReferences (mixed $table, [mixed $schema])</p> <p>Generates SQL to query foreign keys on a table</p> <p>public  tableOptions (mixed $table, [mixed $schema])</p> <p>Generates the SQL to describe the table creation options</p> <p>protected  _castDefault (Phalcon\\Db\\ColumnInterface $column)</p> <p>...</p> <p>protected  _getTableOptions (array $definition)</p> <p>...</p> <p>public  registerCustomFunction (mixed $name, mixed $customFunction) inherited from Phalcon\\Db\\Dialect</p> <p>Registers custom SQL functions</p> <p>public  getCustomFunctions () inherited from Phalcon\\Db\\Dialect</p> <p>Returns registered functions</p> <p>final public  escapeSchema (mixed $str, [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Escape Schema</p> <p>final public  escape (mixed $str, [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Escape identifiers</p> <p>public  limit (mixed $sqlQuery, mixed $number) inherited from Phalcon\\Db\\Dialect</p> <p>Generates the SQL for LIMIT clause</p> <pre><code>&lt;?php\n\n$sql = $dialect-&gt;limit(\"SELECT * FROM robots\", 10);\necho $sql; // SELECT * FROM robots LIMIT 10\n\n$sql = $dialect-&gt;limit(\"SELECT * FROM robots\", [10, 50]);\necho $sql; // SELECT * FROM robots LIMIT 10 OFFSET 50\n</code></pre> <p>public  forUpdate (mixed $sqlQuery) inherited from Phalcon\\Db\\Dialect</p> <p>Returns a SQL modified with a FOR UPDATE clause</p> <pre><code>&lt;?php\n\n$sql = $dialect-&gt;forUpdate(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots FOR UPDATE\n</code></pre> <p>public  sharedLock (mixed $sqlQuery) inherited from Phalcon\\Db\\Dialect</p> <p>Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <pre><code>&lt;?php\n\n$sql = $dialect-&gt;sharedLock(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots LOCK IN SHARE MODE\n</code></pre> <p>final public  getColumnList (array $columnList, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Gets a list of columns with escaped identifiers</p> <pre><code>&lt;?php\n\necho $dialect-&gt;getColumnList(\n    [\n        \"column1\",\n        \"column\",\n    ]\n);\n</code></pre> <p>final public  getSqlColumn (mixed $column, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve Column expressions</p> <p>public  getSqlExpression (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Transforms an intermediate representation for an expression into a database system valid expression</p> <p>final public  getSqlTable (mixed $table, [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Transform an intermediate representation of a schema/table into a database system valid expression</p> <p>public  select (array $definition) inherited from Phalcon\\Db\\Dialect</p> <p>Builds a SELECT statement</p> <p>public  supportsSavepoints () inherited from Phalcon\\Db\\Dialect</p> <p>Checks whether the platform supports savepoints</p> <p>public  supportsReleaseSavepoints () inherited from Phalcon\\Db\\Dialect</p> <p>Checks whether the platform supports releasing savepoints.</p> <p>public  createSavepoint (mixed $name) inherited from Phalcon\\Db\\Dialect</p> <p>Generate SQL to create a new savepoint</p> <p>public  releaseSavepoint (mixed $name) inherited from Phalcon\\Db\\Dialect</p> <p>Generate SQL to release a savepoint</p> <p>public  rollbackSavepoint (mixed $name) inherited from Phalcon\\Db\\Dialect</p> <p>Generate SQL to rollback a savepoint</p> <p>final protected  getSqlExpressionScalar (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve Column expressions</p> <p>final protected  getSqlExpressionObject (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve object expressions</p> <p>final protected  getSqlExpressionQualified (array $expression, [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve qualified expressions</p> <p>final protected  getSqlExpressionBinaryOperations (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve binary operations expressions</p> <p>final protected  getSqlExpressionUnaryOperations (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve unary operations expressions</p> <p>final protected  getSqlExpressionFunctionCall (array $expression, mixed $escapeChar, [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve function calls</p> <p>final protected  getSqlExpressionList (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve Lists</p> <p>final protected  getSqlExpressionAll (array $expression, [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve *</p> <p>final protected  getSqlExpressionCastValue (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve CAST of values</p> <p>final protected  getSqlExpressionConvertValue (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve CONVERT of values encodings</p> <p>final protected  getSqlExpressionCase (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve CASE expressions</p> <p>final protected  getSqlExpressionFrom (mixed $expression, [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve a FROM clause</p> <p>final protected  getSqlExpressionJoins (mixed $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve a JOINs clause</p> <p>final protected  getSqlExpressionWhere (mixed $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve a WHERE clause</p> <p>final protected  getSqlExpressionGroupBy (mixed $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve a GROUP BY clause</p> <p>final protected  getSqlExpressionHaving (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve a HAVING clause</p> <p>final protected  getSqlExpressionOrderBy (mixed $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve an ORDER BY clause</p> <p>final protected  getSqlExpressionLimit (mixed $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve a LIMIT clause</p> <p>protected  prepareColumnAlias (mixed $qualified, [mixed $alias], [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Prepares column for this RDBMS</p> <p>protected  prepareTable (mixed $table, [mixed $schema], [mixed $alias], [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Prepares table for this RDBMS</p> <p>protected  prepareQualified (mixed $column, [mixed $domain], [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Prepares qualified for this RDBMS</p>"},{"location":"api/Phalcon_Db/#class-phalcondbdialectsqlite","title":"Class Phalcon\\Db\\Dialect\\Sqlite","text":"<p>extends abstract class Phalcon\\Db\\Dialect</p> <p>implements Phalcon\\Db\\DialectInterface</p> <p>Source on GitHub</p> <p>Generates database specific SQL for the Sqlite RDBMS</p>"},{"location":"api/Phalcon_Db/#methods_13","title":"Methods","text":"<p>public  getColumnDefinition (Phalcon\\Db\\ColumnInterface $column)</p> <p>Gets the column name in SQLite</p> <p>public  addColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column)</p> <p>Generates SQL to add a column to a table</p> <p>public  modifyColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column, [Phalcon\\Db\\ColumnInterface $currentColumn])</p> <p>Generates SQL to modify a column in a table</p> <p>public  dropColumn (mixed $tableName, mixed $schemaName, mixed $columnName)</p> <p>Generates SQL to delete a column from a table</p> <p>public  addIndex (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index)</p> <p>Generates SQL to add an index to a table</p> <p>public  dropIndex (mixed $tableName, mixed $schemaName, mixed $indexName)</p> <p>Generates SQL to delete an index from a table</p> <p>public  addPrimaryKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index)</p> <p>Generates SQL to add the primary key to a table</p> <p>public  dropPrimaryKey (mixed $tableName, mixed $schemaName)</p> <p>Generates SQL to delete primary key from a table</p> <p>public  addForeignKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ReferenceInterface $reference)</p> <p>Generates SQL to add an index to a table</p> <p>public  dropForeignKey (mixed $tableName, mixed $schemaName, mixed $referenceName)</p> <p>Generates SQL to delete a foreign key from a table</p> <p>public  createTable (mixed $tableName, mixed $schemaName, array $definition)</p> <p>Generates SQL to create a table</p> <p>public  truncateTable (mixed $tableName, mixed $schemaName)</p> <p>Generates SQL to truncate a table</p> <p>public  dropTable (mixed $tableName, [mixed $schemaName], [mixed $ifExists])</p> <p>Generates SQL to drop a table</p> <p>public  createView (mixed $viewName, array $definition, [mixed $schemaName])</p> <p>Generates SQL to create a view</p> <p>public  dropView (mixed $viewName, [mixed $schemaName], [mixed $ifExists])</p> <p>Generates SQL to drop a view</p> <p>public  tableExists (mixed $tableName, [mixed $schemaName])</p> <p>Generates SQL checking for the existence of a schema.table</p> <pre><code>&lt;?php\n\necho $dialect-&gt;tableExists(\"posts\", \"blog\");\n\necho $dialect-&gt;tableExists(\"posts\");\n</code></pre> <p>public  viewExists (mixed $viewName, [mixed $schemaName])</p> <p>Generates SQL checking for the existence of a schema.view</p> <p>public  describeColumns (mixed $table, [mixed $schema])</p> <p>Generates SQL describing a table</p> <pre><code>&lt;?php\n\nprint_r(\n    $dialect-&gt;describeColumns(\"posts\")\n);\n</code></pre> <p>public  listTables ([mixed $schemaName])</p> <p>List all tables in database</p> <pre><code>&lt;?php\n\nprint_r(\n    $dialect-&gt;listTables(\"blog\")\n);\n</code></pre> <p>public  listViews ([mixed $schemaName])</p> <p>Generates the SQL to list all views of a schema or user</p> <p>public  listIndexesSql (mixed $table, [mixed $schema], [mixed $keyName])</p> <p>Generates the SQL to get query list of indexes</p> <pre><code>&lt;?php\n\nprint_r(\n    $dialect-&gt;listIndexesSql(\"blog\")\n);\n</code></pre> <p>public  describeIndexes (mixed $table, [mixed $schema])</p> <p>Generates SQL to query indexes on a table</p> <p>public  describeIndex (mixed $index)</p> <p>Generates SQL to query indexes detail on a table</p> <p>public  describeReferences (mixed $table, [mixed $schema])</p> <p>Generates SQL to query foreign keys on a table</p> <p>public  tableOptions (mixed $table, [mixed $schema])</p> <p>Generates the SQL to describe the table creation options</p> <p>public  registerCustomFunction (mixed $name, mixed $customFunction) inherited from Phalcon\\Db\\Dialect</p> <p>Registers custom SQL functions</p> <p>public  getCustomFunctions () inherited from Phalcon\\Db\\Dialect</p> <p>Returns registered functions</p> <p>final public  escapeSchema (mixed $str, [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Escape Schema</p> <p>final public  escape (mixed $str, [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Escape identifiers</p> <p>public  limit (mixed $sqlQuery, mixed $number) inherited from Phalcon\\Db\\Dialect</p> <p>Generates the SQL for LIMIT clause</p> <pre><code>&lt;?php\n\n$sql = $dialect-&gt;limit(\"SELECT * FROM robots\", 10);\necho $sql; // SELECT * FROM robots LIMIT 10\n\n$sql = $dialect-&gt;limit(\"SELECT * FROM robots\", [10, 50]);\necho $sql; // SELECT * FROM robots LIMIT 10 OFFSET 50\n</code></pre> <p>public  forUpdate (mixed $sqlQuery) inherited from Phalcon\\Db\\Dialect</p> <p>Returns a SQL modified with a FOR UPDATE clause</p> <pre><code>&lt;?php\n\n$sql = $dialect-&gt;forUpdate(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots FOR UPDATE\n</code></pre> <p>public  sharedLock (mixed $sqlQuery) inherited from Phalcon\\Db\\Dialect</p> <p>Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <pre><code>&lt;?php\n\n$sql = $dialect-&gt;sharedLock(\"SELECT * FROM robots\");\necho $sql; // SELECT * FROM robots LOCK IN SHARE MODE\n</code></pre> <p>final public  getColumnList (array $columnList, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Gets a list of columns with escaped identifiers</p> <pre><code>&lt;?php\n\necho $dialect-&gt;getColumnList(\n    [\n        \"column1\",\n        \"column\",\n    ]\n);\n</code></pre> <p>final public  getSqlColumn (mixed $column, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve Column expressions</p> <p>public  getSqlExpression (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Transforms an intermediate representation for an expression into a database system valid expression</p> <p>final public  getSqlTable (mixed $table, [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Transform an intermediate representation of a schema/table into a database system valid expression</p> <p>public  select (array $definition) inherited from Phalcon\\Db\\Dialect</p> <p>Builds a SELECT statement</p> <p>public  supportsSavepoints () inherited from Phalcon\\Db\\Dialect</p> <p>Checks whether the platform supports savepoints</p> <p>public  supportsReleaseSavepoints () inherited from Phalcon\\Db\\Dialect</p> <p>Checks whether the platform supports releasing savepoints.</p> <p>public  createSavepoint (mixed $name) inherited from Phalcon\\Db\\Dialect</p> <p>Generate SQL to create a new savepoint</p> <p>public  releaseSavepoint (mixed $name) inherited from Phalcon\\Db\\Dialect</p> <p>Generate SQL to release a savepoint</p> <p>public  rollbackSavepoint (mixed $name) inherited from Phalcon\\Db\\Dialect</p> <p>Generate SQL to rollback a savepoint</p> <p>final protected  getSqlExpressionScalar (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve Column expressions</p> <p>final protected  getSqlExpressionObject (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve object expressions</p> <p>final protected  getSqlExpressionQualified (array $expression, [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve qualified expressions</p> <p>final protected  getSqlExpressionBinaryOperations (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve binary operations expressions</p> <p>final protected  getSqlExpressionUnaryOperations (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve unary operations expressions</p> <p>final protected  getSqlExpressionFunctionCall (array $expression, mixed $escapeChar, [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve function calls</p> <p>final protected  getSqlExpressionList (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve Lists</p> <p>final protected  getSqlExpressionAll (array $expression, [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve *</p> <p>final protected  getSqlExpressionCastValue (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve CAST of values</p> <p>final protected  getSqlExpressionConvertValue (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve CONVERT of values encodings</p> <p>final protected  getSqlExpressionCase (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve CASE expressions</p> <p>final protected  getSqlExpressionFrom (mixed $expression, [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve a FROM clause</p> <p>final protected  getSqlExpressionJoins (mixed $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve a JOINs clause</p> <p>final protected  getSqlExpressionWhere (mixed $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve a WHERE clause</p> <p>final protected  getSqlExpressionGroupBy (mixed $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve a GROUP BY clause</p> <p>final protected  getSqlExpressionHaving (array $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve a HAVING clause</p> <p>final protected  getSqlExpressionOrderBy (mixed $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve an ORDER BY clause</p> <p>final protected  getSqlExpressionLimit (mixed $expression, [mixed $escapeChar], [mixed $bindCounts]) inherited from Phalcon\\Db\\Dialect</p> <p>Resolve a LIMIT clause</p> <p>protected  prepareColumnAlias (mixed $qualified, [mixed $alias], [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Prepares column for this RDBMS</p> <p>protected  prepareTable (mixed $table, [mixed $schema], [mixed $alias], [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Prepares table for this RDBMS</p> <p>protected  prepareQualified (mixed $column, [mixed $domain], [mixed $escapeChar]) inherited from Phalcon\\Db\\Dialect</p> <p>Prepares qualified for this RDBMS</p>"},{"location":"api/Phalcon_Db/#interface-phalcondbdialectinterface","title":"Interface Phalcon\\Db\\DialectInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Db/#methods_14","title":"Methods","text":"<p>abstract public  limit (mixed $sqlQuery, mixed $number)</p> <p>...</p> <p>abstract public  forUpdate (mixed $sqlQuery)</p> <p>...</p> <p>abstract public  sharedLock (mixed $sqlQuery)</p> <p>...</p> <p>abstract public  select (array $definition)</p> <p>...</p> <p>abstract public  getColumnList (array $columnList)</p> <p>...</p> <p>abstract public  getColumnDefinition (Phalcon\\Db\\ColumnInterface $column)</p> <p>...</p> <p>abstract public  addColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column)</p> <p>...</p> <p>abstract public  modifyColumn (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ColumnInterface $column, [Phalcon\\Db\\ColumnInterface $currentColumn])</p> <p>...</p> <p>abstract public  dropColumn (mixed $tableName, mixed $schemaName, mixed $columnName)</p> <p>...</p> <p>abstract public  addIndex (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index)</p> <p>...</p> <p>abstract public  dropIndex (mixed $tableName, mixed $schemaName, mixed $indexName)</p> <p>...</p> <p>abstract public  addPrimaryKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\IndexInterface $index)</p> <p>...</p> <p>abstract public  dropPrimaryKey (mixed $tableName, mixed $schemaName)</p> <p>...</p> <p>abstract public  addForeignKey (mixed $tableName, mixed $schemaName, Phalcon\\Db\\ReferenceInterface $reference)</p> <p>...</p> <p>abstract public  dropForeignKey (mixed $tableName, mixed $schemaName, mixed $referenceName)</p> <p>...</p> <p>abstract public  createTable (mixed $tableName, mixed $schemaName, array $definition)</p> <p>...</p> <p>abstract public  createView (mixed $viewName, array $definition, [mixed $schemaName])</p> <p>...</p> <p>abstract public  dropTable (mixed $tableName, mixed $schemaName)</p> <p>...</p> <p>abstract public  dropView (mixed $viewName, [mixed $schemaName], [mixed $ifExists])</p> <p>...</p> <p>abstract public  tableExists (mixed $tableName, [mixed $schemaName])</p> <p>...</p> <p>abstract public  viewExists (mixed $viewName, [mixed $schemaName])</p> <p>...</p> <p>abstract public  describeColumns (mixed $table, [mixed $schema])</p> <p>...</p> <p>abstract public  listTables ([mixed $schemaName])</p> <p>...</p> <p>abstract public  describeIndexes (mixed $table, [mixed $schema])</p> <p>...</p> <p>abstract public  describeReferences (mixed $table, [mixed $schema])</p> <p>...</p> <p>abstract public  tableOptions (mixed $table, [mixed $schema])</p> <p>...</p> <p>abstract public  supportsSavepoints ()</p> <p>...</p> <p>abstract public  supportsReleaseSavepoints ()</p> <p>...</p> <p>abstract public  createSavepoint (mixed $name)</p> <p>...</p> <p>abstract public  releaseSavepoint (mixed $name)</p> <p>...</p> <p>abstract public  rollbackSavepoint (mixed $name)</p> <p>...</p>"},{"location":"api/Phalcon_Db/#class-phalcondbexception","title":"Class Phalcon\\Db\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Db/#methods_15","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Db/#class-phalcondbindex","title":"Class Phalcon\\Db\\Index","text":"<p>implements Phalcon\\Db\\IndexInterface</p> <p>Source on GitHub</p> <p>Allows to define indexes to be used on tables. Indexes are a common way to enhance database performance. An index allows the database server to find and retrieve specific rows much faster than it could do without an index</p> <pre><code>&lt;?php\n\n// Define new unique index\n$index_unique = new \\Phalcon\\Db\\Index(\n    'column_UNIQUE',\n    [\n        'column',\n        'column'\n    ],\n    'UNIQUE'\n);\n\n// Define new primary index\n$index_primary = new \\Phalcon\\Db\\Index(\n    'PRIMARY',\n    [\n        'column'\n    ]\n);\n\n// Add index to existing table\n$connection-&gt;addIndex(\"robots\", null, $index_unique);\n$connection-&gt;addIndex(\"robots\", null, $index_primary);\n</code></pre>"},{"location":"api/Phalcon_Db/#methods_16","title":"Methods","text":"<p>public  getName ()</p> <p>Index name</p> <p>public  getColumns ()</p> <p>Index columns</p> <p>public  getType ()</p> <p>Index type</p> <p>public  __construct (mixed $name, array $columns, [mixed $type])</p> <p>Phalcon\\Db\\Index constructor</p> <p>public static  __set_state (array $data)</p> <p>Restore a Phalcon\\Db\\Index object from export</p>"},{"location":"api/Phalcon_Db/#interface-phalcondbindexinterface","title":"Interface Phalcon\\Db\\IndexInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Db/#methods_17","title":"Methods","text":"<p>abstract public  getName ()</p> <p>...</p> <p>abstract public  getColumns ()</p> <p>...</p> <p>abstract public  getType ()</p> <p>...</p> <p>abstract public static  __set_state (array $data)</p> <p>...</p>"},{"location":"api/Phalcon_Db/#class-phalcondbprofiler","title":"Class Phalcon\\Db\\Profiler","text":"<p>Source on GitHub</p> <p>Instances of Phalcon\\Db can generate execution profiles on SQL statements sent to the relational database. Profiled information includes execution time in milliseconds. This helps you to identify bottlenecks in your applications.</p> <pre><code>&lt;?php\n\n$profiler = new \\Phalcon\\Db\\Profiler();\n\n// Set the connection profiler\n$connection-&gt;setProfiler($profiler);\n\n$sql = \"SELECT buyer_name, quantity, product_name\nFROM buyers LEFT JOIN products ON\nbuyers.pid=products.id\";\n\n// Execute a SQL statement\n$connection-&gt;query($sql);\n\n// Get the last profile in the profiler\n$profile = $profiler-&gt;getLastProfile();\n\necho \"SQL Statement: \", $profile-&gt;getSQLStatement(), \"\\n\";\necho \"Start Time: \", $profile-&gt;getInitialTime(), \"\\n\";\necho \"Final Time: \", $profile-&gt;getFinalTime(), \"\\n\";\necho \"Total Elapsed Time: \", $profile-&gt;getTotalElapsedSeconds(), \"\\n\";\n</code></pre>"},{"location":"api/Phalcon_Db/#methods_18","title":"Methods","text":"<p>public Phalcon\\Db\\Profiler startProfile (string $sqlStatement, [mixed $sqlVariables], [mixed $sqlBindTypes])</p> <p>Starts the profile of a SQL sentence</p> <p>public  stopProfile ()</p> <p>Stops the active profile</p> <p>public  getNumberTotalStatements ()</p> <p>Returns the total number of SQL statements processed</p> <p>public  getTotalElapsedSeconds ()</p> <p>Returns the total time in seconds spent by the profiles</p> <p>public  getProfiles ()</p> <p>Returns all the processed profiles</p> <p>public  reset ()</p> <p>Resets the profiler, cleaning up all the profiles</p> <p>public  getLastProfile ()</p> <p>Returns the last profile executed in the profiler</p>"},{"location":"api/Phalcon_Db/#class-phalcondbprofileritem","title":"Class Phalcon\\Db\\Profiler\\Item","text":"<p>Source on GitHub</p> <p>This class identifies each profile in a Phalcon\\Db\\Profiler</p>"},{"location":"api/Phalcon_Db/#methods_19","title":"Methods","text":"<p>public  setSqlStatement (mixed $sqlStatement)</p> <p>SQL statement related to the profile</p> <p>public  getSqlStatement ()</p> <p>SQL statement related to the profile</p> <p>public  setSqlVariables (array $sqlVariables)</p> <p>SQL variables related to the profile</p> <p>public  getSqlVariables ()</p> <p>SQL variables related to the profile</p> <p>public  setSqlBindTypes (array $sqlBindTypes)</p> <p>SQL bind types related to the profile</p> <p>public  getSqlBindTypes ()</p> <p>SQL bind types related to the profile</p> <p>public  setInitialTime (mixed $initialTime)</p> <p>Timestamp when the profile started</p> <p>public  getInitialTime ()</p> <p>Timestamp when the profile started</p> <p>public  setFinalTime (mixed $finalTime)</p> <p>Timestamp when the profile ended</p> <p>public  getFinalTime ()</p> <p>Timestamp when the profile ended</p> <p>public  getTotalElapsedSeconds ()</p> <p>Returns the total time in seconds spent by the profile</p>"},{"location":"api/Phalcon_Db/#class-phalcondbrawvalue","title":"Class Phalcon\\Db\\RawValue","text":"<p>Source on GitHub</p> <p>This class allows to insert/update raw data without quoting or formatting.</p> <p>The next example shows how to use the MySQL now() function as a field value.</p> <pre><code>&lt;?php\n\n$subscriber = new Subscribers();\n\n$subscriber-&gt;email     = \"andres@phalcon.io\";\n$subscriber-&gt;createdAt = new \\Phalcon\\Db\\RawValue(\"now()\");\n\n$subscriber-&gt;save();\n</code></pre>"},{"location":"api/Phalcon_Db/#methods_20","title":"Methods","text":"<p>public  getValue ()</p> <p>Raw value without quoting or formatting</p> <p>public  __toString ()</p> <p>Raw value without quoting or formatting</p> <p>public  __construct (mixed $value)</p> <p>Phalcon\\Db\\RawValue constructor</p>"},{"location":"api/Phalcon_Db/#class-phalcondbreference","title":"Class Phalcon\\Db\\Reference","text":"<p>implements Phalcon\\Db\\ReferenceInterface</p> <p>Source on GitHub</p> <p>Allows to define reference constraints on tables</p> <pre><code>&lt;?php\n\n$reference = new \\Phalcon\\Db\\Reference(\n    \"field_fk\",\n    [\n        \"referencedSchema\"  =&gt; \"invoicing\",\n        \"referencedTable\"   =&gt; \"products\",\n        \"columns\"           =&gt; [\n            \"product_type\",\n            \"product_code\",\n        ],\n        \"referencedColumns\" =&gt; [\n            \"type\",\n            \"code\",\n        ],\n    ]\n);\n</code></pre>"},{"location":"api/Phalcon_Db/#methods_21","title":"Methods","text":"<p>public  getName ()</p> <p>Constraint name</p> <p>public  getSchemaName ()</p> <p>...</p> <p>public  getReferencedSchema ()</p> <p>...</p> <p>public  getReferencedTable ()</p> <p>Referenced Table</p> <p>public  getColumns ()</p> <p>Local reference columns</p> <p>public  getReferencedColumns ()</p> <p>Referenced Columns</p> <p>public  getOnDelete ()</p> <p>ON DELETE</p> <p>public  getOnUpdate ()</p> <p>ON UPDATE</p> <p>public  __construct (mixed $name, array $definition)</p> <p>Phalcon\\Db\\Reference constructor</p> <p>public static  __set_state (array $data)</p> <p>Restore a Phalcon\\Db\\Reference object from export</p>"},{"location":"api/Phalcon_Db/#interface-phalcondbreferenceinterface","title":"Interface Phalcon\\Db\\ReferenceInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Db/#methods_22","title":"Methods","text":"<p>abstract public  getName ()</p> <p>...</p> <p>abstract public  getSchemaName ()</p> <p>...</p> <p>abstract public  getReferencedSchema ()</p> <p>...</p> <p>abstract public  getColumns ()</p> <p>...</p> <p>abstract public  getReferencedTable ()</p> <p>...</p> <p>abstract public  getReferencedColumns ()</p> <p>...</p> <p>abstract public  getOnDelete ()</p> <p>...</p> <p>abstract public  getOnUpdate ()</p> <p>...</p> <p>abstract public static  __set_state (array $data)</p> <p>...</p>"},{"location":"api/Phalcon_Db/#class-phalcondbresultpdo","title":"Class Phalcon\\Db\\Result\\Pdo","text":"<p>implements Phalcon\\Db\\ResultInterface</p> <p>Source on GitHub</p> <p>Encapsulates the resultset internals</p> <pre><code>&lt;?php\n\n$result = $connection-&gt;query(\"SELECT * FROM robots ORDER BY name\");\n\n$result-&gt;setFetchMode(\n    \\Phalcon\\Db::FETCH_NUM\n);\n\nwhile ($robot = $result-&gt;fetchArray()) {\n    print_r($robot);\n}\n</code></pre>"},{"location":"api/Phalcon_Db/#methods_23","title":"Methods","text":"<p>public  __construct (Phalcon\\Db\\AdapterInterface $connection, PDOStatement $result, [string $sqlStatement], [array $bindParams], [array $bindTypes])</p> <p>Phalcon\\Db\\Result\\Pdo constructor</p> <p>public  execute ()</p> <p>Allows to execute the statement again. Some database systems don't support scrollable cursors, So, as cursors are forward only, we need to execute the cursor again to fetch rows from the begining</p> <p>public  fetch ([mixed $fetchStyle], [mixed $cursorOrientation], [mixed $cursorOffset])</p> <p>Fetches an array/object of strings that corresponds to the fetched row, or FALSE if there are no more rows. This method is affected by the active fetch flag set using Phalcon\\Db\\Result\\Pdo::setFetchMode</p> <pre><code>&lt;?php\n\n$result = $connection-&gt;query(\"SELECT * FROM robots ORDER BY name\");\n\n$result-&gt;setFetchMode(\n    \\Phalcon\\Db::FETCH_OBJ\n);\n\nwhile ($robot = $result-&gt;fetch()) {\n    echo $robot-&gt;name;\n}\n</code></pre> <p>public  fetchArray ()</p> <p>Returns an array of strings that corresponds to the fetched row, or FALSE if there are no more rows. This method is affected by the active fetch flag set using Phalcon\\Db\\Result\\Pdo::setFetchMode</p> <pre><code>&lt;?php\n\n$result = $connection-&gt;query(\"SELECT * FROM robots ORDER BY name\");\n\n$result-&gt;setFetchMode(\n    \\Phalcon\\Db::FETCH_NUM\n);\n\nwhile ($robot = result-&gt;fetchArray()) {\n    print_r($robot);\n}\n</code></pre> <p>public  fetchAll ([mixed $fetchStyle], [mixed $fetchArgument], [mixed $ctorArgs])</p> <p>Returns an array of arrays containing all the records in the result This method is affected by the active fetch flag set using Phalcon\\Db\\Result\\Pdo::setFetchMode</p> <pre><code>&lt;?php\n\n$result = $connection-&gt;query(\n    \"SELECT * FROM robots ORDER BY name\"\n);\n\n$robots = $result-&gt;fetchAll();\n</code></pre> <p>public  numRows ()</p> <p>Gets number of rows returned by a resultset</p> <pre><code>&lt;?php\n\n$result = $connection-&gt;query(\n    \"SELECT * FROM robots ORDER BY name\"\n);\n\necho \"There are \", $result-&gt;numRows(), \" rows in the resultset\";\n</code></pre> <p>public  dataSeek (mixed $number)</p> <p>Moves internal resultset cursor to another position letting us to fetch a certain row</p> <pre><code>&lt;?php\n\n$result = $connection-&gt;query(\n    \"SELECT * FROM robots ORDER BY name\"\n);\n\n// Move to third row on result\n$result-&gt;dataSeek(2);\n\n// Fetch third row\n$row = $result-&gt;fetch();\n</code></pre> <p>public  setFetchMode (mixed $fetchMode, [mixed $colNoOrClassNameOrObject], [mixed $ctorargs])</p> <p>Changes the fetching mode affecting Phalcon\\Db\\Result\\Pdo::fetch()</p> <pre><code>&lt;?php\n\n// Return array with integer indexes\n$result-&gt;setFetchMode(\n    \\Phalcon\\Db::FETCH_NUM\n);\n\n// Return associative array without integer indexes\n$result-&gt;setFetchMode(\n    \\Phalcon\\Db::FETCH_ASSOC\n);\n\n// Return associative array together with integer indexes\n$result-&gt;setFetchMode(\n    \\Phalcon\\Db::FETCH_BOTH\n);\n\n// Return an object\n$result-&gt;setFetchMode(\n    \\Phalcon\\Db::FETCH_OBJ\n);\n</code></pre> <p>public  getInternalResult ()</p> <p>Gets the internal PDO result object</p>"},{"location":"api/Phalcon_Db/#interface-phalcondbresultinterface","title":"Interface Phalcon\\Db\\ResultInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Db/#methods_24","title":"Methods","text":"<p>abstract public  execute ()</p> <p>...</p> <p>abstract public  fetch ()</p> <p>...</p> <p>abstract public  fetchArray ()</p> <p>...</p> <p>abstract public  fetchAll ()</p> <p>...</p> <p>abstract public  numRows ()</p> <p>...</p> <p>abstract public  dataSeek (mixed $number)</p> <p>...</p> <p>abstract public  setFetchMode (mixed $fetchMode)</p> <p>...</p> <p>abstract public  getInternalResult ()</p> <p>...</p>"},{"location":"api/Phalcon_Debug/","title":"Class Phalcon\\Debug","text":"<p>Source on GitHub</p> <p>Provides debug capabilities to Phalcon applications</p>"},{"location":"api/Phalcon_Debug/#methods","title":"Methods","text":"<p>public  setUri (mixed $uri)</p> <p>Change the base URI for static resources</p> <p>public  setShowBackTrace (mixed $showBackTrace)</p> <p>Sets if files the exception's backtrace must be showed</p> <p>public  setShowFiles (mixed $showFiles)</p> <p>Set if files part of the backtrace must be shown in the output</p> <p>public  setShowFileFragment (mixed $showFileFragment)</p> <p>Sets if files must be completely opened and showed in the output or just the fragment related to the exception</p> <p>public  listen ([mixed $exceptions], [mixed $lowSeverity])</p> <p>Listen for uncaught exceptions and unsilent notices or warnings</p> <p>public  listenExceptions ()</p> <p>Listen for uncaught exceptions</p> <p>public  listenLowSeverity ()</p> <p>Listen for unsilent notices or warnings</p> <p>public  halt ()</p> <p>Halts the request showing a backtrace</p> <p>public  debugVar (mixed $varz, [mixed $key])</p> <p>Adds a variable to the debug output</p> <p>public  clearVars ()</p> <p>Clears are variables added previously</p> <p>protected  _escapeString (mixed $value)</p> <p>Escapes a string with htmlentities</p> <p>protected  _getArrayDump (array $argument, [mixed $n])</p> <p>Produces a recursive representation of an array</p> <p>protected  _getVarDump (mixed $variable)</p> <p>Produces an string representation of a variable</p> <p>public  getMajorVersion ()</p> <p>Returns the major framework's version</p> <p>public  getVersion ()</p> <p>Generates a link to the current version documentation</p> <p>public  getCssSources ()</p> <p>Returns the css sources</p> <p>public  getJsSources ()</p> <p>Returns the javascript sources</p> <p>final protected  showTraceItem (mixed $n, array $trace)</p> <p>Shows a backtrace item</p> <p>public  onUncaughtLowSeverity (mixed $severity, mixed $message, mixed $file, mixed $line, mixed $context)</p> <p>Throws an exception when a notice or warning is raised</p> <p>public  onUncaughtException (Exception $exception)</p> <p>Handles uncaught exceptions</p>"},{"location":"api/Phalcon_Debug/#class-phalcondebugdump","title":"Class Phalcon\\Debug\\Dump","text":"<p>Source on GitHub</p> <p>Dumps information about a variable(s)</p> <pre><code>&lt;?php\n\n$foo = 123;\n\necho (new \\Phalcon\\Debug\\Dump())-&gt;variable($foo, \"foo\");\n</code></pre> <pre><code>&lt;?php\n\n$foo = \"string\";\n$bar = [\"key\" =&gt; \"value\"];\n$baz = new stdClass();\n\necho (new \\Phalcon\\Debug\\Dump())-&gt;variables($foo, $bar, $baz);\n</code></pre>"},{"location":"api/Phalcon_Debug/#methods_1","title":"Methods","text":"<p>public  getDetailed ()</p> <p>...</p> <p>public  setDetailed (mixed $detailed)</p> <p>...</p> <p>public  __construct ([array $styles], [mixed $detailed])</p> <p>Phalcon\\Debug\\Dump constructor</p> <p>public  all ()</p> <p>Alias of variables() method</p> <p>protected  getStyle (mixed $type)</p> <p>Get style for type</p> <p>public  setStyles ([array $styles])</p> <p>Set styles for vars type</p> <p>public  one (mixed $variable, [mixed $name])</p> <p>Alias of variable() method</p> <p>protected  output (mixed $variable, [mixed $name], [mixed $tab])</p> <p>Prepare an HTML string of information about a single variable.</p> <p>public  variable (mixed $variable, [mixed $name])</p> <p>Returns an HTML string of information about a single variable.</p> <pre><code>&lt;?php\n\necho (new \\Phalcon\\Debug\\Dump())-&gt;variable($foo, \"foo\");\n</code></pre> <p>public  variables ()</p> <p>Returns an HTML string of debugging information about any number of variables, each wrapped in a \"pre\" tag.</p> <pre><code>&lt;?php\n\n$foo = \"string\";\n$bar = [\"key\" =&gt; \"value\"];\n$baz = new stdClass();\n\necho (new \\Phalcon\\Debug\\Dump())-&gt;variables($foo, $bar, $baz);\n</code></pre> <p>public  toJson (mixed $variable)</p> <p>Returns an JSON string of information about a single variable.</p> <pre><code>&lt;?php\n\n$foo = [\n    \"key\" =&gt; \"value\",\n];\n\necho (new \\Phalcon\\Debug\\Dump())-&gt;toJson($foo);\n\n$foo = new stdClass();\n$foo-&gt;bar = \"buz\";\n\necho (new \\Phalcon\\Debug\\Dump())-&gt;toJson($foo);\n</code></pre>"},{"location":"api/Phalcon_Debug/#class-phalcondebugexception","title":"Class Phalcon\\Debug\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Debug/#methods_2","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Di/","title":"Class Phalcon\\Di","text":"<p>implements Phalcon\\DiInterface, ArrayAccess</p> <p>Source on GitHub</p> <p>Phalcon\\Di is a component that implements Dependency Injection/Service Location of services and it's itself a container for them.</p> <p>Since Phalcon is highly decoupled, Phalcon\\Di is essential to integrate the different components of the framework. The developer can also use this component to inject dependencies and manage global instances of the different classes used in the application.</p> <p>Basically, this component implements the <code>Inversion of Control</code> pattern. Applying this, the objects do not receive their dependencies using setters or constructors, but requesting a service dependency injector. This reduces the overall complexity, since there is only one way to get the required dependencies within a component.</p> <p>Additionally, this pattern increases testability in the code, thus making it less prone to errors.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Http\\Request;\n\n$di = new Di();\n\n// Using a string definition\n$di-&gt;set(\"request\", Request::class, true);\n\n// Using an anonymous function\n$di-&gt;setShared(\n    \"request\",\n    function () {\n        return new Request();\n    }\n);\n\n$request = $di-&gt;getRequest();\n</code></pre>"},{"location":"api/Phalcon_Di/#methods","title":"Methods","text":"<p>public  __construct ()</p> <p>Phalcon\\Di constructor</p> <p>public  setInternalEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager)</p> <p>Sets the internal event manager</p> <p>public  getInternalEventsManager ()</p> <p>Returns the internal event manager</p> <p>public  set (mixed $name, mixed $definition, [mixed $shared])</p> <p>Registers a service in the services container</p> <p>public  setShared (mixed $name, mixed $definition)</p> <p>Registers an \"always shared\" service in the services container</p> <p>public  remove (mixed $name)</p> <p>Removes a service in the services container It also removes any shared instance created for the service</p> <p>public  attempt (mixed $name, mixed $definition, [mixed $shared])</p> <p>Attempts to register a service in the services container Only is successful if a service hasn't been registered previously with the same name</p> <p>public  setRaw (mixed $name, Phalcon\\Di\\ServiceInterface $rawDefinition)</p> <p>Sets a service using a raw Phalcon\\Di\\Service definition</p> <p>public  getRaw (mixed $name)</p> <p>Returns a service definition without resolving</p> <p>public  getService (mixed $name)</p> <p>Returns a Phalcon\\Di\\Service instance</p> <p>public  get (mixed $name, [mixed $parameters])</p> <p>Resolves the service based on its configuration</p> <p>public mixed getShared (string $name, [array $parameters])</p> <p>Resolves a service, the resolved service is stored in the DI, subsequent requests for this service will return the same instance</p> <p>public  has (mixed $name)</p> <p>Check whether the DI contains a service by a name</p> <p>public  wasFreshInstance ()</p> <p>Check whether the last service obtained via getShared produced a fresh instance or an existing one</p> <p>public  getServices ()</p> <p>Return the services registered in the DI</p> <p>public  offsetExists (mixed $name)</p> <p>Check if a service is registered using the array syntax</p> <p>public  offsetSet (mixed $name, mixed $definition)</p> <p>Allows to register a shared service using the array syntax</p> <pre><code>&lt;?php\n\n$di[\"request\"] = new \\Phalcon\\Http\\Request();\n</code></pre> <p>public  offsetGet (mixed $name)</p> <p>Allows to obtain a shared service using the array syntax</p> <pre><code>&lt;?php\n\nvar_dump($di[\"request\"]);\n</code></pre> <p>public  offsetUnset (mixed $name)</p> <p>Removes a service from the services container using the array syntax</p> <p>public  __call (mixed $method, [mixed $arguments])</p> <p>Magic method to get or set services using setters/getters</p> <p>public  register (Phalcon\\Di\\ServiceProviderInterface $provider)</p> <p>Registers a service provider.</p> <pre><code>&lt;?php\n\nuse Phalcon\\DiInterface;\nuse Phalcon\\Di\\ServiceProviderInterface;\n\nclass SomeServiceProvider implements ServiceProviderInterface\n{\n    public function register(DiInterface $di)\n    {\n        $di-&gt;setShared('service', function () {\n            // ...\n        });\n    }\n}\n</code></pre> <p>public static  setDefault (Phalcon\\DiInterface $dependencyInjector)</p> <p>Set a default dependency injection container to be obtained into static methods</p> <p>public static  getDefault ()</p> <p>Return the latest DI created</p> <p>public static  reset ()</p> <p>Resets the internal default DI</p> <p>public  loadFromYaml (mixed $filePath, [array $callbacks])</p> <p>Loads services from a yaml file.</p> <p><pre><code>&lt;?php\n\n$di-&gt;loadFromYaml(\n    \"path/services.yaml\",\n    [\n        \"!approot\" =&gt; function ($value) {\n            return dirname(__DIR__) . $value;\n        }\n    ]\n);\n</code></pre> And the services can be specified in the file as:</p> <pre><code>&lt;?php\n\nmyComponent:\n    className: \\Acme\\Components\\MyComponent\n    shared: true\n\ngroup:\n    className: \\Acme\\Group\n    arguments:\n        - type: service\n          name: myComponent\n\nuser:\n   className: \\Acme\\User\n</code></pre> <p>public  loadFromPhp (mixed $filePath)</p> <p>Loads services from a php config file.</p> <p><pre><code>&lt;?php\n\n$di-&gt;loadFromPhp(\"path/services.php\");\n</code></pre> And the services can be specified in the file as:</p> <pre><code>&lt;?php\n\nreturn [\n     'myComponent' =&gt; [\n         'className' =&gt; '\\Acme\\Components\\MyComponent',\n         'shared' =&gt; true,\n     ],\n     'group' =&gt; [\n         'className' =&gt; '\\Acme\\Group',\n         'arguments' =&gt; [\n             [\n                 'type' =&gt; 'service',\n                 'service' =&gt; 'myComponent',\n             ],\n         ],\n     ],\n     'user' =&gt; [\n         'className' =&gt; '\\Acme\\User',\n     ],\n];\n</code></pre> <p>protected  loadFromConfig (Phalcon\\Config $config)</p> <p>Loads services from a Config object.</p>"},{"location":"api/Phalcon_Di/#class-phalcondiexception","title":"Class Phalcon\\Di\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Di/#methods_1","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Di/#class-phalcondifactorydefault","title":"Class Phalcon\\Di\\FactoryDefault","text":"<p>extends class Phalcon\\Di</p> <p>implements ArrayAccess, Phalcon\\DiInterface</p> <p>Source on GitHub</p> <p>This is a variant of the standard Phalcon\\Di. By default it automatically registers all the services provided by the framework. Thanks to this, the developer does not need to register each service individually providing a full stack framework</p>"},{"location":"api/Phalcon_Di/#methods_2","title":"Methods","text":"<p>public  __construct ()</p> <p>Phalcon\\Di\\FactoryDefault constructor</p> <p>public  setInternalEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Di</p> <p>Sets the internal event manager</p> <p>public  getInternalEventsManager () inherited from Phalcon\\Di</p> <p>Returns the internal event manager</p> <p>public  set (mixed $name, mixed $definition, [mixed $shared]) inherited from Phalcon\\Di</p> <p>Registers a service in the services container</p> <p>public  setShared (mixed $name, mixed $definition) inherited from Phalcon\\Di</p> <p>Registers an \"always shared\" service in the services container</p> <p>public  remove (mixed $name) inherited from Phalcon\\Di</p> <p>Removes a service in the services container It also removes any shared instance created for the service</p> <p>public  attempt (mixed $name, mixed $definition, [mixed $shared]) inherited from Phalcon\\Di</p> <p>Attempts to register a service in the services container Only is successful if a service hasn't been registered previously with the same name</p> <p>public  setRaw (mixed $name, Phalcon\\Di\\ServiceInterface $rawDefinition) inherited from Phalcon\\Di</p> <p>Sets a service using a raw Phalcon\\Di\\Service definition</p> <p>public  getRaw (mixed $name) inherited from Phalcon\\Di</p> <p>Returns a service definition without resolving</p> <p>public  getService (mixed $name) inherited from Phalcon\\Di</p> <p>Returns a Phalcon\\Di\\Service instance</p> <p>public  get (mixed $name, [mixed $parameters]) inherited from Phalcon\\Di</p> <p>Resolves the service based on its configuration</p> <p>public mixed getShared (string $name, [array $parameters]) inherited from Phalcon\\Di</p> <p>Resolves a service, the resolved service is stored in the DI, subsequent requests for this service will return the same instance</p> <p>public  has (mixed $name) inherited from Phalcon\\Di</p> <p>Check whether the DI contains a service by a name</p> <p>public  wasFreshInstance () inherited from Phalcon\\Di</p> <p>Check whether the last service obtained via getShared produced a fresh instance or an existing one</p> <p>public  getServices () inherited from Phalcon\\Di</p> <p>Return the services registered in the DI</p> <p>public  offsetExists (mixed $name) inherited from Phalcon\\Di</p> <p>Check if a service is registered using the array syntax</p> <p>public  offsetSet (mixed $name, mixed $definition) inherited from Phalcon\\Di</p> <p>Allows to register a shared service using the array syntax</p> <pre><code>&lt;?php\n\n$di[\"request\"] = new \\Phalcon\\Http\\Request();\n</code></pre> <p>public  offsetGet (mixed $name) inherited from Phalcon\\Di</p> <p>Allows to obtain a shared service using the array syntax</p> <pre><code>&lt;?php\n\nvar_dump($di[\"request\"]);\n</code></pre> <p>public  offsetUnset (mixed $name) inherited from Phalcon\\Di</p> <p>Removes a service from the services container using the array syntax</p> <p>public  __call (mixed $method, [mixed $arguments]) inherited from Phalcon\\Di</p> <p>Magic method to get or set services using setters/getters</p> <p>public  register (Phalcon\\Di\\ServiceProviderInterface $provider) inherited from Phalcon\\Di</p> <p>Registers a service provider.</p> <pre><code>&lt;?php\n\nuse Phalcon\\DiInterface;\nuse Phalcon\\Di\\ServiceProviderInterface;\n\nclass SomeServiceProvider implements ServiceProviderInterface\n{\n    public function register(DiInterface $di)\n    {\n        $di-&gt;setShared('service', function () {\n            // ...\n        });\n    }\n}\n</code></pre> <p>public static  setDefault (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Di</p> <p>Set a default dependency injection container to be obtained into static methods</p> <p>public static  getDefault () inherited from Phalcon\\Di</p> <p>Return the latest DI created</p> <p>public static  reset () inherited from Phalcon\\Di</p> <p>Resets the internal default DI</p> <p>public  loadFromYaml (mixed $filePath, [array $callbacks]) inherited from Phalcon\\Di</p> <p>Loads services from a yaml file.</p> <p><pre><code>&lt;?php\n\n$di-&gt;loadFromYaml(\n    \"path/services.yaml\",\n    [\n        \"!approot\" =&gt; function ($value) {\n            return dirname(__DIR__) . $value;\n        }\n    ]\n);\n</code></pre> And the services can be specified in the file as:</p> <pre><code>&lt;?php\n\nmyComponent:\n    className: \\Acme\\Components\\MyComponent\n    shared: true\n\ngroup:\n    className: \\Acme\\Group\n    arguments:\n        - type: service\n          name: myComponent\n\nuser:\n   className: \\Acme\\User\n</code></pre> <p>public  loadFromPhp (mixed $filePath) inherited from Phalcon\\Di</p> <p>Loads services from a php config file.</p> <p><pre><code>&lt;?php\n\n$di-&gt;loadFromPhp(\"path/services.php\");\n</code></pre> And the services can be specified in the file as:</p> <pre><code>&lt;?php\n\nreturn [\n     'myComponent' =&gt; [\n         'className' =&gt; '\\Acme\\Components\\MyComponent',\n         'shared' =&gt; true,\n     ],\n     'group' =&gt; [\n         'className' =&gt; '\\Acme\\Group',\n         'arguments' =&gt; [\n             [\n                 'type' =&gt; 'service',\n                 'service' =&gt; 'myComponent',\n             ],\n         ],\n     ],\n     'user' =&gt; [\n         'className' =&gt; '\\Acme\\User',\n     ],\n];\n</code></pre> <p>protected  loadFromConfig (Phalcon\\Config $config) inherited from Phalcon\\Di</p> <p>Loads services from a Config object.</p>"},{"location":"api/Phalcon_Di/#class-phalcondifactorydefaultcli","title":"Class Phalcon\\Di\\FactoryDefault\\Cli","text":"<p>extends class Phalcon\\Di\\FactoryDefault</p> <p>implements Phalcon\\DiInterface, ArrayAccess</p> <p>Source on GitHub</p> <p>This is a variant of the standard Phalcon\\Di. By default it automatically registers all the services provided by the framework. Thanks to this, the developer does not need to register each service individually. This class is specially suitable for CLI applications</p>"},{"location":"api/Phalcon_Di/#methods_3","title":"Methods","text":"<p>public  __construct ()</p> <p>Phalcon\\Di\\FactoryDefault\\Cli constructor</p> <p>public  setInternalEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Di</p> <p>Sets the internal event manager</p> <p>public  getInternalEventsManager () inherited from Phalcon\\Di</p> <p>Returns the internal event manager</p> <p>public  set (mixed $name, mixed $definition, [mixed $shared]) inherited from Phalcon\\Di</p> <p>Registers a service in the services container</p> <p>public  setShared (mixed $name, mixed $definition) inherited from Phalcon\\Di</p> <p>Registers an \"always shared\" service in the services container</p> <p>public  remove (mixed $name) inherited from Phalcon\\Di</p> <p>Removes a service in the services container It also removes any shared instance created for the service</p> <p>public  attempt (mixed $name, mixed $definition, [mixed $shared]) inherited from Phalcon\\Di</p> <p>Attempts to register a service in the services container Only is successful if a service hasn't been registered previously with the same name</p> <p>public  setRaw (mixed $name, Phalcon\\Di\\ServiceInterface $rawDefinition) inherited from Phalcon\\Di</p> <p>Sets a service using a raw Phalcon\\Di\\Service definition</p> <p>public  getRaw (mixed $name) inherited from Phalcon\\Di</p> <p>Returns a service definition without resolving</p> <p>public  getService (mixed $name) inherited from Phalcon\\Di</p> <p>Returns a Phalcon\\Di\\Service instance</p> <p>public  get (mixed $name, [mixed $parameters]) inherited from Phalcon\\Di</p> <p>Resolves the service based on its configuration</p> <p>public mixed getShared (string $name, [array $parameters]) inherited from Phalcon\\Di</p> <p>Resolves a service, the resolved service is stored in the DI, subsequent requests for this service will return the same instance</p> <p>public  has (mixed $name) inherited from Phalcon\\Di</p> <p>Check whether the DI contains a service by a name</p> <p>public  wasFreshInstance () inherited from Phalcon\\Di</p> <p>Check whether the last service obtained via getShared produced a fresh instance or an existing one</p> <p>public  getServices () inherited from Phalcon\\Di</p> <p>Return the services registered in the DI</p> <p>public  offsetExists (mixed $name) inherited from Phalcon\\Di</p> <p>Check if a service is registered using the array syntax</p> <p>public  offsetSet (mixed $name, mixed $definition) inherited from Phalcon\\Di</p> <p>Allows to register a shared service using the array syntax</p> <pre><code>&lt;?php\n\n$di[\"request\"] = new \\Phalcon\\Http\\Request();\n</code></pre> <p>public  offsetGet (mixed $name) inherited from Phalcon\\Di</p> <p>Allows to obtain a shared service using the array syntax</p> <pre><code>&lt;?php\n\nvar_dump($di[\"request\"]);\n</code></pre> <p>public  offsetUnset (mixed $name) inherited from Phalcon\\Di</p> <p>Removes a service from the services container using the array syntax</p> <p>public  __call (mixed $method, [mixed $arguments]) inherited from Phalcon\\Di</p> <p>Magic method to get or set services using setters/getters</p> <p>public  register (Phalcon\\Di\\ServiceProviderInterface $provider) inherited from Phalcon\\Di</p> <p>Registers a service provider.</p> <pre><code>&lt;?php\n\nuse Phalcon\\DiInterface;\nuse Phalcon\\Di\\ServiceProviderInterface;\n\nclass SomeServiceProvider implements ServiceProviderInterface\n{\n    public function register(DiInterface $di)\n    {\n        $di-&gt;setShared('service', function () {\n            // ...\n        });\n    }\n}\n</code></pre> <p>public static  setDefault (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Di</p> <p>Set a default dependency injection container to be obtained into static methods</p> <p>public static  getDefault () inherited from Phalcon\\Di</p> <p>Return the latest DI created</p> <p>public static  reset () inherited from Phalcon\\Di</p> <p>Resets the internal default DI</p> <p>public  loadFromYaml (mixed $filePath, [array $callbacks]) inherited from Phalcon\\Di</p> <p>Loads services from a yaml file.</p> <p><pre><code>&lt;?php\n\n$di-&gt;loadFromYaml(\n    \"path/services.yaml\",\n    [\n        \"!approot\" =&gt; function ($value) {\n            return dirname(__DIR__) . $value;\n        }\n    ]\n);\n</code></pre> And the services can be specified in the file as:</p> <pre><code>&lt;?php\n\nmyComponent:\n    className: \\Acme\\Components\\MyComponent\n    shared: true\n\ngroup:\n    className: \\Acme\\Group\n    arguments:\n        - type: service\n          name: myComponent\n\nuser:\n   className: \\Acme\\User\n</code></pre> <p>public  loadFromPhp (mixed $filePath) inherited from Phalcon\\Di</p> <p>Loads services from a php config file.</p> <p><pre><code>&lt;?php\n\n$di-&gt;loadFromPhp(\"path/services.php\");\n</code></pre> And the services can be specified in the file as:</p> <pre><code>&lt;?php\n\nreturn [\n     'myComponent' =&gt; [\n         'className' =&gt; '\\Acme\\Components\\MyComponent',\n         'shared' =&gt; true,\n     ],\n     'group' =&gt; [\n         'className' =&gt; '\\Acme\\Group',\n         'arguments' =&gt; [\n             [\n                 'type' =&gt; 'service',\n                 'service' =&gt; 'myComponent',\n             ],\n         ],\n     ],\n     'user' =&gt; [\n         'className' =&gt; '\\Acme\\User',\n     ],\n];\n</code></pre> <p>protected  loadFromConfig (Phalcon\\Config $config) inherited from Phalcon\\Di</p> <p>Loads services from a Config object.</p>"},{"location":"api/Phalcon_Di/#abstract-class-phalcondiinjectable","title":"Abstract class Phalcon\\Di\\Injectable","text":"<p>implements Phalcon\\Di\\InjectionAwareInterface, Phalcon\\Events\\EventsAwareInterface</p> <p>Source on GitHub</p> <p>This class allows to access services in the services container by just only accessing a public property with the same name of a registered service</p>"},{"location":"api/Phalcon_Di/#methods_4","title":"Methods","text":"<p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the dependency injector</p> <p>public  getDI ()</p> <p>Returns the internal dependency injector</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager)</p> <p>Sets the event manager</p> <p>public  getEventsManager ()</p> <p>Returns the internal event manager</p> <p>public  __get (string $propertyName)</p> <p>Magic method __get to easily get access to services through the name of them</p>"},{"location":"api/Phalcon_Di/#interface-phalcondiinjectionawareinterface","title":"Interface Phalcon\\Di\\InjectionAwareInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Di/#methods_5","title":"Methods","text":"<p>abstract public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>...</p> <p>abstract public  getDI ()</p> <p>...</p>"},{"location":"api/Phalcon_Di/#class-phalcondiservice","title":"Class Phalcon\\Di\\Service","text":"<p>implements Phalcon\\Di\\ServiceInterface</p> <p>Source on GitHub</p> <p>Represents individually a service in the services container</p> <pre><code>&lt;?php\n\n$service = new \\Phalcon\\Di\\Service(\n    \"request\",\n    \"Phalcon\\Http\\Request\"\n);\n\n$request = service-&gt;resolve();\n</code></pre>"},{"location":"api/Phalcon_Di/#methods_6","title":"Methods","text":"<p>final public  __construct (string $name, mixed $definition, [boolean $shared])</p> <p>public  getName ()</p> <p>Returns the service's name</p> <p>public  setShared (mixed $shared)</p> <p>Sets if the service is shared or not</p> <p>public  isShared ()</p> <p>Check whether the service is shared or not</p> <p>public  setSharedInstance (mixed $sharedInstance)</p> <p>Sets/Resets the shared instance related to the service</p> <p>public  setDefinition (mixed $definition)</p> <p>Set the service definition</p> <p>public mixed getDefinition ()</p> <p>Returns the service definition</p> <p>public mixed resolve ([array $parameters], [Phalcon\\DiInterface $dependencyInjector])</p> <p>Resolves the service</p> <p>public  setParameter (mixed $position, array $parameter)</p> <p>Changes a parameter in the definition without resolve the service</p> <p>public array getParameter (int $position)</p> <p>Returns a parameter in a specific position</p> <p>public  isResolved ()</p> <p>Returns true if the service was resolved</p> <p>public static  __set_state (array $attributes)</p> <p>Restore the internal state of a service</p>"},{"location":"api/Phalcon_Di/#class-phalcondiservicebuilder","title":"Class Phalcon\\Di\\Service\\Builder","text":"<p>Source on GitHub</p> <p>This class builds instances based on complex definitions</p>"},{"location":"api/Phalcon_Di/#methods_7","title":"Methods","text":"<p>private mixed _buildParameter (Phalcon\\DiInterface $dependencyInjector, int $position, array $argument)</p> <p>Resolves a constructor/call parameter</p> <p>private  _buildParameters (Phalcon\\DiInterface $dependencyInjector, array $arguments)</p> <p>Resolves an array of parameters</p> <p>public mixed build (Phalcon\\DiInterface $dependencyInjector, array $definition, [array $parameters])</p> <p>Builds a service using a complex service definition</p>"},{"location":"api/Phalcon_Di/#interface-phalcondiserviceinterface","title":"Interface Phalcon\\Di\\ServiceInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Di/#methods_8","title":"Methods","text":"<p>abstract public  getName ()</p> <p>...</p> <p>abstract public  setShared (mixed $shared)</p> <p>...</p> <p>abstract public  isShared ()</p> <p>...</p> <p>abstract public  setDefinition (mixed $definition)</p> <p>...</p> <p>abstract public  getDefinition ()</p> <p>...</p> <p>abstract public  resolve ([mixed $parameters], [Phalcon\\DiInterface $dependencyInjector])</p> <p>...</p> <p>abstract public  setParameter (mixed $position, array $parameter)</p> <p>...</p> <p>abstract public static  __set_state (array $attributes)</p> <p>...</p>"},{"location":"api/Phalcon_Di/#interface-phalcondiserviceproviderinterface","title":"Interface Phalcon\\Di\\ServiceProviderInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Di/#methods_9","title":"Methods","text":"<p>abstract public  register (Phalcon\\DiInterface $di)</p> <p>...</p>"},{"location":"api/Phalcon_Di/#interface-phalcondiinterface","title":"Interface Phalcon\\DiInterface","text":"<p>implements ArrayAccess</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Di/#methods_10","title":"Methods","text":"<p>abstract public  set (mixed $name, mixed $definition, [mixed $shared])</p> <p>...</p> <p>abstract public  setShared (mixed $name, mixed $definition)</p> <p>...</p> <p>abstract public  remove (mixed $name)</p> <p>...</p> <p>abstract public  attempt (mixed $name, mixed $definition, [mixed $shared])</p> <p>...</p> <p>abstract public  get (mixed $name, [mixed $parameters])</p> <p>...</p> <p>abstract public  getShared (mixed $name, [mixed $parameters])</p> <p>...</p> <p>abstract public  setRaw (mixed $name, Phalcon\\Di\\ServiceInterface $rawDefinition)</p> <p>...</p> <p>abstract public  getRaw (mixed $name)</p> <p>...</p> <p>abstract public  getService (mixed $name)</p> <p>...</p> <p>abstract public  has (mixed $name)</p> <p>...</p> <p>abstract public  wasFreshInstance ()</p> <p>...</p> <p>abstract public  getServices ()</p> <p>...</p> <p>abstract public static  setDefault (Phalcon\\DiInterface $dependencyInjector)</p> <p>...</p> <p>abstract public static  getDefault ()</p> <p>...</p> <p>abstract public static  reset ()</p> <p>...</p> <p>abstract public  offsetExists (mixed $offset) inherited from ArrayAccess</p> <p>...</p> <p>abstract public  offsetGet (mixed $offset) inherited from ArrayAccess</p> <p>...</p> <p>abstract public  offsetSet (mixed $offset, mixed $value) inherited from ArrayAccess</p> <p>...</p> <p>abstract public  offsetUnset (mixed $offset) inherited from ArrayAccess</p> <p>...</p>"},{"location":"api/Phalcon_Dispatcher/","title":"Abstract class Phalcon\\Dispatcher","text":"<p>implements Phalcon\\DispatcherInterface, Phalcon\\Di\\InjectionAwareInterface, Phalcon\\Events\\EventsAwareInterface</p> <p>Source on GitHub</p> <p>This is the base class for Phalcon\\Mvc\\Dispatcher and Phalcon\\Cli\\Dispatcher. This class can't be instantiated directly, you can use it to create your own dispatchers.</p>"},{"location":"api/Phalcon_Dispatcher/#constants","title":"Constants","text":"<p>integer EXCEPTION_NO_DI</p> <p>integer EXCEPTION_CYCLIC_ROUTING</p> <p>integer EXCEPTION_HANDLER_NOT_FOUND</p> <p>integer EXCEPTION_INVALID_HANDLER</p> <p>integer EXCEPTION_INVALID_PARAMS</p> <p>integer EXCEPTION_ACTION_NOT_FOUND</p>"},{"location":"api/Phalcon_Dispatcher/#methods","title":"Methods","text":"<p>public setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the dependency injector</p> <p>public getDI ()</p> <p>Returns the internal dependency injector</p> <p>public setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager)</p> <p>Sets the events manager</p> <p>public getEventsManager ()</p> <p>Returns the internal event manager</p> <p>public setActionSuffix (mixed $actionSuffix)</p> <p>Sets the default action suffix</p> <p>public getActionSuffix ()</p> <p>Gets the default action suffix</p> <p>public setModuleName (mixed $moduleName)</p> <p>Sets the module where the controller is (only informative)</p> <p>public getModuleName ()</p> <p>Gets the module where the controller class is</p> <p>public setNamespaceName (mixed $namespaceName)</p> <p>Sets the namespace where the controller class is</p> <p>public getNamespaceName ()</p> <p>Gets a namespace to be prepended to the current handler name</p> <p>public setDefaultNamespace (mixed $namespaceName)</p> <p>Sets the default namespace</p> <p>public getDefaultNamespace ()</p> <p>Returns the default namespace</p> <p>public setDefaultAction (mixed $actionName)</p> <p>Sets the default action name</p> <p>public setActionName (mixed $actionName)</p> <p>Sets the action name to be dispatched</p> <p>public getActionName ()</p> <p>Gets the latest dispatched action name</p> <p>public setParams (array $params)</p> <p>Sets action params to be dispatched</p> <p>public getParams ()</p> <p>Gets action params</p> <p>public setParam (mixed $param, mixed $value)</p> <p>Set a param by its name or numeric index</p> <p>public mixed getParam (mixed $param, [string | array $filters], [mixed $defaultValue])</p> <p>Gets a param by its name or numeric index</p> <p>public boolean hasParam (mixed $param)</p> <p>Check if a param exists</p> <p>public getActiveMethod ()</p> <p>Returns the current method to be/executed in the dispatcher</p> <p>public isFinished ()</p> <p>Checks if the dispatch loop is finished or has more pendent controllers/tasks to dispatch</p> <p>public setReturnedValue (mixed $value)</p> <p>Sets the latest returned value by an action manually</p> <p>public mixed getReturnedValue ()</p> <p>Returns value returned by the latest dispatched action</p> <p>public setModelBinding (mixed $value, [mixed $cache])</p> <p>Enable/Disable model binding during dispatch</p> <pre><code>&lt;?php\n\n$di-&gt;set('dispatcher', function() {\n    $dispatcher = new Dispatcher();\n\n    $dispatcher-&gt;setModelBinding(true, 'cache');\n    return $dispatcher;\n});\n</code></pre> <p>public setModelBinder (Phalcon\\Mvc\\Model\\BinderInterface $modelBinder, [mixed $cache])</p> <p>Enable model binding during dispatch</p> <pre><code>&lt;?php\n\n$di-&gt;set('dispatcher', function() {\n    $dispatcher = new Dispatcher();\n\n    $dispatcher-&gt;setModelBinder(new Binder(), 'cache');\n    return $dispatcher;\n});\n</code></pre> <p>public getModelBinder ()</p> <p>Gets model binder</p> <p>public object dispatch ()</p> <p>Dispatches a handle action taking into account the routing parameters</p> <p>protected object _dispatch ()</p> <p>Dispatches a handle action taking into account the routing parameters</p> <p>public forward (array $forward)</p> <p>Forwards the execution flow to another controller/action.</p> <pre><code>&lt;?php\n\n$this-&gt;dispatcher-&gt;forward(\n    [\n        \"controller\" =&gt; \"posts\",\n        \"action\"     =&gt; \"index\",\n    ]\n);\n</code></pre> <p>public wasForwarded ()</p> <p>Check if the current executed action was forwarded by another one</p> <p>public getHandlerClass ()</p> <p>Possible class name that will be located to dispatch the request</p> <p>public callActionMethod (mixed $handler, mixed $actionMethod, [array $params])</p> <p>...</p> <p>public getBoundModels ()</p> <p>Returns bound models from binder instance</p> <pre><code>&lt;?php\n\nclass UserController extends Controller\n{\n    public function showAction(User $user)\n    {\n        $boundModels = $this-&gt;dispatcher-&gt;getBoundModels(); // return array with $user\n    }\n}\n</code></pre> <p>protected _resolveEmptyProperties ()</p> <p>Set empty properties to their defaults (where defaults are available)</p>"},{"location":"api/Phalcon_Dispatcher/#interface-phalcondispatcherinterface","title":"Interface Phalcon\\DispatcherInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Dispatcher/#methods_1","title":"Methods","text":"<p>abstract public setActionSuffix (mixed $actionSuffix)</p> <p>...</p> <p>abstract public getActionSuffix ()</p> <p>...</p> <p>abstract public setDefaultNamespace (mixed $defaultNamespace)</p> <p>...</p> <p>abstract public setDefaultAction (mixed $actionName)</p> <p>...</p> <p>abstract public setNamespaceName (mixed $namespaceName)</p> <p>...</p> <p>abstract public setModuleName (mixed $moduleName)</p> <p>...</p> <p>abstract public setActionName (mixed $actionName)</p> <p>...</p> <p>abstract public getActionName ()</p> <p>...</p> <p>abstract public setParams (mixed $params)</p> <p>...</p> <p>abstract public getParams ()</p> <p>...</p> <p>abstract public setParam (mixed $param, mixed $value)</p> <p>...</p> <p>abstract public getParam (mixed $param, [mixed $filters])</p> <p>...</p> <p>abstract public hasParam (mixed $param)</p> <p>...</p> <p>abstract public isFinished ()</p> <p>...</p> <p>abstract public getReturnedValue ()</p> <p>...</p> <p>abstract public dispatch ()</p> <p>...</p> <p>abstract public forward (mixed $forward)</p> <p>...</p>"},{"location":"api/Phalcon_Escaper/","title":"Class Phalcon\\Escaper","text":"<p>implements Phalcon\\EscaperInterface</p> <p>Source on GitHub</p> <p>Escapes different kinds of text securing them. By using this component you may prevent XSS attacks.</p> <p>This component only works with UTF-8. The PREG extension needs to be compiled with UTF-8 support.</p> <pre><code>&lt;?php\n\n$escaper = new \\Phalcon\\Escaper();\n\n$escaped = $escaper-&gt;escapeCss(\"font-family: &lt;Verdana&gt;\");\n\necho $escaped; // font\\2D family\\3A \\20 \\3C Verdana\\3E\n</code></pre>"},{"location":"api/Phalcon_Escaper/#methods","title":"Methods","text":"<p>public  setEncoding (mixed $encoding)</p> <p>Sets the encoding to be used by the escaper</p> <pre><code>&lt;?php\n\n$escaper-&gt;setEncoding(\"utf-8\");\n</code></pre> <p>public  getEncoding ()</p> <p>Returns the internal encoding used by the escaper</p> <p>public  setHtmlQuoteType (mixed $quoteType)</p> <p>Sets the HTML quoting type for htmlspecialchars</p> <pre><code>&lt;?php\n\n$escaper-&gt;setHtmlQuoteType(ENT_XHTML);\n</code></pre> <p>public  setDoubleEncode (mixed $doubleEncode)</p> <p>Sets the double_encode to be used by the escaper</p> <pre><code>&lt;?php\n\n$escaper-&gt;setDoubleEncode(false);\n</code></pre> <p>final public  detectEncoding (mixed $str)</p> <p>Detect the character encoding of a string to be handled by an encoder Special-handling for chr(172) and chr(128) to chr(159) which fail to be detected by mb_detect_encoding()</p> <p>final public  normalizeEncoding (mixed $str)</p> <p>Utility to normalize a string's encoding to UTF-32.</p> <p>public  escapeHtml (mixed $text)</p> <p>Escapes a HTML string. Internally uses htmlspecialchars</p> <p>public  escapeHtmlAttr (mixed $attribute)</p> <p>Escapes a HTML attribute string</p> <p>public  escapeCss (mixed $css)</p> <p>Escape CSS strings by replacing non-alphanumeric chars by their hexadecimal escaped representation</p> <p>public  escapeJs (mixed $js)</p> <p>Escape javascript strings by replacing non-alphanumeric chars by their hexadecimal escaped representation</p> <p>public  escapeUrl (mixed $url)</p> <p>Escapes a URL. Internally uses rawurlencode</p>"},{"location":"api/Phalcon_Escaper/#class-phalconescaperexception","title":"Class Phalcon\\Escaper\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Escaper/#methods_1","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Escaper/#interface-phalconescaperinterface","title":"Interface Phalcon\\EscaperInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Escaper/#methods_2","title":"Methods","text":"<p>abstract public  setEncoding (mixed $encoding)</p> <p>...</p> <p>abstract public  getEncoding ()</p> <p>...</p> <p>abstract public  setHtmlQuoteType (mixed $quoteType)</p> <p>...</p> <p>abstract public  escapeHtml (mixed $text)</p> <p>...</p> <p>abstract public  escapeHtmlAttr (mixed $text)</p> <p>...</p> <p>abstract public  escapeCss (mixed $css)</p> <p>...</p> <p>abstract public  escapeJs (mixed $js)</p> <p>...</p> <p>abstract public  escapeUrl (mixed $url)</p> <p>...</p>"},{"location":"api/Phalcon_Events/","title":"Class Phalcon\\Events\\Event","text":"<p>implements Phalcon\\Events\\EventInterface</p> <p>Source on GitHub</p> <p>This class offers contextual information of a fired event in the EventsManager</p>"},{"location":"api/Phalcon_Events/#methods","title":"Methods","text":"<p>public  getType ()</p> <p>Event type</p> <p>public  getSource ()</p> <p>Event source</p> <p>public  getData ()</p> <p>Event data</p> <p>public  __construct (string $type, object $source, [mixed $data], [boolean $cancelable])</p> <p>Phalcon\\Events\\Event constructor</p> <p>public  setData ([mixed $data])</p> <p>Sets event data.</p> <p>public  setType (mixed $type)</p> <p>Sets event type.</p> <p>public  stop ()</p> <p>Stops the event preventing propagation.</p> <pre><code>&lt;?php\n\nif ($event-&gt;isCancelable()) {\n    $event-&gt;stop();\n}\n</code></pre> <p>public  isStopped ()</p> <p>Check whether the event is currently stopped.</p> <p>public  isCancelable ()</p> <p>Check whether the event is cancelable.</p> <pre><code>&lt;?php\n\nif ($event-&gt;isCancelable()) {\n    $event-&gt;stop();\n}\n</code></pre>"},{"location":"api/Phalcon_Events/#interface-phalconeventseventinterface","title":"Interface Phalcon\\Events\\EventInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Events/#methods_1","title":"Methods","text":"<p>abstract public  getData ()</p> <p>...</p> <p>abstract public  setData ([mixed $data])</p> <p>...</p> <p>abstract public  getType ()</p> <p>...</p> <p>abstract public  setType (mixed $type)</p> <p>...</p> <p>abstract public  stop ()</p> <p>...</p> <p>abstract public  isStopped ()</p> <p>...</p> <p>abstract public  isCancelable ()</p> <p>...</p>"},{"location":"api/Phalcon_Events/#interface-phalconeventseventsawareinterface","title":"Interface Phalcon\\Events\\EventsAwareInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Events/#methods_2","title":"Methods","text":"<p>abstract public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager)</p> <p>...</p> <p>abstract public  getEventsManager ()</p> <p>...</p>"},{"location":"api/Phalcon_Events/#class-phalconeventsexception","title":"Class Phalcon\\Events\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Events/#methods_3","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Events/#class-phalconeventsmanager","title":"Class Phalcon\\Events\\Manager","text":"<p>implements Phalcon\\Events\\ManagerInterface</p> <p>Source on GitHub</p> <p>Phalcon Events Manager, offers an easy way to intercept and manipulate, if needed, the normal flow of operation. With the EventsManager the developer can create hooks or plugins that will offer monitoring of data, manipulation, conditional execution and much more.</p>"},{"location":"api/Phalcon_Events/#methods_4","title":"Methods","text":"<p>public  attach (string $eventType, object | callable $handler, [int $priority])</p> <p>Attach a listener to the events manager</p> <p>public  detach (string $eventType, object $handler)</p> <p>Detach the listener from the events manager</p> <p>public  enablePriorities (mixed $enablePriorities)</p> <p>Set if priorities are enabled in the EventsManager</p> <p>public  arePrioritiesEnabled ()</p> <p>Returns if priorities are enabled</p> <p>public  collectResponses (mixed $collect)</p> <p>Tells the event manager if it needs to collect all the responses returned by every registered listener in a single fire</p> <p>public  isCollecting ()</p> <p>Check if the events manager is collecting all all the responses returned by every registered listener in a single fire</p> <p>public array getResponses ()</p> <p>Returns all the responses returned by every handler executed by the last 'fire' executed</p> <p>public  detachAll ([mixed $type])</p> <p>Removes all events from the EventsManager</p> <p>final public mixed fireQueue (SplPriorityQueue | array $queue, Phalcon\\Events\\Event $event)</p> <p>Internal handler to call a queue of events</p> <p>public mixed fire (string $eventType, object $source, [mixed $data], [boolean $cancelable])</p> <p>Fires an event in the events manager causing the active listeners to be notified about it</p> <pre><code>&lt;?php\n\n$eventsManager-&gt;fire(\"db\", $connection);\n</code></pre> <p>public  hasListeners (mixed $type)</p> <p>Check whether certain type of event has listeners</p> <p>public array getListeners (string $type)</p> <p>Returns all the attached listeners of a certain type</p>"},{"location":"api/Phalcon_Events/#interface-phalconeventsmanagerinterface","title":"Interface Phalcon\\Events\\ManagerInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Events/#methods_5","title":"Methods","text":"<p>abstract public  attach (mixed $eventType, mixed $handler)</p> <p>...</p> <p>abstract public  detach (mixed $eventType, mixed $handler)</p> <p>...</p> <p>abstract public  detachAll ([mixed $type])</p> <p>...</p> <p>abstract public  fire (mixed $eventType, mixed $source, [mixed $data])</p> <p>...</p> <p>abstract public  getListeners (mixed $type)</p> <p>...</p>"},{"location":"api/Phalcon_Exception/","title":"Class Phalcon\\Exception","text":"<p>extends class Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Exception/#methods","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Factory/","title":"Abstract class Phalcon\\Factory","text":"<p>implements Phalcon\\FactoryInterface</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Factory/#methods","title":"Methods","text":"<p>protected static  loadClass (mixed $namespace, mixed $config)</p> <p>...</p> <p>abstract public static  load (mixed $config) inherited from Phalcon\\FactoryInterface</p> <p>...</p>"},{"location":"api/Phalcon_Factory/#class-phalconfactoryexception","title":"Class Phalcon\\Factory\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Factory/#methods_1","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Factory/#interface-phalconfactoryinterface","title":"Interface Phalcon\\FactoryInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Factory/#methods_2","title":"Methods","text":"<p>abstract public static  load (mixed $config)</p> <p>...</p>"},{"location":"api/Phalcon_Filter/","title":"Class Phalcon\\Filter","text":"<p>implements Phalcon\\FilterInterface</p> <p>Source on GitHub</p> <p>The Phalcon\\Filter component provides a set of commonly needed data filters. It provides object oriented wrappers to the php filter extension. Also allows the developer to define his/her own filters</p> <pre><code>&lt;?php\n\n$filter = new \\Phalcon\\Filter();\n\n$filter-&gt;sanitize(\"some(one)@exa\\mple.com\", \"email\"); // returns \"someone@example.com\"\n$filter-&gt;sanitize(\"hello&lt;&lt;\", \"string\"); // returns \"hello\"\n$filter-&gt;sanitize(\"!100a019\", \"int\"); // returns \"100019\"\n$filter-&gt;sanitize(\"!100a019.01a\", \"float\"); // returns \"100019.01\"\n</code></pre>"},{"location":"api/Phalcon_Filter/#constants","title":"Constants","text":"<p>string FILTER_EMAIL</p> <p>string FILTER_ABSINT</p> <p>string FILTER_INT</p> <p>string FILTER_INT_CAST</p> <p>string FILTER_STRING</p> <p>string FILTER_FLOAT</p> <p>string FILTER_FLOAT_CAST</p> <p>string FILTER_ALPHANUM</p> <p>string FILTER_TRIM</p> <p>string FILTER_STRIPTAGS</p> <p>string FILTER_LOWER</p> <p>string FILTER_UPPER</p> <p>string FILTER_URL</p> <p>string FILTER_SPECIAL_CHARS</p>"},{"location":"api/Phalcon_Filter/#methods","title":"Methods","text":"<p>public  add (mixed $name, mixed $handler)</p> <p>Adds a user-defined filter</p> <p>public  sanitize (mixed $value, mixed $filters, [mixed $noRecursive])</p> <p>Sanitizes a value with a specified single or set of filters</p> <p>protected  _sanitize (mixed $value, mixed $filter)</p> <p>Internal sanitize wrapper to filter_var</p> <p>public  getFilters ()</p> <p>Return the user-defined filters in the instance</p>"},{"location":"api/Phalcon_Filter/#class-phalconfilterexception","title":"Class Phalcon\\Filter\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Filter/#methods_1","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Filter/#interface-phalconfilteruserfilterinterface","title":"Interface Phalcon\\Filter\\UserFilterInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Filter/#methods_2","title":"Methods","text":"<p>abstract public  filter (mixed $value)</p> <p>...</p>"},{"location":"api/Phalcon_Filter/#interface-phalconfilterinterface","title":"Interface Phalcon\\FilterInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Filter/#methods_3","title":"Methods","text":"<p>abstract public  add (mixed $name, mixed $handler)</p> <p>...</p> <p>abstract public  sanitize (mixed $value, mixed $filters)</p> <p>...</p> <p>abstract public  getFilters ()</p> <p>...</p>"},{"location":"api/Phalcon_Flash/","title":"Abstract class Phalcon\\Flash","text":"<p>implements Phalcon\\FlashInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>Shows HTML notifications related to different circumstances. Classes can be stylized using CSS</p> <pre><code>&lt;?php\n\n$flash-&gt;success(\"The record was successfully deleted\");\n$flash-&gt;error(\"Cannot open the file\");\n</code></pre>"},{"location":"api/Phalcon_Flash/#methods","title":"Methods","text":"<p>public  __construct ([mixed $cssClasses])</p> <p>Phalcon\\Flash constructor</p> <p>public  getAutoescape ()</p> <p>Returns the autoescape mode in generated html</p> <p>public  setAutoescape (mixed $autoescape)</p> <p>Set the autoescape mode in generated html</p> <p>public  getEscaperService ()</p> <p>Returns the Escaper Service</p> <p>public  setEscaperService (Phalcon\\EscaperInterface $escaperService)</p> <p>Sets the Escaper Service</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the dependency injector</p> <p>public  getDI ()</p> <p>Returns the internal dependency injector</p> <p>public  setImplicitFlush (mixed $implicitFlush)</p> <p>Set whether the output must be implicitly flushed to the output or returned as string</p> <p>public  setAutomaticHtml (mixed $automaticHtml)</p> <p>Set if the output must be implicitly formatted with HTML</p> <p>public  setCssClasses (array $cssClasses)</p> <p>Set an array with CSS classes to format the messages</p> <p>public  error (mixed $message)</p> <p>Shows a HTML error message</p> <pre><code>&lt;?php\n\n$flash-&gt;error(\"This is an error\");\n</code></pre> <p>public  notice (mixed $message)</p> <p>Shows a HTML notice/information message</p> <pre><code>&lt;?php\n\n$flash-&gt;notice(\"This is an information\");\n</code></pre> <p>public  success (mixed $message)</p> <p>Shows a HTML success message</p> <pre><code>&lt;?php\n\n$flash-&gt;success(\"The process was finished successfully\");\n</code></pre> <p>public  warning (mixed $message)</p> <p>Shows a HTML warning message</p> <pre><code>&lt;?php\n\n$flash-&gt;warning(\"Hey, this is important\");\n</code></pre> <p>public string | void outputMessage (mixed $type, string | array $message)</p> <p>Outputs a message formatting it with HTML</p> <pre><code>&lt;?php\n\n$flash-&gt;outputMessage(\"error\", $message);\n</code></pre> <p>public  clear ()</p> <p>Clears accumulated messages when implicit flush is disabled</p> <p>abstract public  message (mixed $type, mixed $message) inherited from Phalcon\\FlashInterface</p> <p>...</p>"},{"location":"api/Phalcon_Flash/#class-phalconflashdirect","title":"Class Phalcon\\Flash\\Direct","text":"<p>extends abstract class Phalcon\\Flash</p> <p>implements Phalcon\\Di\\InjectionAwareInterface, Phalcon\\FlashInterface</p> <p>Source on GitHub</p> <p>This is a variant of the Phalcon\\Flash that immediately outputs any message passed to it</p>"},{"location":"api/Phalcon_Flash/#methods_1","title":"Methods","text":"<p>public  message (mixed $type, mixed $message)</p> <p>Outputs a message</p> <p>public  output ([mixed $remove])</p> <p>Prints the messages accumulated in the flasher</p> <p>public  __construct ([mixed $cssClasses]) inherited from Phalcon\\Flash</p> <p>Phalcon\\Flash constructor</p> <p>public  getAutoescape () inherited from Phalcon\\Flash</p> <p>Returns the autoescape mode in generated html</p> <p>public  setAutoescape (mixed $autoescape) inherited from Phalcon\\Flash</p> <p>Set the autoescape mode in generated html</p> <p>public  getEscaperService () inherited from Phalcon\\Flash</p> <p>Returns the Escaper Service</p> <p>public  setEscaperService (Phalcon\\EscaperInterface $escaperService) inherited from Phalcon\\Flash</p> <p>Sets the Escaper Service</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Flash</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Flash</p> <p>Returns the internal dependency injector</p> <p>public  setImplicitFlush (mixed $implicitFlush) inherited from Phalcon\\Flash</p> <p>Set whether the output must be implicitly flushed to the output or returned as string</p> <p>public  setAutomaticHtml (mixed $automaticHtml) inherited from Phalcon\\Flash</p> <p>Set if the output must be implicitly formatted with HTML</p> <p>public  setCssClasses (array $cssClasses) inherited from Phalcon\\Flash</p> <p>Set an array with CSS classes to format the messages</p> <p>public  error (mixed $message) inherited from Phalcon\\Flash</p> <p>Shows a HTML error message</p> <pre><code>&lt;?php\n\n$flash-&gt;error(\"This is an error\");\n</code></pre> <p>public  notice (mixed $message) inherited from Phalcon\\Flash</p> <p>Shows a HTML notice/information message</p> <pre><code>&lt;?php\n\n$flash-&gt;notice(\"This is an information\");\n</code></pre> <p>public  success (mixed $message) inherited from Phalcon\\Flash</p> <p>Shows a HTML success message</p> <pre><code>&lt;?php\n\n$flash-&gt;success(\"The process was finished successfully\");\n</code></pre> <p>public  warning (mixed $message) inherited from Phalcon\\Flash</p> <p>Shows a HTML warning message</p> <pre><code>&lt;?php\n\n$flash-&gt;warning(\"Hey, this is important\");\n</code></pre> <p>public string | void outputMessage (mixed $type, string | array $message) inherited from Phalcon\\Flash</p> <p>Outputs a message formatting it with HTML</p> <pre><code>&lt;?php\n\n$flash-&gt;outputMessage(\"error\", $message);\n</code></pre> <p>public  clear () inherited from Phalcon\\Flash</p> <p>Clears accumulated messages when implicit flush is disabled</p>"},{"location":"api/Phalcon_Flash/#class-phalconflashexception","title":"Class Phalcon\\Flash\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Flash/#methods_2","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Flash/#class-phalconflashsession","title":"Class Phalcon\\Flash\\Session","text":"<p>extends abstract class Phalcon\\Flash</p> <p>implements Phalcon\\Di\\InjectionAwareInterface, Phalcon\\FlashInterface</p> <p>Source on GitHub</p> <p>Temporarily stores the messages in session, then messages can be printed in the next request</p>"},{"location":"api/Phalcon_Flash/#methods_3","title":"Methods","text":"<p>protected  _getSessionMessages (mixed $remove, [mixed $type])</p> <p>Returns the messages stored in session</p> <p>protected  _setSessionMessages (array $messages)</p> <p>Stores the messages in session</p> <p>public  message (mixed $type, mixed $message)</p> <p>Adds a message to the session flasher</p> <p>public  has ([mixed $type])</p> <p>Checks whether there are messages</p> <p>public  getMessages ([mixed $type], [mixed $remove])</p> <p>Returns the messages in the session flasher</p> <p>public  output ([mixed $remove])</p> <p>Prints the messages in the session flasher</p> <p>public  clear ()</p> <p>Clear messages in the session messenger</p> <p>public  __construct ([mixed $cssClasses]) inherited from Phalcon\\Flash</p> <p>Phalcon\\Flash constructor</p> <p>public  getAutoescape () inherited from Phalcon\\Flash</p> <p>Returns the autoescape mode in generated html</p> <p>public  setAutoescape (mixed $autoescape) inherited from Phalcon\\Flash</p> <p>Set the autoescape mode in generated html</p> <p>public  getEscaperService () inherited from Phalcon\\Flash</p> <p>Returns the Escaper Service</p> <p>public  setEscaperService (Phalcon\\EscaperInterface $escaperService) inherited from Phalcon\\Flash</p> <p>Sets the Escaper Service</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Flash</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Flash</p> <p>Returns the internal dependency injector</p> <p>public  setImplicitFlush (mixed $implicitFlush) inherited from Phalcon\\Flash</p> <p>Set whether the output must be implicitly flushed to the output or returned as string</p> <p>public  setAutomaticHtml (mixed $automaticHtml) inherited from Phalcon\\Flash</p> <p>Set if the output must be implicitly formatted with HTML</p> <p>public  setCssClasses (array $cssClasses) inherited from Phalcon\\Flash</p> <p>Set an array with CSS classes to format the messages</p> <p>public  error (mixed $message) inherited from Phalcon\\Flash</p> <p>Shows a HTML error message</p> <pre><code>&lt;?php\n\n$flash-&gt;error(\"This is an error\");\n</code></pre> <p>public  notice (mixed $message) inherited from Phalcon\\Flash</p> <p>Shows a HTML notice/information message</p> <pre><code>&lt;?php\n\n$flash-&gt;notice(\"This is an information\");\n</code></pre> <p>public  success (mixed $message) inherited from Phalcon\\Flash</p> <p>Shows a HTML success message</p> <pre><code>&lt;?php\n\n$flash-&gt;success(\"The process was finished successfully\");\n</code></pre> <p>public  warning (mixed $message) inherited from Phalcon\\Flash</p> <p>Shows a HTML warning message</p> <pre><code>&lt;?php\n\n$flash-&gt;warning(\"Hey, this is important\");\n</code></pre> <p>public string | void outputMessage (mixed $type, string | array $message) inherited from Phalcon\\Flash</p> <p>Outputs a message formatting it with HTML</p> <pre><code>&lt;?php\n\n$flash-&gt;outputMessage(\"error\", $message);\n</code></pre>"},{"location":"api/Phalcon_Flash/#interface-phalconflashinterface","title":"Interface Phalcon\\FlashInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Flash/#methods_4","title":"Methods","text":"<p>abstract public  error (mixed $message)</p> <p>...</p> <p>abstract public  notice (mixed $message)</p> <p>...</p> <p>abstract public  success (mixed $message)</p> <p>...</p> <p>abstract public  warning (mixed $message)</p> <p>...</p> <p>abstract public  message (mixed $type, mixed $message)</p> <p>...</p>"},{"location":"api/Phalcon_Forms/","title":"Abstract class Phalcon\\Forms\\Element","text":"<p>implements Phalcon\\Forms\\ElementInterface</p> <p>Source on GitHub</p> <p>This is a base class for form elements</p>"},{"location":"api/Phalcon_Forms/#methods","title":"Methods","text":"<p>public  __construct (string $name, [array $attributes])</p> <p>Phalcon\\Forms\\Element constructor</p> <p>public  setForm (Phalcon\\Forms\\Form $form)</p> <p>Sets the parent form to the element</p> <p>public  getForm ()</p> <p>Returns the parent form to the element</p> <p>public  setName (mixed $name)</p> <p>Sets the element name</p> <p>public  getName ()</p> <p>Returns the element name</p> <p>public Phalcon\\Forms\\ElementInterface setFilters (array | string $filters)</p> <p>Sets the element filters</p> <p>public  addFilter (mixed $filter)</p> <p>Adds a filter to current list of filters</p> <p>public mixed getFilters ()</p> <p>Returns the element filters</p> <p>public Phalcon\\Forms\\ElementInterface addValidators (array $validators, [mixed $merge])</p> <p>Adds a group of validators</p> <p>public  addValidator (Phalcon\\Validation\\ValidatorInterface $validator)</p> <p>Adds a validator to the element</p> <p>public  getValidators ()</p> <p>Returns the validators registered for the element</p> <p>public  prepareAttributes ([array $attributes], [mixed $useChecked])</p> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <p>public Phalcon\\Forms\\ElementInterface setAttribute (string $attribute, mixed $value)</p> <p>Sets a default attribute for the element</p> <p>public mixed getAttribute (string $attribute, [mixed $defaultValue])</p> <p>Returns the value of an attribute if present</p> <p>public  setAttributes (array $attributes)</p> <p>Sets default attributes for the element</p> <p>public  getAttributes ()</p> <p>Returns the default attributes for the element</p> <p>public Phalcon\\Forms\\ElementInterface setUserOption (string $option, mixed $value)</p> <p>Sets an option for the element</p> <p>public mixed getUserOption (string $option, [mixed $defaultValue])</p> <p>Returns the value of an option if present</p> <p>public  setUserOptions (array $options)</p> <p>Sets options for the element</p> <p>public  getUserOptions ()</p> <p>Returns the options for the element</p> <p>public  setLabel (mixed $label)</p> <p>Sets the element label</p> <p>public  getLabel ()</p> <p>Returns the element label</p> <p>public  label ([array $attributes])</p> <p>Generate the HTML to label the element</p> <p>public Phalcon\\Forms\\ElementInterface setDefault (mixed $value)</p> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <p>public  getDefault ()</p> <p>Returns the default value assigned to the element</p> <p>public  getValue ()</p> <p>Returns the element value</p> <p>public  getMessages ()</p> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <p>public  hasMessages ()</p> <p>Checks whether there are messages attached to the element</p> <p>public  setMessages (Phalcon\\Validation\\Message\\Group $group)</p> <p>Sets the validation messages related to the element</p> <p>public  appendMessage (Phalcon\\Validation\\MessageInterface $message)</p> <p>Appends a message to the internal message list</p> <p>public  clear ()</p> <p>Clears every element in the form to its default value</p> <p>public  __toString ()</p> <p>Magic method __toString renders the widget without attributes</p> <p>abstract public  render ([mixed $attributes]) inherited from Phalcon\\Forms\\ElementInterface</p> <p>...</p>"},{"location":"api/Phalcon_Forms/#class-phalconformselementcheck","title":"Class Phalcon\\Forms\\Element\\Check","text":"<p>extends abstract class Phalcon\\Forms\\Element</p> <p>implements Phalcon\\Forms\\ElementInterface</p> <p>Source on GitHub</p> <p>Component INPUT[type=check] for forms</p>"},{"location":"api/Phalcon_Forms/#methods_1","title":"Methods","text":"<p>public  render ([array $attributes])</p> <p>Renders the element widget returning html</p> <p>public  __construct (string $name, [array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Phalcon\\Forms\\Element constructor</p> <p>public  setForm (Phalcon\\Forms\\Form $form) inherited from Phalcon\\Forms\\Element</p> <p>Sets the parent form to the element</p> <p>public  getForm () inherited from Phalcon\\Forms\\Element</p> <p>Returns the parent form to the element</p> <p>public  setName (mixed $name) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element name</p> <p>public  getName () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element name</p> <p>public Phalcon\\Forms\\ElementInterface setFilters (array | string $filters) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element filters</p> <p>public  addFilter (mixed $filter) inherited from Phalcon\\Forms\\Element</p> <p>Adds a filter to current list of filters</p> <p>public mixed getFilters () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element filters</p> <p>public Phalcon\\Forms\\ElementInterface addValidators (array $validators, [mixed $merge]) inherited from Phalcon\\Forms\\Element</p> <p>Adds a group of validators</p> <p>public  addValidator (Phalcon\\Validation\\ValidatorInterface $validator) inherited from Phalcon\\Forms\\Element</p> <p>Adds a validator to the element</p> <p>public  getValidators () inherited from Phalcon\\Forms\\Element</p> <p>Returns the validators registered for the element</p> <p>public  prepareAttributes ([array $attributes], [mixed $useChecked]) inherited from Phalcon\\Forms\\Element</p> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <p>public Phalcon\\Forms\\ElementInterface setAttribute (string $attribute, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default attribute for the element</p> <p>public mixed getAttribute (string $attribute, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an attribute if present</p> <p>public  setAttributes (array $attributes) inherited from Phalcon\\Forms\\Element</p> <p>Sets default attributes for the element</p> <p>public  getAttributes () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default attributes for the element</p> <p>public Phalcon\\Forms\\ElementInterface setUserOption (string $option, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets an option for the element</p> <p>public mixed getUserOption (string $option, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an option if present</p> <p>public  setUserOptions (array $options) inherited from Phalcon\\Forms\\Element</p> <p>Sets options for the element</p> <p>public  getUserOptions () inherited from Phalcon\\Forms\\Element</p> <p>Returns the options for the element</p> <p>public  setLabel (mixed $label) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element label</p> <p>public  getLabel () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element label</p> <p>public  label ([array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Generate the HTML to label the element</p> <p>public Phalcon\\Forms\\ElementInterface setDefault (mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <p>public  getDefault () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default value assigned to the element</p> <p>public  getValue () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element value</p> <p>public  getMessages () inherited from Phalcon\\Forms\\Element</p> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <p>public  hasMessages () inherited from Phalcon\\Forms\\Element</p> <p>Checks whether there are messages attached to the element</p> <p>public  setMessages (Phalcon\\Validation\\Message\\Group $group) inherited from Phalcon\\Forms\\Element</p> <p>Sets the validation messages related to the element</p> <p>public  appendMessage (Phalcon\\Validation\\MessageInterface $message) inherited from Phalcon\\Forms\\Element</p> <p>Appends a message to the internal message list</p> <p>public  clear () inherited from Phalcon\\Forms\\Element</p> <p>Clears every element in the form to its default value</p> <p>public  __toString () inherited from Phalcon\\Forms\\Element</p> <p>Magic method __toString renders the widget without attributes</p>"},{"location":"api/Phalcon_Forms/#class-phalconformselementdate","title":"Class Phalcon\\Forms\\Element\\Date","text":"<p>extends abstract class Phalcon\\Forms\\Element</p> <p>implements Phalcon\\Forms\\ElementInterface</p> <p>Source on GitHub</p> <p>Component INPUT[type=date] for forms</p>"},{"location":"api/Phalcon_Forms/#methods_2","title":"Methods","text":"<p>public  render ([array $attributes])</p> <p>Renders the element widget returning html</p> <p>public  __construct (string $name, [array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Phalcon\\Forms\\Element constructor</p> <p>public  setForm (Phalcon\\Forms\\Form $form) inherited from Phalcon\\Forms\\Element</p> <p>Sets the parent form to the element</p> <p>public  getForm () inherited from Phalcon\\Forms\\Element</p> <p>Returns the parent form to the element</p> <p>public  setName (mixed $name) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element name</p> <p>public  getName () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element name</p> <p>public Phalcon\\Forms\\ElementInterface setFilters (array | string $filters) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element filters</p> <p>public  addFilter (mixed $filter) inherited from Phalcon\\Forms\\Element</p> <p>Adds a filter to current list of filters</p> <p>public mixed getFilters () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element filters</p> <p>public Phalcon\\Forms\\ElementInterface addValidators (array $validators, [mixed $merge]) inherited from Phalcon\\Forms\\Element</p> <p>Adds a group of validators</p> <p>public  addValidator (Phalcon\\Validation\\ValidatorInterface $validator) inherited from Phalcon\\Forms\\Element</p> <p>Adds a validator to the element</p> <p>public  getValidators () inherited from Phalcon\\Forms\\Element</p> <p>Returns the validators registered for the element</p> <p>public  prepareAttributes ([array $attributes], [mixed $useChecked]) inherited from Phalcon\\Forms\\Element</p> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <p>public Phalcon\\Forms\\ElementInterface setAttribute (string $attribute, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default attribute for the element</p> <p>public mixed getAttribute (string $attribute, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an attribute if present</p> <p>public  setAttributes (array $attributes) inherited from Phalcon\\Forms\\Element</p> <p>Sets default attributes for the element</p> <p>public  getAttributes () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default attributes for the element</p> <p>public Phalcon\\Forms\\ElementInterface setUserOption (string $option, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets an option for the element</p> <p>public mixed getUserOption (string $option, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an option if present</p> <p>public  setUserOptions (array $options) inherited from Phalcon\\Forms\\Element</p> <p>Sets options for the element</p> <p>public  getUserOptions () inherited from Phalcon\\Forms\\Element</p> <p>Returns the options for the element</p> <p>public  setLabel (mixed $label) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element label</p> <p>public  getLabel () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element label</p> <p>public  label ([array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Generate the HTML to label the element</p> <p>public Phalcon\\Forms\\ElementInterface setDefault (mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <p>public  getDefault () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default value assigned to the element</p> <p>public  getValue () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element value</p> <p>public  getMessages () inherited from Phalcon\\Forms\\Element</p> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <p>public  hasMessages () inherited from Phalcon\\Forms\\Element</p> <p>Checks whether there are messages attached to the element</p> <p>public  setMessages (Phalcon\\Validation\\Message\\Group $group) inherited from Phalcon\\Forms\\Element</p> <p>Sets the validation messages related to the element</p> <p>public  appendMessage (Phalcon\\Validation\\MessageInterface $message) inherited from Phalcon\\Forms\\Element</p> <p>Appends a message to the internal message list</p> <p>public  clear () inherited from Phalcon\\Forms\\Element</p> <p>Clears every element in the form to its default value</p> <p>public  __toString () inherited from Phalcon\\Forms\\Element</p> <p>Magic method __toString renders the widget without attributes</p>"},{"location":"api/Phalcon_Forms/#class-phalconformselementemail","title":"Class Phalcon\\Forms\\Element\\Email","text":"<p>extends abstract class Phalcon\\Forms\\Element</p> <p>implements Phalcon\\Forms\\ElementInterface</p> <p>Source on GitHub</p> <p>Component INPUT[type=email] for forms</p>"},{"location":"api/Phalcon_Forms/#methods_3","title":"Methods","text":"<p>public  render ([array $attributes])</p> <p>Renders the element widget returning html</p> <p>public  __construct (string $name, [array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Phalcon\\Forms\\Element constructor</p> <p>public  setForm (Phalcon\\Forms\\Form $form) inherited from Phalcon\\Forms\\Element</p> <p>Sets the parent form to the element</p> <p>public  getForm () inherited from Phalcon\\Forms\\Element</p> <p>Returns the parent form to the element</p> <p>public  setName (mixed $name) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element name</p> <p>public  getName () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element name</p> <p>public Phalcon\\Forms\\ElementInterface setFilters (array | string $filters) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element filters</p> <p>public  addFilter (mixed $filter) inherited from Phalcon\\Forms\\Element</p> <p>Adds a filter to current list of filters</p> <p>public mixed getFilters () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element filters</p> <p>public Phalcon\\Forms\\ElementInterface addValidators (array $validators, [mixed $merge]) inherited from Phalcon\\Forms\\Element</p> <p>Adds a group of validators</p> <p>public  addValidator (Phalcon\\Validation\\ValidatorInterface $validator) inherited from Phalcon\\Forms\\Element</p> <p>Adds a validator to the element</p> <p>public  getValidators () inherited from Phalcon\\Forms\\Element</p> <p>Returns the validators registered for the element</p> <p>public  prepareAttributes ([array $attributes], [mixed $useChecked]) inherited from Phalcon\\Forms\\Element</p> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <p>public Phalcon\\Forms\\ElementInterface setAttribute (string $attribute, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default attribute for the element</p> <p>public mixed getAttribute (string $attribute, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an attribute if present</p> <p>public  setAttributes (array $attributes) inherited from Phalcon\\Forms\\Element</p> <p>Sets default attributes for the element</p> <p>public  getAttributes () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default attributes for the element</p> <p>public Phalcon\\Forms\\ElementInterface setUserOption (string $option, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets an option for the element</p> <p>public mixed getUserOption (string $option, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an option if present</p> <p>public  setUserOptions (array $options) inherited from Phalcon\\Forms\\Element</p> <p>Sets options for the element</p> <p>public  getUserOptions () inherited from Phalcon\\Forms\\Element</p> <p>Returns the options for the element</p> <p>public  setLabel (mixed $label) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element label</p> <p>public  getLabel () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element label</p> <p>public  label ([array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Generate the HTML to label the element</p> <p>public Phalcon\\Forms\\ElementInterface setDefault (mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <p>public  getDefault () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default value assigned to the element</p> <p>public  getValue () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element value</p> <p>public  getMessages () inherited from Phalcon\\Forms\\Element</p> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <p>public  hasMessages () inherited from Phalcon\\Forms\\Element</p> <p>Checks whether there are messages attached to the element</p> <p>public  setMessages (Phalcon\\Validation\\Message\\Group $group) inherited from Phalcon\\Forms\\Element</p> <p>Sets the validation messages related to the element</p> <p>public  appendMessage (Phalcon\\Validation\\MessageInterface $message) inherited from Phalcon\\Forms\\Element</p> <p>Appends a message to the internal message list</p> <p>public  clear () inherited from Phalcon\\Forms\\Element</p> <p>Clears every element in the form to its default value</p> <p>public  __toString () inherited from Phalcon\\Forms\\Element</p> <p>Magic method __toString renders the widget without attributes</p>"},{"location":"api/Phalcon_Forms/#class-phalconformselementfile","title":"Class Phalcon\\Forms\\Element\\File","text":"<p>extends abstract class Phalcon\\Forms\\Element</p> <p>implements Phalcon\\Forms\\ElementInterface</p> <p>Source on GitHub</p> <p>Component INPUT[type=file] for forms</p>"},{"location":"api/Phalcon_Forms/#methods_4","title":"Methods","text":"<p>public  render ([array $attributes])</p> <p>Renders the element widget returning html</p> <p>public  __construct (string $name, [array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Phalcon\\Forms\\Element constructor</p> <p>public  setForm (Phalcon\\Forms\\Form $form) inherited from Phalcon\\Forms\\Element</p> <p>Sets the parent form to the element</p> <p>public  getForm () inherited from Phalcon\\Forms\\Element</p> <p>Returns the parent form to the element</p> <p>public  setName (mixed $name) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element name</p> <p>public  getName () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element name</p> <p>public Phalcon\\Forms\\ElementInterface setFilters (array | string $filters) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element filters</p> <p>public  addFilter (mixed $filter) inherited from Phalcon\\Forms\\Element</p> <p>Adds a filter to current list of filters</p> <p>public mixed getFilters () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element filters</p> <p>public Phalcon\\Forms\\ElementInterface addValidators (array $validators, [mixed $merge]) inherited from Phalcon\\Forms\\Element</p> <p>Adds a group of validators</p> <p>public  addValidator (Phalcon\\Validation\\ValidatorInterface $validator) inherited from Phalcon\\Forms\\Element</p> <p>Adds a validator to the element</p> <p>public  getValidators () inherited from Phalcon\\Forms\\Element</p> <p>Returns the validators registered for the element</p> <p>public  prepareAttributes ([array $attributes], [mixed $useChecked]) inherited from Phalcon\\Forms\\Element</p> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <p>public Phalcon\\Forms\\ElementInterface setAttribute (string $attribute, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default attribute for the element</p> <p>public mixed getAttribute (string $attribute, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an attribute if present</p> <p>public  setAttributes (array $attributes) inherited from Phalcon\\Forms\\Element</p> <p>Sets default attributes for the element</p> <p>public  getAttributes () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default attributes for the element</p> <p>public Phalcon\\Forms\\ElementInterface setUserOption (string $option, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets an option for the element</p> <p>public mixed getUserOption (string $option, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an option if present</p> <p>public  setUserOptions (array $options) inherited from Phalcon\\Forms\\Element</p> <p>Sets options for the element</p> <p>public  getUserOptions () inherited from Phalcon\\Forms\\Element</p> <p>Returns the options for the element</p> <p>public  setLabel (mixed $label) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element label</p> <p>public  getLabel () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element label</p> <p>public  label ([array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Generate the HTML to label the element</p> <p>public Phalcon\\Forms\\ElementInterface setDefault (mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <p>public  getDefault () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default value assigned to the element</p> <p>public  getValue () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element value</p> <p>public  getMessages () inherited from Phalcon\\Forms\\Element</p> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <p>public  hasMessages () inherited from Phalcon\\Forms\\Element</p> <p>Checks whether there are messages attached to the element</p> <p>public  setMessages (Phalcon\\Validation\\Message\\Group $group) inherited from Phalcon\\Forms\\Element</p> <p>Sets the validation messages related to the element</p> <p>public  appendMessage (Phalcon\\Validation\\MessageInterface $message) inherited from Phalcon\\Forms\\Element</p> <p>Appends a message to the internal message list</p> <p>public  clear () inherited from Phalcon\\Forms\\Element</p> <p>Clears every element in the form to its default value</p> <p>public  __toString () inherited from Phalcon\\Forms\\Element</p> <p>Magic method __toString renders the widget without attributes</p>"},{"location":"api/Phalcon_Forms/#class-phalconformselementhidden","title":"Class Phalcon\\Forms\\Element\\Hidden","text":"<p>extends abstract class Phalcon\\Forms\\Element</p> <p>implements Phalcon\\Forms\\ElementInterface</p> <p>Source on GitHub</p> <p>Component INPUT[type=hidden] for forms</p>"},{"location":"api/Phalcon_Forms/#methods_5","title":"Methods","text":"<p>public  render ([array $attributes])</p> <p>Renders the element widget returning html</p> <p>public  __construct (string $name, [array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Phalcon\\Forms\\Element constructor</p> <p>public  setForm (Phalcon\\Forms\\Form $form) inherited from Phalcon\\Forms\\Element</p> <p>Sets the parent form to the element</p> <p>public  getForm () inherited from Phalcon\\Forms\\Element</p> <p>Returns the parent form to the element</p> <p>public  setName (mixed $name) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element name</p> <p>public  getName () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element name</p> <p>public Phalcon\\Forms\\ElementInterface setFilters (array | string $filters) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element filters</p> <p>public  addFilter (mixed $filter) inherited from Phalcon\\Forms\\Element</p> <p>Adds a filter to current list of filters</p> <p>public mixed getFilters () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element filters</p> <p>public Phalcon\\Forms\\ElementInterface addValidators (array $validators, [mixed $merge]) inherited from Phalcon\\Forms\\Element</p> <p>Adds a group of validators</p> <p>public  addValidator (Phalcon\\Validation\\ValidatorInterface $validator) inherited from Phalcon\\Forms\\Element</p> <p>Adds a validator to the element</p> <p>public  getValidators () inherited from Phalcon\\Forms\\Element</p> <p>Returns the validators registered for the element</p> <p>public  prepareAttributes ([array $attributes], [mixed $useChecked]) inherited from Phalcon\\Forms\\Element</p> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <p>public Phalcon\\Forms\\ElementInterface setAttribute (string $attribute, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default attribute for the element</p> <p>public mixed getAttribute (string $attribute, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an attribute if present</p> <p>public  setAttributes (array $attributes) inherited from Phalcon\\Forms\\Element</p> <p>Sets default attributes for the element</p> <p>public  getAttributes () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default attributes for the element</p> <p>public Phalcon\\Forms\\ElementInterface setUserOption (string $option, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets an option for the element</p> <p>public mixed getUserOption (string $option, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an option if present</p> <p>public  setUserOptions (array $options) inherited from Phalcon\\Forms\\Element</p> <p>Sets options for the element</p> <p>public  getUserOptions () inherited from Phalcon\\Forms\\Element</p> <p>Returns the options for the element</p> <p>public  setLabel (mixed $label) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element label</p> <p>public  getLabel () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element label</p> <p>public  label ([array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Generate the HTML to label the element</p> <p>public Phalcon\\Forms\\ElementInterface setDefault (mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <p>public  getDefault () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default value assigned to the element</p> <p>public  getValue () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element value</p> <p>public  getMessages () inherited from Phalcon\\Forms\\Element</p> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <p>public  hasMessages () inherited from Phalcon\\Forms\\Element</p> <p>Checks whether there are messages attached to the element</p> <p>public  setMessages (Phalcon\\Validation\\Message\\Group $group) inherited from Phalcon\\Forms\\Element</p> <p>Sets the validation messages related to the element</p> <p>public  appendMessage (Phalcon\\Validation\\MessageInterface $message) inherited from Phalcon\\Forms\\Element</p> <p>Appends a message to the internal message list</p> <p>public  clear () inherited from Phalcon\\Forms\\Element</p> <p>Clears every element in the form to its default value</p> <p>public  __toString () inherited from Phalcon\\Forms\\Element</p> <p>Magic method __toString renders the widget without attributes</p>"},{"location":"api/Phalcon_Forms/#class-phalconformselementnumeric","title":"Class Phalcon\\Forms\\Element\\Numeric","text":"<p>extends abstract class Phalcon\\Forms\\Element</p> <p>implements Phalcon\\Forms\\ElementInterface</p> <p>Source on GitHub</p> <p>Component INPUT[type=number] for forms</p>"},{"location":"api/Phalcon_Forms/#methods_6","title":"Methods","text":"<p>public  render ([array $attributes])</p> <p>Renders the element widget returning html</p> <p>public  __construct (string $name, [array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Phalcon\\Forms\\Element constructor</p> <p>public  setForm (Phalcon\\Forms\\Form $form) inherited from Phalcon\\Forms\\Element</p> <p>Sets the parent form to the element</p> <p>public  getForm () inherited from Phalcon\\Forms\\Element</p> <p>Returns the parent form to the element</p> <p>public  setName (mixed $name) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element name</p> <p>public  getName () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element name</p> <p>public Phalcon\\Forms\\ElementInterface setFilters (array | string $filters) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element filters</p> <p>public  addFilter (mixed $filter) inherited from Phalcon\\Forms\\Element</p> <p>Adds a filter to current list of filters</p> <p>public mixed getFilters () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element filters</p> <p>public Phalcon\\Forms\\ElementInterface addValidators (array $validators, [mixed $merge]) inherited from Phalcon\\Forms\\Element</p> <p>Adds a group of validators</p> <p>public  addValidator (Phalcon\\Validation\\ValidatorInterface $validator) inherited from Phalcon\\Forms\\Element</p> <p>Adds a validator to the element</p> <p>public  getValidators () inherited from Phalcon\\Forms\\Element</p> <p>Returns the validators registered for the element</p> <p>public  prepareAttributes ([array $attributes], [mixed $useChecked]) inherited from Phalcon\\Forms\\Element</p> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <p>public Phalcon\\Forms\\ElementInterface setAttribute (string $attribute, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default attribute for the element</p> <p>public mixed getAttribute (string $attribute, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an attribute if present</p> <p>public  setAttributes (array $attributes) inherited from Phalcon\\Forms\\Element</p> <p>Sets default attributes for the element</p> <p>public  getAttributes () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default attributes for the element</p> <p>public Phalcon\\Forms\\ElementInterface setUserOption (string $option, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets an option for the element</p> <p>public mixed getUserOption (string $option, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an option if present</p> <p>public  setUserOptions (array $options) inherited from Phalcon\\Forms\\Element</p> <p>Sets options for the element</p> <p>public  getUserOptions () inherited from Phalcon\\Forms\\Element</p> <p>Returns the options for the element</p> <p>public  setLabel (mixed $label) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element label</p> <p>public  getLabel () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element label</p> <p>public  label ([array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Generate the HTML to label the element</p> <p>public Phalcon\\Forms\\ElementInterface setDefault (mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <p>public  getDefault () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default value assigned to the element</p> <p>public  getValue () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element value</p> <p>public  getMessages () inherited from Phalcon\\Forms\\Element</p> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <p>public  hasMessages () inherited from Phalcon\\Forms\\Element</p> <p>Checks whether there are messages attached to the element</p> <p>public  setMessages (Phalcon\\Validation\\Message\\Group $group) inherited from Phalcon\\Forms\\Element</p> <p>Sets the validation messages related to the element</p> <p>public  appendMessage (Phalcon\\Validation\\MessageInterface $message) inherited from Phalcon\\Forms\\Element</p> <p>Appends a message to the internal message list</p> <p>public  clear () inherited from Phalcon\\Forms\\Element</p> <p>Clears every element in the form to its default value</p> <p>public  __toString () inherited from Phalcon\\Forms\\Element</p> <p>Magic method __toString renders the widget without attributes</p>"},{"location":"api/Phalcon_Forms/#class-phalconformselementpassword","title":"Class Phalcon\\Forms\\Element\\Password","text":"<p>extends abstract class Phalcon\\Forms\\Element</p> <p>implements Phalcon\\Forms\\ElementInterface</p> <p>Source on GitHub</p> <p>Component INPUT[type=password] for forms</p>"},{"location":"api/Phalcon_Forms/#methods_7","title":"Methods","text":"<p>public  render ([array $attributes])</p> <p>Renders the element widget returning html</p> <p>public  __construct (string $name, [array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Phalcon\\Forms\\Element constructor</p> <p>public  setForm (Phalcon\\Forms\\Form $form) inherited from Phalcon\\Forms\\Element</p> <p>Sets the parent form to the element</p> <p>public  getForm () inherited from Phalcon\\Forms\\Element</p> <p>Returns the parent form to the element</p> <p>public  setName (mixed $name) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element name</p> <p>public  getName () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element name</p> <p>public Phalcon\\Forms\\ElementInterface setFilters (array | string $filters) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element filters</p> <p>public  addFilter (mixed $filter) inherited from Phalcon\\Forms\\Element</p> <p>Adds a filter to current list of filters</p> <p>public mixed getFilters () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element filters</p> <p>public Phalcon\\Forms\\ElementInterface addValidators (array $validators, [mixed $merge]) inherited from Phalcon\\Forms\\Element</p> <p>Adds a group of validators</p> <p>public  addValidator (Phalcon\\Validation\\ValidatorInterface $validator) inherited from Phalcon\\Forms\\Element</p> <p>Adds a validator to the element</p> <p>public  getValidators () inherited from Phalcon\\Forms\\Element</p> <p>Returns the validators registered for the element</p> <p>public  prepareAttributes ([array $attributes], [mixed $useChecked]) inherited from Phalcon\\Forms\\Element</p> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <p>public Phalcon\\Forms\\ElementInterface setAttribute (string $attribute, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default attribute for the element</p> <p>public mixed getAttribute (string $attribute, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an attribute if present</p> <p>public  setAttributes (array $attributes) inherited from Phalcon\\Forms\\Element</p> <p>Sets default attributes for the element</p> <p>public  getAttributes () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default attributes for the element</p> <p>public Phalcon\\Forms\\ElementInterface setUserOption (string $option, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets an option for the element</p> <p>public mixed getUserOption (string $option, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an option if present</p> <p>public  setUserOptions (array $options) inherited from Phalcon\\Forms\\Element</p> <p>Sets options for the element</p> <p>public  getUserOptions () inherited from Phalcon\\Forms\\Element</p> <p>Returns the options for the element</p> <p>public  setLabel (mixed $label) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element label</p> <p>public  getLabel () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element label</p> <p>public  label ([array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Generate the HTML to label the element</p> <p>public Phalcon\\Forms\\ElementInterface setDefault (mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <p>public  getDefault () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default value assigned to the element</p> <p>public  getValue () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element value</p> <p>public  getMessages () inherited from Phalcon\\Forms\\Element</p> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <p>public  hasMessages () inherited from Phalcon\\Forms\\Element</p> <p>Checks whether there are messages attached to the element</p> <p>public  setMessages (Phalcon\\Validation\\Message\\Group $group) inherited from Phalcon\\Forms\\Element</p> <p>Sets the validation messages related to the element</p> <p>public  appendMessage (Phalcon\\Validation\\MessageInterface $message) inherited from Phalcon\\Forms\\Element</p> <p>Appends a message to the internal message list</p> <p>public  clear () inherited from Phalcon\\Forms\\Element</p> <p>Clears every element in the form to its default value</p> <p>public  __toString () inherited from Phalcon\\Forms\\Element</p> <p>Magic method __toString renders the widget without attributes</p>"},{"location":"api/Phalcon_Forms/#class-phalconformselementradio","title":"Class Phalcon\\Forms\\Element\\Radio","text":"<p>extends abstract class Phalcon\\Forms\\Element</p> <p>implements Phalcon\\Forms\\ElementInterface</p> <p>Source on GitHub</p> <p>Component INPUT[type=radio] for forms</p>"},{"location":"api/Phalcon_Forms/#methods_8","title":"Methods","text":"<p>public  render ([array $attributes])</p> <p>Renders the element widget returning html</p> <p>public  __construct (string $name, [array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Phalcon\\Forms\\Element constructor</p> <p>public  setForm (Phalcon\\Forms\\Form $form) inherited from Phalcon\\Forms\\Element</p> <p>Sets the parent form to the element</p> <p>public  getForm () inherited from Phalcon\\Forms\\Element</p> <p>Returns the parent form to the element</p> <p>public  setName (mixed $name) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element name</p> <p>public  getName () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element name</p> <p>public Phalcon\\Forms\\ElementInterface setFilters (array | string $filters) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element filters</p> <p>public  addFilter (mixed $filter) inherited from Phalcon\\Forms\\Element</p> <p>Adds a filter to current list of filters</p> <p>public mixed getFilters () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element filters</p> <p>public Phalcon\\Forms\\ElementInterface addValidators (array $validators, [mixed $merge]) inherited from Phalcon\\Forms\\Element</p> <p>Adds a group of validators</p> <p>public  addValidator (Phalcon\\Validation\\ValidatorInterface $validator) inherited from Phalcon\\Forms\\Element</p> <p>Adds a validator to the element</p> <p>public  getValidators () inherited from Phalcon\\Forms\\Element</p> <p>Returns the validators registered for the element</p> <p>public  prepareAttributes ([array $attributes], [mixed $useChecked]) inherited from Phalcon\\Forms\\Element</p> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <p>public Phalcon\\Forms\\ElementInterface setAttribute (string $attribute, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default attribute for the element</p> <p>public mixed getAttribute (string $attribute, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an attribute if present</p> <p>public  setAttributes (array $attributes) inherited from Phalcon\\Forms\\Element</p> <p>Sets default attributes for the element</p> <p>public  getAttributes () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default attributes for the element</p> <p>public Phalcon\\Forms\\ElementInterface setUserOption (string $option, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets an option for the element</p> <p>public mixed getUserOption (string $option, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an option if present</p> <p>public  setUserOptions (array $options) inherited from Phalcon\\Forms\\Element</p> <p>Sets options for the element</p> <p>public  getUserOptions () inherited from Phalcon\\Forms\\Element</p> <p>Returns the options for the element</p> <p>public  setLabel (mixed $label) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element label</p> <p>public  getLabel () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element label</p> <p>public  label ([array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Generate the HTML to label the element</p> <p>public Phalcon\\Forms\\ElementInterface setDefault (mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <p>public  getDefault () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default value assigned to the element</p> <p>public  getValue () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element value</p> <p>public  getMessages () inherited from Phalcon\\Forms\\Element</p> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <p>public  hasMessages () inherited from Phalcon\\Forms\\Element</p> <p>Checks whether there are messages attached to the element</p> <p>public  setMessages (Phalcon\\Validation\\Message\\Group $group) inherited from Phalcon\\Forms\\Element</p> <p>Sets the validation messages related to the element</p> <p>public  appendMessage (Phalcon\\Validation\\MessageInterface $message) inherited from Phalcon\\Forms\\Element</p> <p>Appends a message to the internal message list</p> <p>public  clear () inherited from Phalcon\\Forms\\Element</p> <p>Clears every element in the form to its default value</p> <p>public  __toString () inherited from Phalcon\\Forms\\Element</p> <p>Magic method __toString renders the widget without attributes</p>"},{"location":"api/Phalcon_Forms/#class-phalconformselementselect","title":"Class Phalcon\\Forms\\Element\\Select","text":"<p>extends abstract class Phalcon\\Forms\\Element</p> <p>implements Phalcon\\Forms\\ElementInterface</p> <p>Source on GitHub</p> <p>Component SELECT (choice) for forms</p>"},{"location":"api/Phalcon_Forms/#methods_9","title":"Methods","text":"<p>public  __construct (string $name, [object | array $options], [array $attributes])</p> <p>Phalcon\\Forms\\Element constructor</p> <p>public Phalcon\\Forms\\Element setOptions (array | object $options)</p> <p>Set the choice's options</p> <p>public array | object getOptions ()</p> <p>Returns the choices' options</p> <p>public this addOption (array $option)</p> <p>Adds an option to the current options</p> <p>public  render ([array $attributes])</p> <p>Renders the element widget returning html</p> <p>public  setForm (Phalcon\\Forms\\Form $form) inherited from Phalcon\\Forms\\Element</p> <p>Sets the parent form to the element</p> <p>public  getForm () inherited from Phalcon\\Forms\\Element</p> <p>Returns the parent form to the element</p> <p>public  setName (mixed $name) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element name</p> <p>public  getName () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element name</p> <p>public Phalcon\\Forms\\ElementInterface setFilters (array | string $filters) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element filters</p> <p>public  addFilter (mixed $filter) inherited from Phalcon\\Forms\\Element</p> <p>Adds a filter to current list of filters</p> <p>public mixed getFilters () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element filters</p> <p>public Phalcon\\Forms\\ElementInterface addValidators (array $validators, [mixed $merge]) inherited from Phalcon\\Forms\\Element</p> <p>Adds a group of validators</p> <p>public  addValidator (Phalcon\\Validation\\ValidatorInterface $validator) inherited from Phalcon\\Forms\\Element</p> <p>Adds a validator to the element</p> <p>public  getValidators () inherited from Phalcon\\Forms\\Element</p> <p>Returns the validators registered for the element</p> <p>public  prepareAttributes ([array $attributes], [mixed $useChecked]) inherited from Phalcon\\Forms\\Element</p> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <p>public Phalcon\\Forms\\ElementInterface setAttribute (string $attribute, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default attribute for the element</p> <p>public mixed getAttribute (string $attribute, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an attribute if present</p> <p>public  setAttributes (array $attributes) inherited from Phalcon\\Forms\\Element</p> <p>Sets default attributes for the element</p> <p>public  getAttributes () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default attributes for the element</p> <p>public Phalcon\\Forms\\ElementInterface setUserOption (string $option, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets an option for the element</p> <p>public mixed getUserOption (string $option, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an option if present</p> <p>public  setUserOptions (array $options) inherited from Phalcon\\Forms\\Element</p> <p>Sets options for the element</p> <p>public  getUserOptions () inherited from Phalcon\\Forms\\Element</p> <p>Returns the options for the element</p> <p>public  setLabel (mixed $label) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element label</p> <p>public  getLabel () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element label</p> <p>public  label ([array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Generate the HTML to label the element</p> <p>public Phalcon\\Forms\\ElementInterface setDefault (mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <p>public  getDefault () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default value assigned to the element</p> <p>public  getValue () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element value</p> <p>public  getMessages () inherited from Phalcon\\Forms\\Element</p> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <p>public  hasMessages () inherited from Phalcon\\Forms\\Element</p> <p>Checks whether there are messages attached to the element</p> <p>public  setMessages (Phalcon\\Validation\\Message\\Group $group) inherited from Phalcon\\Forms\\Element</p> <p>Sets the validation messages related to the element</p> <p>public  appendMessage (Phalcon\\Validation\\MessageInterface $message) inherited from Phalcon\\Forms\\Element</p> <p>Appends a message to the internal message list</p> <p>public  clear () inherited from Phalcon\\Forms\\Element</p> <p>Clears every element in the form to its default value</p> <p>public  __toString () inherited from Phalcon\\Forms\\Element</p> <p>Magic method __toString renders the widget without attributes</p>"},{"location":"api/Phalcon_Forms/#class-phalconformselementsubmit","title":"Class Phalcon\\Forms\\Element\\Submit","text":"<p>extends abstract class Phalcon\\Forms\\Element</p> <p>implements Phalcon\\Forms\\ElementInterface</p> <p>Source on GitHub</p> <p>Component INPUT[type=submit] for forms</p>"},{"location":"api/Phalcon_Forms/#methods_10","title":"Methods","text":"<p>public  render ([array $attributes])</p> <p>Renders the element widget</p> <p>public  __construct (string $name, [array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Phalcon\\Forms\\Element constructor</p> <p>public  setForm (Phalcon\\Forms\\Form $form) inherited from Phalcon\\Forms\\Element</p> <p>Sets the parent form to the element</p> <p>public  getForm () inherited from Phalcon\\Forms\\Element</p> <p>Returns the parent form to the element</p> <p>public  setName (mixed $name) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element name</p> <p>public  getName () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element name</p> <p>public Phalcon\\Forms\\ElementInterface setFilters (array | string $filters) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element filters</p> <p>public  addFilter (mixed $filter) inherited from Phalcon\\Forms\\Element</p> <p>Adds a filter to current list of filters</p> <p>public mixed getFilters () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element filters</p> <p>public Phalcon\\Forms\\ElementInterface addValidators (array $validators, [mixed $merge]) inherited from Phalcon\\Forms\\Element</p> <p>Adds a group of validators</p> <p>public  addValidator (Phalcon\\Validation\\ValidatorInterface $validator) inherited from Phalcon\\Forms\\Element</p> <p>Adds a validator to the element</p> <p>public  getValidators () inherited from Phalcon\\Forms\\Element</p> <p>Returns the validators registered for the element</p> <p>public  prepareAttributes ([array $attributes], [mixed $useChecked]) inherited from Phalcon\\Forms\\Element</p> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <p>public Phalcon\\Forms\\ElementInterface setAttribute (string $attribute, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default attribute for the element</p> <p>public mixed getAttribute (string $attribute, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an attribute if present</p> <p>public  setAttributes (array $attributes) inherited from Phalcon\\Forms\\Element</p> <p>Sets default attributes for the element</p> <p>public  getAttributes () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default attributes for the element</p> <p>public Phalcon\\Forms\\ElementInterface setUserOption (string $option, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets an option for the element</p> <p>public mixed getUserOption (string $option, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an option if present</p> <p>public  setUserOptions (array $options) inherited from Phalcon\\Forms\\Element</p> <p>Sets options for the element</p> <p>public  getUserOptions () inherited from Phalcon\\Forms\\Element</p> <p>Returns the options for the element</p> <p>public  setLabel (mixed $label) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element label</p> <p>public  getLabel () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element label</p> <p>public  label ([array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Generate the HTML to label the element</p> <p>public Phalcon\\Forms\\ElementInterface setDefault (mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <p>public  getDefault () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default value assigned to the element</p> <p>public  getValue () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element value</p> <p>public  getMessages () inherited from Phalcon\\Forms\\Element</p> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <p>public  hasMessages () inherited from Phalcon\\Forms\\Element</p> <p>Checks whether there are messages attached to the element</p> <p>public  setMessages (Phalcon\\Validation\\Message\\Group $group) inherited from Phalcon\\Forms\\Element</p> <p>Sets the validation messages related to the element</p> <p>public  appendMessage (Phalcon\\Validation\\MessageInterface $message) inherited from Phalcon\\Forms\\Element</p> <p>Appends a message to the internal message list</p> <p>public  clear () inherited from Phalcon\\Forms\\Element</p> <p>Clears every element in the form to its default value</p> <p>public  __toString () inherited from Phalcon\\Forms\\Element</p> <p>Magic method __toString renders the widget without attributes</p>"},{"location":"api/Phalcon_Forms/#class-phalconformselementtext","title":"Class Phalcon\\Forms\\Element\\Text","text":"<p>extends abstract class Phalcon\\Forms\\Element</p> <p>implements Phalcon\\Forms\\ElementInterface</p> <p>Source on GitHub</p> <p>Component INPUT[type=text] for forms</p>"},{"location":"api/Phalcon_Forms/#methods_11","title":"Methods","text":"<p>public  render ([array $attributes])</p> <p>Renders the element widget</p> <p>public  __construct (string $name, [array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Phalcon\\Forms\\Element constructor</p> <p>public  setForm (Phalcon\\Forms\\Form $form) inherited from Phalcon\\Forms\\Element</p> <p>Sets the parent form to the element</p> <p>public  getForm () inherited from Phalcon\\Forms\\Element</p> <p>Returns the parent form to the element</p> <p>public  setName (mixed $name) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element name</p> <p>public  getName () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element name</p> <p>public Phalcon\\Forms\\ElementInterface setFilters (array | string $filters) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element filters</p> <p>public  addFilter (mixed $filter) inherited from Phalcon\\Forms\\Element</p> <p>Adds a filter to current list of filters</p> <p>public mixed getFilters () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element filters</p> <p>public Phalcon\\Forms\\ElementInterface addValidators (array $validators, [mixed $merge]) inherited from Phalcon\\Forms\\Element</p> <p>Adds a group of validators</p> <p>public  addValidator (Phalcon\\Validation\\ValidatorInterface $validator) inherited from Phalcon\\Forms\\Element</p> <p>Adds a validator to the element</p> <p>public  getValidators () inherited from Phalcon\\Forms\\Element</p> <p>Returns the validators registered for the element</p> <p>public  prepareAttributes ([array $attributes], [mixed $useChecked]) inherited from Phalcon\\Forms\\Element</p> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <p>public Phalcon\\Forms\\ElementInterface setAttribute (string $attribute, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default attribute for the element</p> <p>public mixed getAttribute (string $attribute, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an attribute if present</p> <p>public  setAttributes (array $attributes) inherited from Phalcon\\Forms\\Element</p> <p>Sets default attributes for the element</p> <p>public  getAttributes () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default attributes for the element</p> <p>public Phalcon\\Forms\\ElementInterface setUserOption (string $option, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets an option for the element</p> <p>public mixed getUserOption (string $option, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an option if present</p> <p>public  setUserOptions (array $options) inherited from Phalcon\\Forms\\Element</p> <p>Sets options for the element</p> <p>public  getUserOptions () inherited from Phalcon\\Forms\\Element</p> <p>Returns the options for the element</p> <p>public  setLabel (mixed $label) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element label</p> <p>public  getLabel () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element label</p> <p>public  label ([array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Generate the HTML to label the element</p> <p>public Phalcon\\Forms\\ElementInterface setDefault (mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <p>public  getDefault () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default value assigned to the element</p> <p>public  getValue () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element value</p> <p>public  getMessages () inherited from Phalcon\\Forms\\Element</p> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <p>public  hasMessages () inherited from Phalcon\\Forms\\Element</p> <p>Checks whether there are messages attached to the element</p> <p>public  setMessages (Phalcon\\Validation\\Message\\Group $group) inherited from Phalcon\\Forms\\Element</p> <p>Sets the validation messages related to the element</p> <p>public  appendMessage (Phalcon\\Validation\\MessageInterface $message) inherited from Phalcon\\Forms\\Element</p> <p>Appends a message to the internal message list</p> <p>public  clear () inherited from Phalcon\\Forms\\Element</p> <p>Clears every element in the form to its default value</p> <p>public  __toString () inherited from Phalcon\\Forms\\Element</p> <p>Magic method __toString renders the widget without attributes</p>"},{"location":"api/Phalcon_Forms/#class-phalconformselementtextarea","title":"Class Phalcon\\Forms\\Element\\TextArea","text":"<p>extends abstract class Phalcon\\Forms\\Element</p> <p>implements Phalcon\\Forms\\ElementInterface</p> <p>Source on GitHub</p> <p>Component TEXTAREA for forms</p>"},{"location":"api/Phalcon_Forms/#methods_12","title":"Methods","text":"<p>public  render ([array $attributes])</p> <p>Renders the element widget</p> <p>public  __construct (string $name, [array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Phalcon\\Forms\\Element constructor</p> <p>public  setForm (Phalcon\\Forms\\Form $form) inherited from Phalcon\\Forms\\Element</p> <p>Sets the parent form to the element</p> <p>public  getForm () inherited from Phalcon\\Forms\\Element</p> <p>Returns the parent form to the element</p> <p>public  setName (mixed $name) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element name</p> <p>public  getName () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element name</p> <p>public Phalcon\\Forms\\ElementInterface setFilters (array | string $filters) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element filters</p> <p>public  addFilter (mixed $filter) inherited from Phalcon\\Forms\\Element</p> <p>Adds a filter to current list of filters</p> <p>public mixed getFilters () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element filters</p> <p>public Phalcon\\Forms\\ElementInterface addValidators (array $validators, [mixed $merge]) inherited from Phalcon\\Forms\\Element</p> <p>Adds a group of validators</p> <p>public  addValidator (Phalcon\\Validation\\ValidatorInterface $validator) inherited from Phalcon\\Forms\\Element</p> <p>Adds a validator to the element</p> <p>public  getValidators () inherited from Phalcon\\Forms\\Element</p> <p>Returns the validators registered for the element</p> <p>public  prepareAttributes ([array $attributes], [mixed $useChecked]) inherited from Phalcon\\Forms\\Element</p> <p>Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <p>public Phalcon\\Forms\\ElementInterface setAttribute (string $attribute, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default attribute for the element</p> <p>public mixed getAttribute (string $attribute, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an attribute if present</p> <p>public  setAttributes (array $attributes) inherited from Phalcon\\Forms\\Element</p> <p>Sets default attributes for the element</p> <p>public  getAttributes () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default attributes for the element</p> <p>public Phalcon\\Forms\\ElementInterface setUserOption (string $option, mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets an option for the element</p> <p>public mixed getUserOption (string $option, [mixed $defaultValue]) inherited from Phalcon\\Forms\\Element</p> <p>Returns the value of an option if present</p> <p>public  setUserOptions (array $options) inherited from Phalcon\\Forms\\Element</p> <p>Sets options for the element</p> <p>public  getUserOptions () inherited from Phalcon\\Forms\\Element</p> <p>Returns the options for the element</p> <p>public  setLabel (mixed $label) inherited from Phalcon\\Forms\\Element</p> <p>Sets the element label</p> <p>public  getLabel () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element label</p> <p>public  label ([array $attributes]) inherited from Phalcon\\Forms\\Element</p> <p>Generate the HTML to label the element</p> <p>public Phalcon\\Forms\\ElementInterface setDefault (mixed $value) inherited from Phalcon\\Forms\\Element</p> <p>Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <p>public  getDefault () inherited from Phalcon\\Forms\\Element</p> <p>Returns the default value assigned to the element</p> <p>public  getValue () inherited from Phalcon\\Forms\\Element</p> <p>Returns the element value</p> <p>public  getMessages () inherited from Phalcon\\Forms\\Element</p> <p>Returns the messages that belongs to the element The element needs to be attached to a form</p> <p>public  hasMessages () inherited from Phalcon\\Forms\\Element</p> <p>Checks whether there are messages attached to the element</p> <p>public  setMessages (Phalcon\\Validation\\Message\\Group $group) inherited from Phalcon\\Forms\\Element</p> <p>Sets the validation messages related to the element</p> <p>public  appendMessage (Phalcon\\Validation\\MessageInterface $message) inherited from Phalcon\\Forms\\Element</p> <p>Appends a message to the internal message list</p> <p>public  clear () inherited from Phalcon\\Forms\\Element</p> <p>Clears every element in the form to its default value</p> <p>public  __toString () inherited from Phalcon\\Forms\\Element</p> <p>Magic method __toString renders the widget without attributes</p>"},{"location":"api/Phalcon_Forms/#interface-phalconformselementinterface","title":"Interface Phalcon\\Forms\\ElementInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Forms/#methods_13","title":"Methods","text":"<p>abstract public  setForm (Phalcon\\Forms\\Form $form)</p> <p>...</p> <p>abstract public  getForm ()</p> <p>...</p> <p>abstract public  setName (mixed $name)</p> <p>...</p> <p>abstract public  getName ()</p> <p>...</p> <p>abstract public  setFilters (mixed $filters)</p> <p>...</p> <p>abstract public  addFilter (mixed $filter)</p> <p>...</p> <p>abstract public  getFilters ()</p> <p>...</p> <p>abstract public  addValidators (array $validators, [mixed $merge])</p> <p>...</p> <p>abstract public  addValidator (Phalcon\\Validation\\ValidatorInterface $validator)</p> <p>...</p> <p>abstract public  getValidators ()</p> <p>...</p> <p>abstract public  prepareAttributes ([array $attributes], [mixed $useChecked])</p> <p>...</p> <p>abstract public  setAttribute (mixed $attribute, mixed $value)</p> <p>...</p> <p>abstract public  getAttribute (mixed $attribute, [mixed $defaultValue])</p> <p>...</p> <p>abstract public  setAttributes (array $attributes)</p> <p>...</p> <p>abstract public  getAttributes ()</p> <p>...</p> <p>abstract public  setUserOption (mixed $option, mixed $value)</p> <p>...</p> <p>abstract public  getUserOption (mixed $option, [mixed $defaultValue])</p> <p>...</p> <p>abstract public  setUserOptions (array $options)</p> <p>...</p> <p>abstract public  getUserOptions ()</p> <p>...</p> <p>abstract public  setLabel (mixed $label)</p> <p>...</p> <p>abstract public  getLabel ()</p> <p>...</p> <p>abstract public  label ()</p> <p>...</p> <p>abstract public  setDefault (mixed $value)</p> <p>...</p> <p>abstract public  getDefault ()</p> <p>...</p> <p>abstract public  getValue ()</p> <p>...</p> <p>abstract public  getMessages ()</p> <p>...</p> <p>abstract public  hasMessages ()</p> <p>...</p> <p>abstract public  setMessages (Phalcon\\Validation\\Message\\Group $group)</p> <p>...</p> <p>abstract public  appendMessage (Phalcon\\Validation\\MessageInterface $message)</p> <p>...</p> <p>abstract public  clear ()</p> <p>...</p> <p>abstract public  render ([mixed $attributes])</p> <p>...</p>"},{"location":"api/Phalcon_Forms/#class-phalconformsexception","title":"Class Phalcon\\Forms\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Forms/#methods_14","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Forms/#class-phalconformsform","title":"Class Phalcon\\Forms\\Form","text":"<p>extends abstract class Phalcon\\Di\\Injectable</p> <p>implements Phalcon\\Events\\EventsAwareInterface, Phalcon\\Di\\InjectionAwareInterface, Countable, Iterator, Traversable</p> <p>Source on GitHub</p> <p>This component allows to build forms using an object-oriented interface</p>"},{"location":"api/Phalcon_Forms/#methods_15","title":"Methods","text":"<p>public  setValidation (mixed $validation)</p> <p>...</p> <p>public  getValidation ()</p> <p>...</p> <p>public  __construct ([object $entity], [array $userOptions])</p> <p>Phalcon\\Forms\\Form constructor</p> <p>public  setAction (mixed $action)</p> <p>Sets the form's action</p> <p>public  getAction ()</p> <p>Returns the form's action</p> <p>public  setUserOption (string $option, mixed $value)</p> <p>Sets an option for the form</p> <p>public  getUserOption (string $option, [mixed $defaultValue])</p> <p>Returns the value of an option if present</p> <p>public  setUserOptions (array $options)</p> <p>Sets options for the element</p> <p>public  getUserOptions ()</p> <p>Returns the options for the element</p> <p>public  setEntity (object $entity)</p> <p>Sets the entity related to the model</p> <p>public object getEntity ()</p> <p>Returns the entity related to the model</p> <p>public  getElements ()</p> <p>Returns the form elements added to the form</p> <p>public  bind (array $data, object $entity, [array $whitelist])</p> <p>Binds data to the entity</p> <p>public  isValid ([array $data], [object $entity])</p> <p>Validates the form</p> <p>public  getMessages ([mixed $byItemName])</p> <p>Returns the messages generated in the validation</p> <p>public  getMessagesFor (mixed $name)</p> <p>Returns the messages generated for a specific element</p> <p>public  hasMessagesFor (mixed $name)</p> <p>Check if messages were generated for a specific element</p> <p>public  add (Phalcon\\Forms\\ElementInterface $element, [mixed $position], [mixed $type])</p> <p>Adds an element to the form</p> <p>public  render (string $name, [array $attributes])</p> <p>Renders a specific item in the form</p> <p>public  get (mixed $name)</p> <p>Returns an element added to the form by its name</p> <p>public  label (mixed $name, [array $attributes])</p> <p>Generate the label of an element added to the form including HTML</p> <p>public  getLabel (mixed $name)</p> <p>Returns a label for an element</p> <p>public  getValue (mixed $name)</p> <p>Gets a value from the internal related entity or from the default value</p> <p>public  has (mixed $name)</p> <p>Check if the form contains an element</p> <p>public  remove (mixed $name)</p> <p>Removes an element from the form</p> <p>public  clear ([array $fields])</p> <p>Clears every element in the form to its default value</p> <p>public  count ()</p> <p>Returns the number of elements in the form</p> <p>public  rewind ()</p> <p>Rewinds the internal iterator</p> <p>public  current ()</p> <p>Returns the current element in the iterator</p> <p>public  key ()</p> <p>Returns the current position/key in the iterator</p> <p>public  next ()</p> <p>Moves the internal iteration pointer to the next position</p> <p>public  valid ()</p> <p>Check if the current element in the iterator is valid</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal dependency injector</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the event manager</p> <p>public  getEventsManager () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal event manager</p> <p>public  __get (mixed $propertyName) inherited from Phalcon\\Di\\Injectable</p> <p>Magic method __get</p>"},{"location":"api/Phalcon_Forms/#class-phalconformsmanager","title":"Class Phalcon\\Forms\\Manager","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Forms/#methods_16","title":"Methods","text":"<p>public  create (string $name, [object $entity])</p> <p>Creates a form registering it in the forms manager</p> <p>public  get (mixed $name)</p> <p>Returns a form by its name</p> <p>public  has (mixed $name)</p> <p>Checks if a form is registered in the forms manager</p> <p>public  set (mixed $name, Phalcon\\Forms\\Form $form)</p> <p>Registers a form in the Forms Manager</p>"},{"location":"api/Phalcon_Http/","title":"Class Phalcon\\Http\\Cookie","text":"<p>implements Phalcon\\Http\\CookieInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>Provide OO wrappers to manage a HTTP cookie</p>"},{"location":"api/Phalcon_Http/#methods","title":"Methods","text":"<p>public  __construct (string $name, [mixed $value], [int $expire], [string $path], [boolean $secure], [string $domain], [boolean $httpOnly])</p> <p>Phalcon\\Http\\Cookie constructor</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the dependency injector</p> <p>public  getDI ()</p> <p>Returns the internal dependency injector</p> <p>public Phalcon\\Http\\Cookie setValue (string $value)</p> <p>Sets the cookie's value</p> <p>public mixed getValue ([string | array $filters], [string $defaultValue])</p> <p>Returns the cookie's value</p> <p>public  send ()</p> <p>Sends the cookie to the HTTP client Stores the cookie definition in session</p> <p>public  restore ()</p> <p>Reads the cookie-related info from the SESSION to restore the cookie as it was set This method is automatically called internally so normally you don't need to call it</p> <p>public  delete ()</p> <p>Deletes the cookie by setting an expire time in the past</p> <p>public setSignKey (string $signKey = null): Phalcon\\Http\\CookieInterface</p> <p>Sets the cookie's sign key. The <code>$signKey</code> MUST be at least 32 characters long and generated using a cryptographically secure pseudo random generator.</p> <p>You can use <code>null</code> to disable cookie signing.</p> <p>See: Phalcon\\Security\\Random Throws: Phalcon\\Http\\Cookie\\Exception</p> <p>public  useEncryption (mixed $useEncryption)</p> <p>Sets if the cookie must be encrypted/decrypted automatically</p> <p>public  isUsingEncryption ()</p> <p>Check if the cookie is using implicit encryption</p> <p>public  setExpiration (mixed $expire)</p> <p>Sets the cookie's expiration time</p> <p>public  getExpiration ()</p> <p>Returns the current expiration time</p> <p>public  setPath (mixed $path)</p> <p>Sets the cookie's expiration time</p> <p>public  getName ()</p> <p>Returns the current cookie's name</p> <p>public  getPath ()</p> <p>Returns the current cookie's path</p> <p>public  setDomain (mixed $domain)</p> <p>Sets the domain that the cookie is available to</p> <p>public  getDomain ()</p> <p>Returns the domain that the cookie is available to</p> <p>public  setSecure (mixed $secure)</p> <p>Sets if the cookie must only be sent when the connection is secure (HTTPS)</p> <p>public  getSecure ()</p> <p>Returns whether the cookie must only be sent when the connection is secure (HTTPS)</p> <p>public  setHttpOnly (mixed $httpOnly)</p> <p>Sets if the cookie is accessible only through the HTTP protocol</p> <p>public  getHttpOnly ()</p> <p>Returns if the cookie is accessible only through the HTTP protocol</p> <p>public  __toString ()</p> <p>Magic __toString method converts the cookie's value to string</p>"},{"location":"api/Phalcon_Http/#class-phalconhttpcookieexception","title":"Class Phalcon\\Http\\Cookie\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Http/#methods_1","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Http/#interface-phalconhttpcookieinterface","title":"Interface Phalcon\\Http\\CookieInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Http/#methods_2","title":"Methods","text":"<p>abstract public  setValue (mixed $value)</p> <p>...</p> <p>abstract public  getValue ([mixed $filters], [mixed $defaultValue])</p> <p>...</p> <p>abstract public  send ()</p> <p>...</p> <p>abstract public  delete ()</p> <p>...</p> <p>abstract public  useEncryption (mixed $useEncryption)</p> <p>...</p> <p>abstract public  isUsingEncryption ()</p> <p>...</p> <p>abstract public  setExpiration (mixed $expire)</p> <p>...</p> <p>abstract public  getExpiration ()</p> <p>...</p> <p>abstract public  setPath (mixed $path)</p> <p>...</p> <p>abstract public  getName ()</p> <p>...</p> <p>abstract public  getPath ()</p> <p>...</p> <p>abstract public  setDomain (mixed $domain)</p> <p>...</p> <p>abstract public  getDomain ()</p> <p>...</p> <p>abstract public  setSecure (mixed $secure)</p> <p>...</p> <p>abstract public  getSecure ()</p> <p>...</p> <p>abstract public  setHttpOnly (mixed $httpOnly)</p> <p>...</p> <p>abstract public  getHttpOnly ()</p> <p>...</p>"},{"location":"api/Phalcon_Http/#class-phalconhttprequest","title":"Class Phalcon\\Http\\Request","text":"<p>implements Phalcon\\Http\\RequestInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>Encapsulates request information for easy and secure access from application controllers.</p> <p>The request object is a simple value object that is passed between the dispatcher and controller classes. It packages the HTTP request environment.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request();\n\nif ($request-&gt;isPost() &amp;&amp; $request-&gt;isAjax()) {\n    echo \"Request was made using POST and AJAX\";\n}\n\n$request-&gt;getServer(\"HTTP_HOST\"); // Retrieve SERVER variables\n$request-&gt;getMethod();            // GET, POST, PUT, DELETE, HEAD, OPTIONS, PATCH, PURGE, TRACE, CONNECT\n$request-&gt;getLanguages();         // An array of languages the client accepts\n</code></pre>"},{"location":"api/Phalcon_Http/#methods_3","title":"Methods","text":"<p>public  getHttpMethodParameterOverride ()</p> <p>...</p> <p>public  setHttpMethodParameterOverride (mixed $httpMethodParameterOverride)</p> <p>...</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the dependency injector</p> <p>public  getDI ()</p> <p>Returns the internal dependency injector</p> <p>public  get ([mixed $name], [mixed $filters], [mixed $defaultValue], [mixed $notAllowEmpty], [mixed $noRecursive])</p> <p>Gets a variable from the $_REQUEST superglobal applying filters if needed. If no parameters are given the $_REQUEST superglobal is returned</p> <pre><code>&lt;?php\n\n// Returns value from $_REQUEST[\"user_email\"] without sanitizing\n$userEmail = $request-&gt;get(\"user_email\");\n\n// Returns value from $_REQUEST[\"user_email\"] with sanitizing\n$userEmail = $request-&gt;get(\"user_email\", \"email\");\n</code></pre> <p>public  getPost ([mixed $name], [mixed $filters], [mixed $defaultValue], [mixed $notAllowEmpty], [mixed $noRecursive])</p> <p>Gets a variable from the $_POST superglobal applying filters if needed If no parameters are given the $_POST superglobal is returned</p> <pre><code>&lt;?php\n\n// Returns value from $_POST[\"user_email\"] without sanitizing\n$userEmail = $request-&gt;getPost(\"user_email\");\n\n// Returns value from $_POST[\"user_email\"] with sanitizing\n$userEmail = $request-&gt;getPost(\"user_email\", \"email\");\n</code></pre> <p>public  getPut ([mixed $name], [mixed $filters], [mixed $defaultValue], [mixed $notAllowEmpty], [mixed $noRecursive])</p> <p>Gets a variable from put request</p> <pre><code>&lt;?php\n\n// Returns value from $_PUT[\"user_email\"] without sanitizing\n$userEmail = $request-&gt;getPut(\"user_email\");\n\n// Returns value from $_PUT[\"user_email\"] with sanitizing\n$userEmail = $request-&gt;getPut(\"user_email\", \"email\");\n</code></pre> <p>public  getQuery ([mixed $name], [mixed $filters], [mixed $defaultValue], [mixed $notAllowEmpty], [mixed $noRecursive])</p> <p>Gets variable from $_GET superglobal applying filters if needed If no parameters are given the $_GET superglobal is returned</p> <pre><code>&lt;?php\n\n// Returns value from $_GET[\"id\"] without sanitizing\n$id = $request-&gt;getQuery(\"id\");\n\n// Returns value from $_GET[\"id\"] with sanitizing\n$id = $request-&gt;getQuery(\"id\", \"int\");\n\n// Returns value from $_GET[\"id\"] with a default value\n$id = $request-&gt;getQuery(\"id\", null, 150);\n</code></pre> <p>final protected  getHelper (array $source, [mixed $name], [mixed $filters], [mixed $defaultValue], [mixed $notAllowEmpty], [mixed $noRecursive])</p> <p>Helper to get data from superglobals, applying filters if needed. If no parameters are given the superglobal is returned.</p> <p>public  getServer (mixed $name)</p> <p>Gets variable from $_SERVER superglobal</p> <p>public  has (mixed $name)</p> <p>Checks whether $_REQUEST superglobal has certain index</p> <p>public  hasPost (mixed $name)</p> <p>Checks whether $_POST superglobal has certain index</p> <p>public  hasPut (mixed $name)</p> <p>Checks whether the PUT data has certain index</p> <p>public  hasQuery (mixed $name)</p> <p>Checks whether $_GET superglobal has certain index</p> <p>final public  hasServer (mixed $name)</p> <p>Checks whether $_SERVER superglobal has certain index</p> <p>final public  getHeader (mixed $header)</p> <p>Gets HTTP header from request data</p> <p>public  getScheme ()</p> <p>Gets HTTP schema (http/https)</p> <p>public  isAjax ()</p> <p>Checks whether request has been made using ajax</p> <p>public  isSoap ()</p> <p>Checks whether request has been made using SOAP</p> <p>public  isSoapRequested ()</p> <p>Alias of isSoap(). It will be deprecated in future versions</p> <p>public  isSecure ()</p> <p>Checks whether request has been made using any secure layer</p> <p>public  isSecureRequest ()</p> <p>Alias of isSecure(). It will be deprecated in future versions</p> <p>public  getRawBody ()</p> <p>Gets HTTP raw request body</p> <p>public  getJsonRawBody ([mixed $associative])</p> <p>Gets decoded JSON HTTP raw request body</p> <p>public  getServerAddress ()</p> <p>Gets active server address IP</p> <p>public  getServerName ()</p> <p>Gets active server name</p> <p>public  getHttpHost ()</p> <p>Gets host name used by the request. <code>Request::getHttpHost</code> trying to find host name in following order: - <code>$_SERVER[\"HTTP_HOST\"]</code> - <code>$_SERVER[\"SERVER_NAME\"]</code> - <code>$_SERVER[\"SERVER_ADDR\"]</code> Optionally <code>Request::getHttpHost</code> validates and clean host name. The <code>Request::$_strictHostCheck</code> can be used to validate host name. Note: validation and cleaning have a negative performance impact because they use regular expressions.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request;\n\n$_SERVER[\"HTTP_HOST\"] = \"example.com\";\n$request-&gt;getHttpHost(); // example.com\n\n$_SERVER[\"HTTP_HOST\"] = \"example.com:8080\";\n$request-&gt;getHttpHost(); // example.com:8080\n\n$request-&gt;setStrictHostCheck(true);\n$_SERVER[\"HTTP_HOST\"] = \"ex=am~ple.com\";\n$request-&gt;getHttpHost(); // UnexpectedValueException\n\n$_SERVER[\"HTTP_HOST\"] = \"ExAmPlE.com\";\n$request-&gt;getHttpHost(); // example.com\n</code></pre> <p>public  setStrictHostCheck ([mixed $flag])</p> <p>Sets if the <code>Request::getHttpHost</code> method must be use strict validation of host name or not</p> <p>public  isStrictHostCheck ()</p> <p>Checks if the <code>Request::getHttpHost</code> method will be use strict validation of host name or not</p> <p>public  getPort ()</p> <p>Gets information about the port on which the request is made.</p> <p>final public  getURI ()</p> <p>Gets HTTP URI which request has been made</p> <p>public  getClientAddress ([mixed $trustForwardedHeader])</p> <p>Gets most possible client IPv4 Address. This method searches in $_SERVER[\"REMOTE_ADDR\"] and optionally in $_SERVER[\"HTTP_X_FORWARDED_FOR\"]</p> <p>final public  getMethod ()</p> <p>Gets HTTP method which request has been made If the X-HTTP-Method-Override header is set, and if the method is a POST, then it is used to determine the \"real\" intended HTTP method. The _method request parameter can also be used to determine the HTTP method, but only if setHttpMethodParameterOverride(true) has been called. The method is always an uppercased string.</p> <p>public  getUserAgent ()</p> <p>Gets HTTP user agent used to made the request</p> <p>public  isValidHttpMethod (mixed $method)</p> <p>Checks if a method is a valid HTTP method</p> <p>public  isMethod (mixed $methods, [mixed $strict])</p> <p>Check if HTTP method match any of the passed methods When strict is true it checks if validated methods are real HTTP methods</p> <p>public  isPost ()</p> <p>Checks whether HTTP method is POST. if _SERVER[\"REQUEST_METHOD\"]===\"POST\"</p> <p>public  isGet ()</p> <p>Checks whether HTTP method is GET. if _SERVER[\"REQUEST_METHOD\"]===\"GET\"</p> <p>public  isPut ()</p> <p>Checks whether HTTP method is PUT. if _SERVER[\"REQUEST_METHOD\"]===\"PUT\"</p> <p>public  isPatch ()</p> <p>Checks whether HTTP method is PATCH. if _SERVER[\"REQUEST_METHOD\"]===\"PATCH\"</p> <p>public  isHead ()</p> <p>Checks whether HTTP method is HEAD. if _SERVER[\"REQUEST_METHOD\"]===\"HEAD\"</p> <p>public  isDelete ()</p> <p>Checks whether HTTP method is DELETE. if _SERVER[\"REQUEST_METHOD\"]===\"DELETE\"</p> <p>public  isOptions ()</p> <p>Checks whether HTTP method is OPTIONS. if _SERVER[\"REQUEST_METHOD\"]===\"OPTIONS\"</p> <p>public  isPurge ()</p> <p>Checks whether HTTP method is PURGE (Squid and Varnish support). if _SERVER[\"REQUEST_METHOD\"]===\"PURGE\"</p> <p>public  isTrace ()</p> <p>Checks whether HTTP method is TRACE. if _SERVER[\"REQUEST_METHOD\"]===\"TRACE\"</p> <p>public  isConnect ()</p> <p>Checks whether HTTP method is CONNECT. if _SERVER[\"REQUEST_METHOD\"]===\"CONNECT\"</p> <p>public  hasFiles ([mixed $onlySuccessful])</p> <p>Checks whether request include attached files</p> <p>final protected  hasFileHelper (mixed $data, mixed $onlySuccessful)</p> <p>Recursively counts file in an array of files</p> <p>public  getUploadedFiles ([mixed $onlySuccessful])</p> <p>Gets attached files as Phalcon\\Http\\Request\\File instances</p> <p>final protected  smoothFiles (array $names, array $types, array $tmp_names, array $sizes, array $errors, mixed $prefix)</p> <p>Smooth out $_FILES to have plain array with all files uploaded</p> <p>public  getHeaders ()</p> <p>Returns the available headers in the request</p> <pre><code>&lt;?php\n\n$_SERVER = [\n    \"PHP_AUTH_USER\" =&gt; \"phalcon\",\n    \"PHP_AUTH_PW\"   =&gt; \"secret\",\n];\n\n$headers = $request-&gt;getHeaders();\n\necho $headers[\"Authorization\"]; // Basic cGhhbGNvbjpzZWNyZXQ=\n</code></pre> <p>public  getHTTPReferer ()</p> <p>Gets web page that refers active request. ie: https://www.google.com</p> <p>final protected  _getBestQuality (array $qualityParts, mixed $name)</p> <p>Process a request header and return the one with best quality</p> <p>public  getContentType ()</p> <p>Gets content type which request has been made</p> <p>public  getAcceptableContent ()</p> <p>Gets an array with mime/types and their quality accepted by the browser/client from _SERVER[\"HTTP_ACCEPT\"]</p> <p>public  getBestAccept ()</p> <p>Gets best mime/type accepted by the browser/client from _SERVER[\"HTTP_ACCEPT\"]</p> <p>public  getClientCharsets ()</p> <p>Gets a charsets array and their quality accepted by the browser/client from _SERVER[\"HTTP_ACCEPT_CHARSET\"]</p> <p>public  getBestCharset ()</p> <p>Gets best charset accepted by the browser/client from _SERVER[\"HTTP_ACCEPT_CHARSET\"]</p> <p>public  getLanguages ()</p> <p>Gets languages array and their quality accepted by the browser/client from _SERVER[\"HTTP_ACCEPT_LANGUAGE\"]</p> <p>public  getBestLanguage ()</p> <p>Gets best language accepted by the browser/client from _SERVER[\"HTTP_ACCEPT_LANGUAGE\"]</p> <p>public  getBasicAuth ()</p> <p>Gets auth info accepted by the browser/client from $_SERVER[\"PHP_AUTH_USER\"]</p> <p>public  getDigestAuth ()</p> <p>Gets auth info accepted by the browser/client from $_SERVER[\"PHP_AUTH_DIGEST\"]</p> <p>final protected  _getQualityHeader (mixed $serverIndex, mixed $name)</p> <p>Process a request header and return an array of values with their qualities</p>"},{"location":"api/Phalcon_Http/#class-phalconhttprequestexception","title":"Class Phalcon\\Http\\Request\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Http/#methods_4","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Http/#class-phalconhttprequestfile","title":"Class Phalcon\\Http\\Request\\File","text":"<p>implements Phalcon\\Http\\Request\\FileInterface</p> <p>Source on GitHub</p> <p>Provides OO wrappers to the $_FILES superglobal</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function uploadAction()\n    {\n        // Check if the user has uploaded files\n        if ($this-&gt;request-&gt;hasFiles() == true) {\n            // Print the real file names and their sizes\n            foreach ($this-&gt;request-&gt;getUploadedFiles() as $file) {\n                echo $file-&gt;getName(), \" \", $file-&gt;getSize(), \"\\n\";\n            }\n       }\n    }\n}\n</code></pre>"},{"location":"api/Phalcon_Http/#methods_5","title":"Methods","text":"<p>public  getError ()</p> <p>public  getKey ()</p> <p>public  getExtension ()</p> <p>public  __construct (array $file, [mixed $key])</p> <p>Phalcon\\Http\\Request\\File constructor</p> <p>public  getSize ()</p> <p>Returns the file size of the uploaded file</p> <p>public  getName ()</p> <p>Returns the real name of the uploaded file</p> <p>public  getTempName ()</p> <p>Returns the temporary name of the uploaded file</p> <p>public  getType ()</p> <p>Returns the mime type reported by the browser This mime type is not completely secure, use getRealType() instead</p> <p>public  getRealType ()</p> <p>Gets the real mime type of the upload file using finfo</p> <p>public  isUploadedFile ()</p> <p>Checks whether the file has been uploaded via Post.</p> <p>public  moveTo (mixed $destination)</p> <p>Moves the temporary file to a destination within the application</p>"},{"location":"api/Phalcon_Http/#interface-phalconhttprequestfileinterface","title":"Interface Phalcon\\Http\\Request\\FileInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Http/#methods_6","title":"Methods","text":"<p>abstract public  getSize ()</p> <p>...</p> <p>abstract public  getName ()</p> <p>...</p> <p>abstract public  getTempName ()</p> <p>...</p> <p>abstract public  getType ()</p> <p>...</p> <p>abstract public  getRealType ()</p> <p>...</p> <p>abstract public  moveTo (mixed $destination)</p> <p>...</p>"},{"location":"api/Phalcon_Http/#interface-phalconhttprequestinterface","title":"Interface Phalcon\\Http\\RequestInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Http/#methods_7","title":"Methods","text":"<p>abstract public  get ([mixed $name], [mixed $filters], [mixed $defaultValue])</p> <p>...</p> <p>abstract public  getPost ([mixed $name], [mixed $filters], [mixed $defaultValue])</p> <p>...</p> <p>abstract public  getQuery ([mixed $name], [mixed $filters], [mixed $defaultValue])</p> <p>...</p> <p>abstract public  getServer (mixed $name)</p> <p>...</p> <p>abstract public  has (mixed $name)</p> <p>...</p> <p>abstract public  hasPost (mixed $name)</p> <p>...</p> <p>abstract public  hasPut (mixed $name)</p> <p>...</p> <p>abstract public  hasQuery (mixed $name)</p> <p>...</p> <p>abstract public  hasServer (mixed $name)</p> <p>...</p> <p>abstract public  getHeader (mixed $header)</p> <p>...</p> <p>abstract public  getScheme ()</p> <p>...</p> <p>abstract public  isAjax ()</p> <p>...</p> <p>abstract public  isSoapRequested ()</p> <p>...</p> <p>abstract public  isSecureRequest ()</p> <p>...</p> <p>abstract public  getRawBody ()</p> <p>...</p> <p>abstract public  getServerAddress ()</p> <p>...</p> <p>abstract public  getServerName ()</p> <p>...</p> <p>abstract public  getHttpHost ()</p> <p>...</p> <p>abstract public  getPort ()</p> <p>...</p> <p>abstract public  getClientAddress ([mixed $trustForwardedHeader])</p> <p>...</p> <p>abstract public  getMethod ()</p> <p>...</p> <p>abstract public  getUserAgent ()</p> <p>...</p> <p>abstract public  isMethod (mixed $methods, [mixed $strict])</p> <p>...</p> <p>abstract public  isPost ()</p> <p>...</p> <p>abstract public  isGet ()</p> <p>...</p> <p>abstract public  isPut ()</p> <p>...</p> <p>abstract public  isHead ()</p> <p>...</p> <p>abstract public  isDelete ()</p> <p>...</p> <p>abstract public  isOptions ()</p> <p>...</p> <p>abstract public  isPurge ()</p> <p>...</p> <p>abstract public  isTrace ()</p> <p>...</p> <p>abstract public  isConnect ()</p> <p>...</p> <p>abstract public  hasFiles ([mixed $onlySuccessful])</p> <p>...</p> <p>abstract public  getUploadedFiles ([mixed $onlySuccessful])</p> <p>...</p> <p>abstract public  getHTTPReferer ()</p> <p>...</p> <p>abstract public  getAcceptableContent ()</p> <p>...</p> <p>abstract public  getBestAccept ()</p> <p>...</p> <p>abstract public  getClientCharsets ()</p> <p>...</p> <p>abstract public  getBestCharset ()</p> <p>...</p> <p>abstract public  getLanguages ()</p> <p>...</p> <p>abstract public  getBestLanguage ()</p> <p>...</p> <p>abstract public  getBasicAuth ()</p> <p>...</p> <p>abstract public  getDigestAuth ()</p> <p>...</p>"},{"location":"api/Phalcon_Http/#class-phalconhttpresponse","title":"Class Phalcon\\Http\\Response","text":"<p>implements Phalcon\\Http\\ResponseInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>Part of the HTTP cycle is return responses to the clients. Phalcon\\HTTP\\Response is the Phalcon component responsible to achieve this task. HTTP responses are usually composed by headers and body.</p> <pre><code>&lt;?php\n\n$response = new \\Phalcon\\Http\\Response();\n\n$response-&gt;setStatusCode(200, \"OK\");\n$response-&gt;setContent(\"&lt;html&gt;&lt;body&gt;Hello&lt;/body&gt;&lt;/html&gt;\");\n\n$response-&gt;send();\n</code></pre>"},{"location":"api/Phalcon_Http/#methods_8","title":"Methods","text":"<p>public  __construct ([mixed $content], [mixed $code], [mixed $status])</p> <p>Phalcon\\Http\\Response constructor</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the dependency injector</p> <p>public  getDI ()</p> <p>Returns the internal dependency injector</p> <p>public  setStatusCode (mixed $code, [mixed $message])</p> <p>Sets the HTTP response code</p> <pre><code>&lt;?php\n\n$response-&gt;setStatusCode(404, \"Not Found\");\n</code></pre> <p>public  getStatusCode ()</p> <p>Returns the status code</p> <pre><code>&lt;?php\n\nprint_r(\n    $response-&gt;getStatusCode()\n);\n</code></pre> <p>public  setHeaders (Phalcon\\Http\\Response\\HeadersInterface $headers)</p> <p>Sets a headers bag for the response externally</p> <p>public  getHeaders ()</p> <p>Returns headers set by the user</p> <p>public getReasonPhrase (): string | null</p> <p>Returns the reason phrase from the response status</p> <pre><code>&lt;?php\n\necho $response-&gt;getReasonPhrase();\n</code></pre> <p>public  setCookies (Phalcon\\Http\\Response\\CookiesInterface $cookies)</p> <p>Sets a cookies bag for the response externally</p> <p>public Phalcon\\Http\\Response\\CookiesInterface getCookies ()</p> <p>Returns cookies set by the user</p> <p>public  setHeader (mixed $name, mixed $value)</p> <p>Overwrites a header in the response</p> <pre><code>&lt;?php\n\n$response-&gt;setHeader(\"Content-Type\", \"text/plain\");\n</code></pre> <p>public  setRawHeader (mixed $header)</p> <p>Send a raw header to the response</p> <pre><code>&lt;?php\n\n$response-&gt;setRawHeader(\"HTTP/1.1 404 Not Found\");\n</code></pre> <p>public  resetHeaders ()</p> <p>Resets all the established headers</p> <p>public  setExpires (DateTime $datetime)</p> <p>Sets an Expires header in the response that allows to use the HTTP cache</p> <pre><code>&lt;?php\n\n$this-&gt;response-&gt;setExpires(\n    new DateTime()\n);\n</code></pre> <p>public  setLastModified (DateTime $datetime)</p> <p>Sets Last-Modified header</p> <pre><code>&lt;?php\n\n$this-&gt;response-&gt;setLastModified(\n    new DateTime()\n);\n</code></pre> <p>public  setCache (mixed $minutes)</p> <p>Sets Cache headers to use HTTP cache</p> <pre><code>&lt;?php\n\n$this-&gt;response-&gt;setCache(60);\n</code></pre> <p>public  setNotModified ()</p> <p>Sends a Not-Modified response</p> <p>public  setContentType (mixed $contentType, [mixed $charset])</p> <p>Sets the response content-type mime, optionally the charset</p> <pre><code>&lt;?php\n\n$response-&gt;setContentType(\"application/pdf\");\n$response-&gt;setContentType(\"text/plain\", \"UTF-8\");\n</code></pre> <p>public  setContentLength (mixed $contentLength)</p> <p>Sets the response content-length</p> <pre><code>&lt;?php\n\n$response-&gt;setContentLength(2048);\n</code></pre> <p>public  setEtag (mixed $etag)</p> <p>Set a custom ETag</p> <pre><code>&lt;?php\n\n$response-&gt;setEtag(md5(time()));\n</code></pre> <p>public  redirect ([mixed $location], [mixed $externalRedirect], [mixed $statusCode])</p> <p>Redirect by HTTP to another action or URL</p> <pre><code>&lt;?php\n\n// Using a string redirect (internal/external)\n$response-&gt;redirect(\"posts/index\");\n$response-&gt;redirect(\"https://en.wikipedia.org\", true);\n$response-&gt;redirect(\"https://www.example.com/new-location\", true, 301);\n\n// Making a redirection based on a named route\n$response-&gt;redirect(\n    [\n        \"for\"        =&gt; \"index-lang\",\n        \"lang\"       =&gt; \"jp\",\n        \"controller\" =&gt; \"index\",\n    ]\n);\n</code></pre> <p>public  setContent (mixed $content)</p> <p>Sets HTTP response body</p> <pre><code>&lt;?php\n\n$response-&gt;setContent(\"&lt;h1&gt;Hello!&lt;/h1&gt;\");\n</code></pre> <p>public  setJsonContent (mixed $content, [mixed $jsonOptions], [mixed $depth])</p> <p>Sets HTTP response body. The parameter is automatically converted to JSON and also sets default header: Content-Type: \"application/json; charset=UTF-8\"</p> <pre><code>&lt;?php\n\n$response-&gt;setJsonContent(\n    [\n        \"status\" =&gt; \"OK\",\n    ]\n);\n</code></pre> <p>public  appendContent (mixed $content)</p> <p>Appends a string to the HTTP response body</p> <p>public  getContent ()</p> <p>Gets the HTTP response body</p> <p>public  isSent ()</p> <p>Check if the response is already sent</p> <p>public  sendHeaders ()</p> <p>Sends headers to the client</p> <p>public  sendCookies ()</p> <p>Sends cookies to the client</p> <p>public  send ()</p> <p>Prints out HTTP response to the client</p> <p>public  setFileToSend (mixed $filePath, [mixed $attachmentName], [mixed $attachment])</p> <p>Sets an attached file to be sent at the end of the request</p>"},{"location":"api/Phalcon_Http/#class-phalconhttpresponsecookies","title":"Class Phalcon\\Http\\Response\\Cookies","text":"<p>implements Phalcon\\Http\\Response\\CookiesInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>This class is a bag to manage the cookies A cookies bag is automatically registered as part of the 'response' service in the DI</p>"},{"location":"api/Phalcon_Http/#methods_9","title":"Methods","text":"<p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the dependency injector</p> <p>public  getDI ()</p> <p>Returns the internal dependency injector</p> <p>public setSignKey (string $signKey = null): Phalcon\\Http\\CookieInterface</p> <p>Sets the cookie's sign key. The <code>$signKey</code> MUST be at least 32 characters long and generated using a cryptographically secure pseudo random generator.</p> <p>You can use <code>null</code> to disable cookie signing.</p> <p>See: Phalcon\\Security\\Random Throws: Phalcon\\Http\\Cookie\\Exception</p> <p>public  useEncryption (mixed $useEncryption)</p> <p>Set if cookies in the bag must be automatically encrypted/decrypted</p> <p>public  isUsingEncryption ()</p> <p>Returns if the bag is automatically encrypting/decrypting cookies</p> <p>public  set (mixed $name, [mixed $value], [mixed $expire], [mixed $path], [mixed $secure], [mixed $domain], [mixed $httpOnly])</p> <p>Sets a cookie to be sent at the end of the request This method overrides any cookie set before with the same name</p> <p>public  get (mixed $name)</p> <p>Gets a cookie from the bag</p> <p>public  has (mixed $name)</p> <p>Check if a cookie is defined in the bag or exists in the _COOKIE superglobal</p> <p>public  delete (mixed $name)</p> <p>Deletes a cookie by its name This method does not removes cookies from the _COOKIE superglobal</p> <p>public  send ()</p> <p>Sends the cookies to the client Cookies aren't sent if headers are sent in the current request</p> <p>public  reset ()</p> <p>Reset set cookies</p>"},{"location":"api/Phalcon_Http/#interface-phalconhttpresponsecookiesinterface","title":"Interface Phalcon\\Http\\Response\\CookiesInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Http/#methods_10","title":"Methods","text":"<p>abstract public  useEncryption (mixed $useEncryption)</p> <p>...</p> <p>abstract public  isUsingEncryption ()</p> <p>...</p> <p>abstract public  set (mixed $name, [mixed $value], [mixed $expire], [mixed $path], [mixed $secure], [mixed $domain], [mixed $httpOnly])</p> <p>...</p> <p>abstract public  get (mixed $name)</p> <p>...</p> <p>abstract public  has (mixed $name)</p> <p>...</p> <p>abstract public  delete (mixed $name)</p> <p>...</p> <p>abstract public  send ()</p> <p>...</p> <p>abstract public  reset ()</p> <p>...</p>"},{"location":"api/Phalcon_Http/#class-phalconhttpresponseexception","title":"Class Phalcon\\Http\\Response\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Http/#methods_11","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Http/#class-phalconhttpresponseheaders","title":"Class Phalcon\\Http\\Response\\Headers","text":"<p>implements Phalcon\\Http\\Response\\HeadersInterface</p> <p>Source on GitHub</p> <p>This class is a bag to manage the response headers</p>"},{"location":"api/Phalcon_Http/#methods_12","title":"Methods","text":"<p>public  set (mixed $name, mixed $value)</p> <p>Sets a header to be sent at the end of the request</p> <p>public  get (mixed $name)</p> <p>Gets a header value from the internal bag</p> <p>public  setRaw (mixed $header)</p> <p>Sets a raw header to be sent at the end of the request</p> <p>public  remove (mixed $header)</p> <p>Removes a header to be sent at the end of the request</p> <p>public  send ()</p> <p>Sends the headers to the client</p> <p>public  reset ()</p> <p>Reset set headers</p> <p>public  toArray ()</p> <p>Returns the current headers as an array</p> <p>public static  __set_state (array $data)</p> <p>Restore a \\Phalcon\\Http\\Response\\Headers object</p>"},{"location":"api/Phalcon_Http/#interface-phalconhttpresponseheadersinterface","title":"Interface Phalcon\\Http\\Response\\HeadersInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Http/#methods_13","title":"Methods","text":"<p>abstract public  set (mixed $name, mixed $value)</p> <p>...</p> <p>abstract public  get (mixed $name)</p> <p>...</p> <p>abstract public  setRaw (mixed $header)</p> <p>...</p> <p>abstract public  send ()</p> <p>...</p> <p>abstract public  reset ()</p> <p>...</p> <p>abstract public static  __set_state (array $data)</p> <p>...</p>"},{"location":"api/Phalcon_Http/#interface-phalconhttpresponseinterface","title":"Interface Phalcon\\Http\\ResponseInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Http/#methods_14","title":"Methods","text":"<p>abstract public  setStatusCode (mixed $code, [mixed $message])</p> <p>...</p> <p>abstract public  getHeaders ()</p> <p>...</p> <p>abstract public  setHeader (mixed $name, mixed $value)</p> <p>...</p> <p>abstract public  setRawHeader (mixed $header)</p> <p>...</p> <p>abstract public  resetHeaders ()</p> <p>...</p> <p>abstract public  setExpires (DateTime $datetime)</p> <p>...</p> <p>abstract public  setNotModified ()</p> <p>...</p> <p>abstract public  setContentType (mixed $contentType, [mixed $charset])</p> <p>...</p> <p>abstract public  setContentLength (mixed $contentLength)</p> <p>...</p> <p>abstract public  redirect ([mixed $location], [mixed $externalRedirect], [mixed $statusCode])</p> <p>...</p> <p>abstract public  setContent (mixed $content)</p> <p>...</p> <p>abstract public  setJsonContent (mixed $content)</p> <p>...</p> <p>abstract public  appendContent (mixed $content)</p> <p>...</p> <p>abstract public  getContent ()</p> <p>...</p> <p>abstract public  sendHeaders ()</p> <p>...</p> <p>abstract public  sendCookies ()</p> <p>...</p> <p>abstract public  send ()</p> <p>...</p> <p>abstract public  setFileToSend (mixed $filePath, [mixed $attachmentName])</p> <p>...</p>"},{"location":"api/Phalcon_Image/","title":"Class Phalcon\\Image","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Image/#constants","title":"Constants","text":"<p>integer NONE</p> <p>integer WIDTH</p> <p>integer HEIGHT</p> <p>integer AUTO</p> <p>integer INVERSE</p> <p>integer PRECISE</p> <p>integer TENSILE</p> <p>integer HORIZONTAL</p> <p>integer VERTICAL</p>"},{"location":"api/Phalcon_Image/#abstract-class-phalconimageadapter","title":"Abstract class Phalcon\\Image\\Adapter","text":"<p>implements Phalcon\\Image\\AdapterInterface</p> <p>Source on GitHub</p> <p>All image adapters must use this class</p>"},{"location":"api/Phalcon_Image/#methods","title":"Methods","text":"<p>public  getImage ()</p> <p>...</p> <p>public  getRealpath ()</p> <p>...</p> <p>public  getWidth ()</p> <p>Image width</p> <p>public  getHeight ()</p> <p>Image height</p> <p>public  getType ()</p> <p>Image type Driver dependent</p> <p>public  getMime ()</p> <p>Image mime type</p> <p>public  resize ([mixed $width], [mixed $height], [mixed $master])</p> <p>Resize the image to the given size</p> <p>public  liquidRescale (mixed $width, mixed $height, [mixed $deltaX], [mixed $rigidity])</p> <p>This method scales the images using liquid rescaling method. Only support Imagick</p> <p>public  crop (mixed $width, mixed $height, [mixed $offsetX], [mixed $offsetY])</p> <p>Crop an image to the given size</p> <p>public  rotate (mixed $degrees)</p> <p>Rotate the image by a given amount</p> <p>public  flip (mixed $direction)</p> <p>Flip the image along the horizontal or vertical axis</p> <p>public  sharpen (mixed $amount)</p> <p>Sharpen the image by a given amount</p> <p>public  reflection (mixed $height, [mixed $opacity], [mixed $fadeIn])</p> <p>Add a reflection to an image</p> <p>public  watermark (Phalcon\\Image\\Adapter $watermark, [mixed $offsetX], [mixed $offsetY], [mixed $opacity])</p> <p>Add a watermark to an image with the specified opacity</p> <p>public  text (mixed $text, [mixed $offsetX], [mixed $offsetY], [mixed $opacity], [mixed $color], [mixed $size], [mixed $fontfile])</p> <p>Add a text to an image with a specified opacity</p> <p>public  mask (Phalcon\\Image\\Adapter $watermark)</p> <p>Composite one image onto another</p> <p>public  background (mixed $color, [mixed $opacity])</p> <p>Set the background color of an image</p> <p>public  blur (mixed $radius)</p> <p>Blur image</p> <p>public  pixelate (mixed $amount)</p> <p>Pixelate image</p> <p>public  save ([mixed $file], [mixed $quality])</p> <p>Save the image</p> <p>public  render ([mixed $ext], [mixed $quality])</p> <p>Render the image and return the binary string</p>"},{"location":"api/Phalcon_Image/#class-phalconimageadaptergd","title":"Class Phalcon\\Image\\Adapter\\Gd","text":"<p>extends abstract class Phalcon\\Image\\Adapter</p> <p>implements Phalcon\\Image\\AdapterInterface</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Image/#methods_1","title":"Methods","text":"<p>public static  check ()</p> <p>...</p> <p>public  __construct (mixed $file, [mixed $width], [mixed $height])</p> <p>...</p> <p>protected  _resize (mixed $width, mixed $height)</p> <p>...</p> <p>protected  _crop (mixed $width, mixed $height, mixed $offsetX, mixed $offsetY)</p> <p>...</p> <p>protected  _rotate (mixed $degrees)</p> <p>...</p> <p>protected  _flip (mixed $direction)</p> <p>...</p> <p>protected  _sharpen (mixed $amount)</p> <p>...</p> <p>protected  _reflection (mixed $height, mixed $opacity, mixed $fadeIn)</p> <p>...</p> <p>protected  _watermark (Phalcon\\Image\\Adapter $watermark, mixed $offsetX, mixed $offsetY, mixed $opacity)</p> <p>...</p> <p>protected  _text (mixed $text, mixed $offsetX, mixed $offsetY, mixed $opacity, mixed $r, mixed $g, mixed $b, mixed $size, mixed $fontfile)</p> <p>...</p> <p>protected  _mask (Phalcon\\Image\\Adapter $mask)</p> <p>...</p> <p>protected  _background (mixed $r, mixed $g, mixed $b, mixed $opacity)</p> <p>...</p> <p>protected  _blur (mixed $radius)</p> <p>...</p> <p>protected  _pixelate (mixed $amount)</p> <p>...</p> <p>protected  _save (mixed $file, mixed $quality)</p> <p>...</p> <p>protected  _render (mixed $ext, mixed $quality)</p> <p>...</p> <p>protected  _create (mixed $width, mixed $height)</p> <p>...</p> <p>public  __destruct ()</p> <p>...</p> <p>public  getImage () inherited from Phalcon\\Image\\Adapter</p> <p>...</p> <p>public  getRealpath () inherited from Phalcon\\Image\\Adapter</p> <p>...</p> <p>public  getWidth () inherited from Phalcon\\Image\\Adapter</p> <p>Image width</p> <p>public  getHeight () inherited from Phalcon\\Image\\Adapter</p> <p>Image height</p> <p>public  getType () inherited from Phalcon\\Image\\Adapter</p> <p>Image type Driver dependent</p> <p>public  getMime () inherited from Phalcon\\Image\\Adapter</p> <p>Image mime type</p> <p>public  resize ([mixed $width], [mixed $height], [mixed $master]) inherited from Phalcon\\Image\\Adapter</p> <p>Resize the image to the given size</p> <p>public  liquidRescale (mixed $width, mixed $height, [mixed $deltaX], [mixed $rigidity]) inherited from Phalcon\\Image\\Adapter</p> <p>This method scales the images using liquid rescaling method. Only support Imagick</p> <p>public  crop (mixed $width, mixed $height, [mixed $offsetX], [mixed $offsetY]) inherited from Phalcon\\Image\\Adapter</p> <p>Crop an image to the given size</p> <p>public  rotate (mixed $degrees) inherited from Phalcon\\Image\\Adapter</p> <p>Rotate the image by a given amount</p> <p>public  flip (mixed $direction) inherited from Phalcon\\Image\\Adapter</p> <p>Flip the image along the horizontal or vertical axis</p> <p>public  sharpen (mixed $amount) inherited from Phalcon\\Image\\Adapter</p> <p>Sharpen the image by a given amount</p> <p>public  reflection (mixed $height, [mixed $opacity], [mixed $fadeIn]) inherited from Phalcon\\Image\\Adapter</p> <p>Add a reflection to an image</p> <p>public  watermark (Phalcon\\Image\\Adapter $watermark, [mixed $offsetX], [mixed $offsetY], [mixed $opacity]) inherited from Phalcon\\Image\\Adapter</p> <p>Add a watermark to an image with the specified opacity</p> <p>public  text (mixed $text, [mixed $offsetX], [mixed $offsetY], [mixed $opacity], [mixed $color], [mixed $size], [mixed $fontfile]) inherited from Phalcon\\Image\\Adapter</p> <p>Add a text to an image with a specified opacity</p> <p>public  mask (Phalcon\\Image\\Adapter $watermark) inherited from Phalcon\\Image\\Adapter</p> <p>Composite one image onto another</p> <p>public  background (mixed $color, [mixed $opacity]) inherited from Phalcon\\Image\\Adapter</p> <p>Set the background color of an image</p> <p>public  blur (mixed $radius) inherited from Phalcon\\Image\\Adapter</p> <p>Blur image</p> <p>public  pixelate (mixed $amount) inherited from Phalcon\\Image\\Adapter</p> <p>Pixelate image</p> <p>public  save ([mixed $file], [mixed $quality]) inherited from Phalcon\\Image\\Adapter</p> <p>Save the image</p> <p>public  render ([mixed $ext], [mixed $quality]) inherited from Phalcon\\Image\\Adapter</p> <p>Render the image and return the binary string</p>"},{"location":"api/Phalcon_Image/#class-phalconimageadapterimagick","title":"Class Phalcon\\Image\\Adapter\\Imagick","text":"<p>extends abstract class Phalcon\\Image\\Adapter</p> <p>implements Phalcon\\Image\\AdapterInterface</p> <p>Source on GitHub</p> <p>Image manipulation support. Allows images to be resized, cropped, etc.</p> <pre><code>&lt;?php\n\n$image = new \\Phalcon\\Image\\Adapter\\Imagick(\"upload/test.jpg\");\n\n$image-&gt;resize(200, 200)-&gt;rotate(90)-&gt;crop(100, 100);\n\nif ($image-&gt;save()) {\n    echo \"success\";\n}\n</code></pre>"},{"location":"api/Phalcon_Image/#methods_2","title":"Methods","text":"<p>public static  check ()</p> <p>Checks if Imagick is enabled</p> <p>public  __construct (mixed $file, [mixed $width], [mixed $height])</p> <p>\\Phalcon\\Image\\Adapter\\Imagick constructor</p> <p>protected  _resize (mixed $width, mixed $height)</p> <p>Execute a resize.</p> <p>protected  _liquidRescale (mixed $width, mixed $height, mixed $deltaX, mixed $rigidity)</p> <p>This method scales the images using liquid rescaling method. Only support Imagick</p> <p>protected  _crop (mixed $width, mixed $height, mixed $offsetX, mixed $offsetY)</p> <p>Execute a crop.</p> <p>protected  _rotate (mixed $degrees)</p> <p>Execute a rotation.</p> <p>protected  _flip (mixed $direction)</p> <p>Execute a flip.</p> <p>protected  _sharpen (mixed $amount)</p> <p>Execute a sharpen.</p> <p>protected  _reflection (mixed $height, mixed $opacity, mixed $fadeIn)</p> <p>Execute a reflection.</p> <p>protected  _watermark (Phalcon\\Image\\Adapter $image, mixed $offsetX, mixed $offsetY, mixed $opacity)</p> <p>Execute a watermarking.</p> <p>protected  _text (mixed $text, mixed $offsetX, mixed $offsetY, mixed $opacity, mixed $r, mixed $g, mixed $b, mixed $size, mixed $fontfile)</p> <p>Execute a text</p> <p>protected  _mask (Phalcon\\Image\\Adapter $image)</p> <p>Composite one image onto another</p> <p>protected  _background (mixed $r, mixed $g, mixed $b, mixed $opacity)</p> <p>Execute a background.</p> <p>protected  _blur (mixed $radius)</p> <p>Blur image</p> <p>protected  _pixelate (mixed $amount)</p> <p>Pixelate image</p> <p>protected  _save (mixed $file, mixed $quality)</p> <p>Execute a save.</p> <p>protected  _render (mixed $extension, mixed $quality)</p> <p>Execute a render.</p> <p>public  __destruct ()</p> <p>Destroys the loaded image to free up resources.</p> <p>public  getInternalImInstance ()</p> <p>Get instance</p> <p>public  setResourceLimit (mixed $type, mixed $limit)</p> <p>Sets the limit for a particular resource in megabytes</p> <p>public  getImage () inherited from Phalcon\\Image\\Adapter</p> <p>...</p> <p>public  getRealpath () inherited from Phalcon\\Image\\Adapter</p> <p>...</p> <p>public  getWidth () inherited from Phalcon\\Image\\Adapter</p> <p>Image width</p> <p>public  getHeight () inherited from Phalcon\\Image\\Adapter</p> <p>Image height</p> <p>public  getType () inherited from Phalcon\\Image\\Adapter</p> <p>Image type Driver dependent</p> <p>public  getMime () inherited from Phalcon\\Image\\Adapter</p> <p>Image mime type</p> <p>public  resize ([mixed $width], [mixed $height], [mixed $master]) inherited from Phalcon\\Image\\Adapter</p> <p>Resize the image to the given size</p> <p>public  liquidRescale (mixed $width, mixed $height, [mixed $deltaX], [mixed $rigidity]) inherited from Phalcon\\Image\\Adapter</p> <p>This method scales the images using liquid rescaling method. Only support Imagick</p> <p>public  crop (mixed $width, mixed $height, [mixed $offsetX], [mixed $offsetY]) inherited from Phalcon\\Image\\Adapter</p> <p>Crop an image to the given size</p> <p>public  rotate (mixed $degrees) inherited from Phalcon\\Image\\Adapter</p> <p>Rotate the image by a given amount</p> <p>public  flip (mixed $direction) inherited from Phalcon\\Image\\Adapter</p> <p>Flip the image along the horizontal or vertical axis</p> <p>public  sharpen (mixed $amount) inherited from Phalcon\\Image\\Adapter</p> <p>Sharpen the image by a given amount</p> <p>public  reflection (mixed $height, [mixed $opacity], [mixed $fadeIn]) inherited from Phalcon\\Image\\Adapter</p> <p>Add a reflection to an image</p> <p>public  watermark (Phalcon\\Image\\Adapter $watermark, [mixed $offsetX], [mixed $offsetY], [mixed $opacity]) inherited from Phalcon\\Image\\Adapter</p> <p>Add a watermark to an image with the specified opacity</p> <p>public  text (mixed $text, [mixed $offsetX], [mixed $offsetY], [mixed $opacity], [mixed $color], [mixed $size], [mixed $fontfile]) inherited from Phalcon\\Image\\Adapter</p> <p>Add a text to an image with a specified opacity</p> <p>public  mask (Phalcon\\Image\\Adapter $watermark) inherited from Phalcon\\Image\\Adapter</p> <p>Composite one image onto another</p> <p>public  background (mixed $color, [mixed $opacity]) inherited from Phalcon\\Image\\Adapter</p> <p>Set the background color of an image</p> <p>public  blur (mixed $radius) inherited from Phalcon\\Image\\Adapter</p> <p>Blur image</p> <p>public  pixelate (mixed $amount) inherited from Phalcon\\Image\\Adapter</p> <p>Pixelate image</p> <p>public  save ([mixed $file], [mixed $quality]) inherited from Phalcon\\Image\\Adapter</p> <p>Save the image</p> <p>public  render ([mixed $ext], [mixed $quality]) inherited from Phalcon\\Image\\Adapter</p> <p>Render the image and return the binary string</p>"},{"location":"api/Phalcon_Image/#interface-phalconimageadapterinterface","title":"Interface Phalcon\\Image\\AdapterInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Image/#methods_3","title":"Methods","text":"<p>abstract public  resize ([mixed $width], [mixed $height], [mixed $master])</p> <p>...</p> <p>abstract public  crop (mixed $width, mixed $height, [mixed $offsetX], [mixed $offsetY])</p> <p>...</p> <p>abstract public  rotate (mixed $degrees)</p> <p>...</p> <p>abstract public  flip (mixed $direction)</p> <p>...</p> <p>abstract public  sharpen (mixed $amount)</p> <p>...</p> <p>abstract public  reflection (mixed $height, [mixed $opacity], [mixed $fadeIn])</p> <p>...</p> <p>abstract public  watermark (Phalcon\\Image\\Adapter $watermark, [mixed $offsetX], [mixed $offsetY], [mixed $opacity])</p> <p>...</p> <p>abstract public  text (mixed $text, [mixed $offsetX], [mixed $offsetY], [mixed $opacity], [mixed $color], [mixed $size], [mixed $fontfile])</p> <p>...</p> <p>abstract public  mask (Phalcon\\Image\\Adapter $watermark)</p> <p>...</p> <p>abstract public  background (mixed $color, [mixed $opacity])</p> <p>...</p> <p>abstract public  blur (mixed $radius)</p> <p>...</p> <p>abstract public  pixelate (mixed $amount)</p> <p>...</p> <p>abstract public  save ([mixed $file], [mixed $quality])</p> <p>...</p> <p>abstract public  render ([mixed $ext], [mixed $quality])</p> <p>...</p>"},{"location":"api/Phalcon_Image/#class-phalconimageexception","title":"Class Phalcon\\Image\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Image/#methods_4","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Image/#class-phalconimagefactory","title":"Class Phalcon\\Image\\Factory","text":"<p>extends abstract class Phalcon\\Factory</p> <p>implements Phalcon\\FactoryInterface</p> <p>Source on GitHub</p> <p>Loads Image Adapter class using 'adapter' option</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Factory;\n\n$options = [\n    \"width\"   =&gt; 200,\n    \"height\"  =&gt; 200,\n    \"file\"    =&gt; \"upload/test.jpg\",\n    \"adapter\" =&gt; \"imagick\",\n];\n$image = Factory::load($options);\n</code></pre>"},{"location":"api/Phalcon_Image/#methods_5","title":"Methods","text":"<p>public static  load (Phalcon\\Config | array $config)</p> <p>protected static  loadClass (mixed $namespace, mixed $config)</p> <p>...</p>"},{"location":"api/Phalcon_Kernel/","title":"Class Phalcon\\Kernel","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Kernel/#methods","title":"Methods","text":"<p>public static preComputeHashKey (mixed $key)</p> <p>...</p>"},{"location":"api/Phalcon_Loader/","title":"Class Phalcon\\Loader","text":"<p>implements Phalcon\\Events\\EventsAwareInterface</p> <p>Source on GitHub</p> <p>This component helps to load your project classes automatically based on some conventions</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n// Creates the autoloader\n$loader = new Loader();\n\n// Register some namespaces\n$loader-&gt;registerNamespaces(\n    [\n        \"Example\\Base\"    =&gt; \"vendor/example/base/\",\n        \"Example\\Adapter\" =&gt; \"vendor/example/adapter/\",\n        \"Example\"          =&gt; \"vendor/example/\",\n    ]\n);\n\n// Register autoloader\n$loader-&gt;register();\n\n// Requiring this class will automatically include file vendor/example/adapter/Some.php\n$adapter = new \\Example\\Adapter\\Some();\n</code></pre>"},{"location":"api/Phalcon_Loader/#methods","title":"Methods","text":"<p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager)</p> <p>Sets the events manager</p> <p>public  getEventsManager ()</p> <p>Returns the internal event manager</p> <p>public  setExtensions (array $extensions)</p> <p>Sets an array of file extensions that the loader must try in each attempt to locate the file</p> <p>public  getExtensions ()</p> <p>Returns the file extensions registered in the loader</p> <p>public  registerNamespaces (array $namespaces, [mixed $merge])</p> <p>Register namespaces and their related directories</p> <p>public setFileCheckingCallback (mixed $callback = null): Phalcon\\Loader</p> <p>Sets the file check callback.</p> <pre><code>&lt;?php\n\n// Default behavior.\n$loader-&gt;setFileCheckingCallback(\"is_file\");\n\n// Faster than `is_file()`, but implies some issues if\n// the file is removed from the filesystem.\n$loader-&gt;setFileCheckingCallback(\"stream_resolve_include_path\");\n\n// Do not check file existence.\n$loader-&gt;setFileCheckingCallback(null);\n</code></pre> <p>A Phalcon\\Loader\\Exception is thrown if the $callback parameter is not a <code>callable</code> or <code>null</code>;</p> <p>protected  prepareNamespace (array $namespace)</p> <p>...</p> <p>public  getNamespaces ()</p> <p>Returns the namespaces currently registered in the autoloader</p> <p>public  registerDirs (array $directories, [mixed $merge])</p> <p>Register directories in which \"not found\" classes could be found</p> <p>public  getDirs ()</p> <p>Returns the directories currently registered in the autoloader</p> <p>public  registerFiles (array $files, [mixed $merge])</p> <p>Registers files that are \"non-classes\" hence need a \"require\". This is very useful for including files that only have functions</p> <p>public  getFiles ()</p> <p>Returns the files currently registered in the autoloader</p> <p>public  registerClasses (array $classes, [mixed $merge])</p> <p>Register classes and their locations</p> <p>public  getClasses ()</p> <p>Returns the class-map currently registered in the autoloader</p> <p>public  register ([mixed $prepend])</p> <p>Register the autoload method</p> <p>public  unregister ()</p> <p>Unregister the autoload method</p> <p>public  loadFiles ()</p> <p>Checks if a file exists and then adds the file by doing virtual require</p> <p>public  autoLoad (mixed $className)</p> <p>Autoloads the registered classes</p> <p>public  getFoundPath ()</p> <p>Get the path when a class was found</p> <p>public  getCheckedPath ()</p> <p>Get the path the loader is checking for a path</p>"},{"location":"api/Phalcon_Loader/#class-phalconloaderexception","title":"Class Phalcon\\Loader\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Loader/#methods_1","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Logger/","title":"Abstract class Phalcon\\Logger","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Logger/#constants","title":"Constants","text":"<p>integer SPECIAL</p> <p>integer CUSTOM</p> <p>integer DEBUG</p> <p>integer INFO</p> <p>integer NOTICE</p> <p>integer WARNING</p> <p>integer ERROR</p> <p>integer ALERT</p> <p>integer CRITICAL</p> <p>integer EMERGENCE</p> <p>integer EMERGENCY</p>"},{"location":"api/Phalcon_Logger/#abstract-class-phalconloggeradapter","title":"Abstract class Phalcon\\Logger\\Adapter","text":"<p>implements Phalcon\\Logger\\AdapterInterface</p> <p>Source on GitHub</p> <p>Base class for Phalcon\\Logger adapters</p>"},{"location":"api/Phalcon_Logger/#methods","title":"Methods","text":"<p>public  setLogLevel (mixed $level)</p> <p>Filters the logs sent to the handlers that are less or equal than a specific level</p> <p>public  getLogLevel ()</p> <p>Returns the current log level</p> <p>public  setFormatter (Phalcon\\Logger\\FormatterInterface $formatter)</p> <p>Sets the message formatter</p> <p>public  begin ()</p> <p>Starts a transaction</p> <p>public  commit ()</p> <p>Commits the internal transaction</p> <p>public  rollback ()</p> <p>Rollbacks the internal transaction</p> <p>public  isTransaction ()</p> <p>Returns the whether the logger is currently in an active transaction or not</p> <p>public  critical (mixed $message, [array $context])</p> <p>Sends/Writes a critical message to the log</p> <p>public  emergency (mixed $message, [array $context])</p> <p>Sends/Writes an emergency message to the log</p> <p>public  debug (mixed $message, [array $context])</p> <p>Sends/Writes a debug message to the log</p> <p>public  error (mixed $message, [array $context])</p> <p>Sends/Writes an error message to the log</p> <p>public  info (mixed $message, [array $context])</p> <p>Sends/Writes an info message to the log</p> <p>public  notice (mixed $message, [array $context])</p> <p>Sends/Writes a notice message to the log</p> <p>public  warning (mixed $message, [array $context])</p> <p>Sends/Writes a warning message to the log</p> <p>public  alert (mixed $message, [array $context])</p> <p>Sends/Writes an alert message to the log</p> <p>public  log (mixed $type, [mixed $message], [array $context])</p> <p>Logs messages to the internal logger. Appends logs to the logger</p> <p>abstract public  getFormatter () inherited from Phalcon\\Logger\\AdapterInterface</p> <p>...</p> <p>abstract public  close () inherited from Phalcon\\Logger\\AdapterInterface</p> <p>...</p>"},{"location":"api/Phalcon_Logger/#class-phalconloggeradapterfile","title":"Class Phalcon\\Logger\\Adapter\\File","text":"<p>extends abstract class Phalcon\\Logger\\Adapter</p> <p>implements Phalcon\\Logger\\AdapterInterface</p> <p>Source on GitHub</p> <p>Adapter to store logs in plain text files</p> <pre><code>&lt;?php\n\n$logger = new \\Phalcon\\Logger\\Adapter\\File(\"app/logs/test.log\");\n\n$logger-&gt;log(\"This is a message\");\n$logger-&gt;log(\\Phalcon\\Logger::ERROR, \"This is an error\");\n$logger-&gt;error(\"This is another error\");\n\n$logger-&gt;close();\n</code></pre>"},{"location":"api/Phalcon_Logger/#methods_1","title":"Methods","text":"<p>public  getPath ()</p> <p>File Path</p> <p>public  __construct (string $name, [array $options])</p> <p>Phalcon\\Logger\\Adapter\\File constructor</p> <p>public  getFormatter ()</p> <p>Returns the internal formatter</p> <p>public  logInternal (mixed $message, mixed $type, mixed $time, array $context)</p> <p>Writes the log to the file itself</p> <p>public  close ()</p> <p>Closes the logger</p> <p>public  __wakeup ()</p> <p>Opens the internal file handler after unserialization</p> <p>public  setLogLevel (mixed $level) inherited from Phalcon\\Logger\\Adapter</p> <p>Filters the logs sent to the handlers that are less or equal than a specific level</p> <p>public  getLogLevel () inherited from Phalcon\\Logger\\Adapter</p> <p>Returns the current log level</p> <p>public  setFormatter (Phalcon\\Logger\\FormatterInterface $formatter) inherited from Phalcon\\Logger\\Adapter</p> <p>Sets the message formatter</p> <p>public  begin () inherited from Phalcon\\Logger\\Adapter</p> <p>Starts a transaction</p> <p>public  commit () inherited from Phalcon\\Logger\\Adapter</p> <p>Commits the internal transaction</p> <p>public  rollback () inherited from Phalcon\\Logger\\Adapter</p> <p>Rollbacks the internal transaction</p> <p>public  isTransaction () inherited from Phalcon\\Logger\\Adapter</p> <p>Returns the whether the logger is currently in an active transaction or not</p> <p>public  critical (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes a critical message to the log</p> <p>public  emergency (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes an emergency message to the log</p> <p>public  debug (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes a debug message to the log</p> <p>public  error (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes an error message to the log</p> <p>public  info (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes an info message to the log</p> <p>public  notice (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes a notice message to the log</p> <p>public  warning (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes a warning message to the log</p> <p>public  alert (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes an alert message to the log</p> <p>public  log (mixed $type, [mixed $message], [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Logs messages to the internal logger. Appends logs to the logger</p>"},{"location":"api/Phalcon_Logger/#class-phalconloggeradapterfirephp","title":"Class Phalcon\\Logger\\Adapter\\Firephp","text":"<p>extends abstract class Phalcon\\Logger\\Adapter</p> <p>implements Phalcon\\Logger\\AdapterInterface</p> <p>Source on GitHub</p> <p>Sends logs to FirePHP</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger\\Adapter\\Firephp;\nuse Phalcon\\Logger;\n\n$logger = new Firephp();\n\n$logger-&gt;log(Logger::ERROR, \"This is an error\");\n$logger-&gt;error(\"This is another error\");\n</code></pre>"},{"location":"api/Phalcon_Logger/#methods_2","title":"Methods","text":"<p>public  getFormatter ()</p> <p>Returns the internal formatter</p> <p>public  logInternal (mixed $message, mixed $type, mixed $time, array $context)</p> <p>Writes the log to the stream itself</p> <p>public  close ()</p> <p>Closes the logger</p> <p>public  setLogLevel (mixed $level) inherited from Phalcon\\Logger\\Adapter</p> <p>Filters the logs sent to the handlers that are less or equal than a specific level</p> <p>public  getLogLevel () inherited from Phalcon\\Logger\\Adapter</p> <p>Returns the current log level</p> <p>public  setFormatter (Phalcon\\Logger\\FormatterInterface $formatter) inherited from Phalcon\\Logger\\Adapter</p> <p>Sets the message formatter</p> <p>public  begin () inherited from Phalcon\\Logger\\Adapter</p> <p>Starts a transaction</p> <p>public  commit () inherited from Phalcon\\Logger\\Adapter</p> <p>Commits the internal transaction</p> <p>public  rollback () inherited from Phalcon\\Logger\\Adapter</p> <p>Rollbacks the internal transaction</p> <p>public  isTransaction () inherited from Phalcon\\Logger\\Adapter</p> <p>Returns the whether the logger is currently in an active transaction or not</p> <p>public  critical (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes a critical message to the log</p> <p>public  emergency (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes an emergency message to the log</p> <p>public  debug (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes a debug message to the log</p> <p>public  error (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes an error message to the log</p> <p>public  info (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes an info message to the log</p> <p>public  notice (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes a notice message to the log</p> <p>public  warning (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes a warning message to the log</p> <p>public  alert (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes an alert message to the log</p> <p>public  log (mixed $type, [mixed $message], [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Logs messages to the internal logger. Appends logs to the logger</p>"},{"location":"api/Phalcon_Logger/#class-phalconloggeradapterstream","title":"Class Phalcon\\Logger\\Adapter\\Stream","text":"<p>extends abstract class Phalcon\\Logger\\Adapter</p> <p>implements Phalcon\\Logger\\AdapterInterface</p> <p>Source on GitHub</p> <p>Sends logs to a valid PHP stream</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\n\n$logger = new Stream(\"php://stderr\");\n\n$logger-&gt;log(\"This is a message\");\n$logger-&gt;log(Logger::ERROR, \"This is an error\");\n$logger-&gt;error(\"This is another error\");\n</code></pre>"},{"location":"api/Phalcon_Logger/#methods_3","title":"Methods","text":"<p>public  __construct (string $name, [array $options])</p> <p>Phalcon\\Logger\\Adapter\\Stream constructor</p> <p>public  getFormatter ()</p> <p>Returns the internal formatter</p> <p>public  logInternal (mixed $message, mixed $type, mixed $time, array $context)</p> <p>Writes the log to the stream itself</p> <p>public  close ()</p> <p>Closes the logger</p> <p>public  setLogLevel (mixed $level) inherited from Phalcon\\Logger\\Adapter</p> <p>Filters the logs sent to the handlers that are less or equal than a specific level</p> <p>public  getLogLevel () inherited from Phalcon\\Logger\\Adapter</p> <p>Returns the current log level</p> <p>public  setFormatter (Phalcon\\Logger\\FormatterInterface $formatter) inherited from Phalcon\\Logger\\Adapter</p> <p>Sets the message formatter</p> <p>public  begin () inherited from Phalcon\\Logger\\Adapter</p> <p>Starts a transaction</p> <p>public  commit () inherited from Phalcon\\Logger\\Adapter</p> <p>Commits the internal transaction</p> <p>public  rollback () inherited from Phalcon\\Logger\\Adapter</p> <p>Rollbacks the internal transaction</p> <p>public  isTransaction () inherited from Phalcon\\Logger\\Adapter</p> <p>Returns the whether the logger is currently in an active transaction or not</p> <p>public  critical (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes a critical message to the log</p> <p>public  emergency (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes an emergency message to the log</p> <p>public  debug (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes a debug message to the log</p> <p>public  error (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes an error message to the log</p> <p>public  info (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes an info message to the log</p> <p>public  notice (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes a notice message to the log</p> <p>public  warning (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes a warning message to the log</p> <p>public  alert (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes an alert message to the log</p> <p>public  log (mixed $type, [mixed $message], [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Logs messages to the internal logger. Appends logs to the logger</p>"},{"location":"api/Phalcon_Logger/#class-phalconloggeradaptersyslog","title":"Class Phalcon\\Logger\\Adapter\\Syslog","text":"<p>extends abstract class Phalcon\\Logger\\Adapter</p> <p>implements Phalcon\\Logger\\AdapterInterface</p> <p>Source on GitHub</p> <p>Sends logs to the system logger</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Syslog;\n\n// LOG_USER is the only valid log type under Windows operating systems\n$logger = new Syslog(\n    \"ident\",\n    [\n        \"option\"   =&gt; LOG_CONS | LOG_NDELAY | LOG_PID,\n        \"facility\" =&gt; LOG_USER,\n    ]\n);\n\n$logger-&gt;log(\"This is a message\");\n$logger-&gt;log(Logger::ERROR, \"This is an error\");\n$logger-&gt;error(\"This is another error\");\n</code></pre>"},{"location":"api/Phalcon_Logger/#methods_4","title":"Methods","text":"<p>public  __construct (string $name, [array $options])</p> <p>Phalcon\\Logger\\Adapter\\Syslog constructor</p> <p>public  getFormatter ()</p> <p>Returns the internal formatter</p> <p>public  logInternal (mixed $message, mixed $type, mixed $time, array $context)</p> <p>Writes the log to the stream itself</p> <p>public  close ()</p> <p>Closes the logger</p> <p>public  setLogLevel (mixed $level) inherited from Phalcon\\Logger\\Adapter</p> <p>Filters the logs sent to the handlers that are less or equal than a specific level</p> <p>public  getLogLevel () inherited from Phalcon\\Logger\\Adapter</p> <p>Returns the current log level</p> <p>public  setFormatter (Phalcon\\Logger\\FormatterInterface $formatter) inherited from Phalcon\\Logger\\Adapter</p> <p>Sets the message formatter</p> <p>public  begin () inherited from Phalcon\\Logger\\Adapter</p> <p>Starts a transaction</p> <p>public  commit () inherited from Phalcon\\Logger\\Adapter</p> <p>Commits the internal transaction</p> <p>public  rollback () inherited from Phalcon\\Logger\\Adapter</p> <p>Rollbacks the internal transaction</p> <p>public  isTransaction () inherited from Phalcon\\Logger\\Adapter</p> <p>Returns the whether the logger is currently in an active transaction or not</p> <p>public  critical (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes a critical message to the log</p> <p>public  emergency (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes an emergency message to the log</p> <p>public  debug (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes a debug message to the log</p> <p>public  error (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes an error message to the log</p> <p>public  info (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes an info message to the log</p> <p>public  notice (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes a notice message to the log</p> <p>public  warning (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes a warning message to the log</p> <p>public  alert (mixed $message, [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Sends/Writes an alert message to the log</p> <p>public  log (mixed $type, [mixed $message], [array $context]) inherited from Phalcon\\Logger\\Adapter</p> <p>Logs messages to the internal logger. Appends logs to the logger</p>"},{"location":"api/Phalcon_Logger/#interface-phalconloggeradapterinterface","title":"Interface Phalcon\\Logger\\AdapterInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Logger/#methods_5","title":"Methods","text":"<p>abstract public  setFormatter (Phalcon\\Logger\\FormatterInterface $formatter)</p> <p>...</p> <p>abstract public  getFormatter ()</p> <p>...</p> <p>abstract public  setLogLevel (mixed $level)</p> <p>...</p> <p>abstract public  getLogLevel ()</p> <p>...</p> <p>abstract public  log (mixed $type, [mixed $message], [array $context])</p> <p>...</p> <p>abstract public  begin ()</p> <p>...</p> <p>abstract public  commit ()</p> <p>...</p> <p>abstract public  rollback ()</p> <p>...</p> <p>abstract public  close ()</p> <p>...</p> <p>abstract public  debug (mixed $message, [array $context])</p> <p>...</p> <p>abstract public  error (mixed $message, [array $context])</p> <p>...</p> <p>abstract public  info (mixed $message, [array $context])</p> <p>...</p> <p>abstract public  notice (mixed $message, [array $context])</p> <p>...</p> <p>abstract public  warning (mixed $message, [array $context])</p> <p>...</p> <p>abstract public  alert (mixed $message, [array $context])</p> <p>...</p> <p>abstract public  emergency (mixed $message, [array $context])</p> <p>...</p>"},{"location":"api/Phalcon_Logger/#class-phalconloggerexception","title":"Class Phalcon\\Logger\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Logger/#methods_6","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Logger/#class-phalconloggerfactory","title":"Class Phalcon\\Logger\\Factory","text":"<p>extends abstract class Phalcon\\Factory</p> <p>implements Phalcon\\FactoryInterface</p> <p>Source on GitHub</p> <p>Loads Logger Adapter class using 'adapter' option</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger\\Factory;\n\n$options = [\n    \"name\"    =&gt; \"log.txt\",\n    \"adapter\" =&gt; \"file\",\n];\n$logger = Factory::load($options);\n</code></pre>"},{"location":"api/Phalcon_Logger/#methods_7","title":"Methods","text":"<p>public static  load (Phalcon\\Config | array $config)</p> <p>protected static  loadClass (mixed $namespace, mixed $config)</p> <p>...</p>"},{"location":"api/Phalcon_Logger/#abstract-class-phalconloggerformatter","title":"Abstract class Phalcon\\Logger\\Formatter","text":"<p>implements Phalcon\\Logger\\FormatterInterface</p> <p>Source on GitHub</p> <p>This is a base class for logger formatters</p>"},{"location":"api/Phalcon_Logger/#methods_8","title":"Methods","text":"<p>public  getTypeString (mixed $type)</p> <p>Returns the string meaning of a logger constant</p> <p>public  interpolate (string $message, [array $context])</p> <p>Interpolates context values into the message placeholders</p> <p>abstract public  format (mixed $message, mixed $type, mixed $timestamp, [mixed $context]) inherited from Phalcon\\Logger\\FormatterInterface</p> <p>...</p>"},{"location":"api/Phalcon_Logger/#class-phalconloggerformatterfirephp","title":"Class Phalcon\\Logger\\Formatter\\Firephp","text":"<p>extends abstract class Phalcon\\Logger\\Formatter</p> <p>implements Phalcon\\Logger\\FormatterInterface</p> <p>Source on GitHub</p> <p>Formats messages so that they can be sent to FirePHP</p>"},{"location":"api/Phalcon_Logger/#methods_9","title":"Methods","text":"<p>public  getTypeString (mixed $type)</p> <p>Returns the string meaning of a logger constant</p> <p>public  setShowBacktrace ([mixed $isShow])</p> <p>Returns the string meaning of a logger constant</p> <p>public  getShowBacktrace ()</p> <p>Returns the string meaning of a logger constant</p> <p>public  enableLabels ([mixed $isEnable])</p> <p>Returns the string meaning of a logger constant</p> <p>public  labelsEnabled ()</p> <p>Returns the labels enabled</p> <p>public string format (string $message, int $type, int $timestamp, [array $context])</p> <p>Applies a format to a message before sending it to the log</p> <p>public  interpolate (string $message, [array $context]) inherited from Phalcon\\Logger\\Formatter</p> <p>Interpolates context values into the message placeholders</p>"},{"location":"api/Phalcon_Logger/#class-phalconloggerformatterjson","title":"Class Phalcon\\Logger\\Formatter\\Json","text":"<p>extends abstract class Phalcon\\Logger\\Formatter</p> <p>implements Phalcon\\Logger\\FormatterInterface</p> <p>Source on GitHub</p> <p>Formats messages using JSON encoding</p>"},{"location":"api/Phalcon_Logger/#methods_10","title":"Methods","text":"<p>public string format (string $message, int $type, int $timestamp, [array $context])</p> <p>Applies a format to a message before sent it to the internal log</p> <p>public  getTypeString (mixed $type) inherited from Phalcon\\Logger\\Formatter</p> <p>Returns the string meaning of a logger constant</p> <p>public  interpolate (string $message, [array $context]) inherited from Phalcon\\Logger\\Formatter</p> <p>Interpolates context values into the message placeholders</p>"},{"location":"api/Phalcon_Logger/#class-phalconloggerformatterline","title":"Class Phalcon\\Logger\\Formatter\\Line","text":"<p>extends abstract class Phalcon\\Logger\\Formatter</p> <p>implements Phalcon\\Logger\\FormatterInterface</p> <p>Source on GitHub</p> <p>Formats messages using an one-line string</p>"},{"location":"api/Phalcon_Logger/#methods_11","title":"Methods","text":"<p>public  getDateFormat ()</p> <p>Default date format</p> <p>public  setDateFormat (mixed $dateFormat)</p> <p>Default date format</p> <p>public  getFormat ()</p> <p>Format applied to each message</p> <p>public  setFormat (mixed $format)</p> <p>Format applied to each message</p> <p>public  __construct ([string $format], [string $dateFormat])</p> <p>Phalcon\\Logger\\Formatter\\Line construct</p> <p>public string format (string $message, int $type, int $timestamp, [array $context])</p> <p>Applies a format to a message before sent it to the internal log</p> <p>public  getTypeString (mixed $type) inherited from Phalcon\\Logger\\Formatter</p> <p>Returns the string meaning of a logger constant</p> <p>public  interpolate (string $message, [array $context]) inherited from Phalcon\\Logger\\Formatter</p> <p>Interpolates context values into the message placeholders</p>"},{"location":"api/Phalcon_Logger/#class-phalconloggerformattersyslog","title":"Class Phalcon\\Logger\\Formatter\\Syslog","text":"<p>extends abstract class Phalcon\\Logger\\Formatter</p> <p>implements Phalcon\\Logger\\FormatterInterface</p> <p>Source on GitHub</p> <p>Prepares a message to be used in a Syslog backend</p>"},{"location":"api/Phalcon_Logger/#methods_12","title":"Methods","text":"<p>public array format (string $message, int $type, int $timestamp, [array $context])</p> <p>Applies a format to a message before sent it to the internal log</p> <p>public  getTypeString (mixed $type) inherited from Phalcon\\Logger\\Formatter</p> <p>Returns the string meaning of a logger constant</p> <p>public  interpolate (string $message, [array $context]) inherited from Phalcon\\Logger\\Formatter</p> <p>Interpolates context values into the message placeholders</p>"},{"location":"api/Phalcon_Logger/#interface-phalconloggerformatterinterface","title":"Interface Phalcon\\Logger\\FormatterInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Logger/#methods_13","title":"Methods","text":"<p>abstract public  format (mixed $message, mixed $type, mixed $timestamp, [mixed $context])</p> <p>...</p>"},{"location":"api/Phalcon_Logger/#class-phalconloggeritem","title":"Class Phalcon\\Logger\\Item","text":"<p>Source on GitHub</p> <p>Represents each item in a logging transaction</p>"},{"location":"api/Phalcon_Logger/#methods_14","title":"Methods","text":"<p>public  getType ()</p> <p>Log type</p> <p>public  getMessage ()</p> <p>Log message</p> <p>public  getTime ()</p> <p>Log timestamp</p> <p>public  getContext ()</p> <p>...</p> <p>public  __construct (string $message, integer $type, [integer $time], [array $context])</p> <p>Phalcon\\Logger\\Item constructor</p>"},{"location":"api/Phalcon_Logger/#class-phalconloggermultiple","title":"Class Phalcon\\Logger\\Multiple","text":"<p>Source on GitHub</p> <p>Handles multiples logger handlers</p>"},{"location":"api/Phalcon_Logger/#methods_15","title":"Methods","text":"<p>public  getLoggers ()</p> <p>...</p> <p>public  getFormatter ()</p> <p>...</p> <p>public  getLogLevel ()</p> <p>...</p> <p>public  push (Phalcon\\Logger\\AdapterInterface $logger)</p> <p>Pushes a logger to the logger tail</p> <p>public  setFormatter (Phalcon\\Logger\\FormatterInterface $formatter)</p> <p>Sets a global formatter</p> <p>public  setLogLevel (mixed $level)</p> <p>Sets a global level</p> <p>public  log (mixed $type, [mixed $message], [array $context])</p> <p>Sends a message to each registered logger</p> <p>public  critical (mixed $message, [array $context])</p> <p>Sends/Writes an critical message to the log</p> <p>public  emergency (mixed $message, [array $context])</p> <p>Sends/Writes an emergency message to the log</p> <p>public  debug (mixed $message, [array $context])</p> <p>Sends/Writes a debug message to the log</p> <p>public  error (mixed $message, [array $context])</p> <p>Sends/Writes an error message to the log</p> <p>public  info (mixed $message, [array $context])</p> <p>Sends/Writes an info message to the log</p> <p>public  notice (mixed $message, [array $context])</p> <p>Sends/Writes a notice message to the log</p> <p>public  warning (mixed $message, [array $context])</p> <p>Sends/Writes a warning message to the log</p> <p>public  alert (mixed $message, [array $context])</p> <p>Sends/Writes an alert message to the log</p>"},{"location":"api/Phalcon_Mvc_Application/","title":"Class Phalcon\\Mvc\\Application","text":"<p>extends abstract class Phalcon\\Application</p> <p>implements Phalcon\\Di\\InjectionAwareInterface, Phalcon\\Events\\EventsAwareInterface</p> <p>Source on GitHub</p> <p>This component encapsulates all the complex operations behind instantiating every component needed and integrating it with the rest to allow the MVC pattern to operate as desired.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Application;\n\nclass MyApp extends Application\n{\n    /**\n     * Register the services here to make them general or register\n     * in the ModuleDefinition to make them module-specific\n     */\n    protected function registerServices()\n    {\n\n    }\n\n    /**\n     * This method registers all the modules in the application\n     */\n    public function main()\n    {\n        $this-&gt;registerModules(\n            [\n                \"frontend\" =&gt; [\n                    \"className\" =&gt; \"Multiple\\Frontend\\Module\",\n                    \"path\"      =&gt; \"../apps/frontend/Module.php\",\n                ],\n                \"backend\" =&gt; [\n                    \"className\" =&gt; \"Multiple\\Backend\\Module\",\n                    \"path\"      =&gt; \"../apps/backend/Module.php\",\n                ],\n            ]\n        );\n    }\n}\n\n$application = new MyApp();\n\n$application-&gt;main();\n</code></pre>"},{"location":"api/Phalcon_Mvc_Application/#methods","title":"Methods","text":"<p>public  useImplicitView (mixed $implicitView)</p> <p>By default. The view is implicitly buffering all the output You can full disable the view component using this method</p> <p>public  handle ([mixed $uri])</p> <p>Handles a MVC request</p> <p>public  __construct ([Phalcon\\DiInterface $dependencyInjector]) inherited from Phalcon\\Application</p> <p>Phalcon\\Application</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Application</p> <p>Sets the events manager</p> <p>public  getEventsManager () inherited from Phalcon\\Application</p> <p>Returns the internal event manager</p> <p>public  registerModules (array $modules, [mixed $merge]) inherited from Phalcon\\Application</p> <p>Register an array of modules present in the application</p> <pre><code>&lt;?php\n\n$this-&gt;registerModules(\n    [\n        \"frontend\" =&gt; [\n            \"className\" =&gt; \"Multiple\\Frontend\\Module\",\n            \"path\"      =&gt; \"../apps/frontend/Module.php\",\n        ],\n        \"backend\" =&gt; [\n            \"className\" =&gt; \"Multiple\\Backend\\Module\",\n            \"path\"      =&gt; \"../apps/backend/Module.php\",\n        ],\n    ]\n);\n</code></pre> <p>public  getModules () inherited from Phalcon\\Application</p> <p>Return the modules registered in the application</p> <p>public  getModule (mixed $name) inherited from Phalcon\\Application</p> <p>Gets the module definition registered in the application via module name</p> <p>public  setDefaultModule (mixed $defaultModule) inherited from Phalcon\\Application</p> <p>Sets the module name to be used if the router doesn't return a valid module</p> <p>public  getDefaultModule () inherited from Phalcon\\Application</p> <p>Returns the default module name</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal dependency injector</p> <p>public  __get (mixed $propertyName) inherited from Phalcon\\Di\\Injectable</p> <p>Magic method __get</p>"},{"location":"api/Phalcon_Mvc_Application/#class-phalconmvcapplicationexception","title":"Class Phalcon\\Mvc\\Application\\Exception","text":"<p>extends class Phalcon\\Application\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Application/#methods_1","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Mvc_Collection/","title":"Abstract class Phalcon\\Mvc\\Collection","text":"<p>implements Phalcon\\Mvc\\EntityInterface, Phalcon\\Mvc\\CollectionInterface, Phalcon\\Di\\InjectionAwareInterface, Serializable</p> <p>Source on GitHub</p> <p>This component implements a high level abstraction for NoSQL databases which works with documents</p>"},{"location":"api/Phalcon_Mvc_Collection/#constants","title":"Constants","text":"<p>integer OP_NONE</p> <p>integer OP_CREATE</p> <p>integer OP_UPDATE</p> <p>integer OP_DELETE</p> <p>integer DIRTY_STATE_PERSISTENT</p> <p>integer DIRTY_STATE_TRANSIENT</p> <p>integer DIRTY_STATE_DETACHED</p>"},{"location":"api/Phalcon_Mvc_Collection/#methods","title":"Methods","text":"<p>final public  __construct ([Phalcon\\DiInterface $dependencyInjector], [Phalcon\\Mvc\\Collection\\ManagerInterface $modelsManager])</p> <p>Phalcon\\Mvc\\Collection constructor</p> <p>public  setId (mixed $id)</p> <p>Sets a value for the _id property, creates a MongoId object if needed</p> <p>public MongoId getId ()</p> <p>Returns the value of the _id property</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the dependency injection container</p> <p>public  getDI ()</p> <p>Returns the dependency injection container</p> <p>protected  setEventsManager (Phalcon\\Mvc\\Collection\\ManagerInterface $eventsManager)</p> <p>Sets a custom events manager</p> <p>protected  getEventsManager ()</p> <p>Returns the custom events manager</p> <p>public  getCollectionManager ()</p> <p>Returns the models manager related to the entity instance</p> <p>public  getReservedAttributes ()</p> <p>Returns an array with reserved properties that cannot be part of the insert/update</p> <p>protected  useImplicitObjectIds (mixed $useImplicitObjectIds)</p> <p>Sets if a model must use implicit objects ids</p> <p>protected  setSource (mixed $source)</p> <p>Sets collection name which model should be mapped</p> <p>public  getSource ()</p> <p>Returns collection name mapped in the model</p> <p>public  setConnectionService (mixed $connectionService)</p> <p>Sets the DependencyInjection connection service name</p> <p>public  getConnectionService ()</p> <p>Returns DependencyInjection connection service</p> <p>public MongoDb getConnection ()</p> <p>Retrieves a database connection</p> <p>public mixed readAttribute (string $attribute)</p> <p>Reads an attribute value by its name</p> <pre><code>&lt;?php\n\necho $robot-&gt;readAttribute(\"name\");\n</code></pre> <p>public  writeAttribute (string $attribute, mixed $value)</p> <p>Writes an attribute value by its name</p> <pre><code>&lt;?php\n\n$robot-&gt;writeAttribute(\"name\", \"Rosey\");\n</code></pre> <p>public static  cloneResult (Phalcon\\Mvc\\CollectionInterface $collection, array $document)</p> <p>Returns a cloned collection</p> <p>protected static array _getResultset (array $params, Phalcon\\Mvc\\Collection $collection, MongoDb $connection, boolean $unique)</p> <p>Returns a collection resultset</p> <p>protected static int _getGroupResultset (array $params, Phalcon\\Mvc\\Collection $collection, MongoDb $connection)</p> <p>Perform a count over a resultset</p> <p>final protected boolean _preSave (Phalcon\\DiInterface $dependencyInjector, boolean $disableEvents, boolean $exists)</p> <p>Executes internal hooks before save a document</p> <p>final protected  _postSave (mixed $disableEvents, mixed $success, mixed $exists)</p> <p>Executes internal events after save a document</p> <p>protected  validate (mixed $validator)</p> <p>Executes validators on every validation call</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Validator\\ExclusionIn as ExclusionIn;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        // Old, deprecated syntax, use new one below\n        $this-&gt;validate(\n            new ExclusionIn(\n                [\n                    \"field\"  =&gt; \"status\",\n                    \"domain\" =&gt; [\"A\", \"I\"],\n                ]\n            )\n        );\n\n        if ($this-&gt;validationHasFailed() == true) {\n            return false;\n        }\n    }\n}\n</code></pre> <pre><code>&lt;?php\n\nuse Phalcon\\Validation\\Validator\\ExclusionIn as ExclusionIn;\nuse Phalcon\\Validation;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $validator = new Validation();\n        $validator-&gt;add(\"status\",\n            new ExclusionIn(\n                [\n                    \"domain\" =&gt; [\"A\", \"I\"]\n                ]\n            )\n        );\n\n        return $this-&gt;validate($validator);\n    }\n}\n</code></pre> <p>public  validationHasFailed ()</p> <p>Check whether validation process has generated any messages</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Validator\\ExclusionIn as ExclusionIn;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $this-&gt;validate(\n            new ExclusionIn(\n                [\n                    \"field\"  =&gt; \"status\",\n                    \"domain\" =&gt; [\"A\", \"I\"],\n                ]\n            )\n        );\n\n        if ($this-&gt;validationHasFailed() == true) {\n            return false;\n        }\n    }\n}\n</code></pre> <p>public  fireEvent (mixed $eventName)</p> <p>Fires an internal event</p> <p>public  fireEventCancel (mixed $eventName)</p> <p>Fires an internal event that cancels the operation</p> <p>protected  _cancelOperation (mixed $disableEvents)</p> <p>Cancel the current operation</p> <p>protected boolean _exists (MongoCollection $collection)</p> <p>Checks if the document exists in the collection</p> <p>public  getMessages ()</p> <p>Returns all the validation messages</p> <pre><code>&lt;?php\n\n$robot = new Robots();\n\n$robot-&gt;type = \"mechanical\";\n$robot-&gt;name = \"Astro Boy\";\n$robot-&gt;year = 1952;\n\nif ($robot-&gt;save() === false) {\n    echo \"Umh, We can't store robots right now \";\n\n    $messages = $robot-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo $message;\n    }\n} else {\n    echo \"Great, a new robot was saved successfully!\";\n}\n</code></pre> <p>public  appendMessage (Phalcon\\Mvc\\Model\\MessageInterface $message)</p> <p>Appends a customized message on the validation process</p> <pre><code>&lt;?php\n\nuse \\Phalcon\\Mvc\\Model\\Message as Message;\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function beforeSave()\n    {\n        if ($this-&gt;name === \"Peter\") {\n            $message = new Message(\n                \"Sorry, but a robot cannot be named Peter\"\n            );\n\n            $this-&gt;appendMessage(message);\n        }\n    }\n}\n</code></pre> <p>protected  prepareCU ()</p> <p>Shared Code for CU Operations Prepares Collection</p> <p>public  save ()</p> <p>Creates/Updates a collection based on the values in the attributes</p> <p>public  create ()</p> <p>Creates a collection based on the values in the attributes</p> <p>public  createIfNotExist (array $criteria)</p> <p>Creates a document based on the values in the attributes, if not found by criteria Preferred way to avoid duplication is to create index on attribute</p> <pre><code>&lt;?php\n\n$robot = new Robot();\n\n$robot-&gt;name = \"MyRobot\";\n$robot-&gt;type = \"Droid\";\n\n// Create only if robot with same name and type does not exist\n$robot-&gt;createIfNotExist(\n    [\n        \"name\",\n        \"type\",\n    ]\n);\n</code></pre> <p>public  update ()</p> <p>Creates/Updates a collection based on the values in the attributes</p> <p>public static  findById (mixed $id)</p> <p>Find a document by its id (_id)</p> <pre><code>&lt;?php\n\n// Find user by using \\MongoId object\n$user = Users::findById(\n    new \\MongoId(\"545eb081631d16153a293a66\")\n);\n\n// Find user by using id as sting\n$user = Users::findById(\"45cbc4a0e4123f6920000002\");\n\n// Validate input\nif ($user = Users::findById($_POST[\"id\"])) {\n    // ...\n}\n</code></pre> <p>public static  findFirst ([array $parameters])</p> <p>Allows to query the first record that match the specified conditions</p> <pre><code>&lt;?php\n\n// What's the first robot in the robots table?\n$robot = Robots::findFirst();\n\necho \"The robot name is \", $robot-&gt;name, \"\\n\";\n\n// What's the first mechanical robot in robots table?\n$robot = Robots::findFirst(\n    [\n        [\n            \"type\" =&gt; \"mechanical\",\n        ]\n    ]\n);\n\necho \"The first mechanical robot name is \", $robot-&gt;name, \"\\n\";\n\n// Get first virtual robot ordered by name\n$robot = Robots::findFirst(\n    [\n        [\n            \"type\" =&gt; \"mechanical\",\n        ],\n        \"order\" =&gt; [\n            \"name\" =&gt; 1,\n        ],\n    ]\n);\n\necho \"The first virtual robot name is \", $robot-&gt;name, \"\\n\";\n\n// Get first robot by id (_id)\n$robot = Robots::findFirst(\n    [\n        [\n            \"_id\" =&gt; new \\MongoId(\"45cbc4a0e4123f6920000002\"),\n        ]\n    ]\n);\n\necho \"The robot id is \", $robot-&gt;_id, \"\\n\";\n</code></pre> <p>public static  find ([array $parameters])</p> <p>Allows to query a set of records that match the specified conditions</p> <pre><code>&lt;?php\n\n// How many robots are there?\n$robots = Robots::find();\n\necho \"There are \", count($robots), \"\\n\";\n\n// How many mechanical robots are there?\n$robots = Robots::find(\n    [\n        [\n            \"type\" =&gt; \"mechanical\",\n        ]\n    ]\n);\n\necho \"There are \", count(robots), \"\\n\";\n\n// Get and print virtual robots ordered by name\n$robots = Robots::findFirst(\n    [\n        [\n            \"type\" =&gt; \"virtual\"\n        ],\n        \"order\" =&gt; [\n            \"name\" =&gt; 1,\n        ]\n    ]\n);\n\nforeach ($robots as $robot) {\n   echo $robot-&gt;name, \"\\n\";\n}\n\n// Get first 100 virtual robots ordered by name\n$robots = Robots::find(\n    [\n        [\n            \"type\" =&gt; \"virtual\",\n        ],\n        \"order\" =&gt; [\n            \"name\" =&gt; 1,\n        ],\n        \"limit\" =&gt; 100,\n    ]\n);\n\nforeach ($robots as $robot) {\n   echo $robot-&gt;name, \"\\n\";\n}\n</code></pre> <p>public static  count ([array $parameters])</p> <p>Perform a count over a collection</p> <pre><code>&lt;?php\n\necho \"There are \", Robots::count(), \" robots\";\n</code></pre> <p>public static  aggregate ([array $parameters])</p> <p>Perform an aggregation using the Mongo aggregation framework</p> <p>public static  summatory (mixed $field, [mixed $conditions], [mixed $finalize])</p> <p>Allows to perform a summatory group for a column in the collection</p> <p>public  delete ()</p> <p>Deletes a model instance. Returning true on success or false otherwise.</p> <pre><code>&lt;?php\n\n$robot = Robots::findFirst();\n\n$robot-&gt;delete();\n\n$robots = Robots::find();\n\nforeach ($robots as $robot) {\n    $robot-&gt;delete();\n}\n</code></pre> <p>public  setDirtyState (mixed $dirtyState)</p> <p>Sets the dirty state of the object using one of the DIRTY_STATE_* constants</p> <p>public  getDirtyState ()</p> <p>Returns one of the DIRTY_STATE_* constants telling if the document exists in the collection or not</p> <p>protected  addBehavior (Phalcon\\Mvc\\Collection\\BehaviorInterface $behavior)</p> <p>Sets up a behavior in a collection</p> <p>public  skipOperation (mixed $skip)</p> <p>Skips the current operation forcing a success state</p> <p>public  toArray ()</p> <p>Returns the instance as an array representation</p> <pre><code>&lt;?php\n\nprint_r(\n    $robot-&gt;toArray()\n);\n</code></pre> <p>public  serialize ()</p> <p>Serializes the object ignoring connections or protected properties</p> <p>public  unserialize (mixed $data)</p> <p>Unserializes the object from a serialized string</p>"},{"location":"api/Phalcon_Mvc_Collection/#abstract-class-phalconmvccollectionbehavior","title":"Abstract class Phalcon\\Mvc\\Collection\\Behavior","text":"<p>implements Phalcon\\Mvc\\Collection\\BehaviorInterface</p> <p>Source on GitHub</p> <p>This is an optional base class for ORM behaviors</p>"},{"location":"api/Phalcon_Mvc_Collection/#methods_1","title":"Methods","text":"<p>public  __construct ([array $options])</p> <p>protected  mustTakeAction (mixed $eventName)</p> <p>Checks whether the behavior must take action on certain event</p> <p>protected array getOptions ([string $eventName])</p> <p>Returns the behavior options related to an event</p> <p>public  notify (mixed $type, Phalcon\\Mvc\\CollectionInterface $model)</p> <p>This method receives the notifications from the EventsManager</p> <p>public  missingMethod (Phalcon\\Mvc\\CollectionInterface $model, mixed $method, [mixed $arguments])</p> <p>Acts as fallbacks when a missing method is called on the collection</p>"},{"location":"api/Phalcon_Mvc_Collection/#class-phalconmvccollectionbehaviorsoftdelete","title":"Class Phalcon\\Mvc\\Collection\\Behavior\\SoftDelete","text":"<p>extends abstract class Phalcon\\Mvc\\Collection\\Behavior</p> <p>implements Phalcon\\Mvc\\Collection\\BehaviorInterface</p> <p>Source on GitHub</p> <p>Instead of permanently delete a record it marks the record as deleted changing the value of a flag column</p>"},{"location":"api/Phalcon_Mvc_Collection/#methods_2","title":"Methods","text":"<p>public  notify (mixed $type, Phalcon\\Mvc\\CollectionInterface $model)</p> <p>Listens for notifications from the models manager</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Mvc\\Collection\\Behavior</p> <p>Phalcon\\Mvc\\Collection\\Behavior</p> <p>protected  mustTakeAction (mixed $eventName) inherited from Phalcon\\Mvc\\Collection\\Behavior</p> <p>Checks whether the behavior must take action on certain event</p> <p>protected array getOptions ([string $eventName]) inherited from Phalcon\\Mvc\\Collection\\Behavior</p> <p>Returns the behavior options related to an event</p> <p>public  missingMethod (Phalcon\\Mvc\\CollectionInterface $model, mixed $method, [mixed $arguments]) inherited from Phalcon\\Mvc\\Collection\\Behavior</p> <p>Acts as fallbacks when a missing method is called on the collection</p>"},{"location":"api/Phalcon_Mvc_Collection/#class-phalconmvccollectionbehaviortimestampable","title":"Class Phalcon\\Mvc\\Collection\\Behavior\\Timestampable","text":"<p>extends abstract class Phalcon\\Mvc\\Collection\\Behavior</p> <p>implements Phalcon\\Mvc\\Collection\\BehaviorInterface</p> <p>Source on GitHub</p> <p>Allows to automatically update a model\u2019s attribute saving the datetime when a record is created or updated</p>"},{"location":"api/Phalcon_Mvc_Collection/#methods_3","title":"Methods","text":"<p>public  notify (mixed $type, Phalcon\\Mvc\\CollectionInterface $model)</p> <p>Listens for notifications from the models manager</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Mvc\\Collection\\Behavior</p> <p>Phalcon\\Mvc\\Collection\\Behavior</p> <p>protected  mustTakeAction (mixed $eventName) inherited from Phalcon\\Mvc\\Collection\\Behavior</p> <p>Checks whether the behavior must take action on certain event</p> <p>protected array getOptions ([string $eventName]) inherited from Phalcon\\Mvc\\Collection\\Behavior</p> <p>Returns the behavior options related to an event</p> <p>public  missingMethod (Phalcon\\Mvc\\CollectionInterface $model, mixed $method, [mixed $arguments]) inherited from Phalcon\\Mvc\\Collection\\Behavior</p> <p>Acts as fallbacks when a missing method is called on the collection</p>"},{"location":"api/Phalcon_Mvc_Collection/#interface-phalconmvccollectionbehaviorinterface","title":"Interface Phalcon\\Mvc\\Collection\\BehaviorInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Collection/#methods_4","title":"Methods","text":"<p>abstract public  notify (mixed $type, Phalcon\\Mvc\\CollectionInterface $collection)</p> <p>...</p> <p>abstract public  missingMethod (Phalcon\\Mvc\\CollectionInterface $collection, mixed $method, [mixed $arguments])</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Collection/#class-phalconmvccollectiondocument","title":"Class Phalcon\\Mvc\\Collection\\Document","text":"<p>implements Phalcon\\Mvc\\EntityInterface, ArrayAccess</p> <p>Source on GitHub</p> <p>This component allows Phalcon\\Mvc\\Collection to return rows without an associated entity. This objects implements the ArrayAccess interface to allow access the object as object-&gt;x or array[x].</p>"},{"location":"api/Phalcon_Mvc_Collection/#methods_5","title":"Methods","text":"<p>public boolean offsetExists (int $index)</p> <p>Checks whether an offset exists in the document</p> <p>public  offsetGet (mixed $index)</p> <p>Returns the value of a field using the ArrayAccess interfase</p> <p>public  offsetSet (mixed $index, mixed $value)</p> <p>Change a value using the ArrayAccess interface</p> <p>public  offsetUnset (string $offset)</p> <p>Rows cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <p>public mixed readAttribute (string $attribute)</p> <p>Reads an attribute value by its name</p> <pre><code>&lt;?php\n\n echo $robot-&gt;readAttribute(\"name\");\n</code></pre> <p>public  writeAttribute (string $attribute, mixed $value)</p> <p>Writes an attribute value by its name</p> <pre><code>&lt;?php\n\n $robot-&gt;writeAttribute(\"name\", \"Rosey\");\n</code></pre> <p>public array toArray ()</p> <p>Returns the instance as an array representation</p>"},{"location":"api/Phalcon_Mvc_Collection/#class-phalconmvccollectionexception","title":"Class Phalcon\\Mvc\\Collection\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Collection/#methods_6","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Mvc_Collection/#class-phalconmvccollectionmanager","title":"Class Phalcon\\Mvc\\Collection\\Manager","text":"<p>implements Phalcon\\Di\\InjectionAwareInterface, Phalcon\\Events\\EventsAwareInterface</p> <p>Source on GitHub</p> <p>This components controls the initialization of models, keeping record of relations between the different models of the application.</p> <p>A CollectionManager is injected to a model via a Dependency Injector Container such as Phalcon\\Di.</p> <pre><code>&lt;?php\n\n$di = new \\Phalcon\\Di();\n\n$di-&gt;set(\n    \"collectionManager\",\n    function () {\n        return new \\Phalcon\\Mvc\\Collection\\Manager();\n    }\n);\n\n$robot = new Robots($di);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Collection/#methods_7","title":"Methods","text":"<p>public  getServiceName ()</p> <p>...</p> <p>public  setServiceName (mixed $serviceName)</p> <p>...</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the DependencyInjector container</p> <p>public  getDI ()</p> <p>Returns the DependencyInjector container</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager)</p> <p>Sets the event manager</p> <p>public  getEventsManager ()</p> <p>Returns the internal event manager</p> <p>public  setCustomEventsManager (Phalcon\\Mvc\\CollectionInterface $model, Phalcon\\Events\\ManagerInterface $eventsManager)</p> <p>Sets a custom events manager for a specific model</p> <p>public  getCustomEventsManager (Phalcon\\Mvc\\CollectionInterface $model)</p> <p>Returns a custom events manager related to a model</p> <p>public  initialize (Phalcon\\Mvc\\CollectionInterface $model)</p> <p>Initializes a model in the models manager</p> <p>public  isInitialized (mixed $modelName)</p> <p>Check whether a model is already initialized</p> <p>public  getLastInitialized ()</p> <p>Get the latest initialized model</p> <p>public  setConnectionService (Phalcon\\Mvc\\CollectionInterface $model, mixed $connectionService)</p> <p>Sets a connection service for a specific model</p> <p>public  getConnectionService (Phalcon\\Mvc\\CollectionInterface $model)</p> <p>Gets a connection service for a specific model</p> <p>public  useImplicitObjectIds (Phalcon\\Mvc\\CollectionInterface $model, mixed $useImplicitObjectIds)</p> <p>Sets whether a model must use implicit objects ids</p> <p>public  isUsingImplicitObjectIds (Phalcon\\Mvc\\CollectionInterface $model)</p> <p>Checks if a model is using implicit object ids</p> <p>public Mongo getConnection (Phalcon\\Mvc\\CollectionInterface $model)</p> <p>Returns the connection related to a model</p> <p>public  notifyEvent (mixed $eventName, Phalcon\\Mvc\\CollectionInterface $model)</p> <p>Receives events generated in the models and dispatches them to an events-manager if available Notify the behaviors that are listening in the model</p> <p>public  missingMethod (Phalcon\\Mvc\\CollectionInterface $model, mixed $eventName, mixed $data)</p> <p>Dispatch an event to the listeners and behaviors This method expects that the endpoint listeners/behaviors returns true meaning that at least one was implemented</p> <p>public  addBehavior (Phalcon\\Mvc\\CollectionInterface $model, Phalcon\\Mvc\\Collection\\BehaviorInterface $behavior)</p> <p>Binds a behavior to a model</p>"},{"location":"api/Phalcon_Mvc_Collection/#interface-phalconmvccollectionmanagerinterface","title":"Interface Phalcon\\Mvc\\Collection\\ManagerInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Collection/#methods_8","title":"Methods","text":"<p>abstract public  setCustomEventsManager (Phalcon\\Mvc\\CollectionInterface $model, Phalcon\\Events\\ManagerInterface $eventsManager)</p> <p>...</p> <p>abstract public  getCustomEventsManager (Phalcon\\Mvc\\CollectionInterface $model)</p> <p>...</p> <p>abstract public  initialize (Phalcon\\Mvc\\CollectionInterface $model)</p> <p>...</p> <p>abstract public  isInitialized (mixed $modelName)</p> <p>...</p> <p>abstract public  getLastInitialized ()</p> <p>...</p> <p>abstract public  setConnectionService (Phalcon\\Mvc\\CollectionInterface $model, mixed $connectionService)</p> <p>...</p> <p>abstract public  useImplicitObjectIds (Phalcon\\Mvc\\CollectionInterface $model, mixed $useImplicitObjectIds)</p> <p>...</p> <p>abstract public  isUsingImplicitObjectIds (Phalcon\\Mvc\\CollectionInterface $model)</p> <p>...</p> <p>abstract public  getConnection (Phalcon\\Mvc\\CollectionInterface $model)</p> <p>...</p> <p>abstract public  notifyEvent (mixed $eventName, Phalcon\\Mvc\\CollectionInterface $model)</p> <p>...</p> <p>abstract public  addBehavior (Phalcon\\Mvc\\CollectionInterface $model, Phalcon\\Mvc\\Collection\\BehaviorInterface $behavior)</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Collection/#interface-phalconmvccollectioninterface","title":"Interface Phalcon\\Mvc\\CollectionInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Collection/#methods_9","title":"Methods","text":"<p>abstract public  setId (mixed $id)</p> <p>...</p> <p>abstract public  getId ()</p> <p>...</p> <p>abstract public  getReservedAttributes ()</p> <p>...</p> <p>abstract public  getSource ()</p> <p>...</p> <p>abstract public  setConnectionService (mixed $connectionService)</p> <p>...</p> <p>abstract public  getConnection ()</p> <p>...</p> <p>abstract public  setDirtyState (mixed $dirtyState)</p> <p>...</p> <p>abstract public  getDirtyState ()</p> <p>...</p> <p>abstract public static  cloneResult (Phalcon\\Mvc\\CollectionInterface $collection, array $document)</p> <p>...</p> <p>abstract public  fireEvent (mixed $eventName)</p> <p>...</p> <p>abstract public  fireEventCancel (mixed $eventName)</p> <p>...</p> <p>abstract public  validationHasFailed ()</p> <p>...</p> <p>abstract public  getMessages ()</p> <p>...</p> <p>abstract public  appendMessage (Phalcon\\Mvc\\Model\\MessageInterface $message)</p> <p>...</p> <p>abstract public  save ()</p> <p>...</p> <p>abstract public static  findById (mixed $id)</p> <p>...</p> <p>abstract public static  findFirst ([array $parameters])</p> <p>...</p> <p>abstract public static  find ([array $parameters])</p> <p>...</p> <p>abstract public static  count ([array $parameters])</p> <p>...</p> <p>abstract public  delete ()</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Controller/","title":"Abstract class Phalcon\\Mvc\\Controller","text":"<p>extends abstract class Phalcon\\Di\\Injectable</p> <p>implements Phalcon\\Events\\EventsAwareInterface, Phalcon\\Di\\InjectionAwareInterface, Phalcon\\Mvc\\ControllerInterface</p> <p>Source on GitHub</p> <p>Every application controller should extend this class that encapsulates all the controller functionality</p> <p>The controllers provide the \u201cflow\u201d between models and views. Controllers are responsible for processing the incoming requests from the web browser, interrogating the models for data, and passing that data on to the views for presentation.</p> <pre><code>&lt;?php\n\n&lt;?php\n\nclass PeopleController extends \\Phalcon\\Mvc\\Controller\n{\n    // This action will be executed by default\n    public function indexAction()\n    {\n\n    }\n\n    public function findAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Forwards flow to the index action\n        return $this-&gt;dispatcher-&gt;forward(\n            [\n                \"controller\" =&gt; \"people\",\n                \"action\"     =&gt; \"index\",\n            ]\n        );\n    }\n}\n</code></pre>"},{"location":"api/Phalcon_Mvc_Controller/#methods","title":"Methods","text":"<p>final public  __construct ()</p> <p>Phalcon\\Mvc\\Controller constructor</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal dependency injector</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the event manager</p> <p>public  getEventsManager () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal event manager</p> <p>public  __get (mixed $propertyName) inherited from Phalcon\\Di\\Injectable</p> <p>Magic method __get</p>"},{"location":"api/Phalcon_Mvc_Controller/#interface-phalconmvccontrollerbindmodelinterface","title":"Interface Phalcon\\Mvc\\Controller\\BindModelInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Controller/#methods_1","title":"Methods","text":"<p>abstract public static  getModelName ()</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Controller/#interface-phalconmvccontrollerinterface","title":"Interface Phalcon\\Mvc\\ControllerInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Dispatcher/","title":"Class Phalcon\\Mvc\\Dispatcher","text":"<p>extends abstract class Phalcon\\Dispatcher</p> <p>implements Phalcon\\Events\\EventsAwareInterface, Phalcon\\Di\\InjectionAwareInterface, Phalcon\\DispatcherInterface, Phalcon\\Mvc\\DispatcherInterface</p> <p>Source on GitHub</p> <p>Dispatching is the process of taking the request object, extracting the module name, controller name, action name, and optional parameters contained in it, and then instantiating a controller and calling an action of that controller.</p> <pre><code>&lt;?php\n\n$di = new \\Phalcon\\Di();\n\n$dispatcher = new \\Phalcon\\Mvc\\Dispatcher();\n\n$dispatcher-&gt;setDI($di);\n\n$dispatcher-&gt;setControllerName(\"posts\");\n$dispatcher-&gt;setActionName(\"index\");\n$dispatcher-&gt;setParams([]);\n\n$controller = $dispatcher-&gt;dispatch();\n</code></pre>"},{"location":"api/Phalcon_Mvc_Dispatcher/#constants","title":"Constants","text":"<p>integer EXCEPTION_NO_DI</p> <p>integer EXCEPTION_CYCLIC_ROUTING</p> <p>integer EXCEPTION_HANDLER_NOT_FOUND</p> <p>integer EXCEPTION_INVALID_HANDLER</p> <p>integer EXCEPTION_INVALID_PARAMS</p> <p>integer EXCEPTION_ACTION_NOT_FOUND</p>"},{"location":"api/Phalcon_Mvc_Dispatcher/#methods","title":"Methods","text":"<p>public  setControllerSuffix (mixed $controllerSuffix)</p> <p>Sets the default controller suffix</p> <p>public  setDefaultController (mixed $controllerName)</p> <p>Sets the default controller name</p> <p>public  setControllerName (mixed $controllerName)</p> <p>Sets the controller name to be dispatched</p> <p>public  getControllerName ()</p> <p>Gets last dispatched controller name</p> <p>public  getPreviousNamespaceName ()</p> <p>Gets previous dispatched namespace name</p> <p>public  getPreviousControllerName ()</p> <p>Gets previous dispatched controller name</p> <p>public  getPreviousActionName ()</p> <p>Gets previous dispatched action name</p> <p>protected  _throwDispatchException (mixed $message, [mixed $exceptionCode])</p> <p>Throws an internal exception</p> <p>protected  _handleException (Exception $exception)</p> <p>Handles a user exception</p> <p>public  forward (array $forward)</p> <p>Forwards the execution flow to another controller/action.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Dispatcher;\nuse App\\Backend\\Bootstrap as Backend;\nuse App\\Frontend\\Bootstrap as Frontend;\n\n// Registering modules\n$modules = [\n    \"frontend\" =&gt; [\n        \"className\" =&gt; Frontend::class,\n        \"path\"      =&gt; __DIR__ . \"/app/Modules/Frontend/Bootstrap.php\",\n        \"metadata\"  =&gt; [\n            \"controllersNamespace\" =&gt; \"App\\Frontend\\Controllers\",\n        ],\n    ],\n    \"backend\" =&gt; [\n        \"className\" =&gt; Backend::class,\n        \"path\"      =&gt; __DIR__ . \"/app/Modules/Backend/Bootstrap.php\",\n        \"metadata\"  =&gt; [\n            \"controllersNamespace\" =&gt; \"App\\Backend\\Controllers\",\n        ],\n    ],\n];\n\n$application-&gt;registerModules($modules);\n\n// Setting beforeForward listener\n$eventsManager  = $di-&gt;getShared(\"eventsManager\");\n\n$eventsManager-&gt;attach(\n    \"dispatch:beforeForward\",\n    function(Event $event, Dispatcher $dispatcher, array $forward) use ($modules) {\n        $metadata = $modules[$forward[\"module\"]][\"metadata\"];\n\n        $dispatcher-&gt;setModuleName($forward[\"module\"]);\n        $dispatcher-&gt;setNamespaceName($metadata[\"controllersNamespace\"]);\n    }\n);\n\n// Forward\n$this-&gt;dispatcher-&gt;forward(\n    [\n        \"module\"     =&gt; \"backend\",\n        \"controller\" =&gt; \"posts\",\n        \"action\"     =&gt; \"index\",\n    ]\n);\n</code></pre> <p>public  getControllerClass ()</p> <p>Possible controller class name that will be located to dispatch the request</p> <p>public  getLastController ()</p> <p>Returns the latest dispatched controller</p> <p>public  getActiveController ()</p> <p>Returns the active controller in the dispatcher</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Dispatcher</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Dispatcher</p> <p>Returns the internal dependency injector</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Dispatcher</p> <p>Sets the events manager</p> <p>public  getEventsManager () inherited from Phalcon\\Dispatcher</p> <p>Returns the internal event manager</p> <p>public  setActionSuffix (mixed $actionSuffix) inherited from Phalcon\\Dispatcher</p> <p>Sets the default action suffix</p> <p>public  getActionSuffix () inherited from Phalcon\\Dispatcher</p> <p>Gets the default action suffix</p> <p>public  setModuleName (mixed $moduleName) inherited from Phalcon\\Dispatcher</p> <p>Sets the module where the controller is (only informative)</p> <p>public  getModuleName () inherited from Phalcon\\Dispatcher</p> <p>Gets the module where the controller class is</p> <p>public  setNamespaceName (mixed $namespaceName) inherited from Phalcon\\Dispatcher</p> <p>Sets the namespace where the controller class is</p> <p>public  getNamespaceName () inherited from Phalcon\\Dispatcher</p> <p>Gets a namespace to be prepended to the current handler name</p> <p>public  setDefaultNamespace (mixed $namespaceName) inherited from Phalcon\\Dispatcher</p> <p>Sets the default namespace</p> <p>public  getDefaultNamespace () inherited from Phalcon\\Dispatcher</p> <p>Returns the default namespace</p> <p>public  setDefaultAction (mixed $actionName) inherited from Phalcon\\Dispatcher</p> <p>Sets the default action name</p> <p>public  setActionName (mixed $actionName) inherited from Phalcon\\Dispatcher</p> <p>Sets the action name to be dispatched</p> <p>public  getActionName () inherited from Phalcon\\Dispatcher</p> <p>Gets the latest dispatched action name</p> <p>public  setParams (array $params) inherited from Phalcon\\Dispatcher</p> <p>Sets action params to be dispatched</p> <p>public  getParams () inherited from Phalcon\\Dispatcher</p> <p>Gets action params</p> <p>public  setParam (mixed $param, mixed $value) inherited from Phalcon\\Dispatcher</p> <p>Set a param by its name or numeric index</p> <p>public mixed getParam (mixed $param, [string | array $filters], [mixed $defaultValue]) inherited from Phalcon\\Dispatcher</p> <p>Gets a param by its name or numeric index</p> <p>public boolean hasParam (mixed $param) inherited from Phalcon\\Dispatcher</p> <p>Check if a param exists</p> <p>public  getActiveMethod () inherited from Phalcon\\Dispatcher</p> <p>Returns the current method to be/executed in the dispatcher</p> <p>public  isFinished () inherited from Phalcon\\Dispatcher</p> <p>Checks if the dispatch loop is finished or has more pendent controllers/tasks to dispatch</p> <p>public  setReturnedValue (mixed $value) inherited from Phalcon\\Dispatcher</p> <p>Sets the latest returned value by an action manually</p> <p>public mixed getReturnedValue () inherited from Phalcon\\Dispatcher</p> <p>Returns value returned by the latest dispatched action</p> <p>public  setModelBinding (mixed $value, [mixed $cache]) inherited from Phalcon\\Dispatcher</p> <p>Enable/Disable model binding during dispatch</p> <pre><code>&lt;?php\n\n$di-&gt;set('dispatcher', function() {\n    $dispatcher = new Dispatcher();\n\n    $dispatcher-&gt;setModelBinding(true, 'cache');\n    return $dispatcher;\n});\n</code></pre> <p>public  setModelBinder (Phalcon\\Mvc\\Model\\BinderInterface $modelBinder, [mixed $cache]) inherited from Phalcon\\Dispatcher</p> <p>Enable model binding during dispatch</p> <pre><code>&lt;?php\n\n$di-&gt;set('dispatcher', function() {\n    $dispatcher = new Dispatcher();\n\n    $dispatcher-&gt;setModelBinder(new Binder(), 'cache');\n    return $dispatcher;\n});\n</code></pre> <p>public  getModelBinder () inherited from Phalcon\\Dispatcher</p> <p>Gets model binder</p> <p>public object dispatch () inherited from Phalcon\\Dispatcher</p> <p>Dispatches a handle action taking into account the routing parameters</p> <p>protected object _dispatch () inherited from Phalcon\\Dispatcher</p> <p>Dispatches a handle action taking into account the routing parameters</p> <p>public  wasForwarded () inherited from Phalcon\\Dispatcher</p> <p>Check if the current executed action was forwarded by another one</p> <p>public  getHandlerClass () inherited from Phalcon\\Dispatcher</p> <p>Possible class name that will be located to dispatch the request</p> <p>public  callActionMethod (mixed $handler, mixed $actionMethod, [array $params]) inherited from Phalcon\\Dispatcher</p> <p>...</p> <p>public  getBoundModels () inherited from Phalcon\\Dispatcher</p> <p>Returns bound models from binder instance</p> <pre><code>&lt;?php\n\nclass UserController extends Controller\n{\n    public function showAction(User $user)\n    {\n        $boundModels = $this-&gt;dispatcher-&gt;getBoundModels(); // return array with $user\n    }\n}\n</code></pre> <p>protected  _resolveEmptyProperties () inherited from Phalcon\\Dispatcher</p> <p>Set empty properties to their defaults (where defaults are available)</p>"},{"location":"api/Phalcon_Mvc_Dispatcher/#class-phalconmvcdispatcherexception","title":"Class Phalcon\\Mvc\\Dispatcher\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Dispatcher/#methods_1","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Mvc_Dispatcher/#interface-phalconmvcdispatcherinterface","title":"Interface Phalcon\\Mvc\\DispatcherInterface","text":"<p>implements Phalcon\\DispatcherInterface</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Dispatcher/#methods_2","title":"Methods","text":"<p>abstract public  setControllerSuffix (mixed $controllerSuffix)</p> <p>...</p> <p>abstract public  setDefaultController (mixed $controllerName)</p> <p>...</p> <p>abstract public  setControllerName (mixed $controllerName)</p> <p>...</p> <p>abstract public  getControllerName ()</p> <p>...</p> <p>abstract public  getLastController ()</p> <p>...</p> <p>abstract public  getActiveController ()</p> <p>...</p> <p>abstract public  setActionSuffix (mixed $actionSuffix) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  getActionSuffix () inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  setDefaultNamespace (mixed $defaultNamespace) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  setDefaultAction (mixed $actionName) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  setNamespaceName (mixed $namespaceName) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  setModuleName (mixed $moduleName) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  setActionName (mixed $actionName) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  getActionName () inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  setParams (mixed $params) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  getParams () inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  setParam (mixed $param, mixed $value) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  getParam (mixed $param, [mixed $filters]) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  hasParam (mixed $param) inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  isFinished () inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  getReturnedValue () inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  dispatch () inherited from Phalcon\\DispatcherInterface</p> <p>...</p> <p>abstract public  forward (mixed $forward) inherited from Phalcon\\DispatcherInterface</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_EntityInterface/","title":"Interface Phalcon\\Mvc\\EntityInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_EntityInterface/#methods","title":"Methods","text":"<p>abstract public  readAttribute (mixed $attribute)</p> <p>...</p> <p>abstract public  writeAttribute (mixed $attribute, mixed $value)</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Micro/","title":"Class Phalcon\\Mvc\\Micro","text":"<p>extends abstract class Phalcon\\Di\\Injectable</p> <p>implements Phalcon\\Events\\EventsAwareInterface, Phalcon\\Di\\InjectionAwareInterface, ArrayAccess</p> <p>Source on GitHub</p> <p>With Phalcon you can create \"Micro-Framework like\" applications. By doing this, you only need to write a minimal amount of code to create a PHP application. Micro applications are suitable to small applications, APIs and prototypes in a practical way.</p> <pre><code>&lt;?php\n\n$app = new \\Phalcon\\Mvc\\Micro();\n\n$app-&gt;get(\n    \"/say/welcome/{name}\",\n    function ($name) {\n        echo \"&lt;h1&gt;Welcome $name!&lt;/h1&gt;\";\n    }\n);\n\n$app-&gt;handle();\n</code></pre>"},{"location":"api/Phalcon_Mvc_Micro/#methods","title":"Methods","text":"<p>public  __construct ([Phalcon\\DiInterface $dependencyInjector])</p> <p>Phalcon\\Mvc\\Micro constructor</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the DependencyInjector container</p> <p>public Phalcon\\Mvc\\Router\\RouteInterface map (string $routePattern, callable $handler)</p> <p>Maps a route to a handler without any HTTP method constraint</p> <p>public Phalcon\\Mvc\\Router\\RouteInterface get (string $routePattern, callable $handler)</p> <p>Maps a route to a handler that only matches if the HTTP method is GET</p> <p>public Phalcon\\Mvc\\Router\\RouteInterface post (string $routePattern, callable $handler)</p> <p>Maps a route to a handler that only matches if the HTTP method is POST</p> <p>public Phalcon\\Mvc\\Router\\RouteInterface put (string $routePattern, callable $handler)</p> <p>Maps a route to a handler that only matches if the HTTP method is PUT</p> <p>public Phalcon\\Mvc\\Router\\RouteInterface patch (string $routePattern, callable $handler)</p> <p>Maps a route to a handler that only matches if the HTTP method is PATCH</p> <p>public Phalcon\\Mvc\\Router\\RouteInterface head (string $routePattern, callable $handler)</p> <p>Maps a route to a handler that only matches if the HTTP method is HEAD</p> <p>public Phalcon\\Mvc\\Router\\RouteInterface delete (string $routePattern, callable $handler)</p> <p>Maps a route to a handler that only matches if the HTTP method is DELETE</p> <p>public Phalcon\\Mvc\\Router\\RouteInterface options (string $routePattern, callable $handler)</p> <p>Maps a route to a handler that only matches if the HTTP method is OPTIONS</p> <p>public  mount (Phalcon\\Mvc\\Micro\\CollectionInterface $collection)</p> <p>Mounts a collection of handlers</p> <p>public Phalcon\\Mvc\\Micro notFound (callable $handler)</p> <p>Sets a handler that will be called when the router doesn't match any of the defined routes</p> <p>public Phalcon\\Mvc\\Micro error (callable $handler)</p> <p>Sets a handler that will be called when an exception is thrown handling the route</p> <p>public  getRouter ()</p> <p>Returns the internal router used by the application</p> <p>public Phalcon\\Di\\ServiceInterface setService (string $serviceName, mixed $definition, [boolean $shared])</p> <p>Sets a service from the DI</p> <p>public  hasService (mixed $serviceName)</p> <p>Checks if a service is registered in the DI</p> <p>public object getService (string $serviceName)</p> <p>Obtains a service from the DI</p> <p>public mixed getSharedService (string $serviceName)</p> <p>Obtains a shared service from the DI</p> <p>public mixed handle ([string $uri])</p> <p>Handle the whole request</p> <p>public  stop ()</p> <p>Stops the middleware execution avoiding than other middlewares be executed</p> <p>public  setActiveHandler (callable $activeHandler)</p> <p>Sets externally the handler that must be called by the matched route</p> <p>public callable getActiveHandler ()</p> <p>Return the handler that will be called for the matched route</p> <p>public mixed getReturnedValue ()</p> <p>Returns the value returned by the executed handler</p> <p>public boolean offsetExists (string $alias)</p> <p>Check if a service is registered in the internal services container using the array syntax</p> <p>public  offsetSet (string $alias, mixed $definition)</p> <p>Allows to register a shared service in the internal services container using the array syntax</p> <pre><code>&lt;?php\n\n$app[\"request\"] = new \\Phalcon\\Http\\Request();\n</code></pre> <p>public mixed offsetGet (string $alias)</p> <p>Allows to obtain a shared service in the internal services container using the array syntax</p> <pre><code>&lt;?php\n\nvar_dump(\n    $app[\"request\"]\n);\n</code></pre> <p>public  offsetUnset (string $alias)</p> <p>Removes a service from the internal services container using the array syntax</p> <p>public Phalcon\\Mvc\\Micro before (callable $handler)</p> <p>Appends a before middleware to be called before execute the route</p> <p>public Phalcon\\Mvc\\Micro afterBinding (callable $handler)</p> <p>Appends a afterBinding middleware to be called after model binding</p> <p>public Phalcon\\Mvc\\Micro after (callable $handler)</p> <p>Appends an 'after' middleware to be called after execute the route</p> <p>public Phalcon\\Mvc\\Micro finish (callable $handler)</p> <p>Appends a 'finish' middleware to be called when the request is finished</p> <p>public  getHandlers ()</p> <p>Returns the internal handlers attached to the application</p> <p>public  getModelBinder ()</p> <p>Gets model binder</p> <p>public  setModelBinder (Phalcon\\Mvc\\Model\\BinderInterface $modelBinder, [mixed $cache])</p> <p>Sets model binder</p> <pre><code>&lt;?php\n\n$micro = new Micro($di);\n$micro-&gt;setModelBinder(new Binder(), 'cache');\n</code></pre> <p>public  getBoundModels ()</p> <p>Returns bound models from binder instance</p> <p>public  getDI () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal dependency injector</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the event manager</p> <p>public  getEventsManager () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal event manager</p> <p>public  __get (mixed $propertyName) inherited from Phalcon\\Di\\Injectable</p> <p>Magic method __get</p>"},{"location":"api/Phalcon_Mvc_Micro/#class-phalconmvcmicrocollection","title":"Class Phalcon\\Mvc\\Micro\\Collection","text":"<p>implements Phalcon\\Mvc\\Micro\\CollectionInterface</p> <p>Source on GitHub</p> <p>Groups Micro-Mvc handlers as controllers</p> <pre><code>&lt;?php\n\n$app = new \\Phalcon\\Mvc\\Micro();\n\n$collection = new Collection();\n\n$collection-&gt;setHandler(\n    new PostsController()\n);\n\n$collection-&gt;get(\"/posts/edit/{id}\", \"edit\");\n\n$app-&gt;mount($collection);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Micro/#methods_1","title":"Methods","text":"<p>protected  _addMap (string | array $method, string $routePattern, mixed $handler, string $name)</p> <p>Internal function to add a handler to the group</p> <p>public  setPrefix (mixed $prefix)</p> <p>Sets a prefix for all routes added to the collection</p> <p>public  getPrefix ()</p> <p>Returns the collection prefix if any</p> <p>public array getHandlers ()</p> <p>Returns the registered handlers</p> <p>public Phalcon\\Mvc\\Micro\\Collection setHandler (mixed $handler, [boolean $lazy])</p> <p>Sets the main handler</p> <p>public  setLazy (mixed $lazy)</p> <p>Sets if the main handler must be lazy loaded</p> <p>public  isLazy ()</p> <p>Returns if the main handler must be lazy loaded</p> <p>public mixed getHandler ()</p> <p>Returns the main handler</p> <p>public Phalcon\\Mvc\\Micro\\Collection map (string $routePattern, callable $handler, [string $name])</p> <p>Maps a route to a handler</p> <p>public Phalcon\\Mvc\\Micro\\Collection get (string $routePattern, callable $handler, [string $name])</p> <p>Maps a route to a handler that only matches if the HTTP method is GET</p> <p>public Phalcon\\Mvc\\Micro\\Collection post (string $routePattern, callable $handler, [string $name])</p> <p>Maps a route to a handler that only matches if the HTTP method is POST</p> <p>public Phalcon\\Mvc\\Micro\\Collection put (string $routePattern, callable $handler, [string $name])</p> <p>Maps a route to a handler that only matches if the HTTP method is PUT</p> <p>public Phalcon\\Mvc\\Micro\\Collection patch (string $routePattern, callable $handler, [string $name])</p> <p>Maps a route to a handler that only matches if the HTTP method is PATCH</p> <p>public Phalcon\\Mvc\\Micro\\Collection head (string $routePattern, callable $handler, [string $name])</p> <p>Maps a route to a handler that only matches if the HTTP method is HEAD</p> <p>public Phalcon\\Mvc\\Micro\\Collection delete (string $routePattern, callable $handler, [string $name])</p> <p>Maps a route to a handler that only matches if the HTTP method is DELETE</p> <p>public Phalcon\\Mvc\\Micro\\Collection options (string $routePattern, callable $handler, [mixed $name])</p> <p>Maps a route to a handler that only matches if the HTTP method is OPTIONS</p>"},{"location":"api/Phalcon_Mvc_Micro/#interface-phalconmvcmicrocollectioninterface","title":"Interface Phalcon\\Mvc\\Micro\\CollectionInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Micro/#methods_2","title":"Methods","text":"<p>abstract public  setPrefix (mixed $prefix)</p> <p>...</p> <p>abstract public  getPrefix ()</p> <p>...</p> <p>abstract public  getHandlers ()</p> <p>...</p> <p>abstract public  setHandler (mixed $handler, [mixed $lazy])</p> <p>...</p> <p>abstract public  setLazy (mixed $lazy)</p> <p>...</p> <p>abstract public  isLazy ()</p> <p>...</p> <p>abstract public  getHandler ()</p> <p>...</p> <p>abstract public  map (mixed $routePattern, mixed $handler, [mixed $name])</p> <p>...</p> <p>abstract public  get (mixed $routePattern, mixed $handler, [mixed $name])</p> <p>...</p> <p>abstract public  post (mixed $routePattern, mixed $handler, [mixed $name])</p> <p>...</p> <p>abstract public  put (mixed $routePattern, mixed $handler, [mixed $name])</p> <p>...</p> <p>abstract public  patch (mixed $routePattern, mixed $handler, [mixed $name])</p> <p>...</p> <p>abstract public  head (mixed $routePattern, mixed $handler, [mixed $name])</p> <p>...</p> <p>abstract public  delete (mixed $routePattern, mixed $handler, [mixed $name])</p> <p>...</p> <p>abstract public  options (mixed $routePattern, mixed $handler, [mixed $name])</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Micro/#class-phalconmvcmicroexception","title":"Class Phalcon\\Mvc\\Micro\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Micro/#methods_3","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Mvc_Micro/#class-phalconmvcmicrolazyloader","title":"Class Phalcon\\Mvc\\Micro\\LazyLoader","text":"<p>Source on GitHub</p> <p>Lazy-Load of handlers for Mvc\\Micro using auto-loading</p>"},{"location":"api/Phalcon_Mvc_Micro/#methods_4","title":"Methods","text":"<p>public  getDefinition ()</p> <p>...</p> <p>public  __construct (mixed $definition)</p> <p>Phalcon\\Mvc\\Micro\\LazyLoader constructor</p> <p>public mixed __call (string $method, array $arguments)</p> <p>Initializes the internal handler, calling functions on it</p> <p>public mixed callMethod (string $method, array $arguments, [Phalcon\\Mvc\\Model\\BinderInterface $modelBinder])</p> <p>Calling __call method</p>"},{"location":"api/Phalcon_Mvc_Micro/#interface-phalconmvcmicromiddlewareinterface","title":"Interface Phalcon\\Mvc\\Micro\\MiddlewareInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Micro/#methods_5","title":"Methods","text":"<p>abstract public  call (Phalcon\\Mvc\\Micro $application)</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model/","title":"Abstract class Phalcon\\Mvc\\Model","text":"<p>implements Phalcon\\Mvc\\EntityInterface, Phalcon\\Mvc\\ModelInterface, Phalcon\\Mvc\\Model\\ResultInterface, Phalcon\\Di\\InjectionAwareInterface, Serializable, JsonSerializable</p> <p>Source on GitHub</p> <p>Phalcon\\Mvc\\Model connects business objects and database tables to create a persistable domain model where logic and data are presented in one wrapping. It's an implementation of the object-relational mapping (ORM).</p> <p>A model represents the information (data) of the application and the rules to manipulate that data. Models are primarily used for managing the rules of interaction with a corresponding database table. In most cases, each table in your database will correspond to one model in your application. The bulk of your application's business logic will be concentrated in the models.</p> <p>Phalcon\\Mvc\\Model is the first ORM written in Zephir/C languages for PHP, giving to developers high performance when interacting with databases while is also easy to use.</p> <pre><code>&lt;?php\n\n$robot = new Robots();\n\n$robot-&gt;type = \"mechanical\";\n$robot-&gt;name = \"Astro Boy\";\n$robot-&gt;year = 1952;\n\nif ($robot-&gt;save() === false) {\n    echo \"Umh, We cannot store robots: \";\n\n    $messages = $robot-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo $message;\n    }\n} else {\n    echo \"Great, a new robot was saved successfully!\";\n}\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model/#constants","title":"Constants","text":"<p>integer OP_NONE</p> <p>integer OP_CREATE</p> <p>integer OP_UPDATE</p> <p>integer OP_DELETE</p> <p>integer DIRTY_STATE_PERSISTENT</p> <p>integer DIRTY_STATE_TRANSIENT</p> <p>integer DIRTY_STATE_DETACHED</p>"},{"location":"api/Phalcon_Mvc_Model/#methods","title":"Methods","text":"<p>final public  __construct ([mixed $data], [Phalcon\\DiInterface $dependencyInjector], [Phalcon\\Mvc\\Model\\ManagerInterface $modelsManager])</p> <p>Phalcon\\Mvc\\Model constructor</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the dependency injection container</p> <p>public  getDI ()</p> <p>Returns the dependency injection container</p> <p>protected  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager)</p> <p>Sets a custom events manager</p> <p>protected  getEventsManager ()</p> <p>Returns the custom events manager</p> <p>public  getModelsMetaData ()</p> <p>Returns the models meta-data service related to the entity instance</p> <p>public  getModelsManager ()</p> <p>Returns the models manager related to the entity instance</p> <p>public  setTransaction (Phalcon\\Mvc\\Model\\TransactionInterface $transaction)</p> <p>Sets a transaction related to the Model instance</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager as TxManager;\nuse Phalcon\\Mvc\\Model\\Transaction\\Failed as TxFailed;\n\ntry {\n    $txManager = new TxManager();\n\n    $transaction = $txManager-&gt;get();\n\n    $robot = new Robots();\n\n    $robot-&gt;setTransaction($transaction);\n\n    $robot-&gt;name       = \"WALL\u00b7E\";\n    $robot-&gt;created_at = date(\"Y-m-d\");\n\n    if ($robot-&gt;save() === false) {\n        $transaction-&gt;rollback(\"Can't save robot\");\n    }\n\n    $robotPart = new RobotParts();\n\n    $robotPart-&gt;setTransaction($transaction);\n\n    $robotPart-&gt;type = \"head\";\n\n    if ($robotPart-&gt;save() === false) {\n        $transaction-&gt;rollback(\"Robot part cannot be saved\");\n    }\n\n    $transaction-&gt;commit();\n} catch (TxFailed $e) {\n    echo \"Failed, reason: \", $e-&gt;getMessage();\n}\n</code></pre> <p>protected  setSource (mixed $source)</p> <p>Sets the table name to which model should be mapped</p> <p>public  getSource ()</p> <p>Returns the table name mapped in the model</p> <p>protected  setSchema (mixed $schema)</p> <p>Sets schema name where the mapped table is located</p> <p>public  getSchema ()</p> <p>Returns schema name where the mapped table is located</p> <p>public  setConnectionService (mixed $connectionService)</p> <p>Sets the DependencyInjection connection service name</p> <p>public  setReadConnectionService (mixed $connectionService)</p> <p>Sets the DependencyInjection connection service name used to read data</p> <p>public  setWriteConnectionService (mixed $connectionService)</p> <p>Sets the DependencyInjection connection service name used to write data</p> <p>public  getReadConnectionService ()</p> <p>Returns the DependencyInjection connection service name used to read data related the model</p> <p>public  getWriteConnectionService ()</p> <p>Returns the DependencyInjection connection service name used to write data related to the model</p> <p>public  setDirtyState (mixed $dirtyState)</p> <p>Sets the dirty state of the object using one of the <code>DIRTY_STATE_*</code> constants</p> <p>public  getDirtyState ()</p> <p>Returns one of the <code>DIRTY_STATE_*</code> constants telling if the record exists in the database or not</p> <p>public  getReadConnection ()</p> <p>Gets the connection used to read data for the model</p> <p>public  getWriteConnection ()</p> <p>Gets the connection used to write data to the model</p> <p>public Phalcon\\Mvc\\Model assign (array $data, [mixed $dataColumnMap], [array $whiteList])</p> <p>Assigns values to a model from an array</p> <pre><code>&lt;?php\n\n$robot-&gt;assign(\n    [\n        \"type\" =&gt; \"mechanical\",\n        \"name\" =&gt; \"Astro Boy\",\n        \"year\" =&gt; 1952,\n    ]\n);\n\n// Assign by db row, column map needed\n$robot-&gt;assign(\n    $dbRow,\n    [\n        \"db_type\" =&gt; \"type\",\n        \"db_name\" =&gt; \"name\",\n        \"db_year\" =&gt; \"year\",\n    ]\n);\n\n// Allow assign only name and year\n$robot-&gt;assign(\n    $_POST,\n    null,\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n\n// By default assign method will use setters if exist, you can disable it by using ini_set to directly use properties\n\nini_set(\"phalcon.orm.disable_assign_setters\", true);\n\n$robot-&gt;assign(\n    $_POST,\n    null,\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n</code></pre> <p>public static  cloneResultMap (Phalcon\\Mvc\\ModelInterface | Phalcon\\Mvc\\Model\\Row $base, array $data, array $columnMap, [int $dirtyState], [boolean $keepSnapshots])</p> <p>Assigns values to a model from an array, returning a new model.</p> <pre><code>&lt;?php\n\n$robot = \\Phalcon\\Mvc\\Model::cloneResultMap(\n    new Robots(),\n    [\n        \"type\" =&gt; \"mechanical\",\n        \"name\" =&gt; \"Astro Boy\",\n        \"year\" =&gt; 1952,\n    ]\n);\n</code></pre> <p>public static mixed cloneResultMapHydrate (array $data, array $columnMap, int $hydrationMode)</p> <p>Returns an hydrated result based on the data and the column map</p> <p>public static Phalcon\\Mvc\\ModelInterface cloneResult (Phalcon\\Mvc\\ModelInterface $base, array $data, [int $dirtyState])</p> <p>Assigns values to a model from an array returning a new model</p> <pre><code>&lt;?php\n\n$robot = Phalcon\\Mvc\\Model::cloneResult(\n    new Robots(),\n    [\n        \"type\" =&gt; \"mechanical\",\n        \"name\" =&gt; \"Astro Boy\",\n        \"year\" =&gt; 1952,\n    ]\n);\n</code></pre> <p>public static  find ([mixed $parameters])</p> <p>Query for a set of records that match the specified conditions</p> <pre><code>&lt;?php\n\n// How many robots are there?\n$robots = Robots::find();\n\necho \"There are \", count($robots), \"\\n\";\n\n// How many mechanical robots are there?\n$robots = Robots::find(\n    \"type = 'mechanical'\"\n);\n\necho \"There are \", count($robots), \"\\n\";\n\n// Get and print virtual robots ordered by name\n$robots = Robots::find(\n    [\n        \"type = 'virtual'\",\n        \"order\" =&gt; \"name\",\n    ]\n);\n\nforeach ($robots as $robot) {\n echo $robot-&gt;name, \"\\n\";\n}\n\n// Get first 100 virtual robots ordered by name\n$robots = Robots::find(\n    [\n        \"type = 'virtual'\",\n        \"order\" =&gt; \"name\",\n        \"limit\" =&gt; 100,\n    ]\n);\n\nforeach ($robots as $robot) {\n echo $robot-&gt;name, \"\\n\";\n}\n</code></pre> <p>public static static findFirst ([string | array $parameters])</p> <p>Query the first record that matches the specified conditions</p> <pre><code>&lt;?php\n\n// What's the first robot in robots table?\n$robot = Robots::findFirst();\n\necho \"The robot name is \", $robot-&gt;name;\n\n// What's the first mechanical robot in robots table?\n$robot = Robots::findFirst(\n    \"type = 'mechanical'\"\n);\n\necho \"The first mechanical robot name is \", $robot-&gt;name;\n\n// Get first virtual robot ordered by name\n$robot = Robots::findFirst(\n    [\n        \"type = 'virtual'\",\n        \"order\" =&gt; \"name\",\n    ]\n);\n\necho \"The first virtual robot name is \", $robot-&gt;name;\n</code></pre> <p>public static  query ([Phalcon\\DiInterface $dependencyInjector])</p> <p>Create a criteria for a specific model</p> <p>protected boolean _exists (Phalcon\\Mvc\\Model\\MetaDataInterface $metaData, Phalcon\\Db\\AdapterInterface $connection, [string | array $table])</p> <p>Checks whether the current record already exists</p> <p>protected static Phalcon\\Mvc\\Model\\ResultsetInterface _groupResult (mixed $functionName, string $alias, array $parameters)</p> <p>Generate a PHQL SELECT statement for an aggregate</p> <p>public static mixed count ([array $parameters])</p> <p>Counts how many records match the specified conditions</p> <pre><code>&lt;?php\n\n// How many robots are there?\n$number = Robots::count();\n\necho \"There are \", $number, \"\\n\";\n\n// How many mechanical robots are there?\n$number = Robots::count(\"type = 'mechanical'\");\n\necho \"There are \", $number, \" mechanical robots\\n\";\n</code></pre> <p>public static mixed sum ([array $parameters])</p> <p>Calculates the sum on a column for a result-set of rows that match the specified conditions</p> <pre><code>&lt;?php\n\n// How much are all robots?\n$sum = Robots::sum(\n    [\n        \"column\" =&gt; \"price\",\n    ]\n);\n\necho \"The total price of robots is \", $sum, \"\\n\";\n\n// How much are mechanical robots?\n$sum = Robots::sum(\n    [\n        \"type = 'mechanical'\",\n        \"column\" =&gt; \"price\",\n    ]\n);\n\necho \"The total price of mechanical robots is  \", $sum, \"\\n\";\n</code></pre> <p>public static mixed maximum ([array $parameters])</p> <p>Returns the maximum value of a column for a result-set of rows that match the specified conditions</p> <pre><code>&lt;?php\n\n// What is the maximum robot id?\n$id = Robots::maximum(\n    [\n        \"column\" =&gt; \"id\",\n    ]\n);\n\necho \"The maximum robot id is: \", $id, \"\\n\";\n\n// What is the maximum id of mechanical robots?\n$sum = Robots::maximum(\n    [\n        \"type = 'mechanical'\",\n        \"column\" =&gt; \"id\",\n    ]\n);\n\necho \"The maximum robot id of mechanical robots is \", $id, \"\\n\";\n</code></pre> <p>public static mixed minimum ([array $parameters])</p> <p>Returns the minimum value of a column for a result-set of rows that match the specified conditions</p> <pre><code>&lt;?php\n\n// What is the minimum robot id?\n$id = Robots::minimum(\n    [\n        \"column\" =&gt; \"id\",\n    ]\n);\n\necho \"The minimum robot id is: \", $id;\n\n// What is the minimum id of mechanical robots?\n$sum = Robots::minimum(\n    [\n        \"type = 'mechanical'\",\n        \"column\" =&gt; \"id\",\n    ]\n);\n\necho \"The minimum robot id of mechanical robots is \", $id;\n</code></pre> <p>public static double average ([array $parameters])</p> <p>Returns the average value on a column for a result-set of rows matching the specified conditions</p> <pre><code>&lt;?php\n\n// What's the average price of robots?\n$average = Robots::average(\n    [\n        \"column\" =&gt; \"price\",\n    ]\n);\n\necho \"The average price is \", $average, \"\\n\";\n\n// What's the average price of mechanical robots?\n$average = Robots::average(\n    [\n        \"type = 'mechanical'\",\n        \"column\" =&gt; \"price\",\n    ]\n);\n\necho \"The average price of mechanical robots is \", $average, \"\\n\";\n</code></pre> <p>public  fireEvent (mixed $eventName)</p> <p>Fires an event, implicitly calls behaviors and listeners in the events manager are notified</p> <p>public  fireEventCancel (mixed $eventName)</p> <p>Fires an event, implicitly calls behaviors and listeners in the events manager are notified This method stops if one of the callbacks/listeners returns boolean false</p> <p>protected  _cancelOperation ()</p> <p>Cancel the current operation</p> <p>public  appendMessage (Phalcon\\Mvc\\Model\\MessageInterface $message)</p> <p>Appends a customized message on the validation process</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Message as Message;\n\nclass Robots extends Model\n{\n    public function beforeSave()\n    {\n        if ($this-&gt;name === \"Peter\") {\n            $message = new Message(\n                \"Sorry, but a robot cannot be named Peter\"\n            );\n\n            $this-&gt;appendMessage($message);\n        }\n    }\n}\n</code></pre> <p>protected  validate (Phalcon\\ValidationInterface $validator)</p> <p>Executes validators on every validation call</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\ExclusionIn;\n\nclass Subscriptors extends Model\n{\n    public function validation()\n    {\n        $validator = new Validation();\n\n        $validator-&gt;add(\n            \"status\",\n            new ExclusionIn(\n                [\n                    \"domain\" =&gt; [\n                        \"A\",\n                        \"I\",\n                    ],\n                ]\n            )\n        );\n\n        return $this-&gt;validate($validator);\n    }\n}\n</code></pre> <p>public  validationHasFailed ()</p> <p>Check whether validation process has generated any messages</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\ExclusionIn;\n\nclass Subscribers extends Model\n{\n    public function validation()\n    {\n        $validator = new Validation();\n\n        $validator-&gt;validate(\n            \"status\",\n            new ExclusionIn(\n                [\n                    \"domain\" =&gt; [\n                        \"A\",\n                        \"I\",\n                    ],\n                ]\n            )\n        );\n\n        return $this-&gt;validate($validator);\n    }\n}\n</code></pre> <p>public  getMessages ([mixed $filter])</p> <p>Returns array of validation messages</p> <pre><code>&lt;?php\n\n$robot = new Robots();\n\n$robot-&gt;type = \"mechanical\";\n$robot-&gt;name = \"Astro Boy\";\n$robot-&gt;year = 1952;\n\nif ($robot-&gt;save() === false) {\n    echo \"Umh, We can't store robots right now \";\n\n    $messages = $robot-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo $message;\n    }\n} else {\n    echo \"Great, a new robot was saved successfully!\";\n}\n</code></pre> <p>final protected  _checkForeignKeysRestrict ()</p> <p>Reads \"belongs to\" relations and check the virtual foreign keys when inserting or updating records to verify that inserted/updated values are present in the related entity</p> <p>final protected  _checkForeignKeysReverseCascade ()</p> <p>Reads both \"hasMany\" and \"hasOne\" relations and checks the virtual foreign keys (cascade) when deleting records</p> <p>final protected  _checkForeignKeysReverseRestrict ()</p> <p>Reads both \"hasMany\" and \"hasOne\" relations and checks the virtual foreign keys (restrict) when deleting records</p> <p>protected  _preSave (Phalcon\\Mvc\\Model\\MetaDataInterface $metaData, mixed $exists, mixed $identityField)</p> <p>Executes internal hooks before save a record</p> <p>protected  _postSave (mixed $success, mixed $exists)</p> <p>Executes internal events after save a record</p> <p>protected boolean _doLowInsert (Phalcon\\Mvc\\Model\\MetaDataInterface $metaData, Phalcon\\Db\\AdapterInterface $connection, string | array $table, boolean | string $identityField)</p> <p>Sends a pre-build INSERT SQL statement to the relational database system</p> <p>protected boolean _doLowUpdate (Phalcon\\Mvc\\Model\\MetaDataInterface $metaData, Phalcon\\Db\\AdapterInterface $connection, string | array $table)</p> <p>Sends a pre-build UPDATE SQL statement to the relational database system</p> <p>protected boolean _preSaveRelatedRecords (Phalcon\\Db\\AdapterInterface $connection, Phalcon\\Mvc\\ModelInterface $related)</p> <p>Saves related records that must be stored prior to save the master record</p> <p>protected boolean _postSaveRelatedRecords (Phalcon\\Db\\AdapterInterface $connection, Phalcon\\Mvc\\ModelInterface $related)</p> <p>Save the related records assigned in the has-one/has-many relations</p> <p>public boolean save ([array $data], [array $whiteList])</p> <p>Inserts or updates a model instance. Returning true on success or false otherwise.</p> <pre><code>&lt;?php\n\n// Creating a new robot\n$robot = new Robots();\n\n$robot-&gt;type = \"mechanical\";\n$robot-&gt;name = \"Astro Boy\";\n$robot-&gt;year = 1952;\n\n$robot-&gt;save();\n\n// Updating a robot name\n$robot = Robots::findFirst(\"id = 100\");\n\n$robot-&gt;name = \"Biomass\";\n\n$robot-&gt;save();\n</code></pre> <p>public  create ([mixed $data], [mixed $whiteList])</p> <p>Inserts a model instance. If the instance already exists in the persistence it will throw an exception Returning true on success or false otherwise.</p> <pre><code>&lt;?php\n\n// Creating a new robot\n$robot = new Robots();\n\n$robot-&gt;type = \"mechanical\";\n$robot-&gt;name = \"Astro Boy\";\n$robot-&gt;year = 1952;\n\n$robot-&gt;create();\n\n// Passing an array to create\n$robot = new Robots();\n\n$robot-&gt;create(\n    [\n        \"type\" =&gt; \"mechanical\",\n        \"name\" =&gt; \"Astro Boy\",\n        \"year\" =&gt; 1952,\n    ]\n);\n</code></pre> <p>public  update ([mixed $data], [mixed $whiteList])</p> <p>Updates a model instance. If the instance doesn't exist in the persistence it will throw an exception Returning true on success or false otherwise.</p> <pre><code>&lt;?php\n\n// Updating a robot name\n$robot = Robots::findFirst(\"id = 100\");\n\n$robot-&gt;name = \"Biomass\";\n\n$robot-&gt;update();\n</code></pre> <p>public  delete ()</p> <p>Deletes a model instance. Returning true on success or false otherwise.</p> <pre><code>&lt;?php\n\n$robot = Robots::findFirst(\"id=100\");\n\n$robot-&gt;delete();\n\n$robots = Robots::find(\"type = 'mechanical'\");\n\nforeach ($robots as $robot) {\n    $robot-&gt;delete();\n}\n</code></pre> <p>public  getOperationMade ()</p> <p>Returns the type of the latest operation performed by the ORM Returns one of the OP_* class constants</p> <p>public  refresh ()</p> <p>Refreshes the model attributes re-querying the record from the database</p> <p>public  skipOperation (mixed $skip)</p> <p>Skips the current operation forcing a success state</p> <p>public  readAttribute (mixed $attribute)</p> <p>Reads an attribute value by its name</p> <pre><code>&lt;?php\n\necho $robot-&gt;readAttribute(\"name\");\n</code></pre> <p>public  writeAttribute (mixed $attribute, mixed $value)</p> <p>Writes an attribute value by its name</p> <pre><code>&lt;?php\n\n$robot-&gt;writeAttribute(\"name\", \"Rosey\");\n</code></pre> <p>protected  skipAttributes (array $attributes)</p> <p>Sets a list of attributes that must be skipped from the generated INSERT/UPDATE statement</p> <pre><code>&lt;?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this-&gt;skipAttributes(\n            [\n                \"price\",\n            ]\n        );\n    }\n}\n</code></pre> <p>protected  skipAttributesOnCreate (array $attributes)</p> <p>Sets a list of attributes that must be skipped from the generated INSERT statement</p> <pre><code>&lt;?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this-&gt;skipAttributesOnCreate(\n            [\n                \"created_at\",\n            ]\n        );\n    }\n}\n</code></pre> <p>protected  skipAttributesOnUpdate (array $attributes)</p> <p>Sets a list of attributes that must be skipped from the generated UPDATE statement</p> <pre><code>&lt;?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this-&gt;skipAttributesOnUpdate(\n            [\n                \"modified_in\",\n            ]\n        );\n    }\n}\n</code></pre> <p>protected  allowEmptyStringValues (array $attributes)</p> <p>Sets a list of attributes that must be skipped from the generated UPDATE statement</p> <pre><code>&lt;?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this-&gt;allowEmptyStringValues(\n            [\n                \"name\",\n            ]\n        );\n    }\n}\n</code></pre> <p>protected  hasOne (mixed $fields, mixed $referenceModel, mixed $referencedFields, [mixed $options])</p> <p>Setup a 1-1 relation between two models</p> <pre><code>&lt;?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this-&gt;hasOne(\"id\", \"RobotsDescription\", \"robots_id\");\n    }\n}\n</code></pre> <p>Using more than one field:</p> <pre><code>&lt;?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this-&gt;hasOne([\"id\", \"type\"], \"RobotParts\", [\"robots_id\", \"robots_type\"]);\n    }\n}\n</code></pre> <p>Using options:</p> <pre><code>&lt;?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this-&gt;hasOne(\n            \"id\", \n            \"RobotParts\", \n            \"robots_id\",\n            [\n                \"reusable\" =&gt; true,    // cache the results of this relationship\n                \"alias\"    =&gt; \"parts\", // Alias of the relationship\n            ]\n        );\n    }\n}\n</code></pre> <p>Using conditionals:</p> <pre><code>&lt;?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this-&gt;hasOne(\n            \"id\", \n            \"RobotParts\", \n            \"robots_id\",\n            [\n                \"reusable\" =&gt; true,           // cache the results of this relationship\n                \"alias\"    =&gt; \"partsTypeOne\", // Alias of the relationship\n                \"params\"   =&gt; [               // Acts like a filter\n                    \"conditions\" =&gt; \"type = :type:\",\n                    \"bind\"       =&gt; [\n                        \"type\" =&gt; 1,\n                    ],\n                ],\n            ]\n        );\n    }\n}\n</code></pre> <p>protected  belongsTo (mixed $fields, mixed $referenceModel, mixed $referencedFields, [mixed $options])</p> <p>Setup a reverse 1-1 or n-1 relation between two models</p> <pre><code>&lt;?php\n\nclass RobotsParts extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\"robots_id\", \"Robots\", \"id\");\n    }\n}\n</code></pre> <p>protected  hasMany (mixed $fields, mixed $referenceModel, mixed $referencedFields, [mixed $options])</p> <p>Setup a 1-n relation between two models</p> <pre><code>&lt;?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this-&gt;hasMany(\"id\", \"RobotsParts\", \"robots_id\");\n    }\n}\n</code></pre> <p>protected Phalcon\\Mvc\\Model\\Relation hasManyToMany (string | array $fields, string $intermediateModel, string | array $intermediateFields, string | array $intermediateReferencedFields, mixed $referenceModel, string | array $referencedFields, [array $options])</p> <p>Setup an n-n relation between two models, through an intermediate relation</p> <pre><code>&lt;?php\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        // Setup a many-to-many relation to Parts through RobotsParts\n        $this-&gt;hasManyToMany(\n            \"id\",\n            \"RobotsParts\",\n            \"robots_id\",\n            \"parts_id\",\n            \"Parts\",\n            \"id\"\n        );\n    }\n}\n</code></pre> <p>public  addBehavior (Phalcon\\Mvc\\Model\\BehaviorInterface $behavior)</p> <p>Setups a behavior in a model</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Behavior\\Timestampable;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;addBehavior(\n            new Timestampable(\n               [\n                   \"onCreate\" =&gt; [\n                        \"field\"  =&gt; \"created_at\",\n                        \"format\" =&gt; \"Y-m-d\",\n                       ],\n                ]\n            )\n        );\n    }\n}\n</code></pre> <p>protected  keepSnapshots (mixed $keepSnapshot)</p> <p>Sets if the model must keep the original record snapshot in memory</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;keepSnapshots(true);\n    }\n}\n</code></pre> <p>public  setSnapshotData (array $data, [array $columnMap])</p> <p>Sets the record's snapshot data. This method is used internally to set snapshot data when the model was set up to keep snapshot data</p> <p>public  hasSnapshotData ()</p> <p>Checks if the object has internal snapshot data</p> <p>public  getSnapshotData ()</p> <p>Returns the internal snapshot data</p> <p>public  getOldSnapshotData ()</p> <p>Returns the internal old snapshot data</p> <p>public  hasChanged ([string | array $fieldName], [boolean $allFields])</p> <p>Check if a specific attribute has changed This only works if the model is keeping data snapshots</p> <pre><code>&lt;?php\n\n$robot = new Robots();\n\n$robot-&gt;type = \"mechanical\";\n$robot-&gt;name = \"Astro Boy\";\n$robot-&gt;year = 1952;\n\n$robot-&gt;create();\n$robot-&gt;type = \"hydraulic\";\n$hasChanged = $robot-&gt;hasChanged(\"type\"); // returns true\n$hasChanged = $robot-&gt;hasChanged([\"type\", \"name\"]); // returns true\n$hasChanged = $robot-&gt;hasChanged([\"type\", \"name\", true]); // returns false\n</code></pre> <p>public  hasUpdated ([string | array $fieldName], [mixed $allFields])</p> <p>Check if a specific attribute was updated This only works if the model is keeping data snapshots</p> <p>public  getChangedFields ()</p> <p>Returns a list of changed values.</p> <pre><code>&lt;?php\n\n$robots = Robots::findFirst();\nprint_r($robots-&gt;getChangedFields()); // []\n\n$robots-&gt;deleted = 'Y';\n\n$robots-&gt;getChangedFields();\nprint_r($robots-&gt;getChangedFields()); // [\"deleted\"]\n</code></pre> <p>public  getUpdatedFields ()</p> <p>Returns a list of updated values.</p> <pre><code>&lt;?php\n\n$robots = Robots::findFirst();\nprint_r($robots-&gt;getChangedFields()); // []\n\n$robots-&gt;deleted = 'Y';\n\n$robots-&gt;getChangedFields();\nprint_r($robots-&gt;getChangedFields()); // [\"deleted\"]\n$robots-&gt;save();\nprint_r($robots-&gt;getChangedFields()); // []\nprint_r($robots-&gt;getUpdatedFields()); // [\"deleted\"]\n</code></pre> <p>protected  useDynamicUpdate (mixed $dynamicUpdate)</p> <p>Sets if a model must use dynamic update instead of the all-field update</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;useDynamicUpdate(true);\n    }\n}\n</code></pre> <p>public Phalcon\\Mvc\\Model\\ResultsetInterface getRelated (string $alias, [array $arguments])</p> <p>Returns related records based on defined relations</p> <pre><code>&lt;?php\n\n// Gets the relationship data named \"parts\"\n$parts = $robot-&gt;getRelated('parts');\n\n// Gets the relationship data named \"parts\" sorted descending by name\n$parts = $robot-&gt;getRelated('parts', ['order' =&gt; 'name DESC']);\n\n// Gets the relationship data named \"parts\" filtered\n$parts = $robot-&gt;getRelated('parts', ['conditions' =&gt; 'type = 1']);\n\n$parts = $robot-&gt;getRelated(\n    'parts', \n    [\n        'conditions' =&gt; 'type = :type:',\n        'bind'       =&gt; [\n            'type' =&gt; 1,\n        ]\n    ]\n);\n</code></pre> <p>protected mixed _getRelatedRecords (string $modelName, string $method, array $arguments)</p> <p>Returns related records defined relations depending on the method name</p> <p>final protected static Phalcon\\Mvc\\ModelInterface | Phalcon\\Mvc\\ModelInterface | boolean _invokeFinder (string $method, array $arguments)</p> <p>Try to check if the query must invoke a finder</p> <p>public mixed __call (string $method, array $arguments)</p> <p>Handles method calls when a method is not implemented</p> <p>public static mixed __callStatic (string $method, array $arguments)</p> <p>Handles method calls when a static method is not implemented</p> <p>public  __set (string $property, mixed $value)</p> <p>Magic method to assign values to the the model</p> <p>final protected string _possibleSetter (string $property, mixed $value)</p> <p>Check for, and attempt to use, possible setter.</p> <p>public Phalcon\\Mvc\\Model\\Resultset | Phalcon\\Mvc\\Model __get (string $property)</p> <p>Magic method to get related records using the relation alias as a property</p> <p>public  __isset (mixed $property)</p> <p>Magic method to check if a property is a valid relation</p> <p>public  serialize ()</p> <p>Serializes the object ignoring connections, services, related objects or static properties</p> <p>public  unserialize (mixed $data)</p> <p>Unserializes the object from a serialized string</p> <p>public  dump ()</p> <p>Returns a simple representation of the object that can be used with var_dump</p> <pre><code>&lt;?php\n\nvar_dump(\n    $robot-&gt;dump()\n);\n</code></pre> <p>public array toArray ([array $columns])</p> <p>Returns the instance as an array representation</p> <pre><code>&lt;?php\n\nprint_r(\n    $robot-&gt;toArray()\n);\n</code></pre> <p>public array jsonSerialize ()</p> <p>Serializes the object for json_encode</p> <pre><code>&lt;?php\n\necho json_encode($robot);\n</code></pre> <p>public static  setup (array $options)</p> <p>Enables/disables options in the ORM</p> <p>public  reset ()</p> <p>Reset a model instance data</p>"},{"location":"api/Phalcon_Mvc_Model/#interface-phalconmvcmodelinterface","title":"Interface Phalcon\\Mvc\\ModelInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model/#methods_1","title":"Methods","text":"<p>abstract public  setTransaction (Phalcon\\Mvc\\Model\\TransactionInterface $transaction)</p> <p>...</p> <p>abstract public  getSource ()</p> <p>...</p> <p>abstract public  getSchema ()</p> <p>...</p> <p>abstract public  setConnectionService (mixed $connectionService)</p> <p>...</p> <p>abstract public  setWriteConnectionService (mixed $connectionService)</p> <p>...</p> <p>abstract public  setReadConnectionService (mixed $connectionService)</p> <p>...</p> <p>abstract public  getReadConnectionService ()</p> <p>...</p> <p>abstract public  getWriteConnectionService ()</p> <p>...</p> <p>abstract public  getReadConnection ()</p> <p>...</p> <p>abstract public  getWriteConnection ()</p> <p>...</p> <p>abstract public  setDirtyState (mixed $dirtyState)</p> <p>...</p> <p>abstract public  getDirtyState ()</p> <p>...</p> <p>abstract public  assign (array $data, [mixed $dataColumnMap], [mixed $whiteList])</p> <p>...</p> <p>abstract public static  cloneResultMap (mixed $base, array $data, mixed $columnMap, [mixed $dirtyState], [mixed $keepSnapshots])</p> <p>...</p> <p>abstract public static  cloneResult (Phalcon\\Mvc\\ModelInterface $base, array $data, [mixed $dirtyState])</p> <p>...</p> <p>abstract public static  cloneResultMapHydrate (array $data, mixed $columnMap, mixed $hydrationMode)</p> <p>...</p> <p>abstract public static  find ([mixed $parameters])</p> <p>...</p> <p>abstract public static  findFirst ([mixed $parameters])</p> <p>...</p> <p>abstract public static  query ([Phalcon\\DiInterface $dependencyInjector])</p> <p>...</p> <p>abstract public static  count ([mixed $parameters])</p> <p>...</p> <p>abstract public static  sum ([mixed $parameters])</p> <p>...</p> <p>abstract public static  maximum ([mixed $parameters])</p> <p>...</p> <p>abstract public static  minimum ([mixed $parameters])</p> <p>...</p> <p>abstract public static  average ([mixed $parameters])</p> <p>...</p> <p>abstract public  fireEvent (mixed $eventName)</p> <p>...</p> <p>abstract public  fireEventCancel (mixed $eventName)</p> <p>...</p> <p>abstract public  appendMessage (Phalcon\\Mvc\\Model\\MessageInterface $message)</p> <p>...</p> <p>abstract public  validationHasFailed ()</p> <p>...</p> <p>abstract public  getMessages ()</p> <p>...</p> <p>abstract public  save ([mixed $data], [mixed $whiteList])</p> <p>...</p> <p>abstract public  create ([mixed $data], [mixed $whiteList])</p> <p>...</p> <p>abstract public  update ([mixed $data], [mixed $whiteList])</p> <p>...</p> <p>abstract public  delete ()</p> <p>...</p> <p>abstract public  getOperationMade ()</p> <p>...</p> <p>abstract public  refresh ()</p> <p>...</p> <p>abstract public  skipOperation (mixed $skip)</p> <p>...</p> <p>abstract public  getRelated (mixed $alias, [mixed $arguments])</p> <p>...</p> <p>abstract public  setSnapshotData (array $data, [mixed $columnMap])</p> <p>...</p> <p>abstract public  reset ()</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model/#class-phalconmvcmodelexception","title":"Class Phalcon\\Mvc\\Model\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model/#methods_2","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Mvc_Model_Behavior/","title":"Abstract class Phalcon\\Mvc\\Model\\Behavior","text":"<p>implements Phalcon\\Mvc\\Model\\BehaviorInterface</p> <p>Source on GitHub</p> <p>This is an optional base class for ORM behaviors</p>"},{"location":"api/Phalcon_Mvc_Model_Behavior/#methods","title":"Methods","text":"<p>public  __construct ([array $options])</p> <p>protected  mustTakeAction (mixed $eventName)</p> <p>Checks whether the behavior must take action on certain event</p> <p>protected array getOptions ([string $eventName])</p> <p>Returns the behavior options related to an event</p> <p>public  notify (mixed $type, Phalcon\\Mvc\\ModelInterface $model)</p> <p>This method receives the notifications from the EventsManager</p> <p>public  missingMethod (Phalcon\\Mvc\\ModelInterface $model, string $method, [array $arguments])</p> <p>Acts as fallbacks when a missing method is called on the model</p>"},{"location":"api/Phalcon_Mvc_Model_Behavior/#class-phalconmvcmodelbehaviorsoftdelete","title":"Class Phalcon\\Mvc\\Model\\Behavior\\SoftDelete","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\Behavior</p> <p>implements Phalcon\\Mvc\\Model\\BehaviorInterface</p> <p>Source on GitHub</p> <p>Instead of permanently delete a record it marks the record as deleted changing the value of a flag column</p>"},{"location":"api/Phalcon_Mvc_Model_Behavior/#methods_1","title":"Methods","text":"<p>public  notify (mixed $type, Phalcon\\Mvc\\ModelInterface $model)</p> <p>Listens for notifications from the models manager</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Mvc\\Model\\Behavior</p> <p>Phalcon\\Mvc\\Model\\Behavior</p> <p>protected  mustTakeAction (mixed $eventName) inherited from Phalcon\\Mvc\\Model\\Behavior</p> <p>Checks whether the behavior must take action on certain event</p> <p>protected array getOptions ([string $eventName]) inherited from Phalcon\\Mvc\\Model\\Behavior</p> <p>Returns the behavior options related to an event</p> <p>public  missingMethod (Phalcon\\Mvc\\ModelInterface $model, string $method, [array $arguments]) inherited from Phalcon\\Mvc\\Model\\Behavior</p> <p>Acts as fallbacks when a missing method is called on the model</p>"},{"location":"api/Phalcon_Mvc_Model_Behavior/#class-phalconmvcmodelbehaviortimestampable","title":"Class Phalcon\\Mvc\\Model\\Behavior\\Timestampable","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\Behavior</p> <p>implements Phalcon\\Mvc\\Model\\BehaviorInterface</p> <p>Source on GitHub</p> <p>Allows to automatically update a model\u2019s attribute saving the datetime when a record is created or updated</p>"},{"location":"api/Phalcon_Mvc_Model_Behavior/#methods_2","title":"Methods","text":"<p>public  notify (mixed $type, Phalcon\\Mvc\\ModelInterface $model)</p> <p>Listens for notifications from the models manager</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Mvc\\Model\\Behavior</p> <p>Phalcon\\Mvc\\Model\\Behavior</p> <p>protected  mustTakeAction (mixed $eventName) inherited from Phalcon\\Mvc\\Model\\Behavior</p> <p>Checks whether the behavior must take action on certain event</p> <p>protected array getOptions ([string $eventName]) inherited from Phalcon\\Mvc\\Model\\Behavior</p> <p>Returns the behavior options related to an event</p> <p>public  missingMethod (Phalcon\\Mvc\\ModelInterface $model, string $method, [array $arguments]) inherited from Phalcon\\Mvc\\Model\\Behavior</p> <p>Acts as fallbacks when a missing method is called on the model</p>"},{"location":"api/Phalcon_Mvc_Model_Behavior/#interface-phalconmvcmodelbehaviorinterface","title":"Interface Phalcon\\Mvc\\Model\\BehaviorInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model_Behavior/#methods_3","title":"Methods","text":"<p>abstract public  notify (mixed $type, Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  missingMethod (Phalcon\\Mvc\\ModelInterface $model, mixed $method, [mixed $arguments])</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model_Binder/","title":"Class Phalcon\\Mvc\\Model\\Binder","text":"<p>implements Phalcon\\Mvc\\Model\\BinderInterface</p> <p>Source on GitHub</p> <p>Phalcon\\Mvc\\Model\\Binding</p> <p>This is an class for binding models into params for handler</p>"},{"location":"api/Phalcon_Mvc_Model_Binder/#methods","title":"Methods","text":"<p>public  getBoundModels ()</p> <p>Array for storing active bound models</p> <p>public  getOriginalValues ()</p> <p>Array for original values</p> <p>public  __construct ([Phalcon\\Cache\\BackendInterface $cache])</p> <p>Phalcon\\Mvc\\Model\\Binder constructor</p> <p>public  setCache (Phalcon\\Cache\\BackendInterface $cache)</p> <p>Gets cache instance</p> <p>public  getCache ()</p> <p>Sets cache instance</p> <p>public  bindToHandler (mixed $handler, array $params, mixed $cacheKey, [mixed $methodName])</p> <p>Bind models into params in proper handler</p> <p>protected  findBoundModel (mixed $paramValue, mixed $className)</p> <p>Find the model by param value.</p> <p>protected  getParamsFromCache (mixed $cacheKey)</p> <p>Get params classes from cache by key</p> <p>protected  getParamsFromReflection (mixed $handler, array $params, mixed $cacheKey, mixed $methodName)</p> <p>Get modified params for handler using reflection</p>"},{"location":"api/Phalcon_Mvc_Model_Binder/#interface-phalconmvcmodelbinderbindableinterface","title":"Interface Phalcon\\Mvc\\Model\\Binder\\BindableInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model_Binder/#methods_1","title":"Methods","text":"<p>abstract public  getModelName ()</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model_Binder/#interface-phalconmvcmodelbinderinterface","title":"Interface Phalcon\\Mvc\\Model\\BinderInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model_Binder/#methods_2","title":"Methods","text":"<p>abstract public  getBoundModels ()</p> <p>...</p> <p>abstract public  getCache ()</p> <p>...</p> <p>abstract public  setCache (Phalcon\\Cache\\BackendInterface $cache)</p> <p>...</p> <p>abstract public  bindToHandler (mixed $handler, array $params, mixed $cacheKey, [mixed $methodName])</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model_Criteria/","title":"Class Phalcon\\Mvc\\Model\\Criteria","text":"<p>implements Phalcon\\Mvc\\Model\\CriteriaInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>This class is used to build the array parameter required by Phalcon\\Mvc\\Model::find() and Phalcon\\Mvc\\Model::findFirst() using an object-oriented interface.</p> <pre><code>&lt;?php\n\n$robots = Robots::query()\n    -&gt;where(\"type = :type:\")\n    -&gt;andWhere(\"year &lt; 2000\")\n    -&gt;bind([\"type\" =&gt; \"mechanical\"])\n    -&gt;limit(5, 10)\n    -&gt;orderBy(\"name\")\n    -&gt;execute();\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Criteria/#methods","title":"Methods","text":"<p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the DependencyInjector container</p> <p>public  getDI ()</p> <p>Returns the DependencyInjector container</p> <p>public  setModelName (mixed $modelName)</p> <p>Set a model on which the query will be executed</p> <p>public  getModelName ()</p> <p>Returns an internal model name on which the criteria will be applied</p> <p>public  bind (array $bindParams, [mixed $merge])</p> <p>Sets the bound parameters in the criteria This method replaces all previously set bound parameters</p> <p>public  bindTypes (array $bindTypes)</p> <p>Sets the bind types in the criteria This method replaces all previously set bound parameters</p> <p>public  distinct (mixed $distinct)</p> <p>Sets SELECT DISTINCT / SELECT ALL flag</p> <p>public Phalcon\\Mvc\\Model\\Criteria columns (string | array $columns)</p> <p>Sets the columns to be queried</p> <pre><code>&lt;?php\n\n$criteria-&gt;columns(\n    [\n        \"id\",\n        \"name\",\n    ]\n);\n</code></pre> <p>public  join (mixed $model, [mixed $conditions], [mixed $alias], [mixed $type])</p> <p>Adds an INNER join to the query</p> <pre><code>&lt;?php\n\n$criteria-&gt;join(\"Robots\");\n$criteria-&gt;join(\"Robots\", \"r.id = RobotsParts.robots_id\");\n$criteria-&gt;join(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\");\n$criteria-&gt;join(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\", \"LEFT\");\n</code></pre> <p>public  innerJoin (mixed $model, [mixed $conditions], [mixed $alias])</p> <p>Adds an INNER join to the query</p> <pre><code>&lt;?php\n\n$criteria-&gt;innerJoin(\"Robots\");\n$criteria-&gt;innerJoin(\"Robots\", \"r.id = RobotsParts.robots_id\");\n$criteria-&gt;innerJoin(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\");\n</code></pre> <p>public  leftJoin (mixed $model, [mixed $conditions], [mixed $alias])</p> <p>Adds a LEFT join to the query</p> <pre><code>&lt;?php\n\n$criteria-&gt;leftJoin(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\");\n</code></pre> <p>public  rightJoin (mixed $model, [mixed $conditions], [mixed $alias])</p> <p>Adds a RIGHT join to the query</p> <pre><code>&lt;?php\n\n$criteria-&gt;rightJoin(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\");\n</code></pre> <p>public  where (mixed $conditions, [mixed $bindParams], [mixed $bindTypes])</p> <p>Sets the conditions parameter in the criteria</p> <p>public  addWhere (mixed $conditions, [mixed $bindParams], [mixed $bindTypes])</p> <p>Appends a condition to the current conditions using an AND operator (deprecated)</p> <p>public  andWhere (mixed $conditions, [mixed $bindParams], [mixed $bindTypes])</p> <p>Appends a condition to the current conditions using an AND operator</p> <p>public  orWhere (mixed $conditions, [mixed $bindParams], [mixed $bindTypes])</p> <p>Appends a condition to the current conditions using an OR operator</p> <p>public  betweenWhere (mixed $expr, mixed $minimum, mixed $maximum)</p> <p>Appends a BETWEEN condition to the current conditions</p> <pre><code>&lt;?php\n\n$criteria-&gt;betweenWhere(\"price\", 100.25, 200.50);\n</code></pre> <p>public  notBetweenWhere (mixed $expr, mixed $minimum, mixed $maximum)</p> <p>Appends a NOT BETWEEN condition to the current conditions</p> <pre><code>&lt;?php\n\n$criteria-&gt;notBetweenWhere(\"price\", 100.25, 200.50);\n</code></pre> <p>public  inWhere (mixed $expr, array $values)</p> <p>Appends an IN condition to the current conditions</p> <pre><code>&lt;?php\n\n$criteria-&gt;inWhere(\"id\", [1, 2, 3]);\n</code></pre> <p>public  notInWhere (mixed $expr, array $values)</p> <p>Appends a NOT IN condition to the current conditions</p> <pre><code>&lt;?php\n\n$criteria-&gt;notInWhere(\"id\", [1, 2, 3]);\n</code></pre> <p>public  conditions (mixed $conditions)</p> <p>Adds the conditions parameter to the criteria</p> <p>public  order (mixed $orderColumns)</p> <p>Adds the order-by parameter to the criteria (deprecated)</p> <p>public  orderBy (mixed $orderColumns)</p> <p>Adds the order-by clause to the criteria</p> <p>public  groupBy (mixed $group)</p> <p>Adds the group-by clause to the criteria</p> <p>public  having (mixed $having)</p> <p>Adds the having clause to the criteria</p> <p>public  limit (mixed $limit, [mixed $offset])</p> <p>Adds the limit parameter to the criteria.</p> <pre><code>&lt;?php\n\n$criteria-&gt;limit(100);\n$criteria-&gt;limit(100, 200);\n$criteria-&gt;limit(\"100\", \"200\");\n</code></pre> <p>public  forUpdate ([mixed $forUpdate])</p> <p>Adds the \"for_update\" parameter to the criteria</p> <p>public  sharedLock ([mixed $sharedLock])</p> <p>Adds the \"shared_lock\" parameter to the criteria</p> <p>public  cache (array $cache)</p> <p>Sets the cache options in the criteria This method replaces all previously set cache options</p> <p>public  getWhere ()</p> <p>Returns the conditions parameter in the criteria</p> <p>public string | array | null getColumns ()</p> <p>Returns the columns to be queried</p> <p>public  getConditions ()</p> <p>Returns the conditions parameter in the criteria</p> <p>public int | array | null getLimit ()</p> <p>Returns the limit parameter in the criteria, which will be an integer if limit was set without an offset, an array with 'number' and 'offset' keys if an offset was set with the limit, or null if limit has not been set.</p> <p>public  getOrderBy ()</p> <p>Returns the order clause in the criteria</p> <p>public  getGroupBy ()</p> <p>Returns the group clause in the criteria</p> <p>public  getHaving ()</p> <p>Returns the having clause in the criteria</p> <p>public array getParams ()</p> <p>Returns all the parameters defined in the criteria</p> <p>public static  fromInput (Phalcon\\DiInterface $dependencyInjector, mixed $modelName, array $data, [mixed $operator])</p> <p>Builds a Phalcon\\Mvc\\Model\\Criteria based on an input array like $_POST</p> <p>public  createBuilder ()</p> <p>Creates a query builder from criteria.</p> <pre><code>&lt;?php\n\n$builder = Robots::query()\n    -&gt;where(\"type = :type:\")\n    -&gt;bind([\"type\" =&gt; \"mechanical\"])\n    -&gt;createBuilder();\n</code></pre> <p>public  execute ()</p> <p>Executes a find using the parameters built with the criteria</p>"},{"location":"api/Phalcon_Mvc_Model_Criteria/#interface-phalconmvcmodelcriteriainterface","title":"Interface Phalcon\\Mvc\\Model\\CriteriaInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model_Criteria/#methods_1","title":"Methods","text":"<p>abstract public  setModelName (mixed $modelName)</p> <p>...</p> <p>abstract public  getModelName ()</p> <p>...</p> <p>abstract public  bind (array $bindParams)</p> <p>...</p> <p>abstract public  bindTypes (array $bindTypes)</p> <p>...</p> <p>abstract public  where (mixed $conditions)</p> <p>...</p> <p>abstract public  conditions (mixed $conditions)</p> <p>...</p> <p>abstract public  orderBy (mixed $orderColumns)</p> <p>...</p> <p>abstract public  limit (mixed $limit, [mixed $offset])</p> <p>...</p> <p>abstract public  forUpdate ([mixed $forUpdate])</p> <p>...</p> <p>abstract public  sharedLock ([mixed $sharedLock])</p> <p>...</p> <p>abstract public  andWhere (mixed $conditions, [mixed $bindParams], [mixed $bindTypes])</p> <p>...</p> <p>abstract public  orWhere (mixed $conditions, [mixed $bindParams], [mixed $bindTypes])</p> <p>...</p> <p>abstract public  betweenWhere (mixed $expr, mixed $minimum, mixed $maximum)</p> <p>...</p> <p>abstract public  notBetweenWhere (mixed $expr, mixed $minimum, mixed $maximum)</p> <p>...</p> <p>abstract public  inWhere (mixed $expr, array $values)</p> <p>...</p> <p>abstract public  notInWhere (mixed $expr, array $values)</p> <p>...</p> <p>abstract public  getWhere ()</p> <p>...</p> <p>abstract public  getConditions ()</p> <p>...</p> <p>abstract public  getLimit ()</p> <p>...</p> <p>abstract public  getOrderBy ()</p> <p>...</p> <p>abstract public  getParams ()</p> <p>...</p> <p>abstract public  execute ()</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model_Manager/","title":"Class Phalcon\\Mvc\\Model\\Manager","text":"<p>implements Phalcon\\Mvc\\Model\\ManagerInterface, Phalcon\\Di\\InjectionAwareInterface, Phalcon\\Events\\EventsAwareInterface</p> <p>Source on GitHub</p> <p>This components controls the initialization of models, keeping record of relations between the different models of the application.</p> <p>A ModelsManager is injected to a model via a Dependency Injector/Services Container such as Phalcon\\Di.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Mvc\\Model\\Manager as ModelsManager;\n\n$di = new Di();\n\n$di-&gt;set(\n    \"modelsManager\",\n    function() {\n        return new ModelsManager();\n    }\n);\n\n$robot = new Robots($di);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Manager/#methods","title":"Methods","text":"<p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the DependencyInjector container</p> <p>public  getDI ()</p> <p>Returns the DependencyInjector container</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager)</p> <p>Sets a global events manager</p> <p>public  getEventsManager ()</p> <p>Returns the internal event manager</p> <p>public  setCustomEventsManager (Phalcon\\Mvc\\ModelInterface $model, Phalcon\\Events\\ManagerInterface $eventsManager)</p> <p>Sets a custom events manager for a specific model</p> <p>public  getCustomEventsManager (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns a custom events manager related to a model</p> <p>public  initialize (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Initializes a model in the model manager</p> <p>public  isInitialized (mixed $modelName)</p> <p>Check whether a model is already initialized</p> <p>public  getLastInitialized ()</p> <p>Get last initialized model</p> <p>public  load (mixed $modelName, [mixed $newInstance])</p> <p>Loads a model throwing an exception if it doesn't exist</p> <p>public  setModelPrefix (mixed $prefix)</p> <p>Sets the prefix for all model sources.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Manager;\n\n$di-&gt;set(\"modelsManager\", function () {\n    $modelsManager = new Manager();\n    $modelsManager-&gt;setModelPrefix(\"wp_\");\n\n    return $modelsManager;\n});\n\n$robots = new Robots();\necho $robots-&gt;getSource(); // wp_robots\n</code></pre> <p>public  getModelPrefix ()</p> <p>Returns the prefix for all model sources.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Manager;\n\n$di-&gt;set(\"modelsManager\", function () {\n    $modelsManager = new Manager();\n    $modelsManager-&gt;setModelPrefix(\"wp_\");\n\n    return $modelsManager;\n});\n\n$robots = new Robots();\necho $robots-&gt;getSource(); // wp_robots\n</code></pre> <p>public  setModelSource (Phalcon\\Mvc\\ModelInterface $model, mixed $source)</p> <p>Sets the mapped source for a model</p> <p>final public  isVisibleModelProperty (Phalcon\\Mvc\\ModelInterface $model, mixed $property)</p> <p>Check whether a model property is declared as public.</p> <pre><code>&lt;?php\n\n$isPublic = $manager-&gt;isVisibleModelProperty(\n    new Robots(),\n    \"name\"\n);\n</code></pre> <p>public  getModelSource (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns the mapped source for a model</p> <p>public  setModelSchema (Phalcon\\Mvc\\ModelInterface $model, mixed $schema)</p> <p>Sets the mapped schema for a model</p> <p>public  getModelSchema (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns the mapped schema for a model</p> <p>public  setConnectionService (Phalcon\\Mvc\\ModelInterface $model, mixed $connectionService)</p> <p>Sets both write and read connection service for a model</p> <p>public  setWriteConnectionService (Phalcon\\Mvc\\ModelInterface $model, mixed $connectionService)</p> <p>Sets write connection service for a model</p> <p>public  setReadConnectionService (Phalcon\\Mvc\\ModelInterface $model, mixed $connectionService)</p> <p>Sets read connection service for a model</p> <p>public  getReadConnection (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns the connection to read data related to a model</p> <p>public  getWriteConnection (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns the connection to write data related to a model</p> <p>protected  _getConnection (Phalcon\\Mvc\\ModelInterface $model, mixed $connectionServices)</p> <p>Returns the connection to read or write data related to a model depending on the connection services.</p> <p>public  getReadConnectionService (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns the connection service name used to read data related to a model</p> <p>public  getWriteConnectionService (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns the connection service name used to write data related to a model</p> <p>public  _getConnectionService (Phalcon\\Mvc\\ModelInterface $model, mixed $connectionServices)</p> <p>Returns the connection service name used to read or write data related to a model depending on the connection services</p> <p>public  notifyEvent (mixed $eventName, Phalcon\\Mvc\\ModelInterface $model)</p> <p>Receives events generated in the models and dispatches them to an events-manager if available Notify the behaviors that are listening in the model</p> <p>public  missingMethod (Phalcon\\Mvc\\ModelInterface $model, mixed $eventName, mixed $data)</p> <p>Dispatch an event to the listeners and behaviors This method expects that the endpoint listeners/behaviors returns true meaning that a least one was implemented</p> <p>public  addBehavior (Phalcon\\Mvc\\ModelInterface $model, Phalcon\\Mvc\\Model\\BehaviorInterface $behavior)</p> <p>Binds a behavior to a model</p> <p>public  keepSnapshots (Phalcon\\Mvc\\ModelInterface $model, mixed $keepSnapshots)</p> <p>Sets if a model must keep snapshots</p> <p>public  isKeepingSnapshots (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Checks if a model is keeping snapshots for the queried records</p> <p>public  useDynamicUpdate (Phalcon\\Mvc\\ModelInterface $model, mixed $dynamicUpdate)</p> <p>Sets if a model must use dynamic update instead of the all-field update</p> <p>public  isUsingDynamicUpdate (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Checks if a model is using dynamic update instead of all-field update</p> <p>public Phalcon\\Mvc\\Model\\Relation addHasOne (Phalcon\\Mvc\\Model $model, mixed $fields, string $referencedModel, mixed $referencedFields, [array $options])</p> <p>Setup a 1-1 relation between two models</p> <p>public Phalcon\\Mvc\\Model\\Relation addBelongsTo (Phalcon\\Mvc\\Model $model, mixed $fields, string $referencedModel, mixed $referencedFields, [array $options])</p> <p>Setup a relation reverse many to one between two models</p> <p>public  addHasMany (Phalcon\\Mvc\\ModelInterface $model, mixed $fields, string $referencedModel, mixed $referencedFields, [array $options])</p> <p>Setup a relation 1-n between two models</p> <p>public Phalcon\\Mvc\\Model\\Relation addHasManyToMany (Phalcon\\Mvc\\ModelInterface $model, string $fields, string $intermediateModel, string $intermediateFields, string $intermediateReferencedFields, string $referencedModel, string $referencedFields, [array $options])</p> <p>Setups a relation n-m between two models</p> <p>public  existsBelongsTo (mixed $modelName, mixed $modelRelation)</p> <p>Checks whether a model has a belongsTo relation with another model</p> <p>public  existsHasMany (mixed $modelName, mixed $modelRelation)</p> <p>Checks whether a model has a hasMany relation with another model</p> <p>public  existsHasOne (mixed $modelName, mixed $modelRelation)</p> <p>Checks whether a model has a hasOne relation with another model</p> <p>public  existsHasManyToMany (mixed $modelName, mixed $modelRelation)</p> <p>Checks whether a model has a hasManyToMany relation with another model</p> <p>public  getRelationByAlias (mixed $modelName, mixed $alias)</p> <p>Returns a relation by its alias</p> <p>final protected  _mergeFindParameters (mixed $findParamsOne, mixed $findParamsTwo)</p> <p>Merge two arrays of find parameters</p> <p>public Phalcon\\Mvc\\Model\\Resultset\\Simple | Phalcon\\Mvc\\Model\\Resultset\\Simple | int | false getRelationRecords (Phalcon\\Mvc\\Model\\RelationInterface $relation, mixed $method, Phalcon\\Mvc\\ModelInterface $record, [mixed $parameters])</p> <p>Helper method to query records based on a relation definition</p> <p>public  getReusableRecords (mixed $modelName, mixed $key)</p> <p>Returns a reusable object from the internal list</p> <p>public  setReusableRecords (mixed $modelName, mixed $key, mixed $records)</p> <p>Stores a reusable record in the internal list</p> <p>public  clearReusableObjects ()</p> <p>Clears the internal reusable list</p> <p>public  getBelongsToRecords (mixed $method, mixed $modelName, mixed $modelRelation, Phalcon\\Mvc\\ModelInterface $record, [mixed $parameters])</p> <p>Gets belongsTo related records from a model</p> <p>public  getHasManyRecords (mixed $method, mixed $modelName, mixed $modelRelation, Phalcon\\Mvc\\ModelInterface $record, [mixed $parameters])</p> <p>Gets hasMany related records from a model</p> <p>public  getHasOneRecords (mixed $method, mixed $modelName, mixed $modelRelation, Phalcon\\Mvc\\ModelInterface $record, [mixed $parameters])</p> <p>Gets belongsTo related records from a model</p> <p>public  getBelongsTo (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Gets all the belongsTo relations defined in a model</p> <pre><code>&lt;?php\n\n$relations = $modelsManager-&gt;getBelongsTo(\n    new Robots()\n);\n</code></pre> <p>public  getHasMany (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Gets hasMany relations defined on a model</p> <p>public  getHasOne (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Gets hasOne relations defined on a model</p> <p>public  getHasManyToMany (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Gets hasManyToMany relations defined on a model</p> <p>public  getHasOneAndHasMany (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Gets hasOne relations defined on a model</p> <p>public  getRelations (mixed $modelName)</p> <p>Query all the relationships defined on a model</p> <p>public  getRelationsBetween (mixed $first, mixed $second)</p> <p>Query the first relationship defined between two models</p> <p>public  createQuery (mixed $phql)</p> <p>Creates a Phalcon\\Mvc\\Model\\Query without execute it</p> <p>public  executeQuery (mixed $phql, [mixed $placeholders], [mixed $types])</p> <p>Creates a Phalcon\\Mvc\\Model\\Query and execute it</p> <p>public  createBuilder ([mixed $params])</p> <p>Creates a Phalcon\\Mvc\\Model\\Query\\Builder</p> <p>public  getLastQuery ()</p> <p>Returns the last query created or executed in the models manager</p> <p>public  registerNamespaceAlias (mixed $alias, mixed $namespaceName)</p> <p>Registers shorter aliases for namespaces in PHQL statements</p> <p>public  getNamespaceAlias (mixed $alias)</p> <p>Returns a real namespace from its alias</p> <p>public  getNamespaceAliases ()</p> <p>Returns all the registered namespace aliases</p> <p>public  __destruct ()</p> <p>Destroys the current PHQL cache</p>"},{"location":"api/Phalcon_Mvc_Model_Manager/#interface-phalconmvcmodelmanagerinterface","title":"Interface Phalcon\\Mvc\\Model\\ManagerInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model_Manager/#methods_1","title":"Methods","text":"<p>abstract public  initialize (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  setModelSource (Phalcon\\Mvc\\ModelInterface $model, mixed $source)</p> <p>...</p> <p>abstract public  getModelSource (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  setModelSchema (Phalcon\\Mvc\\ModelInterface $model, mixed $schema)</p> <p>...</p> <p>abstract public  getModelSchema (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  setConnectionService (Phalcon\\Mvc\\ModelInterface $model, mixed $connectionService)</p> <p>...</p> <p>abstract public  setReadConnectionService (Phalcon\\Mvc\\ModelInterface $model, mixed $connectionService)</p> <p>...</p> <p>abstract public  getReadConnectionService (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  setWriteConnectionService (Phalcon\\Mvc\\ModelInterface $model, mixed $connectionService)</p> <p>...</p> <p>abstract public  getWriteConnectionService (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  getReadConnection (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  getWriteConnection (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  isInitialized (mixed $modelName)</p> <p>...</p> <p>abstract public  getLastInitialized ()</p> <p>...</p> <p>abstract public  load (mixed $modelName, [mixed $newInstance])</p> <p>...</p> <p>abstract public  addHasOne (Phalcon\\Mvc\\ModelInterface $model, mixed $fields, mixed $referencedModel, mixed $referencedFields, [mixed $options])</p> <p>...</p> <p>abstract public  addBelongsTo (Phalcon\\Mvc\\ModelInterface $model, mixed $fields, mixed $referencedModel, mixed $referencedFields, [mixed $options])</p> <p>...</p> <p>abstract public  addHasMany (Phalcon\\Mvc\\ModelInterface $model, mixed $fields, mixed $referencedModel, mixed $referencedFields, [mixed $options])</p> <p>...</p> <p>abstract public  existsBelongsTo (mixed $modelName, mixed $modelRelation)</p> <p>...</p> <p>abstract public  existsHasMany (mixed $modelName, mixed $modelRelation)</p> <p>...</p> <p>abstract public  existsHasOne (mixed $modelName, mixed $modelRelation)</p> <p>...</p> <p>abstract public  getBelongsToRecords (mixed $method, mixed $modelName, mixed $modelRelation, Phalcon\\Mvc\\ModelInterface $record, [mixed $parameters])</p> <p>...</p> <p>abstract public  getHasManyRecords (mixed $method, mixed $modelName, mixed $modelRelation, Phalcon\\Mvc\\ModelInterface $record, [mixed $parameters])</p> <p>...</p> <p>abstract public  getHasOneRecords (mixed $method, mixed $modelName, mixed $modelRelation, Phalcon\\Mvc\\ModelInterface $record, [mixed $parameters])</p> <p>...</p> <p>abstract public  getBelongsTo (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  getHasMany (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  getHasOne (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  getHasOneAndHasMany (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  getRelations (mixed $modelName)</p> <p>...</p> <p>abstract public  getRelationsBetween (mixed $first, mixed $second)</p> <p>...</p> <p>abstract public  createQuery (mixed $phql)</p> <p>...</p> <p>abstract public  executeQuery (mixed $phql, [mixed $placeholders])</p> <p>...</p> <p>abstract public  createBuilder ([mixed $params])</p> <p>...</p> <p>abstract public  addBehavior (Phalcon\\Mvc\\ModelInterface $model, Phalcon\\Mvc\\Model\\BehaviorInterface $behavior)</p> <p>...</p> <p>abstract public  notifyEvent (mixed $eventName, Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  missingMethod (Phalcon\\Mvc\\ModelInterface $model, mixed $eventName, mixed $data)</p> <p>...</p> <p>abstract public  getLastQuery ()</p> <p>...</p> <p>abstract public  getRelationByAlias (mixed $modelName, mixed $alias)</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model_Message/","title":"Class Phalcon\\Mvc\\Model\\Message","text":"<p>implements Phalcon\\Mvc\\Model\\MessageInterface</p> <p>Source on GitHub</p> <p>Encapsulates validation info generated before save/delete records fails</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Message as Message;\n\nclass Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function beforeSave()\n    {\n        if ($this-&gt;name === \"Peter\") {\n            $text  = \"A robot cannot be named Peter\";\n            $field = \"name\";\n            $type  = \"InvalidValue\";\n\n            $message = new Message($text, $field, $type);\n\n            $this-&gt;appendMessage($message);\n        }\n    }\n}\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Message/#methods","title":"Methods","text":"<p>public  __construct (string $message, [string | array $field], [string $type], [Phalcon\\Mvc\\ModelInterface $model], [int | null $code])</p> <p>Phalcon\\Mvc\\Model\\Message constructor</p> <p>public  setType (mixed $type)</p> <p>Sets message type</p> <p>public  getType ()</p> <p>Returns message type</p> <p>public  setMessage (mixed $message)</p> <p>Sets verbose message</p> <p>public  getMessage ()</p> <p>Returns verbose message</p> <p>public  setField (mixed $field)</p> <p>Sets field name related to message</p> <p>public  getField ()</p> <p>Returns field name related to message</p> <p>public  setModel (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Set the model who generates the message</p> <p>public  setCode (mixed $code)</p> <p>Sets code for the message</p> <p>public  getModel ()</p> <p>Returns the model that produced the message</p> <p>public  getCode ()</p> <p>Returns the message code</p> <p>public  __toString ()</p> <p>Magic __toString method returns verbose message</p> <p>public static  __set_state (array $message)</p> <p>Magic __set_state helps to re-build messages variable exporting</p>"},{"location":"api/Phalcon_Mvc_Model_Message/#interface-phalconmvcmodelmessageinterface","title":"Interface Phalcon\\Mvc\\Model\\MessageInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model_Message/#methods_1","title":"Methods","text":"<p>abstract public  setType (mixed $type)</p> <p>...</p> <p>abstract public  getType ()</p> <p>...</p> <p>abstract public  setMessage (mixed $message)</p> <p>...</p> <p>abstract public  getMessage ()</p> <p>...</p> <p>abstract public  setField (mixed $field)</p> <p>...</p> <p>abstract public  getField ()</p> <p>...</p> <p>abstract public  __toString ()</p> <p>...</p> <p>abstract public static  __set_state (array $message)</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model_MetaData/","title":"Abstract class Phalcon\\Mvc\\Model\\MetaData","text":"<p>implements Phalcon\\Di\\InjectionAwareInterface, Phalcon\\Mvc\\Model\\MetaDataInterface</p> <p>Source on GitHub</p> <p>Because Phalcon\\Mvc\\Model requires meta-data like field names, data types, primary keys, etc. this component collect them and store for further querying by Phalcon\\Mvc\\Model. Phalcon\\Mvc\\Model\\MetaData can also use adapters to store temporarily or permanently the meta-data.</p> <p>A standard Phalcon\\Mvc\\Model\\MetaData can be used to query model attributes:</p> <pre><code>&lt;?php\n\n$metaData = new \\Phalcon\\Mvc\\Model\\MetaData\\Memory();\n\n$attributes = $metaData-&gt;getAttributes(\n    new Robots()\n);\n\nprint_r($attributes);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#constants","title":"Constants","text":"<p>integer MODELS_ATTRIBUTES</p> <p>integer MODELS_PRIMARY_KEY</p> <p>integer MODELS_NON_PRIMARY_KEY</p> <p>integer MODELS_NOT_NULL</p> <p>integer MODELS_DATA_TYPES</p> <p>integer MODELS_DATA_TYPES_NUMERIC</p> <p>integer MODELS_DATE_AT</p> <p>integer MODELS_DATE_IN</p> <p>integer MODELS_IDENTITY_COLUMN</p> <p>integer MODELS_DATA_TYPES_BIND</p> <p>integer MODELS_AUTOMATIC_DEFAULT_INSERT</p> <p>integer MODELS_AUTOMATIC_DEFAULT_UPDATE</p> <p>integer MODELS_DEFAULT_VALUES</p> <p>integer MODELS_EMPTY_STRING_VALUES</p> <p>integer MODELS_COLUMN_MAP</p> <p>integer MODELS_REVERSE_COLUMN_MAP</p>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#methods","title":"Methods","text":"<p>final protected  _initialize (Phalcon\\Mvc\\ModelInterface $model, mixed $key, mixed $table, mixed $schema)</p> <p>Initialize the metadata for certain table</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the DependencyInjector container</p> <p>public  getDI ()</p> <p>Returns the DependencyInjector container</p> <p>public  setStrategy (Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface $strategy)</p> <p>Set the meta-data extraction strategy</p> <p>public  getStrategy ()</p> <p>Return the strategy to obtain the meta-data</p> <p>final public  readMetaData (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Reads the complete meta-data for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readMetaData(\n        new Robots()\n    )\n);\n</code></pre> <p>final public  readMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index)</p> <p>Reads meta-data for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n</code></pre> <p>final public  writeMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index, mixed $data)</p> <p>Writes meta-data for certain model using a MODEL_* constant</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;writeMetaDataIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" =&gt; \"name\",\n        ]\n    )\n);\n</code></pre> <p>final public  readColumnMap (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Reads the ordered/reversed column map for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>final public  readColumnMapIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index)</p> <p>Reads column-map information for certain model using a MODEL_* constant</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n</code></pre> <p>public  getAttributes (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns table attributes names (fields)</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns an array of fields which are part of the primary key</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getNonPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns an array of fields which are not part of the primary key</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getNotNullAttributes (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns an array of not null attributes</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getNotNullAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDataTypes (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns attributes and their data types</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDataTypes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDataTypesNumeric (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns attributes which types are numerical</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDataTypesNumeric(\n        new Robots()\n    )\n);\n</code></pre> <p>public string getIdentityField (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns the name of identity field (if one is present)</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getIdentityField(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getBindTypes (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns attributes and their bind data types</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getBindTypes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns attributes that must be ignored from the INSERT SQL generation</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  setAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes)</p> <p>Set the attributes that must be ignored from the INSERT SQL generation</p> <pre><code>&lt;?php\n\n$metaData-&gt;setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  setAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes)</p> <p>Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>&lt;?php\n\n$metaData-&gt;setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  setEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes)</p> <p>Set the attributes that allow empty string values</p> <pre><code>&lt;?php\n\n$metaData-&gt;setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  getEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns attributes allow empty strings</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getEmptyStringAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDefaultValues (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns attributes (which have default values) and their default values</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDefaultValues(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getColumnMap (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns the column map if any</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getReverseColumnMap (Phalcon\\Mvc\\ModelInterface $model)</p> <p>Returns the reverse column map if any</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getReverseColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>public  hasAttribute (Phalcon\\Mvc\\ModelInterface $model, mixed $attribute)</p> <p>Check if a model has certain attribute</p> <pre><code>&lt;?php\n\nvar_dump(\n    $metaData-&gt;hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n</code></pre> <p>public  isEmpty ()</p> <p>Checks if the internal meta-data container is empty</p> <pre><code>&lt;?php\n\nvar_dump(\n    $metaData-&gt;isEmpty()\n);\n</code></pre> <p>public  reset ()</p> <p>Resets internal meta-data in order to regenerate it</p> <pre><code>&lt;?php\n\n$metaData-&gt;reset();\n</code></pre> <p>abstract public  read (mixed $key) inherited from Phalcon\\Mvc\\Model\\MetaDataInterface</p> <p>...</p> <p>abstract public  write (mixed $key, mixed $data) inherited from Phalcon\\Mvc\\Model\\MetaDataInterface</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#class-phalconmvcmodelmetadataapc","title":"Class Phalcon\\Mvc\\Model\\MetaData\\Apc","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\MetaData</p> <p>implements Phalcon\\Mvc\\Model\\MetaDataInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>Stores model meta-data in the APC cache. Data will erased if the web server is restarted</p> <p>By default meta-data is stored for 48 hours (172800 seconds)</p> <p>You can query the meta-data by printing apc_fetch('$PMM$') or apc_fetch('$PMM$my-app-id')</p> <pre><code>&lt;?php\n\n$metaData = new \\Phalcon\\Mvc\\Model\\Metadata\\Apc(\n    [\n        \"prefix\"   =&gt; \"my-app-id\",\n        \"lifetime\" =&gt; 86400,\n    ]\n);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#constants_1","title":"Constants","text":"<p>integer MODELS_ATTRIBUTES</p> <p>integer MODELS_PRIMARY_KEY</p> <p>integer MODELS_NON_PRIMARY_KEY</p> <p>integer MODELS_NOT_NULL</p> <p>integer MODELS_DATA_TYPES</p> <p>integer MODELS_DATA_TYPES_NUMERIC</p> <p>integer MODELS_DATE_AT</p> <p>integer MODELS_DATE_IN</p> <p>integer MODELS_IDENTITY_COLUMN</p> <p>integer MODELS_DATA_TYPES_BIND</p> <p>integer MODELS_AUTOMATIC_DEFAULT_INSERT</p> <p>integer MODELS_AUTOMATIC_DEFAULT_UPDATE</p> <p>integer MODELS_DEFAULT_VALUES</p> <p>integer MODELS_EMPTY_STRING_VALUES</p> <p>integer MODELS_COLUMN_MAP</p> <p>integer MODELS_REVERSE_COLUMN_MAP</p>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#methods_1","title":"Methods","text":"<p>public  __construct ([array $options])</p> <p>Phalcon\\Mvc\\Model\\MetaData\\Apc constructor</p> <p>public  read (mixed $key)</p> <p>Reads meta-data from APC</p> <p>public  write (mixed $key, mixed $data)</p> <p>Writes the meta-data to APC</p> <p>final protected  _initialize (Phalcon\\Mvc\\ModelInterface $model, mixed $key, mixed $table, mixed $schema) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Initialize the metadata for certain table</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Sets the DependencyInjector container</p> <p>public  getDI () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the DependencyInjector container</p> <p>public  setStrategy (Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface $strategy) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the meta-data extraction strategy</p> <p>public  getStrategy () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Return the strategy to obtain the meta-data</p> <p>final public  readMetaData (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads the complete meta-data for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readMetaData(\n        new Robots()\n    )\n);\n</code></pre> <p>final public  readMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads meta-data for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n</code></pre> <p>final public  writeMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index, mixed $data) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Writes meta-data for certain model using a MODEL_* constant</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;writeMetaDataIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" =&gt; \"name\",\n        ]\n    )\n);\n</code></pre> <p>final public  readColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads the ordered/reversed column map for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>final public  readColumnMapIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads column-map information for certain model using a MODEL_* constant</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n</code></pre> <p>public  getAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns table attributes names (fields)</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of fields which are part of the primary key</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getNonPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of fields which are not part of the primary key</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getNotNullAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of not null attributes</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getNotNullAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDataTypes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes and their data types</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDataTypes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDataTypesNumeric (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes which types are numerical</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDataTypesNumeric(\n        new Robots()\n    )\n);\n</code></pre> <p>public string getIdentityField (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the name of identity field (if one is present)</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getIdentityField(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getBindTypes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes and their bind data types</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getBindTypes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes that must be ignored from the INSERT SQL generation</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  setAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that must be ignored from the INSERT SQL generation</p> <pre><code>&lt;?php\n\n$metaData-&gt;setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  setAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>&lt;?php\n\n$metaData-&gt;setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  setEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that allow empty string values</p> <pre><code>&lt;?php\n\n$metaData-&gt;setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  getEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes allow empty strings</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getEmptyStringAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDefaultValues (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes (which have default values) and their default values</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDefaultValues(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the column map if any</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getReverseColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the reverse column map if any</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getReverseColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>public  hasAttribute (Phalcon\\Mvc\\ModelInterface $model, mixed $attribute) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Check if a model has certain attribute</p> <pre><code>&lt;?php\n\nvar_dump(\n    $metaData-&gt;hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n</code></pre> <p>public  isEmpty () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Checks if the internal meta-data container is empty</p> <pre><code>&lt;?php\n\nvar_dump(\n    $metaData-&gt;isEmpty()\n);\n</code></pre> <p>public  reset () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Resets internal meta-data in order to regenerate it</p> <pre><code>&lt;?php\n\n$metaData-&gt;reset();\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#class-phalconmvcmodelmetadatafiles","title":"Class Phalcon\\Mvc\\Model\\MetaData\\Files","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\MetaData</p> <p>implements Phalcon\\Mvc\\Model\\MetaDataInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>Stores model meta-data in PHP files.</p> <pre><code>&lt;?php\n\n$metaData = new \\Phalcon\\Mvc\\Model\\Metadata\\Files(\n    [\n        \"metaDataDir\" =&gt; \"app/cache/metadata/\",\n    ]\n);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#constants_2","title":"Constants","text":"<p>integer MODELS_ATTRIBUTES</p> <p>integer MODELS_PRIMARY_KEY</p> <p>integer MODELS_NON_PRIMARY_KEY</p> <p>integer MODELS_NOT_NULL</p> <p>integer MODELS_DATA_TYPES</p> <p>integer MODELS_DATA_TYPES_NUMERIC</p> <p>integer MODELS_DATE_AT</p> <p>integer MODELS_DATE_IN</p> <p>integer MODELS_IDENTITY_COLUMN</p> <p>integer MODELS_DATA_TYPES_BIND</p> <p>integer MODELS_AUTOMATIC_DEFAULT_INSERT</p> <p>integer MODELS_AUTOMATIC_DEFAULT_UPDATE</p> <p>integer MODELS_DEFAULT_VALUES</p> <p>integer MODELS_EMPTY_STRING_VALUES</p> <p>integer MODELS_COLUMN_MAP</p> <p>integer MODELS_REVERSE_COLUMN_MAP</p>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#methods_2","title":"Methods","text":"<p>public  __construct ([array $options])</p> <p>Phalcon\\Mvc\\Model\\MetaData\\Files constructor</p> <p>public mixed read (string $key)</p> <p>Reads meta-data from files</p> <p>public  write (string $key, array $data)</p> <p>Writes the meta-data to files</p> <p>final protected  _initialize (Phalcon\\Mvc\\ModelInterface $model, mixed $key, mixed $table, mixed $schema) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Initialize the metadata for certain table</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Sets the DependencyInjector container</p> <p>public  getDI () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the DependencyInjector container</p> <p>public  setStrategy (Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface $strategy) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the meta-data extraction strategy</p> <p>public  getStrategy () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Return the strategy to obtain the meta-data</p> <p>final public  readMetaData (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads the complete meta-data for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readMetaData(\n        new Robots()\n    )\n);\n</code></pre> <p>final public  readMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads meta-data for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n</code></pre> <p>final public  writeMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index, mixed $data) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Writes meta-data for certain model using a MODEL_* constant</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;writeMetaDataIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" =&gt; \"name\",\n        ]\n    )\n);\n</code></pre> <p>final public  readColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads the ordered/reversed column map for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>final public  readColumnMapIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads column-map information for certain model using a MODEL_* constant</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n</code></pre> <p>public  getAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns table attributes names (fields)</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of fields which are part of the primary key</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getNonPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of fields which are not part of the primary key</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getNotNullAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of not null attributes</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getNotNullAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDataTypes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes and their data types</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDataTypes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDataTypesNumeric (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes which types are numerical</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDataTypesNumeric(\n        new Robots()\n    )\n);\n</code></pre> <p>public string getIdentityField (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the name of identity field (if one is present)</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getIdentityField(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getBindTypes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes and their bind data types</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getBindTypes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes that must be ignored from the INSERT SQL generation</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  setAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that must be ignored from the INSERT SQL generation</p> <pre><code>&lt;?php\n\n$metaData-&gt;setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  setAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>&lt;?php\n\n$metaData-&gt;setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  setEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that allow empty string values</p> <pre><code>&lt;?php\n\n$metaData-&gt;setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  getEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes allow empty strings</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getEmptyStringAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDefaultValues (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes (which have default values) and their default values</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDefaultValues(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the column map if any</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getReverseColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the reverse column map if any</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getReverseColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>public  hasAttribute (Phalcon\\Mvc\\ModelInterface $model, mixed $attribute) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Check if a model has certain attribute</p> <pre><code>&lt;?php\n\nvar_dump(\n    $metaData-&gt;hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n</code></pre> <p>public  isEmpty () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Checks if the internal meta-data container is empty</p> <pre><code>&lt;?php\n\nvar_dump(\n    $metaData-&gt;isEmpty()\n);\n</code></pre> <p>public  reset () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Resets internal meta-data in order to regenerate it</p> <pre><code>&lt;?php\n\n$metaData-&gt;reset();\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#class-phalconmvcmodelmetadatalibmemcached","title":"Class Phalcon\\Mvc\\Model\\MetaData\\Libmemcached","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\MetaData</p> <p>implements Phalcon\\Mvc\\Model\\MetaDataInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>Stores model meta-data in the Memcache.</p> <p>By default meta-data is stored for 48 hours (172800 seconds)</p> <pre><code>&lt;?php\n\n$metaData = new Phalcon\\Mvc\\Model\\Metadata\\Libmemcached(\n    [\n        \"servers\" =&gt; [\n            [\n                \"host\"   =&gt; \"localhost\",\n                \"port\"   =&gt; 11211,\n                \"weight\" =&gt; 1,\n            ],\n        ],\n        \"client\" =&gt; [\n            Memcached::OPT_HASH       =&gt; Memcached::HASH_MD5,\n            Memcached::OPT_PREFIX_KEY =&gt; \"prefix.\",\n        ],\n        \"lifetime\" =&gt; 3600,\n        \"prefix\"   =&gt; \"my_\",\n    ]\n);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#constants_3","title":"Constants","text":"<p>integer MODELS_ATTRIBUTES</p> <p>integer MODELS_PRIMARY_KEY</p> <p>integer MODELS_NON_PRIMARY_KEY</p> <p>integer MODELS_NOT_NULL</p> <p>integer MODELS_DATA_TYPES</p> <p>integer MODELS_DATA_TYPES_NUMERIC</p> <p>integer MODELS_DATE_AT</p> <p>integer MODELS_DATE_IN</p> <p>integer MODELS_IDENTITY_COLUMN</p> <p>integer MODELS_DATA_TYPES_BIND</p> <p>integer MODELS_AUTOMATIC_DEFAULT_INSERT</p> <p>integer MODELS_AUTOMATIC_DEFAULT_UPDATE</p> <p>integer MODELS_DEFAULT_VALUES</p> <p>integer MODELS_EMPTY_STRING_VALUES</p> <p>integer MODELS_COLUMN_MAP</p> <p>integer MODELS_REVERSE_COLUMN_MAP</p>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#methods_3","title":"Methods","text":"<p>public  __construct ([array $options])</p> <p>Phalcon\\Mvc\\Model\\MetaData\\Libmemcached constructor</p> <p>public  read (mixed $key)</p> <p>Reads metadata from Memcache</p> <p>public  write (mixed $key, mixed $data)</p> <p>Writes the metadata to Memcache</p> <p>public  reset ()</p> <p>Flush Memcache data and resets internal meta-data in order to regenerate it</p> <p>final protected  _initialize (Phalcon\\Mvc\\ModelInterface $model, mixed $key, mixed $table, mixed $schema) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Initialize the metadata for certain table</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Sets the DependencyInjector container</p> <p>public  getDI () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the DependencyInjector container</p> <p>public  setStrategy (Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface $strategy) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the meta-data extraction strategy</p> <p>public  getStrategy () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Return the strategy to obtain the meta-data</p> <p>final public  readMetaData (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads the complete meta-data for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readMetaData(\n        new Robots()\n    )\n);\n</code></pre> <p>final public  readMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads meta-data for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n</code></pre> <p>final public  writeMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index, mixed $data) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Writes meta-data for certain model using a MODEL_* constant</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;writeMetaDataIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" =&gt; \"name\",\n        ]\n    )\n);\n</code></pre> <p>final public  readColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads the ordered/reversed column map for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>final public  readColumnMapIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads column-map information for certain model using a MODEL_* constant</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n</code></pre> <p>public  getAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns table attributes names (fields)</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of fields which are part of the primary key</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getNonPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of fields which are not part of the primary key</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getNotNullAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of not null attributes</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getNotNullAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDataTypes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes and their data types</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDataTypes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDataTypesNumeric (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes which types are numerical</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDataTypesNumeric(\n        new Robots()\n    )\n);\n</code></pre> <p>public string getIdentityField (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the name of identity field (if one is present)</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getIdentityField(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getBindTypes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes and their bind data types</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getBindTypes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes that must be ignored from the INSERT SQL generation</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  setAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that must be ignored from the INSERT SQL generation</p> <pre><code>&lt;?php\n\n$metaData-&gt;setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  setAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>&lt;?php\n\n$metaData-&gt;setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  setEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that allow empty string values</p> <pre><code>&lt;?php\n\n$metaData-&gt;setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  getEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes allow empty strings</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getEmptyStringAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDefaultValues (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes (which have default values) and their default values</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDefaultValues(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the column map if any</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getReverseColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the reverse column map if any</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getReverseColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>public  hasAttribute (Phalcon\\Mvc\\ModelInterface $model, mixed $attribute) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Check if a model has certain attribute</p> <pre><code>&lt;?php\n\nvar_dump(\n    $metaData-&gt;hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n</code></pre> <p>public  isEmpty () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Checks if the internal meta-data container is empty</p> <pre><code>&lt;?php\n\nvar_dump(\n    $metaData-&gt;isEmpty()\n);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#class-phalconmvcmodelmetadatamemcache","title":"Class Phalcon\\Mvc\\Model\\MetaData\\Memcache","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\MetaData</p> <p>implements Phalcon\\Mvc\\Model\\MetaDataInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>Stores model meta-data in the Memcache.</p> <p>By default meta-data is stored for 48 hours (172800 seconds)</p> <pre><code>&lt;?php\n\n$metaData = new Phalcon\\Mvc\\Model\\Metadata\\Memcache(\n    [\n        \"prefix\"     =&gt; \"my-app-id\",\n        \"lifetime\"   =&gt; 86400,\n        \"host\"       =&gt; \"localhost\",\n        \"port\"       =&gt; 11211,\n        \"persistent\" =&gt; false,\n    ]\n);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#constants_4","title":"Constants","text":"<p>integer MODELS_ATTRIBUTES</p> <p>integer MODELS_PRIMARY_KEY</p> <p>integer MODELS_NON_PRIMARY_KEY</p> <p>integer MODELS_NOT_NULL</p> <p>integer MODELS_DATA_TYPES</p> <p>integer MODELS_DATA_TYPES_NUMERIC</p> <p>integer MODELS_DATE_AT</p> <p>integer MODELS_DATE_IN</p> <p>integer MODELS_IDENTITY_COLUMN</p> <p>integer MODELS_DATA_TYPES_BIND</p> <p>integer MODELS_AUTOMATIC_DEFAULT_INSERT</p> <p>integer MODELS_AUTOMATIC_DEFAULT_UPDATE</p> <p>integer MODELS_DEFAULT_VALUES</p> <p>integer MODELS_EMPTY_STRING_VALUES</p> <p>integer MODELS_COLUMN_MAP</p> <p>integer MODELS_REVERSE_COLUMN_MAP</p>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#methods_4","title":"Methods","text":"<p>public  __construct ([array $options])</p> <p>Phalcon\\Mvc\\Model\\MetaData\\Memcache constructor</p> <p>public  read (mixed $key)</p> <p>Reads metadata from Memcache</p> <p>public  write (mixed $key, mixed $data)</p> <p>Writes the metadata to Memcache</p> <p>public  reset ()</p> <p>Flush Memcache data and resets internal meta-data in order to regenerate it</p> <p>final protected  _initialize (Phalcon\\Mvc\\ModelInterface $model, mixed $key, mixed $table, mixed $schema) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Initialize the metadata for certain table</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Sets the DependencyInjector container</p> <p>public  getDI () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the DependencyInjector container</p> <p>public  setStrategy (Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface $strategy) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the meta-data extraction strategy</p> <p>public  getStrategy () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Return the strategy to obtain the meta-data</p> <p>final public  readMetaData (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads the complete meta-data for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readMetaData(\n        new Robots()\n    )\n);\n</code></pre> <p>final public  readMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads meta-data for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n</code></pre> <p>final public  writeMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index, mixed $data) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Writes meta-data for certain model using a MODEL_* constant</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;writeMetaDataIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" =&gt; \"name\",\n        ]\n    )\n);\n</code></pre> <p>final public  readColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads the ordered/reversed column map for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>final public  readColumnMapIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads column-map information for certain model using a MODEL_* constant</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n</code></pre> <p>public  getAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns table attributes names (fields)</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of fields which are part of the primary key</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getNonPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of fields which are not part of the primary key</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getNotNullAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of not null attributes</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getNotNullAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDataTypes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes and their data types</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDataTypes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDataTypesNumeric (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes which types are numerical</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDataTypesNumeric(\n        new Robots()\n    )\n);\n</code></pre> <p>public string getIdentityField (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the name of identity field (if one is present)</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getIdentityField(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getBindTypes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes and their bind data types</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getBindTypes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes that must be ignored from the INSERT SQL generation</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  setAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that must be ignored from the INSERT SQL generation</p> <pre><code>&lt;?php\n\n$metaData-&gt;setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  setAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>&lt;?php\n\n$metaData-&gt;setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  setEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that allow empty string values</p> <pre><code>&lt;?php\n\n$metaData-&gt;setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  getEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes allow empty strings</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getEmptyStringAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDefaultValues (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes (which have default values) and their default values</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDefaultValues(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the column map if any</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getReverseColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the reverse column map if any</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getReverseColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>public  hasAttribute (Phalcon\\Mvc\\ModelInterface $model, mixed $attribute) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Check if a model has certain attribute</p> <pre><code>&lt;?php\n\nvar_dump(\n    $metaData-&gt;hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n</code></pre> <p>public  isEmpty () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Checks if the internal meta-data container is empty</p> <pre><code>&lt;?php\n\nvar_dump(\n    $metaData-&gt;isEmpty()\n);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#class-phalconmvcmodelmetadatamemory","title":"Class Phalcon\\Mvc\\Model\\MetaData\\Memory","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\MetaData</p> <p>implements Phalcon\\Mvc\\Model\\MetaDataInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>Stores model meta-data in memory. Data will be erased when the request finishes</p>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#constants_5","title":"Constants","text":"<p>integer MODELS_ATTRIBUTES</p> <p>integer MODELS_PRIMARY_KEY</p> <p>integer MODELS_NON_PRIMARY_KEY</p> <p>integer MODELS_NOT_NULL</p> <p>integer MODELS_DATA_TYPES</p> <p>integer MODELS_DATA_TYPES_NUMERIC</p> <p>integer MODELS_DATE_AT</p> <p>integer MODELS_DATE_IN</p> <p>integer MODELS_IDENTITY_COLUMN</p> <p>integer MODELS_DATA_TYPES_BIND</p> <p>integer MODELS_AUTOMATIC_DEFAULT_INSERT</p> <p>integer MODELS_AUTOMATIC_DEFAULT_UPDATE</p> <p>integer MODELS_DEFAULT_VALUES</p> <p>integer MODELS_EMPTY_STRING_VALUES</p> <p>integer MODELS_COLUMN_MAP</p> <p>integer MODELS_REVERSE_COLUMN_MAP</p>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#methods_5","title":"Methods","text":"<p>public  __construct ([array $options])</p> <p>Phalcon\\Mvc\\Model\\MetaData\\Memory constructor</p> <p>public array read (string $key)</p> <p>Reads the meta-data from temporal memory</p> <p>public  write (string $key, array $data)</p> <p>Writes the meta-data to temporal memory</p> <p>final protected  _initialize (Phalcon\\Mvc\\ModelInterface $model, mixed $key, mixed $table, mixed $schema) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Initialize the metadata for certain table</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Sets the DependencyInjector container</p> <p>public  getDI () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the DependencyInjector container</p> <p>public  setStrategy (Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface $strategy) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the meta-data extraction strategy</p> <p>public  getStrategy () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Return the strategy to obtain the meta-data</p> <p>final public  readMetaData (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads the complete meta-data for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readMetaData(\n        new Robots()\n    )\n);\n</code></pre> <p>final public  readMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads meta-data for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n</code></pre> <p>final public  writeMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index, mixed $data) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Writes meta-data for certain model using a MODEL_* constant</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;writeMetaDataIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" =&gt; \"name\",\n        ]\n    )\n);\n</code></pre> <p>final public  readColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads the ordered/reversed column map for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>final public  readColumnMapIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads column-map information for certain model using a MODEL_* constant</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n</code></pre> <p>public  getAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns table attributes names (fields)</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of fields which are part of the primary key</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getNonPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of fields which are not part of the primary key</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getNotNullAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of not null attributes</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getNotNullAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDataTypes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes and their data types</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDataTypes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDataTypesNumeric (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes which types are numerical</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDataTypesNumeric(\n        new Robots()\n    )\n);\n</code></pre> <p>public string getIdentityField (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the name of identity field (if one is present)</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getIdentityField(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getBindTypes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes and their bind data types</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getBindTypes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes that must be ignored from the INSERT SQL generation</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  setAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that must be ignored from the INSERT SQL generation</p> <pre><code>&lt;?php\n\n$metaData-&gt;setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  setAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>&lt;?php\n\n$metaData-&gt;setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  setEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that allow empty string values</p> <pre><code>&lt;?php\n\n$metaData-&gt;setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  getEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes allow empty strings</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getEmptyStringAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDefaultValues (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes (which have default values) and their default values</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDefaultValues(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the column map if any</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getReverseColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the reverse column map if any</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getReverseColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>public  hasAttribute (Phalcon\\Mvc\\ModelInterface $model, mixed $attribute) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Check if a model has certain attribute</p> <pre><code>&lt;?php\n\nvar_dump(\n    $metaData-&gt;hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n</code></pre> <p>public  isEmpty () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Checks if the internal meta-data container is empty</p> <pre><code>&lt;?php\n\nvar_dump(\n    $metaData-&gt;isEmpty()\n);\n</code></pre> <p>public  reset () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Resets internal meta-data in order to regenerate it</p> <pre><code>&lt;?php\n\n$metaData-&gt;reset();\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#class-phalconmvcmodelmetadataredis","title":"Class Phalcon\\Mvc\\Model\\MetaData\\Redis","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\MetaData</p> <p>implements Phalcon\\Mvc\\Model\\MetaDataInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>Stores model meta-data in the Redis.</p> <p>By default meta-data is stored for 48 hours (172800 seconds)</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Metadata\\Redis;\n\n$metaData = new Redis(\n    [\n        \"host\"       =&gt; \"127.0.0.1\",\n        \"port\"       =&gt; 6379,\n        \"persistent\" =&gt; 0,\n        \"statsKey\"   =&gt; \"_PHCM_MM\",\n        \"lifetime\"   =&gt; 172800,\n        \"index\"      =&gt; 2,\n    ]\n);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#constants_6","title":"Constants","text":"<p>integer MODELS_ATTRIBUTES</p> <p>integer MODELS_PRIMARY_KEY</p> <p>integer MODELS_NON_PRIMARY_KEY</p> <p>integer MODELS_NOT_NULL</p> <p>integer MODELS_DATA_TYPES</p> <p>integer MODELS_DATA_TYPES_NUMERIC</p> <p>integer MODELS_DATE_AT</p> <p>integer MODELS_DATE_IN</p> <p>integer MODELS_IDENTITY_COLUMN</p> <p>integer MODELS_DATA_TYPES_BIND</p> <p>integer MODELS_AUTOMATIC_DEFAULT_INSERT</p> <p>integer MODELS_AUTOMATIC_DEFAULT_UPDATE</p> <p>integer MODELS_DEFAULT_VALUES</p> <p>integer MODELS_EMPTY_STRING_VALUES</p> <p>integer MODELS_COLUMN_MAP</p> <p>integer MODELS_REVERSE_COLUMN_MAP</p>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#methods_6","title":"Methods","text":"<p>public  __construct ([array $options])</p> <p>Phalcon\\Mvc\\Model\\MetaData\\Redis constructor</p> <p>public  read (mixed $key)</p> <p>Reads metadata from Redis</p> <p>public  write (mixed $key, mixed $data)</p> <p>Writes the metadata to Redis</p> <p>public  reset ()</p> <p>Flush Redis data and resets internal meta-data in order to regenerate it</p> <p>final protected  _initialize (Phalcon\\Mvc\\ModelInterface $model, mixed $key, mixed $table, mixed $schema) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Initialize the metadata for certain table</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Sets the DependencyInjector container</p> <p>public  getDI () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the DependencyInjector container</p> <p>public  setStrategy (Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface $strategy) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the meta-data extraction strategy</p> <p>public  getStrategy () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Return the strategy to obtain the meta-data</p> <p>final public  readMetaData (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads the complete meta-data for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readMetaData(\n        new Robots()\n    )\n);\n</code></pre> <p>final public  readMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads meta-data for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n</code></pre> <p>final public  writeMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index, mixed $data) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Writes meta-data for certain model using a MODEL_* constant</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;writeMetaDataIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" =&gt; \"name\",\n        ]\n    )\n);\n</code></pre> <p>final public  readColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads the ordered/reversed column map for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>final public  readColumnMapIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads column-map information for certain model using a MODEL_* constant</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n</code></pre> <p>public  getAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns table attributes names (fields)</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of fields which are part of the primary key</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getNonPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of fields which are not part of the primary key</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getNotNullAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of not null attributes</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getNotNullAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDataTypes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes and their data types</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDataTypes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDataTypesNumeric (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes which types are numerical</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDataTypesNumeric(\n        new Robots()\n    )\n);\n</code></pre> <p>public string getIdentityField (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the name of identity field (if one is present)</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getIdentityField(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getBindTypes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes and their bind data types</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getBindTypes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes that must be ignored from the INSERT SQL generation</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  setAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that must be ignored from the INSERT SQL generation</p> <pre><code>&lt;?php\n\n$metaData-&gt;setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  setAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>&lt;?php\n\n$metaData-&gt;setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  setEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that allow empty string values</p> <pre><code>&lt;?php\n\n$metaData-&gt;setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  getEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes allow empty strings</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getEmptyStringAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDefaultValues (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes (which have default values) and their default values</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDefaultValues(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the column map if any</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getReverseColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the reverse column map if any</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getReverseColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>public  hasAttribute (Phalcon\\Mvc\\ModelInterface $model, mixed $attribute) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Check if a model has certain attribute</p> <pre><code>&lt;?php\n\nvar_dump(\n    $metaData-&gt;hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n</code></pre> <p>public  isEmpty () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Checks if the internal meta-data container is empty</p> <pre><code>&lt;?php\n\nvar_dump(\n    $metaData-&gt;isEmpty()\n);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#class-phalconmvcmodelmetadatasession","title":"Class Phalcon\\Mvc\\Model\\MetaData\\Session","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\MetaData</p> <p>implements Phalcon\\Mvc\\Model\\MetaDataInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>Stores model meta-data in session. Data will erased when the session finishes. Meta-data are permanent while the session is active.</p> <p>You can query the meta-data by printing $_SESSION['$PMM$']</p> <pre><code>&lt;?php\n\n$metaData = new \\Phalcon\\Mvc\\Model\\Metadata\\Session(\n    [\n       \"prefix\" =&gt; \"my-app-id\",\n    ]\n);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#constants_7","title":"Constants","text":"<p>integer MODELS_ATTRIBUTES</p> <p>integer MODELS_PRIMARY_KEY</p> <p>integer MODELS_NON_PRIMARY_KEY</p> <p>integer MODELS_NOT_NULL</p> <p>integer MODELS_DATA_TYPES</p> <p>integer MODELS_DATA_TYPES_NUMERIC</p> <p>integer MODELS_DATE_AT</p> <p>integer MODELS_DATE_IN</p> <p>integer MODELS_IDENTITY_COLUMN</p> <p>integer MODELS_DATA_TYPES_BIND</p> <p>integer MODELS_AUTOMATIC_DEFAULT_INSERT</p> <p>integer MODELS_AUTOMATIC_DEFAULT_UPDATE</p> <p>integer MODELS_DEFAULT_VALUES</p> <p>integer MODELS_EMPTY_STRING_VALUES</p> <p>integer MODELS_COLUMN_MAP</p> <p>integer MODELS_REVERSE_COLUMN_MAP</p>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#methods_7","title":"Methods","text":"<p>public  __construct ([array $options])</p> <p>Phalcon\\Mvc\\Model\\MetaData\\Session constructor</p> <p>public array read (string $key)</p> <p>Reads meta-data from $_SESSION</p> <p>public  write (string $key, array $data)</p> <p>Writes the meta-data to $_SESSION</p> <p>final protected  _initialize (Phalcon\\Mvc\\ModelInterface $model, mixed $key, mixed $table, mixed $schema) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Initialize the metadata for certain table</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Sets the DependencyInjector container</p> <p>public  getDI () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the DependencyInjector container</p> <p>public  setStrategy (Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface $strategy) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the meta-data extraction strategy</p> <p>public  getStrategy () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Return the strategy to obtain the meta-data</p> <p>final public  readMetaData (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads the complete meta-data for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readMetaData(\n        new Robots()\n    )\n);\n</code></pre> <p>final public  readMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads meta-data for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n</code></pre> <p>final public  writeMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index, mixed $data) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Writes meta-data for certain model using a MODEL_* constant</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;writeMetaDataIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" =&gt; \"name\",\n        ]\n    )\n);\n</code></pre> <p>final public  readColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads the ordered/reversed column map for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>final public  readColumnMapIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads column-map information for certain model using a MODEL_* constant</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n</code></pre> <p>public  getAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns table attributes names (fields)</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of fields which are part of the primary key</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getNonPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of fields which are not part of the primary key</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getNotNullAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of not null attributes</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getNotNullAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDataTypes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes and their data types</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDataTypes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDataTypesNumeric (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes which types are numerical</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDataTypesNumeric(\n        new Robots()\n    )\n);\n</code></pre> <p>public string getIdentityField (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the name of identity field (if one is present)</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getIdentityField(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getBindTypes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes and their bind data types</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getBindTypes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes that must be ignored from the INSERT SQL generation</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  setAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that must be ignored from the INSERT SQL generation</p> <pre><code>&lt;?php\n\n$metaData-&gt;setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  setAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>&lt;?php\n\n$metaData-&gt;setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  setEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that allow empty string values</p> <pre><code>&lt;?php\n\n$metaData-&gt;setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  getEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes allow empty strings</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getEmptyStringAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDefaultValues (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes (which have default values) and their default values</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDefaultValues(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the column map if any</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getReverseColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the reverse column map if any</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getReverseColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>public  hasAttribute (Phalcon\\Mvc\\ModelInterface $model, mixed $attribute) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Check if a model has certain attribute</p> <pre><code>&lt;?php\n\nvar_dump(\n    $metaData-&gt;hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n</code></pre> <p>public  isEmpty () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Checks if the internal meta-data container is empty</p> <pre><code>&lt;?php\n\nvar_dump(\n    $metaData-&gt;isEmpty()\n);\n</code></pre> <p>public  reset () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Resets internal meta-data in order to regenerate it</p> <pre><code>&lt;?php\n\n$metaData-&gt;reset();\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#class-phalconmvcmodelmetadatastrategyannotations","title":"Class Phalcon\\Mvc\\Model\\MetaData\\Strategy\\Annotations","text":"<p>implements Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#methods_8","title":"Methods","text":"<p>final public  getMetaData (Phalcon\\Mvc\\ModelInterface $model, Phalcon\\DiInterface $dependencyInjector)</p> <p>The meta-data is obtained by reading the column descriptions from the database information schema</p> <p>final public  getColumnMaps (Phalcon\\Mvc\\ModelInterface $model, Phalcon\\DiInterface $dependencyInjector)</p> <p>Read the model's column map, this can't be inferred</p>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#class-phalconmvcmodelmetadatastrategyintrospection","title":"Class Phalcon\\Mvc\\Model\\MetaData\\Strategy\\Introspection","text":"<p>implements Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface</p> <p>Source on GitHub</p> <p>Queries the table meta-data in order to introspect the model's metadata</p>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#methods_9","title":"Methods","text":"<p>final public  getMetaData (Phalcon\\Mvc\\ModelInterface $model, Phalcon\\DiInterface $dependencyInjector)</p> <p>The meta-data is obtained by reading the column descriptions from the database information schema</p> <p>final public  getColumnMaps (Phalcon\\Mvc\\ModelInterface $model, Phalcon\\DiInterface $dependencyInjector)</p> <p>Read the model's column map, this can't be inferred</p>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#interface-phalconmvcmodelmetadatastrategyinterface","title":"Interface Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#methods_10","title":"Methods","text":"<p>abstract public  getMetaData (Phalcon\\Mvc\\ModelInterface $model, Phalcon\\DiInterface $dependencyInjector)</p> <p>...</p> <p>abstract public  getColumnMaps (Phalcon\\Mvc\\ModelInterface $model, Phalcon\\DiInterface $dependencyInjector)</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#class-phalconmvcmodelmetadataxcache","title":"Class Phalcon\\Mvc\\Model\\MetaData\\Xcache","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\MetaData</p> <p>implements Phalcon\\Mvc\\Model\\MetaDataInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>Stores model meta-data in the XCache cache. Data will erased if the web server is restarted</p> <p>By default meta-data is stored for 48 hours (172800 seconds)</p> <p>You can query the meta-data by printing xcache_get('$PMM$') or xcache_get('$PMM$my-app-id')</p> <pre><code>&lt;?php\n\n$metaData = new Phalcon\\Mvc\\Model\\Metadata\\Xcache(\n    [\n        \"prefix\"   =&gt; \"my-app-id\",\n        \"lifetime\" =&gt; 86400,\n    ]\n);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#constants_8","title":"Constants","text":"<p>integer MODELS_ATTRIBUTES</p> <p>integer MODELS_PRIMARY_KEY</p> <p>integer MODELS_NON_PRIMARY_KEY</p> <p>integer MODELS_NOT_NULL</p> <p>integer MODELS_DATA_TYPES</p> <p>integer MODELS_DATA_TYPES_NUMERIC</p> <p>integer MODELS_DATE_AT</p> <p>integer MODELS_DATE_IN</p> <p>integer MODELS_IDENTITY_COLUMN</p> <p>integer MODELS_DATA_TYPES_BIND</p> <p>integer MODELS_AUTOMATIC_DEFAULT_INSERT</p> <p>integer MODELS_AUTOMATIC_DEFAULT_UPDATE</p> <p>integer MODELS_DEFAULT_VALUES</p> <p>integer MODELS_EMPTY_STRING_VALUES</p> <p>integer MODELS_COLUMN_MAP</p> <p>integer MODELS_REVERSE_COLUMN_MAP</p>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#methods_11","title":"Methods","text":"<p>public  __construct ([array $options])</p> <p>Phalcon\\Mvc\\Model\\MetaData\\Xcache constructor</p> <p>public array read (string $key)</p> <p>Reads metadata from XCache</p> <p>public  write (string $key, array $data)</p> <p>Writes the metadata to XCache</p> <p>final protected  _initialize (Phalcon\\Mvc\\ModelInterface $model, mixed $key, mixed $table, mixed $schema) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Initialize the metadata for certain table</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Sets the DependencyInjector container</p> <p>public  getDI () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the DependencyInjector container</p> <p>public  setStrategy (Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface $strategy) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the meta-data extraction strategy</p> <p>public  getStrategy () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Return the strategy to obtain the meta-data</p> <p>final public  readMetaData (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads the complete meta-data for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readMetaData(\n        new Robots()\n    )\n);\n</code></pre> <p>final public  readMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads meta-data for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n</code></pre> <p>final public  writeMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index, mixed $data) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Writes meta-data for certain model using a MODEL_* constant</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;writeMetaDataIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" =&gt; \"name\",\n        ]\n    )\n);\n</code></pre> <p>final public  readColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads the ordered/reversed column map for certain model</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>final public  readColumnMapIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Reads column-map information for certain model using a MODEL_* constant</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n</code></pre> <p>public  getAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns table attributes names (fields)</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of fields which are part of the primary key</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getNonPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of fields which are not part of the primary key</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getNotNullAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns an array of not null attributes</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getNotNullAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDataTypes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes and their data types</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDataTypes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDataTypesNumeric (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes which types are numerical</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDataTypesNumeric(\n        new Robots()\n    )\n);\n</code></pre> <p>public string getIdentityField (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the name of identity field (if one is present)</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getIdentityField(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getBindTypes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes and their bind data types</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getBindTypes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes that must be ignored from the INSERT SQL generation</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  setAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that must be ignored from the INSERT SQL generation</p> <pre><code>&lt;?php\n\n$metaData-&gt;setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  setAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>&lt;?php\n\n$metaData-&gt;setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  setEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Set the attributes that allow empty string values</p> <pre><code>&lt;?php\n\n$metaData-&gt;setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" =&gt; true,\n    ]\n);\n</code></pre> <p>public  getEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes allow empty strings</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getEmptyStringAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getDefaultValues (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns attributes (which have default values) and their default values</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getDefaultValues(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the column map if any</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>public  getReverseColumnMap (Phalcon\\Mvc\\ModelInterface $model) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Returns the reverse column map if any</p> <pre><code>&lt;?php\n\nprint_r(\n    $metaData-&gt;getReverseColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p>public  hasAttribute (Phalcon\\Mvc\\ModelInterface $model, mixed $attribute) inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Check if a model has certain attribute</p> <pre><code>&lt;?php\n\nvar_dump(\n    $metaData-&gt;hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n</code></pre> <p>public  isEmpty () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Checks if the internal meta-data container is empty</p> <pre><code>&lt;?php\n\nvar_dump(\n    $metaData-&gt;isEmpty()\n);\n</code></pre> <p>public  reset () inherited from Phalcon\\Mvc\\Model\\MetaData</p> <p>Resets internal meta-data in order to regenerate it</p> <pre><code>&lt;?php\n\n$metaData-&gt;reset();\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#interface-phalconmvcmodelmetadatainterface","title":"Interface Phalcon\\Mvc\\Model\\MetaDataInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model_MetaData/#methods_12","title":"Methods","text":"<p>abstract public  setStrategy (Phalcon\\Mvc\\Model\\MetaData\\StrategyInterface $strategy)</p> <p>...</p> <p>abstract public  getStrategy ()</p> <p>...</p> <p>abstract public  readMetaData (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  readMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index)</p> <p>...</p> <p>abstract public  writeMetaDataIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index, mixed $data)</p> <p>...</p> <p>abstract public  readColumnMap (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  readColumnMapIndex (Phalcon\\Mvc\\ModelInterface $model, mixed $index)</p> <p>...</p> <p>abstract public  getAttributes (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  getPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  getNonPrimaryKeyAttributes (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  getNotNullAttributes (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  getDataTypes (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  getDataTypesNumeric (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  getIdentityField (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  getBindTypes (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  getAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  getAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  setAutomaticCreateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes)</p> <p>...</p> <p>abstract public  setAutomaticUpdateAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes)</p> <p>...</p> <p>abstract public  setEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model, array $attributes)</p> <p>...</p> <p>abstract public  getEmptyStringAttributes (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  getDefaultValues (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  getColumnMap (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  getReverseColumnMap (Phalcon\\Mvc\\ModelInterface $model)</p> <p>...</p> <p>abstract public  hasAttribute (Phalcon\\Mvc\\ModelInterface $model, mixed $attribute)</p> <p>...</p> <p>abstract public  isEmpty ()</p> <p>...</p> <p>abstract public  reset ()</p> <p>...</p> <p>abstract public  read (mixed $key)</p> <p>...</p> <p>abstract public  write (mixed $key, mixed $data)</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model_Query/","title":"Class Phalcon\\Mvc\\Model\\Query","text":"<p>implements Phalcon\\Mvc\\Model\\QueryInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>This class takes a PHQL intermediate representation and executes it.</p> <pre><code>&lt;?php\n\n$phql = \"SELECT c.price*0.16 AS taxes, c.* FROM Cars AS c JOIN Brands AS b\n         WHERE b.name = :name: ORDER BY c.name\";\n\n$result = $manager-&gt;executeQuery(\n    $phql,\n    [\n        \"name\" =&gt; \"Lamborghini\",\n    ]\n);\n\nforeach ($result as $row) {\n    echo \"Name: \",  $row-&gt;cars-&gt;name, \"\\n\";\n    echo \"Price: \", $row-&gt;cars-&gt;price, \"\\n\";\n    echo \"Taxes: \", $row-&gt;taxes, \"\\n\";\n}\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Query/#constants","title":"Constants","text":"<p>integer TYPE_SELECT</p> <p>integer TYPE_INSERT</p> <p>integer TYPE_UPDATE</p> <p>integer TYPE_DELETE</p>"},{"location":"api/Phalcon_Mvc_Model_Query/#methods","title":"Methods","text":"<p>public  __construct ([string $phql], [Phalcon\\DiInterface $dependencyInjector], [mixed $options])</p> <p>Phalcon\\Mvc\\Model\\Query constructor</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the dependency injection container</p> <p>public  getDI ()</p> <p>Returns the dependency injection container</p> <p>public  setUniqueRow (mixed $uniqueRow)</p> <p>Tells to the query if only the first row in the resultset must be returned</p> <p>public  getUniqueRow ()</p> <p>Check if the query is programmed to get only the first row in the resultset</p> <p>final protected  _getQualified (array $expr)</p> <p>Replaces the model's name to its source name in a qualified-name expression</p> <p>final protected  _getCallArgument (array $argument)</p> <p>Resolves an expression in a single call argument</p> <p>final protected  _getCaseExpression (array $expr)</p> <p>Resolves an expression in a single call argument</p> <p>final protected  _getFunctionCall (array $expr)</p> <p>Resolves an expression in a single call argument</p> <p>final protected string _getExpression (array $expr, [boolean $quoting])</p> <p>Resolves an expression from its intermediate code into a string</p> <p>final protected  _getSelectColumn (array $column)</p> <p>Resolves a column from its intermediate representation into an array used to determine if the resultset produced is simple or complex</p> <p>final protected string _getTable (Phalcon\\Mvc\\Model\\ManagerInterface $manager, array $qualifiedName)</p> <p>Resolves a table in a SELECT statement checking if the model exists</p> <p>final protected  _getJoin (Phalcon\\Mvc\\Model\\ManagerInterface $manager, mixed $join)</p> <p>Resolves a JOIN clause checking if the associated models exist</p> <p>final protected string _getJoinType (array $join)</p> <p>Resolves a JOIN type</p> <p>final protected array _getSingleJoin (string $joinType, string $joinSource, string $modelAlias, string $joinAlias, Phalcon\\Mvc\\Model\\RelationInterface $relation)</p> <p>Resolves joins involving has-one/belongs-to/has-many relations</p> <p>final protected array _getMultiJoin (string $joinType, string $joinSource, string $modelAlias, string $joinAlias, Phalcon\\Mvc\\Model\\RelationInterface $relation)</p> <p>Resolves joins involving many-to-many relations</p> <p>final protected array _getJoins (array $select)</p> <p>Processes the JOINs in the query returning an internal representation for the database dialect</p> <p>final protected array _getOrderClause (array | string $order)</p> <p>Returns a processed order clause for a SELECT statement</p> <p>final protected  _getGroupClause (array $group)</p> <p>Returns a processed group clause for a SELECT statement</p> <p>final protected  _getLimitClause (array $limitClause)</p> <p>Returns a processed limit clause for a SELECT statement</p> <p>final protected  _prepareSelect ([mixed $ast], [mixed $merge])</p> <p>Analyzes a SELECT intermediate code and produces an array to be executed later</p> <p>final protected  _prepareInsert ()</p> <p>Analyzes an INSERT intermediate code and produces an array to be executed later</p> <p>final protected  _prepareUpdate ()</p> <p>Analyzes an UPDATE intermediate code and produces an array to be executed later</p> <p>final protected  _prepareDelete ()</p> <p>Analyzes a DELETE intermediate code and produces an array to be executed later</p> <p>public  parse ()</p> <p>Parses the intermediate code produced by Phalcon\\Mvc\\Model\\Query\\Lang generating another intermediate representation that could be executed by Phalcon\\Mvc\\Model\\Query</p> <p>public  getCache ()</p> <p>Returns the current cache backend instance</p> <p>final protected  _executeSelect (mixed $intermediate, mixed $bindParams, mixed $bindTypes, [mixed $simulate])</p> <p>Executes the SELECT intermediate representation producing a Phalcon\\Mvc\\Model\\Resultset</p> <p>final protected Phalcon\\Mvc\\Model\\Query\\StatusInterface _executeInsert (array $intermediate, array $bindParams, array $bindTypes)</p> <p>Executes the INSERT intermediate representation producing a Phalcon\\Mvc\\Model\\Query\\Status</p> <p>final protected Phalcon\\Mvc\\Model\\Query\\StatusInterface _executeUpdate (array $intermediate, array $bindParams, array $bindTypes)</p> <p>Executes the UPDATE intermediate representation producing a Phalcon\\Mvc\\Model\\Query\\Status</p> <p>final protected Phalcon\\Mvc\\Model\\Query\\StatusInterface _executeDelete (array $intermediate, array $bindParams, array $bindTypes)</p> <p>Executes the DELETE intermediate representation producing a Phalcon\\Mvc\\Model\\Query\\Status</p> <p>final protected Phalcon\\Mvc\\Model\\ResultsetInterface _getRelatedRecords (Phalcon\\Mvc\\ModelInterface $model, array $intermediate, array $bindParams, array $bindTypes)</p> <p>Query the records on which the UPDATE/DELETE operation well be done</p> <p>public mixed execute ([array $bindParams], [array $bindTypes])</p> <p>Executes a parsed PHQL statement</p> <p>public Phalcon\\Mvc\\ModelInterface getSingleResult ([array $bindParams], [array $bindTypes])</p> <p>Executes the query returning the first result</p> <p>public  setType (mixed $type)</p> <p>Sets the type of PHQL statement to be executed</p> <p>public  getType ()</p> <p>Gets the type of PHQL statement executed</p> <p>public  setBindParams (array $bindParams, [mixed $merge])</p> <p>Set default bind parameters</p> <p>public array getBindParams ()</p> <p>Returns default bind params</p> <p>public  setBindTypes (array $bindTypes, [mixed $merge])</p> <p>Set default bind parameters</p> <p>public  setSharedLock ([mixed $sharedLock])</p> <p>Set SHARED LOCK clause</p> <p>public array getBindTypes ()</p> <p>Returns default bind types</p> <p>public  setIntermediate (array $intermediate)</p> <p>Allows to set the IR to be executed</p> <p>public array getIntermediate ()</p> <p>Returns the intermediate representation of the PHQL statement</p> <p>public  cache (mixed $cacheOptions)</p> <p>Sets the cache parameters of the query</p> <p>public  getCacheOptions ()</p> <p>Returns the current cache options</p> <p>public  getSql ()</p> <p>Returns the SQL to be generated by the internal PHQL (only works in SELECT statements)</p> <p>public static  clean ()</p> <p>Destroys the internal PHQL cache</p>"},{"location":"api/Phalcon_Mvc_Model_Query/#class-phalconmvcmodelquerybuilder","title":"Class Phalcon\\Mvc\\Model\\Query\\Builder","text":"<p>implements Phalcon\\Mvc\\Model\\Query\\BuilderInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>Helps to create PHQL queries using an OO interface</p> <pre><code>&lt;?php\n\n$params = [\n    \"models\"     =&gt; [\"Users\"],\n    \"columns\"    =&gt; [\"id\", \"name\", \"status\"],\n    \"conditions\" =&gt; [\n        [\n            \"created &gt; :min: AND created &lt; :max:\",\n            [\n                \"min\" =&gt; \"2013-01-01\",\n                \"max\" =&gt; \"2014-01-01\",\n            ],\n            [\n                \"min\" =&gt; PDO::PARAM_STR,\n                \"max\" =&gt; PDO::PARAM_STR,\n            ],\n        ],\n    ],\n    // or \"conditions\" =&gt; \"created &gt; '2013-01-01' AND created &lt; '2014-01-01'\",\n    \"group\"      =&gt; [\"id\", \"name\"],\n    \"having\"     =&gt; \"name = 'Kamil'\",\n    \"order\"      =&gt; [\"name\", \"id\"],\n    \"limit\"      =&gt; 20,\n    \"offset\"     =&gt; 20,\n    // or \"limit\" =&gt; [20, 20],\n];\n\n$queryBuilder = new \\Phalcon\\Mvc\\Model\\Query\\Builder($params);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Query/#constants_1","title":"Constants","text":"<p>string OPERATOR_OR</p> <p>string OPERATOR_AND</p>"},{"location":"api/Phalcon_Mvc_Model_Query/#methods_1","title":"Methods","text":"<p>public  __construct ([mixed $params], [Phalcon\\DiInterface $dependencyInjector])</p> <p>Phalcon\\Mvc\\Model\\Query\\Builder constructor</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the DependencyInjector container</p> <p>public  getDI ()</p> <p>Returns the DependencyInjector container</p> <p>public  distinct (mixed $distinct)</p> <p>Sets SELECT DISTINCT / SELECT ALL flag</p> <pre><code>&lt;?php\n\n$builder-&gt;distinct(\"status\");\n$builder-&gt;distinct(null);\n</code></pre> <p>public  getDistinct ()</p> <p>Returns SELECT DISTINCT / SELECT ALL flag</p> <p>public  columns (mixed $columns)</p> <p>Sets the columns to be queried</p> <pre><code>&lt;?php\n\n$builder-&gt;columns(\"id, name\");\n\n$builder-&gt;columns(\n    [\n        \"id\",\n        \"name\",\n    ]\n);\n\n$builder-&gt;columns(\n    [\n        \"name\",\n        \"number\" =&gt; \"COUNT(*)\",\n    ]\n);\n</code></pre> <p>public string | array getColumns ()</p> <p>Return the columns to be queried</p> <p>public  from (mixed $models)</p> <p>Sets the models who makes part of the query</p> <pre><code>&lt;?php\n\n$builder-&gt;from(\"Robots\");\n\n$builder-&gt;from(\n    [\n        \"Robots\",\n        \"RobotsParts\",\n    ]\n);\n\n$builder-&gt;from(\n    [\n        \"r\"  =&gt; \"Robots\",\n        \"rp\" =&gt; \"RobotsParts\",\n    ]\n);\n</code></pre> <p>public  addFrom (mixed $model, [mixed $alias], [mixed $with])</p> <p>Add a model to take part of the query</p> <pre><code>&lt;?php\n\n// Load data from models Robots\n$builder-&gt;addFrom(\"Robots\");\n\n// Load data from model 'Robots' using 'r' as alias in PHQL\n$builder-&gt;addFrom(\"Robots\", \"r\");\n\n// Load data from model 'Robots' using 'r' as alias in PHQL\n// and eager load model 'RobotsParts'\n$builder-&gt;addFrom(\"Robots\", \"r\", \"RobotsParts\");\n\n// Load data from model 'Robots' using 'r' as alias in PHQL\n// and eager load models 'RobotsParts' and 'Parts'\n$builder-&gt;addFrom(\n    \"Robots\",\n    \"r\",\n    [\n        \"RobotsParts\",\n        \"Parts\",\n    ]\n);\n</code></pre> <p>public string | array getFrom ()</p> <p>Return the models who makes part of the query</p> <p>public Phalcon\\Mvc\\Model\\Query\\Builder join (string $model, [string $conditions], [string $alias], [string $type])</p> <p>Adds an :type: join (by default type - INNER) to the query</p> <pre><code>&lt;?php\n\n// Inner Join model 'Robots' with automatic conditions and alias\n$builder-&gt;join(\"Robots\");\n\n// Inner Join model 'Robots' specifying conditions\n$builder-&gt;join(\"Robots\", \"Robots.id = RobotsParts.robots_id\");\n\n// Inner Join model 'Robots' specifying conditions and alias\n$builder-&gt;join(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\");\n\n// Left Join model 'Robots' specifying conditions, alias and type of join\n$builder-&gt;join(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\", \"LEFT\");\n</code></pre> <p>public Phalcon\\Mvc\\Model\\Query\\Builder innerJoin (string $model, [string $conditions], [string $alias])</p> <p>Adds an INNER join to the query</p> <pre><code>&lt;?php\n\n// Inner Join model 'Robots' with automatic conditions and alias\n$builder-&gt;innerJoin(\"Robots\");\n\n// Inner Join model 'Robots' specifying conditions\n$builder-&gt;innerJoin(\"Robots\", \"Robots.id = RobotsParts.robots_id\");\n\n// Inner Join model 'Robots' specifying conditions and alias\n$builder-&gt;innerJoin(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\");\n</code></pre> <p>public Phalcon\\Mvc\\Model\\Query\\Builder leftJoin (string $model, [string $conditions], [string $alias])</p> <p>Adds a LEFT join to the query</p> <pre><code>&lt;?php\n\n$builder-&gt;leftJoin(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\");\n</code></pre> <p>public Phalcon\\Mvc\\Model\\Query\\Builder rightJoin (string $model, [string $conditions], [string $alias])</p> <p>Adds a RIGHT join to the query</p> <pre><code>&lt;?php\n\n$builder-&gt;rightJoin(\"Robots\", \"r.id = RobotsParts.robots_id\", \"r\");\n</code></pre> <p>public array getJoins ()</p> <p>Return join parts of the query</p> <p>public Phalcon\\Mvc\\Model\\Query\\Builder where (mixed $conditions, [array $bindParams], [array $bindTypes])</p> <p>Sets the query WHERE conditions</p> <pre><code>&lt;?php\n\n$builder-&gt;where(100);\n\n$builder-&gt;where(\"name = 'Peter'\");\n\n$builder-&gt;where(\n    \"name = :name: AND id &gt; :id:\",\n    [\n        \"name\" =&gt; \"Peter\",\n        \"id\"   =&gt; 100,\n    ]\n);\n</code></pre> <p>public Phalcon\\Mvc\\Model\\Query\\Builder andWhere (string $conditions, [array $bindParams], [array $bindTypes])</p> <p>Appends a condition to the current WHERE conditions using a AND operator</p> <pre><code>&lt;?php\n\n$builder-&gt;andWhere(\"name = 'Peter'\");\n\n$builder-&gt;andWhere(\n    \"name = :name: AND id &gt; :id:\",\n    [\n        \"name\" =&gt; \"Peter\",\n        \"id\"   =&gt; 100,\n    ]\n);\n</code></pre> <p>public Phalcon\\Mvc\\Model\\Query\\Builder orWhere (string $conditions, [array $bindParams], [array $bindTypes])</p> <p>Appends a condition to the current conditions using an OR operator</p> <pre><code>&lt;?php\n\n$builder-&gt;orWhere(\"name = 'Peter'\");\n\n$builder-&gt;orWhere(\n    \"name = :name: AND id &gt; :id:\",\n    [\n        \"name\" =&gt; \"Peter\",\n        \"id\"   =&gt; 100,\n    ]\n);\n</code></pre> <p>public  betweenWhere (mixed $expr, mixed $minimum, mixed $maximum, [mixed $operator])</p> <p>Appends a BETWEEN condition to the current WHERE conditions</p> <pre><code>&lt;?php\n\n$builder-&gt;betweenWhere(\"price\", 100.25, 200.50);\n</code></pre> <p>public  notBetweenWhere (mixed $expr, mixed $minimum, mixed $maximum, [mixed $operator])</p> <p>Appends a NOT BETWEEN condition to the current WHERE conditions</p> <pre><code>&lt;?php\n\n$builder-&gt;notBetweenWhere(\"price\", 100.25, 200.50);\n</code></pre> <p>public  inWhere (mixed $expr, array $values, [mixed $operator])</p> <p>Appends an IN condition to the current WHERE conditions</p> <pre><code>&lt;?php\n\n$builder-&gt;inWhere(\"id\", [1, 2, 3]);\n</code></pre> <p>public  notInWhere (mixed $expr, array $values, [mixed $operator])</p> <p>Appends a NOT IN condition to the current WHERE conditions</p> <pre><code>&lt;?php\n\n$builder-&gt;notInWhere(\"id\", [1, 2, 3]);\n</code></pre> <p>public string | array getWhere ()</p> <p>Return the conditions for the query</p> <p>public Phalcon\\Mvc\\Model\\Query\\Builder orderBy (string | array $orderBy)</p> <p>Sets an ORDER BY condition clause</p> <pre><code>&lt;?php\n\n$builder-&gt;orderBy(\"Robots.name\");\n$builder-&gt;orderBy([\"1\", \"Robots.name\"]);\n</code></pre> <p>public string | array getOrderBy ()</p> <p>Returns the set ORDER BY clause</p> <p>public Phalcon\\Mvc\\Model\\Query\\Builder having (mixed $conditions, [array $bindParams], [array $bindTypes])</p> <p>Sets the HAVING condition clause</p> <pre><code>&lt;?php\n\n$builder-&gt;having(\"SUM(Robots.price) &gt; 0\");\n\n$builder-&gt;having(\n        \"SUM(Robots.price) &gt; :sum:\",\n    [\n        \"sum\" =&gt; 100,\n     ]\n);\n</code></pre> <p>public Phalcon\\Mvc\\Model\\Query\\Builder andHaving (string $conditions, [array $bindParams], [array $bindTypes])</p> <p>Appends a condition to the current HAVING conditions clause using a AND operator</p> <pre><code>&lt;?php\n\n$builder-&gt;andHaving(\"SUM(Robots.price) &gt; 0\");\n\n$builder-&gt;andHaving(\n        \"SUM(Robots.price) &gt; :sum:\",\n    [\n        \"sum\" =&gt; 100,\n     ]\n);\n</code></pre> <p>public Phalcon\\Mvc\\Model\\Query\\Builder orHaving (string $conditions, [array $bindParams], [array $bindTypes])</p> <p>Appends a condition to the current HAVING conditions clause using an OR operator</p> <pre><code>&lt;?php\n\n$builder-&gt;orHaving(\"SUM(Robots.price) &gt; 0\");\n\n$builder-&gt;orHaving(\n        \"SUM(Robots.price) &gt; :sum:\",\n    [\n        \"sum\" =&gt; 100,\n     ]\n);\n</code></pre> <p>public  betweenHaving (mixed $expr, mixed $minimum, mixed $maximum, [mixed $operator])</p> <p>Appends a BETWEEN condition to the current HAVING conditions clause</p> <pre><code>&lt;?php\n\n$builder-&gt;betweenHaving(\"SUM(Robots.price)\", 100.25, 200.50);\n</code></pre> <p>public  notBetweenHaving (mixed $expr, mixed $minimum, mixed $maximum, [mixed $operator])</p> <p>Appends a NOT BETWEEN condition to the current HAVING conditions clause</p> <pre><code>&lt;?php\n\n$builder-&gt;notBetweenHaving(\"SUM(Robots.price)\", 100.25, 200.50);\n</code></pre> <p>public  inHaving (mixed $expr, array $values, [mixed $operator])</p> <p>Appends an IN condition to the current HAVING conditions clause</p> <pre><code>&lt;?php\n\n$builder-&gt;inHaving(\"SUM(Robots.price)\", [100, 200]);\n</code></pre> <p>public  notInHaving (mixed $expr, array $values, [mixed $operator])</p> <p>Appends a NOT IN condition to the current HAVING conditions clause</p> <pre><code>&lt;?php\n\n$builder-&gt;notInHaving(\"SUM(Robots.price)\", [100, 200]);\n</code></pre> <p>public string getHaving ()</p> <p>Return the current having clause</p> <p>public  forUpdate (mixed $forUpdate)</p> <p>Sets a FOR UPDATE clause</p> <pre><code>&lt;?php\n\n$builder-&gt;forUpdate(true);\n</code></pre> <p>public  limit (mixed $limit, [mixed $offset])</p> <p>Sets a LIMIT clause, optionally an offset clause</p> <pre><code>&lt;?php\n\n$builder-&gt;limit(100);\n$builder-&gt;limit(100, 20);\n$builder-&gt;limit(\"100\", \"20\");\n</code></pre> <p>public string | array getLimit ()</p> <p>Returns the current LIMIT clause</p> <p>public  offset (mixed $offset)</p> <p>Sets an OFFSET clause</p> <pre><code>&lt;?php\n\n$builder-&gt;offset(30);\n</code></pre> <p>public string | array getOffset ()</p> <p>Returns the current OFFSET clause</p> <p>public Phalcon\\Mvc\\Model\\Query\\Builder groupBy (string | array $group)</p> <p>Sets a GROUP BY clause</p> <pre><code>&lt;?php\n\n$builder-&gt;groupBy(\n    [\n        \"Robots.name\",\n    ]\n);\n</code></pre> <p>public string getGroupBy ()</p> <p>Returns the GROUP BY clause</p> <p>final public string getPhql ()</p> <p>Returns a PHQL statement built based on the builder parameters</p> <p>public  getQuery ()</p> <p>Returns the query built</p> <p>final public  autoescape (mixed $identifier)</p> <p>Automatically escapes identifiers but only if they need to be escaped.</p> <p>private  _conditionBetween (mixed $clause, mixed $operator, mixed $expr, mixed $minimum, mixed $maximum)</p> <p>Appends a BETWEEN condition</p> <p>private  _conditionNotBetween (mixed $clause, mixed $operator, mixed $expr, mixed $minimum, mixed $maximum)</p> <p>Appends a NOT BETWEEN condition</p> <p>private  _conditionIn (mixed $clause, mixed $operator, mixed $expr, array $values)</p> <p>Appends an IN condition</p> <p>private  _conditionNotIn (mixed $clause, mixed $operator, mixed $expr, array $values)</p> <p>Appends a NOT IN condition</p>"},{"location":"api/Phalcon_Mvc_Model_Query/#interface-phalconmvcmodelquerybuilderinterface","title":"Interface Phalcon\\Mvc\\Model\\Query\\BuilderInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model_Query/#constants_2","title":"Constants","text":"<p>string OPERATOR_OR</p> <p>string OPERATOR_AND</p>"},{"location":"api/Phalcon_Mvc_Model_Query/#methods_2","title":"Methods","text":"<p>abstract public  columns (mixed $columns)</p> <p>...</p> <p>abstract public  getColumns ()</p> <p>...</p> <p>abstract public  from (mixed $models)</p> <p>...</p> <p>abstract public  addFrom (mixed $model, [mixed $alias])</p> <p>...</p> <p>abstract public  getFrom ()</p> <p>...</p> <p>abstract public  join (mixed $model, [mixed $conditions], [mixed $alias], [mixed $type])</p> <p>...</p> <p>abstract public  innerJoin (mixed $model, [mixed $conditions], [mixed $alias])</p> <p>...</p> <p>abstract public  leftJoin (mixed $model, [mixed $conditions], [mixed $alias])</p> <p>...</p> <p>abstract public  rightJoin (mixed $model, [mixed $conditions], [mixed $alias])</p> <p>...</p> <p>abstract public  getJoins ()</p> <p>...</p> <p>abstract public  where (mixed $conditions, [mixed $bindParams], [mixed $bindTypes])</p> <p>...</p> <p>abstract public  andWhere (mixed $conditions, [mixed $bindParams], [mixed $bindTypes])</p> <p>...</p> <p>abstract public  orWhere (mixed $conditions, [mixed $bindParams], [mixed $bindTypes])</p> <p>...</p> <p>abstract public  betweenWhere (mixed $expr, mixed $minimum, mixed $maximum, [mixed $operator])</p> <p>...</p> <p>abstract public  notBetweenWhere (mixed $expr, mixed $minimum, mixed $maximum, [mixed $operator])</p> <p>...</p> <p>abstract public  inWhere (mixed $expr, array $values, [mixed $operator])</p> <p>...</p> <p>abstract public  notInWhere (mixed $expr, array $values, [mixed $operator])</p> <p>...</p> <p>abstract public  getWhere ()</p> <p>...</p> <p>abstract public  orderBy (mixed $orderBy)</p> <p>...</p> <p>abstract public  getOrderBy ()</p> <p>...</p> <p>abstract public  having (mixed $having)</p> <p>...</p> <p>abstract public  getHaving ()</p> <p>...</p> <p>abstract public  limit (mixed $limit, [mixed $offset])</p> <p>...</p> <p>abstract public  getLimit ()</p> <p>...</p> <p>abstract public  groupBy (mixed $group)</p> <p>...</p> <p>abstract public  getGroupBy ()</p> <p>...</p> <p>abstract public  getPhql ()</p> <p>...</p> <p>abstract public  getQuery ()</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model_Query/#abstract-class-phalconmvcmodelquerylang","title":"Abstract class Phalcon\\Mvc\\Model\\Query\\Lang","text":"<p>Source on GitHub</p> <p>PHQL is implemented as a parser (written in C) that translates syntax in that of the target RDBMS. It allows Phalcon to offer a unified SQL language to the developer, while internally doing all the work of translating PHQL instructions to the most optimal SQL instructions depending on the RDBMS type associated with a model.</p> <p>To achieve the highest performance possible, we wrote a parser that uses the same technology as SQLite. This technology provides a small in-memory parser with a very low memory footprint that is also thread-safe.</p> <pre><code>&lt;?php\n\n$intermediate = Phalcon\\Mvc\\Model\\Query\\Lang::parsePHQL(\"SELECT r.* FROM Robots r LIMIT 10\");\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Query/#methods_3","title":"Methods","text":"<p>public static string parsePHQL (string $phql)</p> <p>Parses a PHQL statement returning an intermediate representation (IR)</p>"},{"location":"api/Phalcon_Mvc_Model_Query/#class-phalconmvcmodelquerystatus","title":"Class Phalcon\\Mvc\\Model\\Query\\Status","text":"<p>implements Phalcon\\Mvc\\Model\\Query\\StatusInterface</p> <p>Source on GitHub</p> <p>This class represents the status returned by a PHQL statement like INSERT, UPDATE or DELETE. It offers context information and the related messages produced by the model which finally executes the operations when it fails</p> <pre><code>&lt;?php\n\n$phql = \"UPDATE Robots SET name = :name:, type = :type:, year = :year: WHERE id = :id:\";\n\n$status = $app-&gt;modelsManager-&gt;executeQuery(\n    $phql,\n    [\n        \"id\"   =&gt; 100,\n        \"name\" =&gt; \"Astroy Boy\",\n        \"type\" =&gt; \"mechanical\",\n        \"year\" =&gt; 1959,\n    ]\n);\n\n// Check if the update was successful\nif ($status-&gt;success() === true) {\n    echo \"OK\";\n}\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Query/#methods_4","title":"Methods","text":"<p>public  __construct (mixed $success, [Phalcon\\Mvc\\ModelInterface $model])</p> <p>public  getModel ()</p> <p>Returns the model that executed the action</p> <p>public  getMessages ()</p> <p>Returns the messages produced because of a failed operation</p> <p>public  success ()</p> <p>Allows to check if the executed operation was successful</p>"},{"location":"api/Phalcon_Mvc_Model_Query/#interface-phalconmvcmodelquerystatusinterface","title":"Interface Phalcon\\Mvc\\Model\\Query\\StatusInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model_Query/#methods_5","title":"Methods","text":"<p>abstract public  getModel ()</p> <p>...</p> <p>abstract public  getMessages ()</p> <p>...</p> <p>abstract public  success ()</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model_Query/#interface-phalconmvcmodelqueryinterface","title":"Interface Phalcon\\Mvc\\Model\\QueryInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model_Query/#methods_6","title":"Methods","text":"<p>abstract public  parse ()</p> <p>...</p> <p>abstract public  cache (mixed $cacheOptions)</p> <p>...</p> <p>abstract public  getCacheOptions ()</p> <p>...</p> <p>abstract public  setUniqueRow (mixed $uniqueRow)</p> <p>...</p> <p>abstract public  getUniqueRow ()</p> <p>...</p> <p>abstract public  execute ([mixed $bindParams], [mixed $bindTypes])</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model_Relation/","title":"Class Phalcon\\Mvc\\Model\\Relation","text":"<p>implements Phalcon\\Mvc\\Model\\RelationInterface</p> <p>Source on GitHub</p> <p>This class represents a relationship between two models</p>"},{"location":"api/Phalcon_Mvc_Model_Relation/#constants","title":"Constants","text":"<p>integer BELONGS_TO</p> <p>integer HAS_ONE</p> <p>integer HAS_MANY</p> <p>integer HAS_ONE_THROUGH</p> <p>integer HAS_MANY_THROUGH</p> <p>integer NO_ACTION</p> <p>integer ACTION_RESTRICT</p> <p>integer ACTION_CASCADE</p>"},{"location":"api/Phalcon_Mvc_Model_Relation/#methods","title":"Methods","text":"<p>public  __construct (int $type, string $referencedModel, string | array $fields, string | array $referencedFields, [array $options])</p> <p>Phalcon\\Mvc\\Model\\Relation constructor</p> <p>public  setIntermediateRelation (string | array $intermediateFields, string $intermediateModel, string $intermediateReferencedFields)</p> <p>Sets the intermediate model data for has-*-through relations</p> <p>public  getType ()</p> <p>Returns the relation type</p> <p>public  getReferencedModel ()</p> <p>Returns the referenced model</p> <p>public string | array getFields ()</p> <p>Returns the fields</p> <p>public string | array getReferencedFields ()</p> <p>Returns the referenced fields</p> <p>public string | array getOptions ()</p> <p>Returns the options</p> <p>public  getOption (mixed $name)</p> <p>Returns an option by the specified name If the option doesn't exist null is returned</p> <p>public  isForeignKey ()</p> <p>Check whether the relation act as a foreign key</p> <p>public string | array getForeignKey ()</p> <p>Returns the foreign key configuration</p> <p>public array getParams ()</p> <p>Returns parameters that must be always used when the related records are obtained</p> <p>public  isThrough ()</p> <p>Check whether the relation is a 'many-to-many' relation or not</p> <p>public  isReusable ()</p> <p>Check if records returned by getting belongs-to/has-many are implicitly cached during the current request</p> <p>public string | array getIntermediateFields ()</p> <p>Gets the intermediate fields for has-*-through relations</p> <p>public  getIntermediateModel ()</p> <p>Gets the intermediate model for has-*-through relations</p> <p>public string | array getIntermediateReferencedFields ()</p> <p>Gets the intermediate referenced fields for has-*-through relations</p>"},{"location":"api/Phalcon_Mvc_Model_Relation/#interface-phalconmvcmodelrelationinterface","title":"Interface Phalcon\\Mvc\\Model\\RelationInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model_Relation/#methods_1","title":"Methods","text":"<p>abstract public  setIntermediateRelation (mixed $intermediateFields, mixed $intermediateModel, mixed $intermediateReferencedFields)</p> <p>...</p> <p>abstract public  isReusable ()</p> <p>...</p> <p>abstract public  getType ()</p> <p>...</p> <p>abstract public  getReferencedModel ()</p> <p>...</p> <p>abstract public  getFields ()</p> <p>...</p> <p>abstract public  getReferencedFields ()</p> <p>...</p> <p>abstract public  getOptions ()</p> <p>...</p> <p>abstract public  getOption (mixed $name)</p> <p>...</p> <p>abstract public  isForeignKey ()</p> <p>...</p> <p>abstract public  getForeignKey ()</p> <p>...</p> <p>abstract public  isThrough ()</p> <p>...</p> <p>abstract public  getIntermediateFields ()</p> <p>...</p> <p>abstract public  getIntermediateModel ()</p> <p>...</p> <p>abstract public  getIntermediateReferencedFields ()</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model_ResultInterface/","title":"Interface Phalcon\\Mvc\\Model\\ResultInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model_ResultInterface/#methods","title":"Methods","text":"<p>abstract public setDirtyState (mixed $dirtyState)</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model_Resultset/","title":"Abstract class Phalcon\\Mvc\\Model\\Resultset","text":"<p>implements Phalcon\\Mvc\\Model\\ResultsetInterface, Iterator, Traversable, SeekableIterator, Countable, ArrayAccess, Serializable, JsonSerializable</p> <p>Source on GitHub</p> <p>This component allows to Phalcon\\Mvc\\Model returns large resultsets with the minimum memory consumption Resultsets can be traversed using a standard foreach or a while statement. If a resultset is serialized it will dump all the rows into a big array. Then unserialize will retrieve the rows as they were before serializing.</p> <pre><code>&lt;?php\n\n// Using a standard foreach\n$robots = Robots::find(\n    [\n        \"type = 'virtual'\",\n        \"order\" =&gt; \"name\",\n    ]\n);\n\nforeach ($robots as robot) {\n    echo robot-&gt;name, \"\\n\";\n}\n\n// Using a while\n$robots = Robots::find(\n    [\n        \"type = 'virtual'\",\n        \"order\" =&gt; \"name\",\n    ]\n);\n\n$robots-&gt;rewind();\n\nwhile ($robots-&gt;valid()) {\n    $robot = $robots-&gt;current();\n\n    echo $robot-&gt;name, \"\\n\";\n\n    $robots-&gt;next();\n}\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Resultset/#constants","title":"Constants","text":"<p>integer TYPE_RESULT_FULL</p> <p>integer TYPE_RESULT_PARTIAL</p> <p>integer HYDRATE_RECORDS</p> <p>integer HYDRATE_OBJECTS</p> <p>integer HYDRATE_ARRAYS</p>"},{"location":"api/Phalcon_Mvc_Model_Resultset/#methods","title":"Methods","text":"<p>public  __construct (Phalcon\\Db\\ResultInterface | false $result, [Phalcon\\Cache\\BackendInterface $cache])</p> <p>Phalcon\\Mvc\\Model\\Resultset constructor</p> <p>public  next ()</p> <p>Moves cursor to next row in the resultset</p> <p>public  valid ()</p> <p>Check whether internal resource has rows to fetch</p> <p>public  key ()</p> <p>Gets pointer number of active row in the resultset</p> <p>final public  rewind ()</p> <p>Rewinds resultset to its beginning</p> <p>final public  seek (mixed $position)</p> <p>Changes internal pointer to a specific position in the resultset Set new position if required and set this-&gt;_row</p> <p>final public  count ()</p> <p>Counts how many rows are in the resultset</p> <p>public  offsetExists (mixed $index)</p> <p>Checks whether offset exists in the resultset</p> <p>public  offsetGet (mixed $index)</p> <p>Gets row in a specific position of the resultset</p> <p>public  offsetSet (int $index, Phalcon\\Mvc\\ModelInterface $value)</p> <p>Resultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <p>public  offsetUnset (mixed $offset)</p> <p>Resultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <p>public  getType ()</p> <p>Returns the internal type of data retrieval that the resultset is using</p> <p>public  getFirst ()</p> <p>Get first row in the resultset</p> <p>public  getLast ()</p> <p>Get last row in the resultset</p> <p>public  setIsFresh (mixed $isFresh)</p> <p>Set if the resultset is fresh or an old one cached</p> <p>public  isFresh ()</p> <p>Tell if the resultset if fresh or an old one cached</p> <p>public  setHydrateMode (mixed $hydrateMode)</p> <p>Sets the hydration mode in the resultset</p> <p>public  getHydrateMode ()</p> <p>Returns the current hydration mode</p> <p>public  getCache ()</p> <p>Returns the associated cache for the resultset</p> <p>public  getMessages ()</p> <p>Returns the error messages produced by a batch operation</p> <p>public boolean update (array $data, [Closure $conditionCallback])</p> <p>Updates every record in the resultset</p> <p>public  delete ([Closure $conditionCallback])</p> <p>Deletes every record in the resultset</p> <p>public Phalcon\\Mvc\\Model filter (callback $filter)</p> <p>Filters a resultset returning only those the developer requires</p> <pre><code>&lt;?php\n\n$filtered = $robots-&gt;filter(\n    function ($robot) {\n        if ($robot-&gt;id &lt; 3) {\n            return $robot;\n        }\n    }\n);\n</code></pre> <p>public array jsonSerialize ()</p> <p>Returns serialised model objects as array for json_encode. Calls jsonSerialize on each object if present</p> <pre><code>&lt;?php\n\n$robots = Robots::find();\necho json_encode($robots);\n</code></pre> <p>abstract public  toArray () inherited from Phalcon\\Mvc\\Model\\ResultsetInterface</p> <p>...</p> <p>abstract public  current () inherited from Iterator</p> <p>...</p> <p>abstract public  serialize () inherited from Serializable</p> <p>...</p> <p>abstract public  unserialize (mixed $serialized) inherited from Serializable</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model_Resultset/#class-phalconmvcmodelresultsetcomplex","title":"Class Phalcon\\Mvc\\Model\\Resultset\\Complex","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\Resultset</p> <p>implements JsonSerializable, Serializable, ArrayAccess, Countable, SeekableIterator, Traversable, Iterator, Phalcon\\Mvc\\Model\\ResultsetInterface</p> <p>Source on GitHub</p> <p>Complex resultsets may include complete objects and scalar values. This class builds every complex row as it is required</p>"},{"location":"api/Phalcon_Mvc_Model_Resultset/#constants_1","title":"Constants","text":"<p>integer TYPE_RESULT_FULL</p> <p>integer TYPE_RESULT_PARTIAL</p> <p>integer HYDRATE_RECORDS</p> <p>integer HYDRATE_OBJECTS</p> <p>integer HYDRATE_ARRAYS</p>"},{"location":"api/Phalcon_Mvc_Model_Resultset/#methods_1","title":"Methods","text":"<p>public  __construct (array $columnTypes, [Phalcon\\Db\\ResultInterface $result], [Phalcon\\Cache\\BackendInterface $cache])</p> <p>Phalcon\\Mvc\\Model\\Resultset\\Complex constructor</p> <p>final public  current ()</p> <p>Returns current row in the resultset</p> <p>public  toArray ()</p> <p>Returns a complete resultset as an array, if the resultset has a big number of rows it could consume more memory than currently it does.</p> <p>public  serialize ()</p> <p>Serializing a resultset will dump all related rows into a big array</p> <p>public  unserialize (mixed $data)</p> <p>Unserializing a resultset will allow to only works on the rows present in the saved state</p> <p>public  next () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Moves cursor to next row in the resultset</p> <p>public  valid () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Check whether internal resource has rows to fetch</p> <p>public  key () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Gets pointer number of active row in the resultset</p> <p>final public  rewind () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Rewinds resultset to its beginning</p> <p>final public  seek (mixed $position) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Changes internal pointer to a specific position in the resultset Set new position if required and set this-&gt;_row</p> <p>final public  count () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Counts how many rows are in the resultset</p> <p>public  offsetExists (mixed $index) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Checks whether offset exists in the resultset</p> <p>public  offsetGet (mixed $index) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Gets row in a specific position of the resultset</p> <p>public  offsetSet (int $index, Phalcon\\Mvc\\ModelInterface $value) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Resultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <p>public  offsetUnset (mixed $offset) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Resultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <p>public  getType () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Returns the internal type of data retrieval that the resultset is using</p> <p>public  getFirst () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Get first row in the resultset</p> <p>public  getLast () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Get last row in the resultset</p> <p>public  setIsFresh (mixed $isFresh) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Set if the resultset is fresh or an old one cached</p> <p>public  isFresh () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Tell if the resultset if fresh or an old one cached</p> <p>public  setHydrateMode (mixed $hydrateMode) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Sets the hydration mode in the resultset</p> <p>public  getHydrateMode () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Returns the current hydration mode</p> <p>public  getCache () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Returns the associated cache for the resultset</p> <p>public  getMessages () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Returns the error messages produced by a batch operation</p> <p>public boolean update (array $data, [Closure $conditionCallback]) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Updates every record in the resultset</p> <p>public  delete ([Closure $conditionCallback]) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Deletes every record in the resultset</p> <p>public Phalcon\\Mvc\\Model filter (callback $filter) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Filters a resultset returning only those the developer requires</p> <pre><code>&lt;?php\n\n$filtered = $robots-&gt;filter(\n    function ($robot) {\n        if ($robot-&gt;id &lt; 3) {\n            return $robot;\n        }\n    }\n);\n</code></pre> <p>public array jsonSerialize () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Returns serialised model objects as array for json_encode. Calls jsonSerialize on each object if present</p> <pre><code>&lt;?php\n\n$robots = Robots::find();\necho json_encode($robots);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Resultset/#class-phalconmvcmodelresultsetsimple","title":"Class Phalcon\\Mvc\\Model\\Resultset\\Simple","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\Resultset</p> <p>implements JsonSerializable, Serializable, ArrayAccess, Countable, SeekableIterator, Traversable, Iterator, Phalcon\\Mvc\\Model\\ResultsetInterface</p> <p>Source on GitHub</p> <p>Simple resultsets only contains a complete objects This class builds every complete object as it is required</p>"},{"location":"api/Phalcon_Mvc_Model_Resultset/#constants_2","title":"Constants","text":"<p>integer TYPE_RESULT_FULL</p> <p>integer TYPE_RESULT_PARTIAL</p> <p>integer HYDRATE_RECORDS</p> <p>integer HYDRATE_OBJECTS</p> <p>integer HYDRATE_ARRAYS</p>"},{"location":"api/Phalcon_Mvc_Model_Resultset/#methods_2","title":"Methods","text":"<p>public  __construct (array $columnMap, Phalcon\\Mvc\\ModelInterface | Phalcon\\Mvc\\Model\\Row $model, Phalcon\\Db\\Result\\Pdo | null $result, [Phalcon\\Cache\\BackendInterface $cache], [boolean $keepSnapshots])</p> <p>Phalcon\\Mvc\\Model\\Resultset\\Simple constructor</p> <p>final public  current ()</p> <p>Returns current row in the resultset</p> <p>public  toArray ([mixed $renameColumns])</p> <p>Returns a complete resultset as an array, if the resultset has a big number of rows it could consume more memory than currently it does. Export the resultset to an array couldn't be faster with a large number of records</p> <p>public  serialize ()</p> <p>Serializing a resultset will dump all related rows into a big array</p> <p>public  unserialize (mixed $data)</p> <p>Unserializing a resultset will allow to only works on the rows present in the saved state</p> <p>public  next () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Moves cursor to next row in the resultset</p> <p>public  valid () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Check whether internal resource has rows to fetch</p> <p>public  key () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Gets pointer number of active row in the resultset</p> <p>final public  rewind () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Rewinds resultset to its beginning</p> <p>final public  seek (mixed $position) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Changes the internal pointer to a specific position in the resultset.  Set the new position if required, and then set this-&gt;_row</p> <p>final public  count () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Counts how many rows are in the resultset</p> <p>public  offsetExists (mixed $index) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Checks whether offset exists in the resultset</p> <p>public  offsetGet (mixed $index) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Gets row in a specific position of the resultset</p> <p>public  offsetSet (int $index, Phalcon\\Mvc\\ModelInterface $value) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Resultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <p>public  offsetUnset (mixed $offset) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Resultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <p>public  getType () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Returns the internal type of data retrieval that the resultset is using</p> <p>public  getFirst () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Get first row in the resultset</p> <p>public  getLast () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Get last row in the resultset</p> <p>public  setIsFresh (mixed $isFresh) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Set if the resultset is fresh or an old one cached</p> <p>public  isFresh () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Tell if the resultset if fresh or an old one cached</p> <p>public  setHydrateMode (mixed $hydrateMode) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Sets the hydration mode in the resultset</p> <p>public  getHydrateMode () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Returns the current hydration mode</p> <p>public  getCache () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Returns the associated cache for the resultset</p> <p>public  getMessages () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Returns the error messages produced by a batch operation</p> <p>public boolean update (array $data, [Closure $conditionCallback]) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Updates every record in the resultset</p> <p>public  delete ([Closure $conditionCallback]) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Deletes every record in the resultset</p> <p>public Phalcon\\Mvc\\Model filter (callback $filter) inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Filters a resultset returning only those the developer requires</p> <pre><code>&lt;?php\n\n$filtered = $robots-&gt;filter(\n    function ($robot) {\n        if ($robot-&gt;id &lt; 3) {\n            return $robot;\n        }\n    }\n);\n</code></pre> <p>public array jsonSerialize () inherited from Phalcon\\Mvc\\Model\\Resultset</p> <p>Returns serialised model objects as array for json_encode. Calls jsonSerialize on each object if present</p> <pre><code>&lt;?php\n\n$robots = Robots::find();\necho json_encode($robots);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Resultset/#interface-phalconmvcmodelresultsetinterface","title":"Interface Phalcon\\Mvc\\Model\\ResultsetInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model_Resultset/#methods_3","title":"Methods","text":"<p>abstract public  getType ()</p> <p>...</p> <p>abstract public  getFirst ()</p> <p>...</p> <p>abstract public  getLast ()</p> <p>...</p> <p>abstract public  setIsFresh (mixed $isFresh)</p> <p>...</p> <p>abstract public  isFresh ()</p> <p>...</p> <p>abstract public  getCache ()</p> <p>...</p> <p>abstract public  toArray ()</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model_Row/","title":"Class Phalcon\\Mvc\\Model\\Row","text":"<p>implements Phalcon\\Mvc\\EntityInterface, Phalcon\\Mvc\\Model\\ResultInterface, ArrayAccess, JsonSerializable</p> <p>Source on GitHub</p> <p>This component allows Phalcon\\Mvc\\Model to return rows without an associated entity. This objects implements the ArrayAccess interface to allow access the object as object-&gt;x or array[x].</p>"},{"location":"api/Phalcon_Mvc_Model_Row/#methods","title":"Methods","text":"<p>public setDirtyState (mixed $dirtyState)</p> <p>Set the current object's state</p> <p>public boolean offsetExists (string | int $index)</p> <p>Checks whether offset exists in the row</p> <p>public string | Phalcon\\Mvc\\ModelInterface offsetGet (string | int $index)</p> <p>Gets a record in a specific position of the row</p> <p>public offsetSet (string | int $index, Phalcon\\Mvc\\ModelInterface $value)</p> <p>Rows cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <p>public offsetUnset (string | int $offset)</p> <p>Rows cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <p>public mixed readAttribute (string $attribute)</p> <p>Reads an attribute value by its name</p> <pre><code>&lt;?php\n\necho $robot-&gt;readAttribute(\"name\");\n</code></pre> <p>public writeAttribute (string $attribute, mixed $value)</p> <p>Writes an attribute value by its name</p> <pre><code>&lt;?php\n\n$robot-&gt;writeAttribute(\"name\", \"Rosey\");\n</code></pre> <p>public array toArray ()</p> <p>Returns the instance as an array representation</p> <p>public array jsonSerialize ()</p> <p>Serializes the object for json_encode</p>"},{"location":"api/Phalcon_Mvc_Model_Transaction/","title":"Class Phalcon\\Mvc\\Model\\Transaction","text":"<p>implements Phalcon\\Mvc\\Model\\TransactionInterface</p> <p>Source on GitHub</p> <p>Transactions are protective blocks where SQL statements are only permanent if they can all succeed as one atomic action. Phalcon\\Transaction is intended to be used with Phalcon_Model_Base. Phalcon Transactions should be created using Phalcon\\Transaction\\Manager.</p> <pre><code>&lt;?php\n\ntry {\n    $manager = new \\Phalcon\\Mvc\\Model\\Transaction\\Manager();\n\n    $transaction = $manager-&gt;get();\n\n    $robot = new Robots();\n\n    $robot-&gt;setTransaction($transaction);\n\n    $robot-&gt;name       = \"WALL\u00b7E\";\n    $robot-&gt;created_at = date(\"Y-m-d\");\n\n    if ($robot-&gt;save() === false) {\n        $transaction-&gt;rollback(\"Can't save robot\");\n    }\n\n    $robotPart = new RobotParts();\n\n    $robotPart-&gt;setTransaction($transaction);\n\n    $robotPart-&gt;type = \"head\";\n\n    if ($robotPart-&gt;save() === false) {\n        $transaction-&gt;rollback(\"Can't save robot part\");\n    }\n\n    $transaction-&gt;commit();\n} catch(Phalcon\\Mvc\\Model\\Transaction\\Failed $e) {\n    echo \"Failed, reason: \", $e-&gt;getMessage();\n}\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Transaction/#methods","title":"Methods","text":"<p>public  __construct (Phalcon\\DiInterface $dependencyInjector, [boolean $autoBegin], [string $service])</p> <p>Phalcon\\Mvc\\Model\\Transaction constructor</p> <p>public  setTransactionManager (Phalcon\\Mvc\\Model\\Transaction\\ManagerInterface $manager)</p> <p>Sets transaction manager related to the transaction</p> <p>public  begin ()</p> <p>Starts the transaction</p> <p>public  commit ()</p> <p>Commits the transaction</p> <p>public boolean rollback ([string $rollbackMessage], [Phalcon\\Mvc\\ModelInterface $rollbackRecord])</p> <p>Rollbacks the transaction</p> <p>public  getConnection ()</p> <p>Returns the connection related to transaction</p> <p>public  setIsNewTransaction (mixed $isNew)</p> <p>Sets if is a reused transaction or new once</p> <p>public  setRollbackOnAbort (mixed $rollbackOnAbort)</p> <p>Sets flag to rollback on abort the HTTP connection</p> <p>public  isManaged ()</p> <p>Checks whether transaction is managed by a transaction manager</p> <p>public  getMessages ()</p> <p>Returns validations messages from last save try</p> <p>public  isValid ()</p> <p>Checks whether internal connection is under an active transaction</p> <p>public  setRollbackedRecord (Phalcon\\Mvc\\ModelInterface $record)</p> <p>Sets object which generates rollback action</p>"},{"location":"api/Phalcon_Mvc_Model_Transaction/#class-phalconmvcmodeltransactionexception","title":"Class Phalcon\\Mvc\\Model\\Transaction\\Exception","text":"<p>extends class Phalcon\\Mvc\\Model\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model_Transaction/#methods_1","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Mvc_Model_Transaction/#class-phalconmvcmodeltransactionfailed","title":"Class Phalcon\\Mvc\\Model\\Transaction\\Failed","text":"<p>extends class Phalcon\\Mvc\\Model\\Transaction\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p> <p>This class will be thrown to exit a try/catch block for isolated transactions</p>"},{"location":"api/Phalcon_Mvc_Model_Transaction/#methods_2","title":"Methods","text":"<p>public  __construct (mixed $message, [Phalcon\\Mvc\\ModelInterface $record])</p> <p>Phalcon\\Mvc\\Model\\Transaction\\Failed constructor</p> <p>public  getRecordMessages ()</p> <p>Returns validation record messages which stop the transaction</p> <p>public  getRecord ()</p> <p>Returns validation record messages which stop the transaction</p> <p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Mvc_Model_Transaction/#class-phalconmvcmodeltransactionmanager","title":"Class Phalcon\\Mvc\\Model\\Transaction\\Manager","text":"<p>implements Phalcon\\Mvc\\Model\\Transaction\\ManagerInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>A transaction acts on a single database connection. If you have multiple class-specific databases, the transaction will not protect interaction among them.</p> <p>This class manages the objects that compose a transaction. A transaction produces a unique connection that is passed to every object part of the transaction.</p> <pre><code>&lt;?php\n\ntry {\n   use Phalcon\\Mvc\\Model\\Transaction\\Manager as TransactionManager;\n\n   $transactionManager = new TransactionManager();\n\n   $transaction = $transactionManager-&gt;get();\n\n   $robot = new Robots();\n\n   $robot-&gt;setTransaction($transaction);\n\n   $robot-&gt;name       = \"WALL\u00b7E\";\n   $robot-&gt;created_at = date(\"Y-m-d\");\n\n   if ($robot-&gt;save() === false){\n       $transaction-&gt;rollback(\"Can't save robot\");\n   }\n\n   $robotPart = new RobotParts();\n\n   $robotPart-&gt;setTransaction($transaction);\n\n   $robotPart-&gt;type = \"head\";\n\n   if ($robotPart-&gt;save() === false) {\n       $transaction-&gt;rollback(\"Can't save robot part\");\n   }\n\n   $transaction-&gt;commit();\n} catch (Phalcon\\Mvc\\Model\\Transaction\\Failed $e) {\n   echo \"Failed, reason: \", $e-&gt;getMessage();\n}\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Transaction/#methods_3","title":"Methods","text":"<p>public  __construct ([Phalcon\\DiInterface $dependencyInjector])</p> <p>Phalcon\\Mvc\\Model\\Transaction\\Manager constructor</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the dependency injection container</p> <p>public  getDI ()</p> <p>Returns the dependency injection container</p> <p>public  setDbService (mixed $service)</p> <p>Sets the database service used to run the isolated transactions</p> <p>public string getDbService ()</p> <p>Returns the database service used to isolate the transaction</p> <p>public  setRollbackPendent (mixed $rollbackPendent)</p> <p>Set if the transaction manager must register a shutdown function to clean up pendent transactions</p> <p>public  getRollbackPendent ()</p> <p>Check if the transaction manager is registering a shutdown function to clean up pendent transactions</p> <p>public  has ()</p> <p>Checks whether the manager has an active transaction</p> <p>public  get ([mixed $autoBegin])</p> <p>Returns a new \\Phalcon\\Mvc\\Model\\Transaction or an already created once This method registers a shutdown function to rollback active connections</p> <p>public  getOrCreateTransaction ([mixed $autoBegin])</p> <p>Create/Returns a new transaction or an existing one</p> <p>public  rollbackPendent ()</p> <p>Rollbacks active transactions within the manager</p> <p>public  commit ()</p> <p>Commits active transactions within the manager</p> <p>public  rollback ([boolean $collect])</p> <p>Rollbacks active transactions within the manager Collect will remove the transaction from the manager</p> <p>public  notifyRollback (Phalcon\\Mvc\\Model\\TransactionInterface $transaction)</p> <p>Notifies the manager about a rollbacked transaction</p> <p>public  notifyCommit (Phalcon\\Mvc\\Model\\TransactionInterface $transaction)</p> <p>Notifies the manager about a committed transaction</p> <p>protected  _collectTransaction (Phalcon\\Mvc\\Model\\TransactionInterface $transaction)</p> <p>Removes transactions from the TransactionManager</p> <p>public  collectTransactions ()</p> <p>Remove all the transactions from the manager</p>"},{"location":"api/Phalcon_Mvc_Model_Transaction/#interface-phalconmvcmodeltransactionmanagerinterface","title":"Interface Phalcon\\Mvc\\Model\\Transaction\\ManagerInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model_Transaction/#methods_4","title":"Methods","text":"<p>abstract public  has ()</p> <p>...</p> <p>abstract public  get ([mixed $autoBegin])</p> <p>...</p> <p>abstract public  rollbackPendent ()</p> <p>...</p> <p>abstract public  commit ()</p> <p>...</p> <p>abstract public  rollback ([mixed $collect])</p> <p>...</p> <p>abstract public  notifyRollback (Phalcon\\Mvc\\Model\\TransactionInterface $transaction)</p> <p>...</p> <p>abstract public  notifyCommit (Phalcon\\Mvc\\Model\\TransactionInterface $transaction)</p> <p>...</p> <p>abstract public  collectTransactions ()</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model_Transaction/#interface-phalconmvcmodeltransactioninterface","title":"Interface Phalcon\\Mvc\\Model\\TransactionInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model_Transaction/#methods_5","title":"Methods","text":"<p>abstract public  setTransactionManager (Phalcon\\Mvc\\Model\\Transaction\\ManagerInterface $manager)</p> <p>...</p> <p>abstract public  begin ()</p> <p>...</p> <p>abstract public  commit ()</p> <p>...</p> <p>abstract public  rollback ([mixed $rollbackMessage], [mixed $rollbackRecord])</p> <p>...</p> <p>abstract public  getConnection ()</p> <p>...</p> <p>abstract public  setIsNewTransaction (mixed $isNew)</p> <p>...</p> <p>abstract public  setRollbackOnAbort (mixed $rollbackOnAbort)</p> <p>...</p> <p>abstract public  isManaged ()</p> <p>...</p> <p>abstract public  getMessages ()</p> <p>...</p> <p>abstract public  isValid ()</p> <p>...</p> <p>abstract public  setRollbackedRecord (Phalcon\\Mvc\\ModelInterface $record)</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model_ValidationFailed/","title":"Class Phalcon\\Mvc\\Model\\ValidationFailed","text":"<p>extends class Phalcon\\Mvc\\Model\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p> <p>This exception is generated when a model fails to save a record Phalcon\\Mvc\\Model must be set up to have this behavior</p>"},{"location":"api/Phalcon_Mvc_Model_ValidationFailed/#methods","title":"Methods","text":"<p>public __construct (Model $model, Message\\ [] $validationMessages)</p> <p>Phalcon\\Mvc\\Model\\ValidationFailed constructor</p> <p>public getModel ()</p> <p>Returns the model that generated the messages</p> <p>public getMessages ()</p> <p>Returns the complete group of messages produced in the validation</p> <p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Mvc_Model_Validator/","title":"Abstract class Phalcon\\Mvc\\Model\\Validator","text":"<p>implements Phalcon\\Mvc\\Model\\ValidatorInterface</p> <p>Source on GitHub</p> <p>This is a base class for Phalcon\\Mvc\\Model validators</p> <p>This class is only for backward compatibility reasons to use with Phalcon\\Mvc\\Collection. Otherwise please use the validators provided by Phalcon\\Validation.</p>"},{"location":"api/Phalcon_Mvc_Model_Validator/#methods","title":"Methods","text":"<p>public  __construct (array $options)</p> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <p>protected  appendMessage (string $message, [string | array $field], [string $type])</p> <p>Appends a message to the validator</p> <p>public  getMessages ()</p> <p>Returns messages generated by the validator</p> <p>public array getOptions ()</p> <p>Returns all the options from the validator</p> <p>public  getOption (mixed $option, [mixed $defaultValue])</p> <p>Returns an option</p> <p>public  isSetOption (mixed $option)</p> <p>Check whether an option has been defined in the validator options</p> <p>abstract public  validate (Phalcon\\Mvc\\EntityInterface $record) inherited from Phalcon\\Mvc\\Model\\ValidatorInterface</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Model_Validator/#class-phalconmvcmodelvalidatoremail","title":"Class Phalcon\\Mvc\\Model\\Validator\\Email","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\Validator</p> <p>implements Phalcon\\Mvc\\Model\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Allows to validate if email fields has correct values</p> <p>This validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Validator\\Email as EmailValidator;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $this-&gt;validate(\n            new EmailValidator(\n                [\n                    \"field\" =&gt; \"electronic_mail\",\n                ]\n            )\n        );\n\n        if ($this-&gt;validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Validator/#methods_1","title":"Methods","text":"<p>public  validate (Phalcon\\Mvc\\EntityInterface $record)</p> <p>Executes the validator</p> <p>public  __construct (array $options) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <p>protected  appendMessage (string $message, [string | array $field], [string $type]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Appends a message to the validator</p> <p>public  getMessages () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns messages generated by the validator</p> <p>public array getOptions () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns all the options from the validator</p> <p>public  getOption (mixed $option, [mixed $defaultValue]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns an option</p> <p>public  isSetOption (mixed $option) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Check whether an option has been defined in the validator options</p>"},{"location":"api/Phalcon_Mvc_Model_Validator/#class-phalconmvcmodelvalidatorexclusionin","title":"Class Phalcon\\Mvc\\Model\\Validator\\Exclusionin","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\Validator</p> <p>implements Phalcon\\Mvc\\Model\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Phalcon\\Mvc\\Model\\Validator\\ExclusionIn</p> <p>Check if a value is not included into a list of values</p> <p>This validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Validator\\ExclusionIn as ExclusionInValidator;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $this-&gt;validate(\n            new ExclusionInValidator(\n                [\n                    \"field\"  =&gt; \"status\",\n                    \"domain\" =&gt; [\"A\", \"I\"],\n                ]\n            )\n        );\n\n        if ($this-&gt;validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Validator/#methods_2","title":"Methods","text":"<p>public  validate (Phalcon\\Mvc\\EntityInterface $record)</p> <p>Executes the validator</p> <p>public  __construct (array $options) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <p>protected  appendMessage (string $message, [string | array $field], [string $type]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Appends a message to the validator</p> <p>public  getMessages () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns messages generated by the validator</p> <p>public array getOptions () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns all the options from the validator</p> <p>public  getOption (mixed $option, [mixed $defaultValue]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns an option</p> <p>public  isSetOption (mixed $option) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Check whether an option has been defined in the validator options</p>"},{"location":"api/Phalcon_Mvc_Model_Validator/#class-phalconmvcmodelvalidatorinclusionin","title":"Class Phalcon\\Mvc\\Model\\Validator\\Inclusionin","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\Validator</p> <p>implements Phalcon\\Mvc\\Model\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Phalcon\\Mvc\\Model\\Validator\\InclusionIn</p> <p>Check if a value is included into a list of values</p> <p>This validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Validator\\InclusionIn as InclusionInValidator;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $this-&gt;validate(\n            new InclusionInValidator(\n                [\n                    \"field\"  =&gt; \"status\",\n                    \"domain\" =&gt; [\"A\", \"I\"],\n                ]\n            )\n        );\n\n        if ($this-&gt;validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Validator/#methods_3","title":"Methods","text":"<p>public  validate (Phalcon\\Mvc\\EntityInterface $record)</p> <p>Executes validator</p> <p>public  __construct (array $options) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <p>protected  appendMessage (string $message, [string | array $field], [string $type]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Appends a message to the validator</p> <p>public  getMessages () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns messages generated by the validator</p> <p>public array getOptions () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns all the options from the validator</p> <p>public  getOption (mixed $option, [mixed $defaultValue]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns an option</p> <p>public  isSetOption (mixed $option) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Check whether an option has been defined in the validator options</p>"},{"location":"api/Phalcon_Mvc_Model_Validator/#class-phalconmvcmodelvalidatorip","title":"Class Phalcon\\Mvc\\Model\\Validator\\Ip","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\Validator</p> <p>implements Phalcon\\Mvc\\Model\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Phalcon\\Mvc\\Model\\Validator\\IP</p> <p>Validates that a value is ipv4 address in valid range</p> <p>This validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Validator\\Ip;\n\nclass Data extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        // Any pubic IP\n        $this-&gt;validate(\n            new IP(\n                [\n                    \"field\"         =&gt; \"server_ip\",\n                    \"version\"       =&gt; IP::VERSION_4 | IP::VERSION_6, // v6 and v4. The same if not specified\n                    \"allowReserved\" =&gt; false,   // False if not specified. Ignored for v6\n                    \"allowPrivate\"  =&gt; false,   // False if not specified\n                    \"message\"       =&gt; \"IP address has to be correct\",\n                ]\n            )\n        );\n\n        // Any public v4 address\n        $this-&gt;validate(\n            new IP(\n                [\n                    \"field\"   =&gt; \"ip_4\",\n                    \"version\" =&gt; IP::VERSION_4,\n                    \"message\" =&gt; \"IP address has to be correct\",\n                ]\n            )\n        );\n\n        // Any v6 address\n        $this-&gt;validate(\n            new IP(\n                [\n                    \"field\"        =&gt; \"ip6\",\n                    \"version\"      =&gt; IP::VERSION_6,\n                    \"allowPrivate\" =&gt; true,\n                    \"message\"      =&gt; \"IP address has to be correct\",\n                ]\n            )\n        );\n\n        if ($this-&gt;validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Validator/#constants","title":"Constants","text":"<p>integer VERSION_4</p> <p>integer VERSION_6</p>"},{"location":"api/Phalcon_Mvc_Model_Validator/#methods_4","title":"Methods","text":"<p>public  validate (Phalcon\\Mvc\\EntityInterface $record)</p> <p>Executes the validator</p> <p>public  __construct (array $options) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <p>protected  appendMessage (string $message, [string | array $field], [string $type]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Appends a message to the validator</p> <p>public  getMessages () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns messages generated by the validator</p> <p>public array getOptions () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns all the options from the validator</p> <p>public  getOption (mixed $option, [mixed $defaultValue]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns an option</p> <p>public  isSetOption (mixed $option) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Check whether an option has been defined in the validator options</p>"},{"location":"api/Phalcon_Mvc_Model_Validator/#class-phalconmvcmodelvalidatornumericality","title":"Class Phalcon\\Mvc\\Model\\Validator\\Numericality","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\Validator</p> <p>implements Phalcon\\Mvc\\Model\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Allows to validate if a field has a valid numeric format</p> <p>This validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Validator\\Numericality as NumericalityValidator;\n\nclass Products extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $this-&gt;validate(\n            new NumericalityValidator(\n                [\n                    \"field\" =&gt; \"price\",\n                ]\n            )\n        );\n\n        if ($this-&gt;validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Validator/#methods_5","title":"Methods","text":"<p>public  validate (Phalcon\\Mvc\\EntityInterface $record)</p> <p>Executes the validator</p> <p>public  __construct (array $options) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <p>protected  appendMessage (string $message, [string | array $field], [string $type]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Appends a message to the validator</p> <p>public  getMessages () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns messages generated by the validator</p> <p>public array getOptions () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns all the options from the validator</p> <p>public  getOption (mixed $option, [mixed $defaultValue]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns an option</p> <p>public  isSetOption (mixed $option) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Check whether an option has been defined in the validator options</p>"},{"location":"api/Phalcon_Mvc_Model_Validator/#class-phalconmvcmodelvalidatorpresenceof","title":"Class Phalcon\\Mvc\\Model\\Validator\\PresenceOf","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\Validator</p> <p>implements Phalcon\\Mvc\\Model\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Allows to validate if a filed have a value different of null and empty string (\"\")</p> <p>This validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Validator\\PresenceOf;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $this-&gt;validate(\n            new PresenceOf(\n                [\n                    \"field\"   =&gt; \"name\",\n                    \"message\" =&gt; \"The name is required\",\n                ]\n            )\n        );\n\n        if ($this-&gt;validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Validator/#methods_6","title":"Methods","text":"<p>public  validate (Phalcon\\Mvc\\EntityInterface $record)</p> <p>Executes the validator</p> <p>public  __construct (array $options) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <p>protected  appendMessage (string $message, [string | array $field], [string $type]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Appends a message to the validator</p> <p>public  getMessages () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns messages generated by the validator</p> <p>public array getOptions () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns all the options from the validator</p> <p>public  getOption (mixed $option, [mixed $defaultValue]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns an option</p> <p>public  isSetOption (mixed $option) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Check whether an option has been defined in the validator options</p>"},{"location":"api/Phalcon_Mvc_Model_Validator/#class-phalconmvcmodelvalidatorregex","title":"Class Phalcon\\Mvc\\Model\\Validator\\Regex","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\Validator</p> <p>implements Phalcon\\Mvc\\Model\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Allows validate if the value of a field matches a regular expression</p> <p>This validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Validator\\Regex as RegexValidator;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $this-&gt;validate(\n            new RegexValidator(\n                [\n                    \"field\"   =&gt; \"created_at\",\n                    \"pattern\" =&gt; \"/^[0-9]{4}[-\\/](0[1-9]|1[12])[-\\/](0[1-9]|[12][0-9]|3[01])/\",\n                ]\n            )\n        );\n\n        if ($this-&gt;validationHasFailed() == true) {\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Validator/#methods_7","title":"Methods","text":"<p>public  validate (Phalcon\\Mvc\\EntityInterface $record)</p> <p>Executes the validator</p> <p>public  __construct (array $options) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <p>protected  appendMessage (string $message, [string | array $field], [string $type]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Appends a message to the validator</p> <p>public  getMessages () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns messages generated by the validator</p> <p>public array getOptions () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns all the options from the validator</p> <p>public  getOption (mixed $option, [mixed $defaultValue]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns an option</p> <p>public  isSetOption (mixed $option) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Check whether an option has been defined in the validator options</p>"},{"location":"api/Phalcon_Mvc_Model_Validator/#class-phalconmvcmodelvalidatorstringlength","title":"Class Phalcon\\Mvc\\Model\\Validator\\StringLength","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\Validator</p> <p>implements Phalcon\\Mvc\\Model\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Simply validates specified string length constraints</p> <p>This validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Validator\\StringLength as StringLengthValidator;\n\nclass Subscriptors extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $this-&gt;validate(\n            new StringLengthValidator(\n                [\n                    \"field\"          =&gt; \"name_last\",\n                    \"max\"            =&gt; 50,\n                    \"min\"            =&gt; 2,\n                    \"messageMaximum\" =&gt; \"We don't like really long names\",\n                    \"messageMinimum\" =&gt; \"We want more than just their initials\",\n                ]\n            )\n        );\n\n        if ($this-&gt;validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Validator/#methods_8","title":"Methods","text":"<p>public  validate (Phalcon\\Mvc\\EntityInterface $record)</p> <p>Executes the validator</p> <p>public  __construct (array $options) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <p>protected  appendMessage (string $message, [string | array $field], [string $type]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Appends a message to the validator</p> <p>public  getMessages () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns messages generated by the validator</p> <p>public array getOptions () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns all the options from the validator</p> <p>public  getOption (mixed $option, [mixed $defaultValue]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns an option</p> <p>public  isSetOption (mixed $option) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Check whether an option has been defined in the validator options</p>"},{"location":"api/Phalcon_Mvc_Model_Validator/#class-phalconmvcmodelvalidatoruniqueness","title":"Class Phalcon\\Mvc\\Model\\Validator\\Uniqueness","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\Validator</p> <p>implements Phalcon\\Mvc\\Model\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Validates that a field or a combination of a set of fields are not present more than once in the existing records of the related table</p> <p>This validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Collection;\nuse Phalcon\\Mvc\\Model\\Validator\\Uniqueness;\n\nclass Subscriptors extends Collection\n{\n    public function validation()\n    {\n        $this-&gt;validate(\n            new Uniqueness(\n                [\n                    \"field\"   =&gt; \"email\",\n                    \"message\" =&gt; \"Value of field 'email' is already present in another record\",\n                ]\n            )\n        );\n\n        if ($this-&gt;validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Validator/#methods_9","title":"Methods","text":"<p>public  validate (Phalcon\\Mvc\\EntityInterface $record)</p> <p>Executes the validator</p> <p>public  __construct (array $options) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <p>protected  appendMessage (string $message, [string | array $field], [string $type]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Appends a message to the validator</p> <p>public  getMessages () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns messages generated by the validator</p> <p>public array getOptions () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns all the options from the validator</p> <p>public  getOption (mixed $option, [mixed $defaultValue]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns an option</p> <p>public  isSetOption (mixed $option) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Check whether an option has been defined in the validator options</p>"},{"location":"api/Phalcon_Mvc_Model_Validator/#class-phalconmvcmodelvalidatorurl","title":"Class Phalcon\\Mvc\\Model\\Validator\\Url","text":"<p>extends abstract class Phalcon\\Mvc\\Model\\Validator</p> <p>implements Phalcon\\Mvc\\Model\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Allows to validate if a field has a url format</p> <p>This validator is only for use with Phalcon\\Mvc\\Collection. If you are using Phalcon\\Mvc\\Model, please use the validators provided by Phalcon\\Validation.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Validator\\Url as UrlValidator;\n\nclass Posts extends \\Phalcon\\Mvc\\Collection\n{\n    public function validation()\n    {\n        $this-&gt;validate(\n            new UrlValidator(\n                [\n                    \"field\" =&gt; \"source_url\",\n                ]\n            )\n        );\n\n        if ($this-&gt;validationHasFailed() === true) {\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"api/Phalcon_Mvc_Model_Validator/#methods_10","title":"Methods","text":"<p>public  validate (Phalcon\\Mvc\\EntityInterface $record)</p> <p>Executes the validator</p> <p>public  __construct (array $options) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Phalcon\\Mvc\\Model\\Validator constructor</p> <p>protected  appendMessage (string $message, [string | array $field], [string $type]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Appends a message to the validator</p> <p>public  getMessages () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns messages generated by the validator</p> <p>public array getOptions () inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns all the options from the validator</p> <p>public  getOption (mixed $option, [mixed $defaultValue]) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Returns an option</p> <p>public  isSetOption (mixed $option) inherited from Phalcon\\Mvc\\Model\\Validator</p> <p>Check whether an option has been defined in the validator options</p>"},{"location":"api/Phalcon_Mvc_Model_Validator/#interface-phalconmvcmodelvalidatorinterface","title":"Interface Phalcon\\Mvc\\Model\\ValidatorInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Model_Validator/#methods_11","title":"Methods","text":"<p>abstract public  getMessages ()</p> <p>...</p> <p>abstract public  validate (Phalcon\\Mvc\\EntityInterface $record)</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_ModuleDefinitionInterface/","title":"Interface Phalcon\\Mvc\\ModuleDefinitionInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_ModuleDefinitionInterface/#methods","title":"Methods","text":"<p>abstract public  registerAutoloaders ([Phalcon\\DiInterface $dependencyInjector])</p> <p>...</p> <p>abstract public  registerServices (Phalcon\\DiInterface $dependencyInjector)</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Router/","title":"Class Phalcon\\Mvc\\Router","text":"<p>implements Phalcon\\Di\\InjectionAwareInterface, Phalcon\\Mvc\\RouterInterface, Phalcon\\Events\\EventsAwareInterface</p> <p>Source on GitHub</p> <p>Phalcon\\Mvc\\Router is the standard framework router. Routing is the process of taking a URI endpoint (that part of the URI which comes after the base URL) and decomposing it into parameters to determine which module, controller, and action of that controller should receive the request</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n$router-&gt;add(\n    \"/documentation/{chapter}/{name}\\.{type:[a-z]+}\",\n    [\n        \"controller\" =&gt; \"documentation\",\n        \"action\"     =&gt; \"show\",\n    ]\n);\n\n$router-&gt;handle();\n\necho $router-&gt;getControllerName();\n</code></pre>"},{"location":"api/Phalcon_Mvc_Router/#constants","title":"Constants","text":"<p>integer URI_SOURCE_GET_URL</p> <p>integer URI_SOURCE_SERVER_REQUEST_URI</p> <p>integer POSITION_FIRST</p> <p>integer POSITION_LAST</p>"},{"location":"api/Phalcon_Mvc_Router/#methods","title":"Methods","text":"<p>public  __construct ([mixed $defaultRoutes])</p> <p>Phalcon\\Mvc\\Router constructor</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the dependency injector</p> <p>public  getDI ()</p> <p>Returns the internal dependency injector</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager)</p> <p>Sets the events manager</p> <p>public  getEventsManager ()</p> <p>Returns the internal event manager</p> <p>public  getRewriteUri ()</p> <p>Get rewrite info. This info is read from $_GET[\"_url\"]. This returns '/' if the rewrite information cannot be read</p> <p>public  setUriSource (mixed $uriSource)</p> <p>Sets the URI source. One of the URI_SOURCE_* constants</p> <pre><code>&lt;?php\n\n$router-&gt;setUriSource(\n    Router::URI_SOURCE_SERVER_REQUEST_URI\n);\n</code></pre> <p>public  removeExtraSlashes (mixed $remove)</p> <p>Set whether router must remove the extra slashes in the handled routes</p> <p>public  setDefaultNamespace (mixed $namespaceName)</p> <p>Sets the name of the default namespace</p> <p>public  setDefaultModule (mixed $moduleName)</p> <p>Sets the name of the default module</p> <p>public  setDefaultController (mixed $controllerName)</p> <p>Sets the default controller name</p> <p>public  setDefaultAction (mixed $actionName)</p> <p>Sets the default action name</p> <p>public  setDefaults (array $defaults)</p> <p>Sets an array of default paths. If a route is missing a path the router will use the defined here This method must not be used to set a 404 route</p> <pre><code>&lt;?php\n\n$router-&gt;setDefaults(\n    [\n        \"module\" =&gt; \"common\",\n        \"action\" =&gt; \"index\",\n    ]\n);\n</code></pre> <p>public  getDefaults ()</p> <p>Returns an array of default parameters</p> <p>public  handle ([mixed $uri])</p> <p>Handles routing information received from the rewrite engine</p> <pre><code>&lt;?php\n\n// Read the info from the rewrite engine\n$router-&gt;handle();\n\n// Manually passing an URL\n$router-&gt;handle(\"/posts/edit/1\");\n</code></pre> <p>public  add (mixed $pattern, [mixed $paths], [mixed $httpMethods], [mixed $position])</p> <p>Adds a route to the router without any HTTP constraint</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n$router-&gt;add(\"/about\", \"About::index\");\n$router-&gt;add(\"/about\", \"About::index\", [\"GET\", \"POST\"]);\n$router-&gt;add(\"/about\", \"About::index\", [\"GET\", \"POST\"], Router::POSITION_FIRST);\n</code></pre> <p>public  addGet (mixed $pattern, [mixed $paths], [mixed $position])</p> <p>Adds a route to the router that only match if the HTTP method is GET</p> <p>public  addPost (mixed $pattern, [mixed $paths], [mixed $position])</p> <p>Adds a route to the router that only match if the HTTP method is POST</p> <p>public  addPut (mixed $pattern, [mixed $paths], [mixed $position])</p> <p>Adds a route to the router that only match if the HTTP method is PUT</p> <p>public  addPatch (mixed $pattern, [mixed $paths], [mixed $position])</p> <p>Adds a route to the router that only match if the HTTP method is PATCH</p> <p>public  addDelete (mixed $pattern, [mixed $paths], [mixed $position])</p> <p>Adds a route to the router that only match if the HTTP method is DELETE</p> <p>public  addOptions (mixed $pattern, [mixed $paths], [mixed $position])</p> <p>Add a route to the router that only match if the HTTP method is OPTIONS</p> <p>public  addHead (mixed $pattern, [mixed $paths], [mixed $position])</p> <p>Adds a route to the router that only match if the HTTP method is HEAD</p> <p>public  addPurge (mixed $pattern, [mixed $paths], [mixed $position])</p> <p>Adds a route to the router that only match if the HTTP method is PURGE (Squid and Varnish support)</p> <p>public  addTrace (mixed $pattern, [mixed $paths], [mixed $position])</p> <p>Adds a route to the router that only match if the HTTP method is TRACE</p> <p>public  addConnect (mixed $pattern, [mixed $paths], [mixed $position])</p> <p>Adds a route to the router that only match if the HTTP method is CONNECT</p> <p>public  mount (Phalcon\\Mvc\\Router\\GroupInterface $group)</p> <p>Mounts a group of routes in the router</p> <p>public  notFound (mixed $paths)</p> <p>Set a group of paths to be returned when none of the defined routes are matched</p> <p>public  clear ()</p> <p>Removes all the pre-defined routes</p> <p>public  getNamespaceName ()</p> <p>Returns the processed namespace name</p> <p>public  getModuleName ()</p> <p>Returns the processed module name</p> <p>public  getControllerName ()</p> <p>Returns the processed controller name</p> <p>public  getActionName ()</p> <p>Returns the processed action name</p> <p>public  getParams ()</p> <p>Returns the processed parameters</p> <p>public  getMatchedRoute ()</p> <p>Returns the route that matches the handled URI</p> <p>public  getMatches ()</p> <p>Returns the sub expressions in the regular expression matched</p> <p>public  wasMatched ()</p> <p>Checks if the router matches any of the defined routes</p> <p>public  getRoutes ()</p> <p>Returns all the routes defined in the router</p> <p>public  getRouteById (mixed $id)</p> <p>Returns a route object by its id</p> <p>public  getRouteByName (mixed $name)</p> <p>Returns a route object by its name</p> <p>public  isExactControllerName ()</p> <p>Returns whether controller name should not be mangled</p>"},{"location":"api/Phalcon_Mvc_Router/#class-phalconmvcrouterannotations","title":"Class Phalcon\\Mvc\\Router\\Annotations","text":"<p>extends class Phalcon\\Mvc\\Router</p> <p>implements Phalcon\\Events\\EventsAwareInterface, Phalcon\\Mvc\\RouterInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>A router that reads routes annotations from classes/resources</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router\\Annotations;\n\n$di-&gt;setShared(\n    \"router\",\n    function() {\n        // Use the annotations router\n        $router = new Annotations(false);\n\n        // This will do the same as above but only if the handled uri starts with /robots\n        $router-&gt;addResource(\"Robots\", \"/robots\");\n\n        return $router;\n    }\n);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Router/#constants_1","title":"Constants","text":"<p>integer URI_SOURCE_GET_URL</p> <p>integer URI_SOURCE_SERVER_REQUEST_URI</p> <p>integer POSITION_FIRST</p> <p>integer POSITION_LAST</p>"},{"location":"api/Phalcon_Mvc_Router/#methods_1","title":"Methods","text":"<p>public  addResource (mixed $handler, [mixed $prefix])</p> <p>Adds a resource to the annotations handler A resource is a class that contains routing annotations</p> <p>public  addModuleResource (mixed $module, mixed $handler, [mixed $prefix])</p> <p>Adds a resource to the annotations handler A resource is a class that contains routing annotations The class is located in a module</p> <p>public  handle ([mixed $uri])</p> <p>Produce the routing parameters from the rewrite information</p> <p>public  processControllerAnnotation (mixed $handler, Phalcon\\Annotations\\Annotation $annotation)</p> <p>Checks for annotations in the controller docblock</p> <p>public  processActionAnnotation (mixed $module, mixed $namespaceName, mixed $controller, mixed $action, Phalcon\\Annotations\\Annotation $annotation)</p> <p>Checks for annotations in the public methods of the controller</p> <p>public  setControllerSuffix (mixed $controllerSuffix)</p> <p>Changes the controller class suffix</p> <p>public  setActionSuffix (mixed $actionSuffix)</p> <p>Changes the action method suffix</p> <p>public  getResources ()</p> <p>Return the registered resources</p> <p>public  __construct ([mixed $defaultRoutes]) inherited from Phalcon\\Mvc\\Router</p> <p>Phalcon\\Mvc\\Router constructor</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Mvc\\Router</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Mvc\\Router</p> <p>Returns the internal dependency injector</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Mvc\\Router</p> <p>Sets the events manager</p> <p>public  getEventsManager () inherited from Phalcon\\Mvc\\Router</p> <p>Returns the internal event manager</p> <p>public  getRewriteUri () inherited from Phalcon\\Mvc\\Router</p> <p>Get rewrite info. This info is read from $_GET[\"_url\"]. This returns '/' if the rewrite information cannot be read</p> <p>public  setUriSource (mixed $uriSource) inherited from Phalcon\\Mvc\\Router</p> <p>Sets the URI source. One of the URI_SOURCE_* constants</p> <pre><code>&lt;?php\n\n$router-&gt;setUriSource(\n    Router::URI_SOURCE_SERVER_REQUEST_URI\n);\n</code></pre> <p>public  removeExtraSlashes (mixed $remove) inherited from Phalcon\\Mvc\\Router</p> <p>Set whether router must remove the extra slashes in the handled routes</p> <p>public  setDefaultNamespace (mixed $namespaceName) inherited from Phalcon\\Mvc\\Router</p> <p>Sets the name of the default namespace</p> <p>public  setDefaultModule (mixed $moduleName) inherited from Phalcon\\Mvc\\Router</p> <p>Sets the name of the default module</p> <p>public  setDefaultController (mixed $controllerName) inherited from Phalcon\\Mvc\\Router</p> <p>Sets the default controller name</p> <p>public  setDefaultAction (mixed $actionName) inherited from Phalcon\\Mvc\\Router</p> <p>Sets the default action name</p> <p>public  setDefaults (array $defaults) inherited from Phalcon\\Mvc\\Router</p> <p>Sets an array of default paths. If a route is missing a path the router will use the defined here This method must not be used to set a 404 route</p> <pre><code>&lt;?php\n\n$router-&gt;setDefaults(\n    [\n        \"module\" =&gt; \"common\",\n        \"action\" =&gt; \"index\",\n    ]\n);\n</code></pre> <p>public  getDefaults () inherited from Phalcon\\Mvc\\Router</p> <p>Returns an array of default parameters</p> <p>public  add (mixed $pattern, [mixed $paths], [mixed $httpMethods], [mixed $position]) inherited from Phalcon\\Mvc\\Router</p> <p>Adds a route to the router without any HTTP constraint</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n$router-&gt;add(\"/about\", \"About::index\");\n$router-&gt;add(\"/about\", \"About::index\", [\"GET\", \"POST\"]);\n$router-&gt;add(\"/about\", \"About::index\", [\"GET\", \"POST\"], Router::POSITION_FIRST);\n</code></pre> <p>public  addGet (mixed $pattern, [mixed $paths], [mixed $position]) inherited from Phalcon\\Mvc\\Router</p> <p>Adds a route to the router that only match if the HTTP method is GET</p> <p>public  addPost (mixed $pattern, [mixed $paths], [mixed $position]) inherited from Phalcon\\Mvc\\Router</p> <p>Adds a route to the router that only match if the HTTP method is POST</p> <p>public  addPut (mixed $pattern, [mixed $paths], [mixed $position]) inherited from Phalcon\\Mvc\\Router</p> <p>Adds a route to the router that only match if the HTTP method is PUT</p> <p>public  addPatch (mixed $pattern, [mixed $paths], [mixed $position]) inherited from Phalcon\\Mvc\\Router</p> <p>Adds a route to the router that only match if the HTTP method is PATCH</p> <p>public  addDelete (mixed $pattern, [mixed $paths], [mixed $position]) inherited from Phalcon\\Mvc\\Router</p> <p>Adds a route to the router that only match if the HTTP method is DELETE</p> <p>public  addOptions (mixed $pattern, [mixed $paths], [mixed $position]) inherited from Phalcon\\Mvc\\Router</p> <p>Add a route to the router that only match if the HTTP method is OPTIONS</p> <p>public  addHead (mixed $pattern, [mixed $paths], [mixed $position]) inherited from Phalcon\\Mvc\\Router</p> <p>Adds a route to the router that only match if the HTTP method is HEAD</p> <p>public  addPurge (mixed $pattern, [mixed $paths], [mixed $position]) inherited from Phalcon\\Mvc\\Router</p> <p>Adds a route to the router that only match if the HTTP method is PURGE (Squid and Varnish support)</p> <p>public  addTrace (mixed $pattern, [mixed $paths], [mixed $position]) inherited from Phalcon\\Mvc\\Router</p> <p>Adds a route to the router that only match if the HTTP method is TRACE</p> <p>public  addConnect (mixed $pattern, [mixed $paths], [mixed $position]) inherited from Phalcon\\Mvc\\Router</p> <p>Adds a route to the router that only match if the HTTP method is CONNECT</p> <p>public  mount (Phalcon\\Mvc\\Router\\GroupInterface $group) inherited from Phalcon\\Mvc\\Router</p> <p>Mounts a group of routes in the router</p> <p>public  notFound (mixed $paths) inherited from Phalcon\\Mvc\\Router</p> <p>Set a group of paths to be returned when none of the defined routes are matched</p> <p>public  clear () inherited from Phalcon\\Mvc\\Router</p> <p>Removes all the pre-defined routes</p> <p>public  getNamespaceName () inherited from Phalcon\\Mvc\\Router</p> <p>Returns the processed namespace name</p> <p>public  getModuleName () inherited from Phalcon\\Mvc\\Router</p> <p>Returns the processed module name</p> <p>public  getControllerName () inherited from Phalcon\\Mvc\\Router</p> <p>Returns the processed controller name</p> <p>public  getActionName () inherited from Phalcon\\Mvc\\Router</p> <p>Returns the processed action name</p> <p>public  getParams () inherited from Phalcon\\Mvc\\Router</p> <p>Returns the processed parameters</p> <p>public  getMatchedRoute () inherited from Phalcon\\Mvc\\Router</p> <p>Returns the route that matches the handled URI</p> <p>public  getMatches () inherited from Phalcon\\Mvc\\Router</p> <p>Returns the sub expressions in the regular expression matched</p> <p>public  wasMatched () inherited from Phalcon\\Mvc\\Router</p> <p>Checks if the router matches any of the defined routes</p> <p>public  getRoutes () inherited from Phalcon\\Mvc\\Router</p> <p>Returns all the routes defined in the router</p> <p>public  getRouteById (mixed $id) inherited from Phalcon\\Mvc\\Router</p> <p>Returns a route object by its id</p> <p>public  getRouteByName (mixed $name) inherited from Phalcon\\Mvc\\Router</p> <p>Returns a route object by its name</p> <p>public  isExactControllerName () inherited from Phalcon\\Mvc\\Router</p> <p>Returns whether controller name should not be mangled</p>"},{"location":"api/Phalcon_Mvc_Router/#class-phalconmvcrouterexception","title":"Class Phalcon\\Mvc\\Router\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Router/#methods_2","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Mvc_Router/#class-phalconmvcroutergroup","title":"Class Phalcon\\Mvc\\Router\\Group","text":"<p>implements Phalcon\\Mvc\\Router\\GroupInterface</p> <p>Source on GitHub</p> <p>Helper class to create a group of routes with common attributes</p> <pre><code>&lt;?php\n\n$router = new \\Phalcon\\Mvc\\Router();\n\n//Create a group with a common module and controller\n$blog = new Group(\n    [\n        \"module\"     =&gt; \"blog\",\n        \"controller\" =&gt; \"index\",\n    ]\n);\n\n//All the routes start with /blog\n$blog-&gt;setPrefix(\"/blog\");\n\n//Add a route to the group\n$blog-&gt;add(\n    \"/save\",\n    [\n        \"action\" =&gt; \"save\",\n    ]\n);\n\n//Add another route to the group\n$blog-&gt;add(\n    \"/edit/{id}\",\n    [\n        \"action\" =&gt; \"edit\",\n    ]\n);\n\n//This route maps to a controller different than the default\n$blog-&gt;add(\n    \"/blog\",\n    [\n        \"controller\" =&gt; \"about\",\n        \"action\"     =&gt; \"index\",\n    ]\n);\n\n//Add the group to the router\n$router-&gt;mount($blog);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Router/#methods_3","title":"Methods","text":"<p>public  __construct ([mixed $paths])</p> <p>Phalcon\\Mvc\\Router\\Group constructor</p> <p>public  setHostname (mixed $hostname)</p> <p>Set a hostname restriction for all the routes in the group</p> <p>public  getHostname ()</p> <p>Returns the hostname restriction</p> <p>public  setPrefix (mixed $prefix)</p> <p>Set a common uri prefix for all the routes in this group</p> <p>public  getPrefix ()</p> <p>Returns the common prefix for all the routes</p> <p>public  beforeMatch (mixed $beforeMatch)</p> <p>Sets a callback that is called if the route is matched. The developer can implement any arbitrary conditions here If the callback returns false the route is treated as not matched</p> <p>public  getBeforeMatch ()</p> <p>Returns the 'before match' callback if any</p> <p>public  setPaths (mixed $paths)</p> <p>Set common paths for all the routes in the group</p> <p>public  getPaths ()</p> <p>Returns the common paths defined for this group</p> <p>public  getRoutes ()</p> <p>Returns the routes added to the group</p> <p>public  add (mixed $pattern, [mixed $paths], [mixed $httpMethods])</p> <p>Adds a route to the router on any HTTP method</p> <pre><code>&lt;?php\n\n$router-&gt;add(\"/about\", \"About::index\");\n</code></pre> <p>public Phalcon\\Mvc\\Router\\Route addGet (string $pattern, [string/array $paths])</p> <p>Adds a route to the router that only match if the HTTP method is GET</p> <p>public Phalcon\\Mvc\\Router\\Route addPost (string $pattern, [string/array $paths])</p> <p>Adds a route to the router that only match if the HTTP method is POST</p> <p>public Phalcon\\Mvc\\Router\\Route addPut (string $pattern, [string/array $paths])</p> <p>Adds a route to the router that only match if the HTTP method is PUT</p> <p>public Phalcon\\Mvc\\Router\\Route addPatch (string $pattern, [string/array $paths])</p> <p>Adds a route to the router that only match if the HTTP method is PATCH</p> <p>public Phalcon\\Mvc\\Router\\Route addDelete (string $pattern, [string/array $paths])</p> <p>Adds a route to the router that only match if the HTTP method is DELETE</p> <p>public Phalcon\\Mvc\\Router\\Route addOptions (string $pattern, [string/array $paths])</p> <p>Add a route to the router that only match if the HTTP method is OPTIONS</p> <p>public Phalcon\\Mvc\\Router\\Route addHead (string $pattern, [string/array $paths])</p> <p>Adds a route to the router that only match if the HTTP method is HEAD</p> <p>public  clear ()</p> <p>Removes all the pre-defined routes</p> <p>protected  _addRoute (mixed $pattern, [mixed $paths], [mixed $httpMethods])</p> <p>Adds a route applying the common attributes</p>"},{"location":"api/Phalcon_Mvc_Router/#interface-phalconmvcroutergroupinterface","title":"Interface Phalcon\\Mvc\\Router\\GroupInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Router/#methods_4","title":"Methods","text":"<p>abstract public  setHostname (mixed $hostname)</p> <p>...</p> <p>abstract public  getHostname ()</p> <p>...</p> <p>abstract public  setPrefix (mixed $prefix)</p> <p>...</p> <p>abstract public  getPrefix ()</p> <p>...</p> <p>abstract public  beforeMatch (mixed $beforeMatch)</p> <p>...</p> <p>abstract public  getBeforeMatch ()</p> <p>...</p> <p>abstract public  setPaths (mixed $paths)</p> <p>...</p> <p>abstract public  getPaths ()</p> <p>...</p> <p>abstract public  getRoutes ()</p> <p>...</p> <p>abstract public  add (mixed $pattern, [mixed $paths], [mixed $httpMethods])</p> <p>...</p> <p>abstract public  addGet (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  addPost (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  addPut (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  addPatch (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  addDelete (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  addOptions (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  addHead (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  clear ()</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Router/#class-phalconmvcrouterroute","title":"Class Phalcon\\Mvc\\Router\\Route","text":"<p>implements Phalcon\\Mvc\\Router\\RouteInterface</p> <p>Source on GitHub</p> <p>This class represents every route added to the router</p>"},{"location":"api/Phalcon_Mvc_Router/#methods_5","title":"Methods","text":"<p>public  __construct (mixed $pattern, [mixed $paths], [mixed $httpMethods])</p> <p>Phalcon\\Mvc\\Router\\Route constructor</p> <p>public  compilePattern (mixed $pattern)</p> <p>Replaces placeholders from pattern returning a valid PCRE regular expression</p> <p>public  via (mixed $httpMethods)</p> <p>Set one or more HTTP methods that constraint the matching of the route</p> <pre><code>&lt;?php\n\n$route-&gt;via(\"GET\");\n\n$route-&gt;via(\n    [\n        \"GET\",\n        \"POST\",\n    ]\n);\n</code></pre> <p>public  extractNamedParams (mixed $pattern)</p> <p>Extracts parameters from a string</p> <p>public  reConfigure (mixed $pattern, [mixed $paths])</p> <p>Reconfigure the route adding a new pattern and a set of paths</p> <p>public static  getRoutePaths ([mixed $paths])</p> <p>Returns routePaths</p> <p>public  getName ()</p> <p>Returns the route's name</p> <p>public  setName (mixed $name)</p> <p>Sets the route's name</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    \"/about\",\n    [\n        \"controller\" =&gt; \"about\",\n    ]\n)-&gt;setName(\"about\");\n</code></pre> <p>public  beforeMatch (mixed $callback)</p> <p>Sets a callback that is called if the route is matched. The developer can implement any arbitrary conditions here If the callback returns false the route is treated as not matched</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    \"/login\",\n    [\n        \"module\"     =&gt; \"admin\",\n        \"controller\" =&gt; \"session\",\n    ]\n)-&gt;beforeMatch(\n    function ($uri, $route) {\n        // Check if the request was made with Ajax\n        if ($_SERVER[\"HTTP_X_REQUESTED_WITH\"] === \"xmlhttprequest\") {\n            return false;\n        }\n\n        return true;\n    }\n);\n</code></pre> <p>public  getBeforeMatch ()</p> <p>Returns the 'before match' callback if any</p> <p>public  match (mixed $callback)</p> <p>Allows to set a callback to handle the request directly in the route</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    \"/help\",\n    []\n)-&gt;match(\n    function () {\n        return $this-&gt;getResponse()-&gt;redirect(\"https://support.google.com/\", true);\n    }\n);\n</code></pre> <p>public  getMatch ()</p> <p>Returns the 'match' callback if any</p> <p>public  getRouteId ()</p> <p>Returns the route's id</p> <p>public  getPattern ()</p> <p>Returns the route's pattern</p> <p>public  getCompiledPattern ()</p> <p>Returns the route's compiled pattern</p> <p>public  getPaths ()</p> <p>Returns the paths</p> <p>public  getReversedPaths ()</p> <p>Returns the paths using positions as keys and names as values</p> <p>public  setHttpMethods (mixed $httpMethods)</p> <p>Sets a set of HTTP methods that constraint the matching of the route (alias of via)</p> <pre><code>&lt;?php\n\n$route-&gt;setHttpMethods(\"GET\");\n$route-&gt;setHttpMethods([\"GET\", \"POST\"]);\n</code></pre> <p>public  getHttpMethods ()</p> <p>Returns the HTTP methods that constraint matching the route</p> <p>public  setHostname (mixed $hostname)</p> <p>Sets a hostname restriction to the route</p> <pre><code>&lt;?php\n\n$route-&gt;setHostname(\"localhost\");\n</code></pre> <p>public  getHostname ()</p> <p>Returns the hostname restriction if any</p> <p>public  setGroup (Phalcon\\Mvc\\Router\\GroupInterface $group)</p> <p>Sets the group associated with the route</p> <p>public  getGroup ()</p> <p>Returns the group associated with the route</p> <p>public  convert (mixed $name, mixed $converter)</p> <p>Adds a converter to perform an additional transformation for certain parameter</p> <p>public  getConverters ()</p> <p>Returns the router converter</p> <p>public static  reset ()</p> <p>Resets the internal route id generator</p>"},{"location":"api/Phalcon_Mvc_Router/#interface-phalconmvcrouterrouteinterface","title":"Interface Phalcon\\Mvc\\Router\\RouteInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Router/#methods_6","title":"Methods","text":"<p>abstract public  setHostname (mixed $hostname)</p> <p>...</p> <p>abstract public  getHostname ()</p> <p>...</p> <p>abstract public  compilePattern (mixed $pattern)</p> <p>...</p> <p>abstract public  via (mixed $httpMethods)</p> <p>...</p> <p>abstract public  reConfigure (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  getName ()</p> <p>...</p> <p>abstract public  setName (mixed $name)</p> <p>...</p> <p>abstract public  setHttpMethods (mixed $httpMethods)</p> <p>...</p> <p>abstract public  getRouteId ()</p> <p>...</p> <p>abstract public  getPattern ()</p> <p>...</p> <p>abstract public  getCompiledPattern ()</p> <p>...</p> <p>abstract public  getPaths ()</p> <p>...</p> <p>abstract public  getReversedPaths ()</p> <p>...</p> <p>abstract public  getHttpMethods ()</p> <p>...</p> <p>abstract public static  reset ()</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Router/#interface-phalconmvcrouterinterface","title":"Interface Phalcon\\Mvc\\RouterInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Router/#methods_7","title":"Methods","text":"<p>abstract public  setDefaultModule (mixed $moduleName)</p> <p>...</p> <p>abstract public  setDefaultController (mixed $controllerName)</p> <p>...</p> <p>abstract public  setDefaultAction (mixed $actionName)</p> <p>...</p> <p>abstract public  setDefaults (array $defaults)</p> <p>...</p> <p>abstract public  handle ([mixed $uri])</p> <p>...</p> <p>abstract public  add (mixed $pattern, [mixed $paths], [mixed $httpMethods])</p> <p>...</p> <p>abstract public  addGet (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  addPost (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  addPut (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  addPatch (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  addDelete (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  addOptions (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  addHead (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  addPurge (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  addTrace (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  addConnect (mixed $pattern, [mixed $paths])</p> <p>...</p> <p>abstract public  mount (Phalcon\\Mvc\\Router\\GroupInterface $group)</p> <p>...</p> <p>abstract public  clear ()</p> <p>...</p> <p>abstract public  getModuleName ()</p> <p>...</p> <p>abstract public  getNamespaceName ()</p> <p>...</p> <p>abstract public  getControllerName ()</p> <p>...</p> <p>abstract public  getActionName ()</p> <p>...</p> <p>abstract public  getParams ()</p> <p>...</p> <p>abstract public  getMatchedRoute ()</p> <p>...</p> <p>abstract public  getMatches ()</p> <p>...</p> <p>abstract public  wasMatched ()</p> <p>...</p> <p>abstract public  getRoutes ()</p> <p>...</p> <p>abstract public  getRouteById (mixed $id)</p> <p>...</p> <p>abstract public  getRouteByName (mixed $name)</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_Url/","title":"Class Phalcon\\Mvc\\Url","text":"<p>implements Phalcon\\Mvc\\UrlInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>This components helps in the generation of: URIs, URLs and Paths</p> <pre><code>&lt;?php\n\n// Generate a URL appending the URI to the base URI\necho $url-&gt;get(\"products/edit/1\");\n\n// Generate a URL for a predefined route\necho $url-&gt;get(\n    [\n        \"for\"   =&gt; \"blog-post\",\n        \"title\" =&gt; \"some-cool-stuff\",\n        \"year\"  =&gt; \"2012\",\n    ]\n);\n</code></pre>"},{"location":"api/Phalcon_Mvc_Url/#methods","title":"Methods","text":"<p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the DependencyInjector container</p> <p>public  getDI ()</p> <p>Returns the DependencyInjector container</p> <p>public  setBaseUri (mixed $baseUri)</p> <p>Sets a prefix for all the URIs to be generated</p> <pre><code>&lt;?php\n\n$url-&gt;setBaseUri(\"/invo/\");\n\n$url-&gt;setBaseUri(\"/invo/index.php/\");\n</code></pre> <p>public  setStaticBaseUri (mixed $staticBaseUri)</p> <p>Sets a prefix for all static URLs generated</p> <pre><code>&lt;?php\n\n$url-&gt;setStaticBaseUri(\"/invo/\");\n</code></pre> <p>public  getBaseUri ()</p> <p>Returns the prefix for all the generated urls. By default /</p> <p>public  getStaticBaseUri ()</p> <p>Returns the prefix for all the generated static urls. By default /</p> <p>public  setBasePath (mixed $basePath)</p> <p>Sets a base path for all the generated paths</p> <pre><code>&lt;?php\n\n$url-&gt;setBasePath(\"/var/www/htdocs/\");\n</code></pre> <p>public  getBasePath ()</p> <p>Returns the base path</p> <p>public  get ([mixed $uri], [mixed $args], [mixed $local], [mixed $baseUri])</p> <p>Generates a URL</p> <pre><code>&lt;?php\n\n// Generate a URL appending the URI to the base URI\necho $url-&gt;get(\"products/edit/1\");\n\n// Generate a URL for a predefined route\necho $url-&gt;get(\n    [\n        \"for\"   =&gt; \"blog-post\",\n        \"title\" =&gt; \"some-cool-stuff\",\n        \"year\"  =&gt; \"2015\",\n    ]\n);\n\n// Generate a URL with GET arguments (/show/products?id=1&amp;name=Carrots)\necho $url-&gt;get(\n    \"show/products\",\n    [\n        \"id\"   =&gt; 1,\n        \"name\" =&gt; \"Carrots\",\n    ]\n);\n\n// Generate an absolute URL by setting the third parameter as false.\necho $url-&gt;get(\n    \"https://phalcon.io/\",\n    null,\n    false\n);\n</code></pre> <p>public  getStatic ([mixed $uri])</p> <p>Generates a URL for a static resource</p> <pre><code>&lt;?php\n\n// Generate a URL for a static resource\necho $url-&gt;getStatic(\"img/logo.png\");\n\n// Generate a URL for a static predefined route\necho $url-&gt;getStatic(\n    [\n        \"for\" =&gt; \"logo-cdn\",\n    ]\n);\n</code></pre> <p>public  path ([mixed $path])</p> <p>Generates a local path</p>"},{"location":"api/Phalcon_Mvc_Url/#class-phalconmvcurlexception","title":"Class Phalcon\\Mvc\\Url\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Url/#methods_1","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Mvc_Url/#interface-phalconmvcurlinterface","title":"Interface Phalcon\\Mvc\\UrlInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_Url/#methods_2","title":"Methods","text":"<p>abstract public  setBaseUri (mixed $baseUri)</p> <p>...</p> <p>abstract public  getBaseUri ()</p> <p>...</p> <p>abstract public  setBasePath (mixed $basePath)</p> <p>...</p> <p>abstract public  getBasePath ()</p> <p>...</p> <p>abstract public  get ([mixed $uri], [mixed $args], [mixed $local])</p> <p>...</p> <p>abstract public  path ([mixed $path])</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_User/","title":"Class Phalcon\\Mvc\\User\\Component","text":"<p>extends abstract class Phalcon\\Di\\Injectable</p> <p>implements Phalcon\\Events\\EventsAwareInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_User/#methods","title":"Methods","text":"<p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal dependency injector</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the event manager</p> <p>public  getEventsManager () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal event manager</p> <p>public  __get (mixed $propertyName) inherited from Phalcon\\Di\\Injectable</p> <p>Magic method __get</p>"},{"location":"api/Phalcon_Mvc_User/#class-phalconmvcusermodule","title":"Class Phalcon\\Mvc\\User\\Module","text":"<p>extends abstract class Phalcon\\Di\\Injectable</p> <p>implements Phalcon\\Events\\EventsAwareInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_User/#methods_1","title":"Methods","text":"<p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal dependency injector</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the event manager</p> <p>public  getEventsManager () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal event manager</p> <p>public  __get (mixed $propertyName) inherited from Phalcon\\Di\\Injectable</p> <p>Magic method __get</p>"},{"location":"api/Phalcon_Mvc_User/#class-phalconmvcuserplugin","title":"Class Phalcon\\Mvc\\User\\Plugin","text":"<p>extends abstract class Phalcon\\Di\\Injectable</p> <p>implements Phalcon\\Events\\EventsAwareInterface, Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_User/#methods_2","title":"Methods","text":"<p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal dependency injector</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the event manager</p> <p>public  getEventsManager () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal event manager</p> <p>public  __get (mixed $propertyName) inherited from Phalcon\\Di\\Injectable</p> <p>Magic method __get</p>"},{"location":"api/Phalcon_Mvc_View/","title":"Class Phalcon\\Mvc\\View","text":"<p>extends abstract class Phalcon\\Di\\Injectable</p> <p>implements Phalcon\\Events\\EventsAwareInterface, Phalcon\\Di\\InjectionAwareInterface, Phalcon\\Mvc\\ViewInterface, Phalcon\\Mvc\\ViewBaseInterface</p> <p>Source on GitHub</p> <p>Phalcon\\Mvc\\View is a class for working with the \"view\" portion of the model-view-controller pattern. That is, it exists to help keep the view script separate from the model and controller scripts. It provides a system of helpers, output filters, and variable escaping.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\n\n$view = new View();\n\n// Setting views directory\n$view-&gt;setViewsDir(\"app/views/\");\n\n$view-&gt;start();\n\n// Shows recent posts view (app/views/posts/recent.phtml)\n$view-&gt;render(\"posts\", \"recent\");\n$view-&gt;finish();\n\n// Printing views output\necho $view-&gt;getContent();\n</code></pre>"},{"location":"api/Phalcon_Mvc_View/#constants","title":"Constants","text":"<p>integer LEVEL_MAIN_LAYOUT</p> <p>integer LEVEL_AFTER_TEMPLATE</p> <p>integer LEVEL_LAYOUT</p> <p>integer LEVEL_BEFORE_TEMPLATE</p> <p>integer LEVEL_ACTION_VIEW</p> <p>integer LEVEL_NO_RENDER</p> <p>integer CACHE_MODE_NONE</p> <p>integer CACHE_MODE_INVERSE</p>"},{"location":"api/Phalcon_Mvc_View/#methods","title":"Methods","text":"<p>public  getRenderLevel ()</p> <p>...</p> <p>public  getCurrentRenderLevel ()</p> <p>...</p> <p>public  getRegisteredEngines ()</p> <p>public  __construct ([array $options])</p> <p>Phalcon\\Mvc\\View constructor</p> <p>final protected  _isAbsolutePath (mixed $path)</p> <p>Checks if a path is absolute or not</p> <p>public  setViewsDir (mixed $viewsDir)</p> <p>Sets the views directory. Depending of your platform, always add a trailing slash or backslash</p> <p>public  getViewsDir ()</p> <p>Gets views directory</p> <p>public  setLayoutsDir (mixed $layoutsDir)</p> <p>Sets the layouts sub-directory. Must be a directory under the views directory. Depending of your platform, always add a trailing slash or backslash</p> <pre><code>&lt;?php\n\n$view-&gt;setLayoutsDir(\"../common/layouts/\");\n</code></pre> <p>public  getLayoutsDir ()</p> <p>Gets the current layouts sub-directory</p> <p>public  setPartialsDir (mixed $partialsDir)</p> <p>Sets a partials sub-directory. Must be a directory under the views directory. Depending of your platform, always add a trailing slash or backslash</p> <pre><code>&lt;?php\n\n$view-&gt;setPartialsDir(\"../common/partials/\");\n</code></pre> <p>public  getPartialsDir ()</p> <p>Gets the current partials sub-directory</p> <p>public  setBasePath (mixed $basePath)</p> <p>Sets base path. Depending of your platform, always add a trailing slash or backslash</p> <pre><code>&lt;?php\n\n    $view-&gt;setBasePath(__DIR__ . \"/\");\n</code></pre> <p>public  getBasePath ()</p> <p>Gets base path</p> <p>public  setRenderLevel (mixed $level)</p> <p>Sets the render level for the view</p> <pre><code>&lt;?php\n\n// Render the view related to the controller only\n$this-&gt;view-&gt;setRenderLevel(\n    View::LEVEL_LAYOUT\n);\n</code></pre> <p>public  disableLevel (mixed $level)</p> <p>Disables a specific level of rendering</p> <pre><code>&lt;?php\n\n// Render all levels except ACTION level\n$this-&gt;view-&gt;disableLevel(\n    View::LEVEL_ACTION_VIEW\n);\n</code></pre> <p>public  setMainView (mixed $viewPath)</p> <p>Sets default view name. Must be a file without extension in the views directory</p> <pre><code>&lt;?php\n\n// Renders as main view views-dir/base.phtml\n$this-&gt;view-&gt;setMainView(\"base\");\n</code></pre> <p>public  getMainView ()</p> <p>Returns the name of the main view</p> <p>public  setLayout (mixed $layout)</p> <p>Change the layout to be used instead of using the name of the latest controller name</p> <pre><code>&lt;?php\n\n$this-&gt;view-&gt;setLayout(\"main\");\n</code></pre> <p>public  getLayout ()</p> <p>Returns the name of the main view</p> <p>public  setTemplateBefore (mixed $templateBefore)</p> <p>Sets a template before the controller layout</p> <p>public  cleanTemplateBefore ()</p> <p>Resets any \"template before\" layouts</p> <p>public  setTemplateAfter (mixed $templateAfter)</p> <p>Sets a \"template after\" controller layout</p> <p>public  cleanTemplateAfter ()</p> <p>Resets any template before layouts</p> <p>public  setParamToView (mixed $key, mixed $value)</p> <p>Adds parameters to views (alias of setVar)</p> <pre><code>&lt;?php\n\n$this-&gt;view-&gt;setParamToView(\"products\", $products);\n</code></pre> <p>public  setVars (array $params, [mixed $merge])</p> <p>Set all the render params</p> <pre><code>&lt;?php\n\n$this-&gt;view-&gt;setVars(\n    [\n        \"products\" =&gt; $products,\n    ]\n);\n</code></pre> <p>public  setVar (mixed $key, mixed $value)</p> <p>Set a single view parameter</p> <pre><code>&lt;?php\n\n$this-&gt;view-&gt;setVar(\"products\", $products);\n</code></pre> <p>public  getVar (mixed $key)</p> <p>Returns a parameter previously set in the view</p> <p>public  getParamsToView ()</p> <p>Returns parameters to views</p> <p>public  getControllerName ()</p> <p>Gets the name of the controller rendered</p> <p>public  getActionName ()</p> <p>Gets the name of the action rendered</p> <p>public  getParams ()</p> <p>Gets extra parameters of the action rendered</p> <p>public  start ()</p> <p>Starts rendering process enabling the output buffering</p> <p>protected  _loadTemplateEngines ()</p> <p>Loads registered template engines, if none is registered it will use Phalcon\\Mvc\\View\\Engine\\Php</p> <p>protected  _engineRender (array $engines, string $viewPath, boolean $silence, boolean $mustClean, [Phalcon\\Cache\\BackendInterface $cache])</p> <p>Checks whether view exists on registered extensions and render it</p> <p>public  registerEngines (array $engines)</p> <p>Register templating engines</p> <pre><code>&lt;?php\n\n$this-&gt;view-&gt;registerEngines(\n    [\n        \".phtml\" =&gt; \"Phalcon\\Mvc\\View\\Engine\\Php\",\n        \".volt\"  =&gt; \"Phalcon\\Mvc\\View\\Engine\\Volt\",\n        \".mhtml\" =&gt; \"MyCustomEngine\",\n    ]\n);\n</code></pre> <p>public  exists (mixed $view)</p> <p>Checks whether view exists</p> <p>public  render (string $controllerName, string $actionName, [array $params])</p> <p>Executes render process from dispatching data</p> <pre><code>&lt;?php\n\n// Shows recent posts view (app/views/posts/recent.phtml)\n$view-&gt;start()-&gt;render(\"posts\", \"recent\")-&gt;finish();\n</code></pre> <p>public  pick (mixed $renderView)</p> <p>Choose a different view to render instead of last-controller/last-action</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass ProductsController extends Controller\n{\n   public function saveAction()\n   {\n        // Do some save stuff...\n\n        // Then show the list view\n        $this-&gt;view-&gt;pick(\"products/list\");\n   }\n}\n</code></pre> <p>public  getPartial (mixed $partialPath, [mixed $params])</p> <p>Renders a partial view</p> <pre><code>&lt;?php\n\n// Retrieve the contents of a partial\necho $this-&gt;getPartial(\"shared/footer\");\n</code></pre> <pre><code>&lt;?php\n\n// Retrieve the contents of a partial with arguments\necho $this-&gt;getPartial(\n    \"shared/footer\",\n    [\n        \"content\" =&gt; $html,\n    ]\n);\n</code></pre> <p>public  partial (mixed $partialPath, [mixed $params])</p> <p>Renders a partial view</p> <pre><code>&lt;?php\n\n// Show a partial inside another view\n$this-&gt;partial(\"shared/footer\");\n</code></pre> <pre><code>&lt;?php\n\n// Show a partial inside another view with parameters\n$this-&gt;partial(\n    \"shared/footer\",\n    [\n        \"content\" =&gt; $html,\n    ]\n);\n</code></pre> <p>public string getRender (string $controllerName, string $actionName, [array $params], [mixed $configCallback])</p> <p>Perform the automatic rendering returning the output as a string</p> <pre><code>&lt;?php\n\n$template = $this-&gt;view-&gt;getRender(\n    \"products\",\n    \"show\",\n    [\n        \"products\" =&gt; $products,\n    ]\n);\n</code></pre> <p>public  finish ()</p> <p>Finishes the render process by stopping the output buffering</p> <p>protected  _createCache ()</p> <p>Create a Phalcon\\Cache based on the internal cache options</p> <p>public  isCaching ()</p> <p>Check if the component is currently caching the output content</p> <p>public  getCache ()</p> <p>Returns the cache instance used to cache</p> <p>public  cache ([mixed $options])</p> <p>Cache the actual view render to certain level</p> <pre><code>&lt;?php\n\n$this-&gt;view-&gt;cache(\n    [\n        \"key\"      =&gt; \"my-key\",\n        \"lifetime\" =&gt; 86400,\n    ]\n);\n</code></pre> <p>public  setContent (mixed $content)</p> <p>Externally sets the view content</p> <pre><code>&lt;?php\n\n$this-&gt;view-&gt;setContent(\"&lt;h1&gt;hello&lt;/h1&gt;\");\n</code></pre> <p>public  getContent ()</p> <p>Returns cached output from another view stage</p> <p>public  getActiveRenderPath ()</p> <p>Returns the path (or paths) of the views that are currently rendered</p> <p>public  disable ()</p> <p>Disables the auto-rendering process</p> <p>public  enable ()</p> <p>Enables the auto-rendering process</p> <p>public  reset ()</p> <p>Resets the view component to its factory default values</p> <p>public  __set (mixed $key, mixed $value)</p> <p>Magic method to pass variables to the views</p> <pre><code>&lt;?php\n\n$this-&gt;view-&gt;products = $products;\n</code></pre> <p>public  __get (mixed $key)</p> <p>Magic method to retrieve a variable passed to the view</p> <pre><code>&lt;?php\n\necho $this-&gt;view-&gt;products;\n</code></pre> <p>public  isDisabled ()</p> <p>Whether automatic rendering is enabled</p> <p>public  __isset (mixed $key)</p> <p>Magic method to retrieve if a variable is set in the view</p> <pre><code>&lt;?php\n\necho isset($this-&gt;view-&gt;products);\n</code></pre> <p>protected  getViewsDirs ()</p> <p>Gets views directories</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal dependency injector</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the event manager</p> <p>public  getEventsManager () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal event manager</p>"},{"location":"api/Phalcon_Mvc_View/#abstract-class-phalconmvcviewengine","title":"Abstract class Phalcon\\Mvc\\View\\Engine","text":"<p>extends abstract class Phalcon\\Di\\Injectable</p> <p>implements Phalcon\\Events\\EventsAwareInterface, Phalcon\\Di\\InjectionAwareInterface, Phalcon\\Mvc\\View\\EngineInterface</p> <p>Source on GitHub</p> <p>All the template engine adapters must inherit this class. This provides basic interfacing between the engine and the Phalcon\\Mvc\\View component.</p>"},{"location":"api/Phalcon_Mvc_View/#methods_1","title":"Methods","text":"<p>public  __construct (Phalcon\\Mvc\\ViewBaseInterface $view, [Phalcon\\DiInterface $dependencyInjector])</p> <p>Phalcon\\Mvc\\View\\Engine constructor</p> <p>public  getContent ()</p> <p>Returns cached output on another view stage</p> <p>public string partial (string $partialPath, [array $params])</p> <p>Renders a partial inside another view</p> <p>public  getView ()</p> <p>Returns the view component related to the adapter</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal dependency injector</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the event manager</p> <p>public  getEventsManager () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal event manager</p> <p>public  __get (mixed $propertyName) inherited from Phalcon\\Di\\Injectable</p> <p>Magic method __get</p> <p>abstract public  render (mixed $path, mixed $params, [mixed $mustClean]) inherited from Phalcon\\Mvc\\View\\EngineInterface</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_View/#class-phalconmvcviewenginephp","title":"Class Phalcon\\Mvc\\View\\Engine\\Php","text":"<p>extends abstract class Phalcon\\Mvc\\View\\Engine</p> <p>implements Phalcon\\Mvc\\View\\EngineInterface, Phalcon\\Di\\InjectionAwareInterface, Phalcon\\Events\\EventsAwareInterface</p> <p>Source on GitHub</p> <p>Adapter to use PHP itself as templating engine</p>"},{"location":"api/Phalcon_Mvc_View/#methods_2","title":"Methods","text":"<p>public  render (mixed $path, mixed $params, [mixed $mustClean])</p> <p>Renders a view using the template engine</p> <p>public  __construct (Phalcon\\Mvc\\ViewBaseInterface $view, [Phalcon\\DiInterface $dependencyInjector]) inherited from Phalcon\\Mvc\\View\\Engine</p> <p>Phalcon\\Mvc\\View\\Engine constructor</p> <p>public  getContent () inherited from Phalcon\\Mvc\\View\\Engine</p> <p>Returns cached output on another view stage</p> <p>public string partial (string $partialPath, [array $params]) inherited from Phalcon\\Mvc\\View\\Engine</p> <p>Renders a partial inside another view</p> <p>public  getView () inherited from Phalcon\\Mvc\\View\\Engine</p> <p>Returns the view component related to the adapter</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal dependency injector</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the event manager</p> <p>public  getEventsManager () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal event manager</p> <p>public  __get (mixed $propertyName) inherited from Phalcon\\Di\\Injectable</p> <p>Magic method __get</p>"},{"location":"api/Phalcon_Mvc_View/#class-phalconmvcviewenginevolt","title":"Class Phalcon\\Mvc\\View\\Engine\\Volt","text":"<p>extends abstract class Phalcon\\Mvc\\View\\Engine</p> <p>implements Phalcon\\Mvc\\View\\EngineInterface, Phalcon\\Di\\InjectionAwareInterface, Phalcon\\Events\\EventsAwareInterface</p> <p>Source on GitHub</p> <p>Designer friendly and fast template engine for PHP written in Zephir/C</p>"},{"location":"api/Phalcon_Mvc_View/#methods_3","title":"Methods","text":"<p>public  setOptions (array $options)</p> <p>Set Volt's options</p> <p>public  getOptions ()</p> <p>Return Volt's options</p> <p>public  getCompiler ()</p> <p>Returns the Volt's compiler</p> <p>public  render (mixed $templatePath, mixed $params, [mixed $mustClean])</p> <p>Renders a view using the template engine</p> <p>public  length (mixed $item)</p> <p>Length filter. If an array/object is passed a count is performed otherwise a strlen/mb_strlen</p> <p>public  isIncluded (mixed $needle, mixed $haystack)</p> <p>Checks if the needle is included in the haystack</p> <p>public  convertEncoding (mixed $text, mixed $from, mixed $to)</p> <p>Performs a string conversion</p> <p>public  slice (mixed $value, [mixed $start], [mixed $end])</p> <p>Extracts a slice from a string/array/traversable object value</p> <p>public  sort (array $value)</p> <p>Sorts an array</p> <p>public  callMacro (mixed $name, [array $arguments])</p> <p>Checks if a macro is defined and calls it</p> <p>public  __construct (Phalcon\\Mvc\\ViewBaseInterface $view, [Phalcon\\DiInterface $dependencyInjector]) inherited from Phalcon\\Mvc\\View\\Engine</p> <p>Phalcon\\Mvc\\View\\Engine constructor</p> <p>public  getContent () inherited from Phalcon\\Mvc\\View\\Engine</p> <p>Returns cached output on another view stage</p> <p>public string partial (string $partialPath, [array $params]) inherited from Phalcon\\Mvc\\View\\Engine</p> <p>Renders a partial inside another view</p> <p>public  getView () inherited from Phalcon\\Mvc\\View\\Engine</p> <p>Returns the view component related to the adapter</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal dependency injector</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the event manager</p> <p>public  getEventsManager () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal event manager</p> <p>public  __get (mixed $propertyName) inherited from Phalcon\\Di\\Injectable</p> <p>Magic method __get</p>"},{"location":"api/Phalcon_Mvc_View/#class-phalconmvcviewenginevoltcompiler","title":"Class Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler","text":"<p>implements Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>This class reads and compiles Volt templates into PHP plain code</p> <pre><code>&lt;?php\n\n$compiler = new \\Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler();\n\n$compiler-&gt;compile(\"views/partials/header.volt\");\n\nrequire $compiler-&gt;getCompiledTemplatePath();\n</code></pre>"},{"location":"api/Phalcon_Mvc_View/#methods_4","title":"Methods","text":"<p>public  __construct ([Phalcon\\Mvc\\ViewBaseInterface $view])</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the dependency injector</p> <p>public  getDI ()</p> <p>Returns the internal dependency injector</p> <p>public  setOptions (array $options)</p> <p>Sets the compiler options</p> <p>public  setOption (string $option, mixed $value)</p> <p>Sets a single compiler option</p> <p>public string getOption (string $option)</p> <p>Returns a compiler's option</p> <p>public  getOptions ()</p> <p>Returns the compiler options</p> <p>final public mixed fireExtensionEvent (string $name, [array $arguments])</p> <p>Fires an event to registered extensions</p> <p>public  addExtension (mixed $extension)</p> <p>Registers a Volt's extension</p> <p>public  getExtensions ()</p> <p>Returns the list of extensions registered in Volt</p> <p>public  addFunction (mixed $name, mixed $definition)</p> <p>Register a new function in the compiler</p> <p>public  getFunctions ()</p> <p>Register the user registered functions</p> <p>public  addFilter (mixed $name, mixed $definition)</p> <p>Register a new filter in the compiler</p> <p>public  getFilters ()</p> <p>Register the user registered filters</p> <p>public  setUniquePrefix (mixed $prefix)</p> <p>Set a unique prefix to be used as prefix for compiled variables</p> <p>public  getUniquePrefix ()</p> <p>Return a unique prefix to be used as prefix for compiled variables and contexts</p> <p>public  attributeReader (array $expr)</p> <p>Resolves attribute reading</p> <p>public  functionCall (array $expr)</p> <p>Resolves function intermediate code into PHP function calls</p> <p>public  resolveTest (array $test, mixed $left)</p> <p>Resolves filter intermediate code into a valid PHP expression</p> <p>final protected  resolveFilter (array $filter, mixed $left)</p> <p>Resolves filter intermediate code into PHP function calls</p> <p>final public  expression (array $expr)</p> <p>Resolves an expression node in an AST volt tree</p> <p>final protected string | array _statementListOrExtends (array $statements)</p> <p>Compiles a block of statements</p> <p>public  compileForeach (array $statement, [mixed $extendsMode])</p> <p>Compiles a \"foreach\" intermediate code representation into plain PHP code</p> <p>public  compileForElse ()</p> <p>Generates a 'forelse' PHP code</p> <p>public  compileIf (array $statement, [mixed $extendsMode])</p> <p>Compiles a 'if' statement returning PHP code</p> <p>public  compileElseIf (array $statement)</p> <p>Compiles a \"elseif\" statement returning PHP code</p> <p>public  compileCache (array $statement, [mixed $extendsMode])</p> <p>Compiles a \"cache\" statement returning PHP code</p> <p>public  compileSet (array $statement)</p> <p>Compiles a \"set\" statement returning PHP code</p> <p>public  compileDo (array $statement)</p> <p>Compiles a \"do\" statement returning PHP code</p> <p>public  compileReturn (array $statement)</p> <p>Compiles a \"return\" statement returning PHP code</p> <p>public  compileAutoEscape (array $statement, mixed $extendsMode)</p> <p>Compiles a \"autoescape\" statement returning PHP code</p> <p>public string compileEcho (array $statement)</p> <p>Compiles a '{{' '}}' statement returning PHP code</p> <p>public  compileInclude (array $statement)</p> <p>Compiles a 'include' statement returning PHP code</p> <p>public  compileMacro (array $statement, mixed $extendsMode)</p> <p>Compiles macros</p> <p>public string compileCall (array $statement, boolean $extendsMode)</p> <p>Compiles calls to macros</p> <p>final protected  _statementList (array $statements, [mixed $extendsMode])</p> <p>Traverses a statement list compiling each of its nodes</p> <p>protected  _compileSource (mixed $viewCode, [mixed $extendsMode])</p> <p>Compiles a Volt source code returning a PHP plain version</p> <p>public  compileString (mixed $viewCode, [mixed $extendsMode])</p> <p>Compiles a template into a string</p> <pre><code>&lt;?php\n\necho $compiler-&gt;compileString('{{ \"hello world\" }}');\n</code></pre> <p>public string | array compileFile (string $path, string $compiledPath, [boolean $extendsMode])</p> <p>Compiles a template into a file forcing the destination path</p> <pre><code>&lt;?php\n\n$compiler-&gt;compile(\"views/layouts/main.volt\", \"views/layouts/main.volt.php\");\n</code></pre> <p>public  compile (mixed $templatePath, [mixed $extendsMode])</p> <p>Compiles a template into a file applying the compiler options This method does not return the compiled path if the template was not compiled</p> <pre><code>&lt;?php\n\n$compiler-&gt;compile(\"views/layouts/main.volt\");\n\nrequire $compiler-&gt;getCompiledTemplatePath();\n</code></pre> <p>public  getTemplatePath ()</p> <p>Returns the path that is currently being compiled</p> <p>public  getCompiledTemplatePath ()</p> <p>Returns the path to the last compiled template</p> <p>public array parse (string $viewCode)</p> <p>Parses a Volt template returning its intermediate representation</p> <pre><code>&lt;?php\n\nprint_r(\n    $compiler-&gt;parse(\"{% raw %}{{ 3 + 2 }}{% endraw %}\")\n);\n</code></pre> <p>protected  getFinalPath (mixed $path)</p> <p>Gets the final path with VIEW</p>"},{"location":"api/Phalcon_Mvc_View/#class-phalconmvcviewenginevoltexception","title":"Class Phalcon\\Mvc\\View\\Engine\\Volt\\Exception","text":"<p>extends class Phalcon\\Mvc\\View\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_View/#methods_5","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Mvc_View/#interface-phalconmvcviewengineinterface","title":"Interface Phalcon\\Mvc\\View\\EngineInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_View/#methods_6","title":"Methods","text":"<p>abstract public  getContent ()</p> <p>...</p> <p>abstract public  partial (mixed $partialPath, [mixed $params])</p> <p>...</p> <p>abstract public  render (mixed $path, mixed $params, [mixed $mustClean])</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_View/#class-phalconmvcviewexception","title":"Class Phalcon\\Mvc\\View\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_View/#methods_7","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Mvc_View/#class-phalconmvcviewsimple","title":"Class Phalcon\\Mvc\\View\\Simple","text":"<p>extends abstract class Phalcon\\Di\\Injectable</p> <p>implements Phalcon\\Events\\EventsAwareInterface, Phalcon\\Di\\InjectionAwareInterface, Phalcon\\Mvc\\ViewBaseInterface</p> <p>Source on GitHub</p> <p>This component allows to render views without hierarchical levels</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View\\Simple as View;\n\n$view = new View();\n\n// Render a view\necho $view-&gt;render(\n    \"templates/my-view\",\n    [\n        \"some\" =&gt; $param,\n    ]\n);\n\n// Or with filename with extension\necho $view-&gt;render(\n    \"templates/my-view.volt\",\n    [\n        \"parameter\" =&gt; $here,\n    ]\n);\n</code></pre>"},{"location":"api/Phalcon_Mvc_View/#methods_8","title":"Methods","text":"<p>public  getRegisteredEngines ()</p> <p>public  __construct ([array $options])</p> <p>Phalcon\\Mvc\\View\\Simple constructor</p> <p>public  setViewsDir (mixed $viewsDir)</p> <p>Sets views directory. Depending of your platform, always add a trailing slash or backslash</p> <p>public  getViewsDir ()</p> <p>Gets views directory</p> <p>public  registerEngines (array $engines)</p> <p>Register templating engines</p> <pre><code>&lt;?php\n\n$this-&gt;view-&gt;registerEngines(\n    [\n        \".phtml\" =&gt; \"Phalcon\\Mvc\\View\\Engine\\Php\",\n        \".volt\"  =&gt; \"Phalcon\\Mvc\\View\\Engine\\Volt\",\n        \".mhtml\" =&gt; \"MyCustomEngine\",\n    ]\n);\n</code></pre> <p>protected array _loadTemplateEngines ()</p> <p>Loads registered template engines, if none is registered it will use Phalcon\\Mvc\\View\\Engine\\Php</p> <p>final protected  _internalRender (string $path, array $params)</p> <p>Tries to render the view with every engine registered in the component</p> <p>public  render (string $path, [array $params])</p> <p>Renders a view</p> <p>public  partial (mixed $partialPath, [mixed $params])</p> <p>Renders a partial view</p> <pre><code>&lt;?php\n\n// Show a partial inside another view\n$this-&gt;partial(\"shared/footer\");\n</code></pre> <pre><code>&lt;?php\n\n// Show a partial inside another view with parameters\n$this-&gt;partial(\n    \"shared/footer\",\n    [\n        \"content\" =&gt; $html,\n    ]\n);\n</code></pre> <p>public  setCacheOptions (array $options)</p> <p>Sets the cache options</p> <p>public array getCacheOptions ()</p> <p>Returns the cache options</p> <p>protected  _createCache ()</p> <p>Create a Phalcon\\Cache based on the internal cache options</p> <p>public  getCache ()</p> <p>Returns the cache instance used to cache</p> <p>public  cache ([mixed $options])</p> <p>Cache the actual view render to certain level</p> <pre><code>&lt;?php\n\n$this-&gt;view-&gt;cache(\n    [\n        \"key\"      =&gt; \"my-key\",\n        \"lifetime\" =&gt; 86400,\n    ]\n);\n</code></pre> <p>public  setParamToView (mixed $key, mixed $value)</p> <p>Adds parameters to views (alias of setVar)</p> <pre><code>&lt;?php\n\n$this-&gt;view-&gt;setParamToView(\"products\", $products);\n</code></pre> <p>public  setVars (array $params, [mixed $merge])</p> <p>Set all the render params</p> <pre><code>&lt;?php\n\n$this-&gt;view-&gt;setVars(\n    [\n        \"products\" =&gt; $products,\n    ]\n);\n</code></pre> <p>public  setVar (mixed $key, mixed $value)</p> <p>Set a single view parameter</p> <pre><code>&lt;?php\n\n$this-&gt;view-&gt;setVar(\"products\", $products);\n</code></pre> <p>public  getVar (mixed $key)</p> <p>Returns a parameter previously set in the view</p> <p>public array getParamsToView ()</p> <p>Returns parameters to views</p> <p>public  setContent (mixed $content)</p> <p>Externally sets the view content</p> <pre><code>&lt;?php\n\n$this-&gt;view-&gt;setContent(\"&lt;h1&gt;hello&lt;/h1&gt;\");\n</code></pre> <p>public  getContent ()</p> <p>Returns cached output from another view stage</p> <p>public string getActiveRenderPath ()</p> <p>Returns the path of the view that is currently rendered</p> <p>public  __set (mixed $key, mixed $value)</p> <p>Magic method to pass variables to the views</p> <pre><code>&lt;?php\n\n$this-&gt;view-&gt;products = $products;\n</code></pre> <p>public  __get (mixed $key)</p> <p>Magic method to retrieve a variable passed to the view</p> <pre><code>&lt;?php\n\necho $this-&gt;view-&gt;products;\n</code></pre> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal dependency injector</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the event manager</p> <p>public  getEventsManager () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal event manager</p>"},{"location":"api/Phalcon_Mvc_View/#interface-phalconmvcviewbaseinterface","title":"Interface Phalcon\\Mvc\\ViewBaseInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_View/#methods_9","title":"Methods","text":"<p>abstract public  setViewsDir (mixed $viewsDir)</p> <p>...</p> <p>abstract public  getViewsDir ()</p> <p>...</p> <p>abstract public  setParamToView (mixed $key, mixed $value)</p> <p>...</p> <p>abstract public  setVar (mixed $key, mixed $value)</p> <p>...</p> <p>abstract public  getParamsToView ()</p> <p>...</p> <p>abstract public  getCache ()</p> <p>...</p> <p>abstract public  cache ([mixed $options])</p> <p>...</p> <p>abstract public  setContent (mixed $content)</p> <p>...</p> <p>abstract public  getContent ()</p> <p>...</p> <p>abstract public  partial (mixed $partialPath, [mixed $params])</p> <p>...</p>"},{"location":"api/Phalcon_Mvc_View/#interface-phalconmvcviewinterface","title":"Interface Phalcon\\Mvc\\ViewInterface","text":"<p>implements Phalcon\\Mvc\\ViewBaseInterface</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Mvc_View/#methods_10","title":"Methods","text":"<p>abstract public  setLayoutsDir (mixed $layoutsDir)</p> <p>...</p> <p>abstract public  getLayoutsDir ()</p> <p>...</p> <p>abstract public  setPartialsDir (mixed $partialsDir)</p> <p>...</p> <p>abstract public  getPartialsDir ()</p> <p>...</p> <p>abstract public  setBasePath (mixed $basePath)</p> <p>...</p> <p>abstract public  getBasePath ()</p> <p>...</p> <p>abstract public  setRenderLevel (mixed $level)</p> <p>...</p> <p>abstract public  setMainView (mixed $viewPath)</p> <p>...</p> <p>abstract public  getMainView ()</p> <p>...</p> <p>abstract public  setLayout (mixed $layout)</p> <p>...</p> <p>abstract public  getLayout ()</p> <p>...</p> <p>abstract public  setTemplateBefore (mixed $templateBefore)</p> <p>...</p> <p>abstract public  cleanTemplateBefore ()</p> <p>...</p> <p>abstract public  setTemplateAfter (mixed $templateAfter)</p> <p>...</p> <p>abstract public  cleanTemplateAfter ()</p> <p>...</p> <p>abstract public  getControllerName ()</p> <p>...</p> <p>abstract public  getActionName ()</p> <p>...</p> <p>abstract public  getParams ()</p> <p>...</p> <p>abstract public  start ()</p> <p>...</p> <p>abstract public  registerEngines (array $engines)</p> <p>...</p> <p>abstract public  render (mixed $controllerName, mixed $actionName, [mixed $params])</p> <p>...</p> <p>abstract public  pick (mixed $renderView)</p> <p>...</p> <p>abstract public  finish ()</p> <p>...</p> <p>abstract public  getActiveRenderPath ()</p> <p>...</p> <p>abstract public  disable ()</p> <p>...</p> <p>abstract public  enable ()</p> <p>...</p> <p>abstract public  reset ()</p> <p>...</p> <p>abstract public  isDisabled ()</p> <p>...</p> <p>abstract public  setViewsDir (mixed $viewsDir) inherited from Phalcon\\Mvc\\ViewBaseInterface</p> <p>...</p> <p>abstract public  getViewsDir () inherited from Phalcon\\Mvc\\ViewBaseInterface</p> <p>...</p> <p>abstract public  setParamToView (mixed $key, mixed $value) inherited from Phalcon\\Mvc\\ViewBaseInterface</p> <p>...</p> <p>abstract public  setVar (mixed $key, mixed $value) inherited from Phalcon\\Mvc\\ViewBaseInterface</p> <p>...</p> <p>abstract public  getParamsToView () inherited from Phalcon\\Mvc\\ViewBaseInterface</p> <p>...</p> <p>abstract public  getCache () inherited from Phalcon\\Mvc\\ViewBaseInterface</p> <p>...</p> <p>abstract public  cache ([mixed $options]) inherited from Phalcon\\Mvc\\ViewBaseInterface</p> <p>...</p> <p>abstract public  setContent (mixed $content) inherited from Phalcon\\Mvc\\ViewBaseInterface</p> <p>...</p> <p>abstract public  getContent () inherited from Phalcon\\Mvc\\ViewBaseInterface</p> <p>...</p> <p>abstract public  partial (mixed $partialPath, [mixed $params]) inherited from Phalcon\\Mvc\\ViewBaseInterface</p> <p>...</p>"},{"location":"api/Phalcon_Paginator/","title":"Abstract class Phalcon\\Paginator\\Adapter","text":"<p>implements Phalcon\\Paginator\\AdapterInterface</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Paginator/#methods","title":"Methods","text":"<p>public  setCurrentPage (mixed $page)</p> <p>Set the current page number</p> <p>public  setLimit (mixed $limitRows)</p> <p>Set current rows limit</p> <p>public  getLimit ()</p> <p>Get current rows limit</p> <p>abstract public  getPaginate () inherited from Phalcon\\Paginator\\AdapterInterface</p> <p>...</p>"},{"location":"api/Phalcon_Paginator/#class-phalconpaginatoradaptermodel","title":"Class Phalcon\\Paginator\\Adapter\\Model","text":"<p>extends abstract class Phalcon\\Paginator\\Adapter</p> <p>implements Phalcon\\Paginator\\AdapterInterface</p> <p>Source on GitHub</p> <p>This adapter allows to paginate data using a Phalcon\\Mvc\\Model resultset as a base.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Paginator\\Adapter\\Model;\n\n$paginator = new Model(\n    [\n        \"data\"  =&gt; Robots::find(),\n        \"limit\" =&gt; 25,\n        \"page\"  =&gt; $currentPage,\n    ]\n);\n\n$paginate = $paginator-&gt;getPaginate();\n</code></pre>"},{"location":"api/Phalcon_Paginator/#methods_1","title":"Methods","text":"<p>public  __construct (array $config)</p> <p>Phalcon\\Paginator\\Adapter\\Model constructor</p> <p>public  getPaginate ()</p> <p>Returns a slice of the resultset to show in the pagination</p> <p>public  setCurrentPage (mixed $page) inherited from Phalcon\\Paginator\\Adapter</p> <p>Set the current page number</p> <p>public  setLimit (mixed $limitRows) inherited from Phalcon\\Paginator\\Adapter</p> <p>Set current rows limit</p> <p>public  getLimit () inherited from Phalcon\\Paginator\\Adapter</p> <p>Get current rows limit</p>"},{"location":"api/Phalcon_Paginator/#class-phalconpaginatoradapternativearray","title":"Class Phalcon\\Paginator\\Adapter\\NativeArray","text":"<p>extends abstract class Phalcon\\Paginator\\Adapter</p> <p>implements Phalcon\\Paginator\\AdapterInterface</p> <p>Source on GitHub</p> <p>Pagination using a PHP array as source of data</p> <pre><code>&lt;?php\n\nuse Phalcon\\Paginator\\Adapter\\NativeArray;\n\n$paginator = new NativeArray(\n    [\n        \"data\"  =&gt; [\n            [\"id\" =&gt; 1, \"name\" =&gt; \"Artichoke\"],\n            [\"id\" =&gt; 2, \"name\" =&gt; \"Carrots\"],\n            [\"id\" =&gt; 3, \"name\" =&gt; \"Beet\"],\n            [\"id\" =&gt; 4, \"name\" =&gt; \"Lettuce\"],\n            [\"id\" =&gt; 5, \"name\" =&gt; \"\"],\n        ],\n        \"limit\" =&gt; 2,\n        \"page\"  =&gt; $currentPage,\n    ]\n);\n</code></pre>"},{"location":"api/Phalcon_Paginator/#methods_2","title":"Methods","text":"<p>public  __construct (array $config)</p> <p>Phalcon\\Paginator\\Adapter\\NativeArray constructor</p> <p>public  getPaginate ()</p> <p>Returns a slice of the resultset to show in the pagination</p> <p>public  setCurrentPage (mixed $page) inherited from Phalcon\\Paginator\\Adapter</p> <p>Set the current page number</p> <p>public  setLimit (mixed $limitRows) inherited from Phalcon\\Paginator\\Adapter</p> <p>Set current rows limit</p> <p>public  getLimit () inherited from Phalcon\\Paginator\\Adapter</p> <p>Get current rows limit</p>"},{"location":"api/Phalcon_Paginator/#class-phalconpaginatoradapterquerybuilder","title":"Class Phalcon\\Paginator\\Adapter\\QueryBuilder","text":"<p>extends abstract class Phalcon\\Paginator\\Adapter</p> <p>implements Phalcon\\Paginator\\AdapterInterface</p> <p>Source on GitHub</p> <p>Pagination using a PHQL query builder as source of data</p> <pre><code>&lt;?php\n\nuse Phalcon\\Paginator\\Adapter\\QueryBuilder;\n\n$builder = $this-&gt;modelsManager-&gt;createBuilder()\n                -&gt;columns(\"id, name\")\n                -&gt;from(\"Robots\")\n                -&gt;orderBy(\"name\");\n\n$paginator = new QueryBuilder(\n    [\n        \"builder\" =&gt; $builder,\n        \"limit\"   =&gt; 20,\n        \"page\"    =&gt; 1,\n    ]\n);\n</code></pre>"},{"location":"api/Phalcon_Paginator/#methods_3","title":"Methods","text":"<p>public  __construct (array $config)</p> <p>public  getCurrentPage ()</p> <p>Get the current page number</p> <p>public  setQueryBuilder (Phalcon\\Mvc\\Model\\Query\\Builder $builder)</p> <p>Set query builder object</p> <p>public  getQueryBuilder ()</p> <p>Get query builder object</p> <p>public  getPaginate ()</p> <p>Returns a slice of the resultset to show in the pagination</p> <p>public  setCurrentPage (mixed $page) inherited from Phalcon\\Paginator\\Adapter</p> <p>Set the current page number</p> <p>public  setLimit (mixed $limitRows) inherited from Phalcon\\Paginator\\Adapter</p> <p>Set current rows limit</p> <p>public  getLimit () inherited from Phalcon\\Paginator\\Adapter</p> <p>Get current rows limit</p>"},{"location":"api/Phalcon_Paginator/#interface-phalconpaginatoradapterinterface","title":"Interface Phalcon\\Paginator\\AdapterInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Paginator/#methods_4","title":"Methods","text":"<p>abstract public  setCurrentPage (mixed $page)</p> <p>...</p> <p>abstract public  getPaginate ()</p> <p>...</p> <p>abstract public  setLimit (mixed $limit)</p> <p>...</p> <p>abstract public  getLimit ()</p> <p>...</p>"},{"location":"api/Phalcon_Paginator/#class-phalconpaginatorexception","title":"Class Phalcon\\Paginator\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Paginator/#methods_5","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Paginator/#class-phalconpaginatorfactory","title":"Class Phalcon\\Paginator\\Factory","text":"<p>extends abstract class Phalcon\\Factory</p> <p>implements Phalcon\\FactoryInterface</p> <p>Source on GitHub</p> <p>Loads Paginator Adapter class using 'adapter' option</p> <pre><code>&lt;?php\n\nuse Phalcon\\Paginator\\Factory;\n\n/**\n * The `modelsManager` is automatically created when you instantiate your DI\n * container using the `FactoryDefault` class. It returns a \n * [Phalcon\\Mvc\\Model\\Manager](Phalcon_Mvc_Model_Manager.md) object\n */\n\n$builder = $this-&gt;modelsManager-&gt;createBuilder()\n                -&gt;columns(\"id, name\")\n                -&gt;from(\"Robots\")\n                -&gt;orderBy(\"name\");\n\n$options = [\n    \"builder\" =&gt; $builder,\n    \"limit\"   =&gt; 20,\n    \"page\"    =&gt; 1,\n    \"adapter\" =&gt; \"queryBuilder\",\n];\n$paginator = Factory::load($options);\n</code></pre>"},{"location":"api/Phalcon_Paginator/#methods_6","title":"Methods","text":"<p>public static  load (Phalcon\\Config | array $config)</p> <p>protected static  loadClass (mixed $namespace, mixed $config) inherited from Phalcon\\Factory</p> <p>...</p>"},{"location":"api/Phalcon_Queue/","title":"Class Phalcon\\Queue\\Beanstalk","text":"<p>Source on GitHub</p> <p>Class to access the beanstalk queue service. Partially implements the protocol version 1.2</p> <pre><code>&lt;?php\n\nuse Phalcon\\Queue\\Beanstalk;\n\n$queue = new Beanstalk(\n    [\n        \"host\"       =&gt; \"127.0.0.1\",\n        \"port\"       =&gt; 11300,\n        \"persistent\" =&gt; true,\n    ]\n);\n</code></pre>"},{"location":"api/Phalcon_Queue/#constants","title":"Constants","text":"<p>integer DEFAULT_DELAY</p> <p>integer DEFAULT_PRIORITY</p> <p>integer DEFAULT_TTR</p> <p>string DEFAULT_TUBE</p> <p>string DEFAULT_HOST</p> <p>integer DEFAULT_PORT</p>"},{"location":"api/Phalcon_Queue/#methods","title":"Methods","text":"<p>public  __construct ([array $parameters])</p> <p>public  connect ()</p> <p>Makes a connection to the Beanstalkd server</p> <p>public  put (mixed $data, [array $options])</p> <p>Puts a job on the queue using specified tube.</p> <p>public  reserve ([mixed $timeout])</p> <p>Reserves/locks a ready job from the specified tube.</p> <p>public  choose (mixed $tube)</p> <p>Change the active tube. By default the tube is \"default\".</p> <p>public  watch (mixed $tube)</p> <p>The watch command adds the named tube to the watch list for the current connection.</p> <p>public  ignore (mixed $tube)</p> <p>It removes the named tube from the watch list for the current connection.</p> <p>public  pauseTube (mixed $tube, mixed $delay)</p> <p>Can delay any new job being reserved for a given time.</p> <p>public  kick (mixed $bound)</p> <p>The kick command applies only to the currently used tube.</p> <p>public  stats ()</p> <p>Gives statistical information about the system as a whole.</p> <p>public  statsTube (mixed $tube)</p> <p>Gives statistical information about the specified tube if it exists.</p> <p>public  listTubes ()</p> <p>Returns a list of all existing tubes.</p> <p>public  listTubeUsed ()</p> <p>Returns the tube currently being used by the client.</p> <p>public  listTubesWatched ()</p> <p>Returns a list tubes currently being watched by the client.</p> <p>public  peekReady ()</p> <p>Inspect the next ready job.</p> <p>public  peekBuried ()</p> <p>Return the next job in the list of buried jobs.</p> <p>public  peekDelayed ()</p> <p>Return the next job in the list of buried jobs.</p> <p>public  jobPeek (mixed $id)</p> <p>The peek commands let the client inspect a job in the system.</p> <p>final public  readStatus ()</p> <p>Reads the latest status from the Beanstalkd server</p> <p>final public  readYaml ()</p> <p>Fetch a YAML payload from the Beanstalkd server</p> <p>public  read ([mixed $length])</p> <p>Reads a packet from the socket. Prior to reading from the socket will check for availability of the connection.</p> <p>public  write (mixed $data)</p> <p>Writes data to the socket. Performs a connection if none is available</p> <p>public  disconnect ()</p> <p>Closes the connection to the beanstalk server.</p> <p>public  quit ()</p> <p>Simply closes the connection.</p>"},{"location":"api/Phalcon_Queue/#class-phalconqueuebeanstalkexception","title":"Class Phalcon\\Queue\\Beanstalk\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Queue/#methods_1","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Queue/#class-phalconqueuebeanstalkjob","title":"Class Phalcon\\Queue\\Beanstalk\\Job","text":"<p>Source on GitHub</p> <p>Represents a job in a beanstalk queue</p>"},{"location":"api/Phalcon_Queue/#methods_2","title":"Methods","text":"<p>public  getId ()</p> <p>public  getBody ()</p> <p>public  __construct (Phalcon\\Queue\\Beanstalk $queue, mixed $id, mixed $body)</p> <p>public  delete ()</p> <p>Removes a job from the server entirely</p> <p>public  release ([mixed $priority], [mixed $delay])</p> <p>The release command puts a reserved job back into the ready queue (and marks its state as \"ready\") to be run by any client. It is normally used when the job fails because of a transitory error.</p> <p>public  bury ([mixed $priority])</p> <p>The bury command puts a job into the \"buried\" state. Buried jobs are put into a FIFO linked list and will not be touched by the server again until a client kicks them with the \"kick\" command.</p> <p>public  touch ()</p> <p>The <code>touch</code> command allows a worker to request more time to work on a job. This is useful for jobs that potentially take a long time, but you still want the benefits of a TTR pulling a job away from an unresponsive worker. A worker may periodically tell the server that it's still alive and processing a job (e.g. it may do this on <code>DEADLINE_SOON</code>). The command postpones the auto release of a reserved job until TTR seconds from when the command is issued.</p> <p>public  kick ()</p> <p>Move the job to the ready queue if it is delayed or buried.</p> <p>public  stats ()</p> <p>Gives statistical information about the specified job if it exists.</p> <p>public  __wakeup ()</p> <p>Checks if the job has been modified after unserializing the object</p>"},{"location":"api/Phalcon_Registry/","title":"Final class Phalcon\\Registry","text":"<p>implements ArrayAccess, Countable, Iterator, Traversable</p> <p>Source on GitHub</p> <p>A registry is a container for storing objects and values in the application space. By storing the value in a registry, the same object is always available throughout your application.</p> <pre><code>&lt;?php\n\n$registry = new \\Phalcon\\Registry();\n\n// Set value\n$registry-&gt;something = \"something\";\n// or\n$registry[\"something\"] = \"something\";\n\n// Get value\n$value = $registry-&gt;something;\n// or\n$value = $registry[\"something\"];\n\n// Check if the key exists\n$exists = isset($registry-&gt;something);\n// or\n$exists = isset($registry[\"something\"]);\n\n// Unset\nunset($registry-&gt;something);\n// or\nunset($registry[\"something\"]);\n</code></pre> <p>In addition to ArrayAccess, Phalcon\\Registry also implements Countable (count($registry) will return the number of elements in the registry), Serializable and Iterator (you can iterate over the registry using a foreach loop) interfaces. For PHP 5.4 and higher, JsonSerializable interface is implemented.</p> <p>Phalcon\\Registry is very fast (it is typically faster than any userspace implementation of the registry); however, this comes at a price: Phalcon\\Registry is a final class and cannot be inherited from.</p> <p>Though Phalcon\\Registry exposes methods like __get(), offsetGet(), count() etc, it is not recommended to invoke them manually (these methods exist mainly to match the interfaces the registry implements): $registry-&gt;__get(\"property\") is several times slower than $registry-&gt;property.</p> <p>Internally all the magic methods (and interfaces except JsonSerializable) are implemented using object handlers or similar techniques: this allows to bypass relatively slow method calls.</p>"},{"location":"api/Phalcon_Registry/#methods","title":"Methods","text":"<p>final public  __construct ()</p> <p>Registry constructor</p> <p>final public  offsetExists (mixed $offset)</p> <p>Checks if the element is present in the registry</p> <p>final public  offsetGet (mixed $offset)</p> <p>Returns an index in the registry</p> <p>final public  offsetSet (mixed $offset, mixed $value)</p> <p>Sets an element in the registry</p> <p>final public  offsetUnset (mixed $offset)</p> <p>Unsets an element in the registry</p> <p>final public  count ()</p> <p>Checks how many elements are in the register</p> <p>final public  next ()</p> <p>Moves cursor to next row in the registry</p> <p>final public  key ()</p> <p>Gets pointer number of active row in the registry</p> <p>final public  rewind ()</p> <p>Rewinds the registry cursor to its beginning</p> <p>public  valid ()</p> <p>Checks if the iterator is valid</p> <p>public  current ()</p> <p>Obtains the current value in the internal iterator</p> <p>final public  __set (mixed $key, mixed $value)</p> <p>Sets an element in the registry</p> <p>final public  __get (mixed $key)</p> <p>Returns an index in the registry</p> <p>final public  __isset (mixed $key)</p> <p>...</p> <p>final public  __unset (mixed $key)</p> <p>...</p>"},{"location":"api/Phalcon_Security/","title":"Class Phalcon\\Security","text":"<p>implements Phalcon\\Di\\InjectionAwareInterface</p> <p>Source on GitHub</p> <p>This component provides a set of functions to improve the security in Phalcon applications</p> <pre><code>&lt;?php\n\n$login    = $this-&gt;request-&gt;getPost(\"login\");\n$password = $this-&gt;request-&gt;getPost(\"password\");\n\n$user = Users::findFirstByLogin($login);\n\nif ($user) {\n    if ($this-&gt;security-&gt;checkHash($password, $user-&gt;password)) {\n        // The password is valid\n    }\n}\n</code></pre>"},{"location":"api/Phalcon_Security/#constants","title":"Constants","text":"<p>integer CRYPT_DEFAULT</p> <p>integer CRYPT_STD_DES</p> <p>integer CRYPT_EXT_DES</p> <p>integer CRYPT_MD5</p> <p>integer CRYPT_BLOWFISH</p> <p>integer CRYPT_BLOWFISH_A</p> <p>integer CRYPT_BLOWFISH_X</p> <p>integer CRYPT_BLOWFISH_Y</p> <p>integer CRYPT_SHA256</p> <p>integer CRYPT_SHA512</p>"},{"location":"api/Phalcon_Security/#methods","title":"Methods","text":"<p>public  setWorkFactor (mixed $workFactor)</p> <p>...</p> <p>public  getWorkFactor ()</p> <p>...</p> <p>public  __construct ()</p> <p>Phalcon\\Security constructor</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the dependency injector</p> <p>public  getDI ()</p> <p>Returns the internal dependency injector</p> <p>public  setRandomBytes (mixed $randomBytes)</p> <p>Sets a number of bytes to be generated by the openssl pseudo random generator</p> <p>public  getRandomBytes ()</p> <p>Returns a number of bytes to be generated by the openssl pseudo random generator</p> <p>public  getRandom ()</p> <p>Returns a secure random number generator instance</p> <p>public  getSaltBytes ([mixed $numberBytes])</p> <p>Generate a &gt;22-length pseudo random string to be used as salt for passwords</p> <p>public  hash (mixed $password, [mixed $workFactor])</p> <p>Creates a password hash using bcrypt with a pseudo random salt</p> <p>public  checkHash (mixed $password, mixed $passwordHash, [mixed $maxPassLength])</p> <p>Checks a plain text password and its hash version to check if the password matches</p> <p>public  isLegacyHash (mixed $passwordHash)</p> <p>Checks if a password hash is a valid bcrypt's hash</p> <p>public  getTokenKey ()</p> <p>Generates a pseudo random token key to be used as input's name in a CSRF check</p> <p>public  getToken ()</p> <p>Generates a pseudo random token value to be used as input's value in a CSRF check</p> <p>public  checkToken ([mixed $tokenKey], [mixed $tokenValue], [mixed $destroyIfValid])</p> <p>Check if the CSRF token sent in the request is the same that the current in session</p> <p>public  getSessionToken ()</p> <p>Returns the value of the CSRF token in session</p> <p>public  destroyToken ()</p> <p>Removes the value of the CSRF token and key from session</p> <p>public  computeHmac (mixed $data, mixed $key, mixed $algo, [mixed $raw])</p> <p>Computes a HMAC</p> <p>public  setDefaultHash (mixed $defaultHash)</p> <p>Sets the default hash</p> <p>public  getDefaultHash ()</p> <p>Returns the default hash</p> <p>public  hasLibreSsl ()</p> <p>Testing for LibreSSL</p> <p>public  getSslVersionNumber ()</p> <p>Getting OpenSSL or LibreSSL version Parse OPENSSL_VERSION_TEXT because OPENSSL_VERSION_NUMBER is no use for LibreSSL.</p> <pre><code>&lt;?php\n\nif ($security-&gt;getSslVersionNumber() &gt;= 20105) {\n    // ...\n}\n</code></pre>"},{"location":"api/Phalcon_Security/#class-phalconsecurityexception","title":"Class Phalcon\\Security\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Security/#methods_1","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Security/#class-phalconsecurityrandom","title":"Class Phalcon\\Security\\Random","text":"<p>Source on GitHub</p> <p>Secure random number generator class.</p> <p>Provides secure random number generator which is suitable for generating session key in HTTP cookies, etc.</p> <p>It supports following secure random number generators:</p> <ul> <li>random_bytes (PHP 7)</li> <li>libsodium</li> <li>openssl, libressl</li> <li>/dev/urandom</li> </ul> <p><code>Phalcon\\Security\\Random</code> could be mainly useful for:</p> <ul> <li>Key generation (e.g. generation of complicated keys)</li> <li>Generating random passwords for new user accounts</li> <li>Encryption systems</li> </ul> <pre><code>&lt;?php\n\n$random = new \\Phalcon\\Security\\Random();\n\n// Random binary string\n$bytes = $random-&gt;bytes();\n\n// Random hex string\necho $random-&gt;hex(10); // a29f470508d5ccb8e289\necho $random-&gt;hex(10); // 533c2f08d5eee750e64a\necho $random-&gt;hex(11); // f362ef96cb9ffef150c9cd\necho $random-&gt;hex(12); // 95469d667475125208be45c4\necho $random-&gt;hex(13); // 05475e8af4a34f8f743ab48761\n\n// Random base62 string\necho $random-&gt;base62(); // z0RkwHfh8ErDM1xw\n\n// Random base64 string\necho $random-&gt;base64(12); // XfIN81jGGuKkcE1E\necho $random-&gt;base64(12); // 3rcq39QzGK9fUqh8\necho $random-&gt;base64();   // DRcfbngL/iOo9hGGvy1TcQ==\necho $random-&gt;base64(16); // SvdhPcIHDZFad838Bb0Swg==\n\n// Random URL-safe base64 string\necho $random-&gt;base64Safe();           // PcV6jGbJ6vfVw7hfKIFDGA\necho $random-&gt;base64Safe();           // GD8JojhzSTrqX7Q8J6uug\necho $random-&gt;base64Safe(8);          // mGyy0evy3ok\necho $random-&gt;base64Safe(null, true); // DRrAgOFkS4rvRiVHFefcQ==\n\n// Random UUID\necho $random-&gt;uuid(); // db082997-2572-4e2c-a046-5eefe97b1235\necho $random-&gt;uuid(); // da2aa0e2-b4d0-4e3c-99f5-f5ef62c57fe2\necho $random-&gt;uuid(); // 75e6b628-c562-4117-bb76-61c4153455a9\necho $random-&gt;uuid(); // dc446df1-0848-4d05-b501-4af3c220c13d\n\n// Random number between 0 and $len\necho $random-&gt;number(256); // 84\necho $random-&gt;number(256); // 79\necho $random-&gt;number(100); // 29\necho $random-&gt;number(300); // 40\n\n// Random base58 string\necho $random-&gt;base58();   // 4kUgL2pdQMSCQtjE\necho $random-&gt;base58();   // Umjxqf7ZPwh765yR\necho $random-&gt;base58(24); // qoXcgmw4A9dys26HaNEdCRj9\necho $random-&gt;base58(7);  // 774SJD3vgP\n</code></pre> <p>This class partially borrows SecureRandom library from Ruby</p>"},{"location":"api/Phalcon_Security/#methods_2","title":"Methods","text":"<p>public  bytes ([mixed $len])</p> <p>Generates a random binary string The <code>Random::bytes</code> method returns a string and accepts as input an int representing the length in bytes to be returned. If $len is not specified, 16 is assumed. It may be larger in future. The result may contain any byte: \"x00\" - \"xFF\".</p> <pre><code>&lt;?php\n\n$random = new \\Phalcon\\Security\\Random();\n\n$bytes = $random-&gt;bytes();\nvar_dump(bin2hex($bytes));\n// Possible output: string(32) \"00f6c04b144b41fad6a59111c126e1ee\"\n</code></pre> <p>public  hex ([mixed $len])</p> <p>Generates a random hex string If $len is not specified, 16 is assumed. It may be larger in future. The length of the result string is usually greater of $len.</p> <pre><code>&lt;?php\n\n$random = new \\Phalcon\\Security\\Random();\n\necho $random-&gt;hex(10); // a29f470508d5ccb8e289\n</code></pre> <p>public  base58 ([mixed $len])</p> <p>Generates a random base58 string If $len is not specified, 16 is assumed. It may be larger in future. The result may contain alphanumeric characters except 0, O, I and l. It is similar to <code>Phalcon\\Security\\Random:base64</code> but has been modified to avoid both non-alphanumeric characters and letters which might look ambiguous when printed.</p> <pre><code>&lt;?php\n\n$random = new \\Phalcon\\Security\\Random();\n\necho $random-&gt;base58(); // 4kUgL2pdQMSCQtjE\n</code></pre> <p>public  base62 ([mixed $len])</p> <p>Generates a random base62 string If $len is not specified, 16 is assumed. It may be larger in future. It is similar to <code>Phalcon\\Security\\Random:base58</code> but has been modified to provide the largest value that can safely be used in URLs without needing to take extra characters into consideration because it is [A-Za-z0-9].</p> <pre><code>&lt;?php\n\n$random = new \\Phalcon\\Security\\Random();\n\necho $random-&gt;base62(); // z0RkwHfh8ErDM1xw\n</code></pre> <p>public  base64 ([mixed $len])</p> <p>Generates a random base64 string If $len is not specified, 16 is assumed. It may be larger in future. The length of the result string is usually greater of $len. Size formula: 4 * ($len / 3) and this need to be rounded up to a multiple of 4.</p> <pre><code>&lt;?php\n\n$random = new \\Phalcon\\Security\\Random();\n\necho $random-&gt;base64(12); // 3rcq39QzGK9fUqh8\n</code></pre> <p>public  base64Safe ([mixed $len], [mixed $padding])</p> <p>Generates a random URL-safe base64 string If $len is not specified, 16 is assumed. It may be larger in future. The length of the result string is usually greater of $len. By default, padding is not generated because \"=\" may be used as a URL delimiter. The result may contain A-Z, a-z, 0-9, \"-\" and \"_\". \"=\" is also used if $padding is true. See RFC 3548 for the definition of URL-safe base64.</p> <pre><code>&lt;?php\n\n$random = new \\Phalcon\\Security\\Random();\n\necho $random-&gt;base64Safe(); // GD8JojhzSTrqX7Q8J6uug\n</code></pre> <p>public  uuid ()</p> <p>Generates a v4 random UUID (Universally Unique IDentifier) The version 4 UUID is purely random (except the version). It doesn't contain meaningful information such as MAC address, time, etc. See RFC 4122 for details of UUID. This algorithm sets the version number (4 bits) as well as two reserved bits. All other bits (the remaining 122 bits) are set using a random or pseudorandom data source. Version 4 UUIDs have the form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx where x is any hexadecimal digit and y is one of 8, 9, A, or B (e.g., f47ac10b-58cc-4372-a567-0e02b2c3d479).</p> <pre><code>&lt;?php\n\n$random = new \\Phalcon\\Security\\Random();\n\necho $random-&gt;uuid(); // 1378c906-64bb-4f81-a8d6-4ae1bfcdec22\n</code></pre> <p>public  number (mixed $len)</p> <p>Generates a random number between 0 and $len Returns an integer: 0 &lt;= result &lt;= $len.</p> <pre><code>&lt;?php\n\n$random = new \\Phalcon\\Security\\Random();\n\necho $random-&gt;number(16); // 8\n</code></pre> <p>protected  base (mixed $alphabet, mixed $base, [mixed $n])</p> <p>Generates a random string based on the number ($base) of characters ($alphabet). If $n is not specified, 16 is assumed. It may be larger in future.</p>"},{"location":"api/Phalcon_Session/","title":"Abstract class Phalcon\\Session\\Adapter","text":"<p>implements Phalcon\\Session\\AdapterInterface</p> <p>Source on GitHub</p> <p>Base class for Phalcon\\Session adapters</p>"},{"location":"api/Phalcon_Session/#constants","title":"Constants","text":"<p>integer SESSION_ACTIVE</p> <p>integer SESSION_NONE</p> <p>integer SESSION_DISABLED</p>"},{"location":"api/Phalcon_Session/#methods","title":"Methods","text":"<p>public  __construct ([array $options])</p> <p>Phalcon\\Session\\Adapter constructor</p> <p>public  start ()</p> <p>Starts the session (if headers are already sent the session will not be started)</p> <p>public  setOptions (array $options)</p> <p>Sets session's options</p> <pre><code>&lt;?php\n\n$session-&gt;setOptions(\n    [\n        \"uniqueId\" =&gt; \"my-private-app\",\n    ]\n);\n</code></pre> <p>public  getOptions ()</p> <p>Get internal options</p> <p>public  setName (mixed $name)</p> <p>Set session name</p> <p>public  getName ()</p> <p>Get session name</p> <p>public  regenerateId ([mixed $deleteOldSession])</p> <p>public  get (mixed $index, [mixed $defaultValue], [mixed $remove])</p> <p>Gets a session variable from an application context</p> <pre><code>&lt;?php\n\n$session-&gt;get(\"auth\", \"yes\");\n</code></pre> <p>public  set (mixed $index, mixed $value)</p> <p>Sets a session variable in an application context</p> <pre><code>&lt;?php\n\n$session-&gt;set(\"auth\", \"yes\");\n</code></pre> <p>public  has (mixed $index)</p> <p>Check whether a session variable is set in an application context</p> <pre><code>&lt;?php\n\nvar_dump(\n    $session-&gt;has(\"auth\")\n);\n</code></pre> <p>public  remove (mixed $index)</p> <p>Removes a session variable from an application context</p> <pre><code>&lt;?php\n\n$session-&gt;remove(\"auth\");\n</code></pre> <p>public  getId ()</p> <p>Returns active session id</p> <pre><code>&lt;?php\n\necho $session-&gt;getId();\n</code></pre> <p>public  setId (mixed $id)</p> <p>Set the current session id</p> <pre><code>&lt;?php\n\n$session-&gt;setId($id);\n</code></pre> <p>public  isStarted ()</p> <p>Check whether the session has been started</p> <pre><code>&lt;?php\n\nvar_dump(\n    $session-&gt;isStarted()\n);\n</code></pre> <p>public  destroy ([mixed $removeData])</p> <p>Destroys the active session</p> <pre><code>&lt;?php\n\nvar_dump(\n    $session-&gt;destroy()\n);\n\nvar_dump(\n    $session-&gt;destroy(true)\n);\n</code></pre> <p>public  status ()</p> <p>Returns the status of the current session.</p> <pre><code>&lt;?php\n\nvar_dump(\n    $session-&gt;status()\n);\n\nif ($session-&gt;status() !== $session::SESSION_ACTIVE) {\n    $session-&gt;start();\n}\n</code></pre> <p>public  __get (mixed $index)</p> <p>Alias: Gets a session variable from an application context</p> <p>public  __set (mixed $index, mixed $value)</p> <p>Alias: Sets a session variable in an application context</p> <p>public  __isset (mixed $index)</p> <p>Alias: Check whether a session variable is set in an application context</p> <p>public  __unset (mixed $index)</p> <p>Alias: Removes a session variable from an application context</p> <pre><code>&lt;?php\n\nunset($session-&gt;auth);\n</code></pre> <p>public  __destruct ()</p> <p>...</p> <p>protected  removeSessionData ()</p> <p>...</p>"},{"location":"api/Phalcon_Session/#class-phalconsessionadapterfiles","title":"Class Phalcon\\Session\\Adapter\\Files","text":"<p>extends abstract class Phalcon\\Session\\Adapter</p> <p>implements Phalcon\\Session\\AdapterInterface</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Session/#constants_1","title":"Constants","text":"<p>integer SESSION_ACTIVE</p> <p>integer SESSION_NONE</p> <p>integer SESSION_DISABLED</p>"},{"location":"api/Phalcon_Session/#methods_1","title":"Methods","text":"<p>public  __construct ([array $options]) inherited from Phalcon\\Session\\Adapter</p> <p>Phalcon\\Session\\Adapter constructor</p> <p>public  start () inherited from Phalcon\\Session\\Adapter</p> <p>Starts the session (if headers are already sent the session will not be started)</p> <p>public  setOptions (array $options) inherited from Phalcon\\Session\\Adapter</p> <p>Sets session's options</p> <pre><code>&lt;?php\n\n$session-&gt;setOptions(\n    [\n        \"uniqueId\" =&gt; \"my-private-app\",\n    ]\n);\n</code></pre> <p>public  getOptions () inherited from Phalcon\\Session\\Adapter</p> <p>Get internal options</p> <p>public  setName (mixed $name) inherited from Phalcon\\Session\\Adapter</p> <p>Set session name</p> <p>public  getName () inherited from Phalcon\\Session\\Adapter</p> <p>Get session name</p> <p>public  regenerateId ([mixed $deleteOldSession]) inherited from Phalcon\\Session\\Adapter</p> <p>public  get (mixed $index, [mixed $defaultValue], [mixed $remove]) inherited from Phalcon\\Session\\Adapter</p> <p>Gets a session variable from an application context</p> <pre><code>&lt;?php\n\n$session-&gt;get(\"auth\", \"yes\");\n</code></pre> <p>public  set (mixed $index, mixed $value) inherited from Phalcon\\Session\\Adapter</p> <p>Sets a session variable in an application context</p> <pre><code>&lt;?php\n\n$session-&gt;set(\"auth\", \"yes\");\n</code></pre> <p>public  has (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Check whether a session variable is set in an application context</p> <pre><code>&lt;?php\n\nvar_dump(\n    $session-&gt;has(\"auth\")\n);\n</code></pre> <p>public  remove (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Removes a session variable from an application context</p> <pre><code>&lt;?php\n\n$session-&gt;remove(\"auth\");\n</code></pre> <p>public  getId () inherited from Phalcon\\Session\\Adapter</p> <p>Returns active session id</p> <pre><code>&lt;?php\n\necho $session-&gt;getId();\n</code></pre> <p>public  setId (mixed $id) inherited from Phalcon\\Session\\Adapter</p> <p>Set the current session id</p> <pre><code>&lt;?php\n\n$session-&gt;setId($id);\n</code></pre> <p>public  isStarted () inherited from Phalcon\\Session\\Adapter</p> <p>Check whether the session has been started</p> <pre><code>&lt;?php\n\nvar_dump(\n    $session-&gt;isStarted()\n);\n</code></pre> <p>public  destroy ([mixed $removeData]) inherited from Phalcon\\Session\\Adapter</p> <p>Destroys the active session</p> <pre><code>&lt;?php\n\nvar_dump(\n    $session-&gt;destroy()\n);\n\nvar_dump(\n    $session-&gt;destroy(true)\n);\n</code></pre> <p>public  status () inherited from Phalcon\\Session\\Adapter</p> <p>Returns the status of the current session.</p> <pre><code>&lt;?php\n\nvar_dump(\n    $session-&gt;status()\n);\n\nif ($session-&gt;status() !== $session::SESSION_ACTIVE) {\n    $session-&gt;start();\n}\n</code></pre> <p>public  __get (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Alias: Gets a session variable from an application context</p> <p>public  __set (mixed $index, mixed $value) inherited from Phalcon\\Session\\Adapter</p> <p>Alias: Sets a session variable in an application context</p> <p>public  __isset (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Alias: Check whether a session variable is set in an application context</p> <p>public  __unset (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Alias: Removes a session variable from an application context</p> <pre><code>&lt;?php\n\nunset($session-&gt;auth);\n</code></pre> <p>public  __destruct () inherited from Phalcon\\Session\\Adapter</p> <p>...</p> <p>protected  removeSessionData () inherited from Phalcon\\Session\\Adapter</p> <p>...</p>"},{"location":"api/Phalcon_Session/#class-phalconsessionadapterlibmemcached","title":"Class Phalcon\\Session\\Adapter\\Libmemcached","text":"<p>extends abstract class Phalcon\\Session\\Adapter</p> <p>implements Phalcon\\Session\\AdapterInterface</p> <p>Source on GitHub</p> <p>This adapter store sessions in libmemcached</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Adapter\\Libmemcached;\n\n$session = new Libmemcached(\n    [\n        \"servers\" =&gt; [\n            [\n                \"host\"   =&gt; \"localhost\",\n                \"port\"   =&gt; 11211,\n                \"weight\" =&gt; 1,\n            ],\n        ],\n        \"client\" =&gt; [\n            \\Memcached::OPT_HASH       =&gt; \\Memcached::HASH_MD5,\n            \\Memcached::OPT_PREFIX_KEY =&gt; \"prefix.\",\n        ],\n        \"lifetime\" =&gt; 3600,\n        \"prefix\"   =&gt; \"my_\",\n    ]\n);\n\n$session-&gt;start();\n\n$session-&gt;set(\"var\", \"some-value\");\n\necho $session-&gt;get(\"var\");\n</code></pre>"},{"location":"api/Phalcon_Session/#constants_2","title":"Constants","text":"<p>integer SESSION_ACTIVE</p> <p>integer SESSION_NONE</p> <p>integer SESSION_DISABLED</p>"},{"location":"api/Phalcon_Session/#methods_2","title":"Methods","text":"<p>public  getLibmemcached ()</p> <p>...</p> <p>public  getLifetime ()</p> <p>...</p> <p>public  __construct (array $options)</p> <p>Phalcon\\Session\\Adapter\\Libmemcached constructor</p> <p>public  open ()</p> <p>...</p> <p>public  close ()</p> <p>...</p> <p>public  read (mixed $sessionId)</p> <p>public  write (mixed $sessionId, mixed $data)</p> <p>public  destroy ([mixed $sessionId])</p> <p>public  gc ()</p> <p>public  start () inherited from Phalcon\\Session\\Adapter</p> <p>Starts the session (if headers are already sent the session will not be started)</p> <p>public  setOptions (array $options) inherited from Phalcon\\Session\\Adapter</p> <p>Sets session's options</p> <pre><code>&lt;?php\n\n$session-&gt;setOptions(\n    [\n        \"uniqueId\" =&gt; \"my-private-app\",\n    ]\n);\n</code></pre> <p>public  getOptions () inherited from Phalcon\\Session\\Adapter</p> <p>Get internal options</p> <p>public  setName (mixed $name) inherited from Phalcon\\Session\\Adapter</p> <p>Set session name</p> <p>public  getName () inherited from Phalcon\\Session\\Adapter</p> <p>Get session name</p> <p>public  regenerateId ([mixed $deleteOldSession]) inherited from Phalcon\\Session\\Adapter</p> <p>public  get (mixed $index, [mixed $defaultValue], [mixed $remove]) inherited from Phalcon\\Session\\Adapter</p> <p>Gets a session variable from an application context</p> <pre><code>&lt;?php\n\n$session-&gt;get(\"auth\", \"yes\");\n</code></pre> <p>public  set (mixed $index, mixed $value) inherited from Phalcon\\Session\\Adapter</p> <p>Sets a session variable in an application context</p> <pre><code>&lt;?php\n\n$session-&gt;set(\"auth\", \"yes\");\n</code></pre> <p>public  has (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Check whether a session variable is set in an application context</p> <pre><code>&lt;?php\n\nvar_dump(\n    $session-&gt;has(\"auth\")\n);\n</code></pre> <p>public  remove (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Removes a session variable from an application context</p> <pre><code>&lt;?php\n\n$session-&gt;remove(\"auth\");\n</code></pre> <p>public  getId () inherited from Phalcon\\Session\\Adapter</p> <p>Returns active session id</p> <pre><code>&lt;?php\n\necho $session-&gt;getId();\n</code></pre> <p>public  setId (mixed $id) inherited from Phalcon\\Session\\Adapter</p> <p>Set the current session id</p> <pre><code>&lt;?php\n\n$session-&gt;setId($id);\n</code></pre> <p>public  isStarted () inherited from Phalcon\\Session\\Adapter</p> <p>Check whether the session has been started</p> <pre><code>&lt;?php\n\nvar_dump(\n    $session-&gt;isStarted()\n);\n</code></pre> <p>public  status () inherited from Phalcon\\Session\\Adapter</p> <p>Returns the status of the current session.</p> <pre><code>&lt;?php\n\nvar_dump(\n    $session-&gt;status()\n);\n\nif ($session-&gt;status() !== $session::SESSION_ACTIVE) {\n    $session-&gt;start();\n}\n</code></pre> <p>public  __get (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Alias: Gets a session variable from an application context</p> <p>public  __set (mixed $index, mixed $value) inherited from Phalcon\\Session\\Adapter</p> <p>Alias: Sets a session variable in an application context</p> <p>public  __isset (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Alias: Check whether a session variable is set in an application context</p> <p>public  __unset (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Alias: Removes a session variable from an application context</p> <pre><code>&lt;?php\n\nunset($session-&gt;auth);\n</code></pre> <p>public  __destruct () inherited from Phalcon\\Session\\Adapter</p> <p>...</p> <p>protected  removeSessionData () inherited from Phalcon\\Session\\Adapter</p> <p>...</p>"},{"location":"api/Phalcon_Session/#class-phalconsessionadaptermemcache","title":"Class Phalcon\\Session\\Adapter\\Memcache","text":"<p>extends abstract class Phalcon\\Session\\Adapter</p> <p>implements Phalcon\\Session\\AdapterInterface</p> <p>Source on GitHub</p> <p>This adapter store sessions in memcache</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Adapter\\Memcache;\n\n$session = new Memcache(\n    [\n        \"uniqueId\"   =&gt; \"my-private-app\",\n        \"host\"       =&gt; \"127.0.0.1\",\n        \"port\"       =&gt; 11211,\n        \"persistent\" =&gt; true,\n        \"lifetime\"   =&gt; 3600,\n        \"prefix\"     =&gt; \"my_\",\n    ]\n);\n\n$session-&gt;start();\n\n$session-&gt;set(\"var\", \"some-value\");\n\necho $session-&gt;get(\"var\");\n</code></pre>"},{"location":"api/Phalcon_Session/#constants_3","title":"Constants","text":"<p>integer SESSION_ACTIVE</p> <p>integer SESSION_NONE</p> <p>integer SESSION_DISABLED</p>"},{"location":"api/Phalcon_Session/#methods_3","title":"Methods","text":"<p>public  getMemcache ()</p> <p>...</p> <p>public  getLifetime ()</p> <p>...</p> <p>public  __construct ([array $options])</p> <p>Phalcon\\Session\\Adapter\\Memcache constructor</p> <p>public  open ()</p> <p>...</p> <p>public  close ()</p> <p>...</p> <p>public  read (mixed $sessionId)</p> <p>public  write (mixed $sessionId, mixed $data)</p> <p>public  destroy ([mixed $sessionId])</p> <p>public  gc ()</p> <p>public  start () inherited from Phalcon\\Session\\Adapter</p> <p>Starts the session (if headers are already sent the session will not be started)</p> <p>public  setOptions (array $options) inherited from Phalcon\\Session\\Adapter</p> <p>Sets session's options</p> <pre><code>&lt;?php\n\n$session-&gt;setOptions(\n    [\n        \"uniqueId\" =&gt; \"my-private-app\",\n    ]\n);\n</code></pre> <p>public  getOptions () inherited from Phalcon\\Session\\Adapter</p> <p>Get internal options</p> <p>public  setName (mixed $name) inherited from Phalcon\\Session\\Adapter</p> <p>Set session name</p> <p>public  getName () inherited from Phalcon\\Session\\Adapter</p> <p>Get session name</p> <p>public  regenerateId ([mixed $deleteOldSession]) inherited from Phalcon\\Session\\Adapter</p> <p>public  get (mixed $index, [mixed $defaultValue], [mixed $remove]) inherited from Phalcon\\Session\\Adapter</p> <p>Gets a session variable from an application context</p> <pre><code>&lt;?php\n\n$session-&gt;get(\"auth\", \"yes\");\n</code></pre> <p>public  set (mixed $index, mixed $value) inherited from Phalcon\\Session\\Adapter</p> <p>Sets a session variable in an application context</p> <pre><code>&lt;?php\n\n$session-&gt;set(\"auth\", \"yes\");\n</code></pre> <p>public  has (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Check whether a session variable is set in an application context</p> <pre><code>&lt;?php\n\nvar_dump(\n    $session-&gt;has(\"auth\")\n);\n</code></pre> <p>public  remove (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Removes a session variable from an application context</p> <pre><code>&lt;?php\n\n$session-&gt;remove(\"auth\");\n</code></pre> <p>public  getId () inherited from Phalcon\\Session\\Adapter</p> <p>Returns active session id</p> <pre><code>&lt;?php\n\necho $session-&gt;getId();\n</code></pre> <p>public  setId (mixed $id) inherited from Phalcon\\Session\\Adapter</p> <p>Set the current session id</p> <pre><code>&lt;?php\n\n$session-&gt;setId($id);\n</code></pre> <p>public  isStarted () inherited from Phalcon\\Session\\Adapter</p> <p>Check whether the session has been started</p> <pre><code>&lt;?php\n\nvar_dump(\n    $session-&gt;isStarted()\n);\n</code></pre> <p>public  status () inherited from Phalcon\\Session\\Adapter</p> <p>Returns the status of the current session.</p> <pre><code>&lt;?php\n\nvar_dump(\n    $session-&gt;status()\n);\n\nif ($session-&gt;status() !== $session::SESSION_ACTIVE) {\n    $session-&gt;start();\n}\n</code></pre> <p>public  __get (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Alias: Gets a session variable from an application context</p> <p>public  __set (mixed $index, mixed $value) inherited from Phalcon\\Session\\Adapter</p> <p>Alias: Sets a session variable in an application context</p> <p>public  __isset (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Alias: Check whether a session variable is set in an application context</p> <p>public  __unset (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Alias: Removes a session variable from an application context</p> <pre><code>&lt;?php\n\nunset($session-&gt;auth);\n</code></pre> <p>public  __destruct () inherited from Phalcon\\Session\\Adapter</p> <p>...</p> <p>protected  removeSessionData () inherited from Phalcon\\Session\\Adapter</p> <p>...</p>"},{"location":"api/Phalcon_Session/#class-phalconsessionadapterredis","title":"Class Phalcon\\Session\\Adapter\\Redis","text":"<p>extends abstract class Phalcon\\Session\\Adapter</p> <p>implements Phalcon\\Session\\AdapterInterface</p> <p>Source on GitHub</p> <p>This adapter store sessions in Redis</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Adapter\\Redis;\n\n$session = new Redis(\n    [\n        \"uniqueId\"   =&gt; \"my-private-app\",\n        \"host\"       =&gt; \"localhost\",\n        \"port\"       =&gt; 6379,\n        \"auth\"       =&gt; \"foobared\",\n        \"persistent\" =&gt; false,\n        \"lifetime\"   =&gt; 3600,\n        \"prefix\"     =&gt; \"my\",\n        \"index\"      =&gt; 1,\n    ]\n);\n\n$session-&gt;start();\n\n$session-&gt;set(\"var\", \"some-value\");\n\necho $session-&gt;get(\"var\");\n</code></pre>"},{"location":"api/Phalcon_Session/#constants_4","title":"Constants","text":"<p>integer SESSION_ACTIVE</p> <p>integer SESSION_NONE</p> <p>integer SESSION_DISABLED</p>"},{"location":"api/Phalcon_Session/#methods_4","title":"Methods","text":"<p>public  getRedis ()</p> <p>...</p> <p>public  getLifetime ()</p> <p>...</p> <p>public  __construct ([array $options])</p> <p>Phalcon\\Session\\Adapter\\Redis constructor</p> <p>public  open ()</p> <p>public  close ()</p> <p>public  read (mixed $sessionId)</p> <p>public  write (mixed $sessionId, mixed $data)</p> <p>public  destroy ([mixed $sessionId])</p> <p>public  gc ()</p> <p>public  start () inherited from Phalcon\\Session\\Adapter</p> <p>Starts the session (if headers are already sent the session will not be started)</p> <p>public  setOptions (array $options) inherited from Phalcon\\Session\\Adapter</p> <p>Sets session's options</p> <pre><code>&lt;?php\n\n$session-&gt;setOptions(\n    [\n        \"uniqueId\" =&gt; \"my-private-app\",\n    ]\n);\n</code></pre> <p>public  getOptions () inherited from Phalcon\\Session\\Adapter</p> <p>Get internal options</p> <p>public  setName (mixed $name) inherited from Phalcon\\Session\\Adapter</p> <p>Set session name</p> <p>public  getName () inherited from Phalcon\\Session\\Adapter</p> <p>Get session name</p> <p>public  regenerateId ([mixed $deleteOldSession]) inherited from Phalcon\\Session\\Adapter</p> <p>public  get (mixed $index, [mixed $defaultValue], [mixed $remove]) inherited from Phalcon\\Session\\Adapter</p> <p>Gets a session variable from an application context</p> <pre><code>&lt;?php\n\n$session-&gt;get(\"auth\", \"yes\");\n</code></pre> <p>public  set (mixed $index, mixed $value) inherited from Phalcon\\Session\\Adapter</p> <p>Sets a session variable in an application context</p> <pre><code>&lt;?php\n\n$session-&gt;set(\"auth\", \"yes\");\n</code></pre> <p>public  has (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Check whether a session variable is set in an application context</p> <pre><code>&lt;?php\n\nvar_dump(\n    $session-&gt;has(\"auth\")\n);\n</code></pre> <p>public  remove (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Removes a session variable from an application context</p> <pre><code>&lt;?php\n\n$session-&gt;remove(\"auth\");\n</code></pre> <p>public  getId () inherited from Phalcon\\Session\\Adapter</p> <p>Returns active session id</p> <pre><code>&lt;?php\n\necho $session-&gt;getId();\n</code></pre> <p>public  setId (mixed $id) inherited from Phalcon\\Session\\Adapter</p> <p>Set the current session id</p> <pre><code>&lt;?php\n\n$session-&gt;setId($id);\n</code></pre> <p>public  isStarted () inherited from Phalcon\\Session\\Adapter</p> <p>Check whether the session has been started</p> <pre><code>&lt;?php\n\nvar_dump(\n    $session-&gt;isStarted()\n);\n</code></pre> <p>public  status () inherited from Phalcon\\Session\\Adapter</p> <p>Returns the status of the current session.</p> <pre><code>&lt;?php\n\nvar_dump(\n    $session-&gt;status()\n);\n\nif ($session-&gt;status() !== $session::SESSION_ACTIVE) {\n    $session-&gt;start();\n}\n</code></pre> <p>public  __get (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Alias: Gets a session variable from an application context</p> <p>public  __set (mixed $index, mixed $value) inherited from Phalcon\\Session\\Adapter</p> <p>Alias: Sets a session variable in an application context</p> <p>public  __isset (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Alias: Check whether a session variable is set in an application context</p> <p>public  __unset (mixed $index) inherited from Phalcon\\Session\\Adapter</p> <p>Alias: Removes a session variable from an application context</p> <pre><code>&lt;?php\n\nunset($session-&gt;auth);\n</code></pre> <p>public  __destruct () inherited from Phalcon\\Session\\Adapter</p> <p>...</p> <p>protected  removeSessionData () inherited from Phalcon\\Session\\Adapter</p> <p>...</p>"},{"location":"api/Phalcon_Session/#interface-phalconsessionadapterinterface","title":"Interface Phalcon\\Session\\AdapterInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Session/#methods_5","title":"Methods","text":"<p>abstract public  start ()</p> <p>...</p> <p>abstract public  setOptions (array $options)</p> <p>...</p> <p>abstract public  getOptions ()</p> <p>...</p> <p>abstract public  get (mixed $index, [mixed $defaultValue])</p> <p>...</p> <p>abstract public  set (mixed $index, mixed $value)</p> <p>...</p> <p>abstract public  has (mixed $index)</p> <p>...</p> <p>abstract public  remove (mixed $index)</p> <p>...</p> <p>abstract public  getId ()</p> <p>...</p> <p>abstract public  isStarted ()</p> <p>...</p> <p>abstract public  destroy ([mixed $removeData])</p> <p>...</p> <p>abstract public  regenerateId ([mixed $deleteOldSession])</p> <p>...</p> <p>abstract public  setName (mixed $name)</p> <p>...</p> <p>abstract public  getName ()</p> <p>...</p>"},{"location":"api/Phalcon_Session/#class-phalconsessionbag","title":"Class Phalcon\\Session\\Bag","text":"<p>implements Phalcon\\Di\\InjectionAwareInterface, Phalcon\\Session\\BagInterface, IteratorAggregate, Traversable, ArrayAccess, Countable</p> <p>Source on GitHub</p> <p>This component helps to separate session data into \"namespaces\". Working by this way you can easily create groups of session variables into the application</p> <pre><code>&lt;?php\n\n$user = new \\Phalcon\\Session\\Bag(\"user\");\n\n$user-&gt;name = \"Kimbra Johnson\";\n$user-&gt;age  = 22;\n</code></pre>"},{"location":"api/Phalcon_Session/#methods_6","title":"Methods","text":"<p>public  __construct (mixed $name)</p> <p>Phalcon\\Session\\Bag constructor</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the DependencyInjector container</p> <p>public  getDI ()</p> <p>Returns the DependencyInjector container</p> <p>public  initialize ()</p> <p>Initializes the session bag. This method must not be called directly, the class calls it when its internal data is accessed</p> <p>public  destroy ()</p> <p>Destroys the session bag</p> <pre><code>&lt;?php\n\n$user-&gt;destroy();\n</code></pre> <p>public  set (mixed $property, mixed $value)</p> <p>Sets a value in the session bag</p> <pre><code>&lt;?php\n\n$user-&gt;set(\"name\", \"Kimbra\");\n</code></pre> <p>public  __set (mixed $property, mixed $value)</p> <p>Magic setter to assign values to the session bag</p> <pre><code>&lt;?php\n\n$user-&gt;name = \"Kimbra\";\n</code></pre> <p>public  get (mixed $property, [mixed $defaultValue])</p> <p>Obtains a value from the session bag optionally setting a default value</p> <pre><code>&lt;?php\n\necho $user-&gt;get(\"name\", \"Kimbra\");\n</code></pre> <p>public  __get (mixed $property)</p> <p>Magic getter to obtain values from the session bag</p> <pre><code>&lt;?php\n\necho $user-&gt;name;\n</code></pre> <p>public  has (mixed $property)</p> <p>Check whether a property is defined in the internal bag</p> <pre><code>&lt;?php\n\nvar_dump(\n    $user-&gt;has(\"name\")\n);\n</code></pre> <p>public  __isset (mixed $property)</p> <p>Magic isset to check whether a property is defined in the bag</p> <pre><code>&lt;?php\n\nvar_dump(\n    isset($user[\"name\"])\n);\n</code></pre> <p>public  remove (mixed $property)</p> <p>Removes a property from the internal bag</p> <pre><code>&lt;?php\n\n$user-&gt;remove(\"name\");\n</code></pre> <p>public  __unset (mixed $property)</p> <p>Magic unset to remove items using the array syntax</p> <pre><code>&lt;?php\n\nunset($user[\"name\"]);\n</code></pre> <p>final public  count ()</p> <p>Return length of bag</p> <pre><code>&lt;?php\n\necho $user-&gt;count();\n</code></pre> <p>final public  getIterator ()</p> <p>Returns the bag iterator</p> <p>final public  offsetSet (mixed $property, mixed $value)</p> <p>...</p> <p>final public  offsetExists (mixed $property)</p> <p>...</p> <p>final public  offsetUnset (mixed $property)</p> <p>...</p> <p>final public  offsetGet (mixed $property)</p> <p>...</p>"},{"location":"api/Phalcon_Session/#interface-phalconsessionbaginterface","title":"Interface Phalcon\\Session\\BagInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Session/#methods_7","title":"Methods","text":"<p>abstract public  initialize ()</p> <p>...</p> <p>abstract public  destroy ()</p> <p>...</p> <p>abstract public  set (mixed $property, mixed $value)</p> <p>...</p> <p>abstract public  get (mixed $property, [mixed $defaultValue])</p> <p>...</p> <p>abstract public  has (mixed $property)</p> <p>...</p> <p>abstract public  __set (mixed $property, mixed $value)</p> <p>...</p> <p>abstract public  __get (mixed $property)</p> <p>...</p> <p>abstract public  __isset (mixed $property)</p> <p>...</p>"},{"location":"api/Phalcon_Session/#class-phalconsessionexception","title":"Class Phalcon\\Session\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Session/#methods_8","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Session/#class-phalconsessionfactory","title":"Class Phalcon\\Session\\Factory","text":"<p>extends abstract class Phalcon\\Factory</p> <p>implements Phalcon\\FactoryInterface</p> <p>Source on GitHub</p> <p>Loads Session Adapter class using 'adapter' option</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Factory;\n\n$options = [\n    \"uniqueId\"   =&gt; \"my-private-app\",\n    \"host\"       =&gt; \"127.0.0.1\",\n    \"port\"       =&gt; 11211,\n    \"persistent\" =&gt; true,\n    \"lifetime\"   =&gt; 3600,\n    \"prefix\"     =&gt; \"my_\",\n    \"adapter\"    =&gt; \"memcache\",\n];\n$session = Factory::load($options);\n</code></pre>"},{"location":"api/Phalcon_Session/#methods_9","title":"Methods","text":"<p>public static  load (Phalcon\\Config | array $config)</p> <p>protected static  loadClass (mixed $namespace, mixed $config) inherited from Phalcon\\Factory</p> <p>...</p>"},{"location":"api/Phalcon_Tag/","title":"Class Phalcon\\Tag","text":"<p>Source on GitHub</p> <p>Phalcon\\Tag is designed to simplify building of HTML tags. It provides a set of helpers to generate HTML in a dynamic way. This component is an abstract class that you can extend to add more helpers.</p>"},{"location":"api/Phalcon_Tag/#constants","title":"Constants","text":"<p>integer HTML32</p> <p>integer HTML401_STRICT</p> <p>integer HTML401_TRANSITIONAL</p> <p>integer HTML401_FRAMESET</p> <p>integer HTML5</p> <p>integer XHTML10_STRICT</p> <p>integer XHTML10_TRANSITIONAL</p> <p>integer XHTML10_FRAMESET</p> <p>integer XHTML11</p> <p>integer XHTML20</p> <p>integer XHTML5</p>"},{"location":"api/Phalcon_Tag/#methods","title":"Methods","text":"<p>public static EscaperInterface getEscaper (array $params)</p> <p>Obtains the 'escaper' service if required</p> <p>public static  renderAttributes (mixed $code, array $attributes)</p> <p>Renders parameters keeping order in their HTML attributes</p> <p>public static  setDI (Phalcon\\DiInterface $dependencyInjector)</p> <p>Sets the dependency injector container.</p> <p>public static  getDI ()</p> <p>Internally gets the request dispatcher</p> <p>public static  getUrlService ()</p> <p>Returns a URL service from the default DI</p> <p>public static  getEscaperService ()</p> <p>Returns an Escaper service from the default DI</p> <p>public static  setAutoescape (mixed $autoescape)</p> <p>Set autoescape mode in generated html</p> <p>public static  setDefault (string $id, string $value)</p> <p>Assigns default values to generated tags by helpers</p> <pre><code>&lt;?php\n\n// Assigning \"peter\" to \"name\" component\nPhalcon\\Tag::setDefault(\"name\", \"peter\");\n\n// Later in the view\necho Phalcon\\Tag::textField(\"name\"); // Will have the value \"peter\" by default\n</code></pre> <p>public static  setDefaults (array $values, [mixed $merge])</p> <p>Assigns default values to generated tags by helpers</p> <pre><code>&lt;?php\n\n// Assigning \"peter\" to \"name\" component\nPhalcon\\Tag::setDefaults(\n    [\n        \"name\" =&gt; \"peter\",\n    ]\n);\n\n// Later in the view\necho Phalcon\\Tag::textField(\"name\"); // Will have the value \"peter\" by default\n</code></pre> <p>public static  displayTo (string $id, string $value)</p> <p>Alias of Phalcon\\Tag::setDefault</p> <p>public static boolean hasValue (string $name)</p> <p>Check if a helper has a default value set using Phalcon\\Tag::setDefault or value from $_POST</p> <p>public static mixed getValue (string $name, [array $params])</p> <p>Every helper calls this function to check whether a component has a predefined value using Phalcon\\Tag::setDefault or value from $_POST</p> <p>public static  resetInput ()</p> <p>Resets the request and internal values to avoid those fields will have any default value.</p> <p>public static  linkTo (array | string $parameters, [string $text], [boolean $local])</p> <p>Builds a HTML A tag using framework conventions</p> <pre><code>&lt;?php\n\necho Phalcon\\Tag::linkTo(\"signup/register\", \"Register Here!\");\n\necho Phalcon\\Tag::linkTo(\n    [\n        \"signup/register\",\n        \"Register Here!\"\n    ]\n);\n\necho Phalcon\\Tag::linkTo(\n    [\n        \"signup/register\",\n        \"Register Here!\",\n        \"class\" =&gt; \"btn-primary\",\n    ]\n);\n\necho Phalcon\\Tag::linkTo(\"https://phalcon.io/\", \"Phalcon\", false);\n\necho Phalcon\\Tag::linkTo(\n    [\n        \"https://phalcon.io/\",\n        \"Phalcon Home\",\n        false,\n    ]\n);\n\necho Phalcon\\Tag::linkTo(\n    [\n        \"https://phalcon.io/\",\n        \"Phalcon Home\",\n        \"local\" =&gt; false,\n    ]\n);\n\necho Phalcon\\Tag::linkTo(\n    [\n        \"action\" =&gt; \"https://phalcon.io/\",\n        \"text\"   =&gt; \"Phalcon Home\",\n        \"local\"  =&gt; false,\n        \"target\" =&gt; \"_new\"\n    ]\n);\n</code></pre> <p>final protected static string _inputField (string $type, array $parameters, [boolean $asValue])</p> <p>Builds generic INPUT tags</p> <p>final protected static string _inputFieldChecked (string $type, array $parameters)</p> <p>Builds INPUT tags that implements the checked attribute</p> <p>public static string colorField (array $parameters)</p> <p>Builds a HTML input[type=\"color\"] tag</p> <p>public static string textField (array $parameters)</p> <p>Builds a HTML input[type=\"text\"] tag</p> <pre><code>&lt;?php\n\necho Phalcon\\Tag::textField(\n    [\n        \"name\",\n        \"size\" =&gt; 30,\n    ]\n);\n</code></pre> <p>public static string numericField (array $parameters)</p> <p>Builds a HTML input[type=\"number\"] tag</p> <pre><code>&lt;?php\n\necho Phalcon\\Tag::numericField(\n    [\n        \"price\",\n        \"min\" =&gt; \"1\",\n        \"max\" =&gt; \"5\",\n    ]\n);\n</code></pre> <p>public static string rangeField (array $parameters)</p> <p>Builds a HTML input[type=\"range\"] tag</p> <p>public static string emailField (array $parameters)</p> <p>Builds a HTML input[type=\"email\"] tag</p> <pre><code>&lt;?php\n\necho Phalcon\\Tag::emailField(\"email\");\n</code></pre> <p>public static string dateField (array $parameters)</p> <p>Builds a HTML input[type=\"date\"] tag</p> <pre><code>&lt;?php\n\necho Phalcon\\Tag::dateField(\n    [\n        \"born\",\n        \"value\" =&gt; \"14-12-1980\",\n    ]\n);\n</code></pre> <p>public static string dateTimeField (array $parameters)</p> <p>Builds a HTML input[type=\"datetime\"] tag</p> <p>public static string dateTimeLocalField (array $parameters)</p> <p>Builds a HTML input[type=\"datetime-local\"] tag</p> <p>public static string monthField (array $parameters)</p> <p>Builds a HTML input[type=\"month\"] tag</p> <p>public static string timeField (array $parameters)</p> <p>Builds a HTML input[type=\"time\"] tag</p> <p>public static string weekField (array $parameters)</p> <p>Builds a HTML input[type=\"week\"] tag</p> <p>public static string passwordField (array $parameters)</p> <p>Builds a HTML input[type=\"password\"] tag</p> <pre><code>&lt;?php\n\necho Phalcon\\Tag::passwordField(\n    [\n        \"name\",\n        \"size\" =&gt; 30,\n    ]\n);\n</code></pre> <p>public static string hiddenField (array $parameters)</p> <p>Builds a HTML input[type=\"hidden\"] tag</p> <pre><code>&lt;?php\n\necho Phalcon\\Tag::hiddenField(\n    [\n        \"name\",\n        \"value\" =&gt; \"mike\",\n    ]\n);\n</code></pre> <p>public static string fileField (array $parameters)</p> <p>Builds a HTML input[type=\"file\"] tag</p> <pre><code>&lt;?php\n\necho Phalcon\\Tag::fileField(\"file\");\n</code></pre> <p>public static string searchField (array $parameters)</p> <p>Builds a HTML input[type=\"search\"] tag</p> <p>public static string telField (array $parameters)</p> <p>Builds a HTML input[type=\"tel\"] tag</p> <p>public static string urlField (array $parameters)</p> <p>Builds a HTML input[type=\"url\"] tag</p> <p>public static string checkField (array $parameters)</p> <p>Builds a HTML input[type=\"check\"] tag</p> <p><pre><code>&lt;?php\n\necho Phalcon\\Tag::checkField(\n    [\n        \"terms\",\n        \"value\" =&gt; \"Y\",\n    ]\n);\n</code></pre> Volt syntax:</p> <pre><code>&lt;?php\n\n{% raw %}{{ check_field(\"terms\") }}{% endraw %}\n</code></pre> <p>public static string radioField (array $parameters)</p> <p>Builds a HTML input[type=\"radio\"] tag</p> <p><pre><code>&lt;?php\n\necho Phalcon\\Tag::radioField(\n    [\n        \"weather\",\n        \"value\" =&gt; \"hot\",\n    ]\n);\n</code></pre> Volt syntax:</p> <pre><code>&lt;?php\n\n{% raw %}{{ radio_field(\"Save\") }}{% endraw %}\n</code></pre> <p>public static string imageInput (array $parameters)</p> <p>Builds a HTML input[type=\"image\"] tag</p> <p><pre><code>&lt;?php\n\necho Phalcon\\Tag::imageInput(\n    [\n        \"src\" =&gt; \"/img/button.png\",\n    ]\n);\n</code></pre> Volt syntax:</p> <pre><code>&lt;?php\n\n{% raw %}{{ image_input(\"src\": \"/img/button.png\") }}{% endraw %}\n</code></pre> <p>public static string submitButton (array $parameters)</p> <p>Builds a HTML input[type=\"submit\"] tag</p> <p><pre><code>&lt;?php\n\necho Phalcon\\Tag::submitButton(\"Save\")\n</code></pre> Volt syntax:</p> <pre><code>&lt;?php\n\n{% raw %}{{ submit_button(\"Save\") }}{% endraw %}\n</code></pre> <p>public static string selectStatic (array $parameters, [array $data])</p> <p>Builds a HTML SELECT tag using a PHP array for options</p> <pre><code>&lt;?php\n\necho Phalcon\\Tag::selectStatic(\n    \"status\",\n    [\n        \"A\" =&gt; \"Active\",\n        \"I\" =&gt; \"Inactive\",\n    ]\n);\n</code></pre> <p>public static string select (array $parameters, [array $data])</p> <p>Builds a HTML SELECT tag using a Phalcon\\Mvc\\Model resultset as options</p> <p><pre><code>&lt;?php\n\necho Phalcon\\Tag::select(\n    [\n        \"robotId\",\n        Robots::find(\"type = \"mechanical\"\"),\n        \"using\" =&gt; [\"id\", \"name\"],\n    ]\n);\n</code></pre> Volt syntax:</p> <pre><code>&lt;?php\n\n{% raw %}{{ select(\"robotId\", robots, \"using\": [\"id\", \"name\"]) }}{% endraw %}\n</code></pre> <p>public static string textArea (array $parameters)</p> <p>Builds a HTML TEXTAREA tag</p> <p><pre><code>&lt;?php\n\necho Phalcon\\Tag::textArea(\n    [\n        \"comments\",\n        \"cols\" =&gt; 10,\n        \"rows\" =&gt; 4,\n    ]\n);\n</code></pre> Volt syntax:</p> <pre><code>&lt;?php\n\n{% raw %}{{ text_area(\"comments\", \"cols\": 10, \"rows\": 4) }}{% endraw %}\n</code></pre> <p>public static string form (array $parameters)</p> <p>Builds a HTML FORM tag</p> <p><pre><code>&lt;?php\n\necho Phalcon\\Tag::form(\"posts/save\");\n\necho Phalcon\\Tag::form(\n    [\n        \"posts/save\",\n        \"method\" =&gt; \"post\",\n    ]\n);\n</code></pre> Volt syntax:</p> <pre><code>&lt;?php\n\n{% raw %}{{ form(\"posts/save\") }}{% endraw %}\n{% raw %}{{ form(\"posts/save\", \"method\": \"post\") }}{% endraw %}\n</code></pre> <p>public static  endForm ()</p> <p>Builds a HTML close FORM tag</p> <p>public static  setTitle (mixed $title)</p> <p>Set the title of view content</p> <pre><code>&lt;?php\n\nPhalcon\\Tag::setTitle(\"Welcome to my Page\");\n</code></pre> <p>public static  setTitleSeparator (mixed $titleSeparator)</p> <p>Set the title separator of view content</p> <pre><code>&lt;?php\n\nPhalcon\\Tag::setTitleSeparator(\"-\");\n</code></pre> <p>public static  appendTitle (mixed $title)</p> <p>Appends a text to current document title</p> <p>public static  prependTitle (mixed $title)</p> <p>Prepends a text to current document title</p> <p>public static  getTitle ([mixed $tags])</p> <p>Gets the current document title. The title will be automatically escaped.</p> <pre><code>&lt;?php\n\necho Phalcon\\Tag::getTitle();\n</code></pre> <pre><code>&lt;?php\n\n{% raw %}{{ get_title() }}{% endraw %}\n</code></pre> <p>public static  getTitleSeparator ()</p> <p>Gets the current document title separator</p> <pre><code>&lt;?php\n\necho Phalcon\\Tag::getTitleSeparator();\n</code></pre> <pre><code>&lt;?php\n\n{% raw %}{{ get_title_separator() }}{% endraw %}\n</code></pre> <p>public static string stylesheetLink ([array $parameters], [boolean $local])</p> <p>Builds a LINK[rel=\"stylesheet\"] tag</p> <p><pre><code>&lt;?php\n\necho Phalcon\\Tag::stylesheetLink(\"https://fonts.googleapis.com/css?family=Rosario\", false);\necho Phalcon\\Tag::stylesheetLink(\"css/style.css\");\n</code></pre> Volt Syntax:</p> <pre><code>&lt;?php\n\n{% raw %}{{ stylesheet_link(\"https://fonts.googleapis.com/css?family=Rosario\", false) }}{% endraw %}\n{% raw %}{{ stylesheet_link(\"css/style.css\") }}{% endraw %}\n</code></pre> <p>public static string javascriptInclude ([array $parameters], [boolean $local])</p> <p>Builds a SCRIPT[type=\"javascript\"] tag</p> <p><pre><code>&lt;?php\n\necho Phalcon\\Tag::javascriptInclude(\"https://ajax.googleapis.com/ajax/libs/jquery/2.2.3/jquery.min.js\", false);\necho Phalcon\\Tag::javascriptInclude(\"javascript/jquery.js\");\n</code></pre> Volt syntax:</p> <pre><code>&lt;?php\n\n{% raw %}{{ javascript_include(\"https://ajax.googleapis.com/ajax/libs/jquery/2.2.3/jquery.min.js\", false) }}{% endraw %}\n{% raw %}{{ javascript_include(\"javascript/jquery.js\") }}{% endraw %}\n</code></pre> <p>public static string image ([array $parameters], [boolean $local])</p> <p>Builds HTML IMG tags</p> <p><pre><code>&lt;?php\n\necho Phalcon\\Tag::image(\"img/bg.png\");\n\necho Phalcon\\Tag::image(\n    [\n        \"img/photo.jpg\",\n        \"alt\" =&gt; \"Some Photo\",\n    ]\n);\n</code></pre> Volt Syntax:</p> <pre><code>&lt;?php\n\n{% raw %}{{ image(\"img/bg.png\") }}{% endraw %}\n{% raw %}{{ image(\"img/photo.jpg\", \"alt\": \"Some Photo\") }}{% endraw %}\n{% raw %}{{ image(\"https://static.mywebsite.com/img/bg.png\", false) }}{% endraw %}\n</code></pre> <p>public static  friendlyTitle (mixed $text, [mixed $separator], [mixed $lowercase], [mixed $replace])</p> <p>Converts texts into URL-friendly titles</p> <pre><code>&lt;?php\n\necho Phalcon\\Tag::friendlyTitle(\"These are big important news\", \"-\")\n</code></pre> <p>public static  setDocType (mixed $doctype)</p> <p>Set the document type of content</p> <p>public static  getDocType ()</p> <p>Get the document type declaration of content</p> <p>public static  tagHtml (mixed $tagName, [mixed $parameters], [mixed $selfClose], [mixed $onlyStart], [mixed $useEol])</p> <p>Builds a HTML tag</p> <p>public static  tagHtmlClose (mixed $tagName, [mixed $useEol])</p> <p>Builds a HTML tag closing tag</p> <pre><code>&lt;?php\n\necho Phalcon\\Tag::tagHtmlClose(\"script\", true);\n</code></pre>"},{"location":"api/Phalcon_Tag/#class-phalcontagexception","title":"Class Phalcon\\Tag\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Tag/#methods_1","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Tag/#abstract-class-phalcontagselect","title":"Abstract class Phalcon\\Tag\\Select","text":"<p>Source on GitHub</p> <p>Generates a SELECT html tag using a static array of values or a Phalcon\\Mvc\\Model resultset</p>"},{"location":"api/Phalcon_Tag/#methods_2","title":"Methods","text":"<p>public static  selectField (array $parameters, [array $data])</p> <p>Generates a SELECT tag</p> <p>private static  _optionsFromResultset (Phalcon\\Mvc\\Model\\Resultset $resultset, array $using, mixed $value, string $closeOption)</p> <p>Generate the OPTION tags based on a resultset</p> <p>private static  _optionsFromArray (array $data, mixed $value, string $closeOption)</p> <p>Generate the OPTION tags based on an array</p>"},{"location":"api/Phalcon_Text/","title":"Abstract class Phalcon\\Text","text":"<p>Source on GitHub</p> <p>Provides utilities to work with texts</p>"},{"location":"api/Phalcon_Text/#constants","title":"Constants","text":"<p>integer RANDOM_ALNUM</p> <p>integer RANDOM_ALPHA</p> <p>integer RANDOM_HEXDEC</p> <p>integer RANDOM_NUMERIC</p> <p>integer RANDOM_NOZERO</p> <p>integer RANDOM_DISTINCT</p>"},{"location":"api/Phalcon_Text/#methods","title":"Methods","text":"<p>public static  camelize (mixed $str, [mixed $delimiter])</p> <p>Converts strings to camelize style</p> <pre><code>&lt;?php\n\necho Phalcon\\Text::camelize(\"coco_bongo\"); // CocoBongo\necho Phalcon\\Text::camelize(\"co_co-bon_go\", \"-\"); // Co_coBon_go\necho Phalcon\\Text::camelize(\"co_co-bon_go\", \"_-\"); // CoCoBonGo\n</code></pre> <p>public static  uncamelize (mixed $str, [mixed $delimiter])</p> <p>Uncamelize strings which are camelized</p> <pre><code>&lt;?php\n\necho Phalcon\\Text::uncamelize(\"CocoBongo\"); // coco_bongo\necho Phalcon\\Text::uncamelize(\"CocoBongo\", \"-\"); // coco-bongo\n</code></pre> <p>public static  increment (mixed $str, [mixed $separator])</p> <p>Adds a number to a string or increment that number if it already is defined</p> <pre><code>&lt;?php\n\necho Phalcon\\Text::increment(\"a\"); // \"a_1\"\necho Phalcon\\Text::increment(\"a_1\"); // \"a_2\"\n</code></pre> <p>public static  random ([mixed $type], [mixed $length])</p> <p>Generates a random string based on the given type. Type is one of the RANDOM_* constants</p> <pre><code>&lt;?php\n\nuse Phalcon\\Text;\n\n// \"aloiwkqz\"\necho Text::random(Text::RANDOM_ALNUM);\n</code></pre> <p>public static  startsWith (mixed $str, mixed $start, [mixed $ignoreCase])</p> <p>Check if a string starts with a given string</p> <pre><code>&lt;?php\n\necho Phalcon\\Text::startsWith(\"Hello\", \"He\"); // true\necho Phalcon\\Text::startsWith(\"Hello\", \"he\", false); // false\necho Phalcon\\Text::startsWith(\"Hello\", \"he\"); // true\n</code></pre> <p>public static  endsWith (mixed $str, mixed $end, [mixed $ignoreCase])</p> <p>Check if a string ends with a given string</p> <pre><code>&lt;?php\n\necho Phalcon\\Text::endsWith(\"Hello\", \"llo\"); // true\necho Phalcon\\Text::endsWith(\"Hello\", \"LLO\", false); // false\necho Phalcon\\Text::endsWith(\"Hello\", \"LLO\"); // true\n</code></pre> <p>public static  lower (mixed $str, [mixed $encoding])</p> <p>Lowercases a string, this function makes use of the mbstring extension if available</p> <pre><code>&lt;?php\n\necho Phalcon\\Text::lower(\"HELLO\"); // hello\n</code></pre> <p>public static  upper (mixed $str, [mixed $encoding])</p> <p>Uppercases a string, this function makes use of the mbstring extension if available</p> <pre><code>&lt;?php\n\necho Phalcon\\Text::upper(\"hello\"); // HELLO\n</code></pre> <p>public static  reduceSlashes (mixed $str)</p> <p>Reduces multiple slashes in a string to single slashes</p> <pre><code>&lt;?php\n\necho Phalcon\\Text::reduceSlashes(\"foo//bar/baz\"); // foo/bar/baz\necho Phalcon\\Text::reduceSlashes(\"http://foo.bar///baz/buz\"); // http://foo.bar/baz/buz\n</code></pre> <p>public static  concat ()</p> <p>Concatenates strings using the separator only once without duplication in places concatenation</p> <pre><code>&lt;?php\n\n$str = Phalcon\\Text::concat(\n    \"/\",\n    \"/tmp/\",\n    \"/folder_1/\",\n    \"/folder_2\",\n    \"folder_3/\"\n);\n\n// /tmp/folder_1/folder_2/folder_3/\necho $str;\n</code></pre> <p>public static  dynamic (mixed $text, [mixed $leftDelimiter], [mixed $rightDelimiter], [mixed $separator])</p> <p>Generates random text in accordance with the template</p> <pre><code>&lt;?php\n\n// Hi my name is a Bob\necho Phalcon\\Text::dynamic(\"{Hi|Hello}, my name is a {Bob|Mark|Jon}!\");\n\n// Hi my name is a Jon\necho Phalcon\\Text::dynamic(\"{Hi|Hello}, my name is a {Bob|Mark|Jon}!\");\n\n// Hello my name is a Bob\necho Phalcon\\Text::dynamic(\"{Hi|Hello}, my name is a {Bob|Mark|Jon}!\");\n\n// Hello my name is a Zyxep\necho Phalcon\\Text::dynamic(\"[Hi/Hello], my name is a [Zyxep/Mark]!\", \"[\", \"]\", \"/\");\n</code></pre> <p>public static  underscore (mixed $text)</p> <p>Makes a phrase underscored instead of spaced</p> <pre><code>&lt;?php\n\necho Phalcon\\Text::underscore(\"look behind\"); // \"look_behind\"\necho Phalcon\\Text::underscore(\"Awesome Phalcon\"); // \"Awesome_Phalcon\"\n</code></pre> <p>public static  humanize (mixed $text)</p> <p>Makes an underscored or dashed phrase human-readable</p> <pre><code>&lt;?php\n\necho Phalcon\\Text::humanize(\"start-a-horse\"); // \"start a horse\"\necho Phalcon\\Text::humanize(\"five_cats\"); // \"five cats\"\n</code></pre>"},{"location":"api/Phalcon_Translate/","title":"Abstract class Phalcon\\Translate","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Translate/#abstract-class-phalcontranslateadapter","title":"Abstract class Phalcon\\Translate\\Adapter","text":"<p>implements Phalcon\\Translate\\AdapterInterface</p> <p>Source on GitHub</p> <p>Base class for Phalcon\\Translate adapters</p>"},{"location":"api/Phalcon_Translate/#methods","title":"Methods","text":"<p>public  __construct (array $options)</p> <p>...</p> <p>public  setInterpolator (Phalcon\\Translate\\InterpolatorInterface $interpolator)</p> <p>...</p> <p>public string t (string $translateKey, [array $placeholders])</p> <p>Returns the translation string of the given key</p> <p>public string _ (string $translateKey, [array $placeholders])</p> <p>Returns the translation string of the given key (alias of method 't')</p> <p>public  offsetSet (string $offset, string $value)</p> <p>Sets a translation value</p> <p>public  offsetExists (mixed $translateKey)</p> <p>Check whether a translation key exists</p> <p>public  offsetUnset (string $offset)</p> <p>Unsets a translation from the dictionary</p> <p>public string offsetGet (string $translateKey)</p> <p>Returns the translation related to the given key</p> <p>protected  replacePlaceholders (mixed $translation, [mixed $placeholders])</p> <p>Replaces placeholders by the values passed</p> <p>abstract public  query (mixed $index, [mixed $placeholders]) inherited from Phalcon\\Translate\\AdapterInterface</p> <p>...</p> <p>abstract public  exists (mixed $index) inherited from Phalcon\\Translate\\AdapterInterface</p> <p>...</p>"},{"location":"api/Phalcon_Translate/#class-phalcontranslateadaptercsv","title":"Class Phalcon\\Translate\\Adapter\\Csv","text":"<p>extends abstract class Phalcon\\Translate\\Adapter</p> <p>implements Phalcon\\Translate\\AdapterInterface, ArrayAccess</p> <p>Source on GitHub</p> <p>Allows to define translation lists using CSV file</p>"},{"location":"api/Phalcon_Translate/#methods_1","title":"Methods","text":"<p>public  __construct (array $options)</p> <p>Phalcon\\Translate\\Adapter\\Csv constructor</p> <p>private  _load (string $file, int $length, string $delimiter, string $enclosure)</p> <p>Load translates from file</p> <p>public  query (mixed $index, [mixed $placeholders])</p> <p>Returns the translation related to the given key</p> <p>public  exists (mixed $index)</p> <p>Check whether is defined a translation key in the internal array</p> <p>public  setInterpolator (Phalcon\\Translate\\InterpolatorInterface $interpolator) inherited from Phalcon\\Translate\\Adapter</p> <p>...</p> <p>public string t (string $translateKey, [array $placeholders]) inherited from Phalcon\\Translate\\Adapter</p> <p>Returns the translation string of the given key</p> <p>public string _ (string $translateKey, [array $placeholders]) inherited from Phalcon\\Translate\\Adapter</p> <p>Returns the translation string of the given key (alias of method 't')</p> <p>public  offsetSet (string $offset, string $value) inherited from Phalcon\\Translate\\Adapter</p> <p>Sets a translation value</p> <p>public  offsetExists (mixed $translateKey) inherited from Phalcon\\Translate\\Adapter</p> <p>Check whether a translation key exists</p> <p>public  offsetUnset (string $offset) inherited from Phalcon\\Translate\\Adapter</p> <p>Unsets a translation from the dictionary</p> <p>public string offsetGet (string $translateKey) inherited from Phalcon\\Translate\\Adapter</p> <p>Returns the translation related to the given key</p> <p>protected  replacePlaceholders (mixed $translation, [mixed $placeholders]) inherited from Phalcon\\Translate\\Adapter</p> <p>Replaces placeholders by the values passed</p>"},{"location":"api/Phalcon_Translate/#class-phalcontranslateadaptergettext","title":"Class Phalcon\\Translate\\Adapter\\Gettext","text":"<p>extends abstract class Phalcon\\Translate\\Adapter</p> <p>implements Phalcon\\Translate\\AdapterInterface, ArrayAccess</p> <p>Source on GitHub</p> <pre><code>&lt;?php\n\nuse Phalcon\\Translate\\Adapter\\Gettext;\n\n$adapter = new Gettext(\n    [\n        \"locale\"        =&gt; \"de_DE.UTF-8\",\n        \"defaultDomain\" =&gt; \"translations\",\n        \"directory\"     =&gt; \"/path/to/application/locales\",\n        \"category\"      =&gt; LC_MESSAGES,\n    ]\n);\n</code></pre> <p>Allows translate using gettext</p>"},{"location":"api/Phalcon_Translate/#methods_2","title":"Methods","text":"<p>public  getDirectory ()</p> <p>public  getDefaultDomain ()</p> <p>public  getLocale ()</p> <p>public  getCategory ()</p> <p>public  __construct (array $options)</p> <p>Phalcon\\Translate\\Adapter\\Gettext constructor</p> <p>public  query (mixed $index, [mixed $placeholders])</p> <p>Returns the translation related to the given key.</p> <pre><code>&lt;?php\n\n$translator-&gt;query(\"\u4f60\u597d %name%\uff01\", [\"name\" =&gt; \"Phalcon\"]);\n</code></pre> <p>public  exists (mixed $index)</p> <p>Check whether is defined a translation key in the internal array</p> <p>public  nquery (mixed $msgid1, mixed $msgid2, mixed $count, [mixed $placeholders], [mixed $domain])</p> <p>The plural version of gettext(). Some languages have more than one form for plural messages dependent on the count.</p> <p>public  setDomain (mixed $domain)</p> <p>Changes the current domain (i.e. the translation file)</p> <p>public  resetDomain ()</p> <p>Sets the default domain</p> <p>public  setDefaultDomain (mixed $domain)</p> <p>Sets the domain default to search within when calls are made to gettext()</p> <p>public  setDirectory (mixed $directory)</p> <p>Sets the path for a domain</p> <pre><code>&lt;?php\n\n// Set the directory path\n$gettext-&gt;setDirectory(\"/path/to/the/messages\");\n\n// Set the domains and directories path\n$gettext-&gt;setDirectory(\n    [\n        \"messages\" =&gt; \"/path/to/the/messages\",\n        \"another\"  =&gt; \"/path/to/the/another\",\n    ]\n);\n</code></pre> <p>public  setLocale (mixed $category, mixed $locale)</p> <p>Sets locale information</p> <pre><code>&lt;?php\n\n// Set locale to Dutch\n$gettext-&gt;setLocale(LC_ALL, \"nl_NL\");\n\n// Try different possible locale names for german\n$gettext-&gt;setLocale(LC_ALL, \"de_DE@euro\", \"de_DE\", \"de\", \"ge\");\n</code></pre> <p>protected  prepareOptions (array $options)</p> <p>Validator for constructor</p> <p>protected  getOptionsDefault ()</p> <p>Gets default options</p> <p>public  setInterpolator (Phalcon\\Translate\\InterpolatorInterface $interpolator) inherited from Phalcon\\Translate\\Adapter</p> <p>...</p> <p>public string t (string $translateKey, [array $placeholders]) inherited from Phalcon\\Translate\\Adapter</p> <p>Returns the translation string of the given key</p> <p>public string _ (string $translateKey, [array $placeholders]) inherited from Phalcon\\Translate\\Adapter</p> <p>Returns the translation string of the given key (alias of method 't')</p> <p>public  offsetSet (string $offset, string $value) inherited from Phalcon\\Translate\\Adapter</p> <p>Sets a translation value</p> <p>public  offsetExists (mixed $translateKey) inherited from Phalcon\\Translate\\Adapter</p> <p>Check whether a translation key exists</p> <p>public  offsetUnset (string $offset) inherited from Phalcon\\Translate\\Adapter</p> <p>Unsets a translation from the dictionary</p> <p>public string offsetGet (string $translateKey) inherited from Phalcon\\Translate\\Adapter</p> <p>Returns the translation related to the given key</p> <p>protected  replacePlaceholders (mixed $translation, [mixed $placeholders]) inherited from Phalcon\\Translate\\Adapter</p> <p>Replaces placeholders by the values passed</p>"},{"location":"api/Phalcon_Translate/#class-phalcontranslateadapternativearray","title":"Class Phalcon\\Translate\\Adapter\\NativeArray","text":"<p>extends abstract class Phalcon\\Translate\\Adapter</p> <p>implements Phalcon\\Translate\\AdapterInterface, ArrayAccess</p> <p>Source on GitHub</p> <p>Allows to define translation lists using PHP arrays</p>"},{"location":"api/Phalcon_Translate/#methods_3","title":"Methods","text":"<p>public  __construct (array $options)</p> <p>Phalcon\\Translate\\Adapter\\NativeArray constructor</p> <p>public  query (mixed $index, [mixed $placeholders])</p> <p>Returns the translation related to the given key</p> <p>public  exists (mixed $index)</p> <p>Check whether is defined a translation key in the internal array</p> <p>public  setInterpolator (Phalcon\\Translate\\InterpolatorInterface $interpolator) inherited from Phalcon\\Translate\\Adapter</p> <p>...</p> <p>public string t (string $translateKey, [array $placeholders]) inherited from Phalcon\\Translate\\Adapter</p> <p>Returns the translation string of the given key</p> <p>public string _ (string $translateKey, [array $placeholders]) inherited from Phalcon\\Translate\\Adapter</p> <p>Returns the translation string of the given key (alias of method 't')</p> <p>public  offsetSet (string $offset, string $value) inherited from Phalcon\\Translate\\Adapter</p> <p>Sets a translation value</p> <p>public  offsetExists (mixed $translateKey) inherited from Phalcon\\Translate\\Adapter</p> <p>Check whether a translation key exists</p> <p>public  offsetUnset (string $offset) inherited from Phalcon\\Translate\\Adapter</p> <p>Unsets a translation from the dictionary</p> <p>public string offsetGet (string $translateKey) inherited from Phalcon\\Translate\\Adapter</p> <p>Returns the translation related to the given key</p> <p>protected  replacePlaceholders (mixed $translation, [mixed $placeholders]) inherited from Phalcon\\Translate\\Adapter</p> <p>Replaces placeholders by the values passed</p>"},{"location":"api/Phalcon_Translate/#interface-phalcontranslateadapterinterface","title":"Interface Phalcon\\Translate\\AdapterInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Translate/#methods_4","title":"Methods","text":"<p>abstract public  t (mixed $translateKey, [mixed $placeholders])</p> <p>...</p> <p>abstract public  query (mixed $index, [mixed $placeholders])</p> <p>...</p> <p>abstract public  exists (mixed $index)</p> <p>...</p>"},{"location":"api/Phalcon_Translate/#class-phalcontranslateexception","title":"Class Phalcon\\Translate\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Translate/#methods_5","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Translate/#class-phalcontranslatefactory","title":"Class Phalcon\\Translate\\Factory","text":"<p>extends abstract class Phalcon\\Factory</p> <p>implements Phalcon\\FactoryInterface</p> <p>Source on GitHub</p> <p>Loads Translate Adapter class using 'adapter' option</p> <pre><code>&lt;?php\n\nuse Phalcon\\Translate\\Factory;\n\n$options = [\n    \"locale\"        =&gt; \"de_DE.UTF-8\",\n    \"defaultDomain\" =&gt; \"translations\",\n    \"directory\"     =&gt; \"/path/to/application/locales\",\n    \"category\"      =&gt; LC_MESSAGES,\n    \"adapter\"       =&gt; \"gettext\",\n];\n$translate = Factory::load($options);\n</code></pre>"},{"location":"api/Phalcon_Translate/#methods_6","title":"Methods","text":"<p>public static  load (Phalcon\\Config | array $config)</p> <p>protected static  loadClass (mixed $namespace, mixed $config) inherited from Phalcon\\Factory</p> <p>...</p>"},{"location":"api/Phalcon_Translate/#class-phalcontranslateinterpolatorassociativearray","title":"Class Phalcon\\Translate\\Interpolator\\AssociativeArray","text":"<p>implements Phalcon\\Translate\\InterpolatorInterface</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Translate/#methods_7","title":"Methods","text":"<p>public  replacePlaceholders (mixed $translation, [mixed $placeholders])</p> <p>Replaces placeholders by the values passed</p>"},{"location":"api/Phalcon_Translate/#class-phalcontranslateinterpolatorindexedarray","title":"Class Phalcon\\Translate\\Interpolator\\IndexedArray","text":"<p>implements Phalcon\\Translate\\InterpolatorInterface</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Translate/#methods_8","title":"Methods","text":"<p>public  replacePlaceholders (mixed $translation, [mixed $placeholders])</p> <p>Replaces placeholders by the values passed</p>"},{"location":"api/Phalcon_Translate/#interface-phalcontranslateinterpolatorinterface","title":"Interface Phalcon\\Translate\\InterpolatorInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Translate/#methods_9","title":"Methods","text":"<p>abstract public  replacePlaceholders (mixed $translation, [mixed $placeholders])</p> <p>...</p>"},{"location":"api/Phalcon_Validation/","title":"Class Phalcon\\Validation","text":"<p>extends abstract class Phalcon\\Di\\Injectable</p> <p>implements Phalcon\\Events\\EventsAwareInterface, Phalcon\\Di\\InjectionAwareInterface, Phalcon\\ValidationInterface</p> <p>Source on GitHub</p> <p>Allows to validate data using custom or built-in validators</p>"},{"location":"api/Phalcon_Validation/#methods","title":"Methods","text":"<p>public  getData ()</p> <p>...</p> <p>public  setValidators (mixed $validators)</p> <p>...</p> <p>public  __construct ([array $validators])</p> <p>Phalcon\\Validation constructor</p> <p>public Phalcon\\Validation\\Message\\Group validate ([array | object $data], [object $entity])</p> <p>Validate a set of data according to a set of rules</p> <p>public  add (mixed $field, Phalcon\\Validation\\ValidatorInterface $validator)</p> <p>Adds a validator to a field</p> <p>public  rule (mixed $field, Phalcon\\Validation\\ValidatorInterface $validator)</p> <p>Alias of <code>add</code> method</p> <p>public  rules (mixed $field, array $validators)</p> <p>Adds the validators to a field</p> <p>public Phalcon\\Validation setFilters (string $field, array | string $filters)</p> <p>Adds filters to the field</p> <p>public mixed getFilters ([string $field])</p> <p>Returns all the filters or a specific one</p> <p>public  getValidators ()</p> <p>Returns the validators added to the validation</p> <p>public  setEntity (object $entity)</p> <p>Sets the bound entity</p> <p>public object getEntity ()</p> <p>Returns the bound entity</p> <p>public  setDefaultMessages ([array $messages])</p> <p>Adds default messages to validators</p> <p>public  getDefaultMessage (mixed $type)</p> <p>Get default message for validator type</p> <p>public  getMessages ()</p> <p>Returns the registered validators</p> <p>public  setLabels (array $labels)</p> <p>Adds labels for fields</p> <p>public string getLabel (string $field)</p> <p>Get label for field</p> <p>public  appendMessage (Phalcon\\Validation\\MessageInterface $message)</p> <p>Appends a message to the messages list</p> <p>public Phalcon\\Validation bind (object $entity, array | object $data)</p> <p>Assigns the data to an entity The entity is used to obtain the validation values</p> <p>public mixed getValue (string $field)</p> <p>Gets the a value to validate in the array/object data source</p> <p>protected  preChecking (mixed $field, Phalcon\\Validation\\ValidatorInterface $validator)</p> <p>Internal validations, if it returns true, then skip the current validator</p> <p>public  setDI (Phalcon\\DiInterface $dependencyInjector) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the dependency injector</p> <p>public  getDI () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal dependency injector</p> <p>public  setEventsManager (Phalcon\\Events\\ManagerInterface $eventsManager) inherited from Phalcon\\Di\\Injectable</p> <p>Sets the event manager</p> <p>public  getEventsManager () inherited from Phalcon\\Di\\Injectable</p> <p>Returns the internal event manager</p> <p>public  __get (mixed $propertyName) inherited from Phalcon\\Di\\Injectable</p> <p>Magic method __get</p>"},{"location":"api/Phalcon_Validation/#abstract-class-phalconvalidationcombinedfieldsvalidator","title":"Abstract class Phalcon\\Validation\\CombinedFieldsValidator","text":"<p>extends abstract class Phalcon\\Validation\\Validator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Validation/#methods_1","title":"Methods","text":"<p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>abstract public  validate (Phalcon\\Validation $validation, mixed $attribute) inherited from Phalcon\\Validation\\Validator</p> <p>Executes the validation</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationexception","title":"Class Phalcon\\Validation\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Validation/#methods_2","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationmessage","title":"Class Phalcon\\Validation\\Message","text":"<p>implements Phalcon\\Validation\\MessageInterface</p> <p>Source on GitHub</p> <p>Encapsulates validation info generated in the validation process</p>"},{"location":"api/Phalcon_Validation/#methods_3","title":"Methods","text":"<p>public  __construct (mixed $message, [mixed $field], [mixed $type], [mixed $code])</p> <p>Phalcon\\Validation\\Message constructor</p> <p>public  setType (mixed $type)</p> <p>Sets message type</p> <p>public  getType ()</p> <p>Returns message type</p> <p>public  setMessage (mixed $message)</p> <p>Sets verbose message</p> <p>public  getMessage ()</p> <p>Returns verbose message</p> <p>public  setField (mixed $field)</p> <p>Sets field name related to message</p> <p>public mixed getField ()</p> <p>Returns field name related to message</p> <p>public  setCode (mixed $code)</p> <p>Sets code for the message</p> <p>public  getCode ()</p> <p>Returns the message code</p> <p>public  __toString ()</p> <p>Magic __toString method returns verbose message</p> <p>public static  __set_state (array $message)</p> <p>Magic __set_state helps to recover messages from serialization</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationmessagegroup","title":"Class Phalcon\\Validation\\Message\\Group","text":"<p>implements Countable, ArrayAccess, Iterator, Traversable</p> <p>Source on GitHub</p> <p>Represents a group of validation messages</p>"},{"location":"api/Phalcon_Validation/#methods_4","title":"Methods","text":"<p>public  __construct ([array $messages])</p> <p>Phalcon\\Validation\\Message\\Group constructor</p> <p>public Phalcon\\Validation\\Message offsetGet (int $index)</p> <p>Gets an attribute a message using the array syntax</p> <pre><code>&lt;?php\n\nprint_r(\n    $messages[0]\n);\n</code></pre> <p>public  offsetSet (int $index, Phalcon\\Validation\\Message $message)</p> <p>Sets an attribute using the array-syntax</p> <pre><code>&lt;?php\n\n$messages[0] = new \\Phalcon\\Validation\\Message(\"This is a message\");\n</code></pre> <p>public boolean offsetExists (int $index)</p> <p>Checks if an index exists</p> <pre><code>&lt;?php\n\nvar_dump(\n    isset($message[\"database\"])\n);\n</code></pre> <p>public  offsetUnset (mixed $index)</p> <p>Removes a message from the list</p> <pre><code>&lt;?php\n\nunset($message[\"database\"]);\n</code></pre> <p>public  appendMessage (Phalcon\\Validation\\MessageInterface $message)</p> <p>Appends a message to the group</p> <pre><code>&lt;?php\n\n$messages-&gt;appendMessage(\n    new \\Phalcon\\Validation\\Message(\"This is a message\")\n);\n</code></pre> <p>public  appendMessages (Phalcon\\Validation\\MessageInterface $messages)</p> <p>Appends an array of messages to the group</p> <pre><code>&lt;?php\n\n$messages-&gt;appendMessages($messagesArray);\n</code></pre> <p>public array filter (string $fieldName)</p> <p>Filters the message group by field name</p> <p>public  count ()</p> <p>Returns the number of messages in the list</p> <p>public  rewind ()</p> <p>Rewinds the internal iterator</p> <p>public  current ()</p> <p>Returns the current message in the iterator</p> <p>public  key ()</p> <p>Returns the current position/key in the iterator</p> <p>public  next ()</p> <p>Moves the internal iteration pointer to the next position</p> <p>public  valid ()</p> <p>Check if the current message in the iterator is valid</p> <p>public static Phalcon\\Validation\\Message\\Group __set_state (array $group)</p> <p>Magic __set_state helps to re-build messages variable when exporting</p>"},{"location":"api/Phalcon_Validation/#interface-phalconvalidationmessageinterface","title":"Interface Phalcon\\Validation\\MessageInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Validation/#methods_5","title":"Methods","text":"<p>abstract public  setType (mixed $type)</p> <p>...</p> <p>abstract public  getType ()</p> <p>...</p> <p>abstract public  setMessage (mixed $message)</p> <p>...</p> <p>abstract public  getMessage ()</p> <p>...</p> <p>abstract public  setField (mixed $field)</p> <p>...</p> <p>abstract public  getField ()</p> <p>...</p> <p>abstract public  __toString ()</p> <p>...</p> <p>abstract public static  __set_state (array $message)</p> <p>...</p>"},{"location":"api/Phalcon_Validation/#abstract-class-phalconvalidationvalidator","title":"Abstract class Phalcon\\Validation\\Validator","text":"<p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>This is a base class for validators</p>"},{"location":"api/Phalcon_Validation/#methods_6","title":"Methods","text":"<p>public  __construct ([array $options])</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key)</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key)</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue])</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value)</p> <p>Sets an option in the validator</p> <p>abstract public  validate (Phalcon\\Validation $validation, mixed $attribute)</p> <p>Executes the validation</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field)</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option])</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field)</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatoralnum","title":"Class Phalcon\\Validation\\Validator\\Alnum","text":"<p>extends abstract class Phalcon\\Validation\\Validator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Check for alphanumeric character(s)</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Alnum as AlnumValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"username\",\n    new AlnumValidator(\n        [\n            \"message\" =&gt; \":field must contain only alphanumeric characters\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"username\",\n        \"name\",\n    ],\n    new AlnumValidator(\n        [\n            \"message\" =&gt; [\n                \"username\" =&gt; \"username must contain only alphanumeric characters\",\n                \"name\"     =&gt; \"name must contain only alphanumeric characters\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/Phalcon_Validation/#methods_7","title":"Methods","text":"<p>public  validate (Phalcon\\Validation $validation, mixed $field)</p> <p>Executes the validation</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatoralpha","title":"Class Phalcon\\Validation\\Validator\\Alpha","text":"<p>extends abstract class Phalcon\\Validation\\Validator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Check for alphabetic character(s)</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Alpha as AlphaValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"username\",\n    new AlphaValidator(\n        [\n            \"message\" =&gt; \":field must contain only letters\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"username\",\n        \"name\",\n    ],\n    new AlphaValidator(\n        [\n            \"message\" =&gt; [\n                \"username\" =&gt; \"username must contain only letters\",\n                \"name\"     =&gt; \"name must contain only letters\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/Phalcon_Validation/#methods_8","title":"Methods","text":"<p>public  validate (Phalcon\\Validation $validation, mixed $field)</p> <p>Executes the validation</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatorbetween","title":"Class Phalcon\\Validation\\Validator\\Between","text":"<p>extends abstract class Phalcon\\Validation\\Validator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Validates that a value is between an inclusive range of two values. For a value x, the test is passed if minimum&lt;=x&lt;=maximum.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Between;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"price\",\n    new Between(\n        [\n            \"minimum\" =&gt; 0,\n            \"maximum\" =&gt; 100,\n            \"message\" =&gt; \"The price must be between 0 and 100\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"price\",\n        \"amount\",\n    ],\n    new Between(\n        [\n            \"minimum\" =&gt; [\n                \"price\"  =&gt; 0,\n                \"amount\" =&gt; 0,\n            ],\n            \"maximum\" =&gt; [\n                \"price\"  =&gt; 100,\n                \"amount\" =&gt; 50,\n            ],\n            \"message\" =&gt; [\n                \"price\"  =&gt; \"The price must be between 0 and 100\",\n                \"amount\" =&gt; \"The amount must be between 0 and 50\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/Phalcon_Validation/#methods_9","title":"Methods","text":"<p>public  validate (Phalcon\\Validation $validation, mixed $field)</p> <p>Executes the validation</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatorcallback","title":"Class Phalcon\\Validation\\Validator\\Callback","text":"<p>extends abstract class Phalcon\\Validation\\Validator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Calls user function for validation</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Callback as CallbackValidator;\nuse Phalcon\\Validation\\Validator\\Numericality as NumericalityValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    [\"user\", \"admin\"],\n    new CallbackValidator(\n        [\n            \"message\" =&gt; \"There must be only an user or admin set\",\n            \"callback\" =&gt; function($data) {\n                if (!empty($data-&gt;getUser()) &amp;&amp; !empty($data-&gt;getAdmin())) {\n                    return false;\n                }\n\n                return true;\n            }\n        ]\n    )\n);\n\n$validator-&gt;add(\n    \"amount\",\n    new CallbackValidator(\n        [\n            \"callback\" =&gt; function($data) {\n                if (!empty($data-&gt;getProduct())) {\n                    return new NumericalityValidator(\n                        [\n                            \"message\" =&gt; \"Amount must be a number.\"\n                        ]\n                    );\n                }\n            }\n        ]\n    )\n);\n</code></pre>"},{"location":"api/Phalcon_Validation/#methods_10","title":"Methods","text":"<p>public  validate (Phalcon\\Validation $validation, mixed $field)</p> <p>Executes the validation</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatorconfirmation","title":"Class Phalcon\\Validation\\Validator\\Confirmation","text":"<p>extends abstract class Phalcon\\Validation\\Validator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Checks that two values have the same value</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Confirmation;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"password\",\n    new Confirmation(\n        [\n            \"message\" =&gt; \"Password doesn't match confirmation\",\n            \"with\"    =&gt; \"confirmPassword\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"password\",\n        \"email\",\n    ],\n    new Confirmation(\n        [\n            \"message\" =&gt; [\n                \"password\" =&gt; \"Password doesn't match confirmation\",\n                \"email\"    =&gt; \"Email doesn't match confirmation\",\n            ],\n            \"with\" =&gt; [\n                \"password\" =&gt; \"confirmPassword\",\n                \"email\"    =&gt; \"confirmEmail\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/Phalcon_Validation/#methods_11","title":"Methods","text":"<p>public  validate (Phalcon\\Validation $validation, mixed $field)</p> <p>Executes the validation</p> <p>final protected  compare (mixed $a, mixed $b)</p> <p>Compare strings</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatorcreditcard","title":"Class Phalcon\\Validation\\Validator\\CreditCard","text":"<p>extends abstract class Phalcon\\Validation\\Validator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Checks if a value has a valid credit card number</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\CreditCard as CreditCardValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"creditCard\",\n    new CreditCardValidator(\n        [\n            \"message\" =&gt; \"The credit card number is not valid\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"creditCard\",\n        \"secondCreditCard\",\n    ],\n    new CreditCardValidator(\n        [\n            \"message\" =&gt; [\n                \"creditCard\"       =&gt; \"The credit card number is not valid\",\n                \"secondCreditCard\" =&gt; \"The second credit card number is not valid\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/Phalcon_Validation/#methods_12","title":"Methods","text":"<p>public  validate (Phalcon\\Validation $validation, mixed $field)</p> <p>Executes the validation</p> <p>private boolean verifyByLuhnAlgorithm (string $number)</p> <p>is a simple checksum formula used to validate a variety of identification numbers</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatordate","title":"Class Phalcon\\Validation\\Validator\\Date","text":"<p>extends abstract class Phalcon\\Validation\\Validator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Checks if a value is a valid date</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Date as DateValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"date\",\n    new DateValidator(\n        [\n            \"format\"  =&gt; \"d-m-Y\",\n            \"message\" =&gt; \"The date is invalid\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"date\",\n        \"anotherDate\",\n    ],\n    new DateValidator(\n        [\n            \"format\" =&gt; [\n                \"date\"        =&gt; \"d-m-Y\",\n                \"anotherDate\" =&gt; \"Y-m-d\",\n            ],\n            \"message\" =&gt; [\n                \"date\"        =&gt; \"The date is invalid\",\n                \"anotherDate\" =&gt; \"The another date is invalid\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/Phalcon_Validation/#methods_13","title":"Methods","text":"<p>public  validate (Phalcon\\Validation $validation, mixed $field)</p> <p>Executes the validation</p> <p>private  checkDate (mixed $value, mixed $format)</p> <p>...</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatordigit","title":"Class Phalcon\\Validation\\Validator\\Digit","text":"<p>extends abstract class Phalcon\\Validation\\Validator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Check for numeric character(s)</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Digit as DigitValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"height\",\n    new DigitValidator(\n        [\n            \"message\" =&gt; \":field must be numeric\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"height\",\n        \"width\",\n    ],\n    new DigitValidator(\n        [\n            \"message\" =&gt; [\n                \"height\" =&gt; \"height must be numeric\",\n                \"width\"  =&gt; \"width must be numeric\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/Phalcon_Validation/#methods_14","title":"Methods","text":"<p>public  validate (Phalcon\\Validation $validation, mixed $field)</p> <p>Executes the validation</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatoremail","title":"Class Phalcon\\Validation\\Validator\\Email","text":"<p>extends abstract class Phalcon\\Validation\\Validator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Checks if a value has a correct e-mail format</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Email as EmailValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"email\",\n    new EmailValidator(\n        [\n            \"message\" =&gt; \"The e-mail is not valid\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"email\",\n        \"anotherEmail\",\n    ],\n    new EmailValidator(\n        [\n            \"message\" =&gt; [\n                \"email\"        =&gt; \"The e-mail is not valid\",\n                \"anotherEmail\" =&gt; \"The another e-mail is not valid\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/Phalcon_Validation/#methods_15","title":"Methods","text":"<p>public  validate (Phalcon\\Validation $validation, mixed $field)</p> <p>Executes the validation</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatorexception","title":"Class Phalcon\\Validation\\Validator\\Exception","text":"<p>extends class Phalcon\\Exception</p> <p>implements Throwable</p> <p>Source on GitHub</p>"},{"location":"api/Phalcon_Validation/#methods_16","title":"Methods","text":"<p>final private Exception __clone () inherited from Exception</p> <p>Clone the exception</p> <p>public  __construct ([mixed $message], [mixed $code], [mixed $previous]) inherited from Exception</p> <p>Exception constructor</p> <p>public  __wakeup () inherited from Exception</p> <p>...</p> <p>final public string getMessage () inherited from Exception</p> <p>Gets the Exception message</p> <p>final public int getCode () inherited from Exception</p> <p>Gets the Exception code</p> <p>final public string getFile () inherited from Exception</p> <p>Gets the file in which the exception occurred</p> <p>final public int getLine () inherited from Exception</p> <p>Gets the line in which the exception occurred</p> <p>final public array getTrace () inherited from Exception</p> <p>Gets the stack trace</p> <p>final public Exception getPrevious () inherited from Exception</p> <p>Returns previous Exception</p> <p>final public Exception getTraceAsString () inherited from Exception</p> <p>Gets the stack trace as a string</p> <p>public string __toString () inherited from Exception</p> <p>String representation of the exception</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatorexclusionin","title":"Class Phalcon\\Validation\\Validator\\ExclusionIn","text":"<p>extends abstract class Phalcon\\Validation\\Validator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Check if a value is not included into a list of values</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\ExclusionIn;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"status\",\n    new ExclusionIn(\n        [\n            \"message\" =&gt; \"The status must not be A or B\",\n            \"domain\"  =&gt; [\n                \"A\",\n                \"B\",\n            ],\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"status\",\n        \"type\",\n    ],\n    new ExclusionIn(\n        [\n            \"message\" =&gt; [\n                \"status\" =&gt; \"The status must not be A or B\",\n                \"type\"   =&gt; \"The type must not be 1 or \"\n            ],\n            \"domain\" =&gt; [\n                \"status\" =&gt; [\n                    \"A\",\n                    \"B\",\n                ],\n                \"type\"   =&gt; [1, 2],\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/Phalcon_Validation/#methods_17","title":"Methods","text":"<p>public  validate (Phalcon\\Validation $validation, mixed $field)</p> <p>Executes the validation</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatorfile","title":"Class Phalcon\\Validation\\Validator\\File","text":"<p>extends abstract class Phalcon\\Validation\\Validator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Checks if a value has a correct file</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\File as FileValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"file\",\n    new FileValidator(\n        [\n            \"maxSize\"              =&gt; \"2M\",\n            \"messageSize\"          =&gt; \":field exceeds the max filesize (:max)\",\n            \"allowedTypes\"         =&gt; [\n                \"image/jpeg\",\n                \"image/png\",\n            ],\n            \"messageType\"          =&gt; \"Allowed file types are :types\",\n            \"maxResolution\"        =&gt; \"800x600\",\n            \"messageMaxResolution\" =&gt; \"Max resolution of :field is :max\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"file\",\n        \"anotherFile\",\n    ],\n    new FileValidator(\n        [\n            \"maxSize\" =&gt; [\n                \"file\"        =&gt; \"2M\",\n                \"anotherFile\" =&gt; \"4M\",\n            ],\n            \"messageSize\" =&gt; [\n                \"file\"        =&gt; \"file exceeds the max filesize 2M\",\n                \"anotherFile\" =&gt; \"anotherFile exceeds the max filesize 4M\",\n            \"allowedTypes\" =&gt; [\n                \"file\"        =&gt; [\n                    \"image/jpeg\",\n                    \"image/png\",\n                ],\n                \"anotherFile\" =&gt; [\n                    \"image/gif\",\n                    \"image/bmp\",\n                ],\n            ],\n            \"messageType\" =&gt; [\n                \"file\"        =&gt; \"Allowed file types are image/jpeg and image/png\",\n                \"anotherFile\" =&gt; \"Allowed file types are image/gif and image/bmp\",\n            ],\n            \"maxResolution\" =&gt; [\n                \"file\"        =&gt; \"800x600\",\n                \"anotherFile\" =&gt; \"1024x768\",\n            ],\n            \"messageMaxResolution\" =&gt; [\n                \"file\"        =&gt; \"Max resolution of file is 800x600\",\n                \"anotherFile\" =&gt; \"Max resolution of file is 1024x768\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/Phalcon_Validation/#methods_18","title":"Methods","text":"<p>public  validate (Phalcon\\Validation $validation, mixed $field)</p> <p>Executes the validation</p> <p>public  isAllowEmpty (Phalcon\\Validation $validation, mixed $field)</p> <p>Check on empty</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatoridentical","title":"Class Phalcon\\Validation\\Validator\\Identical","text":"<p>extends abstract class Phalcon\\Validation\\Validator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Checks if a value is identical to other</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Identical;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"terms\",\n    new Identical(\n        [\n            \"accepted\" =&gt; \"yes\",\n            \"message\" =&gt; \"Terms and conditions must be accepted\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"terms\",\n        \"anotherTerms\",\n    ],\n    new Identical(\n        [\n            \"accepted\" =&gt; [\n                \"terms\"        =&gt; \"yes\",\n                \"anotherTerms\" =&gt; \"yes\",\n            ],\n            \"message\" =&gt; [\n                \"terms\"        =&gt; \"Terms and conditions must be accepted\",\n                \"anotherTerms\" =&gt; \"Another terms  must be accepted\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/Phalcon_Validation/#methods_19","title":"Methods","text":"<p>public  validate (Phalcon\\Validation $validation, mixed $field)</p> <p>Executes the validation</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatorinclusionin","title":"Class Phalcon\\Validation\\Validator\\InclusionIn","text":"<p>extends abstract class Phalcon\\Validation\\Validator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Check if a value is included into a list of values</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\InclusionIn;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"status\",\n    new InclusionIn(\n        [\n            \"message\" =&gt; \"The status must be A or B\",\n            \"domain\"  =&gt; [\"A\", \"B\"],\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"status\",\n        \"type\",\n    ],\n    new InclusionIn(\n        [\n            \"message\" =&gt; [\n                \"status\" =&gt; \"The status must be A or B\",\n                \"type\"   =&gt; \"The status must be 1 or 2\",\n            ],\n            \"domain\" =&gt; [\n                \"status\" =&gt; [\"A\", \"B\"],\n                \"type\"   =&gt; [1, 2],\n            ]\n        ]\n    )\n);\n</code></pre>"},{"location":"api/Phalcon_Validation/#methods_20","title":"Methods","text":"<p>public  validate (Phalcon\\Validation $validation, mixed $field)</p> <p>Executes the validation</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatornumericality","title":"Class Phalcon\\Validation\\Validator\\Numericality","text":"<p>extends abstract class Phalcon\\Validation\\Validator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Check for a valid numeric value</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Numericality;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"price\",\n    new Numericality(\n        [\n            \"message\" =&gt; \":field is not numeric\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"price\",\n        \"amount\",\n    ],\n    new Numericality(\n        [\n            \"message\" =&gt; [\n                \"price\"  =&gt; \"price is not numeric\",\n                \"amount\" =&gt; \"amount is not numeric\",\n            ]\n        ]\n    )\n);\n</code></pre>"},{"location":"api/Phalcon_Validation/#methods_21","title":"Methods","text":"<p>public  validate (Phalcon\\Validation $validation, mixed $field)</p> <p>Executes the validation</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatorpresenceof","title":"Class Phalcon\\Validation\\Validator\\PresenceOf","text":"<p>extends abstract class Phalcon\\Validation\\Validator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Validates that a value is not null or empty string</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"name\",\n    new PresenceOf(\n        [\n            \"message\" =&gt; \"The name is required\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"name\",\n        \"email\",\n    ],\n    new PresenceOf(\n        [\n            \"message\" =&gt; [\n                \"name\"  =&gt; \"The name is required\",\n                \"email\" =&gt; \"The email is required\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/Phalcon_Validation/#methods_22","title":"Methods","text":"<p>public  validate (Phalcon\\Validation $validation, mixed $field)</p> <p>Executes the validation</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatorregex","title":"Class Phalcon\\Validation\\Validator\\Regex","text":"<p>extends abstract class Phalcon\\Validation\\Validator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Allows validate if the value of a field matches a regular expression</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Regex as RegexValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"created_at\",\n    new RegexValidator(\n        [\n            \"pattern\" =&gt; \"/^[0-9]{4}[-\\/](0[1-9]|1[12])[-\\/](0[1-9]|[12][0-9]|3[01])$/\",\n            \"message\" =&gt; \"The creation date is invalid\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"created_at\",\n        \"name\",\n    ],\n    new RegexValidator(\n        [\n            \"pattern\" =&gt; [\n                \"created_at\" =&gt; \"/^[0-9]{4}[-\\/](0[1-9]|1[12])[-\\/](0[1-9]|[12][0-9]|3[01])$/\",\n                \"name\"       =&gt; \"/^[a-z]$/\",\n            ],\n            \"message\" =&gt; [\n                \"created_at\" =&gt; \"The creation date is invalid\",\n                \"name\"       =&gt; \"The name is invalid\",\n            ]\n        ]\n    )\n);\n</code></pre>"},{"location":"api/Phalcon_Validation/#methods_23","title":"Methods","text":"<p>public  validate (Phalcon\\Validation $validation, mixed $field)</p> <p>Executes the validation</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatorstringlength","title":"Class Phalcon\\Validation\\Validator\\StringLength","text":"<p>extends abstract class Phalcon\\Validation\\Validator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Validates that a string has the specified maximum and minimum constraints The test is passed if for a string's length L, min&lt;=L&lt;=max, i.e. L must be at least min, and at most max.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\StringLength as StringLength;\n\n$validator = new Validation();\n\n$validation-&gt;add(\n    \"name_last\",\n    new StringLength(\n        [\n            \"max\"            =&gt; 50,\n            \"min\"            =&gt; 2,\n            \"messageMaximum\" =&gt; \"We don't like really long names\",\n            \"messageMinimum\" =&gt; \"We want more than just their initials\",\n        ]\n    )\n);\n\n$validation-&gt;add(\n    [\n        \"name_last\",\n        \"name_first\",\n    ],\n    new StringLength(\n        [\n            \"max\" =&gt; [\n                \"name_last\"  =&gt; 50,\n                \"name_first\" =&gt; 40,\n            ],\n            \"min\" =&gt; [\n                \"name_last\"  =&gt; 2,\n                \"name_first\" =&gt; 4,\n            ],\n            \"messageMaximum\" =&gt; [\n                \"name_last\"  =&gt; \"We don't like really long last names\",\n                \"name_first\" =&gt; \"We don't like really long first names\",\n            ],\n            \"messageMinimum\" =&gt; [\n                \"name_last\"  =&gt; \"We don't like too short last names\",\n                \"name_first\" =&gt; \"We don't like too short first names\",\n            ]\n        ]\n    )\n);\n</code></pre>"},{"location":"api/Phalcon_Validation/#methods_24","title":"Methods","text":"<p>public  validate (Phalcon\\Validation $validation, mixed $field)</p> <p>Executes the validation</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatoruniqueness","title":"Class Phalcon\\Validation\\Validator\\Uniqueness","text":"<p>extends abstract class Phalcon\\Validation\\CombinedFieldsValidator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Check that a field is unique in the related table</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Uniqueness as UniquenessValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"username\",\n    new UniquenessValidator(\n        [\n            \"model\"   =&gt; new Users(),\n            \"message\" =&gt; \":field must be unique\",\n        ]\n    )\n);\n</code></pre> <p>Different attribute from the field:</p> <pre><code>&lt;?php\n\n$validator-&gt;add(\n    \"username\",\n    new UniquenessValidator(\n        [\n            \"model\"     =&gt; new Users(),\n            \"attribute\" =&gt; \"nick\",\n        ]\n    )\n);\n</code></pre> <p>In model:</p> <pre><code>&lt;?php\n\n$validator-&gt;add(\n    \"username\",\n    new UniquenessValidator()\n);\n</code></pre> <p>Combination of fields in model:</p> <pre><code>&lt;?php\n\n$validator-&gt;add(\n    [\n        \"firstName\",\n        \"lastName\",\n    ],\n    new UniquenessValidator()\n);\n</code></pre> <p>It is possible to convert values before validation. This is useful in situations where values need to be converted to do the database lookup:</p> <pre><code>&lt;?php\n\n$validator-&gt;add(\n    \"username\",\n    new UniquenessValidator(\n        [\n            \"convert\" =&gt; function (array $values) {\n                $values[\"username\"] = strtolower($values[\"username\"]);\n\n                return $values;\n            }\n        ]\n    )\n);\n</code></pre>"},{"location":"api/Phalcon_Validation/#methods_25","title":"Methods","text":"<p>public  validate (Phalcon\\Validation $validation, mixed $field)</p> <p>Executes the validation</p> <p>protected  isUniqueness (Phalcon\\Validation $validation, mixed $field)</p> <p>...</p> <p>protected  getColumnNameReal (mixed $record, mixed $field)</p> <p>The column map is used in the case to get real column name</p> <p>protected  isUniquenessModel (mixed $record, array $field, array $values)</p> <p>Uniqueness method used for model</p> <p>protected  isUniquenessCollection (mixed $record, array $field, array $values)</p> <p>Uniqueness method used for collection</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#class-phalconvalidationvalidatorurl","title":"Class Phalcon\\Validation\\Validator\\Url","text":"<p>extends abstract class Phalcon\\Validation\\Validator</p> <p>implements Phalcon\\Validation\\ValidatorInterface</p> <p>Source on GitHub</p> <p>Checks if a value has a url format</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Url as UrlValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"url\",\n    new UrlValidator(\n        [\n            \"message\" =&gt; \":field must be a url\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"url\",\n        \"homepage\",\n    ],\n    new UrlValidator(\n        [\n            \"message\" =&gt; [\n                \"url\"      =&gt; \"url must be a url\",\n                \"homepage\" =&gt; \"homepage must be a url\",\n            ]\n        ]\n    )\n);\n</code></pre>"},{"location":"api/Phalcon_Validation/#methods_26","title":"Methods","text":"<p>public  validate (Phalcon\\Validation $validation, mixed $field)</p> <p>Executes the validation</p> <p>public  __construct ([array $options]) inherited from Phalcon\\Validation\\Validator</p> <p>Phalcon\\Validation\\Validator constructor</p> <p>public  isSetOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option has been defined</p> <p>public  hasOption (mixed $key) inherited from Phalcon\\Validation\\Validator</p> <p>Checks if an option is defined</p> <p>public  getOption (mixed $key, [mixed $defaultValue]) inherited from Phalcon\\Validation\\Validator</p> <p>Returns an option in the validator's options Returns null if the option hasn't set</p> <p>public  setOption (mixed $key, mixed $value) inherited from Phalcon\\Validation\\Validator</p> <p>Sets an option in the validator</p> <p>protected  prepareLabel (Phalcon\\Validation $validation, mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a label for the field.</p> <p>protected  prepareMessage (Phalcon\\Validation $validation, mixed $field, mixed $type, [mixed $option]) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation message.</p> <p>protected  prepareCode (mixed $field) inherited from Phalcon\\Validation\\Validator</p> <p>Prepares a validation code.</p>"},{"location":"api/Phalcon_Validation/#interface-phalconvalidationvalidatorinterface","title":"Interface Phalcon\\Validation\\ValidatorInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Validation/#methods_27","title":"Methods","text":"<p>abstract public  hasOption (mixed $key)</p> <p>...</p> <p>abstract public  getOption (mixed $key, [mixed $defaultValue])</p> <p>...</p> <p>abstract public  validate (Phalcon\\Validation $validation, mixed $attribute)</p> <p>...</p>"},{"location":"api/Phalcon_Validation/#interface-phalconvalidationinterface","title":"Interface Phalcon\\ValidationInterface","text":"<p>Source on GitHub</p>"},{"location":"api/Phalcon_Validation/#methods_28","title":"Methods","text":"<p>abstract public  validate ([mixed $data], [mixed $entity])</p> <p>...</p> <p>abstract public  add (mixed $field, Phalcon\\Validation\\ValidatorInterface $validator)</p> <p>...</p> <p>abstract public  rule (mixed $field, Phalcon\\Validation\\ValidatorInterface $validator)</p> <p>...</p> <p>abstract public  rules (mixed $field, array $validators)</p> <p>...</p> <p>abstract public  setFilters (mixed $field, mixed $filters)</p> <p>...</p> <p>abstract public  getFilters ([mixed $field])</p> <p>...</p> <p>abstract public  getValidators ()</p> <p>...</p> <p>abstract public  getEntity ()</p> <p>...</p> <p>abstract public  setDefaultMessages ([array $messages])</p> <p>...</p> <p>abstract public  getDefaultMessage (mixed $type)</p> <p>...</p> <p>abstract public  getMessages ()</p> <p>...</p> <p>abstract public  setLabels (array $labels)</p> <p>...</p> <p>abstract public  getLabel (mixed $field)</p> <p>...</p> <p>abstract public  appendMessage (Phalcon\\Validation\\MessageInterface $message)</p> <p>...</p> <p>abstract public  bind (mixed $entity, mixed $data)</p> <p>...</p> <p>abstract public  getValue (mixed $field)</p> <p>...</p>"},{"location":"api/Phalcon_Version/","title":"Class Phalcon\\Version","text":"<p>Source on GitHub</p> <p>This class allows to get the installed version of the framework</p>"},{"location":"api/Phalcon_Version/#constants","title":"Constants","text":"<p>integer VERSION_MAJOR</p> <p>integer VERSION_MEDIUM</p> <p>integer VERSION_MINOR</p> <p>integer VERSION_SPECIAL</p> <p>integer VERSION_SPECIAL_NUMBER</p>"},{"location":"api/Phalcon_Version/#methods","title":"Methods","text":"<p>protected static  _getVersion ()</p> <p>Area where the version number is set. The format is as follows: ABBCCDE A - Major version B - Med version (two digits) C - Min version (two digits) D - Special release: 1 = Alpha, 2 = Beta, 3 = RC, 4 = Stable E - Special release version i.e. RC1, Beta2 etc.</p> <p>final protected static  _getSpecial (mixed $special)</p> <p>Translates a number to a special release If Special release = 1 this function will return ALPHA</p> <p>public static  get ()</p> <p>Returns the active version (string)</p> <pre><code>&lt;?php\n\necho Phalcon\\Version::get();\n</code></pre> <p>public static  getId ()</p> <p>Returns the numeric active version</p> <pre><code>&lt;?php\n\necho Phalcon\\Version::getId();\n</code></pre> <p>public static  getPart (mixed $part)</p> <p>Returns a specific part of the version. If the wrong parameter is passed it will return the full version</p> <pre><code>&lt;?php\n\necho Phalcon\\Version::getPart(\n    Phalcon\\Version::VERSION_MAJOR\n);\n</code></pre>"},{"location":"assets/sponsors/","title":"Sponsors","text":"Support Us"}]}