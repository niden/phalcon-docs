{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"acl/","title":"Access Control Lists (acl.md)","text":""},{"location":"acl/#overview","title":"Overview","text":"<p>Phalcon\\Acl provides an easy and lightweight management of ACLs as well as the permissions attached to them. Access Control Lists (acl.md) allow an application to control access to its areas and the underlying objects from requests. </p> <p>In short, ACLs have two objects: The object that needs access, and the object that we need access to. In the programming world, these are usually referred to as Roles and Components. In the Phalcon world, we use the terminology Role and Component.</p> <p>Use Case</p> <p>An accounting application needs to have different groups of users have access to various areas of the application.</p> <p>Role - Administrator Access - Accounting Department Access - Manager Access - Guest Access</p> <p>Component - Login page - Admin page - Invoices page - Reports page</p> <p>As seen above in the use case, an Role is defined as who needs to access a particular Component i.e. an area of the application. A Component is defined as the area of the application that needs to be accessed. </p> <p>Using the Phalcon\\Acl component, we can tie those two together, and strengthen the security of our application, allowing only specific roles to be bound to specific components.</p>"},{"location":"acl/#activation","title":"Activation","text":"<p>Phalcon\\Acl uses adapters to store and work with roles and components. The only adapter available right now is Phalcon\\Acl\\Adapter\\Memory. Having the adapter use the memory, significantly increases the speed that the ACL is accessed but also comes with drawbacks. The main drawback is that memory is not persistent, so the developer will need to implement a storing strategy for the ACL data, so that the ACL is not generated at every request. This could easily lead to delays and unnecessary processing, especially if the ACL is quite big and/or stored in a database or file system.</p> <p>The Phalcon\\Acl constructor takes as its first parameter an adapter used to retrieve the information related to the control list.</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Adapter\\Memory;\n\n$acl = new Memory();\n</code></pre> The default action is <code>Phalcon\\Acl\\Enum::DENY</code> for any Role or Component. This is on purpose to ensure that only the developer or application allows access to specific components and not the ACL component itself.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Enum;\nuse Phalcon\\Acl\\Adapter\\Memory;\n\n$acl = new Memory();\n\n$acl-&gt;setDefaultAction(Enum::ALLOW);\n</code></pre>"},{"location":"acl/#constants","title":"Constants","text":"<p>The Phalcon\\Acl\\Enum class offers two constants that can be used when defining access levels. </p> <ul> <li><code>Phalcon\\Acl\\Enum::ALLOW</code> (<code>1</code>)</li> <li><code>Phalcon\\Acl\\Enum::DENY</code> (<code>0</code> - default)</li> </ul> <p>You can use these constants to define access levels for your ACL.</p>"},{"location":"acl/#adding-roles","title":"Adding Roles","text":"<p>As mentioned above, a Phalcon\\Acl\\Role is an object that can or cannot access a set of Component in the access list. </p> <p>There are two ways of adding roles to our list.  * by using a Phalcon\\Acl\\Role object or  * using a string, representing the name of the role </p> <p>To see this in action, using the example outlined above, we will add the relevant Phalcon\\Acl\\Role objects in our list.</p> <p>Role objects. The first parameter is the name of the role, the second the description</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Adapter\\Memory;\nuse Phalcon\\Acl\\Role;\n\n$acl = new Memory();\n\n$roleAdmins     = new Role('admins', 'Administrator Access');\n$roleAccounting = new Role('accounting', 'Accounting Department Access'); \n\n$acl-&gt;addRole($roleAdmins);\n$acl-&gt;addRole($roleAccounting);\n</code></pre> <p>Strings. Add the role with just the name directly to the ACL:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Adapter\\Memory;\n\n$acl = new Memory();\n\n$acl-&gt;addRole('manager');\n$acl-&gt;addRole('guest');\n</code></pre>"},{"location":"acl/#adding-components","title":"Adding Components","text":"<p>A Component is the area of the application where access is controlled. In a MVC application, this would be a Controller. Although not mandatory, the Phalcon\\Acl\\Component class can be used to define components in the application. Also it is important to add related actions to a component so that the ACL can understand what it should control.</p> <p>There are two ways of adding components to our list.  * by using a Phalcon\\Acl\\Component object or  * using a string, representing the name of the role </p> <p>Similar to the <code>addRole</code>, <code>addComponent</code> requires a name for the component and an optional description.</p> <p>Component objects. The first parameter is the name of the component, the second the description</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Adapter\\Memory;\nuse Phalcon\\Acl\\Component;\n\n$acl = new Memory();\n\n$admin   = new Component('admin', 'Administration Pages');\n$reports = new Component('reports', 'Reports Pages');\n\n$acl-&gt;addComponent(\n    $admin,\n    [\n        'dashboard',\n        'users',\n    ]\n);\n\n$acl-&gt;addComponent(\n    $reports,\n    [\n        'list',\n        'add',\n    ]\n);\n</code></pre> <p>Strings. Add the component with just the name directly to the ACL:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Adapter\\Memory;\n\n$acl = new Memory();\n\n$acl-&gt;addComponent(\n    'admin',\n    [\n        'dashboard',\n        'users',\n    ]\n);\n\n$acl-&gt;addComponent(\n    'reports',\n    [\n        'list',\n        'add',\n    ]\n);\n</code></pre>"},{"location":"acl/#defining-access-controls","title":"Defining Access Controls","text":"<p>After both the <code>Roles</code> and <code>Components</code> have been defined, we need to tie them together so that the access list can be created. This is the most important step in the role since a small mistake here can allow access to roles for components that the developer does not intend to. As mentioned earlier, the default access action for Phalcon\\Acl is <code>Phalcon\\Acl\\Enum::DENY</code>, following the white list approach. </p> <p>To tie <code>Roles</code> and <code>Components</code> together we use the <code>allow()</code> and <code>deny()</code> methods exposed by the Phalcon\\Acl\\Memory class.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Adapter\\Memory;\nuse Phalcon\\Acl\\Role;\nuse Phalcon\\Acl\\Component;\n\n$acl = new Memory();\n\n/**\n * Add the roles\n */\n$acl-&gt;addRole('manager');\n$acl-&gt;addRole('accounting');\n$acl-&gt;addRole('guest');\n\n\n/**\n * Add the Components\n */\n\n$acl-&gt;addComponent(\n    'admin',\n    [\n        'dashboard',\n        'users',\n        'view',\n    ]\n);\n\n$acl-&gt;addComponent(\n    'reports',\n    [\n        'list',\n        'add',\n        'view',\n    ]\n);\n\n$acl-&gt;addComponent(\n    'session',\n    [\n        'login',\n        'logout',\n    ]\n);\n\n/**\n * Now tie them all together \n */\n$acl-&gt;allow('manager', 'admin', 'users');\n$acl-&gt;allow('manager', 'reports', ['list', 'add']);\n$acl-&gt;allow('*', 'session', '*');\n$acl-&gt;allow('*', '*', 'view');\n\n$acl-&gt;deny('guest', '*', 'view');\n</code></pre> <p>What the above lines tell us:</p> <pre><code>$acl-&gt;allow('manager', 'admin', 'users');\n</code></pre> <p>For the <code>manager</code> role, allow access to the <code>admin</code> component and <code>users</code> action. To bring this into perspective with a MVC application, the above line says that the group <code>manager</code> is allowed to access the <code>admin</code> controller and <code>users</code> action.</p> <pre><code>$acl-&gt;allow('manager', 'reports', ['list', 'add']);\n</code></pre> <p>You can also pass an array as the <code>action</code> parameter when invoking the <code>allow()</code> command. The above means that for the <code>manager</code> role, allow access to the <code>reports</code> component and <code>list</code> and <code>add</code> actions. Again to bring this into perspective with a MVC application, the above line says that the group <code>manager</code> is allowed to access the <code>reports</code> controller and <code>list</code> and <code>add</code> actions. </p> <pre><code>$acl-&gt;allow('*', 'session', '*');\n</code></pre> <p>Wildcards can also be used to do mass matching for roles, components or actions. In the above example, we allow every role to access every action in the <code>session</code> component. This command will give access to the <code>manager</code>, <code>accounting</code> and <code>guest</code> roles, access to the <code>session</code> component and to the <code>login</code> and <code>logout</code> actions. </p> <pre><code>$acl-&gt;allow('*', '*', 'view');\n</code></pre> <p>Similarly, the above gives access to any role, any component that has the <code>view</code> action. In a MVC application, the above is the equivalent of allowing any group to access any controller that exposes a <code>viewAction</code>. </p> <p>NOTE</p> <p>Please be VERY careful when using the <code>*</code> wildcard. It is very easy to make a mistake and the wildcard, although it seems convenient, it may allow users to access areas of your application that they are not supposed to. The best way to be 100% sure is to write tests specifically to test the permissions and the ACL. These can be done in the <code>unit</code> test suite by instantiating the component and then checking the <code>isAllowed()</code> if it is <code>true</code> or <code>false</code>.</p> <p>There are plenty of tests in our GitHub repository (<code>tests</code> folder) to offer guidance and ideas.</p> <pre><code>$acl-&gt;deny('guest', '*', 'view');\n</code></pre> <p>For the <code>guest</code> role, we deny access to all components with the <code>view</code> action. Despite the fact that the default access level is <code>Acl\\Enum::DENY</code> in our example above, we specifically allowed the <code>view</code> action to all roles and components. This includes the <code>guest</code> role. We want to allow the <code>guest</code> role access only to the <code>session</code> component and the <code>login</code> and <code>logout</code> actions, since <code>guests</code> are not logged into our application. </p> <pre><code>$acl-&gt;allow('*', '*', 'view');\n</code></pre> <p>This gives access to the <code>view</code> access to everyone, but we want the <code>guest</code> role to be excluded from that so the following line does what we need.</p> <pre><code>$acl-&gt;deny('guest', '*', 'view');\n</code></pre>"},{"location":"acl/#querying","title":"Querying","text":"<p>Once the list has been defined, we can query it to check if a particular role has access to a particular component and action. To do so, we need to use the <code>isAllowed()</code> method.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Adapter\\Memory;\nuse Phalcon\\Acl\\Role;\nuse Phalcon\\Acl\\Component;\n\n$acl = new Memory();\n\n/**\n * Setup the ACL\n */\n$acl-&gt;addRole('manager');\n$acl-&gt;addRole('accounting');\n$acl-&gt;addRole('guest');\n\n$acl-&gt;addComponent(\n    'admin',\n    [\n        'dashboard',\n        'users',\n        'view',\n    ]\n);\n\n$acl-&gt;addComponent(\n    'reports',\n    [\n        'list',\n        'add',\n        'view',\n    ]\n);\n\n$acl-&gt;addComponent(\n    'session',\n    [\n        'login',\n        'logout',\n    ]\n);\n\n$acl-&gt;allow('manager', 'admin', 'users');\n$acl-&gt;allow('manager', 'reports', ['list', 'add']);\n$acl-&gt;allow('*', 'session', '*');\n$acl-&gt;allow('*', '*', 'view');\n\n$acl-&gt;deny('guest', '*', 'view');\n\n// ....\n\n\n\n// true - defined explicitly\n$acl-&gt;isAllowed('manager', 'admin', 'dashboard');\n\n// true - defined with wildcard\n$acl-&gt;isAllowed('manager', 'session', 'login');\n\n// true - defined with wildcard\n$acl-&gt;isAllowed('accounting', 'reports', 'view');\n\n// false - defined explicitly\n$acl-&gt;isAllowed('guest', 'reports', 'view');\n\n// false - default access level\n$acl-&gt;isAllowed('guest', 'reports', 'add');\n</code></pre>"},{"location":"acl/#function-based-access","title":"Function Based Access","text":"<p>Depending on the needs of your application, you might need another layer of calculations to allow or deny access to users through the ACL. The method <code>isAllowed()</code> accepts a 4th parameter which is a callable such as an anonymous function.</p> <p>To take advantage of this functionality, you will need to define your function when calling the <code>allow()</code> method for the role and component you need. Assume that we need to allow access to all <code>manager</code> roles to the <code>admin</code> component except if their name is 'Bob' (Poor Bob!). To achieve this we will register an anonymous function that will check this condition.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Adapter\\Memory;\nuse Phalcon\\Acl\\Role;\nuse Phalcon\\Acl\\Component;\n\n$acl = new Memory();\n\n/**\n * Setup the ACL\n */\n$acl-&gt;addRole('manager');\n\n$acl-&gt;addComponent(\n    'admin',\n    [\n        'dashboard',\n        'users',\n        'view',\n    ]\n);\n\n// Set access level for role into components with custom function\n$acl-&gt;allow(\n    'manager',\n    'admin',\n    'dashboard',\n    function ($name) {\n        return boolval('Bob' !== $name);\n    }\n);\n</code></pre> <p>Now that the callable is defined in the ACL, we will need to call the <code>isAllowed()</code> method with an array as the fourth parameter:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Adapter\\Memory;\nuse Phalcon\\Acl\\Role;\nuse Phalcon\\Acl\\Component;\n\n$acl = new Memory();\n\n/**\n * Setup the ACL\n */\n$acl-&gt;addRole('manager');\n\n$acl-&gt;addComponent(\n    'admin',\n    [\n        'dashboard',\n        'users',\n        'view',\n    ]\n);\n\n// Set access level for role into components with custom function\n$acl-&gt;allow(\n    'manager',\n    'admin',\n    'dashboard',\n    function ($name) {\n        return boolval('Bob' !== $name);\n    }\n);\n\n// Returns true\n$acl-&gt;isAllowed(\n    'manager',\n    'admin',\n    'dashboard',\n    [\n        'name' =&gt; 'John',\n    ]\n);\n\n// Returns false\n$acl-&gt;isAllowed(\n    'manager',\n    'admin',\n    'dashboard',\n    [\n        'name' =&gt; 'Bob',\n    ]\n);\n</code></pre> <p>NOTE</p> <p>The fourth parameter must be an array. Each array element represents a parameter that your anonymous function accepts. The key of the element is the name of the parameter, while the value is what will be passed as the value of that the parameter of to the function.</p> <p>You can also omit to pass the fourth parameter to <code>isAllowed()</code> if you wish. The default action for a call to <code>isAllowed()</code> without the last parameter is <code>Acl\\Enum::DENY</code>. To change this behavior, you can make a call to <code>setNoArgumentsDefaultAction()</code>: </p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Enum;\nuse Phalcon\\Acl\\Adapter\\Memory;\nuse Phalcon\\Acl\\Role;\nuse Phalcon\\Acl\\Component;\n\n$acl = new Memory();\n\n/**\n * Setup the ACL\n */\n$acl-&gt;addRole('manager');\n\n$acl-&gt;addComponent(\n    'admin',\n    [\n        'dashboard',\n        'users',\n        'view',\n    ]\n);\n\n// Set access level for role into components with custom function\n$acl-&gt;allow(\n    'manager',\n    'admin',\n    'dashboard',\n    function ($name) {\n        return boolval('Bob' !== $name);\n    }\n);\n\n// Returns false\n$acl-&gt;isAllowed('manager', 'admin', 'dashboard');\n\n$acl-&gt;setNoArgumentsDefaultAction(\n    Enum::ALLOW\n);\n\n// Returns true\n$acl-&gt;isAllowed('manager', 'admin', 'dashboard');\n</code></pre>"},{"location":"acl/#custom-objects","title":"Custom Objects","text":"<p>Phalcon allows developers to define their own role and component objects. These objects must implement the supplied interfaces:</p> <ul> <li>Phalcon\\Acl\\RoleAware for Role</li> <li>Phalcon\\Acl\\ComponentAware for Component</li> </ul>"},{"location":"acl/#role","title":"Role","text":"<p>We can implement the Phalcon\\Acl\\RoleAware in our custom class with its own logic. The example below shows a new role object called <code>ManagerRole</code>: </p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\RoleAware;\n\n// Create our class which will be used as roleName\nclass ManagerRole implements RoleAware\n{\n    protected $id;\n\n    protected $roleName;\n\n    public function __construct($id, $roleName)\n    {\n        $this-&gt;id       = $id;\n        $this-&gt;roleName = $roleName;\n    }\n\n    public function getId()\n    {\n        return $this-&gt;id;\n    }\n\n    // Implemented function from RoleAware Interface\n    public function getRoleName()\n    {\n        return $this-&gt;roleName;\n    }\n}\n</code></pre>"},{"location":"acl/#component","title":"Component","text":"<p>We can implement the Phalcon\\Acl\\ComponentAware in our custom class with its own logic. The example below shows a new role object called <code>ReportsComponent</code>: </p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\ComponentAware;\n\n// Create our class which will be used as componentName\nclass ReportsComponent implements ComponentAware\n{\n    protected $id;\n\n    protected $componentName;\n\n    protected $userId;\n\n    public function __construct($id, $componentName, $userId)\n    {\n        $this-&gt;id            = $id;\n        $this-&gt;componentName = $componentName;\n        $this-&gt;userId        = $userId;\n    }\n\n    public function getId()\n    {\n        return $this-&gt;id;\n    }\n\n    public function getUserId()\n    {\n        return $this-&gt;userId;\n    }\n\n    // Implemented function from ComponentAware Interface\n    public function getComponentName()\n    {\n        return $this-&gt;componentName;\n    }\n}\n</code></pre>"},{"location":"acl/#acl","title":"ACL","text":"<p>These objects can now be used in our ACL. </p> <pre><code>&lt;?php\n\nuse ManagerRole;\nuse Phalcon\\Acl\\Adapter\\Memory;\nuse Phalcon\\Acl\\Role;\nuse Phalcon\\Acl\\Component;\nuse ReportsComponent;\n\n$acl = new Memory();\n\n/**\n * Add the roles\n */\n$acl-&gt;addRole('manager');\n\n/**\n * Add the Components\n */\n$acl-&gt;addComponent(\n    'reports',\n    [\n        'list',\n        'add',\n        'view',\n    ]\n);\n\n/**\n * Now tie them all together with a custom function. The ManagerRole and\n * ModelSbject parameters are necessary for the custom function to work \n */\n$acl-&gt;allow(\n    'manager', \n    'reports', \n    'list',\n    function (ManagerRole $manager, ModelComponent $model) {\n        return boolval($manager-&gt;getId() === $model-&gt;getUserId());\n    }\n);\n\n// Create the custom objects\n$levelOne = new ManagerRole(1, 'manager-1');\n$levelTwo = new ManagerRole(2, 'manager');\n$admin    = new ManagerRole(3, 'manager');\n\n// id - name - userId\n$reports  = new ModelComponent(2, 'reports', 2);\n\n// Check whether our user objects have access \n// Returns false\n$acl-&gt;isAllowed($levelOne, $reports, 'list');\n\n// Returns true\n$acl-&gt;isAllowed($levelTwo, $reports, 'list');\n\n// Returns false\n$acl-&gt;isAllowed($admin, $reports, 'list');\n</code></pre> <p>The second call for <code>$levelTwo</code> evaluates <code>true</code> since the <code>getUserId()</code> returns <code>2</code> which in turn is evaluated in our custom function. Also note that in the custom function for <code>allow()</code> the objects are automatically bound, providing all the data necessary for the custom function to work. The custom function can accept any number of additional parameters. The order of the parameters defined in the <code>function()</code> constructor does not matter, because the objects will be automatically discovered and bound.</p>"},{"location":"acl/#roles-inheritance","title":"Roles Inheritance","text":"<p>To remove duplication and increase efficiency in your application, the ACL offers inheritance in roles. This means that you can define one Phalcon\\Acl\\Role as a base and after that inherit from it offering access to supersets or subsets of components. To use role inheritance, you need, you need to pass the inherited role as the second parameter of the method call, when adding that role in the list.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Adapter\\Memory;\nuse Phalcon\\Acl\\Role;\n\n$acl = new Memory();\n\n/**\n * Create the roles\n */\n$manager    = new Role('Managers');\n$accounting = new Role('Accounting Department');\n$guest      = new Role('Guests');\n\n/**\n * Add the `guest` role to the ACL \n */\n$acl-&gt;addRole($guest);\n\n/**\n * Add the `accounting` inheriting from `guest` \n */\n$acl-&gt;addRole($accounting, $guest);\n\n/**\n * Add the `manager` inheriting from `accounting` \n */\n$acl-&gt;addRole($manager, $accounting);\n</code></pre> <p>Whatever access <code>guests</code> have will be propagated to <code>accounting</code> and in turn <code>accounting</code> will be propagated to <code>manager</code>. You can also pass an array of roles as the second parameter of <code>addRole</code> offering more flexibility.</p>"},{"location":"acl/#roles-relationships","title":"Roles Relationships","text":"<p>Based on the application design, you might prefer to add first all the roles and then define the relationship between them.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Adapter\\Memory;\nuse Phalcon\\Acl\\Role;\n\n$acl = new Memory();\n\n/**\n * Create the roles\n */\n$manager    = new Role('Managers');\n$accounting = new Role('Accounting Department');\n$guest      = new Role('Guests');\n\n/**\n * Add all the roles\n */\n$acl-&gt;addRole($manager);\n$acl-&gt;addRole($accounting);\n$acl-&gt;addRole($guest);\n\n/**\n * Add the inheritance \n */\n$acl-&gt;addInherit($manager, $accounting);\n$acl-&gt;addInherit($accounting, $guest);\n</code></pre>"},{"location":"acl/#serialization","title":"Serialization","text":"<p>Phalcon\\Acl can be serialized and stored in a cache system to improve efficiency. You can store the serialized object in APC, session, file system, database, Redis etc. This way you can retrieve the ACL quickly without having to read the underlying data that create the ACL nor will you have to compute the ACL in every request.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Adapter\\Memory;\n\n$aclFile = 'app/security/acl.cache';\n// Check whether ACL data already exist\nif (true !== is_file($aclFile)) {\n\n    // The ACL does not exist - build it\n    $acl = new Memory();\n\n    // ... Define roles, components, access, etc\n\n    // Store serialized list into plain file\n    file_put_contents(\n        $aclFile,\n        serialize($acl)\n    );\n} else {\n    // Restore ACL object from serialized file\n    $acl = unserialize(\n        file_get_contents($aclFile)\n    );\n}\n\n// Use ACL list as needed\nif (true === $acl-&gt;isAllowed('manager', 'admin', 'dashboard')) {\n    echo 'Access granted!';\n} else {\n    echo 'Access denied :(';\n}\n</code></pre> <p>It is a good practice to not use serialization of the ACL during development, to ensure that your ACL is rebuilt with every request, while other adapters or means of serializing and storing the ACL in production.</p>"},{"location":"acl/#events","title":"Events","text":"<p>Phalcon\\Acl can work in conjunction with the Events Manager if present, to fire events to your application. Events are triggered using the type <code>acl</code>. Events that return <code>false</code> can stop the active role. The following events are available:</p> Event Name Triggered Can stop role? <code>afterCheckAccess</code> Triggered after checking if a role/component has access No <code>beforeCheckAccess</code> Triggered before checking if a role/component has access Yes <p>The following example demonstrates how to attach listeners to the ACL:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Adapter\\Memory;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager;\n\n// ...\n\n// Create an event manager\n$eventsManager = new Manager();\n\n// Attach a listener for type 'acl'\n$eventsManager-&gt;attach(\n    'acl:beforeCheckAccess',\n    function (Event $event, $acl) {\n        echo $acl-&gt;getActiveRole() . PHP_EOL;\n\n        echo $acl-&gt;getActiveComponent() . PHP_EOL;\n\n        echo $acl-&gt;getActiveAccess() . PHP_EOL;\n    }\n);\n\n$acl = new Memory();\n\n// Setup the $acl\n// ...\n\n// Bind the eventsManager to the ACL component\n$acl-&gt;setEventsManager($eventsManager);\n</code></pre>"},{"location":"acl/#exceptions","title":"Exceptions","text":"<p>Any exceptions thrown in the <code>Phalcon\\Acl</code> namespace will be of type Phalcon\\Acl\\Exception. You can use this exception to selectively catch exceptions thrown only from this component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Adapter\\Memory;\nuse Phalcon\\Acl\\Component;\nuse Phalcon\\Acl\\Exception;\n\ntry {\n    $acl   = new Memory();\n    $admin = new Component('*');\n} catch (Exception $ex) {\n    echo $ex-&gt;getMessage();\n}\n</code></pre>"},{"location":"acl/#custom","title":"Custom","text":"<p>The Phalcon\\Acl\\AdapterInterface interface must be implemented in order to create your own ACL adapters or extend the existing ones.</p>"},{"location":"annotations/","title":"Annotations","text":""},{"location":"annotations/#overview","title":"Overview","text":"<p>Phalcon introduced the first annotations parser component written in C for PHP. The <code>Phalcon\\Annotations</code> namespace contains general purpose components that offer an easy way to parse and cache annotations in PHP applications.</p>"},{"location":"annotations/#usage","title":"Usage","text":"<p>Annotations are read from docblocks in classes, methods and properties. An annotation can be placed at any position in the docblock:</p> <pre><code>&lt;?php\n\n/**\n * This is the class description\n *\n * @AmazingClass(true)\n */\nclass Example\n{\n    /**\n     * This a property with a special feature\n     *\n     * @SpecialFeature\n     */\n    protected $someProperty;\n\n    /**\n     * This is a method\n     *\n     * @SpecialFeature\n     */\n    public function someMethod()\n    {\n        // ...\n    }\n}\n</code></pre> <p>An annotation has the following syntax:</p> <pre><code>/**\n * @Annotation-Name\n * @Annotation-Name(param1, param2, ...)\n */\n</code></pre> <p>Also, an annotation can be placed at any part of a docblock:</p> <pre><code>&lt;?php\n\n/**\n * This a property with a special feature\n *\n * @SpecialFeature\n *\n * More comments\n *\n * @AnotherSpecialFeature(true)\n */\n</code></pre> <p>The parser is highly flexible, the following docblock is valid:</p> <pre><code>&lt;?php\n\n/**\n * This a property with a special feature @SpecialFeature({\nsomeParameter='the value', false\n\n })  More comments @AnotherSpecialFeature(true) @MoreAnnotations\n **/\n</code></pre> <p>However, to make the code more maintainable and understandable it is recommended to place annotations at the end of the docblock:</p> <pre><code>&lt;?php\n\n/**\n * This a property with a special feature\n * More comments\n *\n * @SpecialFeature({someParameter='the value', false})\n * @AnotherSpecialFeature(true)\n */\n</code></pre> <p>An example for a model is:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\n/**\n * Customers\n *\n * Represents a customer record\n *\n * @Source('co_customers');\n * @HasMany(\"cst_id\", \"Invoices\", \"inv_cst_id\")\n */\nclass Customers extends Model\n{\n    /**\n     * @Primary\n     * @Identity\n     * @Column(type=\"integer\", nullable=false, column=\"cst_id\")\n     */\n    public $id;\n\n    /**\n     * @Column(type=\"string\", nullable=false, column=\"cst_name_first\")\n     */\n    public $nameFirst;\n\n    /**\n     * @Column(type=\"string\", nullable=false, column=\"cst_name_last\")\n     */\n    public $nameLast;\n}\n</code></pre>"},{"location":"annotations/#types","title":"Types","text":"<p>Annotations may have parameters or not. A parameter could be a simple literal (<code>strings</code>, <code>number</code>, <code>boolean</code>, <code>null</code>), an <code>array</code>, a hashed list or other annotation:</p> <p><pre><code>/**\n * @SomeAnnotation\n */\n</code></pre> Simple Annotation</p> <p><pre><code>/**\n * @SomeAnnotation('hello', 'world', 1, 2, 3, false, true)\n */\n</code></pre> Annotation with parameters</p> <p><pre><code>/**\n * @SomeAnnotation(first='hello', second='world', third=1)\n * @SomeAnnotation(first: 'hello', second: 'world', third: 1)\n */\n</code></pre> Annotation with named parameters</p> <p><pre><code>/**\n * @SomeAnnotation([1, 2, 3, 4])\n * @SomeAnnotation({1, 2, 3, 4})\n */\n</code></pre> Passing an array</p> <p><pre><code>/**\n * @SomeAnnotation({first=1, second=2, third=3})\n * @SomeAnnotation({'first'=1, 'second'=2, 'third'=3})\n * @SomeAnnotation({'first': 1, 'second': 2, 'third': 3})\n * @SomeAnnotation(['first': 1, 'second': 2, 'third': 3])\n */\n</code></pre> Passing a hash as parameter</p> <p><pre><code>/**\n * @SomeAnnotation({'name'='SomeName', 'other'={\n *     'foo1': 'bar1', 'foo2': 'bar2', {1, 2, 3},\n * }})\n */\n</code></pre> Nested arrays/hashes</p> <p><pre><code>/**\n * @SomeAnnotation(first=@AnotherAnnotation(1, 2, 3))\n */\n</code></pre> Nested Annotations</p>"},{"location":"annotations/#adapters","title":"Adapters","text":"<p>This component makes use of adapters to cache or no cache the parsed and processed annotations improving performance:</p> Adapter Description Phalcon\\Annotations\\Adapter\\Apcu Use APCu to store parsed and processed annotations (production) Phalcon\\Annotations\\Adapter\\Memory Use memory to store annotations (development) Phalcon\\Annotations\\Adapter\\Stream Use a file stream to store annotations. Must be used with a byte-code cache."},{"location":"annotations/#apcu","title":"Apcu","text":"<p>Phalcon\\Annotations\\Adapter\\Apcu stores the parsed and processed annotations using the APCu cache. This adapter is suitable for production systems. However, once the web server restarts, the cache will be cleared and will have to be rebuilt. The adapter accepts two parameters in the constructor's <code>options</code> array: - <code>prefix</code> - the prefix for the key stored - <code>lifetime</code> - the cache lifetime</p> <pre><code>&lt;?php\n\nuse Phalcon\\Annotations\\Adapter\\Apcu;\n\n$adapter = new Apcu(\n    [\n        'prefix'   =&gt; 'my-prefix',\n        'lifetime' =&gt; 3600,\n    ]\n);\n</code></pre> <p>Internally, the adapter stores data prefixing every key with <code>_PHAN</code>. This setting cannot be changed. It however gives you the option to scan APCu for keys that are prefixed with <code>_PHAN</code> and clear them if needed.</p> <pre><code>&lt;?php\n\nuse APCuIterator;\n\n$result   = true;\n$pattern  = \"/^_PHAN/\";\n$iterator = new APCuIterator($pattern);\n\nif (true === is_object($iterator)) {\n    return false;\n}\n\nforeach ($iterator as $item) {\n    if (true !== apcu_delete($item[\"key\"])) {\n        $result = false;\n    }\n}\n\nreturn $result;\n</code></pre>"},{"location":"annotations/#memory","title":"Memory","text":"<p>Phalcon\\Annotations\\Adapter\\Memory stores the parsed and processed annotations in memory. This adapter is suitable for development systems. The cache is rebuilt on every request, and therefore can immediately reflect changes while developing your application.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Annotations\\Adapter\\Memory;\n\n$adapter = new Memory();\n</code></pre>"},{"location":"annotations/#stream","title":"Stream","text":"<p>Phalcon\\Annotations\\Adapter\\Stream stores the parsed and processed annotations in a file on the server. This adapter can be used in production systems but it will increase the I/O since for every request the annotations cache files will need to be read from the file system. The adapter accepts one parameter in the constructor's <code>options</code> array: - <code>annotationsDir</code> - the directory to store the annotations cache</p> <pre><code>&lt;?php\n\nuse Phalcon\\Annotations\\Adapter\\Stream;\n\n$adapter = new Stream(\n    [\n        'annotationsDir' =&gt; '/app/storage/cache/annotations',\n    ]\n);\n</code></pre> <p>If there is a problem with storing the data in the folder due to permissions or any other reason, a Phalcon\\Annotations\\Exception will be thrown.</p>"},{"location":"annotations/#custom","title":"Custom","text":"<p>Phalcon\\Annotations\\Adapter\\AdapterInterface is available. Extending this interface will allow you to create custom adapters. </p>"},{"location":"annotations/#factory","title":"Factory","text":""},{"location":"annotations/#newinstance","title":"<code>newInstance</code>","text":"<p>We can easily create an annotations adapter class using the <code>new</code> keyword. However Phalcon offers the Phalcon\\Annotations\\AnnotationsFactory class, so that developers can easily instantiate annotations adapters. The factory will accept an array of options which will in turn be used to instantiate the necessary adapter class. The factory always returns a new instance that implements the Phalcon\\Annotations\\Adapter\\AdapterInterface. The names of the preconfigured adapters are:</p> Name Adapter <code>apcu</code> Phalcon\\Annotations\\Adapter\\Apcu <code>memory</code> Phalcon\\Annotations\\Adapter\\Memory <code>stream</code> Phalcon\\Annotations\\Adapter\\Stream <p>The example below shows how you can create an Apcu annotations adapter:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Annotations\\AnnotationsFactory;\n\n$options = [\n    'prefix'   =&gt; 'my-prefix',\n    'lifetime' =&gt; 3600,\n];\n\n$factory = new AdapterFactory();\n$apcu    = $factory-&gt;newInstance('apcu', $options);\n</code></pre>"},{"location":"annotations/#load","title":"<code>load</code>","text":"<p>The Phalcon\\Annotations\\AnnotationsFactory also offers the <code>load</code> method, which accepts a configuration object. This object can be an array or a Phalcon\\Config object, with directives that are used to set up the adapter. The object requires the <code>adapter</code> element, as well as the <code>options</code> element with the necessary directives.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Annotations\\AnnotationsFactory;\n\n$options = [\n    'adapter' =&gt; 'apcu',\n    'options' =&gt; [\n        'prefix'   =&gt; 'my-prefix',\n        'lifetime' =&gt; 3600,\n    ]\n];\n\n$factory = new AdapterFactory();\n$apcu    = $factory-&gt;load($options);\n</code></pre>"},{"location":"annotations/#reading-annotations","title":"Reading Annotations","text":"<p>A reflector is implemented to easily get the annotations defined on a class using an object-oriented interface. Phalcon\\Annotations\\Reader is used along with Phalcon\\Annotations\\Reflection. They also utilize the collection Phalcon\\Annotations\\Collection that contains Phalcon\\Annotations\\Annotation objects once the annotations are parsed.</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Annotations\\Adapter\\Memory;\n\n$adapter = new Memory();\n\n$reflector   = $adapter-&gt;get('Invoices');\n$annotations = $reflector-&gt;getClassAnnotations();\n\nforeach ($annotations as $annotation) {\n    echo $annotation-&gt;getName(), PHP_EOL;\n    echo $annotation-&gt;numberArguments(), PHP_EOL;\n\n    print_r($annotation-&gt;getArguments());\n}\n</code></pre> In the above example we first create the memory annotations adapter. We then call <code>get</code> on it to load the annotations from the <code>Invoices</code> class. The <code>getClassAnnotations</code> will return a Phalcon\\Annotations\\Collection class. We iterate through the collection and print out the name (<code>getName</code>), the number arguments (<code>numberArguments</code>) and then we print all the arguments (<code>getArguments</code>) on screen.</p> <p>The annotation reading process is very fast, however, for performance reasons it is recommended to store the parsed annotations using an adapter so as to reduce unnecessary CPU cycles for parsing.</p>"},{"location":"annotations/#exceptions","title":"Exceptions","text":"<p>Any exceptions thrown in the <code>Phalcon\\Annotations</code> namespace will be of type Phalcon\\Annotations\\Exception. You can use these exceptions to selectively catch exceptions thrown only from this component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Annotations\\Adapter\\Memory;\nuse Phalcon\\Annotations\\Exception;\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    public function index()\n    {\n        try {\n            $adapter = new Memory();\n\n            $reflector   = $adapter-&gt;get('Invoices');\n            $annotations = $reflector-&gt;getClassAnnotations();\n\n            foreach ($annotations as $annotation) {\n                echo $annotation-&gt;getExpression('unknown-expression');\n            }\n        } catch (Exception $ex) {\n            echo $ex-&gt;getMessage();\n        }\n    }\n}\n</code></pre>"},{"location":"annotations/#examples","title":"Examples","text":"<p>Controller based access</p> <p>You can use annotations to define which areas are controlled by the ACL. We can do this by registering a plugin in the events manager listening to the <code>beforeExceuteRoute</code> event, or simply implement the method in our base controller.</p> <p>First we need to set the annotations manager in our DI container:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Annotations\\Adapter\\Apcu;\n\n$container = new FactoryDefault();\n\n$container-&gt;set(\n    'annotations',\n    function () {\n        return new Apcu(\n            [\n                'lifetime' =&gt; 86400\n            ]\n        );\n    }\n);\n</code></pre> <p>and now in the base controller we implement the <code>beforeExceuteRoute</code> method:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Controllers;\n\nuse Phalcon\\Annotations\\Adapter\\Apcu;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\Controller\nuse MyApp\\Components\\Auth;\n\n/**\n * @property Apcu $annotations\n * @property Auth $auth \n */\nclass BaseController extends Controller\n{\n    /**\n     * @param Event $event\n     * @param Dispatcher $dispatcher\n     *\n     * @return bool\n     */\n    public function beforeExceuteRoute(\n        Dispatcher $dispatcher\n    ) {\n        $controllerName = $dispatcher-&gt;getControllerClass();\n\n        $annotations = $this\n            -&gt;annotations\n            -&gt;get($controllerName)\n        ;\n\n        $exists = $annotations\n            -&gt;getClassAnnotations()\n            -&gt;has('Private')\n        ;\n\n        if (true !== $exists) {\n            return true;\n        }\n\n        if (true === $this-&gt;auth-&gt;isLoggedIn()) {\n            return true;\n        }\n\n        $dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'session',\n                'action'     =&gt; 'login',\n            ]\n        );\n\n        return false;\n    }\n}\n</code></pre> <p>NOTE</p> <p>You can also implement the above to a listener and use the <code>beforeDispatch</code> event if you wish.</p> <p>and in our controllers we can specify:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Controllers;\n\nuse MyApp\\Controllers\\BaseController;\n\n/**\n * @Private(true) \n */\nclass Invoices extends BaseController\n{\n    public function indexAction()\n    {\n    }\n}\n</code></pre> <p>Group based access</p> <p>You might want to expand on the above and offer a more granular access control for your application. For this, we will also use the <code>beforeExceuteRoute</code> in the controller but will add the access metadata on each action. If we need a specific controller to be locked we can also use the <code>initialize</code> method.</p> <p>First we need to set the annotations manager in our DI container:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Annotations\\Adapter\\Apcu;\n\n$container = new FactoryDefault();\n\n$container-&gt;set(\n    'annotations',\n    function () {\n        return new Apcu(\n            [\n                'lifetime' =&gt; 86400\n            ]\n        );\n    }\n);\n</code></pre> <p>and now in the base controller we implement the <code>beforeExceuteRoute</code> method:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Controllers;\n\nuse Phalcon\\Annotations\\Adapter\\Apcu;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\Controller;\nuse MyApp\\Components\\Auth;\n\n/**\n * @property Apcu $annotations\n * @property Auth $auth \n */\nclass BaseController extends Controller\n{\n    /**\n     * @param Event $event\n     * @param Dispatcher $dispatcher\n     *\n     * @return bool\n     */\n    public function beforeExceuteRoute(\n        Dispatcher $dispatcher\n    ) {\n        $controllerName = $dispatcher-&gt;getControllerClass();\n        $actionName     = $dispatcher-&gt;getActionName()\n                        . 'Action';\n\n        $data = $this\n            -&gt;annotations\n            -&gt;getMethod($controllerName, $actionName)\n        ;\n        $access    = $data-&gt;get('Access');\n        $aclGroups = $access-&gt;getArguments();\n\n        $user   = $this-&gt;acl-&gt;getUser();\n        $groups = $user-&gt;getRelated('groups');\n\n        $userGroups = [];\n        foreach ($groups as $group) {\n            $userGroups[] = $group-&gt;grp_name;\n        }\n\n        $allowed = array_intersect($userGroups, $aclGroups);\n        $allowed = (count($allowed) &gt; 0);\n\n        if (true === $allowed) {\n            return true;\n        }\n\n        $dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'session',\n                'action'     =&gt; 'login',\n            ]\n        );\n\n        return false;\n    }\n}\n</code></pre> <p>and in our controllers:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Controllers;\n\nuse MyApp\\Controllers\\BaseController;\n\n/**\n * @Private(true) \n */\nclass Invoices extends BaseController\n{\n    /**\n     * @Access(\n     *     'Administrators',\n     *     'Accounting',\n     *     'Users',\n     *     'Guests'\n     * )\n     */\n    public function indexAction()\n    {\n    }\n\n    /**\n     * @Access(\n     *     'Administrators',\n     *     'Accounting',\n     * )\n     */\n    public function listAction()\n    {\n    }\n\n    /**\n     * @Access(\n     *     'Administrators',\n     *     'Accounting',\n     * )\n     */\n    public function viewAction()\n    {\n    }\n}\n</code></pre>"},{"location":"annotations/#additional-resources","title":"Additional Resources","text":"<ul> <li>Tutorial: Creating a custom model's initializer with Annotations</li> </ul>"},{"location":"application-cli/","title":"CLI Application","text":""},{"location":"application-cli/#overview","title":"Overview","text":"<p>CLI stands for Command Line Interface. CLI applications are executed from the command line or a shell prompt. One of the benefits of CLI applications is that they do not have a view layer (only potentially echoing output on screen) and can be run more than one at a time. Some of the common usages are cron job tasks, manipulation scripts, import data scripts, command utilities and more. </p>"},{"location":"application-cli/#structure","title":"Structure","text":"<p>You can create a CLI application in Phalcon, using the Phalcon\\Cli\\Console class. This class extends from the main abstract application class, and uses a directory in which the Task scripts are located. Task scripts are classes that extend Phalcon\\Cli\\Task and contain the code that we need executed.</p> <p>The directory structure of a CLI application can look like this:</p> <pre><code>src/tasks/MainTask.php\nphp cli.php\n</code></pre> <p>In the above example, the <code>cli.php</code> is the entry point of our application, while the <code>src/tasks</code> directory contains all the task classes that handle each command.</p> <p>NOTE</p> <p>Each task file and class must be suffixed with <code>Task</code>. The default task (if no parameters have been passed) is <code>MainTask</code> and the default method to be executed inside a task is <code>main</code> </p>"},{"location":"application-cli/#bootstrap","title":"Bootstrap","text":"<p>As seen above, the entry point of our CLI application is the <code>cli.php</code>. In that script, we need to bootstrap our application with relevant services, directives etc. This is similar to the all familiar <code>index.php</code> that we use for MVC applications.</p> <pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nuse Exception;\nuse Phalcon\\Cli\\Console;\nuse Phalcon\\Cli\\Dispatcher;\nuse Phalcon\\Di\\FactoryDefault\\Cli as CliDI;\nuse Phalcon\\Exception as PhalconException;\nuse Phalcon\\Loader;\nuse Throwable;\n\n$loader = new Loader();\n$loader-&gt;registerNamespaces(\n    [\n       'MyApp' =&gt; 'src/',\n    ]\n);\n$loader-&gt;register();\n\n$container  = new CliDI();\n$dispatcher = new Dispatcher();\n\n$dispatcher-&gt;setDefaultNamespace('MyApp\\Tasks');\n$container-&gt;setShared('dispatcher', $dispatcher);\n\n$container-&gt;setShared('config', function () {\n    return include 'app/config/config.php';\n});\n\n\n$console = new Console($container);\n\n$arguments = [];\nforeach ($argv as $k =&gt; $arg) {\n    if ($k === 1) {\n        $arguments['task'] = $arg;\n    } elseif ($k === 2) {\n        $arguments['action'] = $arg;\n    } elseif ($k &gt;= 3) {\n        $arguments['params'][] = $arg;\n    }\n}\n\ntry {\n    $console-&gt;handle($arguments);\n} catch (PhalconException $e) {\n    fwrite(STDERR, $e-&gt;getMessage() . PHP_EOL);\n    exit(1);\n} catch (Throwable $throwable) {\n    fwrite(STDERR, $throwable-&gt;getMessage() . PHP_EOL);\n    exit(1);\n} catch (Exception $exception) {\n    fwrite(STDERR, $exception-&gt;getMessage() . PHP_EOL);\n    exit(1);\n}\n</code></pre> <p>Let's look at the code above in more detail.</p> <p>First we need to create all the necessary services for our CLI application. We are going to create a loader to autoload our tasks, the CLI application, a dispatcher and a CLI Console application. These are the minimum amount of services that we need to instantiate to create a CLI application.</p> <p>Loader <pre><code>$loader = new Loader();\n$loader-&gt;registerNamespaces(\n    [\n       'MyApp' =&gt; 'src/',\n    ]\n);\n$loader-&gt;register();\n</code></pre></p> <p>Create the Phalcon autoloader and register the namespace to point to the <code>src/</code> directory.</p> <p>NOTE</p> <p>If you decided to use the Composer autoloader in your <code>composer.json</code>, you do not need to register the loader in this application</p> <p>DI <pre><code>$container  = new CliDI();\n</code></pre> We need a Dependency Injection container. You can use the Phalcon\\Di\\FactoryDefault\\Cli container, which already has services registered for you. Alternatively, you can always use the Phalcon\\Di and register the services you need, one after another. </p> <p>Dispatcher <pre><code>$dispatcher = new Dispatcher();\n\n$dispatcher-&gt;setDefaultNamespace('MyApp\\Tasks');\n$container-&gt;setShared('dispatcher', $dispatcher);\n</code></pre></p> <p>CLI applications need a specific dispatcher. Phalcon\\Cli\\Dispatcher offers the same functionality as the main dispatcher for MVC applications, but it is tailored to CLI applications. As expected, we instantiate the dispatcher object, we set our default namespace and then register it in the DI container.</p> <p>Config <pre><code>$container-&gt;setShared('config', function () {\n    return include 'app/config/config.php';\n});\n</code></pre> The above snippet is optional but will allow you to access any configuration settings you have set up.</p> <p>Make sure to update the include path to be relative to where your <code>cli.php</code> file is.</p> <p>Application <pre><code>$console = new Console($container);\n</code></pre> As mentioned above, a CLI application is handled by the Phalcon\\Cli\\Console class. Here we instantiate it and pass in it the DI container.</p> <p>Arguments Our application needs arguments. These come in the form of :</p> <pre><code>php ./cli.php argument1 argument2 argument3 ...\n</code></pre> <p>The first argument relates to the task to be executed. The second is the action and after that follow the parameters we need to pass. </p> <pre><code>$arguments = [];\nforeach ($argv as $k =&gt; $arg) {\n    if ($k === 1) {\n        $arguments['task'] = $arg;\n    } elseif ($k === 2) {\n        $arguments['action'] = $arg;\n    } elseif ($k &gt;= 3) {\n        $arguments['params'][] = $arg;\n    }\n}\n</code></pre> <p>As you can see in the above, we use the <code>$argv</code> to receive what has been passed through the command line, and we split those arguments accordingly to understand what task and action need to be invoked and with what parameters.</p> <p>So for the following example:</p> <pre><code>php ./cli.php users recalculate 10\n</code></pre> <p>Our application will invoke the <code>UsersTask</code>, call the <code>recalculate</code> action and pass the parameter <code>10</code>.</p> <p>Execution</p> <pre><code>try {\n    $console-&gt;handle($arguments);\n} catch (PhalconException $e) {\n    fwrite(STDERR, $e-&gt;getMessage() . PHP_EOL);\n    exit(1);\n} catch (Throwable $throwable) {\n    fwrite(STDERR, $throwable-&gt;getMessage() . PHP_EOL);\n    exit(1);\n} catch (Exception $exception) {\n    fwrite(STDERR, $exception-&gt;getMessage() . PHP_EOL);\n    exit(1);\n}\n</code></pre> <p>In the code above, we use our console object and call <code>handle</code> with the calculated parameters. The CLI application will do the necessary routing and dispatch the task and action requested. If an exception is thrown, it will be caught by the <code>catch</code> statements and errors will be displayed on screen accordingly.</p>"},{"location":"application-cli/#exceptions","title":"Exceptions","text":"<p>Any exception thrown in the Phalcon\\Cli\\Console component will be of type Phalcon\\Cli\\Console\\Exception, which allows you to trap the exception specifically.</p>"},{"location":"application-cli/#tasks","title":"Tasks","text":"<p>Tasks are the equivalent of controllers in a MVC application. Any CLI application needs at least one task called <code>MainTask</code> and a <code>mainAction</code>. Any task defined needs to have a <code>mainAction</code> which will be called if no action is defined. You are not restricted to the number of actions that each task can contain.</p> <p>An example of a task class (<code>src/Tasks/MainTask.php</code>) is:</p> <pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace MyApp\\Tasks;\n\nuse Phalcon\\Cli\\Task;\n\nclass MainTask extends Task\n{\n    public function mainAction()\n    {\n        echo 'This is the default task and the default action' . PHP_EOL;\n    }\n}\n</code></pre> <p>You can implement your own tasks by either extending the supplied Phalcon\\Cli\\Task or writing your own class implementing the Phalcon\\Cli\\TaskInterface.</p>"},{"location":"application-cli/#actions","title":"Actions","text":"<p>As seen above, we have specified the second parameter to be the action. The task can contain more than one actions.</p> <pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace MyApp\\Tasks;\n\nuse Phalcon\\Cli\\Task;\n\nclass UsersTask extends Task\n{\n    public function mainAction()\n    {\n        echo 'This is the default task and the default action' . PHP_EOL;\n    }\n\n    public function regenerateAction(int $count = 0)\n    {\n        echo 'This is the retenerate action' . PHP_EOL;\n    }\n}\n</code></pre> <p>We can then call the <code>main</code> action (default action):</p> <pre><code>./cli.php users \n</code></pre> <p>or the <code>regenerate</code> action:</p> <pre><code>./cli.php users regenerate\n</code></pre>"},{"location":"application-cli/#parameters","title":"Parameters","text":"<p>You can also pass parameters to action. An example of how to process the parameters can be found above, in the sample bootstrap file. </p> <pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace MyApp\\Tasks;\n\nuse Phalcon\\Cli\\Task;\n\nclass UsersTask extends Task\n{\n    public function mainAction()\n    {\n        echo 'This is the default task and the default action' . PHP_EOL;\n    }\n\n    public function addAction(int $first, int $second)\n    {\n        echo $first + $second . PHP_EOL;\n    }\n}\n</code></pre> <p>We can then run the following command:</p> <pre><code>php cli.php users add 4 5\n\n9\n</code></pre> <p>Parameters can also be accessed through the Phalcon\\Cli\\Dispatcher which is helpful when passing flags in, or an unknown number of parameters.</p> <pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace MyApp\\Tasks;\n\nuse Phalcon\\Cli\\Task;\n\nclass UsersTask extends Task\n{\n    public function mainAction()\n    {\n        print_r( $this-&gt;dispatcher-&gt;getParams() );\n    }\n\n}\n</code></pre> <p>Running this will then output:</p> <pre><code>php cli.php users main additional parameters\n\nArray\n(\n    [0] =&gt; additional\n    [1] =&gt; parameters\n)\n</code></pre>"},{"location":"application-cli/#chain","title":"Chain","text":"<p>You can also chain tasks. To run them one after another, we need to make a small change in our bootstrap: we need to register our application in the DI container:</p> <pre><code>// ...\n$console = new Console($container);\n$container-&gt;setShared('console', $console);\n\n$arguments = [];\n// ...\n</code></pre> <p>Now that the console application is inside the DI container, we can access it from any task. </p> <p>Assume we want to call the <code>printAction()</code> from the <code>Users</code> task, all we have to do is call it using the container.</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Tasks;\n\nuse Phalcon\\Cli\\Console;\nuse Phalcon\\Cli\\Task;\n\n/**\n * @property Console $console\n */\nclass UsersTask extends Task\n{\n    public function mainAction()\n    {\n        echo 'This is the default task and the default action' . PHP_EOL;\n\n        $this-&gt;console-&gt;handle(\n            [\n                'task'   =&gt; 'main',\n                'action' =&gt; 'print',\n            ]\n        );\n    }\n\n    public function printAction()\n    {\n        echo 'I will get printed too!' . PHP_EOL;\n    }\n}\n</code></pre> <p>This technique allows you to run any task and any action from any other task. However, it is not recommended because it could lead to maintenance nightmares. It is better to extend Phalcon\\Cli\\Task and implement your logic there.</p>"},{"location":"application-cli/#modules","title":"Modules","text":"<p>CLI applications can also handle different modules, the same as MVC applications. You can register different modules in your CLI application, to handle different paths of your CLI application. This allows for better organization of your code and grouping of tasks.</p> <p>The CLI application offers the following methods:</p> <ul> <li><code>getDefaultModule</code> - <code>string</code> - Returns the default module name</li> <li><code>getModule(string $name)</code> - <code>array</code>/<code>object</code> - Gets the module definition registered in the application via module name</li> <li><code>getModules</code> - <code>array</code> - Return the modules registered in the application</li> <li><code>registerModules(array $modules, bool $merge = false)</code> - <code>AbstractApplication</code> - Register an array of modules present in the application</li> <li><code>setDefaultModule(string $defaultModule)</code> - <code>AbstractApplication</code> - Sets the module name to be used if the router doesn't return a valid module</li> </ul> <p>You can register a <code>frontend</code> and <code>backend</code> module for your console application as follows:</p> <pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nuse Exception;\nuse MyApp\\Modules\\Backend\\Module as BackendModule;\nuse MyApp\\Modules\\Frontend\\Module as FrontendModule;\nuse Phalcon\\Cli\\Console;\nuse Phalcon\\Cli\\Dispatcher;\nuse Phalcon\\Di\\FactoryDefault\\Cli as CliDI;\nuse Phalcon\\Exception as PhalconException;\nuse Phalcon\\Loader;\nuse Throwable;\n\n$loader = new Loader();\n$loader-&gt;registerNamespaces(\n    [\n       'MyApp' =&gt; 'src/',\n    ]\n);\n$loader-&gt;register();\n\n$container  = new CliDI();\n$dispatcher = new Dispatcher();\n\n$dispatcher-&gt;setDefaultNamespace('MyApp\\Tasks');\n$container-&gt;setShared('dispatcher', $dispatcher);\n\n$console = new Console($container);\n\n$console-&gt;registerModules(\n    [\n        'frontend' =&gt; [\n            'className' =&gt; BackendModule::class,\n            'path'      =&gt; './src/frontend/Module.php',\n        ],\n        'backend' =&gt; [\n            'className' =&gt; FrontendModule::class,\n            'path'      =&gt; './src/backend/Module.php',\n        ],\n    ]\n);\n\n$arguments = [];\nforeach ($argv as $k =&gt; $arg) {\n    if ($k === 1) {\n        $arguments['task'] = $arg;\n    } elseif ($k === 2) {\n        $arguments['action'] = $arg;\n    } elseif ($k &gt;= 3) {\n        $arguments['params'][] = $arg;\n    }\n}\n\ntry {\n    $console-&gt;handle($arguments);\n} catch (PhalconException $e) {\n    fwrite(STDERR, $e-&gt;getMessage() . PHP_EOL);\n    exit(1);\n} catch (Throwable $throwable) {\n    fwrite(STDERR, $throwable-&gt;getMessage() . PHP_EOL);\n    exit(1);\n} catch (Exception $exception) {\n    fwrite(STDERR, $exception-&gt;getMessage() . PHP_EOL);\n    exit(1);\n}\n</code></pre> <p>The above code assumes that you have structured your directories to contain modules in the <code>frontend</code> and <code>backend</code> directories.</p> <pre><code>src/\nsrc/backend/Module.php\nsrc/frontend/Module.php\nphp cli.php\n</code></pre>"},{"location":"application-cli/#routes","title":"Routes","text":"<p>The CLI application has its own router. By default the Phalcon CLI application uses the Phalcon\\Cli\\Router object, but you can implement your own by using the Phalcon\\Cli\\RouterInterface.</p> <p>Similar to a MVC application, the Phalcon\\Cli\\Router uses Phalcon\\Cli\\Router\\Route objects to store the route information. You can always implement your own objects by implementing the Phalcon\\Cli\\Router\\RouteInterface.</p> <p>The routes accept the expected regex parameters such as <code>a-zA-Z0-9</code> etc. There are also additional placeholders that you can take advantage of:</p> Placeholder Description <code>:module</code> The module (need to set modules first) <code>:task</code> The task name <code>:namespace</code> The namespace name <code>:action</code> The action <code>:params</code> Any parameters <code>:int</code> Whether this is an integer route parameter <p>The Phalcon\\Cli\\Router comes with two predefined routes, so that it works right out of the box. These are:</p> <ul> <li><code>/:task/:action</code></li> <li><code>/:task/:action/:params</code></li> </ul> <p>If you do not wish to use the default routes, all you have to do is pass <code>false</code> in the Phalcon\\Cli\\Router object upon construction.</p> <pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nuse Phalcon\\Cli\\Router;\n\n$router = new Router(false);\n</code></pre> <p>For more information regarding routes and the route classes, you can check the Routing page.</p>"},{"location":"application-cli/#events","title":"Events","text":"<p>CLI applications are also events aware. You can use the <code>setEventsManager</code> and <code>getEventsManager</code> methods to access the events manager. </p> <p>The following events are available:</p> Event Stop Description <code>afterHandleTask</code> Yes Called after the task is handled <code>afterStartModule</code> Yes Called after processing a module (if modules are used) <code>beforeHandleTask</code> No Called before the task is handled <code>beforeStartModule</code> Yes Called before processing a module (if modules are used) <code>boot</code> Yes Called when the application boots <p>If you use the Phalcon\\Cli\\Dispatcher you can also take advantage of the <code>beforeException</code> event, which can stop operations and is fired from the dispatcher object. </p>"},{"location":"application-micro/","title":"Micro Application","text":""},{"location":"application-micro/#overview","title":"Overview","text":"<p>Phalcon offers a very 'thin' application, so that you can create <code>Micro</code> applications with minimal PHP code and overhead. Micro applications are suitable for small applications that will have very low overhead. Such applications are usually APIs, prototypes etc.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n\n$app-&gt;get(\n    '/invoices/view/{id}',\n    function ($id) {\n        echo \"&lt;h1&gt;Invoice #{$id}!&lt;/h1&gt;\";\n    }\n);\n\n$app-&gt;handle(\n    $_SERVER[\"REQUEST_URI\"]\n);\n</code></pre>"},{"location":"application-micro/#activation","title":"Activation","text":"<p>The Phalcon\\Mvc\\Micro class is the one responsible for creating a Micro application.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Mvc\\Micro;\n\n$container = new Di();\n$app       = new Micro($container);\n</code></pre>"},{"location":"application-micro/#methods","title":"Methods","text":"<p><pre><code>public function __construct(\n    DiInterface $container = null\n)\n</code></pre> Constructor. Accepts an optional Di container.</p> <p><pre><code>public function after(\n    callable $handler\n): Micro\n</code></pre> Appends an <code>after</code> middleware to be called after execute the route</p> <p><pre><code>public function afterBinding(\n    callable $handler\n): Micro\n</code></pre> Appends a afterBinding middleware to be called after model binding</p> <p><pre><code>public function before(\n    callable $handler\n): Micro\n</code></pre> Appends a before middleware to be called before execute the route</p> <p><pre><code>public function delete(\n    string $routePattern, \n    callable $handler\n): RouteInterface\n</code></pre> Maps a route to a handler that only matches if the HTTP method is DELETE</p> <p><pre><code>public function error(\n    callable $handler\n): Micro\n</code></pre> Sets a handler that will be called when an exception is thrown handling the route</p> <p><pre><code>public function finish(\n    callable $handler\n): Micro\n</code></pre> Appends a <code>finish</code> middleware to be called when the request is finished</p> <p><pre><code>public function get(\n    string $routePattern, \n    callable $handler\n): RouteInterface\n</code></pre> Maps a route to a handler that only matches if the HTTP method is GET</p> <p><pre><code>public function getActiveHandler(): callable\n</code></pre> Return the handler that will be called for the matched route</p> <p><pre><code>public function getBoundModels(): array\n</code></pre> Returns bound models from binder instance</p> <p><pre><code>public function getHandlers(): array\n</code></pre> Returns the internal handlers attached to the application</p> <p><pre><code>public function getModelBinder(): BinderInterface | null\n</code></pre> Get the model binder</p> <p><pre><code>public function getReturnedValue(): mixed\n</code></pre> Returns the value returned by the executed handler</p> <p><pre><code>public function getRouter(): RouterInterface\n</code></pre> Returns the internal router used by the application</p> <p><pre><code>public function getService(\n    string $serviceName\n): object\n</code></pre> Obtains a service from the DI</p> <p><pre><code>public function getSharedService(\n    string $serviceName\n)\n</code></pre> Obtains a shared service from the DI</p> <p><pre><code>public function handle(\n    string $uri\n): mixed\n</code></pre> Handle the whole request</p> <p><pre><code>public function hasService(\n    string $serviceName\n): bool\n</code></pre> Checks if a service is registered in the DI</p> <p><pre><code>public function head(\n    string $routePattern, \n    callable $handler\n): RouteInterface\n</code></pre> Maps a route to a handler that only matches if the HTTP method is HEAD</p> <p><pre><code>public function map(\n    string $routePattern, \n    callable $handler\n): RouteInterface\n</code></pre> Maps a route to a handler without any HTTP method constraint</p> <p><pre><code>public function mount(\n    CollectionInterface $collection\n): Micro\n</code></pre> Mounts a collection of handlers</p> <p><pre><code>public function notFound(\n    callable $handler\n): Micro\n</code></pre> Sets a handler that will be called when the router does not match any of the defined routes</p> <p><pre><code>public function offsetExists(\n    mixed $alias\n): bool\n</code></pre> Check if a service is registered in the internal DI container using the array syntax</p> <p><pre><code>public function offsetGet(\n    mixed $alias\n): mixed\n</code></pre> Gets a DI service from the internal DI container using the array syntax</p> <p><pre><code>public function offsetSet(\n    mixed $alias, \n    mixed $definition\n)\n</code></pre> Registers a service in the internal DI container using the array syntax</p> <pre><code>$app[\"request\"] = new \\Phalcon\\Http\\Request();\n</code></pre> <p><pre><code>public function offsetUnset(\n    mixed $alias\n): void\n</code></pre> Removes a service from the internal DI container using the array syntax</p> <p><pre><code>public function options(    \n    string $routePattern, \n    callable $handler\n): RouteInterface\n</code></pre> Maps a route to a handler that only matches if the HTTP method is <code>OPTIONS</code></p> <p><pre><code>public function patch(\n    string $routePattern, \n    callable $handler\n): RouteInterface\n</code></pre> Maps a route to a handler that only matches if the HTTP method is <code>PATCH</code></p> <p><pre><code>public function post(\n    string $routePattern, \n    callable $handler\n): RouteInterface\n</code></pre> Maps a route to a handler that only matches if the HTTP method is <code>POST</code></p> <p><pre><code>public function put(\n    string $routePattern, \n    callable $handler\n): RouteInterface\n</code></pre> Maps a route to a handler that only matches if the HTTP method is <code>PUT</code></p> <p><pre><code>public function setActiveHandler(\n    callable $activeHandler\n)\n</code></pre> Sets externally the handler that must be called by the matched route</p> <p><pre><code>public function setModelBinder(\n    BinderInterface $modelBinder, \n    mixed $cache = null\n): Micro\n</code></pre> Sets model binder</p> <pre><code>$micro = new Micro($di);\n\n$micro-&gt;setModelBinder(\n    new Binder(),\n    'cache'\n);\n</code></pre> <p><pre><code>public function setResponseHandler(\n    callable $handler\n): Micro\n</code></pre> Appends a custom <code>response</code> handler to be called instead of the default one</p> <p><pre><code>public function setService(\n    string $serviceName, \n    mixed $definition, \n    bool $shared = false\n): ServiceInterface\n</code></pre> Sets a service in the internal Di container. If no container is preset a Phalcon\\Di\\FactoryDefault will be automatically created</p> <p><pre><code>public function stop()\n</code></pre> Stops the middleware execution</p>"},{"location":"application-micro/#routes","title":"Routes","text":"<p>Defining routes in a Phalcon\\Mvc\\Micro application is very easy. Routes are defined as follows:</p> <pre><code>   Application : (http method): (route url/regex, callable PHP function/handler)\n</code></pre>"},{"location":"application-micro/#activation_1","title":"Activation","text":"<p>Routing is handled by the Phalcon\\Mvc\\Router object. </p> <p>NOTE</p> <p>Routes must always start with <code>/</code></p> <p>Usually, the starting route for an application is <code>/</code>, accessed via the <code>GET</code> HTTP method:</p> <pre><code>&lt;?php\n\n$application-&gt;get(\n    '/',\n    function () {\n        echo '&lt;h1&gt;3.1459&lt;/h1&gt;';\n    }\n);\n</code></pre> <p>NOTE</p> <p>Check our routing document for more information for the Phalcon\\Mvc\\Router</p> <p>Application object</p> <p>Routes can be set using the Phalcon\\Mvc\\Micro application object as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n\n$app-&gt;get(\n    '/invoices/view/{id}',\n    function ($id) {\n        echo \"&lt;h1&gt;Invoice #{$id}!&lt;/h1&gt;\";\n    }\n);\n</code></pre> <p>Router object</p> <p>You can also create a Phalcon\\Mvc\\Router object, setting the routes there and then injecting it in the dependency injection container.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\Router;\n\n\n$router = new Router();\n$router-&gt;addGet(\n    '/invoices/view/{id}',\n    'InvoicesClass::view'\n);\n\n$container   = new Di();\n$application = new Micro($container);\n\n$application-&gt;setService('router', $router, true);\n</code></pre> <p>Setting up your routes using the Phalcon\\Mvc\\Micro applications http methods (<code>get</code>, <code>post</code>, etc.) is much easier than setting up a router object with relevant routes and then injecting it in the application. Each method has its advantages and disadvantages. It all depends on the design and needs of your application.</p>"},{"location":"application-micro/#rewrite-rules","title":"Rewrite Rules","text":"<p>In order for routes to work, your web server needs to be configured with specific instructions. Please refer to the webserver setup document for more information.</p>"},{"location":"application-micro/#handlers","title":"Handlers","text":"<p>Handlers are callable pieces of code that get attached to a route. When the route is matched, the handler is executed with all the defined parameters. A handler is any valid PHP <code>callable</code>. </p>"},{"location":"application-micro/#registration","title":"Registration","text":"<p>Phalcon offers several ways to attach a handler to a route. Your application needs and design as well as coding style will be the factors influencing your choice of implementation.</p> <p>Anonymous Function</p> <p>You can use an anonymous function to handle the request</p> <pre><code>&lt;?php\n\n$app-&gt;get(\n    '/invoices/view/{id}',\n    function ($id) {\n        echo \"&lt;h1&gt;Invoice #{$id}!&lt;/h1&gt;\";\n    }\n);\n</code></pre> <p>Accessing the <code>$app</code> object inside the anonymous function can be achieved by injecting it as follows:</p> <pre><code>&lt;?php\n\n$app-&gt;get(\n    '/invoices/view/{id}',\n    function ($id) use ($app){\n        $content = \"&lt;h1&gt;Invoice #{$id}!&lt;/h1&gt;\";\n\n        $app-&gt;response-&gt;setContent($content);\n\n        $app-&gt;response-&gt;send();\n    }\n);\n</code></pre> <p>Function</p> <p>You can define a function as the handler and attach it to a specific route.</p> <pre><code>&lt;?php\n\nfunction invoiceView($id) {\n    echo \"&lt;h1&gt;Invoice #{$id}!&lt;/h1&gt;\";\n}\n\n$app-&gt;get(\n    '/invoices/view/{id}',\n    'invoicesView'\n);\n</code></pre> <p>Static Method</p> <p>You can also use a static method as the handler.</p> <pre><code>&lt;?php\n\nclass InvoicesClass\n{\n    public static function view($id) {\n        echo \"&lt;h1&gt;Invoice #{$id}!&lt;/h1&gt;\";\n    }\n}\n\n$app-&gt;get(\n    '/invoices/view/{id}',\n    'InvoicesClass::View'\n);\n</code></pre> <p>Method in an Object</p> <p>You can also use a method in an object as the handler.</p> <pre><code>&lt;?php\n\nclass InvoicesClass\n{\n    public function view($id) {\n        echo \"&lt;h1&gt;Invoice #{$id}!&lt;/h1&gt;\";\n    }\n}\n\n$invoices = new InvoicesClass();\n$app-&gt;get(\n    '/invoices/view/{id}',\n    [\n        $invoices,\n        'view'\n    ]\n);\n</code></pre> <p>Controllers</p> <p>With the Phalcon\\Mvc\\Micro you can create micro or medium applications. Medium applications use the micro architecture but expand on it to utilize more than the Micro but less than the Full application. In medium applications you can organize handlers in controllers.</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro\\Collection as MicroCollection;\n\n$invoices = new MicroCollection();\n$invoices\n    -&gt;setHandler(new InvoicesController())\n    -&gt;setPrefix('/invoices')\n    -&gt;get('/', 'index')\n    -&gt;get('/view/{id}', 'view')\n;\n\n$app-&gt;mount($invoices);\n</code></pre> The <code>InvoicesController</code> might look like this:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass InvoicesController extends Controller\n{\n    public function index()\n    {\n        // ...\n    }\n\n    public function view($id) {\n        // ...\n    }\n}\n</code></pre> <p>Since our controllers extend the Phalcon\\Mvc\\Controller, all the dependency injection services are available with their respective registration names.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * @property Response $response\n */\nclass InvoicesController extends Controller\n{\n    public function index()\n    {\n        // ...\n    }\n\n    public function view($id)\n    {\n        $content = \"&lt;h1&gt;Invoice #{$id}!&lt;/h1&gt;\";\n\n        $this-&gt;response-&gt;setContent($content);\n\n        return $this-&gt;response;\n    }\n}\n</code></pre>"},{"location":"application-micro/#lazy-loading","title":"Lazy Loading","text":"<p>In order to increase performance, you might consider implementing lazy loading for your controllers (handlers). The controller will be loaded only if the relevant route is matched.</p> <p>Lazy loading can be easily achieved when setting your handler in your Phalcon\\Mvc\\Micro\\Collection using the second parameter, or by using the <code>setLazy</code> method.</p> <pre><code>&lt;?php\n\nuse MyApp\\Controllers\\InvoicesController;\n\n$invoices-&gt;setHandler(\n    InvoicesController::class, \n    true\n);\n\n\n$invoices\n    -&gt;setHandler(InvoicesController::class)\n    -&gt;setLazy(true)\n    -&gt;setPrefix('/invoices')\n    -&gt;get('/', 'index')\n    -&gt;get('/view/{id}', 'view')\n;\n\n$app-&gt;mount($invoices);\n</code></pre> <p>Use case</p> <p>We are developing an API for an online store. The endpoints are <code>/users</code>, <code>/invoices</code> and <code>/products</code>. Each of those endpoints are registered using handlers, and each handler is a controller with relevant actions.</p> <p>The controllers that we use as handlers are as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function get($id)\n    {\n        // ...\n    }\n\n    public function add($payload)\n    {\n        // ...\n    }\n}\n\nclass InvoicesController extends Controller\n{\n    public function get($id)\n    {\n        // ...\n    }\n\n    public function add($payload)\n    {\n        // ...\n    }\n}\n\nclass ProductsController extends Controller\n{\n    public function get($id)\n    {\n        // ...\n    }\n\n    public function add($payload)\n    {\n        // ...\n    }\n}\n</code></pre> <p>We register the handlers:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro\\Collection as MicroCollection;\n\n$users = new MicroCollection();\n$users\n    -&gt;setHandler(new UsersController())\n    -&gt;setPrefix('/users')\n    -&gt;get(\n        '/get/{id}', \n        'get'\n    )\n    -&gt;get(\n        '/add/{payload}', \n        'add'\n    )\n;\n\n$app-&gt;mount($users);\n\n$invoices = new MicroCollection();\n$invoices\n    -&gt;setHandler(new InvoicesController())\n    -&gt;setPrefix('/invoices')\n    -&gt;get(\n        '/get/{id}', \n        'get'\n    )\n    -&gt;get(\n        '/add/{payload}', \n        'add'\n    )\n;\n\n$app-&gt;mount($invoices);\n\n$products = new MicroCollection();\n$products\n    -&gt;setHandler(new ProductsController())\n    -&gt;setPrefix('/products')\n    -&gt;get(\n        '/get/{id}', \n        'get'\n    )\n    -&gt;get(\n        '/add/{payload}', \n        'add'\n    )\n;\n\n$app-&gt;mount($products);\n</code></pre> <p>This implementation loads each handler in turn and mounts it in our application object. The issue with this approach is that each request will result to only one endpoint and therefore one class method executed. The remaining methods/handlers will just remain in memory without being used.</p> <p>Using lazy loading we reduce the number of objects loaded in memory and as a result our application uses less memory. The above implementation changes if we want to use lazy loading as follows: <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro\\Collection as MicroCollection;\n\n$users = new MicroCollection();\n$users\n    -&gt;setHandler(\n        UsersController::class,\n        true\n    )\n    -&gt;setPrefix('/users')\n    -&gt;get(\n        '/get/{id}', \n        'get'\n    )\n    -&gt;get(\n        '/add/{payload}', \n        'add'\n    )\n;\n\n$app-&gt;mount($users);\n\n$invoices = new MicroCollection();\n$invoices\n    -&gt;setHandler(\n        InvoicesController::class,\n        true\n    )\n    -&gt;setPrefix('/invoices')\n    -&gt;get(\n        '/get/{id}', \n        'get'\n    )\n    -&gt;get(\n        '/add/{payload}', \n        'add'\n    )\n;\n\n$app-&gt;mount($invoices);\n\n$products = new MicroCollection();\n$products\n    -&gt;setHandler(\n        ProductsController::class,\n        true\n    )\n    -&gt;setPrefix('/products')\n    -&gt;get(\n        '/get/{id}', \n        'get'\n    )\n    -&gt;get(\n        '/add/{payload}', \n        'add'\n    )\n\n$app-&gt;mount($products);   \n</code></pre></p> <p>Using this simple change in implementation, all handlers remain non instantiated until requested by a caller. Therefore whenever a caller requests <code>/invoices/get/2</code>, our application will instantiate the <code>InvoicesController</code> and call the <code>get</code> method in it. Our application now uses less resources than before.</p>"},{"location":"application-micro/#extra-performance-tip","title":"Extra performance tip","text":"<p>If you are working on a large application, there is no need to mount all the collections, even if they are lazy loaded: Phalcon will use regex to match the routes. To speed up the routing process it is possible to run a pre-filter like this, using the previous example:</p> <p><pre><code>        $uri = new \\Phalcon\\Http\\Message\\Uri($_SERVER['REQUEST_URI']);\n        $path = $uri-&gt;getPath();\n        $parts = explode(\"/\", $path);\n        $collection = $parts[1];\n\n        switch ($collection) {\n            case \"users\":\n                $users = new MicroCollection();\n                $users\n                    -&gt;setHandler(\n                        UsersController::class,\n                        true\n                    )\n                    -&gt;setPrefix('/users')\n                    -&gt;get(\n                        '/get/{id}', \n                        'get'\n                    )\n                    -&gt;get(\n                        '/add/{payload}', \n                        'add'\n                    )\n                ;\n\n                $app-&gt;mount($users);\n\n                break;\n\n            case \"invoices\":\n                $invoices = new MicroCollection();\n                $invoices\n                    -&gt;setHandler(\n                        InvoicesController::class,\n                        true\n                    )\n                    -&gt;setPrefix('/invoices')\n                    -&gt;get(\n                        '/get/{id}', \n                        'get'\n                    )\n                    -&gt;get(\n                        '/add/{payload}', \n                        'add'\n                    )\n                ;\n\n                $app-&gt;mount($invoices);   \n\n                break;\n\n            case \"products\": \n                $products = new MicroCollection();\n                $products\n                    -&gt;setHandler(\n                        ProductsController::class,\n                        true\n                    )\n                    -&gt;setPrefix('/products')\n                    -&gt;get(\n                        '/get/{id}', \n                        'get'\n                    )\n                    -&gt;get(\n                        '/add/{payload}', \n                        'add'\n                    )\n\n                $app-&gt;mount($products);  \n\n                break;\n\n            default: \n            //do nothing (or something)\n        }\n</code></pre> In this way, Phalcon can handle tens (or hundreds) of routes without regex performance penalty: using <code>explode()</code> is faster than regex. </p>"},{"location":"application-micro/#not-found-404","title":"Not found (404)","text":"<p>Any route that has not been matched in our Phalcon\\Mvc\\Micro application will cause it to try and execute the handler defined with the <code>notFound</code> method. Similar to other http methods (<code>get</code>, <code>post</code> etc.), you can register a handler in the <code>notFound</code> method which can be any callable PHP function. <pre><code>&lt;?php\n\n$app-&gt;notFound(\n    function () use ($app) {\n        $message = 'Nothing to see here. Move along....';\n        $app\n            -&gt;response\n            -&gt;setStatusCode(404, 'Not Found')\n            -&gt;sendHeaders()\n            -&gt;setContent($message)\n            -&gt;send()\n        ;\n    }\n);\n</code></pre></p> <p>You can also handle routes that have not been matched (404) with Middleware discussed below.  </p>"},{"location":"application-micro/#http-methods","title":"HTTP methods","text":"<p>The Phalcon\\Mvc\\Micro application provides a set of methods to bind the HTTP method with the route it is intended to.</p> <p>delete</p> <p>Matches if the HTTP method is <code>DELETE</code> and the route is <code>/api/products/delete/{id}</code></p> <pre><code>&lt;?php\n\n$app-&gt;delete(\n    '/api/products/delete/{id}',\n    'deleteProduct'\n);\n</code></pre> <p>get</p> <p>Matches if the HTTP method is <code>GET</code> and the route is <code>/api/products</code></p> <pre><code>&lt;?php\n\n$app-&gt;get(\n    '/api/products',\n    'getProducts'\n);\n</code></pre> <p>head</p> <p>Matches if the HTTP method is <code>HEAD</code> and the route is <code>/api/products</code></p> <pre><code>&lt;?php\n\n$app-&gt;head(\n    '/api/products',\n    'getProducts'\n);\n</code></pre> <p>map</p> <p>Map allows you to attach the same endpoint to more than one HTTP method. The example below matches if the HTTP method is <code>GET</code> or <code>POST</code> and the route is <code>/repos/store/refs</code></p> <pre><code>&lt;?php\n\n$app\n    -&gt;map(\n        '/repos/store/refs',\n        'actionProduct'\n    )\n    -&gt;via(\n        [\n            'GET',\n            'POST',\n        ]\n    );\n</code></pre> <p>options</p> <p>Matches if the HTTP method is <code>OPTIONS</code> and the route is <code>/api/products/options</code></p> <pre><code>&lt;?php\n\n$app-&gt;options(\n    '/api/products/options',\n    'infoProduct'\n);\n</code></pre> <p>patch</p> <p>Matches if the HTTP method is <code>PATCH</code> and the route is <code>/api/products/update/{id}</code></p> <pre><code>&lt;?php\n\n$app-&gt;patch(\n    '/api/products/update/{id}',\n    'updateProduct'\n);\n</code></pre> <p>post</p> <p>Matches if the HTTP method is <code>POST</code> and the route is <code>/api/products/add</code></p> <pre><code>&lt;?php\n\n$app-&gt;post(\n    '/api/products',\n    'addProduct'\n);\n</code></pre> <p>put</p> <p>Matches if the HTTP method is <code>PUT</code> and the route is <code>/api/products/update/{id}</code></p> <pre><code>&lt;?php\n\n$app-&gt;put(\n    '/api/products/update/{id}',\n    'updateProduct'\n);\n</code></pre>"},{"location":"application-micro/#collections","title":"Collections","text":"<p>Collections are a handy way to group collections attached to a handler and a common prefix (if needed). For a hypothetical <code>/invoices</code> endpoint we could have the following routes:</p> <pre><code>/invoices/get/{id}\n/invoices/add/{payload}\n/invoices/update/{id}\n/invoices/delete/{id}\n</code></pre> <p>All of those routes are handled by our <code>InvoicesController</code>. We set up our routes with a collection as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro\\Collection as MicroCollection;\n\n$invoices = new MicroCollection();\n$invoices-&gt;setHandler(new InvoicesController());\n\n$invoices-&gt;setPrefix('/invoices');\n\n$invoices-&gt;get('/get/{id}', 'displayAction');\n$invoices-&gt;get('/add/{payload}', 'addAction');\n$invoices-&gt;get('/update/{id}', 'updateAction');\n$invoices-&gt;get('/delete/{id}', 'deleteAction');\n\n$app-&gt;mount($invoices);\n</code></pre> <p>NOTE</p> <p>The name that we bind each route has a suffix of <code>Action</code>. This is not necessary, your method can be called anything you like.</p> <p>Methods</p> <p>The available methods for the Phalcon\\Mvc\\Micro\\Collection object are:</p> <p><pre><code>public function delete(\n    string $routePattern, \n    callable $handler, \n    string $name = null\n): CollectionInterface\n</code></pre> Maps a route to a handler that only matches if the HTTP method is <code>DELETE</code>.</p> <p><pre><code>public function get(\n    string $routePattern, \n    callable $handler,  \n    string $name = null\n): CollectionInterface\n</code></pre> Maps a route to a handler that only matches if the HTTP method is <code>GET</code>.</p> <p><pre><code>public function getHandler(): mixed\n</code></pre> Returns the main handler</p> <p><pre><code>public function getHandlers(): array\n</code></pre> Returns the registered handlers</p> <p><pre><code>public function getPrefix(): string\n</code></pre> Returns the collection prefix if any</p> <p><pre><code>public function head(\n    string $routePattern, \n    callable $handler, \n    string $name = null\n): CollectionInterface\n</code></pre> Maps a route to a handler that only matches if the HTTP method is <code>HEAD</code>.</p> <p><pre><code>public function isLazy(): bool\n</code></pre> Returns if the main handler must be lazy loaded</p> <p><pre><code>public function map(\n    string $routePattern, \n    callable $handler, \n    string | array $method, \n    string $name = null\n): CollectionInterface\n</code></pre> Maps a route to a handler.</p> <p><pre><code>public function mapVia(\n    string $routePattern, \n    callable $handler, \n    string | array $method, \n    string $name = null\n): CollectionInterface\n</code></pre> Maps a route to a handler via methods.</p> <pre><code>$collection-&gt;mapVia(\n    \"/invoices\",\n    \"indexAction\",\n    [\n        \"POST\", \n        \"GET\"\n    ],\n    \"invoices\"\n);\n</code></pre> <p><pre><code>public function options(\n    string $routePattern, \n    callable $handler, \n    string $name = null\n): CollectionInterface\n</code></pre> Maps a route to a handler that only matches if the HTTP method is <code>OPTIONS</code>.</p> <p><pre><code>public function patch(\n    string $routePattern, \n    callable $handler, \n    string $name = null\n): CollectionInterface\n</code></pre> Maps a route to a handler that only matches if the HTTP method is <code>PATCH</code>.</p> <p><pre><code>public function post(\n    string $routePattern, \n    callable $handler, \n    string $name = null\n): CollectionInterface\n</code></pre> Maps a route to a handler that only matches if the HTTP method is <code>POST</code>.</p> <p><pre><code>public function put(\n    string $routePattern, \n    callable $handler, \n    string $name = null\n): CollectionInterface\n</code></pre> Maps a route to a handler that only matches if the HTTP method is <code>PUT</code>.</p> <p><pre><code>public function setHandler(\n    callable $handler, \n    bool $lazy = false\n): CollectionInterface\n</code></pre> Sets the main handler.</p> <p><pre><code>public function setLazy(\n    bool $lazy\n): CollectionInterface\n</code></pre> Sets if the main handler must be lazy loaded</p> <p><pre><code>public function setPrefix(\n    string $prefix\n): CollectionInterface\n</code></pre> Sets a prefix for all routes added to the collection</p>"},{"location":"application-micro/#parameters","title":"Parameters","text":"<p>We have briefly seen above how parameters are defined in the routes. Parameters are set in a route string by enclosing the name of the parameter in brackets.</p> <pre><code>&lt;?php\n\n$app-&gt;get(\n    '/invoices/view/{id}',\n    function ($id) {\n        echo \"&lt;h1&gt;Invoice #{$id}!&lt;/h1&gt;\";\n    }\n);\n</code></pre> <p>We can also enforce certain rules for each parameter by using regular expressions. The regular expression is set after the name of the parameter, separating it with <code>:</code>.</p> <pre><code>&lt;?php\n\n$app-&gt;get(\n    '/invoices/view/{id:[0-9]+}',\n    function ($id) {\n        echo \"&lt;h1&gt;Invoice #{$id}!&lt;/h1&gt;\";\n    }\n);\n\n$app-&gt;get(\n    '/invoices/search/year/{year:[0-9][4]}/title/{title:[a-zA-Z\\-]+}',\n    function ($year, $title) {\n        echo \"'&lt;h1&gt;Title: {$title}&lt;/h1&gt;\", PHP_EOL,\n             \"'&lt;h2&gt;Year: {$year}&lt;/h2&gt;\"\n        ;\n    }\n);\n</code></pre> <p>NOTE</p> <p>Check our routing document for more information for the Phalcon\\Mvc\\Router</p>"},{"location":"application-micro/#redirections","title":"Redirections","text":"<p>You can redirect one matched route to another using the Phalcon\\Http\\Response object, just like in a full application.</p> <pre><code>&lt;?php\n\n$app-&gt;get('/invoices/show/{id}',\n    function ($id) use ($app) {\n        $app\n            -&gt;response\n            -&gt;redirect(\n                \"invoices/view/{$id}\"\n            )\n            -&gt;sendHeaders()\n        ;\n    }\n);\n\n$app-&gt;get('/invoices/view/{id}',\n    function ($id) use ($app) {\n        echo \"&lt;h1&gt;Invoice #{$id}!&lt;/h1&gt;\";\n    }\n);\n</code></pre> <p>NOTE</p> <p>We have to pass the <code>$app</code> object in our anonymous function to have access to the <code>request</code> object.</p> <p>When using controllers as handlers, you can perform the redirect just as easy:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * @property Response $response\n */\nclass InvoicesController extends Controller\n{\n    public function show($id)\n    {\n        return $this\n            -&gt;response\n            -&gt;redirect(\n                \"invoices/view/{$id}\"\n            )\n        ;\n    }\n\n    public function get($id)\n    {\n        // ...\n    }\n}\n</code></pre> <p>Finally, you can perform redirections in your middleware (if you are using it). An example is below in the relevant section.</p>"},{"location":"application-micro/#urls","title":"URLs","text":"<p>Another feature of the routes is setting up named routes and generating URLs for those routes. </p> <p>You will need to name your routes to take advantage of this feature. This can be achieved with the <code>setName()</code> method that is exposed from the http methods in our application (<code>get</code>, <code>post</code>, etc.);</p> <pre><code>&lt;?php\n\n$app\n    -&gt;get(\n        '/invoices/view/{id}',\n        function ($id) use ($app) {\n            // ...\n        }\n    )\n    -&gt;setName('view-invoice');\n</code></pre> <p>If you are using the Phalcon\\Mvc\\Micro\\Collection object, the name needs to be the third parameter of the methods setting the routes.</p> <pre><code>&lt;?php\n\n$invoices = new MicroCollection();\n\n$invoices\n    -&gt;setHandler(\n        InvoicesController::class,\n        true\n    )\n    -&gt;setPrefix('/invoices')\n    -&gt;get(\n        '/view/{id}', \n        'get', \n        'view-invoice'\n    )\n    -&gt;post(\n        '/add', \n        'post', \n        'add-invoice'\n    )\n;\n\n$app-&gt;mount($invoices);\n</code></pre> <p>Lastly you need the Phalcon\\Url component to generate URLs for the named routes.</p> <pre><code>&lt;?php\n\n$app-&gt;get(\n    '/',\n    function () use ($app) {\n        $url = sprintf(\n            '&lt;a href=\"%s\"&gt;Invoice&lt;/a&gt;',\n            $app\n                -&gt;url\n                -&gt;get(\n                    [\n                        'for' =&gt; 'view-invoice',\n                        'id'  =&gt; 1234,\n                    ]\n                )\n        );\n\n        echo $url;\n    }\n);\n</code></pre>"},{"location":"application-micro/#dependency-injector","title":"Dependency Injector","text":"<p>When a micro application is created, a Phalcon\\Di\\FactoryDefault services container is created automatically. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n\n$app-&gt;get(\n    '/',\n    function () use ($app) {\n        $app\n            -&gt;response\n            -&gt;setContent('3.1459')\n            -&gt;send()\n        ;\n    }\n);\n</code></pre> <p>You can also create a DI container yourself, and assign it to the micro application, therefore manipulating the services depending on the needs of your application.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Config\\Adapter\\Ini;\n\n$container = new Di();\n\n$container-&gt;set(\n    'config',\n    function () {\n        return new Ini(\n            'config.ini'\n        );\n    }\n);\n\n$app = new Micro($container);\n\n$app-&gt;get(\n    '/',\n    function () use ($app) {\n        echo $app\n            -&gt;config\n            -&gt;app_name;\n    }\n);\n\n$app-&gt;post(\n    '/contact',\n    function () use ($app) {\n        $app\n            -&gt;flash\n            -&gt;success('What are you doing Dave?')\n        ;\n    }\n);\n</code></pre> <p>You can also use the array syntax to register services in the dependency injection container from the application object:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n$app = new Micro();\n\n$app['db'] = function () {\n    return new Mysql(\n        [\n            'host'     =&gt; 'localhost',\n            'username' =&gt; 'root',\n            'password' =&gt; 'secret',\n            'dbname'   =&gt; 'test_db',\n        ]\n    );\n};\n\n$app-&gt;get(\n    '/blog',\n    function () use ($app) {\n        $invoices = $app['db']-&gt;query(\n            'SELECT * FROM co_invoices'\n        );\n\n        foreach ($invoices as $invoice) {\n            echo $invoice-&gt;inv_title;\n        }\n    }\n);\n</code></pre>"},{"location":"application-micro/#responses","title":"Responses","text":"<p>A micro application can return many different types of responses. Direct output, use a template engine, calculated data, view based data, JSON etc.</p> <p>Handlers may return raw responses using plain text, Phalcon\\Http\\Response object or a custom built component that implements the Phalcon\\Http\\ResponseInterface.</p>"},{"location":"application-micro/#direct","title":"Direct","text":"<pre><code>&lt;?php\n\n$app-&gt;get(\n    '/invoices/view/{id}',\n    function ($id) {\n        echo \"&lt;h1&gt;Invoice #{$id}!&lt;/h1&gt;\";\n    }\n);\n</code></pre>"},{"location":"application-micro/#including-files","title":"Including Files","text":"<pre><code>&lt;?php\n\n$app-&gt;get(\n    '/invoices/view/{id}',\n    function ($id) {\n        require 'views/results.php';\n    }\n);\n</code></pre>"},{"location":"application-micro/#direct-json","title":"Direct - JSON","text":"<pre><code>&lt;?php\n\n$app-&gt;get(\n    '/invoices/view/{id}',\n    function ($id) {\n        echo json_encode(\n            [\n                'code' =&gt; 200,\n                'id'   =&gt; $id,\n            ]\n        );\n    }\n);\n</code></pre>"},{"location":"application-micro/#new-response","title":"New Response","text":"<p>You can use the <code>setContent</code> method of a new Phalcon\\Http\\Response object to return the response back.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n$app-&gt;get(\n    '/invoices/list',\n    function () {\n        return (new Response())\n            -&gt;setContentType('text/plain')\n            -&gt;setContent(\n                file_get_contents('data.txt')\n            )\n        ;\n    }\n);\n</code></pre>"},{"location":"application-micro/#application-response","title":"Application Response","text":"<p>You can also use the Phalcon\\Http\\Response from the application to return responses to the caller.</p> <pre><code>&lt;?php\n\n$app-&gt;get(\n    '/invoices/list',\n    function () use ($app) {\n        $app\n            -&gt;response\n            -&gt;setContentType('text/plain')\n            -&gt;sendHeaders()\n        ;\n\n        readfile('data.txt');\n    }\n);\n</code></pre>"},{"location":"application-micro/#return-response","title":"Return Response","text":"<p>A different approach returning data back to the caller is to return the Phalcon\\Http\\Response object directly from the application. When responses are returned by handlers they are automatically sent by the application.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Http\\Response;\n\n$app = new Micro();\n\n$app-&gt;get(\n    '/invoices//list',\n    function () {\n        return (new Response())\n            -&gt;setStatusCode(\n                401, \n                'Unauthorized'\n            )\n            -&gt;setContent(\n                '401 - Unauthorized'\n            )\n        ;\n    }\n);\n</code></pre>"},{"location":"application-micro/#json","title":"JSON","text":"<p>JSON can be sent back just as easy using the Phalcon\\Http\\Response object.</p> <pre><code>&lt;?php\n\n$app-&gt;get(\n    '/invoices/index',\n    function () use ($app) {\n\n        $data = [\n            'code'    =&gt; 401,\n            'status'  =&gt; 'error',\n            'message' =&gt; 'Unauthorized access',\n            'payload' =&gt; [],\n        ];\n\n        return $this\n            -&gt;response\n            -&gt;setJsonContent($data)\n        ;\n    }\n);\n</code></pre>"},{"location":"application-micro/#events","title":"Events","text":"<p>A Phalcon\\Mvc\\Micro application works closely with an Events Manager if it is present, to trigger events that can be used throughout our application. The type of those events is <code>micro</code>. These events trigger in our application and can be attached to relevant handlers that will perform actions needed by our application.</p>"},{"location":"application-micro/#available-events","title":"Available events","text":"<p>The following events are supported:</p> Event Name Triggered Can stop <code>afterBinding</code> Triggered after models are bound but before executing the handler Yes <code>afterExecuteRoute</code> Handler just finished running No <code>afterHandleRoute</code> Route just finished executing Yes <code>beforeExecuteRoute</code> Route matched, Handler valid, Handler has not been executed yet Yes <code>beforeHandleRoute</code> Main method called; Routes have not been checked yet Yes <code>beforeNotFound</code> Route has not been found Yes"},{"location":"application-micro/#authentication-example","title":"Authentication example","text":"<p>You can easily check whether a user has been authenticated or not using the <code>beforeExecuteRoute</code> event. The following example demonstrates such a scenario:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager;\n\n$manager = new Manager();\n\n$manager-&gt;attach(\n    'micro:beforeExecuteRoute',\n    function (Event $event, $app) {\n        if ($app-&gt;session-&gt;get('auth') === false) {\n            $app-&gt;flashSession-&gt;error(\n                \"The user is not authenticated\"\n            );\n\n            $app-&gt;response-&gt;redirect('/');\n            $app-&gt;response-&gt;sendHeaders();\n\n            return false;\n        }\n    }\n);\n\n$app = new Micro();\n\n$app-&gt;setEventsManager($manager);\n</code></pre>"},{"location":"application-micro/#not-found-example","title":"Not found example","text":"<p>You can also create a redirect for a route that does not exist (404). To do so you can use the <code>beforeNotFound</code> event. The following example demonstrates such a scenario:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager;\n\n$manager = new Manager();\n\n$manager-&gt;attach(\n    'micro:beforeNotFound',\n    function (Event $event, $app) {\n        $app-&gt;response-&gt;redirect('/404');\n        $app-&gt;response-&gt;sendHeaders();\n\n        return $app-&gt;response;\n    }\n);\n\n$app = new Micro();\n\n$app-&gt;setEventsManager($manager);\n</code></pre>"},{"location":"application-micro/#middleware","title":"Middleware","text":"<p>Middleware are classes that can be attached to your application and introduce another layer where business logic can exist. They run sequentially, according to the order they are registered and not only improve maintainability, by encapsulating specific functionality, but also performance. A middleware class can stop execution when a particular business rule has not been satisfied, thus allowing the application to exit early without executing the full cycle of a request.</p> <p>NOTE</p> <p>The middleware handled by the Micro application are not compatible with PSR-15. In future versions of Phalcon, the whole HTTP layer will be rewritten to align with PSR-7 and PSR-15.</p> <p>The presence of a Phalcon\\Events\\Manager is essential for middleware to operate, so it has to be registered in our DI container.</p>"},{"location":"application-micro/#attached-events","title":"Attached events","text":"<p>Middleware can be attached to a micro application in 3 different events. Those are:</p> Event Description <code>before</code> Before the handler has been executed <code>after</code> After the handler has been executed <code>finish</code> After the response has been sent to the caller <p>NOTE</p> <p>You can attach as many middleware classes as you want in each of the above events. They will be executed sequentially when the relevant event fires.</p> <p>before</p> <p>This event is perfect for stopping execution of the application if certain criteria is not met. In the below example we are checking if the user has been authenticated and stop execution with the necessary redirect.</p> <pre><code>&lt;?php\n\n$app-&gt;before(\n    function () use ($app) {\n        if (false === $app['session']-&gt;get('auth')) {\n            $app\n                -&gt;flashSession\n                -&gt;error(\"The user is not authenticated\")\n            ;\n\n            $app\n                -&gt;response\n                -&gt;redirect('/error')\n            ;\n\n            return false;\n        }\n\n        return true;\n    }\n);\n</code></pre> <p>The code above executes before every route is executed. Returning <code>false</code> cancels the route execution.</p> <p>after</p> <p>This event can be used to manipulate data or perform actions that are needed after the handler has finished executing. </p> <p><pre><code>&lt;?php\n\n$app-&gt;map(\n    '/invoices/list',\n    function () {\n        return [\n            1234 =&gt; [\n                'total'      =&gt; 100,\n                'customerId' =&gt; 3,\n                'title'      =&gt; 'Invoice for ACME Inc.',\n            ]\n        ];\n    }\n);\n\n$app-&gt;after(\n    function () use ($app) {\n        echo json_encode(\n            $app-&gt;getReturnedValue()\n        );\n    }\n);\n</code></pre> In the above example, the handler returns an array of data. The <code>after</code> event calls <code>json_encode</code> on it, thus returning valid JSON.</p> <p>NOTE</p> <p>You will need to do a bit more work here to set the necessary headers for JSON. An alternative to the above code would be to use the Response object and <code>setJsonContent</code></p> <p>finish</p> <p>This even will fire up when the whole request cycle has been completed. </p> <p><pre><code>&lt;?php\n\n$app-&gt;finish(\n    function () use ($app) {\n        if (true === file_exists('/tmp/processing.cache')) {\n            unlink('/tmp/processing.cache');\n        }\n    }\n);\n</code></pre> In the above example we utilize the <code>finish</code> event to do some cache cleaning.</p>"},{"location":"application-micro/#activation_2","title":"Activation","text":"<p>Attaching middleware to your application is very easy as shown above, with the <code>before</code>, <code>after</code> and <code>finish</code> method calls.</p> <pre><code>&lt;?php\n\n$app-&gt;before(\n    function () use ($app) {\n        if (false === $app['session']-&gt;get('auth')) {\n            $app['flashSession']\n                -&gt;error(\"The user isn not authenticated\")\n            ;\n\n            $app['response']\n                -&gt;redirect('/error')\n            ;\n\n            return false;\n        }\n\n        return true;\n    }\n);\n\n$app-&gt;after(\n    function () use ($app) {\n        echo json_encode(\n            $app-&gt;getReturnedValue()\n        );\n    }\n);\n</code></pre> <p>You can also use classes and attach them to the Events Manager as listener. Using this approach offers more flexibility and reduces the bootstrap file size, since the middleware logic is encapsulated in one file per middleware.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Mvc\\Micro;\n\nuse Website\\Middleware\\CacheMiddleware;\nuse Website\\Middleware\\NotFoundMiddleware;\nuse Website\\Middleware\\ResponseMiddleware;\n\n/**\n * Create a new Events Manager.\n */\n$manager     = new Manager();\n$application = new Micro();\n\n// before\n$manager-&gt;attach(\n    'micro',\n    new CacheMiddleware()\n);\n\n$application-&gt;before(\n    new CacheMiddleware()\n);\n\n$manager-&gt;attach(\n    'micro',\n    new NotFoundMiddleware()\n);\n\n$application-&gt;before(\n    new NotFoundMiddleware()\n);\n\n// after\n$manager-&gt;attach(\n    'micro',\n    new ResponseMiddleware()\n);\n\n$application-&gt;after(\n    new ResponseMiddleware()\n);\n\n$application-&gt;setEventsManager($manager);\n</code></pre> <p>We need a Phalcon\\Events\\Manager object. This can be a newly instantiated object or we can get the one that exists in our DI container (if you have used the <code>FactoryDefault</code> one, or if you have not set up a DI container, since it will be automatically created for you).</p> <p>We attach every middleware class in the <code>micro</code> hook in the Events Manager. We could also be a bit more specific and attach it to say the <code>micro:beforeExecuteRoute</code> event.</p> <p>We then attach the middleware class in our application on one of the three listening events discussed above (<code>before</code>, <code>after</code>, <code>finish</code>).</p>"},{"location":"application-micro/#implementation","title":"Implementation","text":"<p>Middleware can be any kind of PHP callable functions. You can organize your code whichever way you like it to implement middleware. If you choose to use classes for your middleware, you will need them to implement the Phalcon\\Mvc\\Micro\\MiddlewareInterface</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\Micro\\MiddlewareInterface;\n\n/**\n * CacheMiddleware\n */\nclass CacheMiddleware implements MiddlewareInterface\n{\n    /**\n     * Calls the middleware\n     *\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function call(Micro $application)\n    {\n        $cache  = $application['cache'];\n        $router = $application['router'];\n\n        $key = preg_replace(\n            '/^[a-zA-Z0-9]/',\n            '',\n            $router-&gt;getRewriteUri()\n        );\n\n        // Check if the request is cached\n        if ($cache-&gt;exists($key)) {\n            echo $cache-&gt;get($key);\n\n            return false;\n        }\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"application-micro/#middleware-events","title":"Middleware Events","text":"<p>The events that are triggered for our application also trigger inside a class that implements the Phalcon\\Mvc\\Micro\\MiddlewareInterface. This offers great flexibility and power for developers since we can interact with the request process.</p> <p>API example</p> <p>Assume that we have an API that we have implemented with the Micro application. We will need to attach different Middleware classes in the application so that we can better control the execution of the application.</p> <p>The middleware that we will use are:</p> <ul> <li>Firewall</li> <li>NotFound</li> <li>Redirect</li> <li>CORS</li> <li>Request</li> <li>Response</li> </ul> <p>Firewall Middleware</p> <p>This middleware is attached to the <code>before</code> event of our Micro application. The purpose of this middleware is to check who is calling our API and based on a whitelist, allow them to proceed or not</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\Micro\\MiddlewareInterface;\n\n/**\n * FirewallMiddleware\n *\n * @property Request  $request\n * @property Response $response\n */\nclass FirewallMiddleware implements MiddlewareInterface\n{\n    /**\n     * @param Event $event\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function beforeHandleRoute(\n        Event $event, \n        Micro $application\n    ) {\n        $whitelist = [\n            '10.4.6.1',\n            '10.4.6.2',\n            '10.4.6.3',\n            '10.4.6.4',\n        ];\n\n        $ipAddress = $application\n            -&gt;request\n            -&gt;getClientAddress()\n        ;\n\n        if (true !== array_key_exists($ipAddress, $whitelist)) {\n            $this\n                -&gt;response\n                -&gt;redirect('/401')\n                -&gt;send()\n            ;\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function call(Micro $application)\n    {\n        return true;\n    }\n}\n</code></pre> <p>Not Found (404) Middleware</p> <p>When this middleware is processed, this means that the requesting IP is allowed to access our application. The application will try to match the route and if not found the <code>beforeNotFound</code> event will fire. We will stop the processing then and send back to the user the relevant 404 response. This middleware is attached to the <code>before</code> event of our Micro application</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\Micro\\MiddlewareInterface;\n\n/**\n * NotFoundMiddleware\n *\n * @property Response $response\n */\nclass NotFoundMiddleware implements MiddlewareInterface\n{\n    /**\n     * @param Event $event\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function beforeNotFound(Event $event, Micro $application)\n    {\n        $application-&gt;response-&gt;redirect('/404');\n        $application-&gt;response-&gt;send();\n\n        return false;\n    }\n\n    /**\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function call(Micro $application)\n    {\n        return true;\n    }\n}\n</code></pre> <p>Redirect Middleware</p> <p>We attach this middleware again to the <code>before</code> event of our Micro application because we do not want the request to proceed if the requested endpoint needs to be redirected.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\Micro\\MiddlewareInterface;\n\n/**\n * RedirectMiddleware\n *\n * @property Request  $request\n * @property Response $response\n */\nclass RedirectMiddleware implements MiddlewareInterface\n{\n    /**\n     * Before anything happens\n     *\n     * @param Event $event\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function beforeHandleRoute(\n        Event $event, \n        Micro $application\n    ) {\n        if ('github' === $application-&gt;request-&gt;getURI()) {\n            $application\n                -&gt;response\n                -&gt;redirect('https://github.com')\n                -&gt;send()\n            ;\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function call(Micro $application)\n    {\n        return true;\n    }\n}\n</code></pre>"},{"location":"application-micro/#cors-middleware","title":"CORS Middleware","text":"<p>Again this middleware is attached to the <code>before</code> event of our Micro application. We need to ensure that it fires before anything happens with our application</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\Micro\\MiddlewareInterface;\n\n/**\n * CORSMiddleware\n *\n * @property Request  $request\n * @property Response $response\n */\nclass CORSMiddleware implements MiddlewareInterface\n{\n    /**\n     * @param Event $event\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function beforeHandleRoute(\n        Event $event, \n        Micro $application\n    ) {\n        if ($application-&gt;request-&gt;getHeader('ORIGIN')) {\n            $origin = $application\n                -&gt;request\n                -&gt;getHeader('ORIGIN')\n            ;\n        } else {\n            $origin = '*';\n        }\n\n        $application\n            -&gt;response\n            -&gt;setHeader(\n                'Access-Control-Allow-Origin', \n                $origin\n            )\n            -&gt;setHeader(\n                'Access-Control-Allow-Methods',\n                'GET,PUT,POST,DELETE,OPTIONS'\n            )\n            -&gt;setHeader(\n                'Access-Control-Allow-Headers',\n                'Origin, X-Requested-With, Content-Range, ' .\n                'Content-Disposition, Content-Type, Authorization'\n            )\n            -&gt;setHeader(\n                'Access-Control-Allow-Credentials', \n                'true'\n            )\n        ;\n    }\n\n    /**\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function call(Micro $application)\n    {\n        return true;\n    }\n}\n</code></pre> <p>Request Middleware</p> <p>This middleware is receiving a JSON payload and checks it. If the JSON payload is not valid it will stop execution.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\Micro\\MiddlewareInterface;\n\n/**\n * RequestMiddleware\n *\n * @property Request  $request\n * @property Response $response\n */\nclass RequestMiddleware implements MiddlewareInterface\n{\n    /**\n     * @param Event $event\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function beforeExecuteRoute(\n        Event $event, \n        Micro $application\n    ) {\n        json_decode(\n            $application\n                -&gt;request\n                -&gt;getRawBody()\n        );\n\n        if (JSON_ERROR_NONE !== json_last_error()) {\n            $application\n                -&gt;response\n                -&gt;redirect('/malformed')\n                -&gt;send()\n            ;\n\n            return false;\n        }\n\n        return true;\n\n    }\n\n    /**\n     * @param Micro $application\n     *\n     * @returns bool\n     */\n    public function call(Micro $application)\n    {\n        return true;\n    }\n}\n</code></pre> <p>Response Middleware</p> <p>This middleware is responsible for manipulating our response and sending it back to the caller as a JSON string. Therefore we need to attach it to the <code>after</code> event of our Micro application.</p> <p>NOTE</p> <p>We are going to be using the <code>call</code> method for this middleware, since we have nearly executed the whole request cycle.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\Micro\\MiddlewareInterface;\n\n/**\n * ResponseMiddleware\n *\n * @property Response $response\n */\nclass ResponseMiddleware implements MiddlewareInterface\n{\n     /**\n      * @param Micro $application\n      *\n      * @returns bool\n      */\n    public function call(Micro $application)\n    {\n        $payload = [\n            'code'    =&gt; 200,\n            'status'  =&gt; 'success',\n            'message' =&gt; '',\n            'payload' =&gt; $application-&gt;getReturnedValue(),\n        ];\n\n        $application\n            -&gt;response\n            -&gt;setJsonContent($payload)\n            -&gt;send()\n        ;\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"application-micro/#models","title":"Models","text":"<p>Models can be used in Micro applications, so long as we instruct the application how it can find the relevant classes with an autoloader.</p> <p>NOTE</p> <p>The relevant <code>db</code> service must be registered in your DI container.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\Micro;\n\n$loader = new Loader();\n$loader\n    -&gt;registerDirs(\n        [\n            __DIR__ . '/models/',\n        ]\n    )\n    -&gt;register();\n\n$app = new Micro();\n\n$app-&gt;get(\n    '/invoices/find',\n    function () {\n        $invoices = Invoices::find();\n\n        foreach ($invoices as $invoice) {\n            echo $invoice-&gt;inv_id, '&lt;br&gt;';\n        }\n    }\n);\n\n$app-&gt;handle(\n    $_SERVER[\"REQUEST_URI\"]\n);\n</code></pre>"},{"location":"application-micro/#model-injection","title":"Model injection","text":"<p>By using the Phalcon\\Mvc\\Model\\Binder class you can inject model instances into your routes:</p> <p><pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\Model\\Binder;\n\n$loader = new Loader();\n\n$loader-&gt;registerDirs(\n    [\n        __DIR__ . '/models/',\n    ]\n)-&gt;register();\n\n$app = new Micro();\n\n$app-&gt;setModelBinder(\n    new Binder()\n);\n\n$app-&gt;get(\n    \"/invoices/view/{id:[0-9]+}\",\n    function (Invoices $id) {\n        // ...\n    }\n);\n\n$app-&gt;handle(\n    $_SERVER[\"REQUEST_URI\"]\n);\n</code></pre> Since the Binder object is using internally PHP's Reflection API which requires additional CPU cycles, there is an option to set a cache so as to speed up the process. This can be done by using the second argument of <code>setModelBinder()</code> which can also accept a service name or just by passing a cache instance to the <code>Binder</code> constructor.</p> <p>Currently the binder will only use the models primary key to perform a <code>findFirst()</code> on. An example route for the above would be <code>/invoices/view/1</code>.</p>"},{"location":"application-micro/#views","title":"Views","text":"<p>Phalcon\\Mvc\\Micro does not have inherently a view service. We can however use the Phalcon\\Mvc\\View\\Simple component to render views.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\View\\Simple;\n\n$app = new Micro();\n\n$app['view'] = function () {\n    $view = new Simple();\n    $view-&gt;setViewsDir('app/views/');\n\n    return $view;\n};\n\n$app-&gt;get(\n    '/invoices/show',\n    function () use ($app) {\n        // app/views/invoices/view.phtml\n        echo $app['view']\n            -&gt;render(\n                'invoices/view',\n                [\n                    'id'         =&gt; 4,\n                    'customerId' =&gt; 3,\n                    'title'      =&gt; 'Invoice for ACME Inc.',\n                    'total'      =&gt; 100,\n                ]\n            )\n        ;\n    }\n);\n</code></pre> <p>NOTE</p> <p>The above example uses the Phalcon\\Mvc\\View\\Simple component, which uses relative paths instead of controllers and actions. You can use the Phalcon\\Mvc\\View component instead, but to do so you will need to change the parameters passed to <code>render()</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\View;\n\n$app['view'] = function () {\n    $view = new View();\n\n    $view-&gt;setViewsDir('app/views/');\n\n    return $view;\n};\n\n$app-&gt;get(\n    '/invoices/view',\n    function () use ($app) {\n        // app/views/invoices/view.phtml\n        echo $app['view']\n            -&gt;render(\n                'invoices',\n                'view',\n                [\n                    'id'         =&gt; 4,\n                    'customerId' =&gt; 3,\n                    'title'      =&gt; 'Invoice for ACME Inc.',\n                    'total'      =&gt; 100,\n                ]\n            )\n        ;\n    }\n);\n</code></pre>"},{"location":"application-micro/#exceptions","title":"Exceptions","text":"<p>Any exceptions thrown in the Phalcon\\Mvc\\Micro component will be of type Phalcon\\Mvc\\Micro\\Exception. You can use this exception to selectively catch exceptions thrown only from this component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Mvc\\Micro\\Exception;\n\ntry {\n    $app = new Micro();\n    $app-&gt;before(false);\n\n    $app-&gt;handle(\n        $_SERVER[\"REQUEST_URI\"]\n    );\n} catch (Exception $ex) {\n    echo $ex-&gt;getMessage();\n}\n</code></pre>"},{"location":"application-micro/#error-handling","title":"Error Handling","text":"<p>The Phalcon\\Mvc\\Micro application also has an <code>error</code> method, which can be used to trap any errors that originate from exceptions. The following code snippet shows basic usage of this feature:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n\n$app-&gt;get(\n    '/',\n    function () {\n        throw new \\Exception(\n            'Error', \n            401\n        );\n    }\n);\n\n$app-&gt;error(\n    function ($exception) {\n        echo json_encode(\n            [\n                'code'    =&gt; $exception-&gt;getCode(),\n                'status'  =&gt; 'error',\n                'message' =&gt; $exception-&gt;getMessage(),\n            ]\n        );\n    }\n);\n</code></pre>"},{"location":"application/","title":"Application","text":""},{"location":"application/#overview","title":"Overview","text":"<p>Phalcon\\Mvc\\Application is a component that encapsulates all the complex operations behind instantiating every component required to run an MVC application. This is a full stack application integrated with all the additional services required to allow the MVC pattern to operate as desired.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Mvc\\Application;\n\n$container   = new FactoryDefault();\n$application = new Application($container);\n\ntry {\n    $response = $application-&gt;handle(\n        $_SERVER[\"REQUEST_URI\"]\n    );\n\n    $response-&gt;send();\n} catch (\\Exception $e) {\n    echo $e-&gt;getMessage();\n}\n</code></pre>"},{"location":"application/#methods","title":"Methods","text":"<p><pre><code>public function __construct(\n    DiInterface $container = null\n)\n</code></pre> Constructor. Accepts a DI container with relevant services</p> <p><pre><code>public function getDefaultModule(): string\n</code></pre> Returns the default module name</p> <p><pre><code>public function getEventsManager(): ManagerInterface\n</code></pre> Returns the internal event manager</p> <p><pre><code>public function getModule(\n    string $name\n): array | object\n</code></pre> Gets the module definition registered in the application via module name</p> <p><pre><code>public function getModules(): array\n</code></pre> Return the modules registered in the application</p> <p><pre><code>public function registerModules(\n    array $modules, \n    bool $merge = false\n): AbstractApplication\n</code></pre> Register an array of modules present in the application</p> <pre><code>$this-&gt;registerModules(\n    [\n        \"front\" =&gt; [\n            \"className\" =&gt; \\Multi\\Front\\Module::class,\n            \"path\"      =&gt; \"../apps/front/Module.php\",\n        ],\n        \"back\" =&gt; [\n            \"className\" =&gt; \\Multi\\Back\\Module::class,\n            \"path\"      =&gt; \"../apps/back/Module.php\",\n        ],\n    ]\n);\n</code></pre> <p><pre><code>public function setDefaultModule(\n    string $defaultModule\n): AbstractApplication\n</code></pre> Sets the module name to be used if the router doesn't return a valid module</p> <p><pre><code>public function setEventsManager(\n    ManagerInterface $eventsManager\n): void\n</code></pre> Sets the events manager</p> <p><pre><code>public function handle(\n    string $uri\n): ResponseInterface | bool\n</code></pre> Handles a MVC request. Accepts the server URI (usually <code>$_SERVER['REQUEST_URI</code>]`)</p> <p><pre><code>public function sendCookiesOnHandleRequest(\n    bool $sendCookies\n): Application\n</code></pre> Enables or disables sending cookies by each request handling</p> <p><pre><code>public function sendHeadersOnHandleRequest(\n    bool $sendHeaders\n): Application\n</code></pre> Enables or disables sending headers by each request handling</p> <p><pre><code>public function useImplicitView(\n    bool $implicitView\n): Application\n</code></pre> This is enabled by default. The view is implicitly buffering all the output. You can fully disable the view component using this method</p>"},{"location":"application/#activation","title":"Activation","text":"<p>Phalcon\\Mvc\\Application performs all the work necessary to glue all the necessary components together so that the application can run. There are several ways that you can bootstrap your application. The most common way to bootstrap the application is:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault();\nuse Phalcon\\Mvc\\Application;\n\n$container = new FactoryDefault();\n\n// Services\n// ...\n\n$application = new Application($container);\n\ntry {\n    $response = $application-&gt;handle(\n        $_SERVER[\"REQUEST_URI\"]\n    );\n\n    $response-&gt;send();\n} catch (\\Exception $e) {\n    echo 'Exception: ', $e-&gt;getMessage();\n}\n</code></pre> <p>The core of all the work of the controller occurs when <code>handle()</code> is invoked:</p> <pre><code>&lt;?php\n\n$response = $application-&gt;handle(\n    $_SERVER[\"REQUEST_URI\"]\n);\n</code></pre>"},{"location":"application/#manual-bootstrapping","title":"Manual Bootstrapping","text":"<p>If you do not wish to use Phalcon\\Mvc\\Application, the code above can be changed as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault();\nuse Phalcon\\Mvc\\Application;\n\n$container = new FactoryDefault();\n\n$router = $container['router'];\n\n$router-&gt;handle(\n    $_SERVER[\"REQUEST_URI\"]\n);\n\n$view = $container['view'];\n\n$dispatcher = $container['dispatcher'];\n\n$dispatcher-&gt;setControllerName(\n    $router-&gt;getControllerName()\n);\n\n$dispatcher-&gt;setActionName(\n    $router-&gt;getActionName()\n);\n\n$dispatcher-&gt;setParams(\n    $router-&gt;getParams()\n);\n\n// View\n$view-&gt;start();\n\n// Dispatcher\n$dispatcher-&gt;dispatch();\n\n// View \n$view-&gt;render(\n    $dispatcher-&gt;getControllerName(),\n    $dispatcher-&gt;getActionName(),\n    $dispatcher-&gt;getParams()\n);\n\n// View\n$view-&gt;finish();\n\n$response = $container['response'];\n\n$response-&gt;setContent(\n    $view-&gt;getContent()\n);\n\n$response-&gt;send();\n</code></pre> <p>The following replacement of Phalcon\\Mvc\\Application does not have the <code>view</code>, making it suitable for REST API applications:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault();\nuse Phalcon\\Http\\ResponseInterface;\nuse Phalcon\\Mvc\\Application;\n\n$container = new FactoryDefault();\n\n$router = $container['router'];\n\n$router-&gt;handle(\n    $_SERVER[\"REQUEST_URI\"]\n);\n\n$dispatcher = $container['dispatcher'];\n\n$dispatcher-&gt;setControllerName(\n    $router-&gt;getControllerName()\n);\n\n$dispatcher-&gt;setActionName(\n    $router-&gt;getActionName()\n);\n\n$dispatcher-&gt;setParams(\n    $router-&gt;getParams()\n);\n\n$dispatcher-&gt;dispatch();\n\n$response = $dispatcher-&gt;getReturnedValue();\n\nif ($response instanceof ResponseInterface) {\n    $response-&gt;send();\n}\n</code></pre> <p>Another way that catches exceptions generated in the dispatcher forwarding to other actions consequently is as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault();\nuse Phalcon\\Http\\ResponseInterface;\nuse Phalcon\\Mvc\\Application;\n\n$container = new FactoryDefault();\n\n// Get the 'router' service\n$router = $container['router'];\n\n$router-&gt;handle(\n    $_SERVER[\"REQUEST_URI\"]\n);\n\n$dispatcher = $container['dispatcher'];\n\n$dispatcher-&gt;setControllerName(\n    $router-&gt;getControllerName()\n);\n\n$dispatcher-&gt;setActionName(\n    $router-&gt;getActionName()\n);\n\n$dispatcher-&gt;setParams(\n    $router-&gt;getParams()\n);\n\ntry {\n    $dispatcher-&gt;dispatch();\n} catch (Exception $e) {\n    // 503\n    $dispatcher-&gt;setControllerName('errors');\n    $dispatcher-&gt;setActionName('action503');\n\n    $dispatcher-&gt;dispatch();\n}\n\n$response = $dispatcher-&gt;getReturnedValue();\n\nif ($response instanceof ResponseInterface) {\n    $response-&gt;send();\n}\n</code></pre> <p>Depending on your application needs, you might want to have full control of what should be instantiated or not, or replace certain components with those of your own to extend the default functionality. The bootstrapping method you choose depends on the needs of your application.</p>"},{"location":"application/#single-multi-module","title":"Single - Multi Module","text":"<p>Phalcon\\Mvc\\Application offers two ways of MVC structures: Single and Multi module.</p>"},{"location":"application/#single-module","title":"Single Module","text":"<p>Single module MVC applications consist of one module only. Namespaces can be used but are not necessary. The structure of such application is usually as follows:</p> <pre><code>single/\n    app/\n        controllers/\n        models/\n        views/\n    public/\n        css/\n        img/\n        js/\n</code></pre> <p>If namespaces are not used, the following bootstrap file could be used:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Mvc\\View;\n\n$loader = new Loader();\n$loader-&gt;registerDirs(\n    [\n        '../apps/controllers/',\n        '../apps/models/',\n    ]\n);\n\n$loader-&gt;register();\n\n$container = new FactoryDefault();\n\n$container-&gt;set(\n    'view',\n    function () {\n        $view = new View();\n        $view-&gt;setViewsDir(\n            '../apps/views/'\n        );\n\n        return $view;\n    }\n);\n\n$application = new Application($container);\n\ntry {\n    $response = $application-&gt;handle(\n        $_SERVER[\"REQUEST_URI\"]\n    );\n\n    $response-&gt;send();\n} catch (\\Exception $e) {\n    echo $e-&gt;getMessage();\n}\n</code></pre> <p>If namespaces are used, the bootstrap changes slightly:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\View;\n\n$loader = new Loader();\n$loader-&gt;registerNamespaces(\n    [\n        'Single\\Controllers' =&gt; '../apps/controllers/',\n        'Single\\Models'      =&gt; '../apps/models/',\n    ]\n);\n\n$loader-&gt;register();\n\n$container = new FactoryDefault();\n\n$container-&gt;set(\n    'dispatcher',\n    function () {\n        $dispatcher = new Dispatcher();\n        $dispatcher-&gt;setDefaultNamespace(\n            'Single\\Controllers'\n        );\n\n        return $dispatcher;\n    }\n);\n\n$container-&gt;set(\n    'view',\n    function () {\n        $view = new View();\n        $view-&gt;setViewsDir(\n            '../apps/views/'\n        );\n\n        return $view;\n    }\n);\n\n$application = new Application($container);\n\ntry {\n    $response = $application-&gt;handle(\n        $_SERVER[\"REQUEST_URI\"]\n    );\n\n    $response-&gt;send();\n} catch (\\Exception $e) {\n    echo $e-&gt;getMessage();\n}\n</code></pre>"},{"location":"application/#multi-module","title":"Multi Module","text":"<p>A multi-module application uses the same document root for more than one module. Modules are groups of components/files that offer functionality but increase maintainability and isolate functionality if necessary. Each module must implement the Phalcon\\Mvc\\ModuleDefinitionInterface, to ensure proper functionality. A sample directory structure can be seen below:</p> <p><pre><code>multiple/\n  apps/\n    front/\n       controllers/\n       models/\n       views/\n       Module.php\n    back/\n       controllers/\n       models/\n       views/\n       Module.php\n  public/\n    css/\n    img/\n    js/\n</code></pre> Each subdirectory in <code>apps/</code> directory have its own MVC structure. A <code>Module.php</code> file is present in each module directory, to configure specific settings of each module, such as autoloaders, custom services etc.</p> <pre><code>&lt;?php\n\nnamespace Multi\\Back;\n\nuse Phalcon\\Loader;\nuse Phalcon\\Di\\DiInterface;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\ModuleDefinitionInterface;\nuse Phalcon\\Mvc\\View;\n\nclass Module implements ModuleDefinitionInterface\n{\n    public function registerAutoloaders(\n        DiInterface $container = null\n    )\n    {\n        $loader = new Loader();\n        $loader-&gt;registerNamespaces(\n            [\n                'Multi\\Back\\Controllers' =&gt; '../apps/back/controllers/',\n                'Multi\\Back\\Models'      =&gt; '../apps/back/models/',\n            ]\n        );\n\n        $loader-&gt;register();\n    }\n\n    public function registerServices(DiInterface $container)\n    {\n        // Registering a dispatcher\n        $container-&gt;set(\n            'dispatcher',\n            function () {\n                $dispatcher = new Dispatcher();\n                $dispatcher-&gt;setDefaultNamespace(\n                    'Multi\\Back\\Controllers'\n                );\n\n                return $dispatcher;\n            }\n        );\n\n        // Registering the view component\n        $container-&gt;set(\n            'view',\n            function () {\n                $view = new View();\n                $view-&gt;setViewsDir(\n                    '../apps/back/views/'\n                );\n\n                return $view;\n            }\n        );\n    }\n}\n</code></pre> <p>A slightly modified bootstrap file is required for a a multi module MVC architecture</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Mvc\\Router;\n\n$container = new FactoryDefault();\n\n$container-&gt;set(\n    'router',\n    function () {\n        $router = new Router();\n\n        $router-&gt;setDefaultModule('front');\n\n        $router-&gt;add(\n            '/login',\n            [\n                'module'     =&gt; 'back',\n                'controller' =&gt; 'login',\n                'action'     =&gt; 'index',\n            ]\n        );\n\n        $router-&gt;add(\n            '/admin/products/:action',\n            [\n                'module'     =&gt; 'back',\n                'controller' =&gt; 'products',\n                'action'     =&gt; 1,\n            ]\n        );\n\n        $router-&gt;add(\n            '/products/:action',\n            [\n                'controller' =&gt; 'products',\n                'action'     =&gt; 1,\n            ]\n        );\n\n        return $router;\n    }\n);\n\n$application = new Application($container);\n\n$application-&gt;registerModules(\n    [\n        'front' =&gt; [\n            'className' =&gt; \\Multi\\Front\\Module::class,\n            'path'      =&gt; '../apps/front/Module.php',\n        ],\n        'back'  =&gt; [\n            'className' =&gt; \\Multi\\Back\\Module::class,\n            'path'      =&gt; '../apps/back/Module.php',\n        ]\n    ]\n);\n\ntry {\n    $response = $application-&gt;handle(\n        $_SERVER[\"REQUEST_URI\"]\n    );\n\n    $response-&gt;send();\n} catch (\\Exception $e) {\n    echo $e-&gt;getMessage();\n}\n</code></pre> <p>If you want to keep the module configuration in your bootstrap file, you can use an anonymous function to register the module.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\n\n$view = new View();\n\n// ...\n\n$application-&gt;registerModules(\n    [\n        'front' =&gt; function ($container) use ($view) {\n            $container-&gt;setShared(\n                'view',\n                function () use ($view) {\n                    $view-&gt;setViewsDir(\n                        '../apps/front/views/'\n                    );\n\n                    return $view;\n                }\n            );\n        },\n        'back' =&gt; function ($container) use ($view) {\n            $container-&gt;setShared(\n                'view',\n                function () use ($view) {\n                    $view-&gt;setViewsDir(\n                        '../apps/back/views/'\n                    );\n\n                    return $view;\n                }\n            );\n        }\n    ]\n);\n</code></pre> <p>When Phalcon\\Mvc\\Application has modules registered, it is essential that every matched route returns a valid module. Each registered module has an associated class exposing methods for the module setup. </p> <p>Module definition classes must implement two methods:  - <code>registerAutoloaders()</code> and  - <code>registerServices()</code></p> <p>These will be called by the Phalcon\\Mvc\\Application accordingly.</p>"},{"location":"application/#exceptions","title":"Exceptions","text":"<p>Any exceptions thrown in the Phalcon\\Mvc\\Application component will be of type Phalcon\\Mvc\\Application\\Exception or Phalcon\\Application\\Exception. You can use this exception to selectively catch exceptions thrown only from this component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Mvc\\Application\\Exception;\n\ntry {\n    $container   = new FactoryDefault();\n\n    // ...\n\n    $application = new Application($container);\n    $application-&gt;registerModules(\n        [\n            'front' =&gt; false,\n        ]\n    );\n\n    $response = $application-&gt;handle(\n        $_SERVER[\"REQUEST_URI\"]\n    );\n\n    $response-&gt;send();\n} catch (Exception $e) {\n    echo $e-&gt;getMessage();\n}\n</code></pre>"},{"location":"application/#events","title":"Events","text":"<p>Phalcon\\Mvc\\Application is able to send events to the EventsManager (if it is present). Events are triggered using the type <code>application</code>. The following events are supported:</p> Event Name Triggered <code>boot</code> Executed when the application handles its first request <code>beforeStartModule</code> Before initialize a module, only when modules are registered <code>afterStartModule</code> After initialize a module, only when modules are registered <code>beforeHandleRequest</code> Before execute the dispatch loop <code>afterHandleRequest</code> After execute the dispatch loop <p>The following example demonstrates how to attach listeners to this component:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager;\n\n$manager = new Manager();\n\n$application-&gt;setEventsManager($manager);\n\n$manager-&gt;attach(\n    'application',\n    function (Event $event, $application) {\n        // ...\n    }\n);\n</code></pre>"},{"location":"application/#external-resources","title":"External Resources","text":"<ul> <li>MVC examples on GitHub</li> </ul>"},{"location":"assets/","title":"Assets Management","text":""},{"location":"assets/#overview","title":"Overview","text":"<p><code>Phalcon\\Assets</code> is a component that allows you to manage static assets such as CSS stylesheets or JavaScript libraries in a web application.</p> <p>Phalcon\\Assets\\Manager is the component you can use to register your assets and use them throughout your application. If you are using the Phalcon\\Di\\FactoryDefault container, the Assets Manager is already registered for you. You can access it using the <code>assets</code> key from your Di container.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault();\n\n$container = new FactoryDefault();\n$manager   = $container-&gt;get('assets')\n</code></pre>"},{"location":"assets/#assets","title":"Assets","text":"<p>Assets can be added to the manager or a collection using the Asset related classes. The Phalcon\\Assets\\Asset class. The object accepts the necessary data to create the asset.  * <code>type</code>: can be <code>css</code>, <code>js</code> or something else, depending on whether you want to extend the functionality of the component. * <code>path</code> : the path of the asset * <code>local</code>: whether this is a local asset or not * <code>filter</code>: any filter attached to this asset * <code>attributes</code>: attributes relative to the asset * <code>version</code>: version of the asset * <code>autoVersion</code>: let the component auto version this asset or not</p> <pre><code>&lt;?php\n\nuse Phalcon\\Assets\\Asset;\n\n$asset = new Asset(\n    'css',\n    'css/bootstrap.css',\n    true,\n    null,\n    [],\n    '1.0',\n    true\n);\n</code></pre>"},{"location":"assets/#css","title":"CSS","text":"<p>You can also use the Phalcon\\Assets\\Asset\\Css class to create a CSS asset. This class is a helper class that extends the Phalcon\\Assets\\Asset class and internally sets the first parameter to <code>css</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Assets\\Asset\\Css;\n\n$asset = new Css(\n    'css/bootstrap.css',\n    true,\n    null,\n    [],\n    '1.0',\n    true\n);\n</code></pre>"},{"location":"assets/#js","title":"JS","text":"<p>You can also use the Phalcon\\Assets\\Asset\\Js class to create a JS asset. This class is a helper class that extends the Phalcon\\Assets\\Asset class and internally sets the first parameter to <code>js</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Assets\\Asset\\Js;\n\n$asset = new Js(\n    'js/bootstrap.js',\n    true,\n    null,\n    [],\n    '1.0',\n    true\n);\n</code></pre>"},{"location":"assets/#inline","title":"Inline","text":"<p>There are times that the application needs generated CSS or JS to be injected into the view. You can use the Phalcon\\Assets\\Inline class to generate this content. The object can be created with the following parameters: * <code>type</code>: can be <code>css</code>, <code>js</code> or something else, depending on whether you want to extend the functionality of the component. * <code>content</code>: the content to be injected * <code>filter</code>: any filter attached to this asset * <code>attributes</code>: attributes relative to the asset</p> <pre><code>&lt;?php\n\nuse Phalcon\\Assets\\Inline;\n\n$asset = new Inline(\n    'css',\n    '.spinner {color: blue; }'\n);\n</code></pre>"},{"location":"assets/#css_1","title":"CSS","text":"<p>You can also use the Phalcon\\Assets\\Inline\\Css class to create an inline CSS asset. This class is a helper class that extends the Phalcon\\Assets\\Inline class and internally sets the first parameter to <code>css</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Assets\\Inline\\Css;\n\n$asset = new Css(\n    '.spinner {color: blue; }'\n);\n</code></pre>"},{"location":"assets/#js_1","title":"JS","text":"<p>You can also use the Phalcon\\Assets\\Inline\\Js class to create an inline JS asset. This class is a helper class that extends the Phalcon\\Assets\\Inline class and internally sets the first parameter to <code>js</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Assets\\Asset\\Js;\n\n$asset = new Js(\n    'alert(\"hello\");'\n);\n</code></pre>"},{"location":"assets/#custom","title":"Custom","text":"<p>Implementing the Phalcon\\Assets\\AssetInterface enables you to create different asset classes that can be handled by the Asset Manager.</p>"},{"location":"assets/#exception","title":"Exception","text":"<p>Any exceptions thrown in the Assets Manager component will be of type Phalcon\\Assets\\Exception. You can use this exception to selectively catch exceptions thrown only from this component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Assets\\Exception;\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    public function index()\n    {\n        try {\n            // Add some local CSS assets\n            $this-&gt;assets-&gt;addCss('css/style.css');\n            $this-&gt;assets-&gt;addCss('css/index.css');\n        } catch (Exception $ex) {\n            echo $ex-&gt;getMessage();\n        }\n    }\n}\n</code></pre>"},{"location":"assets/#adding-assets","title":"Adding Assets","text":""},{"location":"assets/#files","title":"Files","text":"<p>Assets supports two built-in assets: CSS and JavaScript assets. You can also create other asset types if you need. The assets manager internally stores two default collections of assets - one for JavaScript and another for CSS. </p> <p>You can easily add assets to these collections:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    public function index()\n    {\n        // Add some local CSS assets\n        $this-&gt;assets-&gt;addCss('css/style.css');\n        $this-&gt;assets-&gt;addCss('css/index.css');\n\n        // And some local JavaScript assets\n        $this-&gt;assets-&gt;addJs('js/jquery.js');\n        $this-&gt;assets-&gt;addJs('js/bootstrap.min.js');\n    }\n}\n</code></pre> <p>For better page load performance, it is recommended to place JavaScript links at the end of the HTML instead of in the <code>&lt;head&gt;</code> element. However this might not be always feasible based on the Javascript files you need to load and their dependencies.</p> <p>You can also add assets to the manager by using Asset objects: <pre><code>&lt;?php\n\nuse Phalcon\\Assets\\Asset\\Css;\nuse Phalcon\\Assets\\Asset\\Js;\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    public function index()\n    {\n        $css1 = new Css('css/style.css');\n        $css2 = new Css('css/index.css');\n\n        $this-&gt;assets-&gt;addAsset($css1);\n        $this-&gt;assets-&gt;addAssetByType('css', $css2);\n\n        $js1 = new Js('js/jquery.js');\n        $js2 = new Js('js/bootstrap.min.js');\n\n        $this-&gt;assets-&gt;addAsset($js1);\n        $this-&gt;assets-&gt;addAssetByType('js', $js2);\n    }\n}\n</code></pre></p>"},{"location":"assets/#inline_1","title":"Inline","text":"<p>You can also add inline assets to the manager. Inline assets represent strings of CSS or JS that need to be injected in your views dynamically (not from an asset file). <code>addInlineCode()</code>, <code>addInlineCodeByType()</code>, <code>addInlineCss()</code> and <code>addInlineJs()</code> are available for your use.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Assets\\Manager;\nuse Phalcon\\Assets\\Inline;\n\n$css      = '.spinner {color: blue; }';\n$js       = 'alert(\"hello\")';\n$manager  = new Manager();\n$assetCss = new Inline('css', $css};\n$assetJs  = new Inline('js', $js};\n\n$manager\n    -&gt;addInlineCode($assetCss)\n    -&gt;addInlineCode($assetJs)\n;\n\n$manager\n    -&gt;addInlineByType('css', $assetCss)\n    -&gt;addInlineByType('js', $assetJs)\n;\n\n$manager\n    -&gt;addInlineCss($css)\n    -&gt;addInlineJs($js)\n;\n</code></pre>"},{"location":"assets/#localremote-assets","title":"Local/Remote Assets","text":"<p>Local assets are those who are provided by the same application and they are located in a public location (usually <code>public</code>). The URLs for local assets are generated using the url service.</p> <p>Remote assets are those such as common libraries like jQuery, Bootstrap, etc. that are provided by a CDN.</p> <p>The second parameter of <code>addCss()</code> and <code>addJs()</code> signifies whether asset is local or not (<code>true</code> is local, <code>false</code> is remote). By default, the assets manager will assume the asset is local:</p> <pre><code>&lt;?php\n\npublic function indexAction()\n{\n    $this-&gt;assets-&gt;addCss(\n        '//cdn.assets.com/bootstrap/4/css/library.min.css', \n        false\n    );\n\n    $this-&gt;assets-&gt;addCss('css/style.css', true);\n    $this-&gt;assets-&gt;addCss('css/extra.css');\n}\n</code></pre>"},{"location":"assets/#collections","title":"Collections","text":"<p>Phalcon\\Assets\\Collections are objects that group assets of the same type. The assets manager implicitly creates two collections: <code>css</code> and <code>js</code>. You can create additional collections to group specific assets to make it easier to place those assets in the views:</p> <pre><code>&lt;?php\n\n// Javascript - header\n$headerCollection = $this-&gt;assets-&gt;collection('headerJs');\n\n$headerCollection-&gt;addJs('js/jquery.js');\n$headerCollection-&gt;addJs('js/bootstrap.min.js');\n\n// Javascript - footer\n$footerCollection = $this-&gt;assets-&gt;collection('footerJs');\n\n$footerCollection-&gt;addJs('js/jquery.js');\n$footerCollection-&gt;addJs('js/bootstrap.min.js');\n</code></pre>"},{"location":"assets/#get","title":"Get","text":"<p>The getter methods exposed by the component, allow you to get the collection from anywhere in your code and manipulate it according to your needs. The manager offers <code>get()</code>, <code>getCollection()</code>, <code>getCss()</code> and <code>getJs()</code>. These methods will return back the collection that the manager stores. The <code>getCss()</code> and <code>getJs()</code> will return the built-in - pre registered - collections. </p> <p>The <code>collection()</code> method acts as a creator and getter at the same time. It allows you to create a collection and get it back so that you can then add assets to it. The <code>getCss()</code> and <code>getJs()</code> perform the same function i.e. create the collection if it does not exist and return it. Those two collections set the predefined <code>css</code> and <code>js</code> collections in the manager.</p> <pre><code>&lt;?php\n\n$headerCollection = $this-&gt;assets-&gt;collection('headerJs');\n\n$headerCollection = $this-&gt;assets-&gt;get('headerJs');\n</code></pre>"},{"location":"assets/#exists","title":"Exists","text":"<p>The <code>exists</code> method allows you to check if a particular collection exists in the manager; <pre><code>&lt;?php\n\n$headerCollection = $this-&gt;assets-&gt;collection('headerJs');\n\necho $this-&gt;assets-&gt;has('headerJs'); // true\n</code></pre></p>"},{"location":"assets/#set","title":"Set","text":"<p>If the built-in <code>css</code> and <code>js</code> collections are not sufficient for your needs, you can attach a new collection to the manager by using <code>set()</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Assets\\Collection;\n\n$collection = new Collection();\n\n$this-&gt;assets-&gt;set('outputJs', $collection);\n</code></pre>"},{"location":"assets/#url-prefixes","title":"URL Prefixes","text":"<p>Collections can be URL-prefixed, allowing you to change the prefix easily based on the needs of your application. An example of this can be changing from local to production environments and using a different CDN URL for your assets:</p> <pre><code>&lt;?php\n\n$footerCollection = $this-&gt;assets-&gt;collection('footer');\n\nif ($config-&gt;environment === 'development') {\n    $footerCollection-&gt;setPrefix('/');\n} else {\n    $footerCollection-&gt;setPrefix('http:://cdn.example.com/');\n}\n\n$footerCollection-&gt;addJs('js/jquery.js');\n$footerCollection-&gt;addJs('js/bootstrap.min.js');\n</code></pre> <p>You can also chain the method calls if that syntax is more preferable:</p> <pre><code>&lt;?php\n\n$headerCollection = $this\n    -&gt;assets\n    -&gt;collection('header')\n    -&gt;setPrefix('https://cdn.example.com/')\n    -&gt;setLocal(false)\n    -&gt;addJs('js/jquery.js')\n    -&gt;addJs('js/bootstrap.min.js');\n</code></pre>"},{"location":"assets/#built-in-filters","title":"Built-In Filters","text":"<p>Assets can be filtered i.e. manipulated before their output to the view. Although Phalcon v3 offered minifiers for JavaScript and CSS, license limitations do not allow us to continue using those libraries. For v4 we are offering only the Phalcon\\Assets\\Filters\\None filter (which does not change the asset contents) and the Phalcon\\Assets\\FilterInterface interface, offering the ability to create custom filters.</p>"},{"location":"assets/#custom-filters","title":"Custom Filters","text":"<p>Creating custom filters is very easy. You can use this extensibility to take advantage of existing and more advanced filtering/minification tools like YUI, Sass, Closure, etc.:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Assets\\FilterInterface;\n\n/**\n * Filters CSS content using YUI\n *\n * @param string $contents\n * @return string\n */\nclass CssYUICompressor implements FilterInterface\n{\n    protected $options;\n\n    /**\n     * CssYUICompressor constructor\n     *\n     * @param array $options\n     */\n    public function __construct(array $options)\n    {\n        $this-&gt;options = $options;\n    }\n\n    /**\n     * @param string $contents\n     *\n     * @return string\n     */\n    public function filter($contents)\n    {\n        // Write the string contents into a temporal file\n        file_put_contents('temp/my-temp-1.css', $contents);\n\n        system(\n            $this-&gt;options['java-bin'] .\n            ' -jar ' .\n            $this-&gt;options['yui'] .\n            ' --type css ' .\n            'temp/my-temp-file-1.css ' .\n            $this-&gt;options['extra-options'] .\n            ' -o temp/my-temp-file-2.css'\n        );\n\n        // Return the contents of file\n        return file_get_contents('temp/my-temp-file-2.css');\n    }\n}\n</code></pre> <p>Usage:</p> <pre><code>&lt;?php\n\n// Get some CSS collection\n$css = $this-&gt;assets-&gt;get('head');\n\n// Add/Enable the YUI compressor filter in the collection\n$css-&gt;addFilter(\n    new CssYUICompressor(\n        [\n            'java-bin'      =&gt; '/usr/local/bin/java',\n            'yui'           =&gt; '/some/path/yuicompressor-x.y.z.jar',\n            'extra-options' =&gt; '--charset utf8',\n        ]\n    )\n);\n</code></pre> <p>In a previous example, we used a custom filter called <code>LicenseStamper</code>, which adds the license message at the top of the file:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Assets\\FilterInterface;\n\n/**\n * @param string $contents\n *\n * @return string\n */\nclass LicenseStamper implements FilterInterface\n{\n    /**\n     * Do the filtering\n     *\n     * @param string $contents\n     * @return string\n     */\n    public function filter($contents)\n    {\n        $license = '/* (c) 2019 Your Name Here */';\n\n        return $license . PHP_EOL . PHP_EOL . $contents;\n    }\n}\n</code></pre>"},{"location":"assets/#output","title":"Output","text":"<p>After all the assets have been added to their relevant collections you can use the output methods to print HTML in your views. These methods are <code>output()</code>, <code>outputCss()</code>, <code>outputJs()</code>, <code>outputInline()</code>, <code>outputInlineCss()</code> and <code>outputInlineJs()</code>.</p> <p>To output files: </p> <pre><code>&lt;?php\n\n// Javascript - header\n$headerCollection = $this-&gt;assets-&gt;collection('headerJs');\n\n$headerCollection-&gt;addJs('js/jquery.js');\n$headerCollection-&gt;addJs('js/bootstrap.min.js');\n\n// Javascript - footer\n$footerCollection = $this-&gt;assets-&gt;collection('footerJs');\n\n$footerCollection-&gt;addJs('js/jquery.js');\n$footerCollection-&gt;addJs('js/bootstrap.min.js');\n</code></pre> <p>Then in the views:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Some amazing website&lt;/title&gt;\n\n        &lt;?php $this-&gt;assets-&gt;outputJs('headerJs'); ?&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;!-- ... --&gt;\n\n        &lt;?php $this-&gt;assets-&gt;outputJs('footerJs'); ?&gt;\n    &lt;/body&gt;\n&lt;html&gt;\n</code></pre> <p>Volt syntax:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Some amazing website&lt;/title&gt;\n\n        {% raw %}{{ assets.outputCss('header') }}{% endraw %}\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;!-- ... --&gt;\n\n        {% raw %}{{ assets.outputJs('footer') }}{% endraw %}\n    &lt;/body&gt;\n&lt;html&gt;\n</code></pre> <p>To output inline:</p> <pre><code>&lt;?php\n\n$css      = '.spinner {color: blue; }';\n$js       = 'alert(\"hello\")';\n$assetCss = new Inline('css', $css};\n$assetJs  = new Inline('js', $js};\n\n$this\n    -&gt;assets\n    -&gt;addInlineCss($css)\n    -&gt;addInlineJs($js)\n;\n</code></pre> <p>Then in the views:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Some amazing website&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;?php $this-&gt;assets-&gt;outputInlineCss(); ?&gt;\n    &lt;body&gt;\n\n        &lt;!-- ... --&gt;\n\n        &lt;?php $this-&gt;assets-&gt;outputInlineJs(); ?&gt;\n    &lt;/body&gt;\n&lt;html&gt;\n</code></pre> <p>Volt syntax:</p> <p><pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Some amazing website&lt;/title&gt;\n\n        {% raw %}{{ assets.outputInlineCss() }}{% endraw %}\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;!-- ... --&gt;\n\n        {% raw %}{{ assets.outputInlineJs() }}{% endraw %}\n    &lt;/body&gt;\n&lt;html&gt;\n</code></pre> The lines above will be translated to:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Some amazing website&lt;/title&gt;\n\n        &lt;style&gt;.spinner {color: blue; }&lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;!-- ... --&gt;\n\n        &lt;script type=\"application/javascript\"&gt;alert(\"hello\")&lt;/script&gt;\n    &lt;/body&gt;\n&lt;html&gt;\n</code></pre>"},{"location":"assets/#custom-output","title":"Custom Output","text":"<p>The <code>outputJs()</code> and <code>outputCss()</code> methods are available to generate the necessary HTML code according to each type of assets. You can override this method or print the assets manually in the following way:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\n$jsCollection = $this-&gt;assets-&gt;collection('js');\n\nforeach ($jsCollection as $asset) {\n    echo Tag::javascriptInclude(\n        $asset-&gt;getPath()\n    );\n}\n</code></pre>"},{"location":"assets/#implicit-vs-explicit-output","title":"Implicit Vs Explicit Output","text":"<p>There are times that you might need to implicitly output the output of the manager. To do this, you can use the <code>useImplicitOutput()</code> method. Calling <code>output()</code> after that will echo the HTML on the screen.</p> <pre><code>&lt;?php\n\n$this\n    -&gt;assets\n    -&gt;useImplicitOutput(true)\n    -&gt;addCss('css/style.css')\n    -&gt;output()\n;\n</code></pre>"},{"location":"assets/#versioning","title":"Versioning","text":"<p>The <code>Assets</code> components also support versioning (automatic or manual). Versioning of assets is also known as cache busting. In short, CSS and JS files can easily be cached at the browser level. As such any updates that are pushed to the production system with a release, could include updated CSS and JS files. Since browsers cache those assets, the updated content will not be delivered to the user's browser immediately, resulting in potential loss of functionality. By versioning assets, we ensure that the browsers are instructed to download the asset files again and thus receive the latest CSS and JS code from the server.</p> <p>To add a version number to your assets, you need to add the version string while creating the asset object: <pre><code>&lt;?php\n\nuse Phalcon\\Assets\\Asset\\Css;\n\n$asset = new Css(\n    'css/bootstrap.css',\n    true,\n    null,\n    [],\n    '1.0'\n);\n</code></pre></p> <p>The above will result in the following script as the output:</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"css/bootstrap.css?ver=1.0\"\n</code></pre> <p>You can then store the version in your configuration file or any other storage and update it when a new release is pushed to production.</p>"},{"location":"assets/#auto-versioning","title":"Auto Versioning","text":"<p>You can also use the file time of the asset file to control the versioning of your assets.  <pre><code>&lt;?php\n\nuse Phalcon\\Assets\\Asset\\Css;\n\n$asset = new Css(\n    'css/bootstrap.css',\n    true,\n    null,\n    [],\n    null,\n    true\n);\n</code></pre> The above will result in the following script as the output (assuming that your file was modified in May 20th 2019): Assuming that your file was last modified in May 20, the version  <pre><code>&lt;link rel=\"stylesheet\" href=\"css/bootstrap.css?ver=1558392141\"&gt;\n</code></pre></p> <p>NOTE</p> <p>Using the auto version feature is not recommended for production environments, since Phalcon will need to read the modification time of the asset file for every request. This will result to unnecessary read operations on the file system. </p>"},{"location":"assets/#improving-performance","title":"Improving Performance","text":"<p>There are many ways to optimize processing assets. One method is to allow your web server to handle the assets, thus improving response time. First we need to set up the Assets Manager. We will use a base controller, but you can use the manager anywhere you need to, accessing it from the Di container:</p> <pre><code>&lt;?php\n\nnamespace App\\Controllers;\n\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * App\\Controllers\\ControllerBase\n *\n * This is the base controller for all controllers in the application.\n */\nclass ControllerBase extends Controller\n{\n    public function onConstruct()\n    {\n        $this\n            -&gt;assets\n            -&gt;useImplicitOutput(false)\n            -&gt;collection('global')\n            -&gt;addJs('https://code.jquery.com/jquery-4.0.1.js', false, true)\n        ;\n    }\n}\n</code></pre> <p>Then we need to configure the routing:</p> <pre><code>&lt;?php\n\n/**\n * Define custom routes.\n * This file gets included in the router service definition.\n */\n$router = new Phalcon\\Mvc\\Router();\n\n$router-&gt;addGet(\n    '/assets/(css|js)/([\\w.-]+)\\.(css|js)',\n    [\n        'controller' =&gt; 'assets',\n        'action'     =&gt; 'serve',\n        'type'       =&gt; 1,\n        'collection' =&gt; 2,\n        'extension'  =&gt; 3,\n    ]\n);\n\n// Other routes...\n</code></pre> <p>Finally, we need to create a controller to handle asset requests:</p> <pre><code>&lt;?php\n\nnamespace App\\Controllers;\n\nuse Phalcon\\Http\\Response;\n\n/**\n * Serve site assets.\n */\nclass AssetsController extends ControllerBase\n{\n    public function serveAction(): Response\n    {\n        // Getting a response instance\n        $response = new Response();\n\n        // Prepare output path\n        $collectionName = $this-&gt;dispatcher-&gt;getParam('collection');\n        $extension      = $this-&gt;dispatcher-&gt;getParam('extension');\n        $type           = $this-&gt;dispatcher-&gt;getParam('type');\n        $targetPath     = \"assets/{$type}/{$collectionName}.{$extension}\";\n\n        // Setting up the content type\n        $contentType = $type == 'js' ? 'application/javascript' : 'text/css';\n        $response-&gt;setContentType($contentType, 'UTF-8');\n\n        // Check collection existence\n        if (!$this-&gt;assets-&gt;exists($collectionName)) {\n            return $response-&gt;setStatusCode(404, 'Not Found');\n        }\n\n        // Setting up the Assets Collection\n        $collection = $this-&gt;assets\n            -&gt;collection($collectionName)\n            -&gt;setTargetUri($targetPath)\n            -&gt;setTargetPath($targetPath);\n\n        // Store content to the disk and return fully qualified file path\n        $contentPath = $this-&gt;assets-&gt;output(\n            $collection,\n            function (array $parameters) {\n                return BASE_PATH . '/public/' . $parameters[0];\n            },\n            $type\n        );\n\n        // Set the content of the response\n        $response-&gt;setContent(\n            file_get_contents($contentPath)\n        );\n\n        // Return the response\n        return $response;\n    }\n}\n</code></pre> <p>If precompiled assets exist in the file system they must be served directly by web server. So to get the benefit of static assets we have to update our server configuration. We will use an example configuration for Nginx. For Apache it will be a little different:</p> <pre><code>location ~ ^/assets/ {\n    expires 1y;\n    add_header Cache-Control public;\n    add_header ETag \"\";\n\n    # If the file exists as a static file serve it directly without\n    # running all the other rewrite tests on it\n    try_files $uri $uri/ @phalcon;\n}\n\nlocation / {\n    try_files $uri $uri/ @phalcon;\n}\n\nlocation @phalcon {\n    rewrite ^(.*)$ /index.php?_url=$1;\n}\n</code></pre>"},{"location":"assets/#other-configuration-directives","title":"Other Configuration Directives","text":"<p>We need to create <code>assets/js</code> and <code>assets/css</code> directories in the document root of the application (eg. <code>public</code>).</p> <p>Every time the application requests assets such as <code>/assets/js/global.js</code> the application will check whether the asset exists. If yes, it will be handled by the web server. Alternatively it will be redirected to the <code>AssetsController</code> for handling from the application.</p> <p>We do not recommend to use the above example in production environments and for high load applications. However, the example does show what is possible using this component. The implementation you choose depends on the needs of your application. </p> <p>In most cases, your web server, CDN or services such as Varnish HTTP Cache would be more preferable.</p>"},{"location":"cache/","title":"Cache","text":""},{"location":"cache/#overview","title":"Overview","text":"<p>The Phalcon\\Cache namespace offers a Cache component, that implements the PSR-16 interface, making it compatible with any component that requires that interface for its cache.</p> <p></p> <p>Frequently used data or already processed/calculated data, can be stored in a cache storage for easier and faster retrieval. Since Phalcon\\Cache components are written in Zephir, and therefore compiled as C code, they can achieve higher performance, while reducing the overhead that comes with getting data from any storage container. Some examples that warrant the use of cache are: </p> <ul> <li>You are making complex calculations and the output does not change frequently</li> <li>You are producing HTML using the same data all the time (same HTML)</li> <li>You are accessing database data constantly which does not change often.</li> </ul> <p>NOTE</p> <p>Even after implementing the cache, you should always check the hit ratio of your cache backend over a period of time, to ensure that your cache strategy is optimal.</p> <p>Phalcon\\Cache components rely on <code>Phalcon\\Storage</code> components. <code>Phalcon\\Storage</code> is split into two categories: Serializers and Adapters.</p>"},{"location":"cache/#cache_1","title":"Cache","text":"<p>In order to instantiate a new Phalcon\\Cache component, you will need to pass a <code>Phalcon\\Cache\\Adapter\\*</code> class in it or one that implements the Phalcon\\Cache\\Adapter\\AdapterInterface. For a detailed explanation on adapters and serializers, see below.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache;\nuse Phalcon\\Cache\\AdapterFactory;\nuse Phalcon\\Storage\\SerializerFactory;\n\n$serializerFactory = new SerializerFactory();\n$adapterFactory    = new AdapterFactory($serializerFactory);\n\n$options = [\n    'defaultSerializer' =&gt; 'Json',\n    'lifetime'          =&gt; 7200\n];\n\n$adapter = $adapterFactory-&gt;newInstance('apcu', $options);\n\n$cache = new Cache($adapter);\n</code></pre>"},{"location":"cache/#operations","title":"Operations","text":"<p>Since the cache component is PSR-16 compatible it implements all the necessary methods to satisfy the PSR-16 interfaces. Each Cache component contains a supplied Cache adapter which in turn is responsible for all operations.  </p>"},{"location":"cache/#get-getmultiple","title":"<code>get</code> - <code>getMultiple</code>","text":"<p>To get data from the cache you need to call the <code>get()</code> method with a key and a default value. If the key exists or it has not been expired, the data stored in it will be returned. Alternatively the passed <code>defaultValue</code> will be returned (default <code>null</code>).</p> <pre><code>$value = $cache-&gt;get('my-key');\n\n$value = $cache-&gt;get('my-key', 'default');\n</code></pre> <p>If you wish to retrieve more than one key with one call, you can call <code>getMultiple()</code>, passing an array with the keys needed. The method will return an array of <code>key</code> =&gt; <code>value</code> pairs. Cache keys that do not exist or have expired will have <code>defaultValue</code> as a value (default <code>null</code>).</p> <pre><code>$value = $cache-&gt;getMultiple(['my-key1', 'my-key2']);\n\n$value = $cache-&gt;getMultiple(['my-key1', 'my-key2'], 'default');\n</code></pre>"},{"location":"cache/#has","title":"<code>has</code>","text":"<p>To check whether a key exists in the cache (or it has not expired) you can call the <code>has()</code> method. The method will return <code>true</code> if the key exists, or <code>false</code> otherwise.</p> <pre><code>$exists = $cache-&gt;has('my-key');\n</code></pre>"},{"location":"cache/#set-setmultiple","title":"<code>set</code> - <code>setMultiple</code>","text":"<p>To save the data in the cache, you will need to use the <code>set()</code> method. The method accepts the key we wish to store the data under and the value of the item to store. The data needs to be of a type that supports serialization i.e. PHP type or an object that implements serialization. The last (optional) parameter is the TTL (time to live) value for this item. This option might not always be available, if the underlying adapter does not support it. The method will return <code>true</code> if the key exists, or <code>false</code> otherwise. If even one key is not successfully stored, the method will return <code>false</code>.</p> <pre><code>$result = $cache-&gt;set('my-key', $data);\n</code></pre> <p>If you wish to store more than one element with one call, you can call <code>setMultiple()</code>, passing an array of key =&gt; value pairs for the multiple-set operation. As with <code>set</code> the last (optional) parameter is the TTL (time to live). The method will return <code>true</code> if the key exists, or <code>false</code> otherwise.</p> <pre><code>$value = $cache-&gt;setMultiple(\n    [\n        'my-key1' =&gt; $data1, \n        'my-key2' =&gt; $data2,\n    ],\n    9600\n);\n</code></pre>"},{"location":"cache/#delete-deletemultiple-clear","title":"<code>delete</code> - <code>deleteMultiple</code> - <code>clear</code>","text":"<p>To delete an item from the cache you need to call the <code>delete()</code> method with a key. The method returns <code>true</code> on success and <code>false</code> on failure. `  <pre><code>$result = $cache-&gt;delete('my-key');\n</code></pre></p> <p>If you wish to delete more than one key with one call, you can call <code>deleteMultiple()</code>, passing an array with the keys needed. The method returns <code>true</code> on success and <code>false</code> on failure. If even one key is not successfully deleted, the method will return <code>false</code>. `  <pre><code>$result = $cache-&gt;deleteMultiple(['my-key1', 'my-key2']);\n</code></pre></p> <p>If you wish to clear all the keys, you can call the <code>clear()</code> method. The method returns <code>true</code> on success and <code>false</code> on failure.</p>"},{"location":"cache/#factory","title":"Factory","text":""},{"location":"cache/#newinstance","title":"<code>newInstance</code>","text":"<p>We can easily create a Phalcon\\Cache class using the <code>new</code> keyword. However Phalcon offers the Phalcon\\Cache\\CacheFactory class, so that developers can easily instantiate cache objects. The factory will accept a Phalcon\\Cache\\AdapterFactory object which will in turn be used to instantiate the necessary Cache class with the selected adapter and options. The factory always returns a new instance of Phalcon\\Cache.</p> <p>The example below shows how you can create a cache object using the <code>Apcu</code> adapter and <code>Json</code> serializer:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\CacheFactory;\nuse Phalcon\\Cache\\AdapterFactory;\nuse Phalcon\\Storage\\SerializerFactory;\n\n$options = [\n    'defaultSerializer' =&gt; 'Json',\n    'lifetime'          =&gt; 7200,\n];\n\n$serializerFactory = new SerializerFactory();\n$adapterFactory    = new AdapterFactory(\n    $serializerFactory,\n    $options\n);\n\n$cacheFactory = new CacheFactory($adapterFactory);\n\n$cache = $cacheFactory-&gt;newInstance('apcu');\n</code></pre>"},{"location":"cache/#load","title":"<code>load</code>","text":"<p>The Cache Factory also offers the <code>load</code> method, which accepts a configuration object. This object can be an array or a Phalcon\\Config object, with directives that are used to set up the cache. The object requires the <code>adapter</code> element, as well as the <code>options</code> element with the necessary directives.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\CacheFactory;\nuse Phalcon\\Cache\\AdapterFactory;\nuse Phalcon\\Storage\\SerializerFactory;\n\n$options = [\n    'defaultSerializer' =&gt; 'Json',\n    'lifetime'          =&gt; 7200,\n];\n\n$serializerFactory = new SerializerFactory();\n$adapterFactory    = new AdapterFactory(\n    $serializerFactory,\n    $options\n);\n\n$cacheFactory = new CacheFactory($adapterFactory);\n\n$cacheOptions = [\n    'adapter' =&gt; 'apcu',\n    'options' =&gt; [\n        'prefix' =&gt; 'my-prefix',\n    ],\n];\n\n$cache = $cacheFactory-&gt;load($cacheOptions);\n</code></pre>"},{"location":"cache/#exceptions","title":"Exceptions","text":"<p>Any exceptions thrown in the Cache component will be of type Phalcon\\Cache\\Exception\\Exception which implements Psr\\SimpleCache\\CacheException. Additionally the Phalcon\\Cache\\Exception\\InvalidArgumentException which implements also the Psr\\SimpleCache\\CacheException. It is thrown when the data supplied to the component or any sub components is not valid. You can use these exceptions to selectively catch exceptions thrown only from this component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Exception\\Exception;\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    public function index()\n    {\n        try {\n            // Get some configuration values\n            $this-&gt;cache-&gt;get('some-key');\n        } catch (Exception $ex) {\n            echo $ex-&gt;getMessage();\n        }\n    }\n}\n</code></pre>"},{"location":"cache/#serializers","title":"Serializers","text":"<p>The <code>Phalcon\\Storage\\Serializer</code> namespace offers classes that implement the Serializable interface and thus expose the <code>serialize</code> and <code>unserialize</code> methods. The purpose of these classes is to transform the data before saving it to the storage and after retrieving it from the storage.</p> <p>NOTE</p> <p>The default serializer for all adapters is <code>Phalcon\\Storage\\Serializer\\Php</code> which uses PHP's <code>serialize</code> and <code>unserialize</code> methods. These methods can suit most applications. However the developer might want to use something more efficient such as igbinary which is faster and achieves a better compression. </p> <p>The cache adapter can be configured to use a different serializer. The available serializers are:</p>"},{"location":"cache/#base64","title":"<code>Base64</code>","text":"<p>This serializer uses the <code>base64_encode</code> and <code>base64_decode</code> methods to serialize data. The input must be of type <code>string</code>, therefore this serializer has obvious limitations</p>"},{"location":"cache/#igbinary","title":"<code>Igbinary</code>","text":"<p>The <code>igbinary</code> serializes relies on the <code>igbinary_serialize</code> and <code>igbinary_unserialize</code> methods. Those methods are exposed via the igbinary PHP extension, which has to be installed and loaded on the target system.</p>"},{"location":"cache/#json","title":"<code>Json</code>","text":"<p>The <code>JSON</code> serializer uses <code>json_encode</code> and <code>json_decode</code>. The target system must have JSON support available for PHP.</p>"},{"location":"cache/#msgpack","title":"<code>Msgpack</code>","text":"<p>Similar to <code>igbinary</code> the <code>msgpack</code> serializer uses <code>msgpack_pack</code> and <code>msgpack_unpack</code> for serializing and unserializing data. This, along with <code>igbinary</code> is one of the fastest and most efficient serializers. However, it requires that the msgpack PHP extension is loaded on the target system.  </p>"},{"location":"cache/#none","title":"<code>None</code>","text":"<p>This serializer does not transform the data at all. Both its <code>serialize</code> and <code>unserialize</code> get and set the data without altering it.</p>"},{"location":"cache/#php","title":"<code>Php</code>","text":"<p>This is the default serializer. It uses PHP's <code>serialize</code> and <code>unserialize</code> methods for data transformations.</p>"},{"location":"cache/#custom","title":"Custom","text":"<p>Phalcon also offers the Phalcon\\Storage\\Serializer\\SerializerInterface` which can be implemented in a custom class. The class can offer the serialization you require.</p> <p><pre><code>&lt;?php\n\nnamespace MyApp\\Storage\\Serializer;\n\nuse Phalcon\\Storage\\SerializerInterface;\n\nclass Garble implements SerializerInterface\n{\n    /**\n     * Data storage\n     * \n     * @var string\n     */\n    private $data = '';\n\n    /**\n     * Return the stored data\n     * \n     * @return string\n     */\n    public function getData(): string\n    {\n        return $this-&gt;data;\n    }       \n\n    /**\n    * Serializes data\n    */\n    public function serialize(): string\n    {\n        return rot13($this-&gt;data);\n    }\n\n    /**\n     * Set the data\n     * \n     * @var Garble\n     *\n     * @return Garble\n     */\n    public function setData($data): Garble\n    {\n        $this-&gt;data = (string) $data;\n\n        return $this;\n    }       \n\n    /**\n     * Unserializes data\n     */\n    public function unserialize($data): void\n    {\n        $this-&gt;data = str_rot13($data);\n    }\n}\n</code></pre> Using it: <pre><code>&lt;?php\n\nnamespace MyApp;\n\nuse MyApp\\Storage\\Serializer\\Garble;\n\n$data = 'I came, I saw, I conquered.';\n$garble = new Garble();\n\n$garble\n    -&gt;setData($data)\n    -&gt;serialize()  \n;\n\necho $garble-&gt;getData(); // \"V pnzr, V fnj, V pbadhrerq.\"\n\n$encrypted = 'V pnzr, V fnj, V pbadhrerq.';\n\n$garble-&gt;unserialize($encrypted);\n\necho $garble-&gt;getData(); // \"I came, I saw, I conquered.\"\n</code></pre></p>"},{"location":"cache/#serializer-factory","title":"Serializer Factory","text":"<p>Although all serializer classes can be instantiated using the <code>new</code> keyword, Phalcon offers the Phalcon\\Storage\\SerializerFactory class, so that developers can easily instantiate serializer classes. All the above serializers are registered in the factory and lazy loaded when called. The factory also allows you to register additional (custom) serializer classes. The only thing to consider is choosing the name of the serializer in comparison to the existing ones. If you define the same name, you will overwrite the built-in one.The objects are cached in the factory so if you call the <code>newInstance()</code> method with the same parameters during the same request, you will get the same object back.</p> <p>The example below shows how you can create a <code>Json</code> serializer either using the <code>new</code> keyword or the factory:</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Storage\\Serializer\\Json; \nuse Phalcon\\Storage\\SerializerFactory;\n\n$jsonSerializer = new Json();\n\n$factory        = new SerializerFactory();\n$jsonSerializer = $factory-&gt;newInstance('json');\n</code></pre> The parameters you can use for the factory are:</p> <ul> <li><code>base64</code> for Phalcon\\Storage\\Serializer\\Base64</li> <li><code>igbinary</code> for Phalcon\\Storage\\Serializer\\Igbinary</li> <li><code>json</code> for Phalcon\\Storage\\Serializer\\Json</li> <li><code>msgpack</code> for Phalcon\\Storage\\Serializer\\Msgpack</li> <li><code>none</code> for Phalcon\\Storage\\Serializer\\None</li> <li><code>php</code> for Phalcon\\Storage\\Serializer\\Php</li> </ul>"},{"location":"cache/#adapters","title":"Adapters","text":"<p>The <code>Phalcon\\Cache\\Adapter</code> namespace offers classes that implement the Phalcon\\Cache\\Adapter\\AdapterInterface interface. It exposes common methods that are used to perform operations on the storage adapter or cache backend. These adapters act as wrappers to respective backend code. </p> <p>The available methdods are:</p> Method Description <code>clear</code> Flushes/clears the cache <code>decrement</code> Decrements a stored number <code>delete</code> Deletes data from the adapter <code>get</code> Reads data from the adapter <code>getAdapter</code> Returns the already connected adapter or connects to the backend server(s) <code>getKeys</code> Returns all the keys stored (optional filter parameter) <code>getPrefix</code> Returns the prefix for the keys <code>has</code> Checks if an element exists in the cache <code>increment</code> Increments a stored number <code>set</code> Stores data in the adapter <p>NOTE</p> <p>The <code>getAdapter()</code> method returns the connected adapter. This offers more flexibility to the developer, since it can be used to execute additional methods that each adapter offers. For instance for the <code>Redis</code> adapter you can use the <code>getAdapter()</code> to obtain the connected object and call <code>zAdd</code>, <code>zRange</code> and other methods not exposed by the Phalcon adapter.</p> <p>To construct one of these objects, you will need to pass a Phalcon\\Storage\\SerializerFactory object in the constructor and optionally some parameters required for the adapter of your choice. The list of options is outlined below.</p> <p>The available adapters are:</p>"},{"location":"cache/#apcu","title":"<code>Apcu</code>","text":"<p>This adapter uses <code>Apcu</code> to store the data. In order to use this adapter, you will need to have apcu enabled in your target system. This class does not use an actual adapter, since the <code>apcu</code> functionality is exposed using the <code>apcu_*</code> PHP functions. </p> Option Default <code>defaultSerializer</code> <code>Php</code> <code>lifetime</code> <code>3600</code> <code>serializer</code> <code>null</code> <code>prefix</code> <code>ph-apcu-</code> <p>The following example demonstrates how to create a new <code>Apcu</code> cache adapter, which will use the Phalcon\\Storage\\Serializer\\Json serializer and have a default lifetime of 7200.  </p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Adapter\\Apcu;\nuse Phalcon\\Storage\\SerializerFactory;\n\n$serializerFactory = new SerializerFactory();\n\n$options = [\n    'defaultSerializer' =&gt; 'Json',\n    'lifetime'          =&gt; 7200,\n];\n\n$adapter = new Apcu($serializerFactory, $options);\n</code></pre> <p>The above example used a Phalcon\\Storage\\SerializerFactory object and the <code>defaultSerializer</code> option to tell the adapter to instantiate the relevant serializer. </p>"},{"location":"cache/#libmemcached","title":"<code>Libmemcached</code>","text":"<p>This adapter utilizes PHP's memcached extension to connect to Memcached servers. The adapter used is an instance of the <code>Memcached</code> class, created after the first event that requires the connection to be active. </p> Option Default <code>defaultSerializer</code> <code>Php</code> <code>lifetime</code> <code>3600</code> <code>serializer</code> <code>null</code> <code>prefix</code> <code>ph-memc-</code> <code>servers[0]['host']</code> <code>127.0.0.1</code> <code>servers[0]['port']</code> <code>11211</code> <code>servers[0]['weight']</code> <code>1</code> <code>persistentId</code> <code>ph-mcid-</code> <code>saslAuthData['user']</code> <code>saslAuthData['pass']</code> <code>client[\\Memcached::OPT_CONNECT_TIMEOUT]</code> <code>10</code> <code>client[\\Memcached::OPT_DISTRIBUTION]</code> <code>\\Memcached::DISTRIBUTION_CONSISTENT</code> <code>client[\\Memcached::OPT_SERVER_FAILURE_LIMIT]</code> <code>2</code> <code>client[\\Memcached::OPT_REMOVE_FAILED_SERVERS]</code> <code>true</code> <code>client[\\Memcached::OPT_RETRY_TIMEOUT]</code> <code>1</code> <p>You can specify more than one server in the options array passed in the constructor. If <code>SASL</code> data is defined, the adapter will try to authenticate using the passed data. If there is an error in the options or the class cannot add one or more servers in the pool, a <code>Phalcon\\Storage\\Exception</code> will be thrown.</p> <p>The following example demonstrates how to create a new <code>Libmemcached</code> cache adapter, which will use the Phalcon\\Storage\\Serializer\\Json serializer and have a default lifetime of 7200. It will use the <code>10.4.13.100</code> as the first server with weight <code>1</code> connecting to port <code>11211</code> and <code>10.4.13.110</code> as the second server with weight <code>5</code> again connecting to port <code>11211</code>.  </p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Adapter\\Libmemcached;\nuse Phalcon\\Storage\\SerializerFactory;\n\n$serializerFactory = new SerializerFactory();\n\n$options = [\n    'defaultSerializer' =&gt; 'Json',\n    'lifetime'          =&gt; 7200,\n    'servers'           =&gt; [\n        0 =&gt; [\n            'host'   =&gt; '10.4.13.100',\n            'port'   =&gt; 11211,\n            'weight' =&gt; 1,\n        ],\n        1 =&gt; [\n            'host'   =&gt; '10.4.13.110',\n            'port'   =&gt; 11211,\n            'weight' =&gt; 5,\n        ],\n    ],\n];\n\n$adapter = new Libmemcached($serializerFactory, $options);\n</code></pre> <p>The above example used a Phalcon\\Storage\\SerializerFactory object and the <code>defaultSerializer</code> option to tell the adapter to instantiate the relevant serializer. </p> <p>Serializers: The <code>Memcached</code> class which is the adapter that the Phalcon\\Cache\\Adapter\\Libmemcached uses, offers support for serializing out of the box. The built-in serializers are: </p> <ul> <li><code>\\Memcached::SERIALIZER_PHP</code></li> <li><code>\\Memcached::SERIALIZER_JSON</code></li> <li><code>\\Memcached::SERIALIZER_IGBINARY</code></li> </ul> <p>The igbinary built-in serializer is only available if <code>igbinary</code> is present in the target system and Memcached extension is compiled with it.</p> <p>NOTE</p> <p>If the <code>defaultSerializer</code> or the selected serializer for <code>Libmemcached</code> is supported as a built-in serializer (<code>PHP</code>, <code>JSON</code>, <code>IGBINARY</code>), the built-in one will be used, resulting in more speed and less resource utilization.</p>"},{"location":"cache/#memory","title":"<code>Memory</code>","text":"<p>This adapter uses the computer's memory to store the data. As all data is stored in memory, there is no persistence, meaning that once the request is completed, the data is lost. This adapter can be used for testing or temporary storage during a particular request. The options available for the constructor are:</p> Option Default <code>defaultSerializer</code> <code>Php</code> <code>lifetime</code> <code>3600</code> <code>serializer</code> <code>null</code> <code>prefix</code> <code>ph-memo-</code> <p>The following example demonstrates how to create a new <code>Memory</code> cache adapter, which will use the Phalcon\\Storage\\Serializer\\Json serializer and have a default lifetime of 7200.   </p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Adapter\\Memory;\nuse Phalcon\\Storage\\SerializerFactory;\n\n$serializerFactory = new SerializerFactory();\n\n$options = [\n    'defaultSerializer' =&gt; 'Json',\n    'lifetime'          =&gt; 7200,\n];\n\n$adapter = new Memory($serializerFactory, $options);\n</code></pre> <p>The above example used a Phalcon\\Storage\\SerializerFactory object and the <code>defaultSerializer</code> option to tell the adapter to instantiate the relevant serializer. </p>"},{"location":"cache/#redis","title":"<code>Redis</code>","text":"<p>This adapter utilizes PHP's redis extension to connect to a Redis server. The adapter used is an instance of the <code>Redis</code> class, created after the first event that requires the connection to be active. </p> Option Default <code>defaultSerializer</code> <code>Php</code> <code>lifetime</code> <code>3600</code> <code>serializer</code> <code>null</code> <code>prefix</code> <code>ph-reds-</code> <code>host</code> <code>127.0.0.1</code> <code>port</code> <code>6379</code> <code>index</code> <code>1</code> <code>persistent</code> <code>false</code> <code>auth</code> <code>socket</code> <p>If <code>auth</code> data is defined, the adapter will try to authenticate using the passed data. If there is an error in the options, or the server cannot connect or authenticate, a <code>Phalcon\\Storage\\Exception</code> will be thrown.</p> <p>The following example demonstrates how to create a new <code>Redis</code> cache adapter, which will use the Phalcon\\Storage\\Serializer\\Json serializer and have a default lifetime of 7200. It will use the <code>10.4.13.100</code> as the host, connect to port <code>6379</code> and select the index <code>1</code>.  </p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Adapter\\Redis;\nuse Phalcon\\Storage\\SerializerFactory;\n\n$serializerFactory = new SerializerFactory();\n\n$options = [\n    'defaultSerializer' =&gt; 'Json',\n    'lifetime'          =&gt; 7200,\n    'host'              =&gt; '10.4.13.100',\n    'port'              =&gt; 6379,\n    'index'             =&gt; 1,\n];\n\n$adapter = new Redis($serializerFactory, $options);\n</code></pre> <p>The above example used a Phalcon\\Storage\\SerializerFactory object and the <code>defaultSerializer</code> option to tell the adapter to instantiate the relevant serializer. </p> <p>Serializers: The <code>Redis</code> class which is the adapter that the Phalcon\\Cache\\Adapter\\Redis uses, offers support for serializing out of the box. The built-in serializers are: </p> <ul> <li><code>\\Redis::SERIALIZER_NONE</code></li> <li><code>\\Redis::SERIALIZER_PHP</code></li> <li><code>\\Redis::SERIALIZER_IGBINARY</code></li> <li><code>\\Redis::SERIALIZER_MSGPACK</code></li> </ul> <p>The igbinary and built-in serializer is only available if <code>igbinary</code> is present in the target system and Redis extension is compiled with it. The same applies to msgpack built-in serializer. It is only available if <code>msgpack</code> is present in the target system and the Redis extension is compiled with it.  </p> <p>NOTE</p> <p>If the <code>defaultSerializer</code> or the selected serializer for <code>Redis</code> is supported as a built-in serializer (<code>NONE</code>, <code>PHP</code>, <code>IGBINARY</code>, <code>MSGPACK</code>), the built-in one will be used, resulting in more speed and less resource utilization.</p> <p><code>increment</code> - <code>decrement</code></p> <p>At this point in time there is an issue with <code>Redis</code>, where the internal <code>Redis</code> serializer does not skip scalar values because it can only store strings. As a result, if you use <code>increment</code> after a <code>set</code> for a number, will not return a number: </p> <p>The way to store numbers and use the <code>increment</code> (or <code>decrement</code>) is to either remove the internal serializer for <code>Redis</code></p> <pre><code>$cache-&gt;getAdapter()-&gt;setOption(\\Redis::OPT_SERIALIZER, \\Redis::SERIALIZER_NONE);\n</code></pre> <p>or you could use <code>increment</code> instead of using <code>set</code> at the first setting of the value to the key:</p> <pre><code>$cache-&gt;delete('my-key');\n$cache-&gt;increment('my-key', 2);\necho $cache-&gt;get('my-key');      // 2\n$cache-&gt;increment('my-key', 3);\necho $cache-&gt;get('my-key');      // 3\n</code></pre>"},{"location":"cache/#stream","title":"<code>Stream</code>","text":"<p>This adapter is the simplest to setup since it uses the target system's file system (it only requires a cache path that is writeable). It is one of the slowest cache adapters since the data has to be written to the file system. Each file created corresponds to a key stored. The file contains additional metadata to calculate the lifetime of the cache element, resulting in additional reads and writes to the file system.</p> Option Default <code>defaultSerializer</code> <code>Php</code> <code>lifetime</code> <code>3600</code> <code>serializer</code> <code>null</code> <code>prefix</code> <code>phstrm-</code> <code>storageDir</code> <p>If the <code>storageDir</code> is not defined a <code>Phalcon\\Storage\\Exception</code> will be thrown.</p> <p>NOTE</p> <p>The adapter utilizes logic to store files in separate sub directories based on the name of the key passed, thus avoiding the <code>too many files in one folder</code> limit present in Windows or Linux based systems.</p> <p>The following example demonstrates how to create a new <code>Stream</code> cache adapter, which will use the Phalcon\\Storage\\Serializer\\Json serializer and have a default lifetime of 7200. It will store the cached data in <code>/data/storage/cache</code>.  </p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Adapter\\Stream;\nuse Phalcon\\Storage\\SerializerFactory;\n\n$serializerFactory = new SerializerFactory();\n\n$options = [\n    'defaultSerializer' =&gt; 'Json',\n    'lifetime'          =&gt; 7200,\n    'storageDir'        =&gt; '/data/storage/cache',\n];\n\n$adapter = new Stream($serializerFactory, $options);\n</code></pre> <p>The above example used a Phalcon\\Storage\\SerializerFactory object and the <code>defaultSerializer</code> option to tell the adapter to instantiate the relevant serializer. </p>"},{"location":"cache/#custom_1","title":"Custom","text":"<p>Phalcon also offers the Phalcon\\Cache\\Adapter\\AdapterInterface which can be implemented in a custom class. The class can offer the cache adapter functionality you require.</p> <p><pre><code>&lt;?php\n\nnamespace MyApp\\Cache\\Adapter;\n\nuse Phalcon\\Cache\\Adapter\\AdapterInterface;\n\nclass Custom implements AdapterInterface\n{\n    /**\n     * Flushes/clears the cache\n     */\n    public function clear(): bool\n    {\n        // Custom implementation\n    }\n\n    /**\n     * Decrements a stored number\n     */\n    public function decrement(string $key, int $value = 1)\n    {\n        // Custom implementation\n    }\n\n    /**\n     * Deletes data from the adapter\n     */\n    public function delete(string $key): bool\n    {\n        // Custom implementation\n    }\n\n    /**\n     * Reads data from the adapter\n     */\n    public function get(string $key)\n    {\n        // Custom implementation\n    }\n\n    /**\n     * Returns the already connected adapter or connects to the backend\n     * server(s)\n     */\n    public function getAdapter()\n    {\n        // Custom implementation\n    }\n\n    /**\n     * Returns all the keys stored. If a filter has been passed the keys that \n     * match the filter will be returned \n     */\n    public function getKeys(string $prefix = \"\"): array\n    {\n        // Custom implementation\n    }\n\n    /**\n     * Returns the prefix for the keys\n     */\n    public function getPrefix(): string\n    {\n        // Custom implementation\n    }\n\n    /**\n     * Checks if an element exists in the cache\n     */\n    public function has(string $key): bool\n    {\n        // Custom implementation\n    }\n\n    /**\n     * Increments a stored number\n     */\n    public function increment(string $key, int $value = 1)\n    {\n        // Custom implementation\n    }\n\n    /**\n     * Stores data in the adapter\n     */\n    public function set(string $key, $value, $ttl = null): bool\n    {\n        // Custom implementation\n    }\n}\n</code></pre> Using it: <pre><code>&lt;?php\n\nnamespace MyApp;\n\nuse MyApp\\Cache\\Adapter\\Custom;\n\n$custom = new Custom();\n\n$custom-&gt;set('my-key', $data);\n</code></pre></p>"},{"location":"cache/#adapter-factory","title":"Adapter Factory","text":"<p>Although all adapter classes can be instantiated using the <code>new</code> keyword, Phalcon offers the Phalcon\\Cache\\AdapterFactory class, so that you can easily instantiate cache adapter classes. All the above adapters are registered in the factory and lazy loaded when called. The factory also allows you to register additional (custom) adapter classes. The only thing to consider is choosing the name of the adapter in comparison to the existing ones. If you define the same name, you will overwrite the built-in one. The objects are cached in the factory so if you call the <code>newInstance()</code> method with the same parameters during the same request, you will get the same object back.</p> <p>The example below shows how you can create a <code>Apcu</code> cache adapter with the <code>new</code> keyword or the factory: <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\Adapter\\Apcu;\nuse Phalcon\\Storage\\Serializer\\Json;\n\n$jsonSerializer = new Json();\n\n$options = [\n    'defaultSerializer' =&gt; 'Json',\n    'lifetime'          =&gt; 7200,\n    'serializer'        =&gt; $jsonSerializer,\n];\n\n$adapter = new Apcu(null, $options);\n</code></pre></p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\AdapterFactory;\nuse Phalcon\\Storage\\SerializerFactory;\n\n$serializerFactory = new SerializerFactory();\n$adapterFactory    = new AdapterFactory($serializerFactory);\n\n$options = [\n    'defaultSerializer' =&gt; 'Json',\n    'lifetime'          =&gt; 7200,\n];\n\n$adapter = $adapterFactory-&gt;newInstance('apcu', $options);\n</code></pre> <p>The parameters you can use for the factory are: * <code>apcu</code> for Phalcon\\Cache\\Adapter\\Apcu  * <code>libmemcached</code> for Phalcon\\Cache\\Adapter\\Libmemcached  * <code>memory</code> for Phalcon\\Cache\\Adapter\\Memory  * <code>redis</code> for Phalcon\\Cache\\Adapter\\Redis  * <code>stream</code> for Phalcon\\Cache\\Adapter\\Stream</p>"},{"location":"coding-standard/","title":"Phalcon Coding Standard","text":"<p>Last update: 2019-07-04</p> <p>Phalcon is written in Zephir, a language that the Phalcon Team invented and is actively developing. Therefore, there are no established coding standards that developers can follow, should they wish to.</p> <p>In this document we outline the coding standard that Phalcon is using for editing Zephir files. The coding standard is a variant of PSR-12 developed by PHP-FIG </p>"},{"location":"coding-standard/#files","title":"Files","text":"<ul> <li>Files must use only UTF-8 without BOM.</li> <li>File names must be named StudlyCaps.</li> <li>All files must use the Unix LF (linefeed) line ending.</li> <li>All files must end with a single blank line.</li> <li>Folders are also named StudlyCaps and the folder/sub-folder tree follows the namespace of the class.</li> </ul> <pre><code>phalcon/Acl/Adapter/Memory.zep\n</code></pre> <pre><code>namespace Phalcon\\Acl\\Adapter;\n\nuse Phalcon\\Acl\\Adapter;\n\nclass Memory extends Adapter\n{\n\n}\n</code></pre> <ul> <li>Code must use 4 spaces for indenting, not tabs.</li> <li>Lines should be 80 characters or fewer. The hard limit on line length is 120 characters.</li> <li>There must be one blank line after the namespace declaration, and there must be one blank line after the block of use declarations.</li> <li>There must not be trailing whitespace at the end of non-blank lines.</li> <li>Blank lines may be added to improve readability and to indicate related blocks of code.</li> <li>There must not be more than one statement per line.</li> </ul>"},{"location":"coding-standard/#classes","title":"Classes","text":"<ul> <li>Class names must be declared in StudlyCaps.</li> <li>Opening braces for classes must go on the next line, and closing braces must go on the next line after the body.</li> <li>Abstract classes must be prefixed by <code>Abstract</code></li> <li>Interfaces must be suffixed by <code>Interface</code></li> </ul>"},{"location":"coding-standard/#constants","title":"Constants","text":"<ul> <li>Class constants must be declared in all upper case with underscore separators.</li> <li>Class constants must appear at the top of the class.</li> <li>Class constants must be sorted alphabetically by constant name.</li> </ul> <pre><code>namespace Phalcon\\Acl;\n\nclass Enum\n{\n    const ALLOW = 1;\n    const DENY  = 0;\n}\n</code></pre>"},{"location":"coding-standard/#properties","title":"Properties","text":"<ul> <li>Class properties must be declared in camelCase.</li> <li>Class properties must be sorted alphabetically based on name.</li> <li>Whenever possible, properties must have a default value.</li> <li>Whenever possible, properties must have a docblock that defines their type with the <code>@var</code> declaration.</li> <li>Properties must not be prefixed with underscore <code>_</code>. The only exception is if the property name is a reserved keyword such as <code>default</code>, <code>namespace</code> etc.</li> </ul> <pre><code>namespace Phalcon\\Acl\\Adapter;\n\nuse Phalcon\\Acl\\Adapter;\n\nclass Memory extends Adapter\n{\n    /**\n     * @var string | null\n     */\n    protected activeKey = \"\" { get };\n}\n</code></pre>"},{"location":"coding-standard/#methods","title":"Methods","text":"<ul> <li>Method names must be declared in camelCase.</li> <li>Methods must be sorted alphabetically and based on their visibility. The order is <code>public</code>, <code>protected</code> and <code>private</code>. <code>__construct</code> if defined must be at the top of the class.</li> <li>Method names must not be prefixed with underscore <code>_</code>.</li> <li>All methods must have a return type. If the method does not return anything it should be marked <code>void</code></li> <li>Opening braces for methods must go on the next line, and closing braces must go on the next line after the body.</li> <li>Visibility must be declared on all properties and methods; <code>abstract</code> and <code>final</code> must be declared before the visibility; <code>static</code> must be declared after the visibility.</li> </ul> <pre><code>abstract public function getElement() -&gt; var;\n\nfinal public function getElement() -&gt; var;\n\npublic static function getElement() -&gt; var;\n</code></pre> <ul> <li>Control structure keywords must have one space after them; method and function calls must not.</li> <li>Opening braces for control structures must go on the same line, and closing braces must go on the next line after the body.</li> <li>Control structures such as <code>if</code> must not have parentheses around the conditional, unless it is a complex one.</li> </ul> <pre><code>if typeof variable === \"array\" {\n\n}\n</code></pre>"},{"location":"coding-standard/#method-arguments","title":"Method Arguments","text":"<ul> <li>In the argument list, there must not be a space before each comma, and there must be one space after each comma.</li> <li>Each method must have its type declared before it</li> <li>Method arguments with default values must go at the end of the argument list.</li> </ul> <pre><code>public function setElement(string! name, var value) -&gt; void;\n</code></pre> <ul> <li>Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list must be on the next line, and there must be only one argument per line.</li> </ul>"},{"location":"coding-standard/#php-files","title":"PHP Files","text":"<p>PHP files such as tests must follow PSR-12.</p>"},{"location":"collection/","title":"Collection","text":""},{"location":"collection/#overview","title":"Overview","text":"<p><code>Phalcon\\Collection</code> is an object oriented array. It offers speed, as well as implementations of various PHP interfaces. These are:</p> <ul> <li>ArrayAccess</li> <li>Countable</li> <li>IteratorAggregate</li> <li>JsonSerializable</li> <li>Serializable</li> </ul> <pre><code>&lt;?php\n\nuse Phalcon\\Collection;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Collection($data);\n</code></pre>"},{"location":"collection/#constructor","title":"Constructor","text":"<p>You can construct the object as any other object in PHP. However, the constructor accepts an optional <code>array</code> parameter, which will populate the object for you.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Collection;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Collection($data);\n</code></pre>"},{"location":"collection/#case-sensitivity","title":"Case sensitivity","text":"<p>When instantiating the object you can specify a second <code>bool</code> parameter, which will control the key searching in the object. By default <code>$insensitive</code> is set to <code>true</code>, making searches in the collection case insensitive. Setting this value to <code>false</code> will make the search for the element in a case sensitive manner. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Collection;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Collection($data, false);\n\necho $collection-&gt;has('COLORS'); // false\n</code></pre>"},{"location":"collection/#reusing","title":"Reusing","text":"<p>You can also reuse the component, by repopulating it. <code>Phalcon\\Collection</code> exposes the <code>clear()</code> and <code>init()</code> methods, which will clear and repopulate the internal array respectively, </p> <pre><code>&lt;?php\n\nuse Phalcon\\Collection;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Collection($data);\n\necho $collection-&gt;count(); // 2\n\n$data = [\n    'year' =&gt; 1776,\n];\n\n$collection-&gt;clear();\n$collection-&gt;init($data);\n\necho $collection-&gt;count(); // 1\n</code></pre>"},{"location":"collection/#get","title":"Get","text":"<p>As mentioned above, <code>Phalcon\\Collection</code> implements several interfaces, in order to make the component as flexible as possible. Retrieving data stored in an element can be done by using: - Property - <code>__get()</code> - array based get (<code>$collection[$element]</code>) - <code>offsetGet()</code> - <code>get()</code></p> <p>The fastest way is by using the property syntax:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Collection;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Collection($data);\n\necho $collection-&gt;year;                    // 1776\n</code></pre> <p>You can use <code>__get($element)</code> but it is not advisable as it is much slower than the property syntax. The same applies to <code>offsetGet</code></p> <pre><code>echo $collection-&gt;__get('year');           // 1776\necho $collection['year'];                  // 1776\necho $collection-&gt;offsetGet('year');       // 1776\necho $collection-&gt;get('year', 1776, true); // 1776\n</code></pre> <pre><code>public function get(\n    string $element, \n    mixed $defaultValue = null, \n    string $cast = null\n):  mixed\n</code></pre> <p>Using <code>get()</code> offers three extra parameters. When <code>$defaultValue</code> is defined in the call and the element is not found, <code>$defaultValue</code> will be returned.  The <code>cast</code> parameter accepts a string that defines what the returned value will be casted. The available values are:</p> <ul> <li><code>array</code></li> <li><code>bool</code></li> <li><code>boolean</code></li> <li><code>double</code></li> <li><code>float</code></li> <li><code>int</code></li> <li><code>integer</code></li> <li><code>null</code></li> <li><code>object</code></li> <li><code>string</code></li> </ul> <p>The collection object also offers two more getters <code>getKeys</code> and <code>getValues</code> <code>getKeys( bool $insensitive = true )</code> returns all the keys stored internally in the collection. By default, it will return the keys case insensitive manner i.e. all lowercase. If <code>false</code> is passed in the call, it will return the keys exactly as they have been stored. <code>getValues</code> returns the values stored in the internal collection.</p>"},{"location":"collection/#has","title":"Has","text":"<p>To check whether an element exists or not in the collection, you can use the following: - <code>isset()</code> on the property - <code>__isset()</code> - array based isset (<code>isset($coollection[$element])</code>) - <code>offsetExists()</code> - <code>has()</code></p> <p>The fastest way is by using the property syntax:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Collection;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Collection($data);\n\necho isset($collection-&gt;year); // true\n</code></pre> <p>You can use <code>__isset(element)</code> but it is not advisable as it is much slower than the property syntax. The same applies to <code>offsetExists</code></p> <pre><code>echo $collection-&gt;__isset('year');        // true\necho isset($collection['year']);          // true\necho $collection-&gt;offsetExists('year');   // true\necho $collection-&gt;has('year', true);      // true\n</code></pre> <pre><code>public function has(string $element):  bool\n</code></pre>"},{"location":"collection/#set","title":"Set","text":"<p>To set an element in the collection, you can use the following: - assign the value to the property - <code>__set()</code> - array based assignment  - <code>offsetSet()</code> - <code>set()</code></p> <p>The fastest way is by using the property syntax:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Collection;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n];\n\n$collection = new Collection($data);\n\n$collection-&gt;year = 1776;\n</code></pre> <p>You can use <code>__set($element, $value)</code> but it is not advisable as it is much slower than the property syntax. The same applies to <code>offsetSet</code></p> <pre><code>$collection-&gt;__set('year', 1776);\n$collection['year'] = 1776;\n$collection-&gt;offsetSet('year', 1776);\n$collection-&gt;set('year', 1776); \n</code></pre>"},{"location":"collection/#remove","title":"Remove","text":"<p>To remove an element in the collection, you can use the following: - unset the property - <code>__unset()</code> - array based unset  - <code>offsetUnset()</code> - <code>remove()</code></p> <p>The fastest way is by using the property syntax:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Collection;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n];\n\n$collection = new Collection($data);\n\nunset($collection-&gt;year);\n</code></pre> <p>You can use <code>__unset($element)</code> but it is not advisable as it is much slower than the property syntax. The same applies to <code>offsetUnset</code></p> <pre><code>$collection-&gt;__unset('year');\nunset($collection['year']);\n$collection-&gt;offsetUnset('year');\n$collection-&gt;remove('year'); \n</code></pre> <pre><code>public function remove(string $element):  void\n</code></pre>"},{"location":"collection/#iteration","title":"Iteration","text":"<p>Since the collection object implements <code>\\IteratorAggregate</code>, you can iterate through the object with ease. The method <code>getIterator()</code> returns an <code>ArrayIterator()</code> object</p> <pre><code>&lt;?php\n\nuse Phalcon\\Collection;\n\n$data = [\n   'red',\n   'white',\n   'blue'\n];\n\n$collection = new Collection($data);\n\nforeach ($collection as $key =&gt; $value) {\n    echo $key . ' - ' . $value . PHP_EOL;\n}\n</code></pre>"},{"location":"collection/#count","title":"Count","text":"<p>The implementation of the <code>\\Countable</code> interface exposes the <code>count()</code> method, which stores the number of elements in the collection.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Collection;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Collection($data);\n\necho $collection-&gt;count();    // 2\n</code></pre>"},{"location":"collection/#serialization","title":"Serialization","text":"<p>The <code>\\Serializable</code> and <code>\\JsonSerializable</code> interfaces expose methods that allow you to serialize and unserialize the object. <code>serialize()</code> and <code>unserialize()</code> use PHP's <code>serialize</code> and <code>unserialize</code> functions. <code>jsonSerialize()</code> returns an array which can be used with <code>json_encode</code> to serialize the object.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Collection;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Collection($data);\n\necho $collection-&gt;serialize();    // a:2:{s:6:\"colors\";a:3:{i:0;s:3:\"red\";i:1;s:5:\"white\";i:2;s:4:\"blue\";}s:4:\"year\";i:1776;}\n\n$serialized = 'a:2:{s:6:\"colors\";a:3:{i:0;s:3:\"red\";i:1;s:5:\"white\";i:2;s:4:\"blue\";}s:4:\"year\";i:1776;}';\n$collection-&gt;unserialize($serialized);\n\necho $collection-&gt;jsonSerialize(); // $data\n</code></pre>"},{"location":"collection/#transformations","title":"Transformations","text":"<p><code>Phalcon\\Collection</code> also exposes two transformation methods: <code>toArray()</code> and <code>toJson(int $options)</code>. <code>toArray()</code> returns the object transformed as an array. This method returns the same array as <code>jsonSerialize()</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Collection;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Collection($data);\n\necho $collection-&gt;toArray();  // $data\n</code></pre> <p><code>toJson(int $options)</code> returns a JSON representation of the object. It uses <code>json_encode</code> internally and accepts a parameter, which represents the flags that <code>json_encode</code> accepts. By default the options are set up with the value 74, (RFC4327) which translates to: - <code>JSON_HEX_TAG</code> - <code>JSON_HEX_APOS</code> - <code>JSON_HEX_AMP</code> - <code>JSON_HEX_QUOT</code> - <code>JSON_UNESCAPED_SLASHES</code></p> <p>You can pass any valid flags to the method according to your needs.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Collection;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Collection($data);\n\necho $collection-&gt;toJson();    // [\"red\",\"white\",\"blue\"],\"year\":1776}\n\necho $collection-&gt;toJson(74 + JSON_PRETTY_PRINT);\n/**\n{\n    \"colors\": [\n        \"red\",\n        \"white\",\n        \"blue\"\n    ],\n    \"year\": 1776\n}\n*/\n</code></pre>"},{"location":"collection/#read-only","title":"Read Only","text":"<p>Phalcon also offers a component that can be used in a read-only fashion. <code>Phalcon\\Collection\\ReadOnly</code> can serve as a collection in your application that can only be populated with initial data but not allowing its contents to be changed throughout the application.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Collection\\ReadOnly;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new ReadOnly($data);\n\necho $collection-&gt;toJson();    // [\"red\",\"white\",\"blue\"],\"year\":1776}\n\n$collection-&gt;set('colors', ['red']); // Exception\n</code></pre>"},{"location":"config/","title":"Config Component","text":""},{"location":"config/#overview","title":"Overview","text":"<p>Nearly all applications require configuration data for it to operate correctly. The configuration can contain parameters and initial settings for the application like location of log files, database connection values, services registered etc. The Phalcon\\Config is designed to store this configuration data in an easy object oriented way. The component can be instantiated using a PHP array directly or read configuration files from various formats as described further down in the adapters section. Phalcon\\Config extends the Phalcon\\Collection object and thus inheriting its functionality. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Config;\n\n$config = new Config(\n    [\n        'app' =&gt; [\n            'baseUri'  =&gt; getenv('APP_BASE_URI'),\n            'env'      =&gt; getenv('APP_ENV'),\n            'name'     =&gt; getenv('APP_NAME'),\n            'timezone' =&gt; getenv('APP_TIMEZONE'),\n            'url'      =&gt; getenv('APP_URL'),\n            'version'  =&gt; getenv('VERSION'),\n            'time'     =&gt; microtime(true),\n        ],\n    ]\n);\n\necho $config-&gt;get('app')-&gt;get('name');  // PHALCON\necho $config-&gt;app-&gt;name;                // PHALCON\necho $config-&gt;path('app.name');         // PHALCON\n</code></pre>"},{"location":"config/#factory","title":"Factory","text":""},{"location":"config/#newinstance","title":"<code>newInstance</code>","text":"<p>We can easily create a <code>Phalcon\\Config</code> or any of the supporting adapter classes <code>Phalcon\\Config\\Adapter\\*</code> by using the <code>new</code> keyword. However Phalcon offers the <code>Phalcon\\Config\\ConfigFactory</code> class, so that developers can easily instantiate config objects. Calling <code>newInstance</code> with the <code>name</code>, <code>fileName</code> and a <code>parameters</code> array will return the new config object.</p> <p>The allowed values for <code>name</code>, which correspond to a different adapter class are: * <code>grouped</code> * <code>ini</code> * <code>json</code> * <code>php</code> * <code>yaml</code></p> <p>The example below how to create a new PHP array based adapter:</p> <p>Given a PHP configuration file <code>/app/storage/config.php</code></p> <pre><code>&lt;?php\n\nreturn [\n    'app' =&gt; [\n        'baseUri'  =&gt; getenv('APP_BASE_URI'),\n        'env'      =&gt; getenv('APP_ENV'),\n        'name'     =&gt; getenv('APP_NAME'),\n        'timezone' =&gt; getenv('APP_TIMEZONE'),\n        'url'      =&gt; getenv('APP_URL'),\n        'version'  =&gt; getenv('VERSION'),\n        'time'     =&gt; microtime(true),\n    ],\n];\n</code></pre> <p>you can load it as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config\\ConfigFactory;\n\n$fileName = '/app/storage/config.php';\n$factory  = new ConfigFactory();\n\n$config = $factory-&gt;newInstance('php', $fileName);\n</code></pre> <p>As seen above, the third parameter for <code>newInstance</code> which is an array is not passed because it is not required. However, other adapter types use it, so you can supply it depending on the type of adapter you use. More information on what can be contained in the <code>parameters</code> array can be found in the adapters section.</p>"},{"location":"config/#load","title":"<code>load</code>","text":"<p>The Config Factory also offers the <code>load</code> method, which accepts a string or an array as a parameter. If a string is passed, it is treated as the <code>fileName</code> of the file that we need to load. The extension of the file is what determines the adapter that will be used.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\CacheFactory;\n\n$fileName = '/app/storage/config.php';\n$factory  = new ConfigFactory();\n\n$config = $factory-&gt;load($fileName);\n</code></pre> <p>In the above example, the PHP adapter will be used (extension of the file) and the file will be loaded for you.</p> <p>If an array is passed, then the <code>adapter</code> element is required to specify what adapter will be created. Additionally <code>filePath</code> is required to specify where the file to load is located. More information on what can be contained in the array cam be found in the adapters section.</p> <p>Given an INI configuration file <code>/app/storage/config.ini</code></p> <pre><code>[config]\nadapter = ini\nfilePath = PATH_DATA\"storage/config\"\nmode = 1\n</code></pre> <p>the <code>load</code> function will create a Ini config object:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\CacheFactory;\n\n$fileName = '/app/storage/config.ini';\n$factory  = new ConfigFactory();\n\n$config = $factory-&gt;load($fileName);\n</code></pre>"},{"location":"config/#exceptions","title":"Exceptions","text":"<p>Any exceptions thrown in the Phalcon\\Config component will be of type Phalcon\\Config\\Exception. You can use this exception to selectively catch exceptions thrown only from this component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config\\Exception;\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    public function index()\n    {\n        try {\n            // Get some configuration values\n            $this-&gt;config-&gt;database-&gt;dbname;\n        } catch (Exception $ex) {\n            echo $ex-&gt;getMessage();\n        }\n    }\n}\n</code></pre>"},{"location":"config/#native-array","title":"Native Array","text":"<p>The Phalcon\\Config component accepts a PHP array in the constructor and loads it up. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Config;\n\n$config = new Config(\n    [\n        'app' =&gt; [\n            'baseUri'  =&gt; getenv('APP_BASE_URI'),  // '/'\n            'env'      =&gt; getenv('APP_ENV'),       // 3\n            'name'     =&gt; getenv('APP_NAME'),      // 'PHALCON'\n            'timezone' =&gt; getenv('APP_TIMEZONE'),  // 'UTC'\n            'url'      =&gt; getenv('APP_URL'),       // 'http://127.0.0.1',\n            'version'  =&gt; getenv('VERSION'),       // '0.1'\n            'time'     =&gt; microtime(true),         // \n        ],\n    ]\n);\n</code></pre>"},{"location":"config/#get","title":"Get","text":""},{"location":"config/#magic","title":"Magic","text":"<p>You can retrieve the data from the object either using the key as a property (magic method):</p> <pre><code>&lt;?php\n\necho $config-&gt;app-&gt;name; // PHALCON\n</code></pre>"},{"location":"config/#path","title":"Path","text":"<p>You can also use the <code>path()</code> method with a delimiter, to pass a string that will contain the keys separated by the delimiter:</p> <pre><code>&lt;?php\n\necho $config-&gt;path('app.name'); // PHALCON\n</code></pre> <p><code>path()</code> also accepts a <code>defaultValue</code> which, if set, will be returned if the element is not found or is not set in the config object. The last parameter of <code>path()</code> is the delimiter to be used for splitting the passed string (<code>path</code>) which also denotes the nesting level.</p> <pre><code>&lt;?php\n\necho $config-&gt;path('app-name', 'default', '-');     // PHALCON\necho $config-&gt;path('app-unknown', 'default', '-');  // default\n</code></pre> <p>You can also use the <code>getPathDelimiter()</code> and <code>setPathDelimiter()</code> methods to get or set the delimiter that the component will use. The <code>delimiter</code> parameter in the <code>path()</code> method can then be used as an override if you like, for a special case, while the default delimiter is set using the getter and setter. The default delimiter is <code>.</code>.</p> <p>You can also use functional programming in conjunction with <code>path()</code> to obtain configuration data:</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Config;\n\n/**\n * @return mixed|Config\n */\nfunction config() {\n    $args = func_get_args();\n    $config = Di::getDefault()-&gt;getShared('config');\n\n    if (empty($args)) {\n       return $config;\n    }\n\n    return call_user_func_array(\n        [$config, 'path'],\n        $args\n    );\n}\n</code></pre> and then you can use it: <pre><code>&lt;?php\n\necho config('app-name', 'default', '-');     // PHALCON\necho config('app-unknown', 'default', '-');  // default\n</code></pre></p>"},{"location":"config/#get_1","title":"Get","text":"<p>Finally you can use the <code>get()</code> method and chain it to traverse the nested objects:</p> <pre><code>&lt;?php\n\necho $config\n        -&gt;get('app')\n        -&gt;get('name');  // PHALCON\n</code></pre> <p>Since Phalcon\\Config extends Phalcon\\Collection you can also pass a second parameter in the <code>get()</code> that will act as the default value returned, should the particular config element is not defined.</p>"},{"location":"config/#merge","title":"Merge","text":"<p>There are times that we might need to merge configuration data coming from two different config objects. For instance we might have one config object that contains our base/default settings, while a second config object loads options that are specific to the system the application is running on (i.e. test, development, production etc.). The system specific data can come from a <code>.env</code> file and loaded with a DotEnv library.</p> <p>In the above scenario, we will need to merge the second configuration object with the first one. <code>merge()</code> allows us to do this, merging the two config objects recursively.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config;\nuse josegonzalez\\Dotenv\\Loader;\n\n$baseConfig = new Config(\n    [\n        'app' =&gt; [\n            'baseUri'  =&gt; '/',\n            'env'      =&gt; 3,\n            'name'     =&gt; 'PHALCON',\n            'timezone' =&gt; 'UTC',\n            'url'      =&gt; 'http://127.0.0.1',\n            'version'  =&gt; '0.1',\n        ],\n    ]\n);\n\n\n// .env\n// APP_NAME='MYAPP'\n// APP_TIMEZONE='America/New_York'\n\n$loader = (new josegonzalez\\Dotenv\\Loader('/app/.env'))\n    -&gt;parse()\n    -&gt;toEnv()\n;\n\n$envConfig= new Config(\n    [\n        'app'     =&gt; [\n            'baseUri'  =&gt; getenv('APP_BASE_URI'),  // '/'\n            'env'      =&gt; getenv('APP_ENV'),       // 3\n            'name'     =&gt; getenv('APP_NAME'),      // 'MYAPP'\n            'timezone' =&gt; getenv('APP_TIMEZONE'),  // 'America/New_York'\n            'url'      =&gt; getenv('APP_URL'),       // 'http://127.0.0.1',\n            'version'  =&gt; getenv('VERSION'),       // '0.1'\n            'time'     =&gt; microtime(true),         //\n        ],\n        'logging' =&gt; true,\n    ]\n);\n\n$baseConfig-&gt;merge($envConfig);\n\necho $baseConfig\n        -&gt;get('app')\n        -&gt;get('name');  // MYAPP\necho $baseConfig\n        -&gt;get('app')\n        -&gt;get('timezone');  // America/New_York\necho $baseConfig\n        -&gt;get('app')\n        -&gt;get('time');  // 1562909409.6162\n</code></pre> <p>The merged object will be:</p> <pre><code>Phalcon\\Config Object\n(\n    [app] =&gt; Phalcon\\Config Object\n        (\n            [baseUri]  =&gt; '/',\n            [env]      =&gt; 3,\n            [name]     =&gt; 'MYAPP',\n            [timezone] =&gt; 'America/New_York',\n            [url]      =&gt; 'http://127.0.0.1',\n            [version]  =&gt; '0.1',\n            [time]     =&gt; microtime(true),\n        )\n    [logging] =&gt; true\n)\n</code></pre>"},{"location":"config/#has","title":"Has","text":"<p>Using <code>has()</code> you can determine if a particular key exists in the collection.</p>"},{"location":"config/#set","title":"Set","text":"<p>The component also supports <code>set()</code> which allows you to programmatically add or change loaded data.</p>"},{"location":"config/#serialization","title":"Serialization","text":"<p>The object can be serialized and saved in a file or a cache service using the <code>serialize()</code> method. The reverse can be achieved using the <code>unserialize</code> method</p>"},{"location":"config/#toarray-tojson","title":"<code>toArray</code> / <code>toJson</code>","text":"<p>If you need to get the object back as an array <code>toArray()</code> and <code>toJson()</code> are available.</p> <p>For additional information, you can check the Phalcon\\Collection documentation.</p>"},{"location":"config/#adapters","title":"Adapters","text":"<p>Other than the base component Phalcon\\Config, which accepts a string (file name and path) or a native PHP array, there are several available adapters that can read different file types and load the configuration from them.</p> <p>The available adapters are:</p> Class Description Phalcon\\Config\\Adapter\\Grouped Loads different configuration files based on identical or different adapters. Phalcon\\Config\\Adapter\\Ini Loads configuration from INI files. Internally the adapter uses the PHP function <code>parse_ini_file</code>. Phalcon\\Config\\Adapter\\Json Loads configuration from JSON files. Requires the PHP <code>json</code> extension to be present in the system. Phalcon\\Config\\Adapter\\Php Loads configuration from PHP multidimensional arrays. This adapter offers the best performance. Phalcon\\Config\\Adapter\\Yaml Loads configuration from YAML files. Requires the PHP <code>yaml</code> extension to be present in the system."},{"location":"config/#grouped","title":"Grouped","text":"<p>The Phalcon\\Config\\Adapter\\Grouped adapter allows you to create a Phalcon\\Config object from multiple sources without having to create each object separately from its source and then merge them together. It accepts an array configuration with the necessary data as well as the <code>defaultAdapter</code> which is set to <code>php</code> by default. </p> <p>The first parameter of the constructor (<code>arrayConfig</code>) is a multi dimensional array which requires the following options</p> <ul> <li><code>adapter</code> - the adapter to be used</li> <li><code>filePath</code> - the path of the configuration file</li> </ul> <pre><code>&lt;?php\n\nuse Phalcon\\Config\\Adapter\\Grouped;\n\n$options = [\n    [\n        'adapter'  =&gt; 'php',\n        'filePath' =&gt; '/apps/storage/config.php',\n    ],\n    [\n        'adapter'  =&gt; 'ini',\n        'filePath' =&gt; '/apps/storage/database.ini',\n        'mode'     =&gt; INI_SCANNER_NORMAL,\n    ],\n    [\n        'adapter'  =&gt; 'json',\n        'filePath' =&gt; '/apps/storage/override.json',\n    ],\n];\n\n$config = new Grouped($options);\n</code></pre> <p>The keys set for each array element (representing one configuration file) mirror the constructor parameters of each adapter. More information regarding the parameters required or optional can be found in the relevant section describing each adapter.</p> <p>You can also use <code>array</code> as the adapter value. If you choose to do so, you will need to use <code>config</code> as the second key, with values that represent the actual values of the configuration you want to load.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config\\Adapter\\Grouped;\n\n$options = [\n    [\n        'adapter'  =&gt; 'php',\n        'filePath' =&gt; '/apps/storage/config.php',\n    ],\n    [\n        'adapter'  =&gt; 'array',\n        'config'   =&gt; [\n            'app' =&gt; [\n                'baseUri'  =&gt; '/',\n                'env'      =&gt; 3,\n                'name'     =&gt; 'PHALCON',\n                'timezone' =&gt; 'UTC',\n                'url'      =&gt; 'http://127.0.0.1',\n                'version'  =&gt; '0.1',\n            ],\n        ],\n    ],\n];\n\n$config = new Grouped($options);\n</code></pre> <p>Finally you can also use a Phalcon\\Config object, as an option to your grouped object.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config;\nuse Phalcon\\Config\\Adapter\\Grouped;\n\n$baseConfig = new Config(\n    [\n        'app' =&gt; [\n            'baseUri'  =&gt; '/',\n            'env'      =&gt; 3,\n            'name'     =&gt; 'PHALCON',\n        ],\n    ]\n);\n\n$options = [\n    $baseConfig,\n    [\n        'adapter'  =&gt; 'array',\n        'config'   =&gt; [\n            'app' =&gt; [\n                'timezone' =&gt; 'UTC',\n                'url'      =&gt; 'http://127.0.0.1',\n                'version'  =&gt; '0.1',\n            ],\n        ],\n    ],\n];\n\n$config = new Grouped($options);\n</code></pre>"},{"location":"config/#ini","title":"Ini","text":"<p>Ini files are a common way to store configuration data. Phalcon\\Config\\Ini uses the optimized PHP function parse_ini_file to read these files. Each section represents a top level element. Sub elements are split into nested collections if the keys have the <code>.</code> separator. By default the scanning method of the ini file is <code>INI_SCANNER_RAW</code>. It can however be overridden by passing a different mode in the constructor as the second parameter.</p> <pre><code>[database]\nadapter  = Mysql\nhost     = localhost\nusername = scott\npassword = cheetah\ndbname   = test_db\n\n[config]\nadapter  = ini\nfilePath = PATH_DATA\"storage/config\"\nmode = 1\n\n[models]\nmetadata.adapter  = 'Memory'\n</code></pre> <p>You can read the file as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config\\Adapter\\Ini;\n\n$fileName = '/apps/storage/config.ini';\n$mode     =  INI_SCANNER_NORMAL;\n$config   = new Ini($fileName, $mode);\n\necho $config\n        -&gt;get('database')\n        -&gt;get('host');       // localhost\necho $config\n        -&gt;get('models')\n        -&gt;get('metadata')\n        -&gt;get('adapter');    // Memory\n</code></pre> <p>Whenever you want to use the Phalcon\\Config\\ConfigFactory component, you will can set the <code>mode</code> as a parameter.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\CacheFactory;\n\n$fileName = '/app/storage/config.ini';\n$factory  = new ConfigFactory();\n\n$options = [\n    'adapter'  =&gt; 'ini',\n    'filePath' =&gt; $fileName,\n    'mode'     =&gt; INI_SCANNER_NORMAL, \n];\n\n$config = $factory-&gt;load($options);\n</code></pre> <p>or when using the <code>newInstance()</code> instead:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\CacheFactory;\n\n$fileName = '/app/storage/config.ini';\n$factory  = new ConfigFactory();\n\n$params = [\n    'mode' =&gt; INI_SCANNER_NORMAL, \n];\n\n$config = $factory-&gt;newinstance('ini', $fileName, $params);\n</code></pre>"},{"location":"config/#json","title":"Json","text":"<p>NOTE</p> <p>Requires PHP's <code>json</code> extension to be present in the system</p> <p>JSON is a very popular format, especially when transporting data from your application to the front end or when sending back responses from an API. It can also be used as a storage for configuration data. Phalcon\\Config\\Json uses <code>json_decode()</code> internally to convert a JSON file to a PHP native array and parse it accordingly.</p> <pre><code>{\n    \"database\": {\n        \"adapter\": \"Mysql\",\n        \"host\": \"localhost\",\n        \"username\": \"scott\",\n        \"password\": \"cheetah\",\n        \"dbname\": \"test_db\"  \n    },\n    \"models\": {\n        \"metadata\": {\n            \"adapter\": \"Memory\"\n        }\n    }\n}\n</code></pre> <p>You can read the file as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config\\Adapter\\Json;\n\n$fileName = '/apps/storage/config.json';\n$config   = new Json($fileName);\n\necho $config\n        -&gt;get('database')\n        -&gt;get('host');       // localhost\necho $config\n        -&gt;get('models')\n        -&gt;get('metadata')\n        -&gt;get('adapter');    // Memory\n</code></pre> <p>Whenever you want to use the Phalcon\\Config\\ConfigFactory component, you will just need to pass the name of the file.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\CacheFactory;\n\n$fileName = '/app/storage/config.json';\n$factory  = new ConfigFactory();\n\n$options = [\n    'adapter'  =&gt; 'json',\n    'filePath' =&gt; $fileName,\n];\n\n$config = $factory-&gt;load($options);\n</code></pre> <p>or when using the <code>newInstance()</code> instead:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\CacheFactory;\n\n$fileName = '/app/storage/config.json';\n$factory  = new ConfigFactory();\n\n$config = $factory-&gt;newinstance('json', $fileName);\n</code></pre>"},{"location":"config/#php","title":"Php","text":"<p>The Phalcon\\Config\\Php adapter reads a PHP file that returns an array and loads it in the Phalcon\\Config object. You can store your configuration as a PHP array in a file and return the array back. The adapter will read it and parse it accordingly.</p> <pre><code>&lt;?php\n\nreturn [ \n    'database' =&gt; [\n        'adapter'  =&gt; 'Mysql',\n        'host'     =&gt; 'localhost',\n        'username' =&gt; 'scott',\n        'password' =&gt; 'cheetah',\n        'dbname'   =&gt; 'test_db',  \n    ],\n    'models'   =&gt; [\n        'metadata' =&gt; [\n            'adapter' =&gt; 'Memory',\n        ],\n    ],\n];\n</code></pre> <p>You can read the file as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config\\Adapter\\Php;\n\n$fileName = '/apps/storage/config.php';\n$config   = new Php($fileName);\n\necho $config\n        -&gt;get('database')\n        -&gt;get('host');       // localhost\necho $config\n        -&gt;get('models')\n        -&gt;get('metadata')\n        -&gt;get('adapter');    // Memory\n</code></pre> <p>Whenever you want to use the Phalcon\\Config\\ConfigFactory component, you will just need to pass the name of the file.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\CacheFactory;\n\n$fileName = '/app/storage/config.php';\n$factory  = new ConfigFactory();\n\n$options = [\n    'adapter'  =&gt; 'php',\n    'filePath' =&gt; $fileName,\n];\n\n$config = $factory-&gt;load($options);\n</code></pre> <p>or when using the <code>newInstance()</code> instead:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\CacheFactory;\n\n$fileName = '/app/storage/config.php';\n$factory  = new ConfigFactory();\n\n$config = $factory-&gt;newinstance('php', $fileName);\n</code></pre>"},{"location":"config/#yaml","title":"Yaml","text":"<p>NOTE</p> <p>Requires PHP's yaml extension to be present in the system</p> <p>Another common file format is YAML. Phalcon\\Config\\Yaml requires the <code>yaml</code> PHP extension to be present in your system. It uses the PHP function yaml_parse_file to read these files. The adapter reads a <code>yaml</code> file supplied as the first parameter of the constructor, but also accepts a second parameter <code>callbacks</code> as an array. The <code>callbacks</code> supplies content handlers for YAML nodes. It is an associative array of <code>tag =&gt; callable</code> mappings.</p> <pre><code>app:\n  baseUri: /     \n  env: 3         \n  name: PHALCON        \n  timezone: UTC    \n  url: http://127.0.0.1         \n  version: 0.1\n  time: 1562960897.712697          \nmodels:\n  metadata:\n    adapter: Memory\nloggers:\n  handlers:\n    0:\n      name: stream\n    1:\n      name: redis\n</code></pre> <p>You can read the file as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config\\Adapter\\Yaml;\n\ndefine(\"APPROOT\", dirname(__DIR__));\n\n$fileName  = '/apps/storage/config.yml';\n$callbacks = [\n    \"!approot\" =&gt; function($value) {\n        return APPROOT . $value;\n    },\n];\n$config    = new Yaml($fileName, $callbacks);\n\necho $config\n        -&gt;get('database')\n        -&gt;get('host');       // localhost\necho $config\n        -&gt;get('models')\n        -&gt;get('metadata')\n        -&gt;get('adapter');    // Memory\n</code></pre> <p>Whenever you want to use the Phalcon\\Config\\ConfigFactory component, you will can set the <code>mode</code> as a parameter.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\CacheFactory;\n\ndefine(\"APPROOT\", dirname(__DIR__));\n\n$fileName = '/apps/storage/config.yml';\n$factory  = new ConfigFactory();\n$options  = [\n    'adapter'  =&gt; 'yaml',\n    'filePath'  =&gt; $fileName,\n    'callbacks' =&gt; [\n        \"!approot\" =&gt; function($value) {\n            return APPROOT . $value;\n        },\n    ],\n];\n\n$config = $factory-&gt;load($options);\n</code></pre> <p>or when using the <code>newInstance()</code> instead:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\CacheFactory;\n\ndefine(\"APPROOT\", dirname(__DIR__));\n\n$fileName  = '/app/storage/config.yaml';\n$factory   = new ConfigFactory();\n$callbacks = [\n    \"!approot\" =&gt; function($value) {\n        return APPROOT . $value;\n    },\n];\n\n$config = $factory-&gt;newinstance('yaml', $fileName, $callbacks);\n</code></pre>"},{"location":"config/#custom-adapters","title":"Custom Adapters","text":"<p>There are more adapters available for Config in the Phalcon Incubator</p>"},{"location":"config/#dependency-injection","title":"Dependency Injection","text":"<p>As with most Phalcon components, you can store the Phalcon\\Config object in your Phalcon\\Di container. By doing so, you will be able to access your configuration object from controllers, models, views and any component that implements <code>Injectable</code>.</p> <p>An example of the registration of the service as well as accessing it is below:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Config;\n\n// Create a container\n$container = new FactoryDefault();\n\n$container-&gt;set(\n    'config',\n    function () {\n        $configData = require 'config/config.php';\n\n        return new Config($configData);\n    }\n);\n</code></pre> <p>The component is now available in your controllers using the <code>config</code> key</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Config;\n\n/**\n * @property Config $config\n */\nclass MyController extends Controller\n{\n    private function getDatabaseName()\n    {\n        return $this-&gt;config-&gt;database-&gt;dbname;\n    }\n}\n</code></pre> <p>Also in your views (Volt syntax)</p> <pre><code>{% raw %}{{ config.database.dbname }}{% endraw %}\n</code></pre>"},{"location":"container/","title":"Dependency Injection Container (PSR-11)","text":""},{"location":"container/#overview","title":"Overview","text":"<p>Phalcon\\Container is an implementation of the PSR-11 Container interface as defined by PHP-FIG.</p> <p></p> <p>This component aids with receiving and setting services in the DI container</p> <p>NOTE</p> <p>Phalcon\\Container is not a real implementation of PSR-11. For now it acts as a proxy to the Phalcon\\Di container. In future versions, we will implement this component fully and it will replace the current Dependency Injection container.</p>"},{"location":"container/#activation","title":"Activation","text":"<p>To set the container up, you first need to have a Phalcon\\Di object already set up.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Container;\n\n$default   = new FactoryDefault();\n$container = new Container($default);\n\n$request = $container-&gt;get('request');\n</code></pre>"},{"location":"contributions/","title":"Contributions","text":""},{"location":"contributions/#contributing-to-phalcon","title":"Contributing to Phalcon","text":"<p>Phalcon is an open source project and relies heavily on volunteer efforts and contributions. We welcome contributions from everyone!</p> <p>Please take a few moments to review this document to understand the contribution process and make it as efficient as possible for all. By following these guidelines, we can have faster resolution of issues, better communication and we can all move the project forward!</p> <p>The Phalcon source code (along with documentation, websites etc.) is stored in GitHub. You can browse our repositories in our organization page.</p> <p>If you wish to contribute to Phalcon, you can do so by issuing a GitHub pull request. </p> <p>When you create a pull request, we have a handy template to help you describe what is the scope of the pull request. It is very important and helpful to the community that you add tests to your pull request. Each pull request will be reviewed by a core contributor (someone with permissions to merge pull requests). Based on the type and content of the pull request, it could be:</p> <ul> <li>merged immediately or </li> <li>put on hold, where the reviewer requires changes (styling, tests etc.)</li> <li>put on hold, if discussion is necessary (community, core team etc.)</li> <li>rejected</li> </ul> <p>NOTE</p> <p>Please make sure that the target branch that you send your pull request is correct and that you have already rebased your code. Pull requests to the master branch are not allowed</p>"},{"location":"contributions/#documentation","title":"Documentation","text":"<p>If programming in Zephir seems daunting, there are plenty of areas that you can contribute. You can always check the documentation for any typographic or context errors. You could also enhance the documentation with more examples in the respective pages.</p> <p>All you have to do is go to our docs repository, fork it, make the changes and send us a pull request.</p> <p>NOTE</p> <p>Note that changes to the <code>docs</code> repository are allowed only to the English documents (<code>en</code> folder).</p>"},{"location":"contributions/#translations","title":"Translations","text":"<p>If you wish to contribute to Phalcon by translating our documents in your native tongue, you can utilize the excellent service of our friends at Crowdin. Our project is located here. If your language is not listed, please send us a message so that we can add it.</p>"},{"location":"contributions/#questions-and-support","title":"Questions and Support","text":"<p>NOTE</p> <p>We only accept bug reports, new feature requests and pull requests in GitHub. For questions regarding the usage of the framework or support requests please visit the github discussions or our Discord server.</p>"},{"location":"contributions/#bug-report-checklist","title":"Bug Report Checklist","text":"<ul> <li>Make sure you are using the latest released version of Phalcon before creating an issue in GitHub.</li> <li>Only bugs found in the latest released version of Phalcon will be addressed.</li> <li>We have a handy template when creating an issue to help you provide as much information for the core team to reproduce and address. Being able to reproduce a bug significantly reduces the time to find the cause and fix it. Scripts of even failing tests are more than appreciated. Please check how to create the reproducible tests page for more information.</li> <li>As part of your report, please include additional information such as the OS, PHP version, Phalcon version, web server, memory etc.</li> <li>If you're submitting a Segmentation Fault error, we require a backtrace. Please check the Generating a Backtrace section for more information.</li> </ul>"},{"location":"contributions/#generating-a-backtrace","title":"Generating a Backtrace","text":"<p>Sometimes due to Segmentation Fault error, Phalcon could crash some of your web server processes. In order to help us find the cause of this segmentation fault, we will need the crash backtrace.</p> <p>Please check the following links for instructions on how to generate the backtrace:</p> <ul> <li>Generating a gdb backtrace</li> <li>Generating a backtrace, with a compiler, on Win32</li> <li>Debugging Symbols</li> <li>Building PHP</li> </ul>"},{"location":"contributions/#pull-request-checklist","title":"Pull Request Checklist","text":"<ul> <li>Pull requests to the <code>master</code> branch are not accepted. Please fork the repository and create your branch from the necessary \"source\" branch, for instance <code>4.0.x</code> and if need be rebase your branch before submitting your pull request. If there are collisions, we will ask you to rebase your branch again.</li> <li>Add tests to your pull request or adjust existing ones. This is very important since it helps justify your pull request. Please check our testing page for more information on how to set up a test environment and how to write tests.</li> <li>Since Phalcon is written in Zephir, please do not submit commits that modify the C generated files directly</li> <li>Phalcon follows a specific coding style. Please install the <code>editorconfig</code> plugin in your favorite IDE to take advantage of the supplied <code>.editorconfig</code> file that comes with this repository and not to have to worry about coding standards. All tests (PHP code), follow the PSR-2 standard</li> <li>Remove any change to <code>ext/kernel</code>, <code>*.zep.c</code> and <code>*.zep.h</code> files before submitting the pull request</li> <li>More information here.</li> </ul> <p>Before submitting new functionality, please open a NFR as a new issue on GitHub to discuss the impact of including the functionality or changes in the core extension. Once the functionality is approved, make sure your PR contains the following:</p> <ul> <li>An update to the <code>CHANGELOG.md</code></li> <li>Unit Tests</li> <li>Documentation or Usage Examples</li> </ul>"},{"location":"contributions/#getting-support","title":"Getting Support","text":"<p>If you have any questions about how to use Phalcon, please see the support page.</p>"},{"location":"contributions/#requesting-features","title":"Requesting Features","text":"<p>If you have any changes or new features in mind, please fill an NFR.</p> <p>Thanks!</p> <p>&lt;3 Phalcon Team</p>"},{"location":"controllers/","title":"Controllers","text":""},{"location":"controllers/#overview","title":"Overview","text":"<p>A controller is a class that contains business logic for an application. It is also responsible for executing the requests from users. Controllers have methods called actions that contain such business logic and handle user requests.</p> <p>An action is any public method in a controller with the <code>Action</code> suffix. These actions are accessible by a URL and are responsible for interpreting the request and creating the response. Usually responses are in the form of a rendered view, but there are other ways to create responses as well.</p> <p>Controllers in Phalcon must have the suffix <code>Controller</code> in their file and class name and must extend the Phalcon\\Mvc\\Controller class.</p> <p>NOTE</p> <p>The default controller (when no controller has been specified in the UR)L is IndexController and the default action (when no action has been specified in the URL) is indexAction.</p>"},{"location":"controllers/#routing","title":"Routing","text":"<p>Routing is further explained in the relevant document. However the default route is:</p> <pre><code>/:module/:controller/:action/:parameter1/:parameter2\n</code></pre> <p>You can find more information about modules in the application document. For an application that does not have any modules, the default routes are:</p> <pre><code>/:controller/:action/:parameter1/:parameter2\n</code></pre> <p>As a result, the URL:</p> <pre><code>https://dev.phalcon.ld/invoices/list/2/25\n</code></pre> <p>will have:</p> Slug Description <code>invoices</code> Controller <code>list</code> Action <code>2</code> Parameter1 <code>25</code> Parameter2 <p>The above will call the <code>InvoicesController</code> and <code>listAction</code>. The parameters will be available through the request in the controller and action.</p> <p>Controller classes can be in any folder in your application, so long as your autoloader knows where to look for them when called. Phalcon\\Loader has numerous options for registering directories, namespaces etc. to help with the discovery of the controllers.</p> <p>A sample controller is as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass InvoicesController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function listAction(int $page = 1, int $perPage = 25)\n    {\n\n    }\n}\n</code></pre>"},{"location":"controllers/#initialization","title":"Initialization","text":"<p>Phalcon\\Mvc\\Controller calls the  <code>initialize()</code> method (if present) first, before any action is executed on a controller. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Tag;\n\n/**\n * @property Tag $tag\n */\nclass InvoicesController extends Controller\n{\n    public function initialize()\n    {\n        $this-&gt;tag-&gt;setTitle('Invoices Management');\n    }\n\n    public function listAction(int $page = 1, int $perPage = 25)\n    {\n\n    }\n}\n</code></pre> <p>NOTE</p> <p>The use of the <code>__construct()</code> method is not recommended.</p> <p>NOTE</p> <p>The <code>initialize()</code> method is only called if the <code>beforeExecuteRoute</code> event has been executed successfully. This is to ensure that if you have authorization checking code in the event, <code>initialize</code> will never be invoked</p> <p>If you want to execute some initialization logic just after the controller object is constructed then you can implement the <code>onConstruct()</code> method:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass InvoicesController extends Controller\n{\n    public function onConstruct()\n    {\n        // ...\n    }\n}\n</code></pre> <p>NOTE</p> <p>Note that <code>onConstruct()</code> is executed even if the action to be executed does not exist in the controller or the user does not have access to it (assuming custom access control is implemented in the application).</p>"},{"location":"controllers/#dispatch-loop","title":"Dispatch Loop","text":"<p>The dispatch loop will be executed within the Dispatcher until there are no actions left to be executed. In the examples above we showed code in only one action, which will be executed with the appropriate request.</p> <p>We can utilize the Dispatcher object to forward the request to a different module, controller or action, thus creating a more complex flow of operations in the dispatch loop. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Dispatcher;\nuse Phalcon\\Flash\\Direct;\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * @property Dispatcher $dispatcher\n * @property Direct     $flash\n */\nclass InvoicesController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function showAction($year, $postTitle)\n    {\n        $this-&gt;flash-&gt;error(\n            \"You do not have permission to access this area\"\n        );\n\n        // Forward flow to another action\n        $this-&gt;dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'users',\n                'action'     =&gt; 'login',\n            ]\n        );\n    }\n}\n</code></pre> <p>If users do not have permission to access the particular action, they will be forwarded to the <code>login</code> action in the <code>UsersController</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass UsersController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function loginAction()\n    {\n\n    }\n}\n</code></pre> <p>The above is a simple example of forwarding for users that are not logged in or do not have access. You can check the Events section below on how you can leverage events to do the same thing globally for your application.</p> <p>There is no limit on the <code>forward</code> calls you can have in your application. You have to be careful though, since forwarding could lead to circular references, at which point your application will halt. If there are no other actions to be dispatched by the dispatch loop, the dispatcher will automatically invoke the view layer of the MVC that is managed by Phalcon\\Mvc\\View.</p>"},{"location":"controllers/#actions","title":"Actions","text":"<p>Actions are methods that are called to execute the necessary functionality for our application. Actions must be suffixed by <code>Action</code> and they match a route request from the user. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass InvoicesController extends Controller\n{\n    public function listAction(int $page = 1, int $perPage = 25)\n    {\n\n    }\n\n    public function other()\n    {\n\n    }\n}\n</code></pre> <p>For the above example:</p> <pre><code>/invoices/list\n</code></pre> <p>will tell the dispatcher to call the <code>listAction</code> method with any parameters passed. However</p> <pre><code>/invoices/other\n</code></pre> <p>will result in a <code>404</code> - page not found. </p>"},{"location":"controllers/#parameters","title":"Parameters","text":"<p>Additional URI parameters are defined as action parameters, so that they can be easily accessed using local variables. A controller can optionally extend Phalcon\\Mvc\\Controller. By doing this, the controller can have easy access to the application services.</p> <p>Parameters without a default value are handled as required. Setting optional values for parameters is done as in PHP:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass InvoicesController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function listAction(int $page = 1, int $perPage = 25)\n    {\n\n    }\n}\n</code></pre> <p>NOTE</p> <p>You will need to add additional code to ensure that the data passed is of the correct type and either use the default value or have a correct value. If not, you will end up with errors.</p> <p>For the example above, the URL to call the method is:</p> <p><pre><code>/invoices/list/2/10\n</code></pre> However, you will need to ensure that you account for a URL like this one:</p> <p><pre><code>/invoices/list/wrong-value/another-wrong-value\n</code></pre> The above URL will not match the <code>int</code> for the <code>$page</code> or <code>perPage</code> and thus result in an error. You might want to consider a strategy to counter that. One way is to remove the types and ensure that your parameters are converted in the action:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass InvoicesController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function listAction($page = 1, $perPage = 25)\n    {\n        $page    = (int) $page;\n        $perPage = (int) $perPage;\n    }\n}\n</code></pre> <p>You can also remove the parameters from the action declaration and retrieve them from the dispatcher instead. Parameters are assigned in the same order as they were passed in the route. You can get a parameter from its name as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Dispatcher;\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * @property Dispatcher $dispatcher\n */\nclass InvoicesController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function listAction()\n    {\n        $year      = $this-&gt;dispatcher-&gt;getParam('year');\n        $postTitle = $this-&gt;dispatcher-&gt;getParam('postTitle');\n    }\n}\n</code></pre> <p>The above parameters will match the route the way it was defined.</p>"},{"location":"controllers/#events","title":"Events","text":"<p>Controllers automatically act as listeners for dispatcher events, implementing methods with those event names allowing you to implement hook points before/after the actions are executed:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Dispatcher;\nuse Phalcon\\Flash\\Direct;\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * @property Dispatcher\\ $dispatcher\n * @property Direct      $flash\n */\nclass InvoicesController extends Controller\n{\n    public function beforeExecuteRoute($dispatcher)\n    {\n        // This is executed before every found action\n        if ($dispatcher-&gt;getActionName() === 'save') {\n            $this-&gt;flash-&gt;error(\n                \"You do not have permission to save invoices\"\n            );\n\n            $this-&gt;dispatcher-&gt;forward(\n                [\n                    'controller' =&gt; 'home',\n                    'action'     =&gt; 'index',\n                ]\n            );\n\n            return false;\n        }\n    }\n\n    public function afterExecuteRoute($dispatcher)\n    {\n        // Executed after every found action\n    }\n}\n</code></pre>"},{"location":"controllers/#request-response","title":"Request - Response","text":"<p>If you have already registered a Request and Response services to your DI container or have simply instantiated the Phalcon\\Di\\FactoryDefault one, you can access these objects as properties in your controller.</p> <p>For Phalcon\\Di\\FactoryDefault, your objects will be Phalcon\\Http\\Request for <code>request</code> and Phalcon\\Http\\Response for response. The <code>request</code> contains the request from the user, including all the variables set by the method use (<code>GET</code>, <code>POST</code> etc.) along with additional information regarding the request. The <code>response</code> contains data that we need to send back such as <code>content-type</code>, status code, payload etc.</p> <p>NOTE</p> <p>In order to access the services from your controller, you will need to extend the <code>Phalcon\\Mvc\\Controller</code> class</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * @property Request  $request\n */\nclass InvoicesController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function listAction()\n    {\n        if (true === $this-&gt;request-&gt;isPost()) {\n            $page   = $this\n                -&gt;request\n                -&gt;getPost('page', 'int', 1)\n            ;\n            $perPage = $this\n                -&gt;request\n                -&gt;getPost('perPage', 'int', 25)\n            ;\n        }\n    }\n}\n</code></pre> <p>The code above first checks if the request is a <code>POST</code> request. If yes, then it gets two variables from the <code>$_POST</code> superglobal. The syntax we use is: - Get the variable (<code>page</code>) - If it exists, sanitize it to an integer - If it does not exist, return the default <code>1</code></p> <p>Using this technique, we ensure that all input is properly sanitized and defaults are set.</p> <p>The response object is not called directly in most cases, rather it is built gradually or attached to the <code>afterDispatch</code> event. If for instance we need to send JSON back to the user as a result of an AJAX request, we can do so directly in the action, interacting with the response:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * @property Request  $request\n * @property Response $response\n */\nclass InvoicesController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function listAction()\n    {\n        if (true === $this-&gt;request-&gt;isPost()) {\n            $page   = $this\n                -&gt;request\n                -&gt;getPost('page', 'int', 1)\n            ;\n            $perPage = $this\n                -&gt;request\n                -&gt;getPost('perPage', 'int', 25)\n            ;\n\n            // ......\n\n            $data = $records-&gt;toArray();\n\n            $this\n                -&gt;response\n                -&gt;setStatusCode(200, 'OK')\n                -&gt;setJsonContent($data)\n            ;\n        }\n    }\n}\n</code></pre> <p>Assuming that you have code that sets the status code and content type for the response in the <code>afterDispatch</code> or <code>afterExecuteRoute</code> events, you can always return directly the data. Phalcon will set that as the returned payload. This is particularly useful when writing APIs.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property Request  $request\n * @property Response $response\n * @property View     $view\n */\nclass InvoicesController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function listAction()\n    {\n        if (true === $this-&gt;request-&gt;isPost()) {\n            $page   = $this\n                -&gt;request\n                -&gt;getPost('page', 'int', 1)\n            ;\n            $perPage = $this\n                -&gt;request\n                -&gt;getPost('perPage', 'int', 25)\n            ;\n\n            // ......\n\n            return $records-&gt;toArray();\n        }\n    }\n\n    public function afterExecuteRoute($dispatcher)\n    {\n        $this-&gt;view-&gt;disable();\n        $this-&gt;response-&gt;setContentType('application/json', 'UTF-8');\n        $this-&gt;response-&gt;setHeader('Cache-Control', 'no-store');\n\n        /** @var array $data */\n        $data = $dispatcher-&gt;getReturnedValue();\n        $dispatcher-&gt;setReturnedValue([]);\n\n        if (true !== $this-&gt;response-&gt;isSent()) {\n            $this-&gt;response-&gt;setJsonContent($data);\n\n            return $this-&gt;response-&gt;send();\n        }\n    }\n}\n</code></pre> <p>In the above example, we return an array from our action. The <code>afterExecuteRoute</code> method disables the view, sets the content type to JSON, and then if the response has not been sent, sets the JSON content and sends the response.</p>"},{"location":"controllers/#session","title":"Session","text":"<p>Sessions help us maintain persistent data between requests. You can access a Phalcon\\Session\\Bag from any controller using the property <code>persistent</code> to encapsulate data that needs to be persistent:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Session\\Bag;\n\n/**\n * @property Bag $persistent\n */\nclass UserController extends Controller\n{\n    public function indexAction()\n    {\n        $this-&gt;persistent-&gt;name = 'Darth';\n    }\n\n    public function welcomeAction()\n    {\n        echo 'Welcome, ', $this-&gt;persistent-&gt;name;\n    }\n}\n</code></pre> <p>NOTE</p> <p>Note that the <code>persistent</code> service is automatically registered for any component (including controllers) that extend the <code>Phalcon\\Di\\Injectable</code> class</p>"},{"location":"controllers/#dependency-injection","title":"Dependency Injection","text":"<p>You can create a controller as a stand alone class. However you can extend the Phalcon\\Mvc\\Controller class which will expose the whole DI container to you. Each service will be available using its name as a property of the controller:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property Request  $request\n * @property Response $response\n * @property View     $view\n */\nclass InvoicesController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function listAction()\n    {\n        if (true === $this-&gt;request-&gt;isPost()) {\n            $page   = $this\n                -&gt;request\n                -&gt;getPost('page', 'int', 1)\n            ;\n            $perPage = $this\n                -&gt;request\n                -&gt;getPost('perPage', 'int', 25)\n            ;\n\n            // ......\n\n            return $records-&gt;toArray();\n        }\n    }\n\n    public function afterExecuteRoute($dispatcher)\n    {\n        $this-&gt;view-&gt;disable();\n        $this-&gt;response-&gt;setContentType('application/json', 'UTF-8');\n        $this-&gt;response-&gt;setHeader('Cache-Control', 'no-store');\n\n        /** @var array $data */\n        $data = $dispatcher-&gt;getReturnedValue();\n        $dispatcher-&gt;setReturnedValue([]);\n\n        if (true !== $this-&gt;response-&gt;isSent()) {\n            $this-&gt;response-&gt;setJsonContent($data);\n\n            return $this-&gt;response-&gt;send();\n        }\n    }\n}\n</code></pre> <p>In the above example, we access the <code>request</code>, <code>response</code> and <code>view</code> services that are automatically injected in our controller.</p>"},{"location":"controllers/#services-as-controllers","title":"Services as Controllers","text":"<p>Services can act as controllers. Controllers are classes that are always requested from the DI container. As a result, any other class registered with the correct name can easily replace a controller:</p> <pre><code>&lt;?php\n\nuse MyApp\\Controllers\\InvoicesController;\nuse MyApp\\Components\\AlternativeInvoice;\n\n$container-&gt;set(\n    InvoicesController::class,\n    function () {\n        return new AlternativeInvoice();\n    }\n);\n</code></pre>"},{"location":"crypt/","title":"Crypt Component","text":""},{"location":"crypt/#overview","title":"Overview","text":"<p>NOTE</p> <p>Requires PHP's openssl extension to be present in the system</p> <p>NOTE</p> <p>DOES NOT support insecure algorithms with modes: </p> <p><code>des*</code>, <code>rc2*</code>, <code>rc4*</code>, <code>des*</code>, <code>*ecb</code></p> <p>Phalcon provides encryption facilities via the Phalcon\\Crypt component. This class offers simple object-oriented wrappers to the openssl PHP's encryption library.</p> <p>By default, this component utilizes the <code>AES-256-CFB</code> cipher.</p> <p>The cipher AES-256 is used among other places in SSL/TLS across the Internet. It's considered among the top ciphers. In theory it's not crackable since the combinations of keys are massive. Although NSA has categorized this in Suite B, they have also recommended using higher than 128-bit keys for encryption.</p> <p>NOTE</p> <p>You must use a key length corresponding to the current algorithm. For the default algorithm <code>aes-256-cfb</code> the default key length is 32 bytes.</p>"},{"location":"crypt/#basic-usage","title":"Basic Usage","text":"<p>This component is designed to be very simple to use:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Crypt;\n\n$key = \"12345\"; // Your luggage combination\n\n$crypt     = new Crypt();\n$text      = 'This is the text that you want to encrypt.';\n$encrypted = $crypt-&gt;encrypt($text, $key);\n\necho $crypt-&gt;decrypt($encrypted, $key);\n</code></pre> <p>If no parameters are passed in the constructor, the component will use the <code>aes-256-cfb</code> cipher with signing by default. You can always change the cipher as well as disable signing.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Crypt;\n\n$key   = \"12345\"; // Your luggage combination\n$crypt = new Crypt();\n\n$crypt\n    -&gt;setCipher('aes256')\n    -&gt;useSigning(false)\n;\n\n$text      = 'This is the text that you want to encrypt.';\n$encrypted = $crypt-&gt;encrypt($text, $key);\n\necho $crypt-&gt;decrypt($encrypted, $key);\n</code></pre>"},{"location":"crypt/#encrypt","title":"Encrypt","text":"<p>The <code>encrypt()</code> method encrypts a string. The component will use the previously set cipher, which has been set in the constructor or explicitly. If no <code>key</code> is passed in the parameter, the previously set key will be used.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Crypt;\n\n$key   = \"12345\"; // Your luggage combination\n$crypt = new Crypt();\n$crypt-&gt;setKey($key);\n\n$text      = 'This is the text that you want to encrypt.';\n$encrypted = $crypt-&gt;encrypt($text);\n</code></pre> <p>or using the key as the second parameter</p> <pre><code>&lt;?php\n\nuse Phalcon\\Crypt;\n\n$key       = \"12345\"; // Your luggage combination\n$crypt     = new Crypt();\n$text      = 'This is the text that you want to encrypt.';\n$encrypted = $crypt-&gt;encrypt($text, $key);\n</code></pre> <p>The method will also internally use signing by default. You can always use <code>useSigning(false)</code> prior to the method call to disable it.</p> <p>NOTE</p> <p>If you choose <code>ccm</code> or <code>gcm</code> related ciphers, you must also supply <code>authData</code> for them. An exception will be thrown otherwise.</p>"},{"location":"crypt/#decrypt","title":"Decrypt","text":"<p>The <code>decrypt()</code> method decrypts a string. Similar to <code>encrypt()</code> the component will use the previously set cipher, which has been set in the constructor or explicitly. If no <code>key</code> is passed in the parameter, the previously set key will be used.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Crypt;\n\n$key   = \"12345\"; // Your luggage combination\n$crypt = new Crypt();\n$crypt-&gt;setKey($key);\n\n$text      = 'T4\\xb1\\x8d\\xa9\\x98\\x05\\\\\\x8c\\xbe\\x1d\\x07&amp;[\\x99\\x18\\xa4~Lc1\\xbeW\\xb3';\n$encrypted = $crypt-&gt;decrypt($text);\n</code></pre> <p>or using the key as the second parameter</p> <pre><code>&lt;?php\n\nuse Phalcon\\Crypt;\n\n$key   = \"12345\"; // Your luggage combination\n$crypt = new Crypt();\n$crypt-&gt;setKey($key);\n\n$text      = 'T4\\xb1\\x8d\\xa9\\x98\\x05\\\\\\x8c\\xbe\\x1d\\x07&amp;[\\x99\\x18\\xa4~Lc1\\xbeW\\xb3';\n$encrypted = $crypt-&gt;decrypt($text, $key);\n</code></pre> <p>The method will also internally use signing by default. You can always use <code>useSigning(false)</code> prior to the method call to disable it.</p>"},{"location":"crypt/#base64-encrypt","title":"Base64 Encrypt","text":"<p>The <code>encryptBase64()</code> can be used to encrypt a string in a URL friendly way. It uses <code>encrypt()</code> internally and accepts the <code>text</code> and optionally the <code>key</code> of the element to encrypt. There is also a third parameter <code>safe</code> (defaults to <code>false</code>) which will perform string replacements for non URL friendly characters such as <code>+</code> or <code>/</code>.</p>"},{"location":"crypt/#base64-decrypt","title":"Base64 Decrypt","text":"<p>The <code>decryptBase64()</code> can be used to decrypt a string in a URL friendly way. Similar to <code>encryptBase64()</code> it uses <code>decrypt()</code> internally and accepts the <code>text</code> and optionally the <code>key</code> of the element to encrypt. There is also a third parameter <code>safe</code> (defaults to <code>false</code>) which will perform string replacements for previously replaced non URL friendly  characters such as <code>+</code> or <code>/</code>.</p>"},{"location":"crypt/#exceptions","title":"Exceptions","text":"<p>Exceptions thrown in the Phalcon\\Crypt component will be of type [Phalcon\\Crypt\\Exception][config-exception]. If however you are using signing and the calculated hash for <code>decrypt()</code> does not match, Phalcon\\Crypt\\Mismatch will be thrown. You can use these exceptions to selectively catch exceptions thrown only from this component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Crypt\\Mismatch;\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    public function index()\n    {\n        try {\n            // Get some configuration values\n            $this-&gt;crypt-&gt;decrypt('hello');\n        } catch (Mismatch $ex) {\n            echo $ex-&gt;getMessage();\n        }\n    }\n}\n</code></pre>"},{"location":"crypt/#functionality","title":"Functionality","text":""},{"location":"crypt/#ciphers","title":"Ciphers","text":"<p>The getter <code>getCipher()</code> returns the currently selected cipher. If none has been explicitly defined either by the setter <code>setCipher()</code> or the constructor of the object the <code>aes-256-cfb</code> is selected by default. The <code>aes-256-gcm</code> is the preferable cipher.</p> <p>You can always get an array of all the available ciphers for your system by calling  <code>getAvailableCiphers()</code>.</p>"},{"location":"crypt/#hash-algorithm","title":"Hash Algorithm","text":"<p>The getter <code>getHashAlgo()</code> returns the hashing algorithm use by the component. If none has been explicitly defined by the setter <code>setHashAlgo()</code> the <code>sha256</code> will be used. If the hash algorithm defined is not available in the system or is wrong, a [Phalcon\\Crypt\\Exception][crypt=exception] will be thrown.</p> <p>You can always get an array of all the available hashing algorithms for your system by calling  <code>getAvailableHashAlgos()</code>.</p>"},{"location":"crypt/#keys","title":"Keys","text":"<p>The component offers a getter and a setter for the key to be used. Once the key is set, it will be used for any encrypting or decrypting operation (provided that the <code>key</code> parameter is not defined when using these methods).</p> <ul> <li><code>getKey()</code>: Returns the encryption key.</li> <li><code>setKey()</code> Sets the encryption key.</li> </ul> <p>NOTE</p> <p>You should always create as secure keys as possible. <code>12345</code> might be good for your luggage combination, or <code>password1</code> for your email, but for your application you should try something a lot more complex. The longer and more random the key is the better. The length of course depends on the chosen cipher. </p> <p>Several online services can generate a random and strong text that can be used for a key. Alternatively you can always use the <code>hash()</code> methods from the Phalcon\\Security component, which can offer a strong key by hashing a string.</p>"},{"location":"crypt/#signing","title":"Signing","text":"<p>To instruct the component to use signing or not, <code>useSigning</code> is available. It accepts a boolean which sets a flag internally, specifying whether signing will be used or not.</p>"},{"location":"crypt/#auth-data","title":"Auth Data","text":"<p>If the cipher selected is of type <code>gcm</code> or <code>ccm</code> (what the cipher name ends with), auth data is required for the component to correctly encrypt or decrypt data. The methods available for this operation are:</p> <ul> <li><code>setAuthTag()</code></li> <li><code>setAuthData()</code></li> <li><code>setAuthTagLength()</code> - defaults to <code>16</code></li> </ul>"},{"location":"crypt/#padding","title":"Padding","text":"<p>You can also set the padding used by the component by using <code>setPadding()</code>. By default the component will use <code>PADDING_DEFAULT</code>. The available padding constants are:</p> <ul> <li><code>PADDING_ANSI_X_923</code></li> <li><code>PADDING_DEFAULT</code></li> <li><code>PADDING_ISO_10126</code></li> <li><code>PADDING_ISO_IEC_7816_4</code></li> <li><code>PADDING_PKCS7</code></li> <li><code>PADDING_SPACE</code></li> <li><code>PADDING_ZERO</code></li> </ul>"},{"location":"crypt/#dependency-injection","title":"Dependency Injection","text":"<p>As with most Phalcon components, you can store the Phalcon\\Crypt object in your Phalcon\\Di container. By doing so, you will be able to access your configuration object from controllers, models, views and any component that implements <code>Injectable</code>.</p> <p>An example of the registration of the service as well as accessing it is below:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Crypt;\n\n// Create a container\n$container = new FactoryDefault();\n\n$container-&gt;set(\n    'crypt',\n    function () {\n        $crypt = new Crypt();\n\n        // Set a global encryption key\n        $crypt-&gt;setKey(\n            \"T4\\xb1\\x8d\\xa9\\x98\\x05\\\\\\x8c\\xbe\\x1d\\x07&amp;[\\x99\\x18\\xa4~Lc1\\xbeW\\xb3\"\n        );\n\n        return $crypt;\n    },\n    true\n);\n</code></pre> <p>The component is now available in your controllers using the <code>crypt</code> key</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Secrets;\nuse Phalcon\\Crypt;\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * @property Crypt   $crypt\n * @property Request $request\n */\nclass SecretsController extends Controller\n{\n    public function saveAction()\n    {\n        $secret = new Secrets();\n\n        $text = $this-&gt;request-&gt;getPost('text');\n\n        $secret-&gt;content = $this-&gt;crypt-&gt;encrypt($text);\n\n        if ($secret-&gt;save()) {\n            $this-&gt;flash-&gt;success(\n                'Secret was successfully created!'\n            );\n        }\n    }\n}\n</code></pre>"},{"location":"crypt/#links","title":"Links","text":"<ul> <li>Advanced Encryption Standard (AES)</li> <li>What is block cipher</li> <li>Introduction to Blowfish</li> <li>CTR-Mode Encryption</li> <li>Recommendation for Block Cipher Modes of Operation: Methods and Techniques</li> <li>Counter (CTR) mode</li> </ul>"},{"location":"db-layer/","title":"Database Abstraction Layer","text":""},{"location":"db-layer/#overview","title":"Overview","text":"<p>The components under the <code>Phalcon\\Db</code> namespace are the ones responsible for powering the  Phalcon\\Mvc\\Model class - the <code>Model</code> in MVC for the framework. It consists of an independent high-level abstraction layer for database systems completely written in C.</p> <p>This component allows for a lower level database manipulation than using traditional models.</p>"},{"location":"db-layer/#adapters","title":"Adapters","text":"<p>This component makes use of adapters to encapsulate specific database system details. Phalcon uses PDO to connect to databases. The following database engines are supported:</p> Class Description Phalcon\\Db\\Adapter\\Pdo\\Mysql Is the world's most used relational database management system (RDBMS) that runs as a server providing multi-user access to a number of databases Phalcon\\Db\\Adapter\\Pdo\\Postgresql PostgreSQL is a powerful, open source relational database system. It has more than 15 years of active development and a proven architecture that has earned it a strong reputation for reliability, data integrity, and correctness. Phalcon\\Db\\Adapter\\Pdo\\Sqlite SQLite is a software library that implements a self-contained, serverless, zero-configuration, transactional SQL database engine"},{"location":"db-layer/#constants","title":"Constants","text":"<p>The Phalcon\\Db\\Enum class exposes a number of constants that can be used on the DB layer.</p> <ul> <li><code>FETCH_ASSOC</code>      = <code>\\Pdo::FETCH_ASSOC</code></li> <li><code>FETCH_BOTH</code>       = <code>\\Pdo::FETCH_BOTH</code></li> <li><code>FETCH_BOUND</code>      = <code>\\Pdo::FETCH_BOUND</code></li> <li><code>FETCH_CLASS</code>      = <code>\\Pdo::FETCH_CLASS</code></li> <li><code>FETCH_CLASSTYPE</code>  = <code>\\Pdo::FETCH_CLASSTYPE</code></li> <li><code>FETCH_COLUMN</code>     = <code>\\Pdo::FETCH_COLUMN</code></li> <li><code>FETCH_FUNC</code>       = <code>\\Pdo::FETCH_FUNC</code></li> <li><code>FETCH_GROUP</code>      = <code>\\Pdo::FETCH_GROUP</code></li> <li><code>FETCH_INTO</code>       = <code>\\Pdo::FETCH_INTO</code></li> <li><code>FETCH_KEY_PAIR</code>   = <code>\\Pdo::FETCH_KEY_PAIR</code></li> <li><code>FETCH_LAZY</code>       = <code>\\Pdo::FETCH_LAZY</code></li> <li><code>FETCH_NAMED</code>      = <code>\\Pdo::FETCH_NAMED</code></li> <li><code>FETCH_NUM</code>        = <code>\\Pdo::FETCH_NUM</code></li> <li><code>FETCH_OBJ</code>        = <code>\\Pdo::FETCH_OBJ</code></li> <li><code>FETCH_PROPS_LATE</code> = <code>\\Pdo::FETCH_PROPS_LATE</code></li> <li><code>FETCH_SERIALIZE</code>  = <code>\\Pdo::FETCH_SERIALIZE</code></li> <li><code>FETCH_UNIQUE</code>     = <code>\\Pdo::FETCH_UNIQUE</code></li> </ul> <p>Additional constants are available in the Phalcon\\Db\\Column object. This object is used to describe a column (or field) in a database table. These constants also define which types are supported by the ORM.</p> <p>Bind Types</p> <ul> <li><code>BIND_PARAM_BLOB</code> - Blob</li> <li><code>BIND_PARAM_BOOL</code> - Bool</li> <li><code>BIND_PARAM_DECIMAL</code> - Decimal</li> <li><code>BIND_PARAM_INT</code> - Integer</li> <li><code>BIND_PARAM_NULL</code> - Null</li> <li><code>BIND_PARAM_STR</code> - String</li> <li><code>BIND_SKIP</code> - Skip binding</li> </ul> <p>Column Types</p> <ul> <li><code>TYPE_BIGINTEGER</code> - Big integer</li> <li><code>TYPE_BIT</code> - Bit</li> <li><code>TYPE_BLOB</code> - Blob</li> <li><code>TYPE_BOOLEAN</code> - Boolean</li> <li><code>TYPE_CHAR</code> - Char</li> <li><code>TYPE_DATE</code> - Date</li> <li><code>TYPE_DATETIME</code> - Datetime</li> <li><code>TYPE_DECIMAL</code> - Decimal</li> <li><code>TYPE_DOUBLE</code> - Double</li> <li><code>TYPE_ENUM</code> - Enum</li> <li><code>TYPE_FLOAT</code> - Float</li> <li><code>TYPE_INTEGER</code> - Integer</li> <li><code>TYPE_JSON</code> - JSON</li> <li><code>TYPE_JSONB</code> - JSONB</li> <li><code>TYPE_LONGBLOB</code> - Long Blob</li> <li><code>TYPE_LONGTEXT</code> - Long Text</li> <li><code>TYPE_MEDIUMBLOB</code> - Medium Blob</li> <li><code>TYPE_MEDIUMINTEGER</code> - Medium Integer</li> <li><code>TYPE_MEDIUMTEXT</code> - Medium Text</li> <li><code>TYPE_SMALLINTEGER</code> - Small Integer</li> <li><code>TYPE_TEXT</code> - Text</li> <li><code>TYPE_TIME</code> - Time</li> <li><code>TYPE_TIMESTAMP</code> - Timestamp</li> <li><code>TYPE_TINYBLOB</code> - Tiny Blob</li> <li><code>TYPE_TINYINTEGER</code> - Tiny Integer</li> <li><code>TYPE_TINYTEXT</code> - Tiny Text</li> <li><code>TYPE_VARCHAR</code> - Varchar</li> </ul> <p>NOTE</p> <p>Depending on your RDBMS, certain types will not be available (e.g. <code>JSON</code> is not supported for Sqlite).</p>"},{"location":"db-layer/#methods","title":"Methods","text":"<p><pre><code>public function addColumn(\n    string $tableName, \n    string $schemaName, \n    ColumnInterface $column\n): bool\n</code></pre> Adds a column to a table</p> <p><pre><code>public function addIndex(\n    string $tableName, \n    string $schemaName,\n    IndexInterface $index\n): bool\n</code></pre> Adds an index to a table</p> <p><pre><code>public function addForeignKey(\n    string $tableName, \n    string $schemaName, \n    ReferenceInterface $reference\n): bool\n</code></pre> Adds a foreign key to a table</p> <p><pre><code>public function addPrimaryKey(\n    string $tableName, \n    string $schemaName, \n    IndexInterface $index\n): bool\n</code></pre> Adds a primary key to a table</p> <p><pre><code>public function affectedRows(): int\n</code></pre> Returns the number of affected rows by the last <code>INSERT</code>/<code>UPDATE</code>/<code>DELETE</code> reported by the database system</p> <p><pre><code>public function begin(\n    bool $nesting = true\n): bool\n</code></pre> Starts a transaction in the connection</p> <p><pre><code>public function close(): bool\n</code></pre> Closes active connection returning success. Phalcon automatically closes and destroys active connections</p> <p><pre><code>public function commit(\n    bool $nesting = true\n): bool\n</code></pre> Commits the active transaction in the connection</p> <p><pre><code>public function connect(\n    array $descriptor = null\n): bool\n</code></pre>  This method is automatically called in Phalcon\\Db\\Adapter\\Pdo\\AbstractPdo constructor. Call it when you need to restore a database connection</p> <p><pre><code>public function createSavepoint(\n    string $name\n): bool\n</code></pre> Creates a new savepoint</p> <p>public function createTable(     string $tableName,      string $schemaName,      array $definition ): bool <pre><code>Creates a table\n\n```php\npublic function createView(\n    string $viewName, \n    array $definition, \n    string $schemaName = null\n): bool\n</code></pre> Creates a view</p> <p><pre><code>public function delete(\n    mixed $table, \n    mixed $whereCondition = null, \n    mixed $placeholders = null, \n    mixed $dataTypes = null\n): bool\n</code></pre> Deletes data from a table using custom RDBMS SQL syntax</p> <p><pre><code>public function describeColumns(\n    string $table, \n    string $schema = null\n): ColumnInterface[]\n</code></pre> Returns an array of Phalcon\\Db\\Column objects describing a table</p> <p><pre><code>public function describeIndexes(\n    string $table, \n        string $schema = null\n): IndexInterface[]\n</code></pre> Lists table indexes</p> <p><pre><code>public function describeReferences(\n    string $table, \n    string $schema = null\n): ReferenceInterface[]\n</code></pre> Lists table references</p> <p><pre><code>public function dropColumn(\n    string $tableName, \n    string $schemaName, \n    string $columnName\n): bool\n</code></pre> Drops a column from a table</p> <p><pre><code>public function dropForeignKey(\n    string $tableName, \n    string $schemaName, \n    string $referenceName\n): bool\n</code></pre> Drops a foreign key from a table</p> <p><pre><code>public function dropIndex(\n    string $tableName, \n    string $schemaName, \n    string $indexName\n): bool\n</code></pre> Drop an index from a table</p> <p><pre><code>public function dropPrimaryKey(\n    string $tableName, \n    string $schemaName\n): bool\n</code></pre> Drops primary key from a table</p> <p><pre><code>public function dropTable(\n    string $tableName, \n    string $schemaName = null, \n    bool $ifExists = true\n): bool\n</code></pre> Drops a table from a schema/database</p> <p><pre><code>public function dropView(\n    string $viewName, \n    string $schemaName = null, \n    bool $ifExists = true\n): bool\n</code></pre> Drops a view</p> <p><pre><code>public function escapeIdentifier(\n    mixed identifier\n): string\n</code></pre> Escapes a column/table/schema name.</p> <p><pre><code>public function escapeString(string $str): string\n```php\nEscapes a value to avoid SQL injections\n\n```php\npublic function execute(\n    string $sqlStatement, \n    mixed $placeholders = null, \n    mixed $dataTypes = null\n): bool\n</code></pre> Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server does not return any rows</p> <p><pre><code>public function fetchAll(\n    string $sqlQuery, \n    int $fetchMode = 2, \n    mixed $placeholders = null\n): array\n</code></pre> Dumps the complete result of a query into an array</p> <p><pre><code>public function fetchColumn(\n    string $sqlQuery, \n    array $placeholders = [], \n    mixed $column = 0\n): string | bool\n</code></pre> Returns the n'th field of first row in a SQL query result</p> <pre><code>$invoicesCount = $connection\n    -&gt;fetchColumn('SELECT count(*) FROM co_invoices')\nprint_r($invoicesCount)\n\n$invoice = $connection-&gt;fetchColumn(\n    'SELECT inv_id, inv_title \n    FROM co_invoices\n    ORDER BY inv_created_at DESC',\n    1\n)\nprint_r($invoice)\n</code></pre> <p><pre><code>public function fetchOne(\n    string $sqlQuery, \n    int $fetchMode = 2, \n    mixed $placeholders = null\n): array\n</code></pre> Returns the first row in a SQL query result</p> <p><pre><code>public function forUpdate(\n    string $sqlQuery\n): string\n</code></pre> Returns a SQL modified with a FOR UPDATE clause</p> <p><pre><code>public function getColumnDefinition(\n    ColumnInterface $column\n): string\n</code></pre> Returns the SQL column definition from a column</p> <p><pre><code>public function getColumnList(\n    mixed $columnList\n): string\n</code></pre> Gets a list of columns</p> <p><pre><code>public function getConnectionId(): string\n</code></pre> Gets the active connection unique identifier</p> <p><pre><code>public function getDescriptor(): array\n</code></pre> Return descriptor used to connect to the active database</p> <p><pre><code>public function getDialect(): DialectInterface\n</code></pre> Returns internal dialect instance</p> <p><pre><code>public function getDialectType(): string\n</code></pre> Returns the name of the dialect used</p> <p><pre><code>public function getDefaultIdValue(): RawValue\n</code></pre> Return the default identity value to insert in an identity column</p> <p><pre><code>public function getInternalHandler(): \\PDO\n</code></pre> Return internal PDO handler</p> <p><pre><code>public function getNestedTransactionSavepointName(): string\n</code></pre> Returns the savepoint name to use for nested transactions</p> <p><pre><code>public function getRealSQLStatement(): string\n</code></pre> Active SQL statement in the object without replace bound parameters</p> <p><pre><code>public function getSQLStatement(): string\n</code></pre> Active SQL statement in the object</p> <p><pre><code>public function getSQLBindTypes(): array\n</code></pre> Active SQL statement in the object</p> <p><pre><code>public function getSQLVariables(): array\n</code></pre> Active SQL statement in the object</p> <p><pre><code>public function getType(): string\n</code></pre> Returns type of database system the adapter is used for</p> <p><pre><code>public function insert(\n    string $table, \n    array $values, \n    mixed $fields = null, \n    mixed $dataTypes = null\n): bool\n</code></pre> Inserts data into a table using custom RDBMS SQL syntax</p> <p><pre><code>public function insertAsDict(\n    string $table, \n    mixed $data, \n    mixed $dataTypes = null\n): bool\n</code></pre> Inserts data into a table using custom RBDM SQL syntax</p> <pre><code>// Inserting a new invoice\n$success = $connection-&gt;insertAsDict(\n    'co_invoices',\n    [\n        'inv_cst_id' =&gt; 1,\n        'inv_title'  =&gt; 'Invoice for ACME Inc.',\n    ]\n)\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `co_invoices` \n    ( `inv_cst_id`, `inv_title` ) \nVALUES \n    ( 1, 'Invoice for ACME Inc.' )\n</code></pre> <p><pre><code>public function isNestedTransactionsWithSavepoints(): bool\n</code></pre> Returns if nested transactions should use savepoints</p> <p><pre><code>public function isUnderTransaction(): bool\n</code></pre> Checks whether connection is under database transaction</p> <p><pre><code>public function lastInsertId(\n    mixed $sequenceName = null\n)\n</code></pre> Returns insert id for the auto_increment column inserted in the last SQL statement</p> <p><pre><code>public function limit(\n    string $sqlQuery, \n    int $number\n): string\n</code></pre> Appends a LIMIT clause to sqlQuery argument</p> <p><pre><code>public function listTables(\n    string $schemaName = null\n): array\n</code></pre> List all tables on a database</p> <p><pre><code>public function listViews(\n    string $schemaName = null\n): array\n</code></pre> List all views on a database</p> <p><pre><code>public function modifyColumn(\n    string $tableName, \n    string $schemaName, \n    ColumnInterface $column, \n    ColumnInterface $currentColumn = null\n): bool\n</code></pre> Modifies a table column based on a definition</p> <p><pre><code>public function query(\n    string $sqlStatement, \n    mixed $placeholders = null, \n    mixed $dataTypes = null\n): ResultInterface | bool\n</code></pre> Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server returns rows</p> <p><pre><code>public function releaseSavepoint(\n    string $name\n): bool\n</code></pre> Releases given savepoint</p> <p><pre><code>public function rollback(\n    bool $nesting = true\n): bool\n</code></pre> Rollbacks the active transaction in the connection</p> <p><pre><code>public function rollbackSavepoint(\n    string $name\n): bool\n</code></pre> Rollbacks given savepoint</p> <p><pre><code>public function sharedLock(\n    string $sqlQuery\n): string\n</code></pre> Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <p><pre><code>public function setNestedTransactionsWithSavepoints(\n    bool $nestedTransactionsWithSavepoints\n): AdapterInterface\n</code></pre> Set if nested transactions should use savepoints</p> <p><pre><code>public function supportSequences(): bool\n</code></pre> Check whether the database system requires a sequence to produce auto-numeric values</p> <p><pre><code>public function tableExists(\n    string $tableName, \n    string $schemaName = null\n): bool\n</code></pre> Generates SQL checking for the existence of a schema.table</p> <p><pre><code>public function tableOptions(\n    string $tableName, \n    string $schemaName = null\n): array\n</code></pre> Gets creation options from a table</p> <p><pre><code>public function update(\n    string $table, \n    mixed $fields, \n    mixed $values, \n    mixed $whereCondition = null, \n    mixed $dataTypes = null\n): bool\n</code></pre> Updates data on a table using custom RDBMS SQL syntax</p> <p><pre><code>public function updateAsDict(\n    string $table, \n    mixed $data, \n    mixed $whereCondition = null, \n    mixed $dataTypes = null\n): bool\n</code></pre> Updates data on a table using custom RBDM SQL syntax. Another, more convenient syntax</p> <pre><code>// Updating existing invoice\n$success = $connection-&gt;updateAsDict(\n    'co_invoices',\n    [\n        'inv_title' =&gt; 'Invoice for ACME Inc.',\n    ],\n    'inv_id = 1'\n)\n\n// Next SQL sentence is sent to the database system\nUPDATE `co_invoices` \nSET    `inv_title` = 'Invoice for ACME Inc.' \nWHERE   inv_id = 1\n</code></pre> <p><pre><code>public function useExplicitIdValue(): bool\n</code></pre> Check whether the database system requires an explicit value for identity columns</p> <p><pre><code>public function viewExists(\n    string $viewName, \n    string $schemaName = null\n): bool\n</code></pre> Generates SQL checking for the existence of a schema view</p>"},{"location":"db-layer/#custom","title":"Custom","text":"<p>The Phalcon\\Db\\AdapterInterface interface must be implemented in order to create your own database adapters or extend the existing ones. Additionally you can extend the Phalcon\\Db\\AbstractAdapter that already has some implementation for your custom adapter. </p>"},{"location":"db-layer/#escaping","title":"Escaping","text":"<p>Escaping identifiers is enabled by default. However, if you need to disable this feature, you can do so using the <code>setup()</code> method:</p> <pre><code>&lt;?php\n\n\\Phalcon\\Db::setup(\n    [\n        'escapeIdentifiers' =&gt; false,\n    ]\n);\n</code></pre>"},{"location":"db-layer/#factory","title":"Factory","text":""},{"location":"db-layer/#newinstance","title":"<code>newInstance()</code>","text":"<p>Although all adapter classes can be instantiated using the <code>new</code> keyword, Phalcon offers the Phalcon\\Db\\Adapter\\PdoFactory class, so that you can easily instantiate PDO adapter instances. All the above adapters are registered in the factory and lazy loaded when called. The factory allows you to register additional (custom) adapter classes. The only thing to consider is choosing the name of the adapter in comparison to the existing ones. If you define the same name, you will overwrite the built-in one. The objects are cached in the factory so if you call the <code>newInstance()</code> method with the same parameters during the same request, you will get the same object back.</p> <p>The reserved names are: - <code>mysql</code> - Phalcon\\Db\\Adapter\\Pdo\\Mysql - <code>postgresql</code> - Phalcon\\Db\\Adapter\\Pdo\\Postgresql - <code>sqlite</code> - Phalcon\\Db\\Adapter\\Pdo\\Sqlite</p> <p>The example below shows how you can create a MySQL adapter with the <code>new</code> keyword or the factory:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Pdo\\MySQL;\n\n$connection = new MySQL(\n    [\n        'host'     =&gt; 'localhost',\n        'username' =&gt; 'root',\n        'password' =&gt; '',\n        'dbname'   =&gt; 'test',\n    ]\n);\n</code></pre> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\PdoFactory;\n\n$factory    = new PdoFactory();\n$connection = $factory\n    -&gt;newInstance(\n        'mysql',\n        [\n            'host'     =&gt; 'localhost',\n            'username' =&gt; 'root',\n            'password' =&gt; '',\n            'dbname'   =&gt; 'test',\n        ]\n    )\n;\n</code></pre>"},{"location":"db-layer/#load","title":"<code>load()</code>","text":"<p>You can also use the <code>load()</code> method to create an adapter using a configuration object or an array. The example below uses a <code>ini</code> file to instantiate the database connection using <code>load()</code>.</p> <pre><code>[database]\nhost = TEST_DB_MYSQL_HOST\nusername = TEST_DB_MYSQL_USER\npassword = TEST_DB_MYSQL_PASSWD\ndbname = TEST_DB_MYSQL_NAME\nport = TEST_DB_MYSQL_PORT\ncharset = TEST_DB_MYSQL_CHARSET\nadapter = mysql\n</code></pre> <pre><code>&lt;?php\n\nuse Phalcon\\Config\\Adapter\\Ini;\nuse Phalcon\\Di;\nuse Phalcon\\Db\\Adapter\\PdoFactory;\n\n$container = new Di();\n\n$config = new Ini('config.ini');\n\n$container-&gt;set('config', $config);\n\n$container-&gt;set(\n    'db', \n    function () {\n        return (new PdoFactory())-&gt;load($this-&gt;config-&gt;database);\n    }\n);\n</code></pre>"},{"location":"db-layer/#dialects","title":"Dialects","text":""},{"location":"db-layer/#built-in","title":"Built In","text":"<p>Phalcon encapsulates the specific details of each database engine in dialects. Phalcon\\Db\\Dialect provides common functions and SQL generator to the adapters.</p> Class Description Phalcon\\Db\\Dialect\\Mysql SQL specific dialect for MySQL database system Phalcon\\Db\\Dialect\\Postgresql SQL specific dialect for PostgreSQL database system Phalcon\\Db\\Dialect\\Sqlite SQL specific dialect for SQLite database system"},{"location":"db-layer/#custom_1","title":"Custom","text":"<p>The Phalcon\\Db\\DialectInterface interface must be implemented in order to create your own database dialects or extend the existing ones. You can also enhance your current dialect by adding more commands/methods that PHQL will understand. For instance when using the MySQL adapter, you might want to allow PHQL to recognize the <code>MATCH ... AGAINST ...</code> syntax. We associate that syntax with <code>MATCH_AGAINST</code> </p> <p>We instantiate the dialect. We add the custom function so that PHQL understands what to do when it finds it during the parsing process. In the example below, we register a new custom function called <code>MATCH_AGAINST</code>. After that all we have to do is add the customized dialect object to our connection.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Dialect\\MySQL as SqlDialect;\nuse Phalcon\\Db\\Adapter\\Pdo\\MySQL as Connection;\n\n$dialect = new SqlDialect();\n\n$dialect-&gt;registerCustomFunction(\n    'MATCH_AGAINST',\n    function ($dialect, $expression) {\n        $arguments = $expression['arguments'];\n        return sprintf(\n            ' MATCH (%s) AGAINST (%s)',\n            $dialect-&gt;getSqlExpression($arguments[0]),\n            $dialect-&gt;getSqlExpression($arguments[1])\n         );\n    }\n);\n\n$connection = new Connection(\n    [\n        'host'          =&gt; 'localhost',\n        'username'      =&gt; 'root',\n        'password'      =&gt; '',\n        'dbname'        =&gt; 'test',\n        'dialectClass'  =&gt; $dialect,\n    ]\n);\n</code></pre> <p>We can now use this new function in PHQL, which in turn will translate it to the proper SQL syntax:</p> <pre><code>&lt;?php\n\n$phql = '\n  SELECT *\n  FROM   Invoices\n  WHERE  MATCH_AGAINST(title, :pattern:)';\n\n$posts = $modelsManager-&gt;executeQuery(\n    $phql,\n    [\n        'pattern' =&gt; $pattern,\n    ]\n);\n</code></pre> <p>NOTE</p> <p>There are more examples on how to extend PHQL in the PHQL document.</p>"},{"location":"db-layer/#connect","title":"Connect","text":"<p>To create a connection it's necessary instantiate the adapter class. It only requires an array with the connection parameters. The example below shows how to create a connection passing both required and optional parameters:</p> Adapter Parameter Status <code>MySQL</code> <code>host</code> required <code>username</code> required <code>password</code> required <code>dbname</code> required <code>persistent</code> optional <code>PostgreSQL</code> <code>host</code> required <code>username</code> required <code>password</code> required <code>dbname</code> required <code>schema</code> optional <code>Sqlite</code> <code>dbname</code> required <p>Connecting to each adapter can be achieved by either the factory as demonstrated above or by passing the relevant options to the constructor of each class.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\nuse Phalcon\\Db\\Adapter\\Pdo\\Postgresql;\nuse Phalcon\\Db\\Adapter\\Pdo\\Sqlite;\n\n$config = [\n    'host'     =&gt; '127.0.0.1',\n    'username' =&gt; 'mike',\n    'password' =&gt; 'sigma',\n    'dbname'   =&gt; 'test_db',\n];\n\n$connection = new Mysql($config);\n\n$config = [\n    'host'     =&gt; 'localhost',\n    'username' =&gt; 'postgres',\n    'password' =&gt; 'secret1',\n    'dbname'   =&gt; 'template',\n];\n\n$connection = new Postgresql($config);\n\n$config = [\n    'dbname' =&gt; '/path/to/database.db',\n];\n$connection = new Sqlite($config);\n</code></pre> <p>Additional PDO options</p> <p>You can set PDO options at connection time by passing the parameters <code>options</code>:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n$connection = new Mysql(\n    [\n        'host'     =&gt; 'localhost',\n        'username' =&gt; 'root',\n        'password' =&gt; 'sigma',\n        'dbname'   =&gt; 'test_db',\n        'options'  =&gt; [\n            PDO::MYSQL_ATTR_INIT_COMMAND =&gt; \"SET NAMES 'UTF8'\",\n            PDO::ATTR_CASE               =&gt; PDO::CASE_LOWER,\n        ]\n    ]\n);\n</code></pre>"},{"location":"db-layer/#create","title":"Create","text":"<p>To insert a row in the database, you can use raw SQL or use the methods present by the adapter:</p> <p><pre><code>&lt;?php\n\n$sql     = \"\nINSERT INTO `co_invoices` \n    ( `inv_cst_id`, `inv_title` ) \nVALUES \n    ( 1, 'Invoice for ACME Inc.' )\n\";\n$success = $connection-&gt;execute($sql);\n</code></pre> Raw SQL</p> <p><pre><code>&lt;?php\n\n$sql     = '\nINSERT INTO `co_invoices` \n    ( `inv_cst_id`, `inv_title` ) \nVALUES \n    ( ?, ? )\n';\n$success = $connection-&gt;execute(\n    $sql,\n    [\n        1,\n        'Invoice for ACME Inc.',\n    ]\n);\n</code></pre> Placeholders</p> <p><pre><code>&lt;?php\n\n$success = $connection-&gt;insert(\n    'co_invoices',\n    [\n        1,\n        'Invoice for ACME Inc.',\n    ],\n    [\n        'inv_cst_id',\n        'inv_title', \n    ]\n);\n</code></pre> Dynamic generation</p> <p><pre><code>&lt;?php\n\n$success = $connection-&gt;insertAsDict(\n    'co_invoices',\n    [\n        'inv_cst_id' =&gt; 1,\n        'inv_title'  =&gt; 'Invoice for ACME Inc.',\n    ]\n);\n</code></pre> Dynamic generation (alternative syntax)</p>"},{"location":"db-layer/#update","title":"Update","text":"<p>To update a row in the database, you can use raw SQL or use the methods present by the adapter:</p> <p><pre><code>&lt;?php\n\n$sql     = \"\nUPDATE \n    `co_invoices` \nSET \n    `inv_cst_id`= 1, \n    `inv_title` = 'Invoice for ACME Inc.'\nWHERE\n    `inv_id` = 4\n\";\n$success = $connection-&gt;execute($sql);\n</code></pre> Raw SQL</p> <p><pre><code>&lt;?php\n\n$sql     = \"\nUPDATE \n    `co_invoices` \nSET \n    `inv_cst_id`= ?, \n    `inv_title` = ?\nWHERE\n    `inv_id` = ?\n\";\n$success = $connection-&gt;execute(\n    $sql,\n    [\n        1,\n        'Invoice for ACME Inc.',\n        4,\n    ]\n);\n</code></pre> Placeholders</p> <p><pre><code>&lt;?php\n\n$success = $connection-&gt;update(\n    'co_invoices',\n    [\n        'inv_cst_id',\n        'inv_title',\n    ],\n    [\n        1,\n        'Invoice for ACME Inc.',\n    ],\n    'inv_id = 4'\n);\n</code></pre> Dynamic generation </p> <p>NOTE</p> <p>With the syntax above, the variables for the <code>where</code> part of the <code>update</code> (<code>inv_id = 4</code>) is not escaped!</p> <p><pre><code>&lt;?php\n\n$success = $connection-&gt;updateAsDict(\n    'co_invoices',\n    [\n        'inv_cst_id' =&gt; 1,\n        'inv_title'  =&gt; 'Invoice for ACME Inc.',\n    ],\n    'inv_id = 4'\n);\n</code></pre> Dynamic generation (alternative syntax)</p> <p>NOTE</p> <p>With the syntax above, the variables for the <code>where</code> part of the <code>update</code> (<code>inv_id = 4</code>) is not escaped!</p> <p><pre><code>&lt;?php\n\n$success = $connection-&gt;update(\n    'co_invoices',\n    [\n        'inv_cst_id',\n        'inv_title',\n    ],\n    [\n        1,\n        'Invoice for ACME Inc.',\n    ],\n    [\n        'conditions' =&gt; 'id = ?',\n        'bind'       =&gt; [\n            4\n        ],\n        'bindTypes'  =&gt; [\n            \\PDO::PARAM_INT\n        ],\n    ]\n);\n</code></pre> With conditionals escaped</p> <p><pre><code>&lt;?php\n\n$success = $connection-&gt;updateAsDict(\n    'co_invoices',\n    [\n        'inv_cst_id' =&gt; 1,\n        'inv_title'  =&gt; 'Invoice for ACME Inc.',\n    ],\n    [\n        'conditions' =&gt; 'id = ?',\n        'bind'       =&gt; [\n            4\n        ],\n        'bindTypes'  =&gt; [\n            \\PDO::PARAM_INT\n        ],\n    ]\n);\n</code></pre> With conditionals escaped (alternative syntax)</p>"},{"location":"db-layer/#delete","title":"Delete","text":"<p><pre><code>&lt;?php\n\n$sql     = '\nDELETE \n   `co_invoices` \nWHERE\n   `inv_id` = 4\n';\n$success = $connection-&gt;execute($sql);\n</code></pre> Raw SQL</p> <p><pre><code>&lt;?php\n\n$sql     = '\nDELETE \n   `co_invoices` \nWHERE\n   `inv_id` = ?\n';\n$success = $connection-&gt;execute(\n    $sql, \n    [\n        4\n    ]\n);\n</code></pre> Placeholders</p> <p><pre><code>&lt;?php\n\n$success = $connection-&gt;delete(\n    'co_invoices',\n    'inv_id = ?',\n    [\n        4,\n    ]\n);\n</code></pre> Dynamic generation</p>"},{"location":"db-layer/#parameters","title":"Parameters","text":"<p>The <code>Phalcon\\Db</code> adapters provide several methods to query rows from tables. The specific SQL syntax of the target database engine is required in this case:</p> <pre><code>&lt;?php\n\n$sql = '\nSELECT \n    inv_id,\n    inv_title\nFROM \n    co_invoices\nORDER BY \n    inv_created_at\n';\n$result = $connection-&gt;query($sql);\nwhile ($invoice = $result-&gt;fetch()) {\n   echo $invoice['inv_title'];\n}\n\n$invoices = $connection-&gt;fetchAll($sql);\nforeach ($invoices as $invoice) {\n   echo $invoice['inv_title'];\n}\n\n$invoice = $connection-&gt;fetchOne($sql);\n</code></pre> <p>By default these calls create arrays with both associative and numeric indexes. You can change this behavior by using <code>Phalcon\\Db\\Result::setFetchMode()</code>. This method receives a constant, defining which kind of index is required.</p> Constant Description <code>Phalcon\\Db\\Enum::FETCH_NUM</code> Return an array with numeric indexes <code>Phalcon\\Db\\Enum::FETCH_ASSOC</code> Return an array with associative indexes <code>Phalcon\\Db\\Enum::FETCH_BOTH</code> Return an array with both associative and numeric indexes <code>Phalcon\\Db\\Enum::FETCH_OBJ</code> Return an object instead of an array <pre><code>&lt;?php\n\n$sql = '\nSELECT \n    inv_id,\n    inv_title\nFROM \n    co_invoices\nORDER BY \n    inv_created_at\n';\n$result = $connection-&gt;query($sql);\n\n$result-&gt;setFetchMode(\n    Phalcon\\Db\\Enum::FETCH_NUM\n);\n\nwhile ($invoice = $result-&gt;fetch()) {\n   echo $invoice[0];\n}\n</code></pre> <p>The <code>query()</code> method returns an instance of Phalcon\\Db\\Result\\Pdo. These objects encapsulate all the functionality related to the returned resultset i.e. traversing, seeking specific records, count etc.</p> <pre><code>&lt;?php\n\n$sql = '\nSELECT \n    inv_id,\n    inv_title\nFROM \n    co_invoices\nORDER BY \n    inv_created_at\n';\n$result = $connection-&gt;query($sql);\n\nwhile ($invoice = $result-&gt;fetch()) {\n   echo $invoice['name'];\n}\n\n$result-&gt;seek(2);\n\n$invoice = $result-&gt;fetch();\n\necho $result-&gt;numRows();\n</code></pre>"},{"location":"db-layer/#binding","title":"Binding","text":"<p>Bound parameters are also supported. Although there is a minimal performance impact by using bound parameters, you are highly encouraged to use this methodology so as to eliminate the possibility of your code being subject to SQL injection attacks. Both string and positional placeholders are supported. </p> <p><pre><code>&lt;?php\n\n$sql = '\nSELECT \n    inv_id,\n    inv_title\nFROM \n    co_invoices\nWHERE\n    inv_cst_id = ?\nORDER BY \n    inv_created_at\n';\n\n$result = $connection-&gt;query(\n    $sql,\n    [\n        4,\n    ]\n);\n</code></pre> Binding with numeric placeholders</p> <p><pre><code>&lt;?php\n\n$sql     = \"\nUPDATE \n    `co_invoices` \nSET \n    `inv_cst_id`= :cstId, \n    `inv_title` = :title\nWHERE\n    `inv_id` = :id\n\";\n$success = $connection-&gt;query(\n    $sql,\n    [\n        'cstId' =&gt; 1,\n        'title' =&gt; 'Invoice for ACME Inc.',\n        'id'    =&gt; 4,\n    ]\n);\n</code></pre> Binding with named placeholders</p> <p>When using numeric placeholders, you will need to define them as integers i.e. <code>1</code> or <code>2</code>. In this case <code>'1'</code> or <code>'2'</code> are considered strings and not numbers, so the placeholder could not be successfully replaced. With any adapter, data are automatically escaped using PDO Quote. This function takes into account the connection charset, so its recommended to define the correct charset in the connection parameters or in your database server configuration, as a wrong charset will produce undesired effects when storing or retrieving data.</p> <p>Also, you can pass your parameters directly to the <code>execute</code> or <code>query</code> methods. In this case bound parameters are directly passed to PDO:</p> <p><pre><code>&lt;?php\n\n$sql = '\nSELECT \n    inv_id,\n    inv_title\nFROM \n    co_invoices\nWHERE\n    inv_cst_id = ?\nORDER BY \n    inv_created_at\n';\n\n$result = $connection-&gt;query(\n    $sql,\n    [\n        1 =&gt; 4,\n    ]\n);\n</code></pre> Binding with PDO placeholders</p>"},{"location":"db-layer/#typed","title":"Typed","text":"<p>Placeholders allowed you to bind parameters to avoid SQL injections:</p> <pre><code>&lt;?php\n\n$phql = '\nSELECT \n    inv_id,\n    inv_title\nFROM \n    Invoices\nWHERE\n    inv_cst_id = :customerId:\nORDER BY \n    inv_created_at\n';\n\n$invoices = $this\n    -&gt;modelsManager\n    -&gt;executeQuery(\n        $phql,\n        [\n            'customerId' =&gt; 4,\n        ]\n    )\n;\n</code></pre> <p>However, some database systems require additional actions when using placeholders such as specifying the type of the bound parameter:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Column;\n\n// ...\n\n$phql = '\nSELECT \n    inv_id,\n    inv_title\nFROM \n    Invoices\nWHERE\n    inv_cst_id = :customerId:\nORDER BY \n    inv_created_at\n';\n\n$invoices = $this\n    -&gt;modelsManager\n    -&gt;executeQuery(\n        $phql,\n        [\n            'customerId' =&gt; 4,\n        ],\n        Column::BIND_PARAM_INT\n    )\n;\n</code></pre> <p>You can use typed placeholders in your parameters, instead of specifying the bind type in <code>executeQuery()</code>:</p> <pre><code>&lt;?php\n\n$phql = '\nSELECT \n    inv_id,\n    inv_title\nFROM \n    Invoices\nWHERE\n    inv_cst_id = {customerId:int}\nORDER BY \n    inv_created_at\n';\n\n$invoices = $this\n    -&gt;modelsManager\n    -&gt;executeQuery(\n        $phql,\n        [\n            'customerId' =&gt; 4,\n        ],\n    )\n;\n\n$phql = '\nSELECT \n    inv_id,\n    inv_title\nFROM \n    Invoices\nWHERE\n    inv_title &lt;&gt; {title:str}\nORDER BY \n    inv_created_at\n';\n\n$invoices = $this\n    -&gt;modelsManager\n    -&gt;executeQuery(\n        $phql,\n        [\n            'title' =&gt; 'Invoice for ACME Inc',\n        ],\n    )\n;\n</code></pre> <p>You can also omit the type if you do not need to specify it:</p> <pre><code>&lt;?php\n\n$phql = '\nSELECT \n    inv_id,\n    inv_title\nFROM \n    Invoices\nWHERE\n    inv_cst_id = {customerId}\nORDER BY \n    inv_created_at\n';\n\n$invoices = $this\n    -&gt;modelsManager\n    -&gt;executeQuery(\n        $phql,\n        [\n            'customerId' =&gt; 4,\n        ],\n    )\n;\n</code></pre> <p>Typed placeholders are also more powerful, since we can now bind a static array without having to pass each element independently as a placeholder:</p> <pre><code>&lt;?php\n\n$phql = '\nSELECT \n    inv_id,\n    inv_title\nFROM \n    Invoices\nWHERE\n    inv_cst_id IN ({ids:array})\nORDER BY \n    inv_created_at\n';\n\n$invoices = $this\n    -&gt;modelsManager\n    -&gt;executeQuery(\n        $phql,\n        [\n            'ids' =&gt; [1, 3, 5],\n        ],\n    )\n;\n</code></pre> <p>The following types are available:</p> Bind Type Bind Type Constant Example str <code>Column::BIND_PARAM_STR</code> <code>{name:str}</code> int <code>Column::BIND_PARAM_INT</code> <code>{number:int}</code> double <code>Column::BIND_PARAM_DECIMAL</code> <code>{price:double}</code> bool <code>Column::BIND_PARAM_BOOL</code> <code>{enabled:bool}</code> blob <code>Column::BIND_PARAM_BLOB</code> <code>{image:blob}</code> null <code>Column::BIND_PARAM_NULL</code> <code>{exists:null}</code> array Array of <code>Column::BIND_PARAM_STR</code> <code>{codes:array}</code> array-str Array of <code>Column::BIND_PARAM_STR</code> <code>{names:array-str}</code> array-int Array of <code>Column::BIND_PARAM_INT</code> <code>{flags:array-int}</code>"},{"location":"db-layer/#cast","title":"Cast","text":"<p>By default, bound parameters are not casted in the PHP userland to the specified bind types. This option allows you to make Phalcon cast values before binding them with PDO. A common scenario is when passing a string to a <code>LIMIT</code>/<code>OFFSET</code> placeholder:</p> <pre><code>&lt;?php\n\n$number = '100';\n$phql   = '\nSELECT \n    inv_id,\n    inv_title\nFROM \n    Invoices\nLIMIT \n    {number:int}\n';\n\n$invoices = $modelsManager-&gt;executeQuery(\n    $phql,\n    [\n        'number' =&gt; $number,\n    ]\n);\n</code></pre> <p>This causes the following exception:</p> <pre><code>Fatal error: Uncaught exception 'PDOException' with message \n'SQLSTATE[42000]: Syntax error or access violation: 1064. \nYou have an error in your SQL syntax; check the manual that \ncorresponds to your MySQL server version for the right\nsyntax to use near ''100'' at line 1' in ....\n</code></pre> <p>This happens because <code>'100'</code> is a string variable. It is easily fixable by casting the value to integer first:</p> <pre><code>&lt;?php\n\n$number = '100';\n$phql   = '\nSELECT \n    inv_id,\n    inv_title\nFROM \n    Invoices\nLIMIT \n    {number:int}\n';\n\n$invoices = $modelsManager-&gt;executeQuery(\n    $phql,\n    [\n        'number' =&gt; (int) $number,\n    ]\n);\n</code></pre> <p>However this solution requires that the developer pays special attention about how bound parameters are passed and their types. To make this task easier and avoid unexpected exceptions you can instruct Phalcon to do this casting for you:</p> <pre><code>&lt;?php\n\n\\Phalcon\\Db::setup(\n    [\n        'forceCasting' =&gt; true,\n    ]\n);\n</code></pre> <p>The following actions are performed according to the bind type specified:</p> Bind Type Action <code>Column::BIND_PARAM_STR</code> Cast the value as a native PHP string <code>Column::BIND_PARAM_INT</code> Cast the value as a native PHP integer <code>Column::BIND_PARAM_BOOL</code> Cast the value as a native PHP boolean <code>Column::BIND_PARAM_DECIMAL</code> Cast the value as a native PHP double"},{"location":"db-layer/#hydration","title":"Hydration","text":"<p>Values returned from the database system are always represented as string values by PDO, no matter if the value belongs to a <code>numeric</code> or <code>boolean</code> type column. This happens because some column types cannot be represented with its corresponding PHP native types due to their size limitations. For instance, a <code>BIGINT</code> in MySQL can store large integer numbers that cannot be represented as a 32bit integer in PHP. Because of that, PDO and the ORM by default, make the safe decision of leaving all values as strings.</p> <p>You can set up the ORM to automatically cast those types to their corresponding PHP native types:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nModel::setup(\n    [\n        'castOnHydrate' =&gt; true,\n    ]\n);\n</code></pre> <p>This way you can use strict operators or make assumptions about the type of variables:</p> <pre><code>&lt;?php\n\n$invoice = Invoices::findFirst();\nif (11 === $invoice-&gt;inv_id) {\n    echo $invoice-&gt;inv_title;\n}\n</code></pre> <p>NOTE</p> <p>If you wish to return the primary key when using the <code>lastInsertId</code> as an <code>integer</code>, you can use the <code>castLastInsertIdToInt =&gt; true</code> feature on the model.</p>"},{"location":"db-layer/#transactions","title":"Transactions","text":"<p>Working with transactions is supported the same way as with with PDO. Using transactions increases performance in most database systems and also ensures data integrity:</p> <pre><code>&lt;?php\n\ntry {\n    $connection-&gt;begin();\n\n    $connection-&gt;execute('DELETE `co_invoices` WHERE `inv_id` = 1');\n    $connection-&gt;execute('DELETE `co_invoices` WHERE `inv_id` = 2');\n    $connection-&gt;execute('DELETE `co_invoices` WHERE `inv_id` = 3');\n\n    $connection-&gt;commit();\n} catch (Exception $e) {\n    $connection-&gt;rollback();\n}\n</code></pre> <p>In addition to standard transactions, the adapters offer provides built-in support for nested transactions, if the database system used supports them. When you call <code>begin()</code> for a second time a nested transaction is created:</p> <pre><code>&lt;?php\n\ntry {\n    $connection-&gt;begin();\n\n    $connection-&gt;execute('DELETE `co_invoices` WHERE `inv_id` = 1');\n\n    try {\n        $connection-&gt;begin();\n\n        $connection-&gt;execute('DELETE `co_invoices` WHERE `inv_id` = 2');\n        $connection-&gt;execute('DELETE `co_invoices` WHERE `inv_id` = 3');\n\n        $connection-&gt;commit();\n    } catch (Exception $e) {\n        $connection-&gt;rollback();\n    }\n\n    $connection-&gt;execute('DELETE `co_invoices` WHERE `inv_id` = 4');\n\n    $connection-&gt;commit();\n} catch (Exception $e) {\n    // An exception has occurred rollback the transaction\n    $connection-&gt;rollback();\n}\n</code></pre>"},{"location":"db-layer/#events","title":"Events","text":"<p>The adapters also send events to an Events Manager if it is present. If an event returns <code>false</code> it can stop the current operation. The following events are supported:</p> Event Name Triggered Can stop <code>afterQuery</code> After a query is executed No <code>beforeQuery</code> Before a query is executed Yes <code>beginTransaction</code> Before a transaction starts No <code>createSavepoint</code> Before a savepoint is created No <code>commitTransaction</code> Before a transaction is committed No <code>releaseSavepoint</code> Before a savepoint is released No <code>rollbackTransaction</code> Before a transaction is rolled back No <code>rollbackSavepoint</code> Before a savepoint is rolled back No <p>If you bind an Events Manager to the database connection, all the events with the type <code>db</code> will be enabled and fired for the relevant listeners.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n$manager = new Manager();\n\n$manager-&gt;attach('db', $listener);\n\n$connection = new Mysql(\n    [\n        'host'     =&gt; 'localhost',\n        'username' =&gt; 'root',\n        'password' =&gt; 'secret',\n        'dbname'   =&gt; 'tutorial',\n    ]\n);\n\n$connection-&gt;setEventsManager($manager);\n</code></pre> <p>You can use the power of these events to shield your application from dangerous SQL operations. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\n\n$manager-&gt;attach(\n    'db:beforeQuery',\n    function (Event $event, $connection) {\n        $sql = $connection-&gt;getSQLStatement();\n\n        if (true === preg_match('/DROP|ALTER/i', $sql)) {\n            return false;\n        }\n\n        return true;\n    }\n);\n</code></pre>"},{"location":"db-layer/#profiling","title":"Profiling","text":"<p>The adapter includes the Phalcon\\Db\\Profiler component, that is used to analyze the performance of database operations so as to diagnose performance problems and discover bottlenecks.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Db\\Profiler;\n\n$manager  = new Manager();\n$profiler = new Profiler();\n\n$manager-&gt;attach(\n    'db',\n    function (Event $event, $connection) use ($profiler) {\n        if ($event-&gt;getType() === 'beforeQuery') {\n            $sql = $connection-&gt;getSQLStatement();\n            $profiler-&gt;startProfile($sql);\n        }\n\n        if ($event-&gt;getType() === 'afterQuery') {\n            $profiler-&gt;stopProfile();\n        }\n    }\n);\n\n$connection-&gt;setEventsManager($manager);\n\n$sql = '\nSELECT \n    inv_id,\n    inv_title\nFROM \n    co_invoices\n';\n$connection-&gt;query($sql);\n\n$profile = $profiler-&gt;getLastProfile();\n\necho 'SQL Statement: ', $profile-&gt;getSQLStatement(), PHP_EOL,\n     'Start Time: ', $profile-&gt;getInitialTime(), PHP_EOL,\n     'Final Time: ', $profile-&gt;getFinalTime(), PHP_EOL,\n     'Total Elapsed Time: ', $profile-&gt;getTotalElapsedSeconds(), PHP_EOL;\n</code></pre> <p>You can also create your own profile class based on the Phalcon\\Db\\Profiler class to record real time statistics of the statements that are sent to the database:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Db\\Profiler;\nuse Phalcon\\Db\\Profiler\\Item;\n\nclass DbProfiler extends Profiler\n{\n    public function beforeStartProfile(Item $profile)\n    {\n        echo $profile-&gt;getSQLStatement();\n    }\n\n    public function afterEndProfile(Item $profile)\n    {\n        echo $profile-&gt;getTotalElapsedSeconds();\n    }\n}\n\n$manager  = new Manager();\n$listener = new DbProfiler();\n\n$manager-&gt;attach('db', $listener);\n</code></pre>"},{"location":"db-layer/#logging","title":"Logging","text":"<p>Using high-level abstraction components such as the <code>Phalcon\\Db</code> adapters to access the database, makes it difficult to understand which statements are sent to the database system. The Phalcon\\Logger component interacts with the <code>Phalcon\\Db</code> adapters offering logging capabilities on the database abstraction level.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\n\n$adapter = new Stream('/storage/logs/queries.log');\n$logger  = new Logger(\n    'messages',\n    [\n        'main' =&gt; $adapter,\n    ]\n);\n\n$manager = new Manager();\n\n$manager-&gt;attach(\n    'db:beforeQuery',\n    function (Event $event, $connection) use ($logger) {\n        $sql = $connection-&gt;getSQLStatement();\n\n        $logger-&gt;info(\n            sprintf(\n                '%s - [%s]',\n                $connection-&gt;getSQLStatement(),\n                json_encode($connection-&gt;getSQLVariables())\n            )\n        );\n    }\n);\n\n$connection-&gt;setEventsManager($manager);\n\n$connection-&gt;insert(\n    'products',\n    [\n        'Hot pepper',\n        3.50,\n    ],\n    [\n        'name',\n        'price',\n    ]\n);\n$connection-&gt;insert(\n    'co_invoices',\n    [\n        1,\n        'Invoice for ACME Inc.',\n    ],\n    [\n        'inv_cst_id',\n        'inv_title', \n    ]\n);\n</code></pre> <p>As above, the file <code>/storage/logs/queries.log</code> will contain something like this:</p> <pre><code>[2019-12-25 01:02:03][INFO] INSERT INTO `co_invoices` \n    SET (`inv_cst_id`, `inv_title`) \n    VALUES (1, 'Invoice for ACME Inc.')\n</code></pre> <p>The listener will also work with models and their operations. It will also include all bound parameters that the query uses at the end of the logged statement.</p> <pre><code>[2019-12-25 01:02:03][INFO] SELECT `co_customers`.`cst_id`, \n    ...,\n    FROM `co_customers` \n    WHERE LOWER(`co_customers`.`cst_email`) = :cst_email \n    LIMIT :APL0 - [{\"emp_email\":\"team@phalcon.ld\",\"APL0\":1}]\n</code></pre>"},{"location":"db-layer/#tables","title":"Tables","text":""},{"location":"db-layer/#describe","title":"Describe","text":"<p>The <code>Phalcon\\Db</code> adapters also provide methods to retrieve detailed information about tables and views:</p> <p><pre><code>&lt;?php\n\n$tables = $connection-&gt;listTables('gonano');\n</code></pre> Get tables on the <code>gonano</code> database</p> <p><pre><code>&lt;?php\n\n$exists = $connection-&gt;tableExists('co_invoices');\n</code></pre> Check if there is a table called <code>co_invoices</code> in the database?</p> <p><pre><code>&lt;?php\n\n$fields = $connection-&gt;describeColumns('co_invoices');\nforeach ($fields as $field) {\n    echo 'Column Type: ', $field['Type'];\n}\n</code></pre> Print the name and data types of the <code>co_invoices</code> table</p> <p><pre><code>&lt;?php\n\n$indexes = $connection-&gt;describeIndexes('co_invoices');\nforeach ($indexes as $index) {\n    print_r(\n        $index-&gt;getColumns()\n    );\n}\n</code></pre> Print the indexes in the <code>co_invoices</code> table</p> <p><pre><code>&lt;?php\n\n$references = $connection-&gt;describeReferences('co_invoices');\nforeach ($references as $reference) {\n    print_r(\n        $reference-&gt;getReferencedColumns()\n    );\n}\n</code></pre> Print the foreign keys on the 'co_invoices' table</p> <p>A table description is very similar to the MySQL <code>DESCRIBE</code> command, it contains the following information:</p> Field Type Key Null Field's name Column Type Is the column part of the primary key or an index? Does the column allow null values? <p>Methods to get information about views are also implemented for every supported database system:</p> <p><pre><code>&lt;?php\n\n$tables = $connection-&gt;listViews('gonano');\n</code></pre> Get views on the <code>gonano</code> database</p> <p><pre><code>&lt;?php\n\n$exists = $connection-&gt;viewExists('vw_invoices');\n</code></pre> Check if there is a view <code>vw_invoices</code> in the database</p>"},{"location":"db-layer/#create_1","title":"Create","text":"<p>Different database systems (MySQL, Postgresql etc.) offer the ability to create, alter or drop tables with the use of commands such as <code>CREATE</code>, <code>ALTER</code> or <code>DROP</code>. The SQL syntax differs based on which database system is used. <code>Phalcon\\Db</code> adapters offers a unified interface to alter tables, without the need to differentiate the SQL syntax based on the target storage system.</p> <p>An example on how to create a table is shown below:</p> <pre><code>&lt;?php\n\nuse \\Phalcon\\Db\\Column as Column;\n\n$connection-&gt;createTable(\n    'co_invoices',\n    null,\n    [\n       'columns' =&gt; [\n            new Column(\n                'inv_id',\n                [\n                    'type'          =&gt; Column::TYPE_INTEGER,\n                    'size'          =&gt; 10,\n                    'notNull'       =&gt; true,\n                    'autoIncrement' =&gt; true,\n                    'primary'       =&gt; true,\n                ]\n            ),\n            new Column(\n                'inv_cst_id',\n                [\n                    'type'    =&gt; Column::TYPE_INTEGER,\n                    'size'    =&gt; 11,\n                    'notNull' =&gt; true,\n                ]\n            ),\n            new Column(\n                'inv_title',\n                [\n                    'type'    =&gt; Column::TYPE_VARCHAR,\n                    'size'    =&gt; 100,\n                    'notNull' =&gt; true,\n                ]\n            ),\n        ]\n    ]\n);\n</code></pre> <p>The <code>createTable</code> method accepts an associative array describing the table. Columns are defined with the class Phalcon\\Db\\Column. The table below shows the options available to define a column:</p> Option Description Optional <code>after</code> Column must be placed after indicated column Yes <code>autoIncrement</code> Set whether this column will be auto incremented by the database. Only one column in the table can have this attribute. Yes <code>bind</code> One of the <code>BIND_TYPE_*</code> constants telling how the column must be bound before save it Yes <code>default</code> Default value (when used with <code>'notNull' =&gt; true</code>). Yes <code>first</code> Column must be placed at first position in the column order Yes <code>notNull</code> Column can store null values Yes <code>primary</code> <code>true</code> if the column is part of the table's primary key Yes <code>scale</code> <code>DECIMAL</code> or <code>NUMBER</code> columns may be have a scale to specify how many decimals should be stored Yes <code>size</code> Some type of columns like <code>VARCHAR</code> or <code>INTEGER</code> may have a specific size Yes <code>type</code> Column type. Must be a Phalcon\\Db\\Column constant (see below for a list) No <code>unsigned</code> <code>INTEGER</code> columns may be <code>signed</code> or <code>unsigned</code>. This option does not apply to other types of columns Yes <p>The following database column types are supported by the adapters:</p> <ul> <li><code>Phalcon\\Db\\Column::TYPE_INTEGER</code></li> <li><code>Phalcon\\Db\\Column::TYPE_DATE</code></li> <li><code>Phalcon\\Db\\Column::TYPE_VARCHAR</code></li> <li><code>Phalcon\\Db\\Column::TYPE_DECIMAL</code></li> <li><code>Phalcon\\Db\\Column::TYPE_DATETIME</code></li> <li><code>Phalcon\\Db\\Column::TYPE_CHAR</code></li> <li><code>Phalcon\\Db\\Column::TYPE_TEXT</code></li> </ul> <p>The associative array passed in <code>createTable()</code> can have the following keys:</p> Index Description Optional <code>columns</code> An array with columns defined with Phalcon\\Db\\Column No <code>indexes</code> An array with indexes defined with Phalcon\\Db\\Index Yes <code>references</code> An array with references (foreign keys) defined with Phalcon\\Db\\Reference Yes <code>options</code> An array with creation options. (specific to the database system) Yes"},{"location":"db-layer/#alter","title":"Alter","text":"<p>As your application grows, you might need to alter your database, as part of a refactoring or adding new features. Not all database systems allow you to modify existing columns or adding columns between two existing ones. Phalcon\\Db is limited by these constraints.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Column as Column;\n\n$connection-&gt;addColumn(\n    'co_invoices',\n    null,\n    new Column(\n        'inv_status_flag',\n        [\n            'type'    =&gt; Column::TYPE_INTEGER,\n            'size'    =&gt; 1,\n            'notNull' =&gt; true,\n            'default' =&gt; 0,\n            'after'   =&gt; 'inv_cst_id',\n        ]\n    )\n);\n\n\n$connection-&gt;modifyColumn(\n    'co_invoices',\n    null,\n    new Column(\n        'inv_status_flag',\n        [\n            'type'    =&gt; Column::TYPE_INTEGER,\n            'size'    =&gt; 2,\n            'notNull' =&gt; true,\n        ]\n    )\n);\n\n$connection-&gt;dropColumn(\n    'co_invoices',\n    null,\n    'inv_status_flag'\n);\n</code></pre>"},{"location":"db-layer/#drop","title":"Drop","text":"<p>To drop an existing table from the current database, use the <code>dropTable</code> method. To drop an table from a custom database, you can use the second parameter to set the database name.</p> <p><pre><code>&lt;?php\n\n$connection-&gt;dropTable('co_invoices');\n</code></pre> Drop the table <code>co_invoices</code> from active database</p> <p><pre><code>&lt;?php\n\n$connection-&gt;dropTable('co_invoices', 'gonano');\n</code></pre> Drop the table <code>co_invoices</code> from the database <code>gonano</code></p>"},{"location":"db-migrations/","title":"Database Migrations","text":"<p>NOTE</p> <p>Phalcon migrations have been removed from DevTools and moved to a separate repository.</p>"},{"location":"db-migrations/#package-git-repository","title":"Package git repository","text":"<p>https://github.com/phalcon/migrations</p>"},{"location":"db-migrations/#requirements","title":"Requirements","text":"<ul> <li>PHP &gt;= 7.2</li> <li>Phalcon &gt;= 4.0.5</li> </ul>"},{"location":"db-migrations/#installing-via-composer","title":"Installing via Composer","text":"<pre><code>composer require --dev phalcon/migrations\n</code></pre>"},{"location":"db-migrations/#quick-start","title":"Quick start","text":"<p>What you need for quick start:</p> <ul> <li>Configuration file in root of your project (you can also pass them as parameters inside CLI environment)</li> <li>Create database tables structure</li> <li>Execute command to generate migrations</li> </ul> <p>After that you can execute that migrations (run) in another environment to create same DB structure.</p>"},{"location":"db-migrations/#create-configuration-file","title":"Create configuration file","text":"<pre><code>&lt;?php\n\nuse Phalcon\\Config;\n\nreturn new Config([\n    'database' =&gt; [\n        'adapter' =&gt; 'mysql',\n        'host' =&gt; '127.0.0.1',\n        'username' =&gt; 'root',\n        'password' =&gt; '',\n        'dbname' =&gt; 'db-name',\n        'charset' =&gt; 'utf8',\n    ],\n    'application' =&gt; [\n        'logInDb' =&gt; true,\n        'migrationsDir' =&gt; 'db/migrations',\n        'migrationsTsBased' =&gt; true, // true - Use TIMESTAMP as version name, false - use versions\n        'exportDataFromTables' =&gt; [\n            // Tables names\n            // Attention! It will export data every new migration\n        ],\n    ],\n]);\n</code></pre>"},{"location":"db-migrations/#generate-migrations","title":"Generate migrations","text":"<p>Basic generation</p> <pre><code>vendor/bin/phalcon-migrations generate\n</code></pre> <p>**Generate specific table and export data from it</p> <pre><code>vendor/bin/phalcon-migrations generate \\\n    --config=migrations.php \\\n    --table=users \\\n    --exportDataFromTables=users \\\n    --data=oncreate\n</code></pre>"},{"location":"db-migrations/#run-migrations","title":"Run migrations","text":"<pre><code>vendor/bin/phalcon-migrations run\n</code></pre>"},{"location":"db-migrations/#list-existing-migrations","title":"List existing migrations","text":"<pre><code>vendor/bin/phalcon-migrations list\n</code></pre>"},{"location":"db-migrations/#usage-example","title":"Usage example","text":"<p>Run migrations from specific migrations directory</p> <pre><code>use Phalcon\\Migrations\\Migrations;\n\n$migration = new Migrations();\n$migration::run([\n    'migrationsDir' =&gt; [\n        __DIR__ . '/migrations',\n    ],\n    'config' =&gt; [\n        'database' =&gt; [\n            'adapter' =&gt; 'Mysql',\n            'host' =&gt; 'phalcon-db-mysql',\n            'username' =&gt; 'root',\n            'password' =&gt; 'root',\n            'dbname' =&gt; 'vokuro',\n        ],\n    ]\n]);\n</code></pre>"},{"location":"db-migrations/#migration-methods","title":"Migration methods","text":"<p>Each migration is an separate class that works as an entity for specific database table. Inside each class there are different methods that can occur during migration running.</p> <p>Each migration file (and class) can implement specific methods, that will be executed based on the operation requested. There are no restrictions on the logic encapsulated in each method.</p> <p>The tables below show the Migration Class methods. They are stored by order of execution, earliest to latest.</p> <p>Running to up</p> Method name Description morph Morph table structure afterCreateTable Make something immediately after table was created up Table is created and ready to work with afterUp Extra method to work for some specific cases <p>Running to down</p> Method name Description down Normally you put here table drop or data truncation aferDown Extra method to work after all was cleaned up morph (from previous migration) As migration was moved backward, there need to be all returned to previous state"},{"location":"db-migrations/#cli-arguments-and-options","title":"CLI Arguments and options","text":"<p>Arguments</p> Argument Description generate Generate a Migration run Run a Migration list List all available migrations <p>Options</p> Action Description --config=s Configuration file --migrations=s Migrations directory. Use comma separated string to specify multiple directories --directory=s Directory where the project was created --table=s Table to migrate. Table name or table prefix with asterisk. Default: all --version=s Version to migrate --descr=s Migration description (used for timestamp based migration) --data=s Export data ['always' or 'oncreate'] (Data is imported during migration run) --exportDataFromTables=s Export data from specific tables, use comma separated string. --force Forces to overwrite existing migrations --ts-based Timestamp based migration version --log-in-db Keep migrations log in the database table rather then in file --dry Attempt requested operation without making changes to system (Generating only) --verbose Output of debugging information during operation (Running only) --no-auto-increment Disable auto increment (Generating only) --skip-ref-schema Skip referencedSchema inside generated migration (Generating only) --skip-foreign-checks Wrap <code>SET FOREIGN_KEY_CHECKS</code> query before and after execution of a query (Running only) --help Shows this help"},{"location":"db-migrations/#timestamp-based-migrations","title":"Timestamp based migrations","text":"<p>Using this approach is useful when more than one developer is participating in the database structure management. Use <code>'migrationsTsBased' =&gt; true</code> in config file or <code>--ts-based</code> option in CLI environment. Also, you need to specify suffix <code>descr</code>, which could be anything you want, for example: semantic version.</p> <p>Current command <pre><code>vendor/bin/phalcon-migrations generate --ts-based --descr=1.0.0\n</code></pre></p> <p>Will produce folder name with such names</p> <ul> <li>1582539287636860_1.0.0</li> <li>1682539471102635_1.0.0</li> <li>1782539471102635_1.0.0</li> </ul> <p>Migrations will be executed from oldest to newest.</p> <p>NOTE</p> <p>Whenever migrations are run, the application scans all available migrations and their status irrespective of their \"age\". If one or more were not executed in a previous run, they will be executed in the next run.</p>"},{"location":"db-models-behaviors/","title":"Model Behaviors","text":""},{"location":"db-models-behaviors/#overview","title":"Overview","text":"<p>Behaviors are shared constructs that several models may adopt in order to re-use code. Although you can use traits to reuse code, behaviors have several benefits that make them more appealing. Traits require you to use exactly the same field names for common code to work. Behaviors are more flexible.</p> <p>The ORM provides an API to implement behaviors in your models. Also, you can use the events and callbacks as seen before as an alternative to implement behaviors.</p> <p>A behavior must be added in the model initializer, a model can have zero or more behaviors:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Behavior\\Timestampable;\n\nclass Invoices extends Model\n{\n    /**\n     * @var int\n     */\n    public $inv_id;\n\n    /**\n     * @var string\n     */\n    public $inv_created_at;\n\n    /**\n     * @var int\n     */\n    public $inv_status_flag;\n\n    /**\n     * @var string\n     */\n    public $inv_title;\n\n    public function initialize()\n    {\n        $this-&gt;addBehavior(\n            new Timestampable(\n                [\n                    'beforeCreate' =&gt; [\n                        'field'  =&gt; 'inv_created_at',\n                        'format' =&gt; 'Y-m-d',\n                    ],\n                ]\n            )\n        );\n    }\n}\n</code></pre>"},{"location":"db-models-behaviors/#built-in","title":"Built In","text":"<p>The following built-in behaviors are provided by the framework:</p> Name Description SoftDelete Instead of permanently delete a record it marks the record as deleted changing the value of a flag column Timestampable Allows to automatically update a model's attribute saving the datetime when a record is created or updated"},{"location":"db-models-behaviors/#timestampable","title":"Timestampable","text":"<p>This behavior receives an array of options, the first level key must be an event name indicating when the column must be assigned:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Behavior\\Timestampable;\n\npublic function initialize()\n{\n    $this-&gt;addBehavior(\n        new Timestampable(\n            [\n                'beforeCreate' =&gt; [\n                    'field'  =&gt; 'inv_created_at',\n                    'format' =&gt; 'Y-m-d',\n                ],\n            ]\n        )\n    );\n}\n</code></pre> <p>Each event can have its own options, <code>field</code> is the name of the column that must be updated, if <code>format</code> is a string it will be used as the format of the date function. <code>format</code> can also be an anonymous function offering additional functionality to generate any kind of timestamp string:</p> <pre><code>&lt;?php\n\nuse DateTime;\nuse DateTimeZone;\nuse Phalcon\\Mvc\\Model\\Behavior\\Timestampable;\n\npublic function initialize()\n{\n    $this-&gt;addBehavior(\n        new Timestampable(\n            [\n                'beforeCreate' =&gt; [\n                    'field'  =&gt; 'inv_created_at',\n                    'format' =&gt; function () {\n                        $datetime = new Datetime(\n                            new DateTimeZone('Europe/Stockholm')\n                        );\n\n                        return $datetime-&gt;format('Y-m-d H:i:sP');\n                    },\n                ],\n            ]\n        )\n    );\n}\n</code></pre> <p>If the option <code>format</code> is omitted a timestamp using the PHP's function time, will be used.</p>"},{"location":"db-models-behaviors/#softdelete","title":"SoftDelete","text":"<p>This behavior can be used as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Behavior\\SoftDelete;\n\nclass Invoices extends Model\n{\n    const ACTIVE   = 1;\n    const INACTIVE = 0;\n\n    /**\n     * @var int\n     */\n    public $inv_id;\n\n    /**\n     * @var string\n     */\n    public $inv_created_at;\n\n    /**\n     * @var int\n     */\n    public $inv_deleted_flag;\n\n    /**\n     * @var string\n     */\n    public $inv_title;\n\n    public function initialize()\n    {\n        $this-&gt;addBehavior(\n            new SoftDelete(\n                [\n                    'field' =&gt; 'inv_deleted_flag',\n                    'value' =&gt; Invoices::INACTIVE,\n                ]\n            )\n        );\n    }\n}\n</code></pre> <p>This behavior accepts two options: <code>field</code> and <code>value</code>, <code>field</code> determines what field must be updated and <code>value</code> the value to be deleted. Assuming that our table has the following rows:</p> <pre><code>mysql&gt; select * from co_invoices;\n+--------+------------------+-----------------------------+\n| inv_id | inv_deleted_flag | inv_title                   |\n+--------+------------------+-----------------------------+\n|  1     | 0                | Invoice for ACME Inc.       |\n|  2     | 0                | Invoice for Spaceballs Inc. |\n+--------+------------------+-----------------------------+\n2 rows in set (0.00 sec)\n</code></pre> <p>If we delete any of the two records the status will be updated instead of delete the record:</p> <pre><code>&lt;?php\n\nInvoices::findFirst(2)-&gt;delete();\n</code></pre> <p>The operation will result in the following data in the table:</p> <pre><code>mysql&gt; select * from co_invoices;\n+--------+------------------+-----------------------------+\n| inv_id | inv_deleted_flag | inv_title                   |\n+--------+------------------+-----------------------------+\n|  1     | 0                | Invoice for ACME Inc.       |\n|  2     | 1                | Invoice for Spaceballs Inc. |\n+--------+------------------+-----------------------------+\n2 rows in set (0.00 sec)\n</code></pre> <p>NOTE</p> <p>You will need to ensure to specify the deleted condition to filter your records so that you can get deleted or not deleted results back. This behavior does not support automatic filtering.</p>"},{"location":"db-models-behaviors/#custom","title":"Custom","text":"<p>The ORM provides an API to create your own behaviors. A behavior must be a class implementing the Phalcon\\Mvc\\Model\\BehaviorInterface or extend Phalcon\\Mvc\\Model\\Behavior which exposes most of the methods required for implementing custom behaviors.</p> <p>The Phalcon\\Mvc\\Model\\BehaviorInterface requires two methods to be present in your custom behavior:</p> <pre><code>public function missingMethod(\n    ModelInterface $model, \n    string $method, \n    array $arguments = []\n)\n</code></pre> <p>This methods acts as a fallback when a missing method is called on the model</p> <pre><code>public function notify(\n    string $type, \n    ModelInterface $model\n)\n</code></pre> <p>This method receives the notifications from the Events Manager.</p> <p>Additionally if you extend Phalcon\\Mvc\\Model\\Behavior, you have access to:</p> <ul> <li><code>getOptions(string $eventName = null)</code> - Returns the behavior options related to an event</li> <li><code>mustTakeAction(string $eventName)</code> - <code>bool</code> - Checks whether the behavior must take action on certain event</li> </ul> <p>The following behavior is an example, it implements the <code>Blameable</code> behavior which helps identify the user that is performed operations on a model:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Mvc\\ModelInterface;\nuse Phalcon\\Mvc\\Model\\Behavior;\n\nclass Blameable extends Behavior\n{\n    public function notify(string $eventType, ModelInterface $model)\n    {\n        $container = Di::getDefault();\n        $userName  = $container-&gt;get('auth')-&gt;getFullName();\n\n        switch ($eventType) {\n\n            case 'afterCreate':\n            case 'afterDelete':\n            case 'afterUpdate':\n\n                file_put_contents(\n                    'logs/blamable-log.txt',\n                    $userName . ' ' . $eventType . ' ' . $model-&gt;inv_id\n                );\n\n                break;\n\n            default:\n                // ...\n        }\n    }\n}\n</code></pre> <p>The above is a very simple behavior, but it illustrates how to create a behavior. Adding the behavior to a model is illustrated below:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;addBehavior(\n            new Blameable()\n        );\n    }\n}\n</code></pre> <p>A behavior is also capable of intercepting missing methods on your models, and offering functionality for them:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\nuse Phalcon\\Mvc\\ModelInterface;\nuse Phalcon\\Mvc\\Model\\Behavior;\nuse Phalcon\\Mvc\\Model\\BehaviorInterface;\n\nclass Sluggable extends Behavior\n{\n    public function missingMethod(\n        string $model, \n        ModelInterface $method, \n        $arguments = []\n    ) {\n        if ($method === 'getSlug') {\n            return Tag::friendlyTitle($model-&gt;title);\n        }\n    }\n}\n</code></pre> <p>Calling that method on a model that implements <code>Sluggable</code> returns a SEO friendly title:</p> <pre><code>&lt;?php\n\n$title = $invoice-&gt;getSlug();\n</code></pre>"},{"location":"db-models-behaviors/#traits","title":"Traits","text":"<p>You can use Traits to re-use code in your classes, this is another way to implement custom behaviors. The following trait implements a simple version of the <code>Timestampable</code> behavior:</p> <pre><code>&lt;?php\n\ntrait Timestampable\n{\n    public function beforeCreate()\n    {\n        $this-&gt;inv_created_at = date('r');\n    }\n\n    public function beforeUpdate()\n    {\n        $this-&gt;inv_updated_at = date('r');\n    }\n}\n</code></pre> <p>Then you can use it in your model as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    use Timestampable;\n}\n</code></pre> <p>NOTE</p> <p>You can use traits instead of behaviors, but they do require that all your fields, that the behavior will affect, must have the same name. Also if you implement an event method in a trait (e.g. <code>beforeCreate</code>) you cannot have it also in your model since the two will produce an error.</p>"},{"location":"db-models-cache/","title":"Model Caching","text":""},{"location":"db-models-cache/#overview","title":"Overview","text":"<p>In most applications, there is data that changes infrequently. One of the most common bottlenecks in terms of performance is accessing data from a database. We first have a layer of complexity that allows PHP to communicate with the database and then we have the layer of complexity and potentially bottleneck within the database itself, when trying to analyze the query sent and return the data back (especially when the query contains multiple joins and group statements).</p> <p>Implementing some layers of caching, reduces the number of connections and lookups to your database. This will ensure that data is queried from the database only when absolutely necessary. This article showcases some areas that caching could increase performance. </p>"},{"location":"db-models-cache/#resultsets","title":"Resultsets","text":"<p>A well established technique to avoid querying the database in every request, is to cache resultsets that do not change frequently, using a system with faster access (usually memory).</p> <p>When Phalcon\\Mvc\\Model requires a service to cache resultsets, it will request it from the Dependency Injection Container. The service name is called <code>modelsCache</code>. Phalcon offers a cache component that can store any kind of data. Integrating this service with your code requires a Cache object.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache;\nuse Phalcon\\Cache\\AdapterFactory;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Storage\\SerializerFactory;\n\n$container = new FactoryDefault();\n\n$container-&gt;set(\n    'modelsCache',\n    function () {\n        $serializerFactory = new SerializerFactory();\n        $adapterFactory    = new AdapterFactory($serializerFactory);\n\n        $options = [\n            'defaultSerializer' =&gt; 'Php',\n            'lifetime'          =&gt; 7200\n        ];\n\n        $adapter = $adapterFactory-&gt;newInstance('apcu', $options);\n\n        return new Cache($adapter);\n    }\n);\n</code></pre> <p>NOTE</p> <p>It is imperative to use a serializer that can properly serialize and unserialize objects without changing their state. <code>Php</code> and <code>Igbinary</code> are such serializers. <code>Json</code> will convert objects to <code>stdClass</code> and <code>Simple</code>/<code>Complex</code> resultsets will become arrays. Choosing a serializer that cannot store objects properly will produce errors when the cache is restored for your models.</p> <p>You have complete control in how you create and customize the cache component before registering it. You can check the cache document for various options and customizations available when creating the cache component.</p> <p>Once the cache component is properly set up, resultsets can be cached by using the <code>cache</code> element in the query commands for models such as <code>find</code>, <code>findFirst</code> etc.</p> <p><pre><code>$invoices = Invoices::find();\n</code></pre> Do not use cache</p> <p><pre><code>$invoices = Invoices::find(\n    [\n        'cache' =&gt; [\n            'key' =&gt; 'my-cache',\n        ],\n    ]\n);\n</code></pre> Cache this resultset using <code>my-cache</code> as the key. The results will expire in 7200 seconds, as set when setting the cache service</p> <p><pre><code>$invoices = Invoices::find(\n    [\n        'cache' =&gt; [\n            'key'      =&gt; 'my-cache',\n            'lifetime' =&gt; 300,\n        ],\n    ]\n);\n</code></pre> Cache the resultset using <code>my-cache</code> as the key for 5 minutes.</p> <p><pre><code>$invoices = Invoices::find(\n    [\n        'cache' =&gt; [\n            'key'     =&gt; 'my-cache',\n            'service' =&gt; 'cache',\n        ],\n    ]\n);\n</code></pre> Cache the resultset using <code>my-cache</code> as the key but now use the service <code>cache</code> from the DI container instead of the <code>modelsCache</code></p>"},{"location":"db-models-cache/#relationships","title":"Relationships","text":"<p>You can also cache resultsets that are returned by relationships. </p> <p><pre><code>&lt;?php\n\nuse MyApp\\Models\\Customers;\nuse MyApp\\Models\\Invoices;\n\n$customer = Customers::findFirst(\n    [\n        'conditions' =&gt; 'cst_id = :cst_id:',\n        'bind'       =&gt; [\n            'cst_id' =&gt; 1,\n        ],\n    ]\n);\n\n$invoices = $customer-&gt;getRelated(\n    'invoices',\n    [\n        'cache' =&gt; [\n            'key'      =&gt; 'my-key',\n            'lifetime' =&gt; 300,\n        ]\n    ]\n);\n\n$invoices = $customer-&gt;getInvoices(\n    [\n        'cache' =&gt; [\n            'key'      =&gt; 'my-key',\n            'lifetime' =&gt; 300,\n        ]\n    ]\n);\n</code></pre> In the above example we call the <code>getRelated</code> method on a <code>Customer</code> model to retrieve the invoices from the <code>invoices</code> relationship. We also pass the array with the necessary options to cache the resultset for 5 minutes, using <code>my-key</code> as the key.</p> <p>We can also use the magic method <code>getInvoices</code> which is <code>get</code> with the name of the relationship, in this case <code>invoices</code>.</p> <p>When a cached resultset needs to be invalidated, you can simply delete it from the cache using the key specified as seen above.</p> <p>What resultsets to cache and for how long will depend on the needs of your application. Resultsets that change frequently should not be cached, since the cache results will be invalidated quickly with subsequent changes to the underlying records that represent these resultsets.</p> <p>NOTE</p> <p>Caching data comes with the cost of compiling and storing that data in the cache. You should always leverage that processing cost when formulating your caching strategy. What data is cached and for how long depends on the needs of your application.</p>"},{"location":"db-models-cache/#forcing-cache","title":"Forcing Cache","text":"<p>Earlier we saw how Phalcon\\Mvc\\Model integrates with the caching component provided by the framework. To make a record/resultset cacheable we pass the key <code>cache</code> in the array of parameters:</p> <pre><code>&lt;?php\n\n// Cache the resultset for only for 5 minutes\n$invoices = Invoices::find(\n    [\n        'cache' =&gt; [\n            'key'      =&gt; 'my-cache',\n            'lifetime' =&gt; 300,\n        ],\n    ]\n);\n</code></pre> <p>This gives us the freedom to cache specific queries, however if we want to cache globally every query performed over the model, we can override the <code>find()</code>/<code>findFirst()</code> methods to force every query to be cached:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public static function find($parameters = null)\n    {\n        $parameters = self::checkCacheParameters($parameters);\n\n        return parent::find($parameters);\n    }\n\n    public static function findFirst($parameters = null)\n    {\n        $parameters = self::checkCacheParameters($parameters);\n\n        return parent::findFirst($parameters);\n    }\n\n    protected static function checkCacheParameters($parameters = null)\n    {\n        if (null !== $parameters) {\n            if (true !== is_array($parameters)) {\n                $parameters = [$parameters];\n            }\n\n            if (true !== isset($parameters['cache'])) {\n                $parameters['cache'] = [\n                    'key'      =&gt; self::generateCacheKey($parameters),\n                    'lifetime' =&gt; 300,\n                ];\n            }\n        }\n\n        return $parameters;\n    }\n\n    protected static function generateCacheKey(array $parameters)\n    {\n        $uniqueKey = [];\n\n        foreach ($parameters as $key =&gt; $value) {\n            if (true === is_scalar($value)) {\n                $uniqueKey[] = $key . ':' . $value;\n            } elseif (true === is_array($value)) {\n                $uniqueKey[] = sprintf(\n                    '%s:[%s]',\n                    $key,\n                    self::generateCacheKey($value)\n                );\n            }\n        }\n\n        return join(',', $uniqueKey);\n    }\n}\n</code></pre> <p>Accessing the database is several times slower than calculating a cache key. You're free to implement any key generation strategy you find to better for your needs. Note that a good key avoids collisions as much as possible - meaning that different keys should return unrelated records.</p> <p>This gives you full control on how the cache should be implemented for each model. If this strategy is common to several models you can create a base class that can be extended by your models or not:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nabstract class AbstractCacheable extends Model\n{\n    public static function find($parameters = null)\n    {\n        $parameters = self::checkCacheParameters($parameters);\n\n        return parent::find($parameters);\n    }\n\n    public static function findFirst($parameters = null)\n    {\n        $parameters = self::checkCacheParameters($parameters);\n\n        return parent::findFirst($parameters);\n    }\n\n    protected static function checkCacheParameters($parameters = null)\n    {\n        if (null !== $parameters) {\n            if (true !== is_array($parameters)) {\n                $parameters = [$parameters];\n            }\n\n            if (true !== isset($parameters['cache'])) {\n                $parameters['cache'] = [\n                    'key'      =&gt; self::generateCacheKey($parameters),\n                    'lifetime' =&gt; 300,\n                ];\n            }\n        }\n\n        return $parameters;\n    }\n\n    protected static function generateCacheKey(array $parameters)\n    {\n        $uniqueKey = [];\n\n        foreach ($parameters as $key =&gt; $value) {\n            if (true === is_scalar($value)) {\n                $uniqueKey[] = $key . ':' . $value;\n            } elseif (true === is_array($value)) {\n                $uniqueKey[] = sprintf(\n                    '%s:[%s]',\n                    $key,\n                    self::generateCacheKey($value)\n                );\n            }\n        }\n\n        return join(',', $uniqueKey);\n    }\n}\n</code></pre> <p>Then you can use this abstract class to models that you need them to be cachable and the Phalcon model to the ones you do not.</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse MyApp\\Models\\AbstractCachable;\n\nclass Invoices extends AbstractCachable\n{\n\n}\n</code></pre>"},{"location":"db-models-cache/#phql-queries","title":"PHQL Queries","text":"<p>Regardless of the syntax we used to create them, all queries in the ORM are handled internally using PHQL. This language gives you much more freedom to create all kinds of queries. Of course these queries can be cached:</p> <pre><code>&lt;?php\n\n$phql  = 'SELECT * FROM Customers WHERE cst_id = :cst_id:';\n$query = $this\n    -&gt;modelsManager\n    -&gt;createQuery($phql)\n;\n\n$query-&gt;cache(\n    [\n        'key'      =&gt; 'customers-1',\n        'lifetime' =&gt; 300,\n    ]\n);\n\n$invoice = $query-&gt;execute(\n    [\n        'cst_id' =&gt; 1,\n    ]\n);\n</code></pre>"},{"location":"db-models-cache/#reusable-relationships","title":"Reusable Relationships","text":"<p>Some models may have relationships with other models. This allows us to easily check the records that relate to instances in memory:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::findFirst(\n    [\n        'conditions' =&gt; 'inv_id = :inv_id:',\n        'bind'       =&gt; [\n            'inv_id' =&gt; 1,\n        ],\n    ]\n);\n\n$customer = $invoice-&gt;customer;\n\necho $customer-&gt;cst_name, PHP_EOL;\n</code></pre> <p>The above example is very simple. It finds the invoice with <code>inv_id = 1</code> and then uses the relationship <code>customer</code> to retrieve the related record in the <code>Customers</code> model. After that, we print the name of the customer.</p> <p>This also applies if we retrieve a customer and want to show the invoices that they have:</p> <p><pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::find();\n\nforeach ($invoices as $invoice) {\n    // SELECT * FROM co_customers WHERE cst_id = ?;\n    $customer = $invoice-&gt;customer;\n\n    echo $customer-&gt;cst_name, PHP_EOL;\n}\n</code></pre> A customer can have more than one invoice. Therefore in this example, the same customer record could be unnecessarily queried several times. To avoid this, we can set the relationship as <code>reusable</code>. This will instruct Phalcon to cache the related record in memory the first time it is accessed, and subsequent calls to the same record will return the data from the memory cached entity.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Customers;\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            'inv_cst_id',\n            Customers::class,\n            'cst_id',\n            [\n                'reusable' =&gt; true,\n            ]\n        );\n    }\n}\n</code></pre> <p>Note that this type of cache works in memory only, this means that cached data are released when the request is terminated.</p> <p>NOTE</p> <p>The above example is for demonstration only and should not be used in your code because it introduces the N+1 problem</p>"},{"location":"db-models-cache/#related-records","title":"Related Records","text":"<p>When a related record is queried, the ORM internally builds the appropriate condition and gets the required records using <code>find()</code>/<code>findFirst()</code> in the target model according to the following table:</p> Type Method Description Belongs-To <code>findFirst()</code> Returns a model instance of the related record directly Has-One <code>findFirst()</code> Returns a model instance of the related record directly Has-Many <code>find()</code> Returns a collection of model instances of the referenced model <p>This means that when you get a related record you could intercept how the data is obtained by implementing the corresponding method:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::findFirst(\n    [\n        'conditions' =&gt; 'inv_id = :inv_id:',\n        'bind'       =&gt; [\n            'inv_id' =&gt; 1,\n        ],\n    ]\n);\n\n// Invoices::findFirst('...');\n$customer = $invoice-&gt;customer;               \n\n// Invoices::findFirst('...');\n$customer = $invoice-&gt;getCustomer();\n\n// Invoices::findFirst('...');\n$customer = $invoice-&gt;getRelated('customer');\n</code></pre> <p>The above calls call the same <code>findFirst</code> method in the background. Additionally, we could replace the <code>findFirst()</code> method in the <code>Invoices</code> model and implement the cache that is most appropriate for our application needs:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public static function findFirst($parameters = null)\n    {\n        // ...\n    }\n}\n</code></pre>"},{"location":"db-models-cache/#related-records-recursively","title":"Related Records Recursively","text":"<p>In this scenario, we assume that every time we query a resultset, we also retrieve their associated records. Imagine this as a form of eager loading. If we store the records found, together with their related entities, in some instances, we could reduce the overhead required to get all entities:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            'inv_cst_id',\n            Customers::class,\n            'cst_id',\n            [\n                'reusable' =&gt; true,\n            ]\n        );\n    }\n\n    public static function find($parameters = null)\n    {\n        $cacheKey = self::generateCacheKey($parameters);\n        $results  = self::cacheGet($cacheKey);\n\n        if (true === is_object($results)) {\n            return $results;\n        }\n\n        $results = [];\n\n        $invoices = parent::find($parameters);\n\n        foreach ($invoices as $invoice) {\n            $customer = $invoice-&gt;getRelated('customer');\n\n            $invoice-&gt;customer = $customer;\n\n            $results[] = $invoice;\n        }\n\n        self::cacheSet($cacheKey, $results);\n\n        return $results;\n    }\n\n    protected static function cacheGet($cacheKey)\n    {\n        $cache = Di::getDefault()-&gt;get('cache');\n\n        return $cache-&gt;get($cacheKey);\n    }\n\n    protected static function cacheSet($cacheKey, $results)\n    {\n        $cache = Di::getDefault()-&gt;get('cache');\n\n        return $cache-&gt;save($cacheKey, $results);\n    }\n\n    protected static function generateCacheKey(array $parameters)\n    {\n        $uniqueKey = [];\n\n        foreach ($parameters as $key =&gt; $value) {\n            if (true === is_scalar($value)) {\n                $uniqueKey[] = $key . ':' . $value;\n            } elseif (true === is_array($value)) {\n                $uniqueKey[] = sprintf(\n                    '%s:[%s]',\n                    $key,\n                    self::generateCacheKey($value)\n                );\n            }\n        }\n\n        return join(',', $uniqueKey);\n    }\n}\n</code></pre> <p>Getting all the invoices will also loop through the resultset and get all related <code>Customer</code> records, storing them in the resultset using the <code>customer</code> property. Once the operation is completed, the whole resultset is stored in the cache. Any subsequent call to <code>find</code> in <code>Invoices</code> will use the cached resultset without hitting the database.</p> <p>NOTE</p> <p>You need to ensure that you have a strategy to invalidate the cache when the underlying records in the database change so that you always get the correct data with your queries.</p> <p>The above can also be performed using PHQL:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            'inv_cst_id',\n            Customers::class,\n            'cst_id',\n            [\n                'reusable' =&gt; true,\n            ]\n        );\n    }\n\n    public function getInvoicesCustomers($conditions, $params = null)\n    {\n        $phql = 'SELECT Invoices.*, Customers.* '\n              . 'FROM Invoices '\n              . 'JOIN Customers '\n              . 'WHERE ' . $conditions;\n\n        $query = $this\n            -&gt;getModelsManager()\n            -&gt;executeQuery($phql)\n        ;\n\n        $query-&gt;cache(\n            [\n                'key'      =&gt; self::generateCacheKey(\n                    $conditions, \n                    $params\n                ),\n                'lifetime' =&gt; 300,\n            ]\n        );\n\n        return $query-&gt;execute($params);\n    }\n\n    protected static function generateCacheKey(array $parameters)\n    {\n        $uniqueKey = [];\n\n        foreach ($parameters as $key =&gt; $value) {\n            if (true === is_scalar($value)) {\n                $uniqueKey[] = $key . ':' . $value;\n            } elseif (true === is_array($value)) {\n                $uniqueKey[] = sprintf(\n                    '%s:[%s]',\n                    $key,\n                    self::generateCacheKey($value)\n                );\n            }\n        }\n\n        return join(',', $uniqueKey);\n    }\n}\n</code></pre>"},{"location":"db-models-cache/#conditions","title":"Conditions","text":"<p>One of the strategies that we can employ is conditional caching. Since each cache back end has its strengths and weaknesses, we could decide that the cache backend would be determined by the value of the primary key of the model we are accessing: </p> Type Cache Backend 1 - 10000 redis1 10000 - 20000 redis2 &gt; 20000 redis3 <p>The easiest way to achieve this is by adding a static method to the model that selects the right cache to be used:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public static function queryCache(int $initial, int $final)\n    {\n        if ($initial &gt;= 1 &amp;&amp; $final &lt; 10000) {\n            $service = 'redis1';\n        } elseif ($initial &gt;= 10000 &amp;&amp; $final &lt;= 20000) {\n            $service = 'redis2';\n        } else {\n            $service = 'redis3';\n        }\n\n        return self::find(\n            [\n                'id &gt;= ' . $initial . ' AND id &lt;= ' . $final,\n                'cache' =&gt; [\n                    'service' =&gt; $service,\n                ],\n            ]\n        );\n    }\n}\n</code></pre> <p>This approach solves the problem, however, if we want to add other parameters such orders or conditions we would have to create a more complicated method. Additionally, this method does not work if the data is obtained using related records or a <code>find()</code>/<code>findFirst()</code>:</p> <pre><code>&lt;?php\n\n$invoices = Invoices::find('id &lt; 1000');\n$invoices = Invoices::find(\"id &gt; 100 AND type = 'A'\");\n$invoices = Invoices::find(\"(id &gt; 100 AND type = 'A') AND id &lt; 2000\");\n$invoices = Invoices::find(\n    [\n        \"(id &gt; ?0 AND type = 'A') AND id &lt; ?1\",\n        'bind'  =&gt; [100, 2000],\n        'order' =&gt; 'type',\n    ]\n);\n</code></pre> <p>To achieve this we need to intercept the intermediate representation (IR) generated by the PHQL parser and customize the cache accordingly:</p> <p>The first is create a custom builder, so we can generate a totally customized query:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Components;\n\nuse Phalcon\\Mvc\\Model\\Query\\Builder as QueryBuilder;\n\nclass CustomQueryBuilder extends QueryBuilder\n{\n    public function getQuery()\n    {\n        $query = new CustomQuery(\n            $this-&gt;getPhql()\n        );\n\n        $query-&gt;setDI(\n            $this-&gt;getDI()\n        );\n\n        if (true === is_array($this-&gt;bindParams)) {\n            $query-&gt;setBindParams(\n                $this-&gt;bindParams\n            );\n        }\n\n        if (true === is_array($this-&gt;bindTypes)) {\n            $query-&gt;setBindTypes(\n                $this-&gt;bindTypes\n            );\n        }\n\n        if (true === is_array($this-&gt;sharedLock)) {\n            $query-&gt;setSharedLock(\n                $this-&gt;sharedLock\n            );\n        }\n\n        return $query;\n    }\n}\n</code></pre> <p>Instead of directly returning a Phalcon\\Mvc\\Model\\Query, our custom builder returns a <code>CustomQuery</code> instance:</p> <p><pre><code>&lt;?php\n\nnamespace MyApp\\Components;\n\nuse MyApp\\Components\\CustomNodeVisitor;\nuse Phalcon\\Mvc\\Model\\Query as ModelQuery;\n\nclass CustomQuery extends ModelQuery\n{\n    public function execute($params = null, $types = null)\n    {\n        $ir = $this-&gt;parse();\n\n        if (true === is_array($this-&gt;bindParams)) {\n            $params = array_merge(\n                $this-&gt;bindParams,\n                (array) $params\n            );\n        }\n\n        if (true === is_array($this-&gt;bindTypes)) {\n            $types = array_merge(\n                $this-&gt;bindTypes,\n                (array) $types\n            );\n        }\n\n        // Check if the query has conditions\n        if (true === isset($ir['where'])) {\n            $visitor = new CustomNodeVisitor();\n            $visitor-&gt;visit(\n                $ir['where']\n            );\n\n            $initial = $visitor-&gt;getInitial();\n            $final   = $visitor-&gt;getFinal();\n            $key     = $this-&gt;queryCache($initial, $final);\n            $result  = $this-&gt;getDI()-&gt;get('cache')-&gt;get($key);\n\n            if (true === is_object($result)) {\n                return $result;\n            }   \n        }\n\n        $result   = $this-&gt;executeSelect($ir, $params, $types);\n        $result   = $this-&gt;uniqueRow ? $result-&gt;getFirst(): $result;\n        $cacheKey = $this-&gt;calculateKey();\n\n        $this-&gt;getDI()-&gt;get('cache')-&gt;save($cacheKey, $result);\n\n        return $result;\n    }\n}\n</code></pre> In the above code snippet we call the <code>parse()</code> method from the Phalcon\\Mvc\\Model\\Query in order to get the intermediate representation of the PHQL query itself. We then ensure that we process all the parameters and types (if passed). Then we check if there are any conditions supplied in the <code>where</code> element of the intermediate representation. The fields in the conditions can have an <code>order</code> also. We will need to recursively check the conditions tree to find the information that we are looking for. </p> <p>We are using the <code>CustomNodeVisitor</code> helper that recursively checks the conditions looking for fields that will return the range to be used in the cache. </p> <p>Lastly we will check if the cache has data and return it. Alternatively we will execute the query and then store the results in the cache prior to return it back.</p> <pre><code>&lt;?php\n\nclass CustomNodeVisitor\n{\n    protected $initial = 0;\n\n    protected $final = 25000;\n\n    public function getInitial(): int\n    {\n        return $this-&gt;initial;\n    }\n\n    public function getFinal(): int\n    {\n        return $this-&gt;final;\n    }\n\n    public function visit(array $node)\n    {\n        switch ($node['type']) {\n            case 'binary-op':\n                $left  = $this-&gt;visit($node['left']);\n                $right = $this-&gt;visit($node['right']);\n\n                if (!$left || !$right) {\n                    return false;\n                }\n\n                if ($left === 'id') {\n                    if ($node['op'] === '&gt;') {\n                        $this-&gt;initial = $right;\n                    }\n\n                    if ($node['op'] === '=') {\n                        $this-&gt;initial = $right;\n                    }\n\n                    if ($node['op'] === '&gt;=') {\n                        $this-&gt;initial = $right;\n                    }\n\n                    if ($node['op'] === '&lt;') {\n                        $this-&gt;final = $right;\n                    }\n\n                    if ($node['op'] === '&lt;=') {\n                        $this-&gt;final = $right;\n                    }\n                }\n\n                break;\n\n            case 'qualified':\n                if ($node['name'] === 'id') {\n                    return 'id';\n                }\n\n                break;\n\n            case 'literal':\n                return $node['value'];\n\n            default:\n                return false;\n        }\n    }\n}\n</code></pre> <p>The last task is to replace the <code>find</code> method in the <code>Invoices</code> model to use the classes we just created:</p> <pre><code>&lt;?php\n\nuse MyApp\\Components\\CustomQueryBuilder;\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public static function find($parameters = null)\n    {\n        if (true !== is_array($parameters)) {\n            $parameters = [$parameters];\n        }\n\n        $builder = new CustomQueryBuilder($parameters);\n\n        $builder-&gt;from(\n            get_called_class()\n        );\n\n        $query = $builder-&gt;getQuery();\n\n        if (isset($parameters['bind'])) {\n            return $query-&gt;execute(\n                $parameters['bind']\n            );\n        } else {\n            return $query-&gt;execute();\n        }\n    }\n}\n</code></pre>"},{"location":"db-models-cache/#phql-execution-plan","title":"PHQL Execution Plan","text":"<p>As well as most moderns database systems PHQL caches internally the execution plan, so that if the same statement is executed several times, PHQL reuses the previously generated plan improving performance. In order to take advantage of this feature, it is highly recommended to build all your SQL statements passing variable parameters as bound parameters:</p> <pre><code>&lt;?php\n\nfor ($i = 1; $i &lt;= 10; $i++) {\n    $phql = 'SELECT * FROM Invoices WHERE inv_id = ' . $i;\n\n    $robots = $this\n        -&gt;modelsManager\n        -&gt;executeQuery($phql)\n    ;\n\n    // ...\n}\n</code></pre> <p>In the above example, ten plans were generated increasing the memory usage and processing for the application. Rewriting the code above, to take advantage of bound parameters, reduces the processing required on the ORM and the database system:</p> <pre><code>&lt;?php\n\n$phql = 'SELECT * FROM Invoices WHERE id = ?0';\n\nfor ($i = 1; $i &lt;= 10; $i++) {\n    $robots = $this\n        -&gt;modelsManager\n        -&gt;executeQuery(\n            $phql,\n            [\n                $i,\n            ]\n        )\n    ;\n\n    // ...\n}\n</code></pre> <p>Performance can be also improved reusing the PHQL query:</p> <pre><code>&lt;?php\n\n$phql  = 'SELECT * FROM Invoices WHERE id = ?0';\n$query = $this\n    -&gt;modelsManager\n    -&gt;createQuery($phql)\n;\n\nfor ($i = 1; $i &lt;= 10; $i++) {\n    $robots = $query-&gt;execute(\n        $phql,\n        [\n            $i,\n        ]\n    );\n\n    // ...\n}\n</code></pre> <p>Execution plans for queries involving prepared statements are also cached by most database systems reducing the overall execution time, also protecting your application against SQL Injections.</p>"},{"location":"db-models-events/","title":"Model Events","text":""},{"location":"db-models-events/#overview","title":"Overview","text":"<p>Models allow you to implement events that will be thrown while performing an insert/update/delete which can be used to define business rules. The following are the events supported by Phalcon\\Mvc\\Model and their order of execution:</p> Operation Name Stop? Explanation Insert <code>afterCreate</code> No Runs after creating a record Delete <code>afterDelete</code> No Runs after deleting records Fetch <code>afterFetch</code> No Runs after fetching records Insert/Update <code>afterSave</code> No Runs after saving a record Update <code>afterUpdate</code> No Runs after updating a record Insert/Update <code>afterValidation</code> Yes Is executed after the fields are validated for not <code>null</code>/empty strings or foreign keys Insert <code>afterValidationOnCreate</code> Yes Is executed after the fields are validated for not <code>null</code>/empty strings or foreign keys on an insert Update <code>afterValidationOnUpdate</code> Yes Is executed after the fields are validated for not <code>null</code>/empty strings or foreign keys on an update Insert <code>beforeCreate</code> Yes Runs before creating a record Delete <code>beforeDelete</code> Yes Runs before deleting records Insert/Update <code>beforeSave</code> Yes Runs before saving a record Update <code>beforeUpdate</code> Yes Runs before updating a record Insert/Update <code>beforeValidation</code> Yes Is executed before the fields are validated for not <code>null</code>/empty strings or foreign keys Insert <code>beforeValidationOnCreate</code> Yes Is executed before the fields are validated for not <code>null</code>/empty strings or foreign keys on an insert Update <code>beforeValidationOnUpdate</code> Yes Is executed before the fields are validated for not <code>null</code>/empty strings or foreign keys on an update Delete <code>notDeleted</code> No Runs when records are not deleted (fail) Save <code>notSaved</code> No Runs when records are not saved (fail) Insert/Update <code>onValidationFails</code> Yes Is executed after an integrity validator fails Insert/Update <code>prepareSave</code> No Is executed before saving and allows data manipulation Insert/Update <code>validation</code> Yes Is executed before the fields are validated for not nulls/empty strings or foreign keys on an update"},{"location":"db-models-events/#events","title":"Events","text":"<p>Models act as listeners to the events manager. Therefore we only need to implement the events above in the models directly as public methods:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\n/**\n * Class Invoices\n *\n * @property string $inv_created_at\n * @property int    $inv_cst_id\n * @property int    $inv_id\n * @property string $inv_number\n * @property string $inv_title\n * @property float  $inv_total\n */\nclass Invoices extends Model\n{\n    /**\n     * @var int\n     */\n    public $inv_cst_id;\n\n    /**\n     * @var string\n     */\n    public $inv_created_at;\n\n    /**\n     * @var int\n     */\n    public $inv_id;\n\n    /**\n     * @var string\n     */\n    public $inv_number;\n\n    /**\n     * @var string\n     */\n    public $inv_title;\n\n    /**\n     * @var float\n     */\n    public $inv_total;\n\n    public function beforeValidationOnCreate()\n    {\n        if ($this-&gt;inv_total &lt; 1) {\n            $this-&gt;inv_total = 0;\n        }\n    }\n}\n</code></pre> <p>Events can be used to assign values before performing an operation, for example:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\nuse function str_pad;\n\n/**\n * Class Invoices\n *\n * @property string $inv_created_at\n * @property int    $inv_cst_id\n * @property int    $inv_id\n * @property string $inv_number\n * @property string $inv_title\n * @property float  $inv_total\n */\nclass Invoices extends Model\n{\n    /**\n     * @var int\n     */\n    public $inv_cst_id;\n\n    /**\n     * @var string\n     */\n    public $inv_created_at;\n\n    /**\n     * @var int\n     */\n    public $inv_id;\n\n    /**\n     * @var string\n     */\n    public $inv_number;\n\n    /**\n     * @var string\n     */\n    public $inv_title;\n\n    /**\n     * @var float\n     */\n    public $inv_total;\n\n    public function beforeCreate()\n    {\n        $date     = date('YmdHis');\n        $customer = substr(\n            str_pad(\n                $this-&gt;inv_cst_id, 6, '0', STR_PAD_LEFT\n            ),\n            -6\n        );\n\n        $this-&gt;inv_number = 'INV-' . $customer . '-' . $date;\n    }\n}\n</code></pre>"},{"location":"db-models-events/#custom-events-manager","title":"Custom Events Manager","text":"<p>Additionally, this component is integrated with Phalcon\\Events\\Manager, this means we can create listeners that run when an event is triggered.</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Events\\Manager;\n\n/**\n * Class Invoices\n *\n * @property string $inv_created_at\n * @property int    $inv_cst_id\n * @property int    $inv_id\n * @property string $inv_number\n * @property string $inv_title\n * @property float  $inv_total\n */\nclass Invoices extends Model\n{\n    /**\n     * @var int\n     */\n    public $inv_cst_id;\n\n    /**\n     * @var string\n     */\n    public $inv_created_at;\n\n    /**\n     * @var int\n     */\n    public $inv_id;\n\n    /**\n     * @var string\n     */\n    public $inv_number;\n\n    /**\n     * @var string\n     */\n    public $inv_title;\n\n    /**\n     * @var float\n     */\n    public $inv_total;\n\n    public function initialize()\n    {\n        $eventsManager = new Manager();\n\n        $eventsManager-&gt;attach(\n            'model:beforeSave',\n            function (Event $event, $invoice) {\n                if ($invoice-&gt;inv_total &lt; 1) {\n                    return false;\n                }\n\n                return true;\n            }\n        );\n\n        $this-&gt;setEventsManager($eventsManager);\n    }\n}\n</code></pre> <p>In the example given above, the Events Manager only acts as a bridge between an object and a listener (the anonymous function). Events will be fired to the listener when <code>Invoices</code> are saved:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = new Invoices();\n$invoice-&gt;inv_cst_id = 10;\n$invoice-&gt;inv_title = 'Invoice for ACME Inc.';\n\n$invoice-&gt;save();\n</code></pre> <p>If we want all objects created in our application use the same EventsManager, then we need to assign it to the Models Manager when setting it in the DI container:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Mvc\\Model\\Manager as ModelsManager;\n\n$container = new FactoryDefault();\n$container-&gt;setShared(\n    'modelsManager',\n    function () {\n        $eventsManager = new Manager();\n\n        $eventsManager-&gt;attach(\n            'model:beforeSave',\n            function (Event $event, $model) {\n                if (get_class($model) === Invoices::class) {\n                    if ($model-&gt;inv_total &lt; 1) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n        );\n\n        $modelsManager = new ModelsManager();\n        $modelsManager-&gt;setEventsManager($eventsManager);\n\n        return $modelsManager;\n    }\n);\n</code></pre> <p>If a listener returns false that will stop the operation that is executing currently.</p>"},{"location":"db-models-events/#logging-sql-statements","title":"Logging SQL Statements","text":"<p>When using high-level abstraction components such as Phalcon\\Mvc\\Model to access a database, it is difficult to understand which statements are finally sent to the database system. Phalcon\\Mvc\\Model is supported internally by Phalcon\\Db. Phalcon\\Logger interacts with Phalcon\\Db, providing logging capabilities on the database abstraction layer, thus allowing us to log SQL statements as they happen.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\n\n$container = new FactoryDefault();\n$container-&gt;set(\n    'db',\n    function () {\n        $eventsManager = new Manager();\n        $adapter = new Stream('/storage/logs/db.log');\n        $logger  = new Logger(\n            'messages',\n            [\n                'main' =&gt; $adapter,\n            ]\n        );\n\n        $eventsManager-&gt;attach(\n            'db:beforeQuery',\n            function ($event, $connection) use ($logger) {\n                $logger-&gt;info(\n                    $connection-&gt;getSQLStatement()\n                );\n            }\n        );\n\n        $connection = new Mysql\\(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'phalcon',\n            ]\n        );\n\n        $connection-&gt;setEventsManager($eventsManager);\n\n        return $connection;\n    }\n);\n</code></pre> <p>As models access the default database connection, all SQL statements that are sent to the database system will be logged in the file:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = new Invoices();\n$invoice-&gt;inv_cst_id = 10;\n$invoice-&gt;inv_title  = 'Invoice for ACME Inc.';\n$invoice-&gt;inv_total  = 10000;\n\nif ($invoice-&gt;save() === false) {\n    echo 'Cannot save robot';\n}\n</code></pre> <p>As above, the file /storage/logs/db.log will contain something like this:</p> <p><code>[Mon, 30 Apr 12 13:47:18 -0500][DEBUG][Resource Id #77] INSERT INTO co_invoices</code> <code>(inv_cst_id, inv_title, inv_total) VALUES (10, 'Invoice for ACME Inc.', 10000)</code></p>"},{"location":"db-models-events/#profiling-sql-statements","title":"Profiling SQL Statements","text":"<p>Using the Phalcon\\Db, the underlying component of Phalcon\\Mvc\\Model, it is possible to profile the SQL statements generated by the ORM in order to analyze the performance of database operations. Analyzing the logs will help in identifying bottlenecks in your SQL code:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Profiler;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Db\\Adapter\\Pdo;\n\n$container = new FactoryDefault();\n$container-&gt;set(\n    'profiler',\n    function () {\n        return new Profiler();\n    },\n    true\n);\n\n$container-&gt;set(\n    'db',\n    function () use ($container) {\n        $manager  = new Manager();\n        $profiler = $container-&gt;getProfiler();\n\n        $manager-&gt;attach(\n            'db',\n            function ($event, $connection) use ($profiler) {\n                if ($event-&gt;getType() === 'beforeQuery') {\n                    $profiler-&gt;startProfile(\n                        $connection-&gt;getSQLStatement()\n                    );\n                }\n\n                if ($event-&gt;getType() === 'afterQuery') {\n                    $profiler-&gt;stopProfile();\n                }\n            }\n        );\n\n        $connection = new Mysql(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'phalcon',\n            ]\n        );\n\n        // Assign the eventsManager to the db adapter instance\n        $connection-&gt;setEventsManager($manager);\n\n        return $connection;\n    }\n);\n</code></pre> <p>Profiling some queries:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\nInvoices::find();\nInvoices::find(\n    [\n        'order' =&gt; 'inv_cst_id, inv_title',\n    ]\n);\nInvoices::find(\n    [\n        'limit' =&gt; 30,\n    ]\n);\n\n$profiles = $container-&gt;get('profiler')-&gt;getProfiles();\n\nforeach ($profiles as $profile) {\n    echo 'SQL: ', \n        $profile-&gt;getSQLStatement(), \n        PHP_EOL,\n        'Start: ',\n        $profile-&gt;getInitialTime(),\n        PHP_EOL,\n        'Final: ',\n        $profile-&gt;getFinalTime(),\n        PHP_EOL,\n        'Elapsed: ',\n        $profile-&gt;getTotalElapsedSeconds(),\n        PHP_EOL\n    );\n}\n</code></pre> <p>Each generated profile contains the duration in milliseconds that each instruction takes to complete as well as the generated SQL statement.</p>"},{"location":"db-models-metadata/","title":"Model Metadata","text":""},{"location":"db-models-metadata/#overview","title":"Overview","text":"<p>When using Phalcon\\Mvc\\Model classes, which correspond to actual tables in the database, Phalcon needs to know essential information regarding those tables, such as fields, data types, primary and foreign keys as well as relationships. The Phalcon\\Mvc\\Model\\MetaData object is offering this functionality, transparently querying the database and generating the necessary data from the database schema. The data can then be stored in a data store (such as Redis, APCu etc.) to ensure that the database is not queried for the schema every time a query is executed.</p> <p>NOTE</p> <p>During deployments to production, please ensure that you always invalidate the metaData cache so that database changes that propagated during your deployment are available in your application. The metaData cache will be rebuilt with all the necessary changes.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Mvc\\Model\\MetaData;\n\n$invoice = new Invoices();\n\n/** @var MetaData\\ $metadata */\n$metadata = $invoice-&gt;getModelsMetaData();\n\n$attributes = $metadata-&gt;getAttributes($invoice);\nprint_r($attributes);\n\n$dataTypes = $metadata-&gt;getDataTypes($invoice);\nprint_r($dataTypes);\n</code></pre> <p>The above code will print the field names and also the fields to field types array. We use <code>attributes</code> as an alias of <code>fields</code>.</p> <pre><code>[\n    [0] =&gt; inv_id\n    [1] =&gt; inv_cst_id\n    [2] =&gt; inv_status_flag\n    [3] =&gt; inv_title\n    [4] =&gt; inv_total\n    [5] =&gt; inv_created_at\n    [6] =&gt; inv_created_by\n    [7] =&gt; inv_updated_at\n    [8] =&gt; inv_updated_by\n]\n\n[\n    [inv_id]          =&gt; 0,\n    [inv_cst_id]      =&gt; 0,\n    [inv_status_flag] =&gt; 0,\n    [inv_title]       =&gt; 2,\n    [inv_total]       =&gt; 0,\n    [inv_created_at]  =&gt; 4,\n    [inv_created_by]  =&gt; 0,\n    [inv_updated_at]  =&gt; 4,\n    [inv_updated_by]  =&gt; 0,\n]\n</code></pre>"},{"location":"db-models-metadata/#constants","title":"Constants","text":"<p>Phalcon\\Mvc\\Model\\MetaData exposes a number of constants that can be used to retrieve attributes from the internal collection.</p> Name Description <code>MODELS_ATTRIBUTES</code> Every column in the mapped table <code>MODELS_AUTOMATIC_DEFAULT_INSERT</code> Fields that must be ignored from <code>INSERT</code> SQL statements <code>MODELS_AUTOMATIC_DEFAULT_UPDATE</code> Fields that must be ignored from <code>UPDATE</code> SQL statements <code>MODELS_COLUMN_MAP</code> Column map (aliases) <code>MODELS_DATA_TYPES</code> Every column and its data type <code>MODELS_DATA_TYPES_BIND</code> How every column must be bound/casted <code>MODELS_DATA_TYPES_NUMERIC</code> The columns that have numeric data types <code>MODELS_DEFAULT_VALUES</code> Default values for columns <code>MODELS_EMPTY_STRING_VALUES</code> Columns that allow empty strings <code>MODELS_IDENTITY_COLUMN</code> The identity column. <code>false</code> if the model does not have an identity column <code>MODELS_NON_PRIMARY_KEY</code> Every column that is not part of the primary key <code>MODELS_NOT_NULL</code> Every column that does not allow <code>null</code> values <code>MODELS_PRIMARY_KEY</code> Every column part of the primary key <code>MODELS_REVERSE_COLUMN_MAP</code> Reverse column map (aliases)"},{"location":"db-models-metadata/#methods","title":"Methods","text":"<p><pre><code>public function getAttributes(ModelInterface $model): array\n</code></pre> Returns table attributes names (fields)</p> <pre><code>print_r(\n    $metaData-&gt;getAttributes(\n        new Invoices()\n    )\n);\n</code></pre> <p><pre><code>public function getAutomaticCreateAttributes(\n    ModelInterface $model\n): array\n</code></pre> Returns attributes that must be ignored from the <code>INSERT</code> SQL generation</p> <pre><code>print_r(\n    $metaData-&gt;getAutomaticCreateAttributes(\n        new Invoices()\n    )\n);\n</code></pre> <p><pre><code>public function getAutomaticUpdateAttributes(\n    ModelInterface $model\n): array\n</code></pre> Returns attributes that must be ignored from the <code>UPDATE</code> SQL generation</p> <pre><code>print_r(\n    $metaData-&gt;getAutomaticUpdateAttributes(\n        new Invoices()\n    )\n);\n</code></pre> <p><pre><code>public function getBindTypes(ModelInterface $model): array\n</code></pre> Returns attributes and their bind data types</p> <pre><code>print_r(\n    $metaData-&gt;getBindTypes(\n        new Invoices()\n    )\n);\n</code></pre> <pre><code>public function getColumnMap(ModelInterface $model): array\n</code></pre> <p>Returns the column map if any</p> <pre><code>print_r(\n    $metaData-&gt;getColumnMap(\n        new Invoices()\n    )\n);\n</code></pre> <p><pre><code>public function getDefaultValues(ModelInterface $model): array\n</code></pre> Returns attributes (which have default values) and their default values</p> <pre><code> print_r(\n     $metaData-&gt;getDefaultValues(\n         new Invoices()\n     )\n );\n</code></pre> <p><pre><code>public function getDataTypes(ModelInterface $model): array\n</code></pre> Returns attributes and their data types</p> <pre><code>print_r(\n    $metaData-&gt;getDataTypes(\n        new Invoices()\n    )\n);\n</code></pre> <p><pre><code>public function getDataTypesNumeric(ModelInterface $model): array\n</code></pre> Returns attributes which types are numerical</p> <pre><code>print_r(\n    $metaData-&gt;getDataTypesNumeric(\n        new Invoices()\n    )\n);\n</code></pre> <p><pre><code>public function getEmptyStringAttributes(\n    ModelInterface $model\n): array\n</code></pre> Returns attributes allow empty strings</p> <pre><code>print_r(\n    $metaData-&gt;getEmptyStringAttributes(\n        new Invoices()\n    )\n);\n</code></pre> <p><pre><code>public function getIdentityField(ModelInterface $model): string\n</code></pre> Returns the name of identity field (if one is present)</p> <pre><code>print_r(\n    $metaData-&gt;getIdentityField(\n        new Invoices()\n    )\n);\n</code></pre> <p><pre><code>public function getNonPrimaryKeyAttributes(\n    ModelInterface $model\n): array\n</code></pre> Returns an array of fields which are not part of the primary key</p> <pre><code>print_r(\n    $metaData-&gt;getNonPrimaryKeyAttributes(\n        new Invoices()\n    )\n);\n</code></pre> <p><pre><code>public function getNotNullAttributes(ModelInterface $model): array\n</code></pre> Returns an array of not null attributes</p> <pre><code>print_r(\n    $metaData-&gt;getNotNullAttributes(\n        new Invoices()\n    )\n);\n</code></pre> <p><pre><code>public function getPrimaryKeyAttributes(\n    ModelInterface $model\n): array\n</code></pre> Returns an array of fields which are part of the primary key</p> <pre><code>print_r(\n    $metaData-&gt;getPrimaryKeyAttributes(\n        new Invoices()\n    )\n);\n</code></pre> <p><pre><code>public function getReverseColumnMap(\n    ModelInterface $model\n): array\n</code></pre> Returns the reverse column map if any</p> <pre><code>print_r(\n    $metaData-&gt;getReverseColumnMap(\n        new Invoices()\n    )\n);\n</code></pre> <p><pre><code>public function getStrategy(): StrategyInterface\n</code></pre> Return the strategy to obtain the meta-data</p> <p><pre><code>public function hasAttribute(\n    ModelInterface $model, \n    string $attribute\n): bool\n</code></pre> Check if a model has certain attribute</p> <pre><code>print_r(\n    $metaData-&gt;hasAttribute(\n        new Invoices(),\n        \"inv_title\"\n    )\n);\n</code></pre> <p><pre><code>public function isEmpty(): bool\n</code></pre> Checks if the internal meta-data container is empty</p> <pre><code>print_r(\n    $metaData-&gt;isEmpty()\n);\n</code></pre> <pre><code>public function read(string $key): array | null\n</code></pre> <p>Reads metadata from the adapter</p> <p><pre><code>final public function readColumnMap(\n    ModelInterface $model\n): array | null\n</code></pre> Reads the ordered/reversed column map for certain model</p> <pre><code>print_r(\n    $metaData-&gt;readColumnMap(\n        new Invoices()\n    )\n);\n</code></pre> <p><pre><code>final public function readColumnMapIndex(\n    ModelInterface $model, \n    int $index\n)\n</code></pre> Reads column-map information for certain model using a <code>MODEL_*</code> constant</p> <pre><code>print_r(\n    $metaData-&gt;readColumnMapIndex(\n        new Invoices(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n</code></pre> <p><pre><code>final public function readMetaData(ModelInterface $model): array\n</code></pre> Reads the complete meta-data for certain model</p> <pre><code>print_r(\n    $metaData-&gt;readMetaData(\n        new Invoices()\n    )\n);\n</code></pre> <p><pre><code>final public function readMetaDataIndex(\n    ModelInterface $model, \n    int $index\n)\n</code></pre> Reads meta-data for certain model</p> <pre><code>print_r(\n    $metaData-&gt;readMetaDataIndex(\n        new Invoices(),\n        0\n    )\n);\n</code></pre> <p><pre><code>public function reset(): void\n</code></pre> Resets internal meta-data in order to regenerate it</p> <pre><code> $metaData-&gt;reset();\n</code></pre> <p><pre><code>public function setAutomaticCreateAttributes(\n    ModelInterface $model, \n    array $attributes\n): void\n</code></pre> Set the attributes that must be ignored from the INSERT SQL generation</p> <pre><code>$metaData-&gt;setAutomaticCreateAttributes(\n    new Invoices(),\n    [\n        \"inv_created_at\" =&gt; true,\n    ]\n);\n</code></pre> <p><pre><code>public function setAutomaticUpdateAttributes(\n    ModelInterface $model, \n    array $attributes\n): void\n</code></pre> Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>$metaData-&gt;setAutomaticUpdateAttributes(\n    new Invoices(),\n    [\n        \"inv_updated_at\" =&gt; true,\n    ]\n);\n</code></pre> <p><pre><code>public function setEmptyStringAttributes(\n    ModelInterface $model, \n    array $attributes\n): void\n</code></pre> Set the attributes that allow empty string values</p> <pre><code>$metaData-&gt;setEmptyStringAttributes(\n    new Invoices(),\n    [\n        \"inv_title\" =&gt; true,\n    ]\n);\n</code></pre> <p><pre><code>public function setStrategy(StrategyInterface $strategy): void\n</code></pre> Set the meta-data extraction strategy</p> <p><pre><code>public function write(string $key, array $data): void\n</code></pre> Writes the metadata to adapter</p> <p><pre><code>final public function writeMetaDataIndex(\n    ModelInterface $model, \n    int $index, \n    mixed $data\n): void\n</code></pre> Writes meta-data for certain model using a MODEL_* constant</p> <pre><code>print_r(\n    $metaData-&gt;writeColumnMapIndex(\n        new Invoices(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"title\" =&gt; \"inv_title\",\n        ]\n    )\n);\n</code></pre> <p><pre><code>final protected function initialize(\n    ModelInterface $model, \n    mixed $key, \n    mixed $table, \n    mixed $schema\n)\n</code></pre> Initialize the metadata for certain table</p>"},{"location":"db-models-metadata/#adapters","title":"Adapters","text":"<p>Retrieving the metadata is an expensive database operation and we certainly do not want to perform it every time we run a query. We can however use one of many adapters available in order to cache the metadata.</p> <p>NOTE</p> <p>For local development, the Phalcon\\Mvc\\Models\\MetaData\\Memory adapter is recommended so that any changes to the database can be reflected immediately. </p> Adapter Description Phalcon\\Mvc\\Models\\MetaData\\Apcu This adapter uses the Alternative PHP Cache (APC) to store the table metadata. (production) Phalcon\\Mvc\\Models\\MetaData\\Libmemcached This adapter uses the Memcached Server to store the table metadata. (production) Phalcon\\Mvc\\Models\\MetaData\\Memory This adapter uses memory. The metadata is cached only during the request. (development) Phalcon\\Mvc\\Models\\MetaData\\Redis This adapter uses Redis to store the table metadata. (production) Phalcon\\Mvc\\Models\\MetaData\\Stream This adapter uses plain files to store metadata. (not for production)"},{"location":"db-models-metadata/#apcu","title":"APCu","text":"<p>This adapter uses the Alternative PHP Cache (APC) to store the table metadata. The extension must be present in your system for this metadata cache to work. If the server is restarted, the data will be lost. This adapter is suitable for production applications.</p> <p>The adapter receives a Phalcon\\Cache\\AdapterFactory class in order to instantiate the relevant cache object. You can also pass an array with additional options for the cache to operate.</p> <p>The default prefix is <code>ph-mm-apcu-</code> and the lifetime is <code>172,000</code> (48 hours).</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\AdapterFactory;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Mvc\\Model\\MetaData\\Apcu;\nuse Phalcon\\Storage\\SerializerFactory;\n\n$container = new FactoryDefault();\n$container-&gt;set(\n    'modelsMetadata',\n    function () {\n        $serializerFactory = new SerializerFactory();\n        $adapterFactory    = new AdapterFactory($serializerFactory);\n        $options = [\n            'lifetime' =&gt; 86400,\n            'prefix'   =&gt; 'my-prefix',\n        ];\n\n        return new Apcu($adapterFactory, $options);\n    }\n);\n</code></pre>"},{"location":"db-models-metadata/#libmemcached","title":"Libmemcached","text":"<p>This adapter uses the Memcached Server to store the table metadata. The extension must be present in your system for this metadata cache to work.  This adapter is suitable for production applications.</p> <p>The adapter receives a Phalcon\\Cache\\AdapterFactory class in order to instantiate the relevant cache object. You can also pass an array with additional options for the cache to operate.</p> <p>The default prefix is <code>ph-mm-memc-</code> and the lifetime is <code>172,000</code> (48 hours). The <code>persistenId</code> is preset to <code>php-mm-mcid-</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\AdapterFactory;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Mvc\\Model\\MetaData\\Libmemcached;\nuse Phalcon\\Storage\\SerializerFactory;\n\n$container = new FactoryDefault();\n$container-&gt;set(\n    'modelsMetadata',\n    function () {\n        $serializerFactory = new SerializerFactory();\n        $adapterFactory    = new AdapterFactory($serializerFactory);\n        $options = [\n            'servers' =&gt; [\n                0 =&gt; [\n                    'host'   =&gt; '127.0.0.1',\n                    'port'   =&gt; 11211,\n                    'weight' =&gt; 1\n                ],   \n            ],\n            'lifetime' =&gt; 86400,\n            'prefix'   =&gt; 'my-prefix',\n        ];\n\n        return new Libmemcached($adapterFactory, $options);\n    }\n);\n</code></pre>"},{"location":"db-models-metadata/#memory","title":"Memory","text":"<p>This adapter uses the server's memory to store the metadata cache. The cache is available only during the request, and then the cache is lost. This cache is more suitable for development, since it accommodates the frequent changes in the database during development. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Mvc\\Model\\MetaData\\Memory;\n\n$container = new FactoryDefault();\n$container-&gt;set(\n    'modelsMetadata',\n    function () {\n        return new Memory();\n    }\n);\n</code></pre>"},{"location":"db-models-metadata/#redis","title":"Redis","text":"<p>This adapter uses the Redis to store the table metadata. The extension must be present in your system for this metadata cache to work.  This adapter is suitable for production applications.</p> <p>The adapter receives a Phalcon\\Cache\\AdapterFactory class in order to instantiate the relevant cache object. You can also pass an array with additional options for the cache to operate.</p> <p>The default prefix is <code>ph-mm-reds-</code> and the lifetime is <code>172,000</code> (48 hours).</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\AdapterFactory;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Mvc\\Model\\MetaData\\Redis;\nuse Phalcon\\Storage\\SerializerFactory;\n\n$container = new FactoryDefault();\n$container-&gt;set(\n    'modelsMetadata',\n    function () {\n        $serializerFactory = new SerializerFactory();\n        $adapterFactory    = new AdapterFactory($serializerFactory);\n        $options = [\n            'host'     =&gt; '127.0.0.1',\n            'port'     =&gt; 6379,\n            'index'    =&gt; 1,\n            'lifetime' =&gt; 86400,\n            'prefix'   =&gt; 'my-prefix',\n        ];\n\n        return new Redis($adapterFactory, $options);\n    }\n);\n</code></pre>"},{"location":"db-models-metadata/#stream","title":"Stream","text":"<p>This adapter uses the file system to store the table metadata. This adapter is suitable for production applications but not recommended since it introduces an increase in I/O. </p> <p>The adapter can accept a <code>metaDadaDir</code> option with a directory on where the metadata will be stored. The default directory is the current directory.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Mvc\\Model\\MetaData\\Stream;\n\n$container = new FactoryDefault();\n$container-&gt;set(\n    'modelsMetadata',\n    function () {\n        $options = [\n            'metaDataDir' =&gt; '/app/storage/cache/metaData',\n        ];\n\n        return new Stream($options);\n    }\n);\n</code></pre> <p>You can use the <code>orm.exception_on_failed_metadata_save</code> option in your <code>php.ini</code> file to force the component to throw an exception if there is an error storing the metadata or if the target directory is not writeable.</p> <pre><code>orm.exception_on_failed_metadata_save = true\n</code></pre>"},{"location":"db-models-metadata/#strategies","title":"Strategies","text":"<p>The default strategy to obtain the model's metadata is database introspection. Using this strategy, the information schema is used to identify the fields in a table, its primary key, nullable fields, data types, etc.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\AdapterFactory;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Mvc\\Model\\MetaData\\Apcu;\nuse Phalcon\\Mvc\\Model\\MetaData\\Strategy\\Introspection;\nuse Phalcon\\Storage\\SerializerFactory;\n\n$container = new FactoryDefault();\n$container-&gt;set(\n    'modelsMetadata',\n    function () {\n        $serializerFactory = new SerializerFactory();\n        $adapterFactory    = new AdapterFactory($serializerFactory);\n        $options = [\n            'lifetime' =&gt; 86400,\n            'prefix'   =&gt; 'my-prefix',\n        ];\n\n        $metadata = new Apcu($adapterFactory, $options);\n        $metadata-&gt;setStrategy(new Introspection());\n\n        return $metadata;\n    }\n);\n</code></pre>"},{"location":"db-models-metadata/#introspection","title":"Introspection","text":"<p>This strategy does not require any customization and is implicitly used by all the metadata adapters.</p>"},{"location":"db-models-metadata/#annotations","title":"Annotations","text":"<p>This strategy makes use of annotations to describe the columns in a model. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    /**\n     * @Primary\n     * @Identity\n     * @Column(type='integer', nullable=false)\n     */\n    public $inv_id;\n\n    /**\n     * @Column(type='integer', nullable=false)\n     */\n    public $inv_cst_id;\n\n    /**\n     * @Column(type='string', length=70, nullable=false)\n     */\n    public $inv_title;\n\n    /**\n     * @Column(type='double', nullable=false)\n     */\n    public $inv_total;\n}\n</code></pre> <p>Annotations must be placed in properties that are mapped to columns in the mapped source. Properties without the <code>@Column</code> annotation are handled as simple class attributes.</p> <p>The following annotations are supported:</p> Name Description <code>@Primary</code> Mark the field as part of the table's primary key <code>@Identity</code> The field is an auto_increment/serial column <code>@Column</code> This marks an attribute as a mapped column <p>The annotation <code>@Column</code> supports the following parameters:</p> Name Description <code>column</code> Real column name <code>type</code> The column's type: <code>char</code>, <code>biginteger</code>, <code>blob</code>, <code>boolean</code>, <code>date</code>, <code>datetime</code>, <code>decimal</code>, <code>integer</code>, <code>float</code>, <code>json</code>, <code>longblob</code>, <code>mediumblob</code>, <code>timestamp</code>, <code>tinyblob</code>, <code>text</code>, <code>varchar</code>/<code>string</code> (default) <code>length</code> The column's length if any <code>nullable</code> Set whether the column accepts <code>null</code> values or not <code>skip_on_insert</code> Skip this column on insert <code>skip_on_update</code> Skip this column on updates <code>allow_empty_string</code> Column allow empty strings <code>default</code> Default value <p>The annotations strategy could be set up as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache\\AdapterFactory;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Mvc\\Model\\MetaData\\Apcu;\nuse Phalcon\\Mvc\\Model\\MetaData\\Strategy\\Annotations;\nuse Phalcon\\Storage\\SerializerFactory;\n\n$container = new FactoryDefault();\n$container-&gt;set(\n    'modelsMetadata',\n    function () {\n        $serializerFactory = new SerializerFactory();\n        $adapterFactory    = new AdapterFactory($serializerFactory);\n        $options = [\n            'lifetime' =&gt; 86400,\n            'prefix'   =&gt; 'my-prefix',\n        ];\n\n        $metadata = new Apcu($adapterFactory, $options);\n        $metadata-&gt;setStrategy(new Annotations());\n\n        return $metadata;\n    }\n);\n</code></pre>"},{"location":"db-models-metadata/#manual","title":"Manual","text":"<p>Using the introspection strategies presented above, Phalcon can obtain the metadata for each model automatically. However, you have the option to define the metadata manually. This strategy overrides any strategy that has been set on the metadata manager. Columns added, modified or removed from the mapped table must be manually updated in the model for everything to work properly.</p> <p>To set the metadata, we use the <code>metaData</code> method in a model:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Db\\Column;\nuse Phalcon\\Mvc\\Model\\MetaData;\n\nclass Invoices extends Model\n{\n    public function metaData()\n    {\n        return array(\n            MetaData::MODELS_ATTRIBUTES =&gt; [\n                'inv_id',\n                'inv_cst_id',\n                'inv_status_flag',\n                'inv_title',\n                'inv_total',\n                'inv_created_at',\n                'inv_created_by',\n                'inv_updated_at',\n                'inv_updated_by',\n            ],\n\n            MetaData::MODELS_PRIMARY_KEY =&gt; [\n                'inv_id',\n            ],\n\n            MetaData::MODELS_NON_PRIMARY_KEY =&gt; [\n                'inv_cst_id',\n                'inv_status_flag',\n                'inv_title',\n                'inv_total',\n                'inv_created_at',\n                'inv_created_by',\n                'inv_updated_at',\n                'inv_updated_by',\n            ],\n\n            MetaData::MODELS_NOT_NULL =&gt; [\n                'inv_id',\n                'inv_cst_id',\n                'inv_status_flag',\n                'inv_title',\n                'inv_total',\n                'inv_created_at',\n                'inv_created_by',\n                'inv_updated_at',\n                'inv_updated_by',\n\n            MetaData::MODELS_DATA_TYPES =&gt; [\n                'inv_id'          =&gt; Column::TYPE_INTEGER,\n                'inv_cst_id'      =&gt; Column::TYPE_INTEGER,\n                'inv_status_flag' =&gt; Column::TYPE_INTEGER,\n                'inv_title'       =&gt; Column::TYPE_VARCHAR,\n                'inv_total'       =&gt; Column::TYPE_FLOAT,\n                'inv_created_at'  =&gt; Column::TYPE_DATETIME,\n                'inv_created_by'  =&gt; Column::TYPE_INTEGER,\n                'inv_updated_at'  =&gt; Column::TYPE_DATETIME,\n                'inv_updated_by'  =&gt; Column::TYPE_INTEGER,\n            ],\n\n            MetaData::MODELS_DATA_TYPES_NUMERIC =&gt; [\n                'inv_id'          =&gt; true,\n                'inv_cst_id'      =&gt; true,\n                'inv_status_flag' =&gt; true,\n                'inv_total'       =&gt; true,\n                'inv_created_by'  =&gt; true,\n                'inv_updated_by'  =&gt; true,\n            ],\n\n            MetaData::MODELS_IDENTITY_COLUMN =&gt; 'inv_id',\n\n            MetaData::MODELS_DATA_TYPES_BIND =&gt; [\n                'inv_id'          =&gt; Column::BIND_PARAM_INT,\n                'inv_cst_id'      =&gt; Column::BIND_PARAM_INT,\n                'inv_status_flag' =&gt; Column::BIND_PARAM_INT,\n                'inv_title'       =&gt; Column::BIND_PARAM_INT,\n                'inv_total'       =&gt; Column::BIND_PARAM_DECIMAL,\n                'inv_created_at'  =&gt; Column::BIND_PARAM_STR,\n                'inv_created_by'  =&gt; Column::BIND_PARAM_INT,\n                'inv_updated_at'  =&gt; Column::BIND_PARAM_STR,\n                'inv_updated_by'  =&gt; Column::BIND_PARAM_INT,\n            ],\n\n            MetaData::MODELS_AUTOMATIC_DEFAULT_INSERT =&gt; [\n                'inv_created_at' =&gt; true,\n                'inv_created_by' =&gt; true,\n                'inv_updated_at' =&gt; true,\n                'inv_updated_by' =&gt; true,\n            ],\n\n            MetaData::MODELS_AUTOMATIC_DEFAULT_UPDATE =&gt; [\n                'inv_created_at' =&gt; true,\n                'inv_created_by' =&gt; true,\n                'inv_updated_at' =&gt; true,\n                'inv_updated_by' =&gt; true,\n            ],\n\n            MetaData::MODELS_DEFAULT_VALUES =&gt; [\n                'inv_status_flag' =&gt; 0,\n            ],\n\n            MetaData::MODELS_EMPTY_STRING_VALUES =&gt; [\n                'inv_created_at' =&gt; true,\n                'inv_updated_at' =&gt; true,\n            ],\n        );\n    }\n}\n</code></pre>"},{"location":"db-models-metadata/#custom","title":"Custom","text":"<p>Phalcon offers the Phalcon\\Mvc\\Model\\MetaData\\Strategy\\StrategyInterface interface, allowing you to create your own Strategy class.</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Components\\Strategy;\n\nuse Phalcon\\Mvc\\ModelInterface;\nuse Phalcon\\Di\\DiInterface;\n\nclass MyStrategy StrategyInterface\n{\n    public function getColumnMaps(\n        ModelInterface $model, \n        DiInterface $container\n    ): array;\n\n    public function getMetaData(\n        ModelInterface $model, \n        DiInterface $container\n    ): array;\n}\n</code></pre>"},{"location":"db-models-relationships/","title":"Model Relationships","text":""},{"location":"db-models-relationships/#overview","title":"Overview","text":"<p>Database normalization is a process where data is split into different tables and links are created between those tables, in order to increase flexibility, reduce data redundancy and improve data integrity. Relationships are defined in the <code>initialize</code> method of each model. </p> <p>The following types of relationships are available: - one to one</p> <pre><code>hasOne(\n    string|array $fields, \n    string $referenceModel, \n    string|array $referencedFields, \n    array $options = null\n)\n\nhasOneThrough(\n    string|array $fields, \n    string $intermediateModel, \n    string|array $intermediateFields, \n    string|array $intermediateReferencedFields,\n    string $referenceModel, \n    string|array $referencedFields, \n    array $options = null\n)\n</code></pre> <ul> <li>one to many</li> </ul> <pre><code>hasMany(\n    string|array $fields, \n    string $referenceModel, \n    string|array $referencedFields, \n    array options = null\n)\n</code></pre> <ul> <li>many to one</li> </ul> <pre><code>belongsTo(\n    string|array $fields, \n    string $referenceModel, \n    string|array $referencedFields, \n    array options = null\n)\n</code></pre> <ul> <li>many to many</li> </ul> <pre><code>hasManyToMany(\n    string|array $fields, \n    string $intermediateModel, \n    string|array $intermediateFields, \n    string|array $intermediateReferencedFields,\n    string $referenceModel, \n    string|array $referencedFields, \n    array $options = null\n)\n</code></pre> <p>Relationships can be unidirectional or bidirectional, and each can be simple (a one to one model) or more complex (a combination of models). The model manager manages foreign key constraints for these relationships, the definition of these helps referential integrity as well as easy and fast access of related records to a model. Through the implementation of relations, it is easy to access data in related models from the source model easily and in a uniform way.</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;hasOne(\n            'inv_cst_id',\n            Customers::class,\n            'cst_id',\n            [\n                'alias'    =&gt; 'customers',\n                'reusable' =&gt; true,\n            ]\n        );\n    }\n}\n</code></pre>"},{"location":"db-models-relationships/#unidirectional","title":"Unidirectional","text":"<p>Unidirectional relations are those that are generated in relation to one another but not vice versa.</p>"},{"location":"db-models-relationships/#bidirectional","title":"Bidirectional","text":"<p>The bidirectional relations build relationships in both models and each model defines the inverse relationship of the other.</p>"},{"location":"db-models-relationships/#setup","title":"Setup","text":"<p>In Phalcon, relationships must be defined in the <code>initialize()</code> method of a model. The methods <code>belongsTo()</code>, <code>hasMany()</code>, <code>hasManyToMany()</code>, <code>hasOne()</code> and  <code>hasOneThrough()</code>, define the relationship between one or more fields from the current model to fields in another model. Each of these methods requires 3 parameters: </p> <ul> <li>local fields </li> <li>referenced model </li> <li>referenced fields</li> </ul> Method Description <code>belongsTo</code> Defines a n-1 relationship <code>hasMany</code> Defines a 1-n relationship <code>hasManyToMany</code> Defines a n-n relationship <code>hasOne</code> Defines a 1-1 relationship <code>hasOneThrough</code> Defines a 1-1 relationship <p>The following schema shows 3 tables whose relations will serve us as an example regarding relationships:</p> <pre><code>create table co_invoices\n(\n    inv_id          int(10) auto_increment  primary key,\n    inv_cst_id      int(10)      null,\n    inv_status_flag tinyint(1)   null,\n    inv_title       varchar(100) null,\n    inv_total       float(10, 2) null,\n    inv_created_at  datetime     null\n);\n\ncreate table co_invoices_x_products\n(\n    ixp_inv_id      int(10),\n    inv_prd_id      int(10)\n);\n\ncreate table co_products\n(\n    prd_id          int(10) auto_increment  primary key,\n    prd_title       varchar(100) null,\n    prd_price       float(10, 2) null\n);\n</code></pre> <ul> <li>The model <code>Invoices</code> has many <code>InvoicesProducts</code>.</li> <li>The model <code>Products</code> has many <code>InvoicesProducts</code>.</li> <li>The model <code>InvoicesProducts</code> belongs to both <code>Invoices</code> and <code>Products</code> models as a many-to-one relation.</li> <li>The model <code>Invoices</code> has a relation many-to-many to <code>Products</code> through <code>InvoicesProducts</code>.</li> </ul> <p></p> <p>The models with their relations could be implemented as follows:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public $inv_id;\n    public $inv_cst_id;\n    public $inv_status_flag;\n    public $inv_title;\n    public $inv_total;\n    public $inv_created_at;\n\n    public function initialize()\n    {\n        $this-&gt;hasManyToMany(\n            'inv_id',\n            InvoicesProducts::class,\n            'ixp_inv_id',\n            'ixp_prd_id',\n            Products::class,\n            'prd_id',\n            [\n                'reusable' =&gt; true,\n                'alias'    =&gt; 'products',\n            ]\n        );\n\n        $this-&gt;hasMany(\n            'inv_id',\n            InvoicesProducts::class,\n            'ixp_inv_id',\n            [\n                'reusable' =&gt; true,\n                'alias'    =&gt; 'invoicesProducts'\n            ]\n        );\n    }\n}\n</code></pre> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass InvoicesProducts extends Model\n{\n    public $ixp_inv_id;\n    public $ixp_prd_id;\n\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            'ixp_inv_id',\n            Invoices::class,\n            'inv_id',\n            [\n                'reusable' =&gt; true,\n                'alias'    =&gt; 'invoice'\n            ]\n        );\n\n        $this-&gt;belongsTo(\n            'ixp_prd_id',\n            Products::class,\n            'prd_id',\n            [\n                'reusable' =&gt; true,\n                'alias'    =&gt; 'product'\n            ]\n        );\n    }\n}\n</code></pre> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Products extends Model\n{\n    public $prd_id;\n    public $prd_title;\n    public $prd_price;\n    public $prd_created_at;\n\n    public function initialize()\n    {\n        // To the intermediate table\n        $this-&gt;hasMany(\n            'prd_id',\n            InvoicesProducts::class,\n            'ixp_prd_id'\n        );\n\n        // Many to many -&gt; Invoices\n        $this-&gt;hasManyToMany(\n            'prd_id',\n            InvoicesProducts::class,\n            'ixp_prd_id',\n            'ixp_inv_id',\n            Invoices::class,\n            'inv_id',\n            [\n                'reusable' =&gt; true,\n                'alias'    =&gt; 'invoices',\n            ]\n        );\n    }\n}\n</code></pre> <p>The first parameter indicates the field of the local model used in the relationship; the second indicates the name of the referenced model, and the third the field name in the referenced model. You could also use arrays to define multiple fields in the relationship.</p> <p>Many to many relationships require 3 models and define the attributes involved in the relationship:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public $inv_id;\n    public $inv_cst_id;\n    public $inv_status_flag;\n    public $inv_title;\n    public $inv_total;\n    public $inv_created_at;\n\n    public function initialize()\n    {\n        $this-&gt;hasManyToMany(\n            'inv_id',\n            InvoicesProducts::class,\n            'ixp_inv_id',\n            'ixp_prd_id',\n            Products::class,\n            'prd_id',\n            [\n                'reusable' =&gt; true,\n                'alias'    =&gt; 'products',\n            ]\n        );\n    }\n}\n</code></pre>"},{"location":"db-models-relationships/#parameters","title":"Parameters","text":"<p>Depending on the needs of our application we might want to store data in one table, that describe different behaviors. For instance, you might want to only have a table called <code>co_customers</code> which has a field <code>cst_status_flag</code> describing the status of the customer (e.g. active, inactive, etc.). </p> <p>Using relationships, you can get only those <code>Customers</code> that relate to our <code>Invoices</code> that have a certain <code>cst_status_flag</code>. Defining that constraint in the relationship allows you to let the model do all the work.</p> <p>It also accepts a closure, which is evaluated every time before the related records are accessed. This enables the conditions to be automatically updated between queries.</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public $inv_id;\n    public $inv_cst_id;\n    public $inv_status_flag;\n    public $inv_title;\n    public $inv_total;\n    public $inv_created_at;\n\n    public function initialize()\n    {\n        $this-&gt;hasMany(\n            'inv_cst_id',\n            Customers::class,\n            'cst_id',\n            [\n                'reusable' =&gt; true,\n                'alias'    =&gt; 'customersActive',\n                'params'   =&gt; [\n                    'conditions' =&gt; 'cst_status_flag = :status:',\n                    'bind'       =&gt; [\n                        'status' =&gt; 1,\n                     ]\n                ]\n            ]\n        );\n\n        $container = $this-&gt;getDI();\n\n        $this-&gt;hasMany(\n            'inv_cst_id',\n            Customers::class,\n            'cst_id',\n            [\n                'reusable' =&gt; true,\n                'alias'    =&gt; 'customersNearby',\n                'params'   =&gt; function() use ($container) {\n                    return [\n                        'conditions' =&gt; 'cst_location = :location:',\n                        'bind'       =&gt; [\n                            // Location can change between queries\n                            'location' =&gt; $container-&gt;getShared('myLocationService')-&gt;myLocation,\n                         ]\n                    ];\n                }\n            ]\n        );\n    }\n}\n</code></pre>"},{"location":"db-models-relationships/#multiple-fields","title":"Multiple Fields","text":"<p>There are times, where relationships need to be defined on a combination of fields and not only one. Consider the following example:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Products extends Model\n{\n    public $prd_id;\n    public $prd_type_flag;\n    public $prd_name;\n}\n</code></pre> <p>and</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Parts extends Model\n{\n    public $par_id;\n    public $par_prd_id;\n    public $par_par_id;\n    public $par_type_flag;\n    public $par_name;\n}\n</code></pre> <p>In the above we have a <code>Products</code> model which has <code>prd_id</code>, <code>prd_type_flag</code> and <code>prd_name</code> fields. The <code>Parts</code> model contains <code>par_id</code>, <code>par_prd_id</code>, <code>par_type_flag</code> and <code>par_name</code>. The relationship exists based on the product unique id as well as the type.  </p> <p>Using the relationship options, as seen above, binding one field between the two models will not return the results we need. We can use an array with the necessary fields to define the relationship. </p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Products extends Model\n{\n    public $prd_id;\n    public $prd_type_flag;\n    public $prd_name;\n\n    public function initialize()\n    {\n        $this-&gt;hasOne(\n            [\n                'prd_id', \n                'prd_type_flag'\n            ],\n            Parts::class,\n            [\n                'par_prd_id', \n                'par_type_flag'\n            ],\n            [\n                'reusable' =&gt; true, // cache\n                'alias'    =&gt; 'parts',\n            ]\n        );\n    }\n}\n</code></pre> <p>NOTE</p> <p>field mappings in the relationship are one for one i.e. the first field of the source model array matches the first field of the target array etc. The field count must be identical in both source and target models.</p>"},{"location":"db-models-relationships/#accessing","title":"Accessing","text":"<p>There are several ways that we can access the relationships of a model.</p> <ul> <li>Magic <code>__get</code>, <code>__set</code></li> <li>Magic <code>get*</code></li> <li><code>getRelated</code></li> </ul>"},{"location":"db-models-relationships/#__get","title":"<code>__get()</code>","text":"<p>You can use the magic method to access the relationship. Assigning an <code>alias</code> to the relationship simplifies accessing the related data. The name of the property is the same as the one defined in the <code>alias</code>.</p> <pre><code>&lt;?php\n\n$customer = Customers::findFirst(\n    [\n        'conditions' =&gt; 'cst_id = :customerId:',\n        'bind'       =&gt; [\n            'customerId' =&gt; 1,\n        ],\n    ]\n);\n\nforeach ($customer-&gt;invoices as $invoice) {\n    echo $invoice-&gt;inv_title;\n}\n</code></pre> <p>or for a many to many relationship (see models above):</p> <pre><code>&lt;?php\n\n$invoice = Invoices::findFirst(\n    [\n        'conditions' =&gt; 'inv_cst_id = :customerId:',\n        'bind'       =&gt; [\n            'customerId' =&gt; 1,\n        ],\n    ]\n);\n\nforeach ($invoice-&gt;invoicesProducts as $product) {\n    echo $invoice-&gt;product-&gt;prd_name;\n}\n\nforeach ($invoice-&gt;products as $product) {\n    echo $invoice-&gt;prd_name;\n}\n</code></pre> <p>Using the magic <code>__get</code> allows you to access the relationship directly but does not offer additional functionality such as filtering or ordering on the relationship.</p>"},{"location":"db-models-relationships/#get","title":"<code>get*()</code>","text":"<p>You can access the same relationship by using a getter method, starting with get and using the name of the relationship.</p> <pre><code>&lt;?php\n\n$customer = Customers::findFirst(\n    [\n        'conditions' =&gt; 'cst_id = :customerId:',\n        'bind'       =&gt; [\n            'customerId' =&gt; 1,\n        ],\n    ]\n);\n\nforeach ($customer-&gt;getInvoices() as $invoice) {\n    echo $invoice-&gt;inv_title;\n}\n</code></pre> <p>or for a many to many relationship (see models above):</p> <p><pre><code>&lt;?php\n\n$invoice = Invoices::findFirst(\n    [\n        'conditions' =&gt; 'inv_cst_id = :customerId:',\n        'bind'       =&gt; [\n            'customerId' =&gt; 1,\n        ],\n    ]\n);\n\nforeach ($invoice-&gt;getInvoiceProducts() as $product) {\n    echo $invoice-&gt;product-&gt;prd_name;\n}\n\nforeach ($invoice-&gt;getProducts() as $product) {\n    echo $invoice-&gt;prd_name;\n}\n</code></pre> This magic getter also allows us to perform certain operations when accessing the relationship such as ordering the relationship:</p> <p><pre><code>&lt;?php\n\n$invoice = Invoices::findFirst(\n    [\n        'conditions' =&gt; 'inv_cst_id = :customerId:',\n        'bind'       =&gt; [\n            'customerId' =&gt; 1,\n        ],\n    ]\n);\n\n$products = $invoice-&gt;getProducts(\n    [\n        'order' =&gt; 'prd_name',\n    ]\n);\nforeach ($products as $product) {\n    echo $invoice-&gt;prd_name;\n}\n</code></pre> You can also add additional conditionals in the relationship:</p> <pre><code>&lt;?php\n\n$invoice = Invoices::findFirst(\n    [\n        'conditions' =&gt; 'inv_cst_id = :customerId:',\n        'bind'       =&gt; [\n            'customerId' =&gt; 1,\n        ],\n    ]\n);\n\n$products = $invoice-&gt;getProducts(\n    [\n        'prd_created_at = :date:',\n        'bind' =&gt; [\n            'date' =&gt; '2019-12-25',\n        ],\n    ]\n);\n\nforeach ($products as $product) {\n    echo $invoice-&gt;prd_name;\n}\n</code></pre> <p>To get the same records manually:</p> <pre><code>&lt;?php\n\n$invoice = Invoices::findFirst(\n    [\n        'conditions' =&gt; 'inv_cst_id = :customerId:',\n        'bind'       =&gt; [\n            'customerId' =&gt; 1,\n        ],\n    ]\n);\n\n\n$invoicesProducts = InvoicesProducts::find(\n    [\n        'conditions' =&gt; 'ixp_inv_id = :invoiceId:',\n        'bind'       =&gt; [\n            'invoiceId' =&gt; $invoice-&gt;inv_id,\n        ],\n    ]\n);\n\n$productIds = [];\nforeach ($invoicesProducts as $intermediate) {\n    $productIds[] = $intermediate-&gt;ixp_prd_id;\n}\n\n$products = Products::find(\n    [\n        'conditions' =&gt; 'prd_id IN ({array:productIds})',\n        'bind'       =&gt; [\n            'productIds' =&gt; $productIds,,\n        ],\n    ]\n);\n\nforeach ($products as $product) {\n    echo $invoice-&gt;prd_name;\n}\n</code></pre> <p>The prefix <code>get</code> is used to <code>find()</code>/<code>findFirst()</code> related records.</p> Type Implicit Method Returns Belongs-To <code>findFirst</code> Model instance of the related record directly Has-One <code>findFirst</code> Model instance of the related record directly Has-One-Through <code>findFirst</code> Model instance of the related record directly Has-Many <code>find</code> Collection of model instances of the referenced model Has-Many-to-Many (complex query) Collection of model instances of the referenced model (<code>inner join</code>) <p>You can also use the <code>count</code> prefix to return an integer denoting the count of the related records:</p> <pre><code>&lt;?php\n\n$invoice = Invoices::findFirst(\n    [\n        'conditions' =&gt; 'inv_cst_id = :customerId:',\n        'bind'       =&gt; [\n            'customerId' =&gt; 1,\n        ],\n    ]\n);\n\necho $invoice-&gt;countProducts();\n</code></pre>"},{"location":"db-models-relationships/#getrelated","title":"<code>getRelated()</code>","text":"<p>You can access the same relationship by using <code>getRelated()</code> and defining which relationship you want to get.</p> <pre><code>&lt;?php\n\n$customer = Customers::findFirst(\n    [\n        'conditions' =&gt; 'cst_id = :customerId:',\n        'bind'       =&gt; [\n            'customerId' =&gt; 1,\n        ],\n    ]\n);\n\nforeach ($customer-&gt;getRelated('invoices') as $invoice) {\n    echo $invoice-&gt;inv_title;\n}\n</code></pre> <p>or for a many to many relationship (see models above):</p> <p><pre><code>&lt;?php\n\n$invoice = Invoices::findFirst(\n    [\n        'conditions' =&gt; 'inv_cst_id = :customerId:',\n        'bind'       =&gt; [\n            'customerId' =&gt; 1,\n        ],\n    ]\n);\n\nforeach ($invoice-&gt;getRelated('products') as $product) {\n    echo $invoice-&gt;prd_name;\n}\n</code></pre> The second parameter of <code>getRelated()</code> is an array that offers additional options to be set such as filtering and ordering.</p> <pre><code>&lt;?php\n\n$invoice = Invoices::findFirst(\n    [\n        'conditions' =&gt; 'inv_cst_id = :customerId:',\n        'bind'       =&gt; [\n            'customerId' =&gt; 1,\n        ],\n    ]\n);\n\n$products = $invoice-&gt;getRelated(\n    'products',\n    [\n        'prd_created_at = :date:',\n        'bind' =&gt; [\n            'date' =&gt; '2019-12-25',\n        ],\n    ]\n);\n\nforeach ($products as $product) {\n    echo $invoice-&gt;prd_name;\n}\n</code></pre>"},{"location":"db-models-relationships/#aliases","title":"Aliases","text":"<p>Accessing a relationship cam be achieved by using the name of the remote table. Due to naming conventions, this might not be that easy and could lead to confusion. As seen above, you can define an <code>alias</code> to the relationship.</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public $inv_id;\n    public $inv_cst_id;\n    public $inv_status_flag;\n    public $inv_title;\n    public $inv_total;\n    public $inv_created_at;\n\n    public function initialize()\n    {\n        $this-&gt;hasManyToMany(\n            'inv_id',\n            InvoicesProducts::class,\n            'ixp_inv_id',\n            'ixp_prd_id',\n            Products::class,\n            'prd_id'\n        );\n    }\n}\n</code></pre> <p>With an alias:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public $inv_id;\n    public $inv_cst_id;\n    public $inv_status_flag;\n    public $inv_title;\n    public $inv_total;\n    public $inv_created_at;\n\n    public function initialize()\n    {\n        $this-&gt;hasManyToMany(\n            'inv_id',\n            InvoicesProducts::class,\n            'ixp_inv_id',\n            'ixp_prd_id',\n            Products::class,\n            'prd_id',\n            [\n                'reusable' =&gt; true,\n                'alias'    =&gt; 'products',\n            ]\n        );\n    }\n}\n</code></pre> <p>If your table structure has self joins, you will not be able to access those relationships without aliases because you will be using the same model. </p> <p><pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Parts extends Model\n{\n    public $par_id;\n    public $par_prd_id;\n    public $par_par_id;\n    public $par_type_flag;\n    public $par_name;\n\n    public function initialize()\n    {\n        $this-&gt;hasMany(\n            'par_id',\n            Invoices::class,\n            'par_par_id',\n            [\n                'reusable' =&gt; true,\n                'alias'    =&gt; 'children',\n            ]\n        );\n\n        $this-&gt;belongsTo(\n            'par_par_id',\n            Invoices::class,\n            'par_id',\n            [\n                'reusable' =&gt; true,\n                'alias'    =&gt; 'parent',\n            ]\n        );\n    }\n}\n</code></pre> In the example above, we have a <code>Part</code> that has a relationship with one or more <code>Part</code> objects. Each <code>Part</code> can consist of other parts that construct it. As a result we end up with a self join relationship. For a telephone <code>Part</code> we have the following children:</p> <p><pre><code>&lt;?php\n\n$phone = Parts::findFirst(....);\n\necho $phone-&gt;getChildren();\n\n// --- Cover\n// --- Battery\n// --- Charger\n</code></pre> and each of those parts has the telephone as a parent: <pre><code>&lt;?php\n$charger = Parts::findFirst(....);\n\necho $phone-&gt;getParent();\n\n// Phone\n</code></pre></p>"},{"location":"db-models-relationships/#caching","title":"Caching","text":"<p>Accessing related data can significantly increase the number of queries in your database. You can reduce this load as much as possible, by utilizing the <code>reusable</code> option in your relationship. Setting this option to <code>true</code> will instruct Phalcon to cache the results of the relationship the first time it is accessed, so that subsequent calls to the same relationship can use the cached resultset and not request the data again from the database. This cache is active during the same request.</p> <p>NOTE</p> <p>You are encouraged to use the <code>reusable</code> option as often as possible in your relationships</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;hasOne(\n            'inv_cst_id',\n            Customers::class,\n            'cst_id',\n            [\n                'alias'    =&gt; 'customers',\n                'reusable' =&gt; true,\n            ]\n        );\n    }\n}\n</code></pre>"},{"location":"db-models-relationships/#autocompletion","title":"Autocompletion","text":"<p>Most IDEs and editors with auto-completion capabilities can not detect the correct types when using magic getters (both methods and properties). To address this issue, you can use the class docblock that specifies what magic actions are available, helping the IDE to produce a better auto-completion:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\n/**\n * Invoices model\n *\n * @property Simple|Products[] $products\n * @method   Simple|Products[] getProducts($parameters = null)\n * @method   integer           countProducts()\n */\nclass Invoices extends Model\n{\n    public $inv_id;\n    public $inv_cst_id;\n    public $inv_status_flag;\n    public $inv_title;\n    public $inv_total;\n    public $inv_created_at;\n\n    public function initialize()\n    {\n        $this-&gt;hasManyToMany(\n            'inv_id',\n            InvoicesProducts::class,\n            'ixp_inv_id',\n            'ixp_prd_id',\n            Products::class,\n            'prd_id',\n            [\n                'reusable' =&gt; true,\n                'alias'    =&gt; 'products',\n            ]\n        );\n    }\n}\n</code></pre>"},{"location":"db-models-relationships/#conditionals","title":"Conditionals","text":"<p>You can also create relationships based on conditionals. When querying based on the relationship the condition will be automatically appended to the query:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public $inv_id;\n    public $inv_cst_id;\n    public $inv_status_flag;\n    public $inv_title;\n    public $inv_total;\n    public $inv_created_at;\n\n    public function initialize()\n    {\n        $this-&gt;hasManyToMany(\n            'inv_id',\n            InvoicesProducts::class,\n            'ixp_inv_id',\n            'ixp_prd_id',\n            Products::class,\n            'prd_id',\n            [\n                'reusable' =&gt; true,\n                'alias'    =&gt; 'products',\n            ]\n        );\n    }\n}\n\nclass Companies extends Model\n{\n    public function initialize()\n    {\n        // All invoices relationship\n        $this-&gt;hasMany(\n            'id',\n            Invoices::class,\n            'inv_id',\n            [\n                'alias' =&gt; 'Invoices',\n            ]\n        );\n\n        // Paid invoices relationship\n        $this-&gt;hasMany(\n            'id',\n            Invoices::class,\n            'inv_id',\n            [\n                'alias'  =&gt; 'InvoicesPaid',\n                'params' =&gt; [\n                    'conditions' =&gt; \"inv_status = 'paid'\",\n                ],\n            ]\n        );\n\n        // Unpaid invoices relationship + bound parameters\n        $this-&gt;hasMany(\n            'id',\n            Invoices::class,\n            'inv_id',\n            [\n                'alias'  =&gt; 'InvoicesUnpaid',\n                'params' =&gt; [\n                    'conditions' =&gt; \"inv_status &lt;&gt; :status:\",\n                    'bind'       =&gt; [\n                        'status' =&gt; 'unpaid',\n                    ],\n                ],\n            ]\n        );\n    }\n}\n</code></pre> <p>Additionally, you can use the parameters of <code>getInvoices()</code> or <code>getRelated()</code> on the model, to further filter or order your relationship:</p> <pre><code>&lt;?php\n\n$company = Companies::findFirst(\n    [\n        'conditions' =&gt; 'id = :id:',\n        'bind'       =&gt; [\n            'id' =&gt; 1,\n        ],\n    ]\n);\n*\n$unpaidInvoices = $company-&gt;InvoicesUnpaid;\n$unpaidInvoices = $company-&gt;getInvoicesUnpaid();\n$unpaidInvoices = $company-&gt;getRelated('InvoicesUnpaid');\n$unpaidInvoices = $company-&gt;getRelated(\n    'Invoices', \n    [\n        'conditions' =&gt; \"inv_status = 'paid'\",\n    ]\n);\n\n// Also ordered\n$unpaidInvoices = $company-&gt;getRelated(\n    'Invoices', \n    [\n        'conditions' =&gt; \"inv_status = 'paid'\",\n        'order'      =&gt; 'inv_created_date ASC',\n    ]\n);\n</code></pre>"},{"location":"db-models-relationships/#virtual-foreign-keys","title":"Virtual Foreign Keys","text":"<p>By default, relationships do not have any constraints attached to them, to check related data when adding, updating or deleting records. You can however attach validations to your relationships, to ensure integrity of data. This can be done with the last parameter of the relationship related method.</p> <p>The cross table <code>InvoicesProducts</code> can be slightly changed to demonstrate this functionality:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass InvoicesProducts extends Model\n{\n    public $ixp_inv_id;\n    public $ixp_prd_id;\n\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            'ixp_inv_id',\n            Invoices::class,\n            'inv_id',\n            [\n                'alias'      =&gt; 'invoice',\n                'foreignKey' =&gt; true,\n                'reusable'   =&gt; true,\n            ]\n        );\n\n        $this-&gt;belongsTo(\n            'ixp_prd_id',\n            Products::class,\n            'prd_id',\n            [\n                'alias'      =&gt; 'product',\n                'foreignKey' =&gt; [\n                    'message' =&gt; 'The prd_id does not exist ' .\n                                 'in the Products model',\n                ],\n                'reusable'   =&gt; true,\n            ]\n        );\n    }\n}\n</code></pre> <p>If you alter a <code>belongsTo()</code> relationship to act as foreign key, it will validate that the values inserted/updated on those fields have reference valid ids in the respective models. Similarly, if a <code>hasMany()</code>/<code>hasOne()</code> is changed to define the <code>foreignKey</code>, it will validate that records can or cannot if the record has related data.</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Products extends Model\n{\n    public $prd_id;\n    public $prd_title;\n    public $prd_price;\n    public $prd_created_at;\n\n    public function initialize()\n    {\n        $this-&gt;hasMany(\n            'prd_id',\n            Products::class,\n            'ixp_prd_id',\n            [\n                'foreignKey' =&gt; [\n                    'message' =&gt; 'The product cannot be deleted ' . \n                                 'because there are invoices ' .\n                                 'attached to it',\n                ],\n            ]\n        );\n    }\n}\n</code></pre> <p>A virtual foreign key can be set up to allow null values as follows:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass InvoicesProducts extends Model\n{\n    public $ixp_inv_id;\n    public $ixp_prd_id;\n\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            'ixp_inv_id',\n            Invoices::class,\n            'inv_id',\n            [\n                'alias'      =&gt; 'invoice',\n                'foreignKey' =&gt; true,\n                'reusable'   =&gt; true,\n            ]\n        );\n\n        $this-&gt;belongsTo(\n            'ixp_prd_id',\n            Products::class,\n            'prd_id',\n            [\n                'alias'      =&gt; 'product',\n                'foreignKey' =&gt; [\n                    'allowNulls' =&gt; true,\n                    'message'    =&gt; 'The prd_id does not exist ' .\n                                    'in the Products model',\n                ],\n                'reusable'   =&gt; true,\n            ]\n        );\n    }\n}\n</code></pre>"},{"location":"db-models-relationships/#cascaderestrict","title":"Cascade/Restrict","text":"<p>Relationships that act as virtual foreign keys by default restrict the creation/update/deletion of records to maintain the integrity of data. You can define these constraints that mimic the RDBMS functionality for <code>CASCADE</code> and <code>RESTRICT</code> by using the <code>action</code> option in <code>foreignKey</code>. The Phalcon\\Mvc\\Model\\Relation underlying object offers two constants:</p> <ul> <li><code>Relation::ACTION_CASCADE</code> </li> <li><code>Relation::ACTION_RESTRICT</code> </li> </ul> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Relation;\n\nclass Products extends Model\n{\n    public $prd_id;\n    public $prd_title;\n    public $prd_price;\n    public $prd_created_at;\n\n    public function initialize()\n    {\n        $this-&gt;hasMany(\n            'prd_id',\n            Products::class,\n            'ixp_prd_id',\n            [\n                'foreignKey' =&gt; [\n                    'action' =&gt; Relation::ACTION_CASCADE,\n                ],\n            ]\n        );\n    }\n}\n</code></pre> <p>The code above allows you to delete all the related record if the primary record is deleted (cascade delete).</p>"},{"location":"db-models-relationships/#operations","title":"Operations","text":"<p>You can perform operations using relationships, if a resultset returns complete objects.</p>"},{"location":"db-models-relationships/#save","title":"Save","text":"<p>Magic properties can be used to store a record and its related properties:</p> <pre><code>&lt;?php\n\n// Create an artist\n$artist = new Artists();\n\n$artist-&gt;name    = 'Shinichi Osawa';\n$artist-&gt;country = 'Japan';\n\n// Create an album\n$album = new Albums();\n\n$album-&gt;name   = 'The One';\n$album-&gt;artist = $artist; // Assign the artist\n$album-&gt;year   = 2008;\n\n// Save both records\n$album-&gt;save();\n</code></pre> <p>Saving a record and its related records in a has-many relation:</p> <pre><code>&lt;?php\n\n$customer = Customers::findFirst(\n    [\n        'conditions' =&gt; 'cst_id = :customerId:',\n        'bind'       =&gt; [\n            'customerId' =&gt; 1,\n        ]\n    ]\n);\n\n$invoice1 = new Invoices();\n$invoice1-&gt; inv_status_flag = 0;\n$invoice1-&gt; inv_title       = 'Invoice for ACME Inc. #1';\n$invoice1-&gt; inv_total       = 100;\n$invoice1-&gt; inv_created_at  = time();\n\n$invoice2 = new Invoices();\n$invoice2-&gt; inv_status_flag = 0;\n$invoice2-&gt; inv_title       = 'Invoice for ACME Inc. #2';\n$invoice2-&gt; inv_total       = 200;\n$invoice2-&gt; inv_created_at  = time();\n\n\n$customer-&gt;invoices = [\n    $invoice1,\n    $invoice2\n];\n\n\n$customer-&gt;save();\n</code></pre> <p>The code above gets a customer from our database. Two invoices are created and assigned to the <code>invoices</code> relationship of the customer as an array. The customer record is then saved, which also saves the two invoices in the database and links them to the customer.</p> <p>Although the syntax above is very handy, it is not always ideal to use it, especially when updating related records. Phalcon does not know which records need to be added or removed using an update, and as a result it will perform a replace. In update situations, it is better to control the data yourself vs. leaving it to the framework to do that.  </p> <p>Saving data with the above syntax will implicitly create a transaction and commit it if all goes well. Messages generated during the save process of the whole transaction will be passed back to the user for more information.</p> <p>NOTE</p> <p>Adding related entities by overloading the following methods/events is not possible:</p> <ul> <li><code>Phalcon\\Mvc\\Model::beforeSave()</code></li> <li><code>Phalcon\\Mvc\\Model::beforeCreate()</code></li> <li><code>Phalcon\\Mvc\\Model::beforeUpdate()</code></li> </ul> <p>You need to overload <code>Phalcon\\Mvc\\Model::save()</code> for this to work from within a model.</p>"},{"location":"db-models-relationships/#update","title":"Update","text":"<p>Instead of doing this:</p> <pre><code>&lt;?php\n\n$invoices = $customer-&gt;getInvoices();\n\nforeach ($invoices as $invoice) {\n    $invoice-&gt;inv_total      = 100;\n    $invoice-&gt;inv_updated_at = time();\n\n    if (false === $invoice-&gt;update()) {\n        $messages = $invoice-&gt;getMessages();\n\n        foreach ($messages as $message) {\n            echo $message;\n        }\n\n        break;\n    }\n}\n</code></pre> <p>you can do this:</p> <pre><code>&lt;?php\n\n$customer-&gt;getInvoices()-&gt;update(\n    [\n        'inv_total'      =&gt; 100,\n        'inv_updated_at' =&gt; time(),\n    ]\n);\n</code></pre> <p><code>update</code> also accepts an anonymous function to filter what records must be updated:</p> <pre><code>&lt;?php\n\n$data = [\n    'inv_total'      =&gt; 100,\n    'inv_updated_at' =&gt; time(),\n];\n\n$customer-&gt;getInvoices()-&gt;update(\n    $data,\n    function ($invoice) {\n        return ($invoice-&gt;inv_cst_id !== 1);\n    }\n);\n</code></pre>"},{"location":"db-models-relationships/#delete","title":"Delete","text":"<p>Instead of doing this:</p> <pre><code>&lt;?php\n\n$invoices = $customer-&gt;getInvoices();\n\nforeach ($invoices as $invoice) {\n    if (false === $invoice-&gt;delete()) {\n        $messages = $invoice-&gt;getMessages();\n\n        foreach ($messages as $message) {\n            echo $message;\n        }\n\n        break;\n    }\n}\n</code></pre> <p>you can do this:</p> <pre><code>&lt;?php\n\n$customer-&gt;getInvoices()-&gt;delete();\n</code></pre> <p><code>delete()</code> also accepts an anonymous function to filter what records must be deleted:</p> <pre><code>&lt;?php\n\n$customer-&gt;getInvoices()-&gt;delete(\n    function ($invoice) {\n        return ($invoice-&gt;inv_total &gt;= 0);\n    }\n);\n</code></pre>"},{"location":"db-models-transactions/","title":"Model Transactions","text":""},{"location":"db-models-transactions/#overview","title":"Overview","text":"<p>When a process performs multiple database operations, it is important to perform all these operations as a single unit of work. This way if one of the operations fails, we do not end up with corrupted data or orphaned records. Database transactions offer this functionality and ensure that all database operations have been executed successfully prior to storing the data in the database. </p> <p>Transactions in Phalcon allow you to commit all operations if they were executed successfully or rollback all operations if something went wrong.</p>"},{"location":"db-models-transactions/#manual","title":"Manual","text":"<p>If an application only uses one connection and the transactions are not very complex, a transaction can be created by beginning a transaction on the connection and if everything is OK commit the transaction or roll it back:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n/**\n * @property Mysql $db\n */\nclass InvoicesController extends Controller\n{\n    public function saveAction()\n    {\n        $this-&gt;db-&gt;begin();\n\n        try {\n            $customer = Customers::findFirst(\n                [\n                    'conditions' =&gt; 'cst_id = :cst_id:',\n                    'bind'       =&gt; [\n                        'cst_id' =&gt; 10,\n                    ]    \n                ]  \n            );\n\n            $customer-&gt;cst_has_unpaid = true;\n            $result = $customer-&gt;save();\n\n            if (false === $result) {\n                throw new \\Exception('Error saving file');\n            }\n\n            $invoice = new Invoices();\n            $invoice-&gt;inv_cst_id     = $customer-&gt;cst_id;\n            $invoice-&gt;inv_number     = 'INV-00001';\n            $invoice-&gt;inv_name       = 'Invoice for Goods';\n            $invoice-&gt;inv_created_at = date('Y-m-d');\n\n            $result = $invoice-&gt;save();\n\n            if (false === $result) {\n                throw new \\Exception('Error saving file');\n            }\n\n            $this-&gt;db-&gt;commit();\n        } catch (\\Exception $ex) {\n            $this-&gt;db-&gt;rollback();\n            echo $ex-&gt;getMessage();\n        }\n    }\n}\n</code></pre>"},{"location":"db-models-transactions/#implicit","title":"Implicit","text":"<p>Existing relationships can be used to store records and their related instances. An operation like this implicitly creates a transaction to ensure that data is correctly stored:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse MyApp\\Models\\Customers;\n\n$invoice = new Invoices();\n$invoice-&gt;inv_cst_id     = $customer-&gt;cst_id;\n$invoice-&gt;inv_number     = 'INV-00001';\n$invoice-&gt;inv_name       = 'Invoice for Goods';\n$invoice-&gt;inv_created_at = date('Y-m-d');\n\n$customer = new Customers();\n$customer-&gt;cst_name       = 'John Wick';\n$customer-&gt;cst_has_unpaid = true;\n$customer-&gt;invoices       = $invoice;\n\n$customer-&gt;save();\n</code></pre>"},{"location":"db-models-transactions/#isolated","title":"Isolated","text":"<p>Isolated transactions are executed in a new connection ensuring that all the generated SQL, virtual foreign key checks and business rules are isolated from the main connection. This kind of transaction requires a transaction manager that globally manages each transaction created ensuring that they are correctly rolled back or committed before ending the request:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Transaction\\Failed as TxFailed;\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager as TxManager;\n\n// Create a transaction manager\n$manager = new TxManager();\n\n// Request a transaction\n$transaction = $manager-&gt;get();\n\ntry {\n    $customer = Customers::findFirst(\n        [\n            'conditions' =&gt; 'cst_id = :cst_id:',\n            'bind'       =&gt; [\n                'cst_id' =&gt; 10,\n            ]    \n        ]  \n    );\n\n    $customer-&gt;cst_has_unpaid = true;\n    $result = $customer-&gt;save();\n\n    if (false === $result) {\n        throw new \\Exception('Error saving file');\n    }\n\n    $invoice = new Invoices();\n    $invoice-&gt;inv_cst_id     = $customer-&gt;cst_id;\n    $invoice-&gt;inv_number     = 'INV-00001';\n    $invoice-&gt;inv_name       = 'Invoice for Goods';\n    $invoice-&gt;inv_created_at = date('Y-m-d');\n\n    $result = $invoice-&gt;save();\n\n    if (false === $result) {\n        throw new \\Exception('Error saving file');\n    }\n\n    $transaction-&gt;commit();\n} catch (TxFailed $ex) {\n    $transaction-&gt;rollback();\n    echo $ex-&gt;getMessage();\n}\n</code></pre> <p>Transactions can be used to delete a number of records, ensuring that everything is deleted correctly:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Transaction\\Failed as TxFailed;\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager as TxManager;\n\n// Create a transaction manager\n$manager = new TxManager();\n\n// Request a transaction\n$transaction = $manager-&gt;get();\n\ntry {\n    $invoices = Invoices::find(\n        [\n            'conditions' =&gt; 'inv_cst_id = :cst_id:',\n            'bind'       =&gt; [\n                'cst_id' =&gt; 10,\n            ]    \n        ]  \n    );\n\n    foreach ($invoices as $invoice) {\n        $invoice-&gt;setTransaction($transaction);\n        if (false === $invoice-&gt;delete()) {\n            $messages = $invoice-&gt;getMessages();\n\n            foreach ($messages as $message) {\n                $transaction-&gt;rollback(\n                    $message-&gt;getMessage()\n                );\n            }\n        }\n    }\n\n    $transaction-&gt;commit();\n} catch (TxFailed $ex) {\n    echo $ex-&gt;getMessage();\n}\n</code></pre>"},{"location":"db-models-transactions/#exceptions","title":"Exceptions","text":"<p>Any exceptions thrown in the Logger component will be of type Phalcon\\Mvc\\Model\\Transaction\\Exception or Phalcon\\Mvc\\Model\\Transaction\\Failed. You can use these exceptions to selectively catch exceptions thrown only from this component.</p> <p>Additionally you can throw an exception if the rollback was not successful, by using the <code>throwRollbackException(true)</code> method.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Transaction\\Failed as TxFailed;\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager as TxManager;\n\n// Create a transaction manager\n$manager = new TxManager();\n\n// Request a transaction\n$transaction = $manager\n    -&gt;get()\n    -&gt;throwRollbackException(true)\n;\n\ntry {\n    $invoices = Invoices::find(\n        [\n            'conditions' =&gt; 'inv_cst_id = :cst_id:',\n            'bind'       =&gt; [\n                'cst_id' =&gt; 10,\n            ]    \n        ]  \n    );\n\n    foreach ($invoices as $invoice) {\n        $invoice-&gt;setTransaction($transaction);\n        if (false === $invoice-&gt;delete()) {\n            $messages = $invoice-&gt;getMessages();\n\n            foreach ($messages as $message) {\n                $transaction-&gt;rollback(\n                    $message-&gt;getMessage()\n                );\n            }\n        }\n    }\n\n    $transaction-&gt;commit();\n} catch (TxFailed $ex) {\n    echo $ex-&gt;getMessage();\n}\n</code></pre>"},{"location":"db-models-transactions/#dependency-injection","title":"Dependency Injection","text":"<p>Transactions are reused no matter where the transaction object is retrieved. A new transaction is generated only when a <code>commit()</code> or <code>rollback()</code> is performed. You can use the service container to create the global transaction manager for the entire application:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager;\n\n$container-&gt;setShared(\n    'transactions',\n    function () {\n        return new Manager();\n    }\n);\n</code></pre> <p>Then access it from a controller or view:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager;\n\n/**\n * @property Manager $transactions\n */\nclass ProductsController extends Controller\n{\n    public function saveAction()\n    {\n        $manager = $this-&gt;di-&gt;getTransactions();\n\n        $manager = $this-&gt;transactions;\n\n        $transaction = $manager-&gt;get();\n\n        // ...\n    }\n}\n</code></pre> <p>NOTE</p> <p>While a transaction is active, the transaction manager will always return the same transaction across the application.</p>"},{"location":"db-models-validation/","title":"Model Validation","text":""},{"location":"db-models-validation/#overview","title":"Overview","text":"<p>Phalcon\\Mvc\\Model provides several events to validate data and implement business rules. </p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Uniqueness;\n\nclass Customers extends Model\n{\n    public function validation()\n    {\n        $validator = new Validation();\n\n        $validator-&gt;add(\n            'cst_email',\n            new Uniqueness(\n                [\n                    'message' =&gt; 'The customer email must be unique',\n                ]\n            )\n        );\n\n        return $this-&gt;validate($validator);\n    }\n}\n</code></pre>"},{"location":"db-models-validation/#data-integrity","title":"Data Integrity","text":"<p>Data integrity is essential in every application. You can implement validators in your models to introduce another layer of validation so that you can ensure that data is stored in your database that enforce your business rules. </p> <p>The special <code>validation</code> event allows us to call built-in validators on the record. Phalcon exposes additional built-in validators that can be used at this stage of validation. All validators available are under the Phalcon\\Validation namespace.</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Uniqueness;\nuse Phalcon\\Validation\\Validator\\InclusionIn;\n\nclass Invoices extends Model\n{\n    public function validation()\n    {\n        $validator = new Validation();\n\n        $validator-&gt;add(\n            'inv_status_flag',\n            new InclusionIn(\n                [\n                    'domain'  =&gt; [\n                        'Paid',\n                        'Unpaid',\n                    ],\n                    'message' =&gt; 'The invoice must be ' .\n                                 'either paid or unpaid',\n                ]\n            )\n        );\n\n        $validator-&gt;add(\n            'inv_number',\n            new Uniqueness(\n                [\n                    'message' =&gt; 'The invoice number must be unique',\n                ]\n            )\n        );\n\n        return $this-&gt;validate($validator);\n    }\n}\n</code></pre> <p>The above example performs a validation using the built-in validator Phalcon\\Validation\\Validator\\InclusionIn. It checks the value of the field <code>inv_status_flag</code> in a domain list. If the value is not included in the method then the validator will fail and return <code>false</code>. </p> <p>NOTE</p> <p>For more information on validators, see the Validation documentation</p>"},{"location":"db-models-validation/#messages","title":"Messages","text":"<p>Phalcon\\Mvc\\Model utilizes the Phalcon\\Messages\\Messages collection to store any validation messages that have been generated during the validation process.</p> <p>Each message is an instance of Phalcon\\Messages\\Message and the set of messages generated can be retrieved with the <code>getMessages()</code> method. Each message provides additional information such as the field name that generated the message or the message type:</p> <pre><code>&lt;?php\n\nif (false === $invoice-&gt;save()) {\n    $messages = $invoice-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo 'Message: ', $message-&gt;getMessage();\n        echo 'Field: ', $message-&gt;getField();\n        echo 'Type: ', $message-&gt;getType();\n    }\n}\n</code></pre> <p>Phalcon\\Mvc\\Model can generate the following types of validation messages:</p> Type Generated when <code>ConstraintViolation</code> A field, part of a virtual foreign key, is trying to insert/update a value that does not exist in the referenced model <code>InvalidCreateAttempt</code> Trying to create a record that already exists <code>InvalidUpdateAttempt</code> Trying to update a record that does not exist <code>InvalidValue</code> A validator failed because of an invalid value <code>PresenceOf</code> A field with a non <code>null</code> attribute on the database is trying to insert/update a <code>null</code> value <p>The <code>getMessages()</code> method can be overridden in a model to replace/translate the default messages generated automatically by the ORM:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function getMessages()\n    {\n        $messages = [];\n\n        foreach (parent::getMessages() as $message) {\n            switch ($message-&gt;getType()) {\n                case 'InvalidCreateAttempt':\n                    $messages[] = 'The record cannot be created '\n                                . 'because it already exists';\n                    break;\n\n                case 'InvalidUpdateAttempt':\n                    $messages[] = \"The record cannot be updated '\n                                . 'because it doesn't exist\";\n                    break;\n\n                case 'PresenceOf':\n                    $messages[] = 'The field ' \n                                . $message-&gt;getField() \n                                . ' is mandatory';\n                    break;\n            }\n        }\n\n        return $messages;\n    }\n}\n</code></pre>"},{"location":"db-models-validation/#failed-events","title":"Failed Events","text":"<p>Additional events are available when the data validation process finds any inconsistencies:</p> Operation Name Explanation Insert or Update <code>notSaved</code> Triggered when the <code>INSERT</code> or <code>UPDATE</code> operation fails for any reason Insert, Delete or Update <code>onValidationFails</code> Triggered when any data manipulation operation fails"},{"location":"db-models-validation/#custom","title":"Custom","text":"<p>The validation document explains in detail how you can create your own validators. You can use such validators and reuse them among several models. A validator also can be as simple as:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Message;\n\nclass Invoices extends Model\n{\n    public function validation()\n    {\n        if ('Unpaid' === $this-&gt;inv_type_flag) {\n            $message = new Message(\n                'Unpaid invoices are not allowed',\n                'inv_type_flag',\n                'UnpaidInvoiceType'\n            );\n\n            $this-&gt;appendMessage($message);\n\n            return false;\n        }\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"db-models/","title":"Models","text":""},{"location":"db-models/#overview","title":"Overview","text":"<p>The Phalcon\\Mvc\\Model is the <code>M</code> in MVC. It is a class that connects business objects and database tables, to create a persistent domain model, where logic and data are wrapped into one. It is an implementation of the object-relational mapping (ORM).</p> <p>A model represents the information (data) of the application and the rules to manipulate that data. Models are primarily used for managing the rules of interaction with a corresponding database table. In most cases, each table in your database will correspond to one model in your application. The bulk of your application's business logic will be concentrated in the models.</p> <p>The Phalcon\\Mvc\\Model is the first ORM written in Zephir/C languages for PHP, giving to developers high performance when interacting with databases while is also easy to use.</p> <p>NOTE</p> <p>Models are intended to work with the database on a high layer of abstraction. If you need to work with databases at a lower level check out the Phalcon\\Db component documentation.</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n\n}\n</code></pre> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n/**\n * Create an invoice \n */\n$invoice = new Invoices();\n\n$invoice-&gt;inv_cst_id      = 1;\n$invoice-&gt;inv_status_flag = 1;\n$invoice-&gt;inv_title       = 'Invoice for ACME Inc.';\n$invoice-&gt;inv_total       = 100;\n$invoice-&gt;inv_created_at  = '2019-12-25 01:02:03';\n\n$result = $invoice-&gt;save();\n\nif (false === $result) {\n\n    echo 'Error saving Invoice: ';\n\n    $messages = $invoice-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo $message . PHP_EOL;\n    }\n} else {\n\n    echo 'Record Saved';\n\n}\n</code></pre> <p>NOTE</p> <p>For information on how to create a model please check the Creating Models section</p>"},{"location":"db-models/#constants","title":"Constants","text":"Constant Value DIRTY_STATE_DETACHED 2 DIRTY_STATE_PERSISTENT 0 DIRTY_STATE_TRANSIENT 1 OP_CREATE 1 OP_DELETE 3 OP_NONE 0 OP_UPDATE 2 TRANSACTION_INDEX 'transaction'"},{"location":"db-models/#methods","title":"Methods","text":"<p><pre><code>final public function __construct(\n    mixed $data = null, \n    DiInterface $container = null,\n    ManagerInterface $modelsManager = null\n)\n</code></pre> Constructs the model object. The method accepts an array of data that are used to populate the object by internally using <code>assign</code>. Optionally you can pass a DI container and a Models Manager object. If they are not passed, the defaults will be used. </p> <p><pre><code>public function __call(string $method, array $arguments): mixed\n</code></pre> Handles method calls when a method is not implemented. Throws Phalcon\\Mvc\\Model\\Exception if the method doesn't exist</p> <p><pre><code>public static function __callStatic(\n    string $method, \n    array $arguments\n): mixed\n</code></pre> Handles method calls when a static method is not implemented. Throws Phalcon\\Mvc\\Model\\Exception if the method doesn't exist</p> <p><pre><code>public function __get(string $property)\n</code></pre> Magic method to get related records using the relation alias as a property</p> <p><pre><code>public function __isset(string $property): bool\n</code></pre>  Magic method to check if a property is a valid relation</p> <p><pre><code>public function __set(string $property, mixed $value)\n</code></pre> Magic method to assign values to the model</p> <p><pre><code>public function addBehavior(\n    BehaviorInterface $behavior\n): void\n</code></pre> Setups a behavior in a model</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Behavior\\Timestampable;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;addBehavior(\n            new Timestampable(\n                [\n                    'onCreate' =&gt; [\n                        'field'  =&gt; 'inv_created_at',\n                        'format' =&gt; 'Y-m-d H:i:s',\n                    ],\n                ]\n            )\n        );\n    }\n}\n</code></pre> <p><pre><code>public function appendMessage(\n    MessageInterface $message\n): ModelInterface\n</code></pre> Appends a customized message on the validation process</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Messages\\Message as Message;\n\nclass Invoices extends Model\n{\n    public function beforeSave()\n    {\n        if (0 === $this-&gt;inv_status_flag) {\n            $message = new Message(\n                'Sorry, an invoice cannot be unpaid'\n            );\n\n            $this-&gt;appendMessage($message);\n        }\n    }\n}\n</code></pre> <p><pre><code>public function assign(\n    mixed $data, \n    array $whiteList = null, \n    array $dataColumnMap = null\n): ModelInterface\n</code></pre> Assigns data to the model. The <code>data</code> parameter can be an array or a database row. The <code>whitelist</code> is an array of model properties that will be updated during the assignment process. Omitted properties will NOT be accepted even if they are included in the array or database row; nevertheless if one of them is required by the model, the data will not be saved and the model will produce an error. The <code>dataColumnMap</code> is an array that maps columns from the <code>data</code> to the actual model. This helps when you want to map input from an array such as <code>$_POST</code> to fields in the database.</p> <p>Assign values to a model from an array <pre><code>&lt;?php\n\n$invoice-&gt;assign(\n    [\n        'inv_cst_id'      =&gt; 1,\n        'inv_status_flag' =&gt; 1,\n        'inv_title'       =&gt; 'Invoice for ACME Inc.',\n        'inv_total'       =&gt; 100,\n        'inv_created_at'  =&gt; '2019-12-25 01:02:03',\n    ]\n);\n</code></pre></p> <p><code>assign</code> with a database row. - Requires a Column Map <pre><code>&lt;?php\n\n$invoice-&gt;assign(\n    $row,\n    null,\n    [\n        'inv_cst_id'      =&gt; 'customerId',\n        'inv_status_flag' =&gt; 'status',\n        'inv_title'       =&gt; 'title',\n        'inv_total'       =&gt; 'total',\n    ]\n);\n</code></pre></p> <p>Update only the <code>inv_status_flag</code>, <code>inv_title</code>, <code>inv_total</code> fields. <pre><code>&lt;?php\n\n$invoice-&gt;assign(\n    $_POST,\n    [\n        'inv_status_flag',\n        'inv_title',\n        'inv_total',\n    ]\n);\n</code></pre></p> <p>By default <code>assign</code> will use setters if they exist, you can disable it by using <code>ini_set</code> to directly use properties</p> <pre><code>ini_set('phalcon.orm.disable_assign_setters', true);\n</code></pre> <pre><code>&lt;?php\n\n$invoice-&gt;assign(\n    $_POST,\n    null,\n    [\n        'inv_status_flag',\n        'inv_title',\n        'inv_total',\n    ]\n);\n</code></pre> <p><pre><code>public static function average(\n    mixed $parameters = null\n): float\n</code></pre> Returns the average value on a column for a result-set of rows matching the specified conditions</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$average = Invoices::average(\n    [\n        'column' =&gt; 'inv_total',\n    ]\n);\n\necho 'AVG: ', $average, PHP_EOL;\n\n$average = Invoices::average(\n    [\n        'inv_cst_id = 1',\n        'column' =&gt; 'inv_total',\n    ]\n);\n\necho 'AVG [Customer: 1] ', $average, PHP_EOL;\n</code></pre> <p><pre><code>public static function cloneResult(\n    ModelInterface $base, \n    array $data, \n    int $dirtyState = 0\n): ModelInterface\n</code></pre> Assigns values to a model from an array returning a new model</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::cloneResult(\n     new Invoices(),\n    [\n        'inv_cst_id'      =&gt; 1,\n        'inv_status_flag' =&gt; 0,\n        'inv_title'       =&gt; 'Invoice for ACME Inc. #2',\n        'inv_total'       =&gt; 400,\n        'inv_created_at'  =&gt; '2019-12-25 01:02:03',\n    ]\n );\n</code></pre> <p><pre><code>public static function cloneResultMap(\n    mixed $base, \n    array $data, \n    array $columnMap, \n    int $dirtyState = 0, \n    bool $keepSnapshots = null\n): ModelInterface\n</code></pre> Assign values to a model from an array, returning a new model, using the column map.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::cloneResultMap(\n     new Invoices(),\n     [\n        'customerId' =&gt; 1,\n        'status'     =&gt; 0,\n        'title'      =&gt; 'Invoice for ACME Inc. #2',\n        'total'      =&gt; 400,\n        'created'    =&gt; '2019-12-25 01:02:03',\n     ]\n);\n</code></pre> <p><pre><code>public static function cloneResultMapHydrate(\n    array $data, \n    array $columnMap, \n    int $hydrationMode\n): mixed\n</code></pre> Returns a hydrated result based on the data and the column map</p> <p><pre><code>public static function count(\n    mixed $parameters = null\n): int\n</code></pre> Returns a count of how many records match the specified conditions</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$average = Invoices::count();\n\necho 'COUNT: ', $average, PHP_EOL;\n\n$average = Invoices::count(\n    'inv_cst_id = 1'\n);\n\necho 'COUNT [Customer: 1] ', $average, PHP_EOL;\n</code></pre> <p><pre><code>public function create(): bool\n</code></pre> Inserts a model in the database. If the record exists in the database, <code>create()</code> will throw an exception. It will return <code>true</code> on success, <code>false</code> otherwise.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = new Invoices();\n$invoice-&gt;assign(\n    [\n        'inv_cst_id'      =&gt; 1,\n        'inv_status_flag' =&gt; 1,\n        'inv_title'       =&gt; 'Invoice for ACME Inc.',\n        'inv_total'       =&gt; 100,\n        'inv_created_at'  =&gt; '2019-12-25 01:02:03',\n    ]\n);\n\n$result = $invoice-&gt;create();\n</code></pre> <p><pre><code>public function delete(): bool\n</code></pre> Deletes a model instance. Returning true on success or false otherwise.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::findFirst('inv_id = 4');\n$result  = $invoice-&gt;delete();\n\n$invoices = Invoices::find(\n    [\n        'conditions' =&gt; 'inv_cst_id = :cst_id:',\n        'bind'       =&gt; [\n            'cst_id' =&gt; 1,\n        ]\n    ]\n);\n\nforeach ($invoices as $invoice) {\n    $invoice-&gt;delete();\n}\n</code></pre> <p><pre><code>public function dump(): array\n</code></pre> Returns a simple representation of the object that can be used with <code>var_dump()</code></p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::findFirst('inv_id = 4');\n\nvar_dump(\n    $invoice-&gt;dump()\n);\n</code></pre> <p><pre><code>public static function find(\n    mixed $parameters = null\n): ResultsetInterface\n</code></pre> Query for a set of records that match the specified conditions. <code>find()</code> is flexible enough to accept a variety of parameters to find the data required. You can check the Finding Records section for more information.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::find();\n</code></pre> <p><pre><code>public static function findFirst(\n    mixed $parameters = null\n): ModelInterface | null\n</code></pre> Query the first record that matches the specified conditions. It will return a resultset or <code>null</code> if the record was not found.</p> <p>NOTE</p> <p><code>findFirst()</code> no longer returns <code>false</code> if records were not found.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::findFirst();\n</code></pre> <p><pre><code>public function fireEvent(string $eventName): bool\n</code></pre> Fires an event, implicitly calls behaviors and listeners in the events manager are notified</p> <p><pre><code>public function fireEventCancel(string $eventName): bool\n</code></pre> Fires an event, implicitly calls behaviors and listeners in the events manager are notified. This method stops if one of the callbacks/listeners returns <code>false</code></p> <p><pre><code>public function getChangedFields(): array\n</code></pre> Returns a list of changed values.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::findFirst();\n\nprint_r(\n    $invoice-&gt;getChangedFields()\n); \n// []\n\n$invoice-&gt;inv_total = 120;;\n\n$invoice-&gt;getChangedFields();\n\nprint_r(\n    $invoice-&gt;getChangedFields()\n);\n// ['inv_total']\n</code></pre> <p><pre><code>public function getDirtyState(): int\n</code></pre> Returns one of the <code>DIRTY_STATE_*</code> constants telling if the record exists in the database or not</p> <p><pre><code>public function getMessages(\n    mixed $filter = null\n): MessageInterface[]\n</code></pre> Returns array of validation messages</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = new Invoices();\n\n$invoice-&gt;inv_cst_id      = 1;\n$invoice-&gt;inv_status_flag = 1;\n$invoice-&gt;inv_title       = 'Invoice for ACME Inc.';\n$invoice-&gt;inv_total       = 100;\n$invoice-&gt;inv_created_at  = '2019-12-25 01:02:03';\n\n$result = $invoice-&gt;save();\n\nif (false === $result) {\n\n    echo 'Error saving Invoice: ';\n\n    $messages = $invoice-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo $message . PHP_EOL;\n    }\n} else {\n\n    echo 'Record Saved';\n\n}\n</code></pre> <p>NOTE</p> <p><code>save()</code> no longer accepts parameters to set data. You can use <code>assign</code> instead.</p> <p><pre><code>public function getModelsManager(): ManagerInterface\n</code></pre> Returns the models manager related to the entity instance</p> <p><pre><code>public function getModelsMetaData(): MetaDataInterface\n</code></pre> Returns the model's meta-data service related to the entity instance</p> <p><pre><code>public function getOperationMade(): int\n</code></pre> Returns the type of the latest operation performed by the ORM. Returns one of the <code>OP_*</code> class constants</p> <p><pre><code>public function getOldSnapshotData(): array\n</code></pre> Returns the internal old snapshot data</p> <p><pre><code>final public function getReadConnection(): AdapterInterface\n</code></pre> Gets the connection used to read data for the model</p> <p><pre><code>final public function getReadConnectionService(): string\n</code></pre> Returns the DependencyInjection connection service name used to read data related the model</p> <p><pre><code>public function getRelated(\n    string $alias, \n    mixed $arguments = null\n): Phalcon\\Mvc\\Model\\Resultset\\Simple | null\n</code></pre> Returns related records based on defined relations. If the relationship is one to one and no records have been found, it will return <code>null</code></p> <p>NOTE</p> <p><code>getRelated()</code> no longer returns <code>false</code> if a record was not found on a one to one relationship.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Customers;\n\n$customer = Customers::findFirst('cst_id = 1');\n$invoices = $customer-&gt;getRelated('invoices');\n</code></pre> <p><pre><code>public function isRelationshipLoaded(\n    string $relationshipAlias\n): bool\n</code></pre> Checks if saved related records have already been loaded. Only returns <code>true</code> if the records were previously fetched through the model without any additional parameters.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Customers;\n\n$customer = Customers::findFirst('cst_id = 1');\n$invoices = $customer-&gt;isRelationshipLoaded('invoices'); // false\n\n$invoices = $customer-&gt;getRelated('invoices');\n$invoices = $customer-&gt;isRelationshipLoaded('invoices'); // true\n</code></pre> <p><pre><code>final public function getSchema(): string\n</code></pre> Returns schema name where the mapped table is located</p> <p><pre><code>public function getSnapshotData(): array\n</code></pre> Returns the internal snapshot data</p> <p><pre><code>final public function getSource(): string\n</code></pre> Returns the table name mapped in the model</p> <p><pre><code>public function getUpdatedFields(): array\n</code></pre> Returns a list of updated values.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::findFirst();\n\nprint_r(\n    $invoice-&gt;getChangedFields()\n); \n// []\n\n$invoice-&gt;inv_total = 120;;\n\n$invoice-&gt;getChangedFields();\n\nprint_r(\n    $invoice-&gt;getChangedFields()\n);\n// ['inv_total']\n\n$invoice-&gt;save();\n\nprint_r(\n    $invoice-&gt;getChangedFields()\n);\n// []\n\nprint_r(\n    $invoice-&gt;getUpdatedFields()\n);\n// ['inv_total']\n</code></pre> <p><pre><code>final public function getWriteConnection(): AdapterInterface\n</code></pre> Gets the connection used to write data to the model</p> <p><pre><code>final public function getWriteConnectionService(): string\n</code></pre> Returns the DependencyInjection connection service name used to write data related to the model</p> <p><pre><code>public function hasChanged(\n    string | array $fieldName = null, \n    bool $allFields = false\n): bool\n</code></pre> Check if a specific attribute has changed. This only works if the model is keeping data snapshots</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = new Invoices();\n\n$invoice-&gt;inv_cst_id      = 1;\n$invoice-&gt;inv_status_flag = 1;\n$invoice-&gt;inv_title       = 'Invoice for ACME Inc.';\n$invoice-&gt;inv_total       = 100;\n$invoice-&gt;inv_created_at  = '2019-12-25 01:02:03';\n\n$result = $invoice-&gt;create();\n\n$invoice-&gt;inv_total = 120;\n\n$hasChanged = $invoice-&gt;hasChanged('inv_title');\n// false\n$hasChanged = $invoice-&gt;hasChanged(\n    [\n        'inv_total',\n    ]\n);\n// true\n$hasChanged = $invoice-&gt;hasChanged(\n    [\n        'inv_title', \n        'inv_total'\n    ], \n    true\n);\n// false\n</code></pre> <p><pre><code>public function hasSnapshotData(): bool\n</code></pre> Checks if the object has internal snapshot data</p> <p><pre><code>public function hasUpdated(\n    string | array $fieldName = null, \n    bool $allFields = false\n): bool\n</code></pre> Check if a specific attribute was updated. This only works if the model is keeping data snapshots.</p> <p><pre><code>public function jsonSerialize(): array\n</code></pre> Serializes the object for json_encode</p> <pre><code>echo json_encode($invoice);\n</code></pre> <p><pre><code>public static function maximum(\n    mixed $parameters = null\n): mixed\n</code></pre> Returns the maximum value of a column for a result-set of rows that match the specified conditions</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$id = Invoices::maximum(\n    [\n        'column' =&gt; 'inv_id',\n    ]\n);\n\necho 'MAX: ', $id, PHP_EOL;\n\n$max = Invoices::maximum(\n    [\n        'inv_cst_id = 1',\n        'column' =&gt; 'inv_total',\n    ]\n);\n\necho 'MAX [Customer: 1] ', $max, PHP_EOL;\n</code></pre> <p><pre><code>public static function minimum(\n    mixed parameters = null\n): mixed \n</code></pre> Returns the minimum value of a column for a result-set of rows that match the specified conditions</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$id = Invoices::minimum(\n    [\n        'column' =&gt; 'inv_id',\n    ]\n);\n\necho 'MIN: ', $id, PHP_EOL;\n\n$max = Invoices::minimum(\n    [\n        'inv_cst_id = 1',\n        'column' =&gt; 'inv_total',\n    ]\n);\n\necho 'MIN [Customer: 1] ', $max, PHP_EOL;\n</code></pre> <p><pre><code>public static function query(\n    DiInterface $container = null\n): CriteriaInterface\n</code></pre>  Create a criteria for a specific model</p> <p><pre><code>public function readAttribute(\n    string $attribute\n): mixed | null\n</code></pre> Reads an attribute value by its name</p> <pre><code>echo $invoice-&gt;readAttribute('inv_title');\n</code></pre> <p><pre><code>public function refresh(): ModelInterface\n</code></pre> Refreshes the model attributes re-querying the record from the database</p> <p><pre><code>public function save(): bool\n</code></pre> Inserts or updates a model instance. Returning <code>true</code> on success or <code>false</code> otherwise.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = new Invoices();\n\n$invoice-&gt;inv_cst_id      = 1;\n$invoice-&gt;inv_status_flag = 1;\n$invoice-&gt;inv_title       = 'Invoice for ACME Inc.';\n$invoice-&gt;inv_total       = 100;\n$invoice-&gt;inv_created_at  = '2019-12-25 01:02:03';\n\n$result = $invoice-&gt;save();\n\n$invoice = Invoices::findFirst('inv_id = 100');\n\n$invoice-&gt;inv_total = 120;\n\n$invoice-&gt;save();\n</code></pre> <p>NOTE</p> <p><code>save()</code> no longer accepts parameters to set data. You can use <code>assign</code> instead.</p> <p><pre><code>public function serialize(): string\n</code></pre> Serializes the object ignoring connections, services, related objects or static properties</p> <p><pre><code>public function unserialize(mixed $data)\n</code></pre> Unserializes the object from a serialized string</p> <p><pre><code>final public function setConnectionService(\n    string $connectionService\n): void\n</code></pre> Sets the DependencyInjection connection service name</p> <p><pre><code>public function setDirtyState(\n    int $dirtyState\n): ModelInterface | bool\n</code></pre> Sets the dirty state of the object using one of the <code>DIRTY_STATE_*</code> constants</p> <p><pre><code>public function setEventsManager(\n    EventsManagerInterface $eventsManager\n)\n</code></pre> Sets a custom events manager</p> <p><pre><code>final public function setReadConnectionService(\n    string $connectionService\n): void\n</code></pre> Sets the DependencyInjection connection service name used to read data</p> <p><pre><code>public function setOldSnapshotData(\n    array $data, \n    array $columnMap = null\n)\n</code></pre> Sets the record's old snapshot data. This method is used internally to set old snapshot data when the model was set up to keep snapshot data</p> <p><pre><code>public function setSnapshotData(\n    array $data, \n    array $columnMap = null\n): void\n</code></pre> Sets the record's snapshot data. This method is used internally to set snapshot data when the model was set up to keep snapshot data</p> <p><pre><code>public function setTransaction(\n    TransactionInterface $transaction\n): ModelInterface\n</code></pre> Sets a transaction related to the Model instance</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Customers;\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager;\nuse Phalcon\\Mvc\\Model\\Transaction\\Failed;\n\ntry {\n    $txManager   = new Manager();\n    $transaction = $txManager-&gt;get();\n\n    $customer = new Customers();\n    $customer-&gt;setTransaction($transaction);\n    $customer-&gt;cst_name_last  = 'Vader';\n    $customer-&gt;cst_name_first = 'Darth';\n\n    if (false === $customer-&gt;save()) {\n        $transaction-&gt;rollback('Cannot save Customer');\n    }\n\n    $invoice = new Invoices();\n    $invoice-&gt;setTransaction($transaction);\n\n    $invoice-&gt;inv_cst_id      = $customer-&gt;cst_id;\n    $invoice-&gt;inv_status_flag = 1;\n    $invoice-&gt;inv_title       = 'Invoice for ACME Inc.';\n    $invoice-&gt;inv_total       = 100;\n    $invoice-&gt;inv_created_at  = '2019-12-25 01:02:03';\n\n    if (false === $invoice-&gt;save()) {\n        $transaction-&gt;rollback('Cannot save record');\n    }\n\n    $transaction-&gt;commit();\n} catch (Failed $ex) {\n    echo 'ERROR: ', $ex-&gt;getMessage();\n}\n</code></pre> <p><pre><code>public static function setup(\n    array $options\n): void\n</code></pre> Enables / disables options in the ORM such as events, column renaming etc.</p> <p><pre><code>final public function setWriteConnectionService(\n    string $connectionService\n): void\n</code></pre> Sets the DependencyInjection connection service name used to write data</p> <p><pre><code>public function skipOperation(bool $skip): void\n</code></pre> Skips the current operation forcing a success state</p> <p><pre><code>public static function sum(\n    array $parameters = null\n): float\n</code></pre> Calculates the sum on a column for a result-set of rows that match the specified conditions</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$total = Invoices::sum(\n    [\n        'column' =&gt; 'inv_total',\n    ]\n);\n\necho 'SUM: ', $total, PHP_EOL;\n\n$total = Invoices::sum(\n    [\n        'inv_cst_id = 1',\n        'column' =&gt; 'inv_total',\n    ]\n);\n\necho 'SUM [Customer: 1] ', $total, PHP_EOL;\n</code></pre> <p><pre><code>public function toArray(\n    array $columns = null\n): array\n</code></pre> Returns the instance as an array representation. Accepts an array with column names to include in the result</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::findFirst('inv_id = 4');\n\nprint_r(\n    $invoice-&gt;toArray()\n);\n\n//  [\n//      'inv_id'          =&gt; 4,\n//      'inv_cst_id'      = $customer-&gt;cst_id,\n//      'inv_status_flag' = 1,\n//      'inv_title'       = 'Invoice for ACME Inc.',\n//      'inv_total'       = 100,\n//      'inv_created_at'  = '2019-12-25 01:02:03',\n//  ]\n\nprint_r(\n    $invoice-&gt;toArray(\n        [\n            'inv_status_flag',\n            'inv_title',\n            'inv_total',\n        ]\n    )\n);\n\n//  [\n//      'inv_status_flag' = 1,\n//      'inv_title'       = 'Invoice for ACME Inc.',\n//      'inv_total'       = 100,\n//  ]\n</code></pre> <p><pre><code>public function update(): bool\n</code></pre> Updates a model instance. If the instance doesn't exist in the persistence it will throw an exception. Returning true on success or <code>false</code> otherwise.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::findFirst('inv_id = 4');\n\n$invoice-&gt;inv_total = 120;\n\n$invoice-&gt;update();\n</code></pre> <p><pre><code>public function writeAttribute(\n    string $attribute, \n    mixed $value\n): void\n</code></pre> Writes an attribute value by its name</p> <pre><code>$invoice-&gt;writeAttribute('inv_total', 120);\n</code></pre> <p><pre><code>protected function allowEmptyStringValues(\n    array $attributes\n): void\n</code></pre> Sets a list of attributes that must be skipped from the generated <code>UPDATE</code> statement</p> <pre><code>&lt;?php \n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;allowEmptyStringValues(\n            [\n                'inv_created_at',\n            ]\n        );\n    }\n}\n</code></pre> <p><pre><code>protected function belongsTo(\n    string | array $fields, \n    string $referenceModel, \n    string | array $referencedFields, \n    array options = null\n): Relation\n</code></pre> Setup a reverse 1-1 or n-1 relation between two models</p> <pre><code>&lt;?php \n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass InvoicesXProducts extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            'ixp_inv_id',\n            Invoices::class,\n            'inv_id'\n        );\n    }\n}\n</code></pre> <p><pre><code>protected function hasMany(\n    string | array $fields, \n    string $referenceModel, \n    string | array $referencedFields, \n    array options = null\n): Relation\n</code></pre> Setup a 1-n relation between two models</p> <pre><code>&lt;?php \n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Customers extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;hasMany(\n            'cst_id',\n            Invoices::class,\n            'inv_cst_id'\n        );\n    }\n}\n</code></pre> <p><pre><code>protected function hasManyToMany(\n    string | array $fields,\n    string $intermediateModel, \n    string | array $intermediateFields,\n    string | array $intermediateReferencedFields,\n    string $referenceModel, \n    string | array $referencedFields,\n    array $options = null\n): Relation\n</code></pre> Setup an n-n relation between two models, through an intermediate relation</p> <pre><code>&lt;?php \n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;hasManyToMany(\n            'inv_id',\n            InvoicesXProducts::class,\n            'ixp_inv_id',\n            'ixp_prd_id',\n            Products::class,\n            'prd_id'\n        );\n    }\n}\n</code></pre> <p><pre><code>protected function hasOne(\n    string | array $fields, \n    string $referenceModel, \n    string | array $referencedFields, \n    array options = null\n): Relation\n</code></pre> Setup a 1-1 relation between two models</p> <pre><code>&lt;?php \n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;hasOne(\n            'inv_cst_id',\n            Customers::class,\n            'cst_id'\n        );\n    }\n}\n</code></pre> <p><pre><code>protected function keepSnapshots(\n    bool $keepSnapshot\n): void\n</code></pre> Sets if the model must keep the original record snapshot in memory</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;keepSnapshots(true);\n    }\n}\n</code></pre> <p><pre><code>final protected function setSchema(\n    string $schema\n): ModelInterface\n</code></pre> Sets schema name where the mapped table is located</p> <p><pre><code>final protected function setSource(\n    string $source\n): ModelInterface\n</code></pre> Sets the table name to which model should be mapped </p> <p><pre><code>protected function skipAttributes(array $attributes)\n</code></pre> Sets a list of attributes that must be skipped from the generated <code>INSERT</code>/<code>UPDATE</code> statement</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;skipAttributes(\n            [\n                'inv_created_at',\n            ]\n        );\n    }\n}\n</code></pre> <p><pre><code>protected function skipAttributesOnCreate(\n    array $attributes\n): void\n</code></pre> Sets a list of attributes that must be skipped from the generated <code>INSERT</code> statement</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;skipAttributesOnCreate(\n            [\n                'inv_created_at',\n            ]\n        );\n    }\n}\n</code></pre> <p><pre><code>protected function skipAttributesOnUpdate(\n    array $attributes\n): void\n</code></pre> Sets a list of attributes that must be skipped from the generated <code>UPDATE</code> statement</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;skipAttributesOnUpdate(\n            [\n                'inv_modified_at',\n            ]\n        );\n    }\n}\n</code></pre> <p><pre><code>protected function useDynamicUpdate(\n    bool dynamicUpdate\n): void\n</code></pre> Sets if a model must use dynamic update instead of the all-field update</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;useDynamicUpdate(true);\n    }\n}\n</code></pre> <p><pre><code>protected function validate(\n    ValidationInterface $validator\n): bool\n</code></pre> Executes validators on every validation call</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\ExclusionIn;\n\nclass Invoices extends Model\n{\n    public function validation()\n    {\n        $validator = new Validation();\n\n        $validator-&gt;add(\n            'inv_status_flag',\n            new ExclusionIn(\n                [\n                    'domain' =&gt; [\n                        0,\n                        1,\n                    ],\n                ]\n            )\n        );\n\n        return $this-&gt;validate($validator);\n    }\n}\n</code></pre> <p><pre><code>public function validationHasFailed(): bool\n</code></pre> Check whether validation process has generated any messages</p>"},{"location":"db-models/#creating-models","title":"Creating Models","text":"<p>A model is a class that extends from Phalcon\\Mvc\\Model. Its class name should be in camel case notation:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n\n}\n</code></pre> <p>By default, the model <code>MyApp\\Models\\Invoices</code> will map to the table <code>invoices</code>. If you want to manually specify another name for the mapped table, you can use the <code>setSource()</code> method:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;setSource('co_invoices');\n    }\n}\n</code></pre> <p>The model <code>Invoices</code> now maps to <code>co_invoices</code> table. The <code>initialize()</code> method helps with setting up this model with a custom behavior i.e. a different table.</p> <p>The <code>initialize()</code> method is only called once during the request. This method is intended to perform initializations that apply for all instances of the model created within the application. If you want to perform initialization tasks for every instance created you can use the <code>onConstruct()</code> method:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function onConstruct()\n    {\n        // ...\n    }\n}\n</code></pre> <p>Properties vs. Setters/Getters</p> <p>NOTE</p> <p>The model class uses some properties internally for services. The names of those properties are reserved and cannot be used as fields in the database. Please keep that in mind when naming the fields of your tables. If there are collisions, your models will not update properly.</p> <p><code>container</code>, <code>dirtyState</code>, <code>dirtyRelated</code>, <code>errorMessages</code>, <code>modelsManager</code>, <code>modelsMetaData</code>, <code>related</code>, <code>operationMade</code>, <code>oldSnapshot</code>, <code>skipped</code>, <code>snapshot</code>, <code>transaction</code>, <code>uniqueKey</code>, <code>uniqueParams</code>, <code>uniqueTypes</code></p> <p>Models can be implemented with public properties, meaning that each property can be read and updated updated from any part of the code that has instantiated that model class:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public $inv_id;\n    public $inv_cst_id;\n    public $inv_status_flag;\n    public $inv_title;\n    public $inv_total;\n    public $inv_created_at;\n}\n</code></pre> <p>Another implementation is to use getter and setter functions, which control which properties are publicly available for that model. </p> <p>The benefit of using getters and setters is that the developer can perform transformations and validation checks on the values set or retrieved for the model, which is impossible when using public properties. </p> <p>Additionally, getters and setters allow for future changes without changing the interface of the model class. So if a field name changes, the only change needed will be in the private property of the model referenced in the relevant getter/setter and nowhere else in the code.</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse InvalidArgumentException;\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    protected $inv_id;\n    protected $inv_cst_id;\n    protected $inv_status_flag;\n    protected $inv_title;\n    protected $inv_total;\n    protected $inv_created_at;\n\n    public function getId(): int\n    {\n        return (int) $this-&gt;inv_id;\n    }\n\n    public function getCustomerId(): int\n    {\n        return (int) $this-&gt;inv_cst_id;\n    }\n\n    public function getStatus(): int\n    {\n        return (int) $this-&gt;inv_status_flag;\n    }\n\n    public function getTitle(): string\n    {\n        return (string) $this-&gt;inv_title;\n    }\n\n    public function getTotal(): float\n    {\n        return (float) $this-&gt;inv_total;\n    }\n\n    public function getCreatedAt(): string\n    {\n        return (string) $this-&gt;inv_created_at;\n    }\n\n    public function setCustomerId(int $customerId): Invoices\n    {\n        $this-&gt;inv_cst_id = $customerId;\n\n        return $this;\n    }\n\n    public function setStatus(int $status): Invoices\n    {\n        $this-&gt;inv_status_flag = $status;\n\n        return $this;\n    }\n\n    public function setTitle(string $title): Invoices\n    {\n        $this-&gt;inv_title = $title;\n\n        return $this;\n    }\n\n    public function setTotal(float $total): Invoices\n    {\n        if ($total &lt; 0) {\n            throw new InvalidArgumentException(\n                'Incorrect total'\n            );\n        }\n\n        $this-&gt;inv_total = $total;\n\n        return $this;\n    }\n\n    public function setCreatedAt(string $date): Invoices\n    {\n        $this-&gt;inv_created_at = $date;\n\n        return $this;\n    }\n}\n</code></pre> <p>Public properties provide less complexity in development. However, getters/setters can heavily increase the testability, extensibility and maintainability of applications. You will need to decide which strategy is best for you depending on the needs of the application. The ORM is compatible with both schemes of defining properties.</p> <p>NOTE</p> <p>Underscores in property names can be problematic when using getters and setters.</p> <p>NOTE</p> <p>When using the getters/setters approach, you will need to define your properties as <code>protected</code>.</p> <p>If you use underscores in your property names, you must still use camel case in your getter/setter declarations for use with magic methods. (e.g. <code>$model-&gt;getPropertyName</code> instead of <code>$model-&gt;getProperty_name</code>, <code>$model-&gt;findByPropertyName</code> instead of <code>$model-&gt;findByProperty_name</code>, etc.). </p> <p>The ORM expects camel case naming and underscores are commonly removed. It is therefore recommended naming your properties in the manner shown throughout the documentation. You can use a column map (as described above) to ensure proper mapping of your properties to their database counterparts.</p>"},{"location":"db-models/#records-to-objects","title":"Records To Objects","text":"<p>Every instance of a model represents a row in the table. You can easily access record data by reading object properties. For example, for a table 'co_customers' with the records:</p> <pre><code>mysql&gt; select * from co_customers;\n+--------+---------------+----------------+\n| cst_id | cst_name_last | cst_name_first |\n+--------+---------------+----------------+\n|      1 | Vader         | Darth          |\n|      2 | Skywalker     | Like           |\n|      3 | Skywalker     | Leia           |\n+--------+---------------+----------------+\n3 rows in set (0.00 sec)\n</code></pre> <p>You could find a certain record by its primary key and then print its name:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Customers;\n\n// cst_id = 3\n$customer = Customers::findFirst(3);\n\n// 'Leia'\necho $customer-&gt;cst_name_first;\n</code></pre> <p>Once the record is in memory, you can make modifications to its data and then save changes:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Customers;\n\n// cst_id = 3\n$customer = Customers::findFirst(3);\n\n$customer-&gt;cst_name_last = 'Princess';\n\n$customer-&gt;save();\n</code></pre> <p>As you can see, there is no need to use raw SQL statements. Phalcon\\Mvc\\Model provides high database abstraction for web applications, simplifying database operations.</p>"},{"location":"db-models/#finding-records","title":"Finding Records","text":"<p>Phalcon\\Mvc\\Model also offers several methods for querying records.</p>"},{"location":"db-models/#find","title":"<code>find</code>","text":"<p>The method returns a Phalcon\\Mvc\\Model\\Resultset, Phalcon\\Mvc\\Model\\Resultset\\Comples or Phalcon\\Mvc\\Model\\Resultset\\Simple collection of records even if the result returned is only one record.</p> <p>The method accept a variety of parameters to retrieve data:</p> <p><pre><code>&lt;?php\n\nuse MyApp\\Models\\Customers;\n\n$invoice = Invoices::findFirst('inv_id = 3');\n</code></pre> You can also pass a string with a <code>WHERE</code> clause. In the above example we are getting the same record, instructing the ORM to give us a record with <code>inv_cst_id = 3</code></p> <p>The most flexible syntax is to pass an array with different parameters:</p> <p><pre><code>&lt;?php\n\nuse MyApp\\Models\\Customers;\n\n$invoice = Invoices::findFirst(\n    [\n        'inv_id = 3',\n    ]\n);\n</code></pre> The first parameter of the array (without a key) is treated the same way as the example above (passing a string). The array accepts additional parameters that offer additional options to customize the find operation. </p>"},{"location":"db-models/#findfirst","title":"<code>findFirst</code>","text":"<p>You could also use the <code>findFirst()</code> method to get only the first record matching the given criteria:</p> <p><pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::findFirst();\n</code></pre> Calling <code>findFirst</code> without a parameter will return the first record the ORM finds. Usually this is the first record in the table. </p> <p><pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n// cst_id = 3\n$invoice = Invoices::findFirst(3);\n</code></pre> Passing a number, will query the underlying model using the primary key matching the number parameter passed. If there is no primary key defined or there is a compound key, you will not get any results. </p> <p><pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::findFirst('inv_id = 3');\n</code></pre> You can also pass a string with a <code>WHERE</code> clause. In the above example we are getting the same record, instructing the ORM to give us a record with <code>inv_cst_id = 3</code></p> <p>NOTE</p> <p>If primary key of table is not numeric, use condition. See examples below.</p> <pre><code>$uuid = '5741bfd7-6870-40b7-adf6-cbacb515b9a9';\n$invoice = Invoices::findFirst([\n    'uuid = ?0',\n    'bind' =&gt; [$uuid],\n]);\n\n// OR\n\n$uuid = '5741bfd7-6870-40b7-adf6-cbacb515b9a9';\n$invoice = Invoices::findFirst([\n    'uuid = :primary:',\n    'bind' =&gt; ['primary' =&gt; $uuid],\n]);\n</code></pre> <p>NOTE</p> <p>If you do not use bound parameters in your conditions, PHQL will create a new plan internally, therefore consuming more memory. Using bound parameters is highly recommended!</p> <pre><code>&lt;?php\n\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::findFirst('uuid = \"5741bfd7-6870-40b7-adf6-cbacb515b9a9\"');\n</code></pre>"},{"location":"db-models/#parameters","title":"Parameters","text":"<p>NOTE</p> <p>It is highly recommended to use the array syntax with <code>conditions</code> and <code>bind</code> to shield yourself from SQL injections, especially when the criteria come from user input. For more information check the [Binding Parameters][binding-parameters]` section.</p> <p>Both <code>find()</code> and <code>findFirst()</code> methods accept an associative array specifying the search criteria. </p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::find(\n    [\n        'inv_cst_id = 3',\n        'order' =&gt; 'inv_total desc'\n    ]\n);\n</code></pre> <p>You can (and should) use the <code>conditions</code> and <code>bind</code> array elements which bind parameters to the query parameters. Using this implementation will ensure that your parameters are bound and thus reducing the possibility of SQL injections:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::find(\n    [\n        'conditions' =&gt; 'inv_cst_id = :cst_id:',\n        'bind'       =&gt; [\n            'cst_id' =&gt; 3,\n        ],\n        'order'      =&gt; 'inv_total desc',\n    ]\n);\n</code></pre> <p>The available query options are:</p> <p><code>bind</code></p> <p>Bind is used together with <code>conditions</code>, by replacing placeholders and escaping values thus increasing security</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::findFirst(\n    [\n        'conditions' =&gt; 'inv_id = :inv_id:',\n        'bind'       =&gt; [\n            'inv_id' =&gt; 3,\n        ],\n    ]\n);\n</code></pre> <p><code>bindTypes</code></p> <p>When binding parameters, you can use this option to define additional casting to the bound parameters increasing even more the security of your query.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Mvc\\Model\\Column;\n\n$invoice = Invoices::findFirst(\n    [\n        'conditions' =&gt; 'inv_id = :inv_id:',\n        'bind'       =&gt; [\n            'inv_id' =&gt; 3,\n        ],\n        'bindTypes'  =&gt; [\n            Column::BIND_PARAM_INT,\n        ],\n    ]\n);\n</code></pre> <p><code>cache</code></p> <p>Cache the resultset, reducing the continuous access to the relational system.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::find(\n    [\n        'conditions' =&gt; 'inv_cst_id = :cst_id:',\n        'bind'       =&gt; [\n            'cst_id' =&gt; 3,\n        ],\n        'cache'      =&gt; [\n            'key'      =&gt; 'customer.3',\n            'lifetime' =&gt; 84600,\n        ],\n        'order'      =&gt; 'inv_total desc',\n    ]\n);\n</code></pre> <p><code>columns</code></p> <p>Return specific columns in the model. </p> <p>NOTE</p> <p>When using this option an incomplete object is returned, and therefore you cannot call methods such as <code>update()</code>, <code>getRelated()</code> etc.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::find(\n    [\n        'columns'    =&gt; [\n            'inv_id',\n            'total' =&gt; 'inv_total'\n        ],\n        'conditions' =&gt; 'inv_cst_id = :cst_id:',\n        'bind'       =&gt; [\n            'cst_id' =&gt; 3,\n        ],\n    ]\n);\n</code></pre> <p>The columns array can return the columns directly if only a value has been set for one of the array elements. However, if you choose to specify a key, it will be used as an alias for that field. In the above example, the <code>cst_name_first</code> is aliased as <code>first</code>.</p> <p><code>conditions</code></p> <p>Search conditions for the find operation. Is used to extract only those records that fulfill a specified criterion. By default, Phalcon\\Mvc\\Model assumes the first parameter are the conditions. </p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::find(\n    [\n        'conditions' =&gt; 'inv_cst_id = :cst_id:',\n        'bind'       =&gt; [\n            'cst_id' =&gt; 3,\n        ],\n    ]\n);\n</code></pre> <p><code>for_update</code></p> <p>With this option, Phalcon\\Mvc\\Model reads the latest available data, setting exclusive locks on each row it reads</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::find(\n    [\n        'conditions' =&gt; 'inv_cst_id = :cst_id:',\n        'bind'       =&gt; [\n            'cst_id' =&gt; 3,\n        ],\n        'for_update' =&gt; true,\n    ]\n);\n</code></pre> <p><code>group</code></p> <p>Allows to collect data across multiple records and group the results by one or more columns <code>'group' =&gt; 'name, status'</code></p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::find(\n    [\n        'conditions' =&gt; 'inv_cst_id = :cst_id:',\n        'bind'       =&gt; [\n            'cst_id' =&gt; 3,\n        ],\n        'group'      =&gt; 'inv_status_flag',\n    ]\n);\n</code></pre> <p><code>hydration</code></p> <p>Sets the hydration strategy to represent each returned record in the result</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Mvc\\Model\\Resultset;\n\n$invoices = Invoices::find(\n    [\n        'conditions' =&gt; 'inv_cst_id = :cst_id:',\n        'bind'       =&gt; [\n            'cst_id' =&gt; 3,\n        ],\n        'hydration' =&gt; Resultset::HYDRATE_OBJECTS,\n    ]\n);\n</code></pre> <p><code>limit</code></p> <p>Limit the results of the query to results to certain range</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::find(\n    [\n        'conditions' =&gt; 'inv_cst_id = :cst_id:',\n        'bind'       =&gt; [\n            'cst_id' =&gt; 3,\n        ],\n        'limit'      =&gt; 10,\n    ]\n);\n</code></pre> <p><code>offset</code></p> <p>Offset the results of the query by a certain amount</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::find(\n    [\n        'conditions' =&gt; 'inv_cst_id = :cst_id:',\n        'bind'       =&gt; [\n            'cst_id' =&gt; 3,\n        ],\n        'limit'      =&gt; 10,\n        'offset'     =&gt; 100,\n    ]\n);\n</code></pre> <p><code>order</code></p> <p>Is used to sort the resultset. Use one or more fields separated by commas.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::find(\n    [\n        'conditions' =&gt; 'inv_cst_id = :cst_id:',\n        'bind'       =&gt; [\n            'cst_id' =&gt; 3,\n        ],\n        'order'      =&gt; 'inv_status_flag, inv_total desc',\n    ]\n);\n</code></pre> <p><code>shared_lock</code></p> <p>With this option, Phalcon\\Mvc\\Model reads the latest available data, setting shared locks on each row it reads</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::find(\n    [\n        'conditions'  =&gt; 'inv_cst_id = :cst_id:',\n        'bind'        =&gt; [\n            'cst_id' =&gt; 3,\n        ],\n        'shared_lock' =&gt; true,\n    ]\n);\n</code></pre>"},{"location":"db-models/#query","title":"<code>query</code>","text":"<p>If you prefer, there is also available a way to create queries in an object-oriented way, instead of using an array of parameters:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::query()\n    -&gt;where('inv_cst_id = :cst_id:')\n    -&gt;andWhere('inv_total &gt; :total:')\n    -&gt;bind(\n        [\n            'cst_id' =&gt; 3,\n            'total'  =&gt; 1000,\n        ]\n    )\n    -&gt;orderBy('inv_status_flag, inv_total desc')\n    -&gt;execute()\n;\n</code></pre> <p>The static method <code>query()</code> returns a Phalcon\\Mvc\\Model\\Criteria object that is friendly with IDE auto complete. </p> <p>All the queries are internally handled as PHQL queries. PHQL is a high-level, object-oriented and SQL-like language. This language offers more features to perform queries such as joining other models, group records, aggregations etc.</p>"},{"location":"db-models/#findby","title":"<code>findBy*</code>","text":"<p>You can use the <code>findBy&lt;property-name&gt;()</code> method. This method expands on the <code>find()</code> method mentioned above. It allows you to quickly perform a select query from a table by using the property name in the method itself and passing it a parameter that contains the data you want to search for in that column.</p> <p>For the following model:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public $inv_cst_id;\n    public $inv_id;\n    public $inv_status_flag;\n    public $inv_title;\n    public $inv_created_at;\n}\n</code></pre> <p>We have the properties <code>inv_cst_id</code>, <code>inv_id</code>, <code>inv_status_flag</code>, <code>inv_title</code>, <code>inv_created_at</code>. If we want to find all the invoices with <code>inv_total = 100</code> we can use: </p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::find(\n    [\n        'conditions'  =&gt; 'inv_total = :total:',\n        'bind'        =&gt; [\n            'total' =&gt; 100,\n        ],\n    ]\n);\n</code></pre> <p>but we can also use:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::findByInvTotal(100);\n</code></pre> <p>NOTE</p> <p>The property names are changed to camel case if they have underscores. <code>inv_total</code> becomes <code>InvTotal</code></p> <p>You can also pass parameters in an array as the second parameter. These parameters are the same as the ones you can pass in the <code>find</code> method.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::findByInvTotal(\n    100,\n    [\n        'order' =&gt; `inv_cst_id, inv_created_at`\n    ]\n);\n</code></pre>"},{"location":"db-models/#findfirstby","title":"<code>findFirstBy*</code>","text":"<p>Finally, you can use the <code>findFirstBy&lt;property-name&gt;()</code> method. This method expands on the <code>findFirst()</code> method mentioned above. It allows you to quickly perform a select from a table by using the property name in the method itself and passing it a parameter that contains the data you want to search for in that column.</p> <p>For the following model:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Guestbook extends Model\n{\n    public $id;\n    public $email;\n    public $name;\n    public $text;\n}\n</code></pre> <p>We have the properties <code>id</code>, <code>email</code>, <code>name</code> and <code>text</code>. If we want to find the guest book entry for <code>Darth Vader</code> we can:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Guestbook;\n\n$guest = Guestbook::findFirst(\n    [\n        'conditions'  =&gt; 'name = :name:',\n        'bind'        =&gt; [\n            'name' =&gt; 'Darth Vader',\n        ],\n    ]\n);\n</code></pre> <p>but we can also use:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Guestbook;\n\n$name  = 'Darth Vader';\n$guest = Guestbook::findFirstByName($name);\n</code></pre> <p>NOTE</p> <p>Notice that we used <code>Name</code> in the method call and passed the variable <code>$name</code> to it, which contains the name we are looking for in our table. Notice also that when we find a match with our query, all the other properties are available to us as well.</p>"},{"location":"db-models/#model-resultsets","title":"Model Resultsets","text":"<p>While <code>findFirst()</code> returns directly an instance of the called class (when there is data to be returned), the <code>find()</code> method returns a Phalcon\\Mvc\\Model\\Resultset\\Simple. This is an object that encapsulates all the functionality a resultset has, such as seeking, traversing, counting etc.</p> <p>These objects are more powerful than standard arrays. One of the greatest features of the Phalcon\\Mvc\\Model\\Resultset is that at any time there is only one record in memory. This greatly helps in memory management especially when working with large amounts of data.</p> <p>Some examples of traversing resultsets are:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::find();\n\n// foreach\nforeach ($invoices as $invoice) {\n    echo $invoice-&gt;inv_title, PHP_EOL;\n}\n\n// while\n$invoices-&gt;rewind();\nwhile ($invoices-&gt;valid()) {\n    $invoice = $invoices-&gt;current();\n\n    echo $invoice-&gt;inv_title, PHP_EOL;\n\n    $invoices-&gt;next();\n}\n\n// count\necho count($invoices);\necho $invoices-&gt;count();\n\n// seek\n$invoices-&gt;seek(2);\n$invoice = $invoices-&gt;current();\n\n// array\n$invoice = $invoices[5];\n\n// array - isset\nif (true === isset($invoices[3])) {\n   $invoice = $invoices[3];\n}\n\n// First\n$invoice = $invoices-&gt;getFirst();\n\n// Last\n$invoice = $invoices-&gt;getLast();\n</code></pre> <p>Phalcon's resultsets emulate scrollable cursors. You can get any row just by accessing its position, or seeking the internal pointer to a specific position.</p> <p>NOTE</p> <p>Some database systems do not support scrollable cursors. This forces Phalcon to re-execute the query, in order to rewind the cursor to the beginning and obtain the record at the requested position. Similarly, if a resultset is traversed several times, the query must be executed the same number of times.</p> <p>Storing large query results in memory will consume many resources. You can however instruct Phalcon to fetch data in chunks of rows, thus reducing the need to re-execute the request in many cases. You can achieve that by setting the <code>orm.resultset_prefetch_records</code> setup value. This can be done either in <code>php.ini</code> or in the model <code>setup()</code>. More information about this can be found in the features section.</p> <p>Note that resultsets can be serialized and stored in a cache backend. [Phalcon\\Cache\\Cache][cache] can help with that task. However, serializing data causes Phalcon\\Mvc\\Model to retrieve all the data from the database in an array, thus consuming more memory while this process takes place.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::find();\n\nfile_put_contents(\n    'invoices.cache',\n    serialize($invoices)\n);\n\n$invoices = unserialize(\n    file_get_contents('invoices.cache')\n);\n\nforeach ($invoices as $invoice) {\n    echo $invoice-&gt;inv_title;\n}\n</code></pre>"},{"location":"db-models/#custom-resultsets","title":"Custom Resultsets","text":"<p>There are times that the application logic requires additional manipulation of the data as it is retrieved from the database. Previously, we would just extend the model and encapsulate the functionality in a class in the model or a trait, returning back to the caller usually an array of transformed data. </p> <p>With custom resultsets, you no longer need to do that. The custom resultset will encapsulate the functionality, that otherwise would be in the model, and can be reused by other models, thus keeping the code DRY. This way, the <code>find()</code> method will no longer return the default Phalcon\\Mvc\\Model\\Resultset, but instead the custom one. Phalcon allows you to do this by using the <code>getResultsetClass()</code> in your model.</p> <p>First we need to define the resultset class: <pre><code>&lt;?php\n\nnamespace MyApp\\Mvc\\Model\\Resultset;\n\nuse \\Phalcon\\Mvc\\Model\\Resultset\\Simple;\n\nclass Custom extends Simple\n{\n    public function calculate() {\n        // ....\n    }\n}\n</code></pre></p> <p>In the model, we set the class in the <code>getResultsetClass()</code> as follows:</p> <pre><code>&lt;?php\n\nnamespace Phalcon\\Test\\Models\\Statistics;\n\nuse MyApp\\Mvc\\Model\\Resultset\\Custom;\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;setSource('co_invoices');\n    }\n\n    public function getResultsetClass()\n    {\n        return Custom::class;\n    }\n}\n</code></pre> <p>and finally in your code you will have something like this:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::find(\n    [\n        'conditions'  =&gt; 'inv_cst_id = :cst_id:',\n        'bind'        =&gt; [\n            'cst_id' =&gt; 3,\n        ],\n    ]\n);\n\n$calculated = $invoices-&gt;calculate();\n</code></pre>"},{"location":"db-models/#filtering-resultsets","title":"Filtering Resultsets","text":"<p>The most efficient way to filter data is setting some search criteria, databases will use indexes set on tables to return data faster. Phalcon additionally allows you to filter the data using PHP:</p> <pre><code>&lt;?php\n\n$invoices = Invoices::find();\n\n$invoices = $invoices-&gt;filter(\n    function ($invoice) {\n        if (1 === $invoice-&gt;inv_status_flag) {\n            return $invoice;\n        }\n    }\n);\n</code></pre> <p>The above example will return only the paid invoices from our table (<code>inv_status_flag = 1</code>);</p>"},{"location":"db-models/#binding-parameters","title":"Binding Parameters","text":"<p>Bound parameters are also supported in Phalcon\\Mvc\\Model. You are encouraged to use this methodology to eliminate the possibility of your code being subject to SQL injection attacks. Both <code>string</code> and <code>integer</code> placeholders are supported. </p> <p>NOTE</p> <p>When using <code>integer</code> placeholders you must prefix them with <code>?</code> (<code>?0</code>, <code>?1</code>). When using <code>string</code> placeholders you must enclose the string in <code>:</code> (<code>:name:</code>, <code>:total:</code>). </p> <p>Some examples:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::find(\n    [\n        'conditions'  =&gt; 'inv_title LIKE :title: AND ' .\n                         'inv_total &gt; :total:',\n        'bind'        =&gt; [\n            'title' =&gt; '%ACME%',\n            'total' =&gt; 1000,\n        ],\n    ]\n);\n\n$invoices = Invoices::find(\n    [\n        'conditions'  =&gt; 'inv_title LIKE ?0 = ?0 AND ' .\n                         'inv_total &gt; ?1',\n        'bind'        =&gt; [\n            0 =&gt; '%ACME%',\n            1 =&gt; 1000,\n        ],\n    ]\n);\n\n$invoices = Invoices::find(\n    [\n        'conditions'  =&gt; 'inv_title = ?0 AND ' .\n                         'inv_total &gt; :total:',\n        'bind'        =&gt; [\n            0       =&gt; '%ACME%',\n            'total' =&gt; 1000,\n        ],\n    ]\n);\n</code></pre> <p>Strings are automatically escaped using PDO. This function takes into account the connection charset, therefore it is recommended to define the correct charset in the connection parameters or in the database configuration, as a wrong charset will produce undesired effects when storing or retrieving data.</p> <p>Additionally, you can set the parameter <code>bindTypes</code>, this allows defining how the parameters should be bound according to their data type:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Db\\Column;\n\n$parameters = [\n    'title' =&gt; '%ACME%',\n    'total' =&gt; 1000,\n];\n\n$types = [\n    'title' =&gt; Column::BIND_PARAM_STR,\n    'total' =&gt; Column::BIND_PARAM_INT,\n];\n\n$invoices = Invoices::find(\n    [\n        'conditions'  =&gt; 'inv_title LIKE :title: AND ' .\n                         'inv_total &gt; :total:',\n        'bind'        =&gt; $parameters,\n        'bindTypes'   =&gt; $types,\n    ]\n);\n</code></pre> <p>NOTE</p> <p>Since the default bind type is <code>Phalcon\\Db\\Column::BIND_PARAM_STR</code>, there is no need to specify the 'bindTypes' parameter if all the columns are strings</p> <p>You can also bind arrays in the parameters, especially when using the <code>IN</code> SQL keyword. </p> <p>NOTE</p> <p>You need to use a zero based array for arrays without missing elements </p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$customerIds = [1, 3, 4]; // $array: [[0] =&gt; 1, [1] =&gt; 2, [2] =&gt; 4]\n\n$invoices = Invoices::find(\n    [\n        'conditions'  =&gt; 'inv_cst_id IN ({customerId:array})',\n        'bind'        =&gt; [\n            'customerId' =&gt; $customerIds,\n        ],\n    ]\n);\n\nunset($customerIds[1]);  // $array: [[0] =&gt; 1, [2] =&gt; 4]\n\n$customerIds = array_values($customerIds);  // $array: [[0] =&gt; 1, [1] =&gt; 4]\n\n$invoices = Invoices::find(\n    [\n        'conditions'  =&gt; 'inv_cst_id IN ({customerId:array})',\n        'bind'        =&gt; [\n            'customerId' =&gt; $customerIds,\n        ],\n    ]\n);\n</code></pre> <p>NOTE</p> <p>Bound parameters are available for all query methods such as <code>find()</code> and <code>findFirst()</code> but also the calculation methods like <code>count()</code>, <code>sum()</code>, <code>average()</code> etc.</p> <p>If you're using finders e.g. <code>find()</code>, <code>findFirst()</code>, etc., you can inject the bound parameters when using the string syntax for the first parameter instead of using the <code>conditions</code> array element. Also, when using <code>findFirstBy*</code> the parameters are automatically bound.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::find(\n    'inv_total &gt; ?0',\n    'bind'        =&gt; [\n        1000,\n    ]\n);\n\n$invoices = Invoices::findByInvTotal(1000);\n</code></pre>"},{"location":"db-models/#beforeafter-fetching","title":"Before/After Fetching","text":"<p>There are cases where we need to manipulate the data after it has been fetched from the database so that our model contains what we need in the application layer. As seen in the events document, models act as listeners so we can implement some events as methods in the model.</p> <p>Such methods include <code>beforeSave</code>, <code>afterSave</code> and <code>afterFetch</code> as shown in our example below. The <code>afterFetch</code> method will run right after the data populates the model from the database. We can utilize this method to modify or transform the data in the model.</p> <p><pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public $inv_id;\n    public $inv_cst_id;\n    public $inv_status_flag;\n    public $inv_total;\n    public $status;\n\n    public function beforeSave()\n    {\n        $this-&gt;status = join(',', $this-&gt;status);\n    }\n\n    public function afterFetch()\n    {\n        $this-&gt;status = explode(',', $this-&gt;status);\n    }\n\n    public function afterSave()\n    {\n        $this-&gt;status = explode(',', $this-&gt;status);\n    }\n}\n</code></pre> In the above example we receive a comma delimited string from the database and <code>explode</code> it to an array so that it can be used from our application. After that, you can add or remove elements in the array; before the model saves it, <code>implode</code> will be called to store the array as a string in the database.</p> <p>If you use getters/setters instead of/or together with public properties, you can initialize the field once it is accessed:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public $inv_id;\n    public $inv_cst_id;\n    public $inv_status_flag;\n    public $inv_total;\n    public $status;\n\n    public function getStatus()\n    {\n        return explode(',', $this-&gt;status);\n    }\n}\n</code></pre>"},{"location":"db-models/#calculations","title":"Calculations","text":"<p>Calculations (or aggregations) are helpers for commonly used functions of database systems such as <code>COUNT</code>, <code>SUM</code>, <code>MAX</code>, <code>MIN</code> or <code>AVG</code>. Phalcon\\Mvc\\Model allows to use these functions directly from the exposed methods.</p> <p><code>COUNT</code></p> <pre><code>&lt;?php\n\n$rowcount = Invoices::count();\n\n// inv_cst_id = 3\n$rowcount = Invoices::count(\n    [\n        'inv_cst_id = ?0',\n        'bind'        =&gt; [\n            3,\n        ],\n    ]\n);\n</code></pre> <p>We can also use the <code>group</code> parameter to group our results. The count results appear in the <code>rowcount</code> property of each object in the collection returned.</p> <pre><code>&lt;?php\n\n$group = Invoices::count(\n    [\n        'group' =&gt; 'inv_cst_id',\n    ]\n);\nforeach ($group as $row) {\n   echo 'Count: ', $row-&gt;rowcount, ' - Customer: ', $row-&gt;inv_cst_id;\n}\n\n$group = Invoices::count(\n    [\n        'group' =&gt; 'inv_cst_id',\n        'order' =&gt; 'rowcount',\n    ]\n);\n</code></pre> <p><code>SUM</code></p> <p><pre><code>&lt;?php\n\n$total = Invoices::sum(\n    [\n        'column' =&gt; 'inv_total',\n    ]\n);\n\n$total = Invoices::sum(\n    [\n        'column'     =&gt; 'total',\n        'conditions' =&gt; 'inv_cst_id = ?0',\n        'bind'       =&gt; [\n            3\n        ]\n    ]\n);\n</code></pre> You can also group results. The count results appear in the <code>sumatory</code> property of each object in the collection returned.</p> <pre><code>&lt;?php\n\n$group = Invoices::sum(\n    [\n        'column' =&gt; 'inv_total',\n        'group'  =&gt; 'inv_cst_id',\n    ]\n);\n\nforeach ($group as $row) {\n   echo 'Customer: ', $row-&gt;inv_cst_id, ' - Total: ', $row-&gt;sumatory;\n}\n\n$group = Invoices::sum(\n    [\n        'column' =&gt; 'inv_total',\n        'group'  =&gt; 'inv_cst_id',\n        'order'  =&gt; 'sumatory DESC',\n    ]\n);\n</code></pre> <p><code>AVERAGE</code></p> <pre><code>&lt;?php\n\n$average = Invoices::average(\n    [\n        'column' =&gt; 'inv_total',\n    ]\n);\n\n$average = Invoices::average(\n    [\n        'column'     =&gt; 'inv_total',\n        'conditions' =&gt; 'inv_status_flag = ?0',\n        'bind'       =&gt; [\n            0\n        ]\n    ]\n);\n</code></pre> <p><code>MAX</code> - <code>MIN</code></p> <pre><code>&lt;?php\n\n$max = Invoices::maximum(\n    [\n        'column' =&gt; 'inv_total',\n    ]\n);\n\n$max = Invoices::maximum(\n    [\n        'column'     =&gt; 'inv_total',\n        'conditions' =&gt; 'inv_status_flag = ?0',\n        'bind'       =&gt; [\n            0\n        ],\n    ]\n);\n\n$min = Invoices::minimum(\n    [\n        'column' =&gt; 'inv_total',\n    ]\n);\n\n$min = Invoices::minimum(\n    [\n        'column'     =&gt; 'inv_total',\n        'conditions' =&gt; 'inv_status_flag = ?0',\n        'bind'       =&gt; [\n            0\n        ],\n    ]\n);\n</code></pre>"},{"location":"db-models/#creating-updating","title":"Creating - Updating","text":"<p>The <code>Phalcon\\Mvc\\Model::save()</code> method allows you to create/update records according to whether they already exist in the table associated with a model. The save method is called internally by the create and update methods of Phalcon\\Mvc\\Model. For this to work as expected it is necessary to have properly defined a primary key in the entity to determine whether a record should be created or updated.</p> <p>The method also executes associated validators, virtual foreign keys and events that are defined in the model:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = new Invoices();\n\n$invoice-&gt;inv_cst_id      = 1;\n$invoice-&gt;inv_status_flag = 1;\n$invoice-&gt;inv_title       = 'Invoice for ACME Inc.';\n$invoice-&gt;inv_total       = 100;\n$invoice-&gt;inv_created_at  = '2019-12-25 01:02:03';\n\n$result = $invoice-&gt;save();\n\nif (false === $result) {\n\n    echo 'Error saving Invoice: ';\n\n    $messages = $invoice-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo $message . PHP_EOL;\n    }\n} else {\n\n    echo 'Record Saved';\n}\n</code></pre> <p>You can also use the <code>assign()</code> method and pass an array of <code>field =&gt; value</code> elements, to avoid assigning each column manually. Phalcon\\Mvc\\Model will check if there are setters implemented for the columns passed in the array, giving priority to them, instead of assign directly the values of the attributes:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = new Invoices();\n\n$invoice-&gt;assign(\n    [\n        'inv_cst_id'      =&gt; 1,\n        'inv_status_flag' =&gt; 1,\n        'inv_title'       =&gt; 'Invoice for ACME Inc.',\n        'inv_total'       =&gt; 100,\n        'inv_created_at'  =&gt; '2019-12-25 01:02:03',\n    ]\n);\n\n$result = $invoice-&gt;save();\n</code></pre> <p>Values assigned directly, or via the array of attributes, are escaped/sanitized according to the related attribute data type. So you can pass an insecure array without worrying about possible SQL injections:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = new Invoices();\n\n$invoice-&gt;assign($_POST);\n\n$result = $invoice-&gt;save();\n</code></pre> <p>NOTE</p> <p>Without precautions mass assignment could allow attackers to set any database column's value. Only use this feature if you want to permit a user to insert/update every column in the model, even if those fields are not in the submitted form.</p> <p>You can set an additional parameter in <code>assign</code> to set a whitelist of fields that are only taken into account when doing the mass assignment:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = new Invoices();\n\n$invoice-&gt;assign(\n    $_POST,\n    [\n        'inv_cst_id',\n        'inv_status_flag',\n        'inv_title',\n        'inv_total',\n    ]\n);\n\n$result = $invoice-&gt;save();\n</code></pre> <p>NOTE</p> <p>On really busy applications, you can use <code>create</code> or <code>update</code> for the respective operations. By using those two methods instead of save, we ensure that data will be saved or not in the database, since those throw exceptions on <code>create</code> if the record already exists, and on <code>update</code> if the record does not exist.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = new Invoices();\n\n$invoice-&gt;inv_id          = 1234;\n$invoice-&gt;inv_cst_id      = 1;\n$invoice-&gt;inv_status_flag = 1;\n$invoice-&gt;inv_title       = 'Invoice for ACME Inc.';\n$invoice-&gt;inv_total       = 100;\n$invoice-&gt;inv_created_at  = '2019-12-25 01:02:03';\n\n$result = $invoice-&gt;update();\n\nif (false === $result) {\n\n    echo 'Error saving Invoice: ';\n\n    $messages = $invoice-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo $message . PHP_EOL;\n    }\n} else {\n\n    echo 'Record Updated';\n\n}\n</code></pre> <p>The methods <code>create</code> and <code>update</code> also accept an array of values as parameter.</p>"},{"location":"db-models/#deleting","title":"Deleting","text":"<p>The <code>delete()</code> method allows you to delete a record. It returns a boolean signifying success or failure</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::findFirst(\n    [\n        'conditions' =&gt; 'inv_id = :id:',\n        'bind'       =&gt; [\n            'id' =&gt; 4,\n        ]\n    ]\n);\n\nif (false !== $invoice) {\n    if (false === $invoice-&gt;delete()) {\n        $messages = $invoice-&gt;getMessages();\n\n        foreach ($messages as $message) {\n            echo $message . PHP_EOL;\n        }\n    } else {\n\n        echo 'Record Deleted';\n    }\n}\n</code></pre> <p>You can also delete many records by traversing a resultset with a <code>foreach</code>:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::find(\n    [\n        'conditions' =&gt; 'inv_cst_id = :id:',\n        'bind'       =&gt; [\n            'id' =&gt; 3,\n        ]\n    ]\n);\n\nforeach ($invoices as $invoice) {\n    if (false === $invoice-&gt;delete()) {\n        $messages = $invoice-&gt;getMessages();\n\n        foreach ($messages as $message) {\n            echo $message . PHP_EOL;\n        }\n    } else {\n\n        echo 'Record Deleted';\n    }\n}\n</code></pre> <p>NOTE</p> <p>Check the transactions section on how you can delete all the records in a loop with one operation</p>"},{"location":"db-models/#hydration-modes","title":"Hydration Modes","text":"<p>As mentioned earlier, resultsets are collections of complete objects. This means that every returned result is an object, representing a row in the database. These documents can be modified and later on saved to persist the changes in the database.</p> <p>However, there are times that you will need to get the data in a read only mode, such as in cases of just viewing data. In these cases, it is useful to change the way the records are returned to save resources and increase performance. The strategy used to represent these objects returned in a resultset is called <code>hydration</code>.</p> <p>Phalcon offers three ways of hydrating data:</p> Result Mode Arrays <code>Phalcon\\Mvc\\Model\\Resultset::HYDRATE_ARRAYS</code> Objects <code>Phalcon\\Mvc\\Model\\Resultset::HYDRATE_OBJECTS</code> Records <code>Phalcon\\Mvc\\Model\\Resultset::HYDRATE_RECORDS</code> <p>The default hydration mode is to return records (<code>HYDRATE_RECORDS</code>). We can easily change the hydration mode to get arrays or objects back. Changing the hydration mode to anything other than <code>HYDRATE_RECORDS</code> will return objects (or arrays) that have no connection to the database i.e. we will not be able to perform any operations on those objects such as <code>save()</code>, <code>create()</code>, <code>delete()</code> etc.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Mvc\\Model\\Resultset;\n\n$invoices = Invoices::findFirst(\n    [\n        'conditions' =&gt; 'inv_id = :id:',\n        'bind'       =&gt; [\n            'id' =&gt; 4,\n        ]\n    ]\n);\n\n// Array\n$invoices-&gt;setHydrateMode(\n    Resultset::HYDRATE_ARRAYS\n);\n\nforeach ($invoices as $invoice) {\n    echo $invoice['inv_total'], PHP_EOL;\n}\n\n// \\stdClass\n$invoices-&gt;setHydrateMode(\n    Resultset::HYDRATE_OBJECTS\n);\n\nforeach ($invoices as $invoice) {\n    echo $invoice-&gt;inv_total, PHP_EOL;\n}\n\n// Invoices\n$invoices-&gt;setHydrateMode(\n    Resultset::HYDRATE_RECORDS\n);\n\nforeach ($invoices as $invoice) {\n    echo $invoice-&gt;inv_total, PHP_EOL;\n}\n</code></pre> <p>Hydration mode can also be passed as a parameter of <code>find</code>, <code>findFirst</code>, <code>findFirstBy*</code> etc.:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Mvc\\Model\\Resultset;\n\n$invoices = Invoices::findFirst(\n    [\n        'hydration'  =&gt; Resultset::HYDRATE_ARRAYS,\n        'conditions' =&gt; 'inv_id = :id:',\n        'bind'       =&gt; [\n            'id' =&gt; 4,\n        ],\n    ]\n);\n\nforeach ($invoices as $invoice) {\n    echo $invoice['inv_total'], PHP_EOL;\n}\n</code></pre>"},{"location":"db-models/#table-prefixes","title":"Table Prefixes","text":"<p>If you want all your tables to have certain prefix and without setting the source in all models, you can use the Phalcon\\Mvc\\Model\\Manager and the method <code>setModelPrefix()</code>:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model\\Manager;\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n\n}\n\n$manager = new Manager();\n\n$manager-&gt;setModelPrefix('co_');\n\n$invoices = new Invoices(null, null, $manager);\n\necho $invoices-&gt;getSource(); // will return co_invoices\n</code></pre>"},{"location":"db-models/#identity-columns","title":"Identity Columns","text":"<p>Some models may have identity columns. These columns usually are the primary key of the mapped table. Phalcon\\Mvc\\Model can recognize the identity column omitting it in the generated <code>INSERT</code> SQL statements, to allow the database system to correctly generate a new value for that field. After creating a new record, the identity field will always be registered with the value generated in the database system for it:</p> <pre><code>&lt;?php\n\n$invoice-&gt;save();\n\necho $invoice-&gt;inv_id; // 4\n</code></pre> <p>Phalcon\\Mvc\\Model attempts to recognize the identity column from each table. However, depending on the database system, these columns might be serial columns, such as in the case of PostgreSQL or <code>auto_increment</code> columns in the case of MySQL.</p> <p>PostgreSQL uses sequences to generate automatically numeric values for the primary key. Phalcon tries to obtain the generated value from the sequence <code>table_field_seq</code>, for example: <code>co_invoices_id_seq</code>. If the sequence name is different, you can always use the <code>getSequenceName()</code> method in the model, instructing Phalcon the sequence it needs to use for the primary key:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function getSequenceName()\n    {\n        return 'invoices_sequence_name';\n    }\n}\n</code></pre>"},{"location":"db-models/#skipping-columns","title":"Skipping Columns","text":"<p>Depending on how you implement business rules or model rules in your database, certain fields could very well be ignored in database operations. For instance, if we have a <code>inv_created_date</code> in our model, we can instruct the database system to inject the current timestamp on it:</p> <pre><code>CREATE TABLE co_invoices (\n    // ...\n    inv_created_at datetime DEFAULT CURRENT_TIMESTAMP\n)\n</code></pre> <p>The code above (for MySQL) instructs the RDBMS to assign the current timestamp on the <code>inv_created_at</code> field when the record is created. We can therefore omit this field when creating a record. Similarly, we might want to ignore some fields when we are updating records.</p> <p>To achieve this task we can use the <code>skipAttributes</code> (for any operation), <code>skipAttributesOnCreate</code> (create) or <code>skipAttributesOnUpdate</code> (update)</p> <p>To tell Phalcon\\Mvc\\Model that always omits some fields in the creation and/or update of records in order to delegate the database system the assignation of the values by a trigger or a default:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;skipAttributes(\n            [\n                'inv_total',\n                'inv_created_at',\n            ]\n        );\n\n        $this-&gt;skipAttributesOnCreate(\n            [\n                'inv_created_at',\n            ]\n        );\n\n        $this-&gt;skipAttributesOnUpdate(\n            [\n                'inv_modified_at',\n            ]\n        );\n    }\n}\n</code></pre> <p>If you want to set default values in your model properties (such as the <code>inv_created_at</code>) you can use the Phalcon\\Db\\RawValue:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Db\\RawValue;\n\n$invoice = new Invoices();\n$invoice-&gt;inv_id          = 1234;\n$invoice-&gt;inv_cst_id      = 1;\n$invoice-&gt;inv_status_flag = 1;\n$invoice-&gt;inv_title       = 'Invoice for ACME Inc.';\n$invoice-&gt;inv_total       = 100;\n$invoice-&gt;inv_created_at  = new RawValue('default');\n\n$invoice-&gt;create();\n</code></pre> <p>We can also take advantage of the <code>beforeCreate</code> event in the model to assign the default value there:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Db\\RawValue;\n\nclass Invoices extends Model\n{\n    public function beforeCreate()\n    {\n        $this-&gt;inv_created_at = new RawValue('default');\n    }\n}\n</code></pre> <p>NOTE</p> <p>Never use a Phalcon\\Db\\RawValue to assign external data (such as user input) or variable data. The value of these fields is ignored when binding parameters to the query. So it could be used for SQL injection attacks.</p>"},{"location":"db-models/#dynamic-updates","title":"Dynamic Updates","text":"<p>SQL <code>UPDATE</code> statements are by default created with every column defined in the model (full all-field SQL update). You can change specific models to make dynamic updates, in this case, just the fields that had changed are used to create the final SQL statement.</p> <p>In some cases this could improve the performance by reducing the traffic between the application and the database server, especially when the target table has blob/text fields:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;useDynamicUpdate(true);\n    }\n}\n</code></pre>"},{"location":"db-models/#column-mapping","title":"Column Mapping","text":"<p>The ORM supports an independent column map, which allows the developer to use different column names in the model to the ones in the table. Phalcon will recognize the new column names and will rename them accordingly to match the respective columns in the database. This is a great feature when one needs to rename fields in the database without having to worry about all the queries in the code. </p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public $inv_id;\n    public $inv_cst_id;\n    public $inv_status_flag;\n    public $inv_title;\n    public $inv_total;\n    public $inv_created_at;\n\n    public function columnMap()\n    {\n        return [\n            'inv_id'          =&gt; 'id',\n            'inv_cst_id'      =&gt; 'customerId',\n            'inv_status_flag' =&gt; 'status',\n            'inv_title'       =&gt; 'title',\n            'inv_total'       =&gt; 'total',\n            'inv_created_at'  =&gt; 'createdAt',\n        ];\n    }\n}\n</code></pre> <p>NOTE</p> <p>In the array defined in the column map, the keys are the actual names of the fields in the database, and the values are the virtual fields we can use in your code</p> <p>Now we can use those virtual fields (or column map) in your code:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::findFirst(\n    [\n        'conditions' =&gt; 'inv_id = :id:',\n        'bind'       =&gt; [\n            'id' =&gt; 4,\n        ]\n    ]\n);\n\necho $invoice-&gt;customerId, PHP_EOL,\n     $invoice-&gt;total, PHP_EOL,\n     $invoice-&gt;createdAt, PHP_EOL;\n\n$invoices = Invoices::find(\n    [\n        'order' =&gt; 'createdAt DESC',\n    ]\n);\n\nforeach ($invoices as $invoice) {\n    echo $invoice-&gt;customerId, PHP_EOL,\n         $invoice-&gt;total, PHP_EOL,\n         $invoice-&gt;createdAt, PHP_EOL;\n}\n\n$invoice = new Invoices();\n\n$invoice-&gt;customerId = 1;\n$invoice-&gt;status     = 1;\n$invoice-&gt;title      = 'Invoice for ACME Inc.';\n$invoice-&gt;total      = 100;\n$invoice-&gt;createdAt  = '2019-12-25 01:02:03';\n\n$invoice-&gt;save();\n</code></pre> <p>Considerations</p> <p>Consider the following when renaming your columns:</p> <ul> <li>References to attributes in relationships/validators must use the virtual names</li> <li>Refer the real column names will result in an exception by the ORM</li> </ul> <p>The independent column map allows you to:</p> <ul> <li>Write applications using your own conventions</li> <li>Eliminate vendor prefixes/suffixes in your code</li> <li>Change column names without changes your application code</li> </ul>"},{"location":"db-models/#record-snapshots","title":"Record Snapshots","text":"<p>Specific models could be set to maintain a record snapshot when they are queried. You can use this feature to implement auditing or just to know what fields have been changed in the model compared to the data in the database.</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;keepSnapshots(true);\n    }\n}\n</code></pre> <p>When activating this feature, the application consumes a bit more of memory, to keep track of the original values obtained from the database. In models that have this feature activated, you can check what fields changed as follows:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoice = Invoices::findFirst();\n\n$invoice-&gt;inv_total = 120;\n\nvar_dump($invoice-&gt;getChangedFields()); // ['inv_total']\n\nvar_dump($invoice-&gt;hasChanged('inv_total')); // true\n\nvar_dump($invoice-&gt;hasChanged('inv_cst_id')); // false\n</code></pre> <p>Snapshots are updated on model creation/update. Using <code>hasUpdated()</code> and <code>getUpdatedFields()</code> can be used to check if fields were updated after a create/save/update but it could potentially cause problems to your application if you execute <code>getChangedFields()</code> in <code>afterUpdate()</code>, <code>afterSave()</code> or <code>afterCreate()</code>. </p> <p>You can disable this functionality by using:</p> <p><pre><code>&lt;?php\n\nPhalcon\\Mvc\\Model::setup(\n    [\n        'updateSnapshotOnSave' =&gt; false,\n    ]\n);\n</code></pre> or if you prefer set this in your <code>php.ini</code></p> <pre><code>phalcon.orm.update_snapshot_on_save = 0\n</code></pre> <p>Using this functionality will have the following effect:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public $inv_id;\n    public $inv_cst_id;\n    public $inv_status_flag;\n    public $inv_title;\n    public $inv_total;\n    public $inv_created_at;\n\n    public function initialize()\n    {\n        $this-&gt;keepSnapshots(true);\n    }\n}\n\n$invoice = new Invoices();\n\n$invoice-&gt;inv_id          = 1234;\n$invoice-&gt;inv_cst_id      = 1;\n$invoice-&gt;inv_status_flag = 1;\n$invoice-&gt;inv_title       = 'Invoice for ACME Inc.';\n$invoice-&gt;inv_total       = 100;\n$invoice-&gt;inv_created_at  = '2019-12-25 01:02:03';\n\n$invoice-&gt;create();\n\nvar_dump(\n    $invoice-&gt;getChangedFields() // []\n);\n\n$invoice-&gt;inv_total = 120;\n\nvar_dump(\n    $invoice-&gt;getChangedFields() // ['inv_total']\n);\n\n$invoice-&gt;update();\n\nvar_dump(\n    $invoice-&gt;getChangedFields() // []\n);\n</code></pre> <p><code>getUpdatedFields()</code> will properly return updated fields or as mentioned above you can go back to the previous behavior by setting the relevant ini value.</p>"},{"location":"db-models/#events","title":"Events","text":"<p>As mentioned before Phalcon\\Mvc\\Model acts as a listener to events. Therefore, all the events that the model is listening to can be implemented as methods in the model itself. You can check the events document for additional information.</p> <p>The events supported are:</p> <ul> <li><code>afterCreate</code></li> <li><code>afterDelete</code></li> <li><code>afterFetch</code></li> <li><code>afterSave</code></li> <li><code>afterUpdate</code></li> <li><code>afterValidation</code></li> <li><code>afterValidationOnCreate</code></li> <li><code>afterValidationOnUpdate</code></li> <li><code>beforeDelete</code></li> <li><code>beforeCreate</code></li> <li><code>beforeSave</code></li> <li><code>beforeUpdate</code></li> <li><code>beforeValidation</code></li> <li><code>beforeValidationOnCreate</code></li> <li><code>beforeValidationOnUpdate</code></li> <li><code>notDeleted</code></li> <li><code>notSaved</code></li> <li><code>onValidationFails</code></li> <li><code>prepareSave</code></li> <li><code>validation</code></li> </ul> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Messages\\Message as Message;\n\nclass Invoices extends Model\n{\n    public function beforeSave()\n    {\n        if (0 === $this-&gt;inv_status_flag) {\n            $message = new Message(\n                'Sorry, an invoice cannot be unpaid'\n            );\n\n            $this-&gt;appendMessage($message);\n        }\n    }\n}\n</code></pre>"},{"location":"db-models/#transactions","title":"Transactions","text":"<p>Transactions are necessary to ensure data integrity, when we need to insert or update data in more than one table during the same operation. Phalcon\\Mvc\\Model exposes the <code>setTransaction</code> method that allows you to bind each model to an active transaction.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Customers;\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager;\nuse Phalcon\\Mvc\\Model\\Transaction\\Failed;\n\ntry {\n    $txManager   = new Manager();\n    $transaction = $txManager-&gt;get();\n\n    $customer = new Customers();\n    $customer-&gt;setTransaction($transaction);\n    $customer-&gt;cst_name_last  = 'Vader';\n    $customer-&gt;cst_name_first = 'Darth';\n\n    if (false === $customer-&gt;save()) {\n        $transaction-&gt;rollback('Cannot save Customer');\n    }\n\n    $invoice = new Invoices();\n    $invoice-&gt;setTransaction($transaction);\n\n    $invoice-&gt;inv_cst_id      = $customer-&gt;cst_id;\n    $invoice-&gt;inv_status_flag = 1;\n    $invoice-&gt;inv_title       = 'Invoice for ACME Inc.';\n    $invoice-&gt;inv_total       = 100;\n    $invoice-&gt;inv_created_at  = '2019-12-25 01:02:03';\n\n    if (false === $invoice-&gt;save()) {\n        $transaction-&gt;rollback('Cannot save record');\n    }\n\n    $transaction-&gt;commit();\n} catch (Failed $ex) {\n    echo 'ERROR: ', $ex-&gt;getMessage();\n}\n</code></pre> <p>You can also include finder results in your transactions or even have multiple transactions running at the same time:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Customers;\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager;\nuse Phalcon\\Mvc\\Model\\Transaction\\Failed;\n\ntry {\n    $txManager   = new Manager();\n    $transaction = $txManager-&gt;get();\n\n    $customer = new Customers();\n    $customer-&gt;setTransaction($transaction);\n    $customer-&gt;cst_name_last  = 'Vader';\n    $customer-&gt;cst_name_first = 'Darth';\n\n    if (false === $customer-&gt;save()) {\n        $transaction-&gt;rollback('Cannot save Customer');\n    }\n\n    $average = Invoices::average(\n        [\n            Model::TRANSACTION_INDEX =&gt; $transaction,\n            'column'     =&gt; 'inv_total',\n            'conditions' =&gt; 'inv_cst_id = :customerId:',\n            'bind'       =&gt; [\n                'customerId' =&gt; 3,\n            ],\n        ]\n    );\n\n    $invoice = new Invoices();\n    $invoice-&gt;setTransaction($transaction);\n\n    $invoice-&gt;inv_cst_id      = $customer-&gt;cst_id;\n    $invoice-&gt;inv_status_flag = 1;\n    $invoice-&gt;inv_title       = 'Invoice for ACME Inc.';\n    $invoice-&gt;inv_total       = 100 + $average;\n    $invoice-&gt;inv_created_at  = '2019-12-25 01:02:03';\n\n    if (false === $invoice-&gt;save()) {\n        $transaction-&gt;rollback('Cannot save record');\n    }\n\n    $transaction-&gt;commit();\n} catch (Failed $ex) {\n    echo 'ERROR: ', $ex-&gt;getMessage();\n}\n</code></pre>"},{"location":"db-models/#changing-schema","title":"Changing Schema","text":"<p>If a model is mapped to a table that is located in a different schema than the default, you can use the <code>setSchema()</code> to point to the correct location:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;setSchema('invoices');\n    }\n}\n</code></pre>"},{"location":"db-models/#multiple-databases","title":"Multiple Databases","text":"<p>Phalcon models by default connect to the same database connection (<code>db</code> service) that has been defined in the dependency injection container. However, you might need to connect specific models to different connections, which could be connections to different databases.</p> <p>We can define which model connects to which database in the <code>initialize</code> method of each model:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\nuse Phalcon\\Db\\Adapter\\Pdo\\PostgreSQL;\n\n$container = new FactoryDefault();\n\n// MySQL\n$container-&gt;set(\n    'dbMysql',\n    function () {\n        return new Mysql(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'tutorial',\n            ]\n        );\n    },\n    true\n);\n\n// PostgreSQL\n$container-&gt;set(\n    'dbPostgres',\n    function () {\n        return new PostgreSQL(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'postgres',\n                'password' =&gt; '',\n                'dbname'   =&gt; 'tutorial',\n            ]\n        );\n    }\n);\n</code></pre> <p>and in the <code>initialize()</code> method:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;setConnectionService('dbPostgres');\n    }\n}\n</code></pre> <p>Additional flexibility is available regarding database connections. You can specify a different connection for <code>read</code> operations and a different one for <code>write</code> operations. This is particularly useful when you have memory databases that can be used for read operations and different, more powerful databases that are used for <code>write</code> operations.</p> <p>You can set two different connections and utilize each database in each model transparently</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\nuse Phalcon\\Db\\Adapter\\Pdo\\PostgreSQL;\n\n$container = new FactoryDefault();\n\n// MySQL - read\n$container-&gt;set(\n    'mysqlRead',\n    function () {\n        return new Mysql(\n            [\n                'host'     =&gt; '10.0.4.100',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'tutorial',\n            ]\n        );\n    },\n    true\n);\n\n// MySQL - write\n$container-&gt;set(\n    'mysqlWrite',\n    function () {\n        return new Mysql(\n            [\n                'host'     =&gt; '10.0.4.200',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'tutorial',\n            ]\n        );\n    },\n    true\n);\n</code></pre> <p>and in the <code>initialize()</code> method:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;setReadConnectionService('mysqlRead');\n\n        $this-&gt;setWriteConnectionService('mysqlWrite');\n    }\n}\n</code></pre> <p>The ORM also provides Horizontal Sharding features, by allowing you to implement a <code>shard</code> selection according to the query conditions:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    /**\n     * Dynamically selects a shard\n     *\n     * @param array $intermediate\n     * @param array $bindParams\n     * @param array $bindTypes\n     *\n     * @return Phalcon\\Db\\Adapter\\AdapterInterface\n     */\n    public function selectReadConnection(\n        $intermediate, \n        $bindParams, \n        $bindTypes\n    ) {\n        if (true === isset($intermediate['where'])) {\n            $conditions = $intermediate['where'];\n\n            if ($conditions['left']['name'] === 'id') {\n                $id = $conditions['right']['value'];\n\n                if ($id &gt; 0 &amp;&amp; $id &lt; 10000) {\n                    return $this-&gt;getDI()-&gt;get('dbShard1');\n                }\n\n                if ($id &gt; 10000) {\n                    return $this-&gt;getDI()-&gt;get('dbShard2');\n                }\n            }\n        }\n\n        return $this-&gt;getDI()-&gt;get('dbShard0');\n    }\n}\n</code></pre> <p>In the above example, we are checking the <code>$intermediate</code> array, which is an array constructed internally in Phalcon, offering the intermediate representation of the query. We check if we have any <code>where</code> conditions. If not, we just use the default shard <code>dbShard0</code>. </p> <p>If conditions have been defined, we are checking if we have the <code>id</code> as a field in the conditions, and retrieve its value. If the <code>id</code> is between <code>0</code> and <code>100000</code> then we use <code>dbShard1</code>, alternatively <code>dbShard2</code>.</p> <p>The <code>selectReadConnection()</code> method is called every time we need to get data from the database, and returns the correct connection to be used.</p>"},{"location":"db-models/#dependency-injection","title":"Dependency Injection","text":"<p>Phalcon\\Mvc\\Model is tightly bound to the DI container. You can retrieve the container by using the <code>getDI</code> method. Therefore you have access to all services registered in the DI container. </p> <p>The following example shows you how you can print any messages generated by an unsuccessful <code>save</code> operation in the model, and show these messages in the flash messenger. To do this, we use the <code>notSaved</code> event:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function notSaved()\n    {\n        $flash    = $this-&gt;getDI()-&gt;getFlash();\n        $messages = $this-&gt;getMessages();\n\n        // Show validation messages\n        foreach ($messages as $message) {\n            $flash-&gt;error($message);\n        }\n    }\n}\n</code></pre>"},{"location":"db-models/#model-features","title":"Model Features","text":"<p>The ORM has several options that control specific behaviors globally. You can enable or disable these features by adding specific lines to your <code>php.ini</code> file or use the <code>setup</code> static method on the model. You can enable or disable these features temporarily in your code or permanently.</p> <pre><code>phalcon.orm.column_renaming = false\nphalcon.orm.events          = false\n</code></pre> <p>or by using the <code>Model</code>:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nModel::setup(\n    [\n        'columnRenaming' =&gt; false,\n        'events'         =&gt; false,\n    ]\n);\n</code></pre> <p>The available options are:</p> Option Default Description <code>caseInsensitiveColumnMap</code> <code>false</code> Case insensitive column map <code>castLastInsertIdToInt</code> <code>false</code> Casts the <code>lastInsertId</code> to an integer <code>castOnHydrate</code> <code>false</code> Automatic cast to original types on hydration <code>columnRenaming</code> <code>true</code> Column renaming <code>disableAssignSetters</code> <code>false</code> Disable setters <code>enableImplicitJoins</code> <code>true</code> Enable implicit joins <code>events</code> <code>true</code> Callbacks, hooks and event notifications from all the models <code>exceptionOnFailedMetaDataSave</code> <code>false</code> Throw an exception when there is a failed meta-data save <code>exceptionOnFailedSave</code> <code>false</code> Throw an exception when there is a failed <code>save()</code> <code>forceCasting</code> <code>false</code> Force casting bound parameters to their native types <code>ignoreUnknownColumns</code> <code>false</code> Ignore unknown columns on the model <code>lateStateBinding</code> <code>false</code> Late state binding of the <code>Phalcon\\Mvc\\Model::cloneResultMap()</code> method <code>notNullValidations</code> <code>true</code> Automatically validate the not <code>null</code> columns present <code>phqlLiterals</code> <code>true</code> Literals in the PHQL parser <code>prefetchRecords</code> <code>0</code> The number of records to prefetch when getting data from the ORM <code>updateSnapshotOnSave</code> <code>true</code> Update snapshots on <code>save()</code> <code>virtualForeignKeys</code> <code>true</code> Virtual foreign keys <p><code>ini</code> options:</p> <pre><code>; phalcon.orm.ast_cache = null\n; phalcon.orm.cache_level = 3\n; phalcon.orm.case_insensitive_column_map = false\n; phalcon.orm.cast_last_insert_id_to_int = false\n; phalcon.orm.cast_on_hydrate = false\n; phalcon.orm.column_renaming = true\n; phalcon.orm.disable_assign_setters = false\n; phalcon.orm.enable_implicit_joins = true\n; phalcon.orm.enable_literals = true\n; phalcon.orm.events = true\n; phalcon.orm.exception_on_failed_metadata_save = true\n; phalcon.orm.exception_on_failed_save = false\n; phalcon.orm.force_casting = false\n; phalcon.orm.ignore_unknown_columns = false\n; phalcon.orm.late_state_binding = false\n; phalcon.orm.not_null_validations = true\n; phalcon.orm.parser_cache = null,\n; phalcon.orm.resultset_prefetch_records = 0\n; phalcon.orm.unique_cache_id = 3\n; phalcon.orm.update_snapshot_on_save = true\n; phalcon.orm.virtual_foreign_keys = true\n</code></pre> <p>NOTE</p> <p><code>Phalcon\\Mvc\\Model::assign()</code> (which is used also when creating/updating/saving model) is always using setters if they exist when have data arguments passed, even when it's required or necessary. This will add some additional overhead to your application. You can change this behavior by adding <code>phalcon.orm.disable_assign_setters = 1</code> to your ini file, it will just simply use <code>$this-&gt;property = value</code>.</p>"},{"location":"db-models/#stand-alone-component","title":"Stand Alone Component","text":"<p>You can use Phalcon\\Mvc\\Model on its own, performing the necessary setup on your own if you wish. The example below demonstrates how you can achieve that.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Manager;\nuse Phalcon\\Db\\Adapter\\Pdo\\Sqlite;\nuse Phalcon\\Mvc\\Model\\Metadata\\Memory;\n\n$container = new Di();\n\n$container-&gt;set(\n    'db',\n    new Sqlite(\n        [\n            'dbname' =&gt; 'sample.db',\n        ]\n    )\n);\n\n$container-&gt;set(\n    'modelsManager',\n    new Manager()\n);\n\n$container-&gt;set(\n    'modelsMetadata',\n    new Memory()\n);\n\n\nclass Invoices extends Model\n{\n\n}\n\necho Invoices::count();\n</code></pre>"},{"location":"db-odm/","title":"Object Document Mapper","text":"<p>NOTE</p> <p>The Object Document Mapper functionality has been temporarily removed for v4.0.</p> <p>The existing implementation was using a PHP MongoDB driver that has been deprecated for years. As such, work is underway to re-introduce the Object Document Mapper in Phalcon, using the latest MongoDB PHP driver.</p> <p>Support for MonboDb can be found in our incubator repository</p>"},{"location":"db-phql/","title":"Phalcon Query Language (PHQL)","text":""},{"location":"db-phql/#overview","title":"Overview","text":"<p>Phalcon Query Language, PhalconQL or simply PHQL is a high-level, object-oriented SQL dialect that allows you to write queries using a standardized SQL-like language. PHQL is implemented as a parser (written in C) that translates syntax in that of the target RDBMS.</p> <p>To achieve the highest performance possible, Phalcon provides a parser that uses the same technology as SQLite. This technology provides a small in-memory parser with a very low memory footprint that is also thread-safe.</p> <p>The parser first checks the syntax of the PHQL statement to be parsed, then builds an intermediate representation of the statement, and finally it converts it to the respective SQL dialect of the target RDBMS.</p> <p>In PHQL, we have implemented a set of features to make your access to databases more securely:</p> <ul> <li>Bound parameters are part of the PHQL language helping you to secure your code</li> <li>PHQL only allows one SQL statement to be executed per call preventing injections</li> <li>PHQL ignores all SQL comments which are often used in SQL injections</li> <li>PHQL only allows data manipulation statements, avoiding altering or dropping tables/databases by mistake or externally without authorization</li> <li>PHQL implements a high-level abstraction allowing you to handle tables as models and fields as class attributes</li> </ul> <p>To better explain how PHQL works, for this article we are going to use two models <code>Invoices</code> and <code>Customers</code>:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse MyApp\\Models\\Customers;\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public $inv_cst_id;\n\n    public $inv_id;\n\n    public $inv_status_flag;\n\n    public $inv_title;\n\n    public $inv_created_at;\n\n    public function initialize()\n    {\n        $this-&gt;setSource('co_invoices');\n\n        $this-&gt;belongsTo(\n            'inv_cst_id', \n            Customers::class, \n            'cst_id'\n        );\n    }\n}\n</code></pre> <p>And every Customer has one or more invoices:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Mvc\\Model;\n\nclass Customers extends Model\n{\n    public $cst_id;\n\n    public $cst_active_flag;\n\n    public $cst_name_last;\n\n    public $cst_name_first;\n\n    public $cst_created_at;\n\n    public function initialize()\n    {\n        $this-&gt;setSource('co_customers');\n\n        $this-&gt;hasMany(\n            'cst_id', \n            Invoices::class, \n            'inv_cst_id'\n        );\n    }\n}\n</code></pre>"},{"location":"db-phql/#query","title":"Query","text":"<p>PHQL queries can be created just by instantiating the class Phalcon\\Mvc\\Model\\Query:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Query;\n\n$container = Di::getDefault();\n$query     = new Query(\n    'SELECT * FROM Invoices',\n    $container\n);\n\n$invoices = $query-&gt;execute();\n</code></pre> <p>The Phalcon\\Mvc\\Model\\Query requires the second parameter of the constructor to be the DI container. When calling the above code from a controller or any class that extends the Phalcon\\Di\\Injectable, you can use:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\Model\\Query;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property Di   $di\n * @property View $view\n */\nclass Invoices extends Controller\n{\n    public function listAction()\n    {\n        $query = new Query(\n            'SELECT * FROM Invoices',\n            $this-&gt;di\n        );\n\n        $invoices = $query-&gt;execute();\n\n        $this-&gt;view-&gt;setVar('invoices', $invoices);\n    }\n}\n</code></pre>"},{"location":"db-phql/#models-manager","title":"Models Manager","text":"<p>We can also utilize the Phalcon\\Mvc\\Model\\Manager which is injected in the DI container:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\Model\\Manager;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property Manager $modelsManager\n * @property View    $view\n */\nclass Invoices extends Controller\n{\n    public function listAction()\n    {\n        $query = $this\n            -&gt;modelsManager\n            -&gt;createQuery(\n                'SELECT * FROM Invoices'\n            )\n        ;\n\n        $invoices = $query-&gt;execute();\n\n        $this-&gt;view-&gt;setVar('invoices', $invoices);\n    }\n}\n</code></pre> <p>Using bound parameters:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\Model\\Manager;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property Manager $modelsManager\n * @property Request $request\n * @property View    $view\n */\nclass Invoices extends Controller\n{\n    public function viewAction()\n    {\n        $invoiceId = $this-&gt;request-&gt;getQuery('id', 'int');\n        $query     = $this\n            -&gt;modelsManager\n            -&gt;createQuery(\n                'SELECT * FROM Invoices WHERE inv_id = :id:'\n            )\n        ;\n\n        $invoices = $query-&gt;execute(\n            [\n                'id' =&gt; $invoiceId,\n            ]\n        );\n\n        $this-&gt;view-&gt;setVar('invoices', $invoices);\n    }\n}\n</code></pre> <p>You can also skip creating the query and then executing it and instead execute the query directly from the Models Manager object:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\Model\\Manager;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property Manager $modelsManager\n * @property View    $view\n */\nclass Invoices extends Controller\n{\n    public function listAction()\n    {\n        $invoices = $this\n            -&gt;modelsManager\n            -&gt;executeQuery(\n                'SELECT * FROM Invoices'\n            )\n        ;\n\n        $this-&gt;view-&gt;setVar('invoices', $invoices);\n    }\n}\n</code></pre> <p>Using bound parameters:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\Model\\Manager;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property Manager $modelsManager\n * @property Request $request\n * @property View    $view\n */\nclass Invoices extends Controller\n{\n    public function viewAction()\n    {\n        $invoiceId = $this-&gt;request-&gt;getQuery('id', 'int');\n        $invoices  = $this\n            -&gt;modelsManager\n            -&gt;executeQuery(\n                'SELECT * FROM Invoices WHERE inv_id = :id:',\n                [\n                    'id' =&gt; $invoiceId,\n                ]\n            )\n        ;\n\n        $this-&gt;view-&gt;setVar('invoices', $invoices);\n    }\n}\n</code></pre>"},{"location":"db-phql/#select","title":"Select","text":"<p>As the familiar SQL, PHQL allows selecting records using the <code>SELECT</code> statement, except that instead of specifying tables, we use the model classes:</p> <p>Models</p> <pre><code>SELECT \n    * \nFROM   \n    Invoices  \nORDER BY \n    Invoices.inv_title\n</code></pre> <pre><code>SELECT \n    Invoices.inv_id, \n    Invoices.inv_title, \n    Invoices.inv_status_flag\nFROM   \n    Invoices  \nORDER BY \n    Invoices.inv_title\n</code></pre> <p>Namespaced models</p> <pre><code>SELECT \n    * \nFROM   \n    MyApp\\Models\\Invoices\nORDER BY \n    MyApp\\Models\\Invoices.inv_title'\n</code></pre> <p>Aliases</p> <pre><code>SELECT \n    i.inv_id, \n    i.inv_title, \n    i.inv_status_flag\nFROM   \n    Invoices i  \nORDER BY \n    i.inv_title\n</code></pre> <p><code>CASE</code></p> <pre><code>SELECT \n    i.inv_id, \n    i.inv_title, \n    CASE i.inv_status_flag\n        WHEN 1 THEN 'Paid'\n        WHEN 0 THEN 'Unpaid'\n    END AS status_text\nFROM   \n    Invoices i\nWHERE  \n    i.inv_status_flag = 1  \nORDER BY \n    i.inv_title\nLIMIT 100\n</code></pre> <p><code>LIMIT</code></p> <pre><code>SELECT \n    i.inv_id, \n    i.inv_title, \n    i.inv_status_flag\nFROM   \n    Invoices i\nWHERE  \n    i.inv_status_flag = 1  \nORDER BY \n    i.inv_title\nLIMIT 100\n</code></pre> <p>Subqueries</p> <p>PHQL also supports subqueries. The syntax is similar to the one offered by PDO.</p> <pre><code>SELECT \n    i.inv_id \nFROM   \n    Invoices i\nWHERE EXISTS (  \n    SELECT \n        cst_id\n    FROM\n        Customers c\n    WHERE \n        c.cst_id = i.inv_cst_id\n)\n</code></pre> <pre><code>SELECT \n    inv_id \nFROM   \n    Invoices \nWHERE inv_cst_id IN (  \n    SELECT \n        cst_id\n    FROM\n        Customers \n    WHERE \n        cst_name LIKE '%ACME%'\n)\n</code></pre>"},{"location":"db-phql/#results","title":"Results","text":"<p>Depending on the columns we query as well as the tables, the result types will vary. </p> <p>If you retrieve all the columns from a single table, you will get back a fully functional Phalcon\\Mvc\\Model\\Resultset\\Simple object back. The object returned is a complete and can be modified and re-saved in the database because they represent a complete record of the associated table.</p> <p>The following examples return identical results:</p> <p>Model</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = Invoices::find(\n    [\n        'order' =&gt; 'inv_title'\n    ]\n);\n\nforeach ($invoices as $invoice) {\n    echo $invoice-&gt;inv_id, ' - ', $invoice-&gt;inv_name, PHP_EOL;\n}\n</code></pre> <p>PHQL</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        * \n    FROM \n        Invoices \n    ORDER BY \n        inv_title\";\n$invoices  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n\nforeach ($invoices as $invoice) {\n    echo $invoice-&gt;inv_id, ' - ', $invoice-&gt;inv_name, PHP_EOL;\n}\n</code></pre> <p>Any queries that use specific columns do not return complete objects, and therefore database operations cannot be performed on them. However, they are much smaller than their complete counterparts and offer micro optimizations in your code.</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        inv_id, inv_title \n    FROM \n        Invoices \n    ORDER BY \n        inv_title\";\n$invoices  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n\nforeach ($invoices as $invoice) {\n    echo $invoice-&gt;inv_id, ' - ', $invoice-&gt;inv_name, PHP_EOL;\n}\n</code></pre> <p>The returned result is a Phalcon\\Mvc\\Model\\Resultset\\Simple object. However, each element is a standard object that only contain the two columns that were requested.</p> <p>These values that do not represent complete objects are what we call scalars. PHQL allows you to query all types of scalars: fields, functions, literals, expressions, etc..:</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        CONCAT(inv_id, ' - ', inv_title) AS id_name \n    FROM \n        Invoices \n    ORDER BY \n        inv_title\";\n$invoices  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n\nforeach ($invoices as $invoice) {\n    echo $invoice-&gt;id_name, PHP_EOL;\n}\n</code></pre> <p>We can query complete objects or scalars, therefore can also query both at once:</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        i.*, \n        IF(i.inv_status_flag = 1, 'Paid', 'Unpaid') AS status \n    FROM \n        Invoices i \n    ORDER BY \n        i.inv_title\";\n$invoices  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>The result in this case is a Phalcon\\Mvc\\Model\\Resultset\\Complex object. This allows access to both complete objects and scalars at once:</p> <pre><code>&lt;?php\n\nforeach ($invoices as $invoice) {\n    echo $invoice-&gt;status, \n         $invoice-&gt;i-&gt;inv_id, \n         $invoice-&gt;i-&gt;inv_name, \n         PHP_EOL\n    ;\n}\n</code></pre> <p>Scalars are mapped as properties of each 'row', while complete objects are mapped as properties with the name of its related model. In the above example, the scalar <code>status</code> is accessed directly from the object, while the database row can be accessed by the <code>invoices</code> property, which is the same name as the name of the model. </p> <p>If you mix <code>*</code> selections from one model with columns from another, you will end up with both scalars and objects.</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        i.*, \n        IF(i.inv_status_flag = 1, 'Paid', 'Unpaid') AS status\n        c.* \n    FROM \n        Invoices i\n    JOIN\n        Customers c\n    ON\n        i.inv_cst_id = c.cst_id \n    ORDER BY \n        i.inv_title\";\n$invoices  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>The above will produce:</p> <pre><code>&lt;?php\n\nforeach ($invoices as $invoice) {\n    echo $invoice-&gt;status, \n         $invoice-&gt;i-&gt;inv_id, \n         $invoice-&gt;i-&gt;inv_name, \n         $invoice-&gt;c-&gt;cst_id, \n         $invoice-&gt;c-&gt;cst_name_last, \n         PHP_EOL\n    ;\n}\n</code></pre> <p>Another example:</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        i.*, \n        c.cst_name_last AS name_last \n    FROM \n        Invoices i\n    JOIN\n        Customers c\n    ON\n        i.inv_cst_id = c.cst_id \n    ORDER BY \n        i.inv_title\";\n$invoices  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>The above will produce:</p> <pre><code>&lt;?php\n\nforeach ($invoices as $invoice) {\n    echo $invoice-&gt;name_last, \n         $invoice-&gt;i-&gt;inv_id, \n         $invoice-&gt;i-&gt;inv_name, \n         PHP_EOL\n    ;\n}\n</code></pre> <p>Note that we are selecting one column from the <code>Customers</code> model and we need to alias it (<code>name_last</code>) so that it becomes a scalar in our resultset.</p>"},{"location":"db-phql/#joins","title":"Joins","text":"<p>It's easy to request records from multiple models using PHQL. Most kinds of Joins are supported. As we defined relationships in the models, PHQL adds these conditions automatically:</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        Invoices.inv_id AS invoice_id, \n        Invoices.inv_title AS invoice_title, \n        Customers.cst_id AS customer_id,\n        Customers.cst_name_last,\n        Customers.cst_name_first \n    FROM \n        Customers\n    INNER JOIN \n        Invoices \n    ORDER BY \n        Customers.cst_name_last, Customers.cst_name_first\";\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n\nforeach ($records as $record) {\n    echo $record-&gt;invoice_id, \n         $record-&gt;invoice_title, \n         $record-&gt;customer_id,\n         $record-&gt;cst_name_last,\n         $record-&gt;cst_name_first, \n         PHP_EOL\n    ;\n}\n</code></pre> <p>NOTE</p> <p>By default, an <code>INNER JOIN</code> is assumed. </p> <p>You can specify the following types of joins in your query:</p> <ul> <li><code>CROSS JOIN</code></li> <li><code>LEFT JOIN</code></li> <li><code>LEFT OUTER JOIN</code></li> <li><code>INNER JOIN</code></li> <li><code>JOIN</code></li> <li><code>RIGHT JOIN</code></li> <li><code>RIGHT OUTER JOIN</code></li> </ul> <p>The PHQL parser will automatically resolve the conditions of the <code>JOIN</code> operation, depending on the relationships set up in the <code>initialize()</code> of each model. These are calls to <code>hasMany</code>, <code>hasOne</code>, <code>belongsTo</code> etc.</p> <p>It is however possible to manually set the conditions of the <code>JOIN</code>:</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        Invoices.inv_id AS invoice_id, \n        Invoices.inv_title AS invoice_title, \n        Customers.cst_id AS customer_id,\n        Customers.cst_name_last,\n        Customers.cst_name_first \n    FROM \n        Customers\n    INNER JOIN \n        Invoices\n    ON \n        Customers.cst_id = Invoices.inv_cst_id \n    ORDER BY \n        Customers.cst_name_last, Customers.cst_name_first\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>Also, the joins can be created using multiple tables in the <code>FROM</code> clause, using the alternative join syntax:</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        Invoices.*, \n        Customers.* \n    FROM \n        Customers, Invoices\n    WHERE \n        Customers.cst_id = Invoices.inv_cst_id \n    ORDER BY \n        Customers.cst_name_last, Customers.cst_name_first\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n\nforeach ($records as $record) {\n    echo $record-&gt;invoices-&gt;inv_id, \n         $record-&gt;invoices-&gt;inv_title, \n         $record-&gt;customers-&gt;cst_id,\n         $record-&gt;customers-&gt;cst_name_last,\n         $record-&gt;customers-&gt;cst_name_first, \n         PHP_EOL\n    ;\n}\n</code></pre> <p>If aliases are used for models, then the resultset will use those aliases to name the attributes in the every row of the result:</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        i.*, \n        c.* \n    FROM \n        Customers c, Invoices i\n    WHERE \n        c.cst_id = i.inv_cst_id \n    ORDER BY \n        c.cst_name_last, c.cst_name_first\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n\nforeach ($records as $record) {\n    echo $record-&gt;i-&gt;inv_id, \n         $record-&gt;i-&gt;inv_title, \n         $record-&gt;c-&gt;cst_id,\n         $record-&gt;c-&gt;cst_name_last,\n         $record-&gt;c-&gt;cst_name_first, \n         PHP_EOL\n    ;\n}\n</code></pre> <p>When the joined model has a many-to-many relation to the <code>from</code> model, the intermediate model is implicitly added to the generated query. For this example we have <code>Invoices</code>, <code>InvoicesXProducts</code> and <code>Products</code> models:</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        Invoices.inv_id, \n        Invoices.inv_title, \n        Products.prd_id,\n        Products.prd_title \n    FROM \n        Invoices\n    JOIN\n        Products\n    WHERE \n        Invoices.inv_id = 1 \n    ORDER BY \n        Products.prd_name\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>This code executes the following SQL in MySQL:</p> <pre><code>SELECT \n    co_invoices.inv_id, \n    co_invoices.inv_title, \n    co_products.prd_id,\n    co_products.prd_title \nFROM \n    co_invoices\nJOIN\n    co_invoices_x_products \nON \n    co_invoices.inv_id = co_invoices_x_products.ixp_inv_id\nJOIN\n    co_products \nON \n    co_invoices_x_products.ixp_prd_id = co_products.prd_id\nWHERE\n    co_invoices.inv_id = 1\nORDER BY\n    co_products.prd_name\n</code></pre>"},{"location":"db-phql/#aggregations","title":"Aggregations","text":"<p>The following examples show how to use aggregations in PHQL:</p> <p>Average</p> <p>What is the average amount of invoices for a customer with <code>inv_cst_id = 1</code> </p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        AVERAGE(inv_total) AS invoice_average\n    FROM \n        Invoices\n    WHERE \n        Invoices.inv_cst_id = 1\";\n\n$results  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n\necho $results['invoice_average'], PHP_EOL;\n</code></pre> <p>Count</p> <p>How many invoices does each customer have</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        inv_cst_id,\n        COUNT(*) AS invoice_count\n    FROM \n        Invoices\n    GROUP BY \n        Invoices.inv_cst_id\n    ORDER BY \n        Invoices.inv_cst_id\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n\nforeach ($records as $record) {\n    echo $record-&gt;inv_cst_id, \n         $record-&gt;invoice_count, \n         PHP_EOL\n    ;\n}\n</code></pre> <p>Count Distinct</p> <p>How many invoices does each customer have</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        COUNT(DISTINCT inv_cst_id) AS customer_id\n    FROM \n        Invoices\n    ORDER BY \n        Invoices.inv_cst_id\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n\nforeach ($records as $record) {\n    echo $record-&gt;inv_cst_id, \n         PHP_EOL\n    ;\n}\n</code></pre> <p>Max</p> <p>What is the maximum invoice amount for a customer with <code>inv_cst_id = 1</code></p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        MAX(inv_total) AS invoice_max\n    FROM \n        Invoices\n    WHERE \n        Invoices.inv_cst_id = 1\";\n\n$results  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n\necho $results['invoice_max'], PHP_EOL;\n</code></pre> <p>Min</p> <p>What is the minimum invoice amount for a customer with <code>inv_cst_id = 1</code></p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        MIN(inv_total) AS invoice_min\n    FROM \n        Invoices\n    WHERE \n        Invoices.inv_cst_id = 1\";\n\n$results  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n\necho $results['invoice_min'], PHP_EOL;\n</code></pre> <p>Sum</p> <p>What is the total amount of invoices for a customer with <code>inv_cst_id = 1</code> </p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        SUM(inv_total) AS invoice_total\n    FROM \n        Invoices\n    WHERE \n        Invoices.inv_cst_id = 1\";\n\n$results  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n\necho $results['invoice_total'], PHP_EOL;\n</code></pre>"},{"location":"db-phql/#conditions","title":"Conditions","text":"<p>Conditions allow us to filter the set of records we want to query using the <code>WHERE</code> keyword.</p> <p>Select a record with a single numeric comparison:</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        *\n    FROM \n        Invoices\n    WHERE \n        Invoices.inv_cst_id = 1\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>Select records with a greater than numeric comparison:</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        *\n    FROM \n        Invoices\n    WHERE \n        Invoices.inv_total &gt; 1000\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>Select records with a single text comparison using <code>TRIM</code>:</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        *\n    FROM \n        Invoices\n    WHERE \n        TRIM(Invoices.inv_title) = 'Invoice for ACME Inc.'\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>Select records using the <code>LIKE</code> keyword:</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        *\n    FROM \n        Invoices\n    WHERE \n        Invoices.inv_title LIKE '%ACME%'\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>Select records using the <code>NOT LIKE</code> keywords:</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        *\n    FROM \n        Invoices\n    WHERE \n        Invoices.inv_title NOT LIKE '%ACME%'\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>Select records where a field is <code>NULL</code>:</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        *\n    FROM \n        Invoices\n    WHERE \n        Invoices.inv_total IS NULL\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>Select records using the <code>IN</code> keyword:</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        *\n    FROM \n        Invoices\n    WHERE \n        Invoices.inv_cst_id IN (1, 3, 5)\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>Select records using the <code>NOT IN</code> keywords:</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        *\n    FROM \n        Invoices\n    WHERE \n        Invoices.inv_cst_id NOT IN (1, 3, 5)\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>Select records using the <code>BETWEEN</code> keywords:</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        *\n    FROM \n        Invoices\n    WHERE \n        Invoices.inv_cst_id BETWEEN 1 AND 5\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre>"},{"location":"db-phql/#parameters","title":"Parameters","text":"<p>PHQL automatically escapes parameters, introducing more security:</p> <p>Using named parameters:</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        *\n    FROM \n        Invoices\n    WHERE \n        Invoices.inv_cst_id = :customer_id:\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery(\n        $phql,\n        [\n            'customer_id' =&gt; 1,\n        ]\n    )\n;\n</code></pre> <p>Using numeric indexes:</p> <pre><code>&lt;?php\n\n$phql = \"\n    SELECT \n        *\n    FROM \n        Invoices\n    WHERE \n        Invoices.inv_cst_id = ?2\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery(\n        $phql,\n        [\n            2 =&gt; 1,\n        ]\n    )\n;\n</code></pre>"},{"location":"db-phql/#insert","title":"Insert","text":"<p>With PHQL it's possible to insert data using the familiar <code>INSERT</code> statement:</p> <p>Inserting data without columns:</p> <pre><code>&lt;?php\n\n$phql = \"\n    INSERT INTO Invoices\n    VALUES (\n        NULL,\n        1,\n        0,\n        'Invoice for ACME Inc.',\n        0\n    )\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>Inserting data with specific columns:</p> <pre><code>&lt;?php\n\n$phql = \"\n    INSERT INTO Invoices (\n        inv_id,\n        inv_cst_id,\n        inv_status_flag,\n        inv_title,\n        inv_total\n    )\n    VALUES (\n        NULL,\n        1,\n        0,\n        'Invoice for ACME Inc.',\n        0\n    )\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>Inserting data with named placeholders:</p> <pre><code>&lt;?php\n\n$phql = \"\n    INSERT INTO Invoices (\n        inv_id,\n        inv_cst_id,\n        inv_status_flag,\n        inv_title,\n        inv_total\n    )\n    VALUES (\n        :id:,\n        :cst_id:,\n        :status_flag:,\n        :title:,\n        :total:\n    )\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery(\n        $phql,\n        [\n            'id'          =&gt; NULL,\n            'cst_id'      =&gt; 1,\n            'status_flag' =&gt; 0,\n            'title'       =&gt; 'Invoice for ACME Inc.',\n            'total'       =&gt; 0\n        ]\n    )\n;\n</code></pre> <p>Inserting data with numeric placeholders:</p> <pre><code>&lt;?php\n\n$phql = \"\n    INSERT INTO Invoices (\n        inv_id,\n        inv_cst_id,\n        inv_status_flag,\n        inv_title,\n        inv_total\n    )\n    VALUES (\n        ?0,\n        ?1,\n        ?2,\n        ?3,\n        ?4\n    )\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery(\n        $phql,\n        [\n            0 =&gt; NULL,\n            1 =&gt; 1,\n            2 =&gt; 0,\n            3 =&gt; 'Invoice for ACME Inc.',\n            4 =&gt; 0\n        ]\n    )\n;\n</code></pre> <p>Phalcon does not only transform the PHQL statements into SQL. All events and business rules defined in the model are executed as if we created individual objects manually. </p> <p>If we add a business rule in the <code>beforeCreate</code> event for the <code>Invoices</code> model, the event be called and our code will be executed. Assuming we add a rule where an invoice cannot have a negative total:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Messages\\Message;\n\nclass Invoices extends Model\n{\n    public function beforeCreate()\n    {\n        if ($this-&gt;inv_total &lt; 0) {\n            $this-&gt;appendMessage(\n                new Message('An invoice cannot have a negative total')\n            );\n\n            return false;\n        }\n    }\n}\n</code></pre> <p>If we issue the following <code>INSERT</code> statement:</p> <pre><code>&lt;?php\n\n$phql = \"\n    INSERT INTO Invoices (\n        inv_id,\n        inv_cst_id,\n        inv_status_flag,\n        inv_title,\n        inv_total\n    )\n    VALUES (\n        ?0,\n        ?1,\n        ?2,\n        ?3,\n        ?4\n    )\";\n\n$result  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery(\n        $phql,\n        [\n            0 =&gt; NULL,\n            1 =&gt; 1,\n            2 =&gt; 0,\n            3 =&gt; 'Invoice for ACME Inc.',\n            4 =&gt; -100\n        ]\n    )\n;\n\nif (false === $result-&gt;success()) {\n    foreach ($result-&gt;getMessages() as $message) {\n        echo $message-&gt;getMessage();\n    }\n}\n</code></pre> <p>Since we tried to insert a negative number for the <code>inv_total</code> the <code>beforeCreate</code> was invoked prior to saving the record. As a result the operation fails and the relevant error messages are being sent back.</p>"},{"location":"db-phql/#update","title":"Update","text":"<p>Updating rows uses the same rules as inserting rows. For that operation we use the <code>UPDATE</code> command. Just as with inserting rows, when a record is updated the events related to the update operation will be executed for each row.</p> <p>Updating one column</p> <pre><code>&lt;?php\n\n$phql = \"\n    UPDATE Invoices\n    SET\n        inv_total = 0\n    WHERE\n        inv_cst_id = 1\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>Updating multiple columns</p> <pre><code>&lt;?php\n\n$phql = \"\n    UPDATE Invoices\n    SET\n        inv_status_flag = 0,\n        inv_total = 0\n    WHERE\n        inv_cst_id = 1\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>Updating multiple rows:</p> <pre><code>&lt;?php\n\n$phql = \"\n    UPDATE Invoices\n    SET\n        inv_status_flag = 0,\n        inv_total = 0\n    WHERE\n        inv_cst_id &gt; 10\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>Updating data with named placeholders:</p> <pre><code>&lt;?php\n\n$phql = \"\n    UPDATE Invoices\n    SET\n        inv_status_flag = :status:,\n        inv_total = :total:\n    WHERE\n        inv_cst_id &gt; :customerId:\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery(\n        $phql,\n        [\n            'status'     =&gt; 0,\n            'total'      =&gt; 0,\n            'customerId' =&gt; 10,\n        ]\n    )\n;\n</code></pre> <p>Updating data with numeric placeholders:</p> <pre><code>&lt;?php\n\n$phql = \"\n    UPDATE Invoices\n    SET\n        inv_status_flag = ?0,\n        inv_total = ?1\n    WHERE\n        inv_cst_id &gt; ?2\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery(\n        $phql,\n        [\n            0 =&gt; 0,\n            1 =&gt; 0,\n            2 =&gt; 10,\n        ]\n    )\n;\n</code></pre> <p>An <code>UPDATE</code> statement performs the update in two phases:</p> <ul> <li>If the <code>UPDATE</code> has a <code>WHERE</code> clause it retrieves all the objects that match these criteria,</li> <li>Based on the queried objects it updates the requested attributes storing them in the database</li> </ul> <p>This way of operation allows that events, virtual foreign keys and validations to be executed during the updating process. In short, the code:</p> <pre><code>&lt;?php\n\n$phql = \"\n    UPDATE Invoices\n    SET\n        inv_status_flag = 0,\n        inv_total = 0\n    WHERE\n        inv_cst_id &gt; 10\";\n\n$result = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n\nif (false === $result-&gt;success()) {\n    $messages = $result-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo $message-&gt;getMessage();\n    }\n}\n</code></pre> <p>is somewhat equivalent to:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$messages = [];\n$invoices = Invoices::find(\n    [\n        'conditions' =&gt; 'inc_cst_id = :customerId:',\n        'bind'       =&gt; [\n            'customerId' =&gt; 10,\n        ],\n    ]  \n);\n\nforeach ($invoices as $invoice) {\n    $invoice-&gt;inv_status_flag = 0;\n    $invoice-&gt;inv_total       = 0;\n\n    $result = $invoice-&gt;save();\n    if (false === $result) {\n        $messages[] = $invoice-&gt;getMessages();\n    } \n}\n</code></pre>"},{"location":"db-phql/#deleting-data","title":"Deleting Data","text":"<p>Similar to updating records, deleting records uses the same rules. For that operation we use the <code>DELETE</code> command. When a record is deleted the events related to the update operation will be executed for each row.</p> <p>Deleting one row</p> <pre><code>&lt;?php\n\n$phql = \"\n    DELETE\n    FROM \n        Invoices\n    WHERE\n        inv_cst_id = 1\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>Deleting multiple rows:</p> <pre><code>&lt;?php\n\n$phql = \"\n    DELETE\n    FROM \n        Invoices\n    WHERE\n        inv_cst_id &gt; 10\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n</code></pre> <p>Deleting data with named placeholders:</p> <pre><code>&lt;?php\n\n$phql = \"\n    DELETE\n    FROM \n        Invoices\n    WHERE\n        inv_cst_id &gt; :customerId:\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery(\n        $phql,\n        [\n            'customerId' =&gt; 10,\n        ]\n    )\n;\n</code></pre> <p>Deleting data with numeric placeholders:</p> <pre><code>&lt;?php\n\n$phql = \"\n    DELETE\n    FROM \n        Invoices\n    WHERE\n        inv_cst_id &gt; ?2\";\n\n$records  = $this\n    -&gt;modelsManager\n    -&gt;executeQuery(\n        $phql,\n        [\n            2 =&gt; 10,\n        ]\n    )\n;\n</code></pre> <p>A <code>DELETE</code> statement performs the delete in two phases:</p> <ul> <li>If the <code>DELETE</code> has a <code>WHERE</code> clause it retrieves all the objects that match these criteria,</li> <li>Based on the queried objects it deletes the requested objects from the relational database</li> </ul> <p>Just as the rest of the operations, checking the status code returned allows you to retrieve back any validation messages returned by operations hooked up to your models</p> <pre><code>&lt;?php\n\n$phql = \"\n    DELETE\n    FROM\n        Invoices\n    WHERE\n        inv_cst_id &gt; 10\";\n\n$result = $this\n    -&gt;modelsManager\n    -&gt;executeQuery($phql)\n;\n\nif (false === $result-&gt;success()) {\n    $messages = $result-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo $message-&gt;getMessage();\n    }\n}\n</code></pre>"},{"location":"db-phql/#query-builder","title":"Query Builder","text":"<p>Phalcon\\Mvc\\Model\\Query\\Builder is a very handy builder that allows you to construct PHQL statements in an object oriented way. Most methods return the buider object, allowing you to use a fluent interface and is flexible enough allowing you to add conditionals if you need to without having to create complex <code>if</code> statements and string concatenations constructing the PHQL statement.</p> <p>The PHQL query:</p> <pre><code>SELECT \n    * \nFROM \n    Invoices \nORDER BY \n    inv_title\n</code></pre> <p>can be created and executed as follows:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = $this\n    -&gt;modelsManager\n    -&gt;createBuilder()\n    -&gt;from(Invoices::class)\n    -&gt;orderBy('inv_title')\n    -&gt;getQuery()\n    -&gt;execute();\n</code></pre> <p>To get a single row:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\n\n$invoices = $this\n    -&gt;modelsManager\n    -&gt;createBuilder()\n    -&gt;from(Invoices::class)\n    -&gt;orderBy('inv_title')\n    -&gt;getQuery()\n    -&gt;getSingleResult();\n</code></pre>"},{"location":"db-phql/#parameters_1","title":"Parameters","text":"<p>Whether you create a Phalcon\\Mvc\\Model\\Query\\Builder object directly or you are using the Models Manager's <code>createBuilder</code> method, you can always use the fluent interface to build your query or pass an array with parameters in the constructor. The keys of the array are:</p> Parameter Type Description <code>bind</code> <code>array</code> array of the data to be bound <code>bindTypes</code> <code>array</code> PDO parameter types <code>container</code> DI DI Container <code>columns</code> <code>array|string</code> columns to select <code>conditions</code> <code>array|string</code> conditions (where) <code>distinct</code> <code>string</code> distinct column <code>for_update</code> <code>bool</code> for update or not <code>group</code> <code>array</code> group by columns <code>having</code> <code>string</code> having columns <code>joins</code> <code>array</code> model classes used for joins <code>limit</code> <code>array|int</code> limit for the records (i.e. <code>20</code> or <code>[20, 20]</code>) <code>models</code> <code>array</code> model classes used <code>offset</code> <code>int</code> the offset <code>order</code> <code>array|string</code> order columns <code>shared_lock</code> <code>bool</code> issue shared lock or not <pre><code>&lt;?php\n\nuse PDO;\nuse Phalcon\\Mvc\\Model\\Query\\Builder;\nuse Phalcon\\Di\\FactoryDefault as Di;\n\n/* DI is mandatory to use the Query Builder */\n$di = new Di();\n\n$params = [\n    \"container\" =&gt; $di,\n    \"models\"     =&gt; [\n        Users::class,\n    ],\n    \"columns\"    =&gt; [\"id\", \"name\", \"status\"],\n    \"conditions\" =&gt; [\n        [\n            \"created &gt; :min: AND created &lt; :max:\",\n            [\n                \"min\" =&gt; \"2013-01-01\",\n                \"max\" =&gt; \"2014-01-01\",\n            ],\n            [\n                \"min\" =&gt; PDO::PARAM_STR,\n                \"max\" =&gt; PDO::PARAM_STR,\n            ],\n        ],\n    ],\n    // or \"conditions\" =&gt; \"created &gt; '2013-01-01' AND created &lt; '2014-01-01'\",\n    \"group\"      =&gt; [\"id\", \"name\"],\n    \"having\"     =&gt; \"name = 'Kamil'\",\n    \"order\"      =&gt; [\"name\", \"id\"],\n    \"limit\"      =&gt; 20,\n    \"offset\"     =&gt; 20,\n    // or \"limit\" =&gt; [20, 20],\n];\n\n$builder = new Builder($params);\n</code></pre>"},{"location":"db-phql/#getters","title":"Getters","text":"Method Description <code>autoescape(string $identifier): string</code> Automatically escapes identifiers but only if they need to be escaped. <code>getBindParams(): array</code> Returns default bind params <code>getBindTypes(): array</code> Returns default bind types <code>getColumns(): string|array</code> Return the columns to be queried <code>getDistinct(): bool</code> Returns the <code>SELECT DISTINCT</code> / <code>SELECT ALL</code> clause <code>getFrom(): string|array</code> Return the models for the query <code>getGroupBy(): array</code> Returns the <code>GROUP BY</code> clause <code>getHaving(): string</code> Returns the <code>HAVING</code> clause <code>getJoins(): array</code> Returns <code>JOIN</code> join parts of the query <code>getLimit(): string|array</code> Returns the current <code>LIMIT</code> clause <code>getModels(): string|array|null</code> Returns the models involved in the query <code>getOffset(): int</code> Returns the current <code>OFFSET</code> clause <code>getOrderBy(): string|array</code> Returns the <code>ORDER BY</code> clause <code>getPhql(): string</code> Returns the generated PHQL statement <code>getQuery(): QueryInterface</code> Returns the query built <code>getWhere(): string|array</code> Return the conditions for the query"},{"location":"db-phql/#methods","title":"Methods","text":"<p><pre><code>public function addFrom(\n    string $model, \n    string $alias = null\n): BuilderInterface\n</code></pre> Add a model. The first parameter is the model while the second one is the alias for the model.</p> <pre><code>&lt;?php\n\n$builder-&gt;addFrom(\n    Customers::class\n);\n\n$builder-&gt;addFrom(\n    Customers::class,\n    \"c\"\n);\n</code></pre> <p><pre><code>public function andHaving(\n    mixed $conditions, \n    array $bindParams = [], \n    array $bindTypes = []\n): BuilderInterface\n</code></pre> Appends a condition to the current <code>HAVING</code> conditions clause using an <code>AND</code> operator. The first parameter is the expression. The second parameter is an array with the bound parameter name as the key. The last parameter is an array that defines the bound type for each parameter. The bound types are PDO constants.</p> <pre><code>&lt;?php\n\n$builder-&gt;andHaving(\"SUM(Invoices.inv_total) &gt; 1000\");\n\n$builder-&gt;andHaving(\n    \"SUM(Invoices.inv_total) &gt; :sum:\",\n    [\n        \"sum\" =&gt; 1000,\n    ],\n    [\n        \"sum\" =&gt; PDO::PARAM_INT,\n    ]\n);\n</code></pre> <p><pre><code>public function andWhere(\n    mixed $conditions, \n    array $bindParams = [], \n    array $bindTypes = []\n): BuilderInterface\n</code></pre> Appends a condition to the current <code>WHERE</code> conditions clause using an <code>AND</code> operator. The first parameter is the expression. The second parameter is an array with the bound parameter name as the key. The last parameter is an array that defines the bound type for each parameter. The bound types are PDO constants.</p> <pre><code>&lt;?php\n\n$builder-&gt;andWhere(\"SUM(Invoices.inv_total) &gt; 1000\");\n\n$builder-&gt;andWhere(\n    \"SUM(Invoices.inv_total) &gt; :sum:\",\n    [\n        \"sum\" =&gt; 1000,\n    ],\n    [\n        \"sum\" =&gt; PDO::PARAM_INT,\n    ]\n);\n</code></pre> <p><pre><code>public function betweenHaving(\n    string $expr, \n    mixed $minimum, \n    mixed $maximum, \n    string $operator = BuilderInterface::OPERATOR_AND\n): BuilderInterface\n</code></pre> Appends a <code>BETWEEN</code> condition to the current <code>HAVING</code> conditions clause. The method accepts the expression, minimum and maximum as well as the operator for the <code>BETWEEN</code> (<code>OPERATOR_AND</code> or <code>OPERATOR_OR</code>) </p> <pre><code>&lt;?php\n\n$builder-&gt;betweenHaving(\n    \"SUM(Invoices.inv_total)\",\n    1000,\n    5000\n);\n</code></pre> <p><pre><code>public function betweenWhere(\n    string $expr, \n    mixed $minimum, \n    mixed $maximum, \n    string $operator = BuilderInterface::OPERATOR_AND\n): BuilderInterface\n</code></pre> Appends a <code>BETWEEN</code> condition to the current <code>WHERE</code> conditions clause. The method accepts the expression, minimum and maximum as well as the operator for the <code>BETWEEN</code> (<code>OPERATOR_AND</code> or <code>OPERATOR_OR</code>) </p> <pre><code>&lt;?php\n\n$builder-&gt;betweenWhere(\n    \"Invoices.inv_total\",\n    1000,\n    5000\n);\n</code></pre> <p><pre><code>public function columns(mixed $columns): BuilderInterface\n</code></pre> Sets the columns to be queried. The method accepts either a <code>string</code> or an <code>array</code>. If you specify an array with specific <code>keys</code>, they will be used as aliases for the relevant columns.</p> <pre><code>&lt;?php\n\n// SELECT inv_id, inv_title\n$builder-&gt;columns(\"inv_id, inv_title\");\n\n// SELECT inv_id, inv_title\n$builder-&gt;columns(\n    [\n        \"inv_id\",\n        \"inv_title\",\n    ]\n);\n\n// SELECT inv_cst_id, inv_total\n$builder-&gt;columns(\n    [\n        \"inv_cst_id\",\n        \"inv_total\" =&gt; \"SUM(inv_total)\",\n    ]\n);\n</code></pre> <p><pre><code>public function distinct(mixed $distinct): BuilderInterface\n</code></pre> Sets <code>SELECT DISTINCT</code> / <code>SELECT ALL</code> flag</p> <pre><code>&lt;?php\n\n$builder-&gt;distinct(\"status\");\n$builder-&gt;distinct(null);\n</code></pre> <p><pre><code>public function forUpdate(bool $forUpdate): BuilderInterface\n</code></pre> Sets a <code>FOR UPDATE</code> clause</p> <pre><code>&lt;?php\n\n$builder-&gt;forUpdate(true);\n</code></pre> <p><pre><code>public function from(mixed $models): BuilderInterface\n</code></pre> Sets the models for the query. The method accepts either a <code>string</code> or an <code>array</code>. If you specify an array with specific <code>keys</code>, they will be used as aliases for the relevant models. </p> <pre><code>&lt;?php\n\n$builder-&gt;from(\n    Invoices::class\n);\n\n$builder-&gt;from(\n    [\n        Invoices::class,\n        Customers::class,\n    ]\n);\n\n$builder-&gt;from(\n    [\n        'i' =&gt; Invoices::class,\n        'c' =&gt; Customers::class,\n    ]\n);\n</code></pre> <p><pre><code>public function groupBy(mixed $group): BuilderInterface\n</code></pre> Adds a <code>GROUP BY</code> condition to the builder.</p> <pre><code>&lt;?php\n\n$builder-&gt;groupBy(\n    [\n        \"Invoices.inv_cst_id\",\n    ]\n);\n</code></pre> <p><pre><code>public function having(\n    mixed $conditions, \n    array $bindParams = [], \n    array $bindTypes = []\n): BuilderInterface\n</code></pre> Sets the <code>HAVING</code> condition clause. The first parameter is the expression. The second parameter is an array with the bound parameter name as the key. The last parameter is an array that defines the bound type for each parameter. The bound types are PDO constants.</p> <pre><code>&lt;?php\n\n$builder-&gt;having(\"SUM(Invoices.inv_total) &gt; 1000\");\n\n$builder-&gt;having(\n    \"SUM(Invoices.inv_total) &gt; :sum:\",\n    [\n        \"sum\" =&gt; 1000,\n    ],\n    [\n        \"sum\" =&gt; PDO::PARAM_INT,\n    ]\n);\n</code></pre> <p><pre><code>public function inHaving(\n    string $expr, \n    array $values, \n    string $operator = BuilderInterface::OPERATOR_AND\n): BuilderInterface\n</code></pre> Appends a <code>IN</code> condition to the current <code>HAVING</code> conditions clause. The method accepts the expression, an array with the <code>IN</code> values as well as the operator for the <code>IN</code> (<code>OPERATOR_AND</code> or <code>OPERATOR_OR</code>) </p> <pre><code>&lt;?php\n\n$builder-&gt;inHaving(\n    \"SUM(Invoices.inv_total)\",\n    [\n        1000,\n        5000,\n    ]\n);\n</code></pre> <p><pre><code>public function innerJoin(\n    string $model, \n    string $conditions = null, \n    string $alias = null\n): BuilderInterface\n</code></pre> Adds an <code>INNER</code> join to the query. The first parameter is the model. The join conditions are automatically calculated, if the relevant relationships have been properly set in the respective models. However, you can set the conditions manually using the second parameter is the conditions, while the third one (if specified) is the alias.</p> <pre><code>&lt;?php\n\n$builder-&gt;innerJoin(\n    Customers::class\n);\n\n$builder-&gt;innerJoin(\n    Customers::class,\n    \"Invoices.inv_cst_id = Customers.cst_id\"\n);\n\n$builder-&gt;innerJoin(\n    Customers::class,\n    \"Invoices.inv_cst_id = c.cst_id\",\n    \"c\"\n);\n</code></pre> <p><pre><code>public function inWhere(\n    string $expr, \n    array $values,  \n    string $operator = BuilderInterface::OPERATOR_AND\n): BuilderInterface\n</code></pre> Appends an <code>IN</code> condition to the current <code>WHERE</code> conditions clause. The method accepts the expression, an array with the values for the <code>IN</code> clause as well as the operator for the <code>IN</code> (<code>OPERATOR_AND</code> or <code>OPERATOR_OR</code>) </p> <pre><code>&lt;?php\n\n$builder-&gt;inWhere(\n    \"Invoices.inv_id\",\n    [1, 3, 5]\n);\n\n//Using OPERATOR_OR:\n$builder-&gt;inWhere(\n    \"Invoices.inv_id\",\n    [1, 3, 5],\n    \\Phalcon\\Mvc\\Model\\Query\\BuilderInterface::OPERATOR_OR\n);\n</code></pre> <pre><code>public function join(\n    string $model, \n    string $conditions = null, \n    string $alias = null, \n    string $type = null\n): BuilderInterface\n</code></pre> <p>Adds a join to the query. The first parameter is the model. The join conditions are automatically calculated, if the relevant relationships have been properly set in the respective models. However, you can set the conditions manually using the second parameter is the conditions, while the third one (if specified) is the alias. The last parameter defines the <code>type</code> of the join. By default, the join is <code>INNER</code>. Acceptable values are: <code>INNER</code>, <code>LEFT</code> and <code>RIGHT</code>.</p> <pre><code>&lt;?php\n\n$builder-&gt;join(\n    Customers::class\n);\n\n$builder-&gt;join(\n    Customers::class,\n    \"Invoices.inv_cst_id = Customers.cst_id\"\n);\n\n//If model `Invoices` has an alias, use it accordingly in the following two examples:\n$builder-&gt;join(\n    Customers::class,\n    \"Invoices.inv_cst_id = c.cst_id\",\n    \"c\"\n);\n\n$builder-&gt;join(\n    Customers::class,\n    \"Invoices.inv_cst_id = c.cst_id\",\n    \"c\",\n    \"INNER\"\n);\n</code></pre> <p><pre><code>public function leftJoin(\n    string $model, \n    string $conditions = null, \n    string $alias = null\n): BuilderInterface\n</code></pre> Adds a <code>LEFT</code> join to the query. The first parameter is the model. The join conditions are automatically calculated, if the relevant relationships have been properly set in the respective models. However, you can set the conditions manually using the second parameter is the conditions, while the third one (if specified) is the alias.</p> <pre><code>&lt;?php\n\n$builder-&gt;leftJoin(\n    Customers::class\n);\n\n$builder-&gt;leftJoin(\n    Customers::class,\n    \"Invoices.inv_cst_id = Customers.cst_id\"\n);\n\n$builder-&gt;leftJoin(\n    Customers::class,\n    \"Invoices.inv_cst_id = c.cst_id\",\n    \"c\"\n);\n</code></pre> <p><pre><code>public function limit(\n    int $limit, \n    mixed $offset = null\n): BuilderInterface\n</code></pre> Sets a <code>LIMIT</code> clause, optionally an offset clause as the second parameter</p> <pre><code>&lt;?php\n\n$builder-&gt;limit(100);\n$builder-&gt;limit(100, 20);\n$builder-&gt;limit(\"100\", \"20\");\n</code></pre> <p><pre><code>public function notBetweenHaving(\n    string $expr, \n    mixed $minimum, \n    mixed $maximum, \n    string $operator = BuilderInterface::OPERATOR_AND\n): BuilderInterface\n</code></pre> Appends a <code>NOT BETWEEN</code> condition to the current <code>HAVING</code> conditions clause. The method accepts the expression, minimum and maximum as well as the operator for the <code>NOT BETWEEN</code> (<code>OPERATOR_AND</code> or <code>OPERATOR_OR</code>) </p> <pre><code>&lt;?php\n\n$builder-&gt;notBetweenHaving(\n    \"SUM(Invoices.inv_total)\",\n    1000,\n    5000\n);\n</code></pre> <p><pre><code>public function notBetweenWhere(\n    string $expr, \n    mixed $minimum, \n    mixed $maximum, \n    string $operator = BuilderInterface::OPERATOR_AND\n): BuilderInterface\n</code></pre> Appends a <code>NOT BETWEEN</code> condition to the current <code>WHERE</code> conditions clause. The method accepts the expression, minimum and maximum as well as the operator for the <code>NOT BETWEEN</code> (<code>OPERATOR_AND</code> or <code>OPERATOR_OR</code>) </p> <pre><code>&lt;?php\n\n$builder-&gt;notBetweenWhere(\n    \"Invoices.inv_total\",\n    1000,\n    5000\n);\n</code></pre> <p><pre><code>public function notInHaving(\n    string $expr, \n    array $values, \n    string $operator = BuilderInterface::OPERATOR_AND\n): BuilderInterface\n</code></pre> Appends a <code>NOT IN</code> condition to the current <code>HAVING</code> conditions clause. The method accepts the expression, an array with the <code>IN</code> values as well as the operator for the <code>NOT IN</code> (<code>OPERATOR_AND</code> or <code>OPERATOR_OR</code>) </p> <pre><code>&lt;?php\n\n$builder-&gt;notInHaving(\n    \"SUM(Invoices.inv_total)\",\n    [\n        1000,\n        5000,\n    ]\n);\n</code></pre> <p><pre><code>public function notInWhere(\n    string $expr, \n    array $values,  \n    string $operator = BuilderInterface::OPERATOR_AND\n): BuilderInterface\n</code></pre> Appends an <code>NOT IN</code> condition to the current <code>WHERE</code> conditions clause. The method accepts the expression, an array with the values for the <code>IN</code> clause as well as the operator for the <code>NOT IN</code> (<code>OPERATOR_AND</code> or <code>OPERATOR_OR</code>) </p> <pre><code>&lt;?php\n\n$builder-&gt;notInWhere(\n    \"Invoices.inv_id\",\n    [1, 3, 5]\n);\n</code></pre> <p><pre><code>public function offset(int $offset): BuilderInterface\n</code></pre> Sets an <code>OFFSET</code> clause</p> <pre><code>&lt;?php\n\n$builder-&gt;offset(30);\n</code></pre> <p><pre><code>public function orderBy(mixed $orderBy): BuilderInterface\n</code></pre> Sets an <code>ORDER BY</code> condition clause. The parameter can be a string or an array. You can also suffix each column with <code>ASC</code> or <code>DESC</code> to define the order direction.</p> <pre><code>&lt;?php\n\n$builder-&gt;orderBy(\"Invoices.inv_total\");\n\n$builder-&gt;orderBy(\n    [\n        \"Invoices.inv_total\",\n    ]\n);\n\n$builder-&gt;orderBy(\n    [\n        \"Invoices.inv_total DESC\",\n    ]\n);\n</code></pre> <p><pre><code>public function orHaving(\n    mixed $conditions, \n    array $bindParams = [], \n    array $bindTypes = []\n): BuilderInterface\n</code></pre> Appends a condition to the current <code>HAVING</code> condition clause using an <code>OR</code> operator. The first parameter is the expression. The second parameter is an array with the bound parameter name as the key. The last parameter is an array that defines the bound type for each parameter. The bound types are PDO constants.</p> <pre><code>&lt;?php\n\n$builder-&gt;orHaving(\"SUM(Invoices.inv_total) &gt; 1000\");\n\n$builder-&gt;orHaving(\n    \"SUM(Invoices.inv_total) &gt; :sum:\",\n    [\n        \"sum\" =&gt; 1000,\n    ],\n    [\n        \"sum\" =&gt; PDO::PARAM_INT,\n    ]\n);\n</code></pre> <p><pre><code>public function orWhere(\n    mixed $conditions, \n    array $bindParams = [], \n    array $bindTypes = []\n): BuilderInterface\n</code></pre> Appends a condition to the current <code>WHERE</code> condition clause using an <code>OR</code> operator. The first parameter is the expression. The second parameter is an array with the bound parameter name as the key. The last parameter is an array that defines the bound type for each parameter. The bound types are PDO constants.</p> <pre><code>&lt;?php\n\n$builder-&gt;orWhere(\"SUM(Invoices.inv_total) &gt; 1000\");\n\n$builder-&gt;orWhere(\n    \"SUM(Invoices.inv_total) &gt; :sum:\",\n    [\n        \"sum\" =&gt; 1000,\n    ],\n    [\n        \"sum\" =&gt; PDO::PARAM_INT,\n    ]\n);\n</code></pre> <p><pre><code>public function rightJoin(\n    string $model, \n    string $conditions = null, \n    string $alias = null\n): BuilderInterface\n</code></pre> Adds a <code>RIGHT</code> join to the query. The first parameter is the model. The join conditions are automatically calculated, if the relevant relationships have been properly set in the respective models. However, you can set the conditions manually using the second parameter is the conditions, while the third one (if specified) is the alias.</p> <pre><code>&lt;?php\n\n$builder-&gt;rightJoin(\n    Customers::class\n);\n\n$builder-&gt;rightJoin(\n    Customers::class,\n    \"Invoices.inv_cst_id = Customers.cst_id\"\n);\n\n$builder-&gt;rightJoin(\n    Customers::class,\n    \"Invoices.inv_cst_id = c.cst_id\",\n    \"c\"\n);\n</code></pre> <p><pre><code>public function setBindParams(\n    array $bindParams, \n    bool $merge = false\n): BuilderInterface\n</code></pre> Set default bind parameters. The first parameter is an array, where the key is the bound parameter name or number. The second parameter is a boolean, instructing the component to merge the supplied parameters to the existing stack or not.</p> <pre><code>&lt;?php\n\n$builder-&gt;setBindParams(\n    [\n        \"sum\" =&gt; 1000,\n    ]\n);\n\n$builder-&gt;setBindParams(\n    [\n        \"cst_id\" =&gt; 10,\n    ],\n    true\n);\n\n$builder-&gt;where(\n    \"SUM(Invoices.inv_total) &gt; :sum: AND inv_cst_id &gt; :cst_id:\",\n    [\n        \"sum\"    =&gt; PDO::PARAM_INT,\n        \"cst_id\" =&gt; PDO::PARAM_INT,\n    ]\n);\n</code></pre> <p><pre><code>public function setBindTypes(\n    array bindTypes, \n    bool $merge = false\n): BuilderInterface\n</code></pre> Set default bind types. The first parameter is an array, where the key is the bound parameter name or number. The second parameter is a boolean, instructing the component to merge the supplied parameters to the existing stack or not. The bound types are PDO constants.</p> <pre><code>&lt;?php\n\n$builder-&gt;setBindParams(\n    [\n        \"sum\" =&gt; 1000,\n    ]\n);\n\n$builder-&gt;setBindParams(\n    [\n        \"cst_id\" =&gt; 10,\n    ],\n    true\n);\n\n$builder-&gt;setBindTypes(\n    [\n        \"sum\" =&gt; PDO::PARAM_INT,\n    ]\n);\n\n$builder-&gt;setBindTypes(\n    [\n        \"cst_id\" =&gt; PDO::PARAM_INT,\n    ],\n    true\n);\n\n$builder-&gt;where(\n    \"SUM(Invoices.inv_total) &gt; :sum: AND inv_cst_id &gt; :cst_id:\"\n);\n</code></pre> <p><pre><code>public function where(\n    mixed $conditions, \n    array $bindParams = [], \n    array $bindTypes = []\n): BuilderInterface\n</code></pre> Sets the <code>WHERE</code> condition clause. The first parameter is the expression. The second parameter is an array with the bound parameter name as the key. The last parameter is an array that defines the bound type for each parameter. The bound types are PDO constants.</p> <pre><code>&lt;?php\n\n$builder-&gt;where(\"SUM(Invoices.inv_total) &gt; 1000\");\n\n$builder-&gt;where(\n    \"SUM(Invoices.inv_total) &gt; :sum:\",\n    [\n        \"sum\" =&gt; 1000,\n    ],\n    [\n        \"sum\" =&gt; PDO::PARAM_INT,\n    ]\n);\n</code></pre>"},{"location":"db-phql/#examples","title":"Examples","text":"<pre><code>&lt;?php\n\n// SELECT \n//      Invoices.* \n// FROM \n//      Invoices\n$builder-&gt;from(Invoices::class);\n\n// SELECT \n//      Invoices*, \n//      Customers.* \n// FROM \n//      Invoices, \n//      Customers\n$builder-&gt;from(\n    [\n        Invoices::class,\n        Customers::class,\n    ]\n);\n\n// SELECT \n//      Invoices.* \n// FROM \n//      Invoices\n$builder\n    -&gt;columns('*')\n    -&gt;from(Invoices::class)\n;\n\n// SELECT \n//      Invoices.inv_id \n// FROM \n//      Invoices\n$builder\n    -&gt;columns('inv_id')\n    -&gt;from(Invoices::class)\n;\n\n// SELECT \n//      Invoices.inv_id, \n//      Invoices.inv_title \n// FROM \n//      Invoices\n$builder\n    -&gt;columns(\n        [\n            'inv_id', \n            'inv_title',\n        ]\n    )\n    -&gt;from(Invoices::class)\n;\n\n// SELECT \n//      Invoices.inv_id, \n//      Invoices.title_alias \n// FROM \n//      Invoices\n$builder\n    -&gt;columns(\n        [\n            'inv_id', \n            'title_alias' =&gt; 'inv_title',\n        ]\n    )\n    -&gt;from(Invoices::class)\n;\n\n// SELECT \n//      Invoices.* \n// FROM \n//      Invoices \n// WHERE \n//      Invoices.inv_cst_id = 1\n$builder\n    -&gt;from(Invoices::class)\n    -&gt;where(\"Invoices.inv_cst_id = 1\")\n;\n\n// SELECT \n//      Invoices.* \n// FROM \n//      Invoices \n// WHERE \n//      Invoices.inv_id = 1\n$builder\n    -&gt;from(Invoices::class)\n    -&gt;where(1)\n;\n\n// SELECT \n//      Invoices.* \n// FROM \n//      Invoices \n// WHERE \n//      Invoices.inv_cst_id = 1\n// AND \n//      Invoices.inv_total &gt; 1000\n$builder\n    -&gt;from(Invoices::class)\n    -&gt;where(\"inv_cst_id = 1\")\n    -&gt;andWhere('inv_total &gt; 1000')\n;\n\n// SELECT \n//      Invoices.* \n// FROM \n//      Invoices \n// WHERE \n//      Invoices.inv_cst_id = 1\n// OR \n//      Invoices.inv_total &gt; 1000\n$builder\n    -&gt;from(Invoices::class)\n    -&gt;where(\"inv_cst_id = 1\")\n    -&gt;orWhere('inv_total &gt; 1000')\n;\n\n\n// SELECT \n//      Invoices.* \n// FROM \n//      Invoices \n// GROUP BY \n//      Invoices.inv_cst_id\n$builder\n    -&gt;from(Invoices::class)\n    -&gt;groupBy('Invoices.inv_cst_id')\n;\n\n// SELECT \n//      Invoices.* \n// FROM \n//      Invoices \n// GROUP BY \n//      Invoices.inv_cst_id,\n//      Invoices.inv_status_flag\n$builder\n    -&gt;from(Invoices::class)\n    -&gt;groupBy(\n        [\n            'Invoices.inv_cst_id',\n            'Invoices.inv_status_flag',\n        ]\n    )\n;\n\n// SELECT \n//      Invoices.inv_title, \n//      SUM(Invoices.inv_total) AS total\n// FROM \n//      Invoices \n// GROUP BY \n//      Invoices.inv_cst_id\n$builder\n    -&gt;columns(\n        [\n            'Invoices.inv_title', \n            'total' =&gt; 'SUM(Invoices.inv_total)'\n        ]\n    )\n    -&gt;from(Invoices::class)\n    -&gt;groupBy('Invoices.inv_cst_id')\n;\n\n// SELECT \n//      Invoices.inv_title, \n//      SUM(Invoices.inv_total) AS total\n// FROM \n//      Invoices \n// GROUP BY \n//      Invoices.inv_cst_id\n// HAVING\n//      Invoices.inv_total &gt; 1000\n$builder\n    -&gt;columns(\n        [\n            'Invoices.inv_title', \n            'total' =&gt; 'SUM(Invoices.inv_total)'\n        ]\n    )\n    -&gt;from(Invoices::class)\n    -&gt;groupBy('Invoices.inv_cst_id')\n    -&gt;having('SUM(Invoices.inv_total) &gt; 1000')\n;\n\n// SELECT \n//      Invoices.* \n// FROM \n//      Invoices \n// JOIN \n//      Customers\n$builder\n    -&gt;from(Invoices::class)\n    -&gt;join(Customers::class)\n;\n\n// SELECT \n//      Invoices.* \n// FROM \n//      Invoices \n// JOIN \n//      Customers AS c\n$builder\n    -&gt;from(Invoices::class)\n    -&gt;join(Customers::class, null, 'c')\n;\n\n// SELECT \n//      Invoices.* \n// FROM \n//      Invoices AS i\n// JOIN \n//      Customers AS c\n// ON\n//      i.inv_cst_id = c.cst_id\n$builder\n    -&gt;from(Invoices::class, 'i')\n    -&gt;join(\n        Customers::class, \n        'i.inv_cst_id = c.cst_id', \n        'c'\n    )\n;\n\n// SELECT \n//      Invoices.* \n// FROM \n//      Invoices AS i\n// JOIN \n//      InvoicesXProducts AS x\n// ON\n//      i.inv_id = x.ixp_inv_id\n// JOIN \n//      Products AS prd\n// ON\n//      x.ixp_prd_id = p.prd_id\n$builder\n    -&gt;addFrom(Invoices::class, 'i')\n    -&gt;join(\n        InvoicesXProducts::class, \n        'i.inv_id = x.ixp_inv_id', \n        'x'\n    )\n    -&gt;join(\n        Products::class, \n        'x.ixp_prd_id = p.prd_id', \n        'p'\n    )\n;\n\n// SELECT \n//      Invoices.*, \n//      c.* \n// FROM \n//      Invoices, \n//      Customers AS c\n$builder\n    -&gt;from(Invoices::class)\n    -&gt;addFrom(Customers::class, 'c')\n;\n\n// SELECT \n//      i.*, \n//      c.* \n// FROM \n//      Invoices AS i, \n//      Customers AS c\n$builder\n    -&gt;from(\n        [\n            'i' =&gt; Invoices::class,\n            'c' =&gt; Customers::class,\n        ]\n    )\n;\n\n\n// SELECT \n//      Invoices.* \n// FROM \n//      Invoices \n// LIMIT \n//      10\n$builder\n    -&gt;from(Invoices::class)\n    -&gt;limit(10)\n;\n\n// SELECT \n//      Invoices.* \n// FROM \n//      Invoices \n// LIMIT \n//      10\n// OFFSET\n//      5\n$builder\n    -&gt;from(Invoices::class)\n    -&gt;limit(10, 5)\n;\n\n// SELECT \n//      Invoices.* \n// FROM \n//      Invoices \n// WHERE \n//      inv_id \n// BETWEEN \n//      1 \n// AND \n//      100\n$builder\n    -&gt;from(Invoices::class)\n    -&gt;betweenWhere('inv_id', 1, 100)\n;\n\n// SELECT \n//      Invoices.* \n// FROM \n//      Invoices \n// WHERE \n//      inv_id \n// IN \n//      (1, 2, 3)\n$builder\n    -&gt;from(Invoices::class)\n    -&gt;inWhere(\n        'inv_id', \n        [1, 2, 3]\n    )\n;\n\n// SELECT \n//      Invoices.* \n// FROM \n//      Invoices \n// WHERE \n//      inv_id \n// NOT IN \n//      (1, 2, 3)\n$builder\n    -&gt;from(Invoices::class)\n    -&gt;notInWhere(\n        'inv_id', \n        [1, 2, 3]\n    )\n;\n\n// SELECT \n//      Invoices.* \n// FROM \n//      Invoices \n// WHERE \n//      inv_title \n// LIKE \n//      '%ACME%';\n$title = 'ACME';\n$builder\n    -&gt;from(Invoices::class)\n    -&gt;where(\n        'inv_title LIKE :title:', \n        [\n            'title' =&gt; '%' . $title . '%',\n        ]\n    )\n;\n</code></pre>"},{"location":"db-phql/#bound-parameters","title":"Bound Parameters","text":"<p>Bound parameters in the query builder can be set as the query is built or when it is being executed:</p> <pre><code>&lt;?php\n\n$invoices = $this\n    -&gt;modelsManager\n    -&gt;createBuilder()\n    -&gt;from(Invoices::class)\n    -&gt;where(\n        'inv_cst_id = :cst_id:', \n        [\n            'cst_id' =&gt; 1,\n        ]\n    )\n    -&gt;andWhere(\n        'inv_total = :total:', \n        [\n            'total' =&gt; 1000,\n        ]\n    )\n    -&gt;getQuery()\n    -&gt;execute();\n\n$invoices = $this\n    -&gt;modelsManager\n    -&gt;createBuilder()\n    -&gt;from(Invoices::class)\n    -&gt;where('inv_cst_id = :cst_id:')\n    -&gt;andWhere('inv_total = :total:')\n    -&gt;getQuery()\n    -&gt;execute(\n        [\n            'cst_id' =&gt; 1,\n            'total'  =&gt; 1000,\n        ]\n    )\n;\n</code></pre>"},{"location":"db-phql/#disable-literals-in-phql","title":"Disable Literals in PHQL","text":"<p>Literals can be disabled in PHQL. This means that you will not be able to use strings, numbers or boolean values in PHQL. You will have to use bound parameters instead.</p> <p>NOTE</p> <p>Disabling literals increases the security of your database statements and reduces the possibility of SQL injections.</p> <p>NOTE</p> <p>This setting can be set globally for all models. Please refer to the models document for a how to and additional settings.</p> <p>The following query could potentially lead to a SQL injection:</p> <pre><code>&lt;?php\n\n$login  = 'admin';\n$phql   = \"SELECT * FROM Users WHERE login = '$login'\";\n$result = $manager-&gt;executeQuery($phql);\n</code></pre> <p>If <code>$login</code> is changed to <code>' OR '' = '</code>, the produced PHQL is:</p> <pre><code>SELECT * FROM Users WHERE login = '' OR '' = ''\n</code></pre> <p>Which is always <code>true</code> no matter what the login stored in the database is. If literals are disabled, using strings, numbers or booleans in PHQL strings will cause an exception to be thrown, forcing the developer to use bound parameters. The same query can be written more securely as:</p> <pre><code>&lt;?php\n\n$login  = 'admin';\n$phql   = \"SELECT * FROM Users WHERE login = :login:\";\n$result = $manager-&gt;executeQuery(\n    $phql,\n    [\n        'login' =&gt; $login,\n    ]\n);\n</code></pre> <p>You can disallow literals as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nModel::setup(\n    [\n        'phqlLiterals' =&gt; false\n    ]\n);\n</code></pre> <p>You can (and should) use bound parameters whether literals are disabled or not.</p>"},{"location":"db-phql/#reserved-words","title":"Reserved Words","text":"<p>PHQL uses some reserved words internally. If you want to use any of them as attributes or model names, you will need to escape them using the cross-database escaping delimiters <code>[</code> and <code>]</code>:</p> <pre><code>&lt;?php\n\n$phql   = 'SELECT * FROM [Update]';\n$result = $manager-&gt;executeQuery($phql);\n\n$phql   = 'SELECT id, [Like] FROM Posts';\n$result = $manager-&gt;executeQuery($phql);\n</code></pre> <p>The delimiters are dynamically translated to valid delimiters depending on the database system where the application connecting to.</p>"},{"location":"db-phql/#custom-dialect","title":"Custom Dialect","text":"<p>Due to differences in SQL dialects based on the RDBMS of your choice, not all methods are supported. However, you can extend the dialect, so that you can use additional functions that your RDBMS supports. </p> <p>For the example below, we are using the <code>MATCH_AGAINST</code> method for MySQL.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Dialect\\MySQL as Dialect;\nuse Phalcon\\Db\\Adapter\\Pdo\\MySQL as Connection;\n\n$dialect = new Dialect();\n$dialect-&gt;registerCustomFunction(\n    'MATCH_AGAINST',\n    function ($dialect, $expression) {\n        $arguments = $expression['arguments'];\n        return sprintf(\n            \" MATCH (%s) AGAINST (%s)\",\n            $dialect-&gt;getSqlExpression($arguments[0]),\n            $dialect-&gt;getSqlExpression($arguments[1])\n         );\n    }\n);\n\n$connection = new Connection(\n    [\n        \"host\"          =&gt; \"localhost\",\n        \"username\"      =&gt; \"root\",\n        \"password\"      =&gt; \"secret\",\n        \"dbname\"        =&gt; \"phalcon\",\n        \"dialectClass\"  =&gt; $dialect\n    ]\n);\n</code></pre> <p>Now you can use this function in PHQL, and it internally translates to the correct SQL using the custom function:</p> <pre><code>$phql = \"SELECT *\n         FROM Invoices\n         WHERE MATCH_AGAINST(inv_title, :pattern:)\";\n\n$invoices = $modelsManager\n    -&gt;executeQuery(\n        $phql, \n        [\n            'pattern' =&gt; $pattern\n        ]\n    )\n;\n</code></pre> <p>Another example showcasing <code>GROUP_CONCAT</code>:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Dialect\\MySQL as Dialect;\nuse Phalcon\\Db\\Adapter\\Pdo\\MySQL as Connection;\n\n$dialect = new Dialect();\n$dialect-&gt;registerCustomFunction(\n    'GROUPCONCAT',\n    function ($dialect, $expression) {\n        $arguments = $expression['arguments'];\n        if (true !== empty($arguments[2])) {\n            return sprintf(\n                \" GROUP_CONCAT(DISTINCT %s ORDER BY %s SEPARATOR %s)\",\n                $dialect-&gt;getSqlExpression($arguments[0]),\n                $dialect-&gt;getSqlExpression($arguments[1]),\n                $dialect-&gt;getSqlExpression($arguments[2]),\n            );\n        } elseif (true !== empty($arguments[1])) {\n            return sprintf(\n                \" GROUP_CONCAT(%s SEPARATOR %s)\",\n                $dialect-&gt;getSqlExpression($arguments[0]),\n                $dialect-&gt;getSqlExpression($arguments[1])\n            );\n        } else {\n            return sprintf(\n                \" GROUP_CONCAT(%s)\",\n                $dialect-&gt;getSqlExpression($arguments[0])\n            );\n        }\n    }\n);\n\n$connection = new Connection(\n    [\n        \"host\"          =&gt; \"localhost\",\n        \"username\"      =&gt; \"root\",\n        \"password\"      =&gt; \"secret\",\n        \"dbname\"        =&gt; \"phalcon\",\n        \"dialectClass\"  =&gt; $dialect\n    ]\n);\n</code></pre> <p>Now you can use this function in PHQL, and it internally translates to the correct SQL using the custom function:</p> <pre><code>$phql = \"SELECT GROUPCONCAT(inv_title, inv_title, :separator:)\n         FROM Invoices\";\n\n$invoices = $modelsManager\n    -&gt;executeQuery(\n        $phql, \n        [\n            'separator' =&gt; \", \"\n        ]\n    )\n;\n</code></pre> <p>The above will create a <code>GROUP_CONCAT</code> based on the parameters passed to the method. If three parameters passed we will have a <code>GROUP_CONCAT</code> with a <code>DISTINCT</code>, <code>ORDER BY</code> and <code>SEPARATOR</code>, if two parameters passed we will have a <code>GROUP_CONCAT</code> with <code>SEPARATOR</code> and if only one parameter passed just a <code>GROUP_CONCAT</code></p>"},{"location":"db-phql/#caching","title":"Caching","text":"<p>PHQL queries can be cached. You can also check the Models Caching document for more information.</p> <pre><code>&lt;?php\n\n$phql  = 'SELECT * FROM Customers WHERE cst_id = :cst_id:';\n$query = $this\n    -&gt;modelsManager\n    -&gt;createQuery($phql)\n;\n\n$query-&gt;cache(\n    [\n        'key'      =&gt; 'customers-1',\n        'lifetime' =&gt; 300,\n    ]\n);\n\n$invoice = $query-&gt;execute(\n    [\n        'cst_id' =&gt; 1,\n    ]\n);\n</code></pre>"},{"location":"db-phql/#lifecycle","title":"Lifecycle","text":"<p>Being a high-level language, PHQL gives developers the ability to personalize and customize different aspects in order to suit their needs. The following is the life cycle of each PHQL statement executed:</p> <ul> <li>The PHQL is parsed and converted into an Intermediate Representation (IR) which is independent of the SQL implemented by database system</li> <li>The IR is converted to valid SQL according to the database system associated to the model</li> <li>PHQL statements are parsed once and cached in memory. Further executions of the same statement result in a slightly faster execution</li> </ul>"},{"location":"db-phql/#raw-sql","title":"Raw SQL","text":"<p>A database system could offer specific SQL extensions that are not supported by PHQL, in this case, a raw SQL can be appropriate:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Resultset\\Simple as Resultset;\n\nclass Invoices extends Model\n{\n    public static function findByCreateInterval()\n    {\n        $sql     = 'SELECT * FROM Invoices WHERE inv_id &gt; 1';\n        $invoice = new Invoices();\n\n        // Execute the query\n        return new Resultset(\n            null,\n            $invoice,\n            $invoice-&gt;getReadConnection()-&gt;query($sql)\n        );\n    }\n}\n</code></pre> <p>If raw SQL queries are common in your application a generic method could be added to your model:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Resultset\\Simple as Resultset;\n\nclass Invoices extends Model\n{\n    public static function findByRawSql(\n        string $conditions, \n        array $params = null\n    ) {\n        $sql     = 'SELECT * FROM Invoices WHERE ' . $conditions;\n        $invoice = new Invoices();\n\n        // Execute the query\n        return new Resultset(\n            null,\n            $invoice,\n            $invoice-&gt;getReadConnection()-&gt;query($sql, $params)\n        );\n    }\n}\n</code></pre> <p>The above <code>findByRawSql</code> could be used as follows:</p> <pre><code>&lt;?php\n\n$robots = Invoices::findByRawSql(\n    'id &gt; ?0',\n    [\n        10\n    ]\n);\n</code></pre>"},{"location":"db-phql/#troubleshooting","title":"Troubleshooting","text":"<p>Some things to keep in mind when using PHQL:</p> <ul> <li>Classes are case-sensitive, if a class is not defined with the same name as it was created this could lead to an unexpected behavior in operating systems with case-sensitive file systems such as Linux.</li> <li>The correct charset must be defined in the connection to bind parameters successfully.</li> <li>Aliased classes are not replaced by full namespaced classes since this only occurs in PHP code and not inside strings.</li> <li>If column renaming is enabled avoid, using column aliases with the same name as columns to be renamed, this may confuse the query resolver.</li> </ul>"},{"location":"debug/","title":"Debug","text":""},{"location":"debug/#overview","title":"Overview","text":"<p>PHP offers tools to debug applications with notices, warnings, errors and exceptions. The Exception class offers information such as the file, line, message, numeric code, backtrace etc. of where an error occurred. OOP frameworks like Phalcon mainly use this class to encapsulate this functionality and provide information back to the developer or user.</p> <p>Despite being written in C, Phalcon executes methods in the PHP userland, providing the same debugging capabilities as other PHP based frameworks offer.</p>"},{"location":"debug/#exceptions","title":"Exceptions","text":"<p>A very common way to control the flow of errors in your application (intentional or otherwise) is to use a <code>try</code>/<code>catch</code> block to catch exceptions. There are plenty of examples in our documentation demonstrating such blocks.</p> <pre><code>&lt;?php\n\ntry {\n\n    // ... \n\n} catch (\\Exception $ex) {\n\n}\n</code></pre> <p>Any exception thrown within the block is captured in the variable <code>$ex</code>. A Phalcon\\Exception extends the PHP Exception class. Using the Phalcon exception allows you to distinguish whether the exception was thrown from Phalcon related code or elsewhere.</p> <p>The Exception class, exposes the following:</p> <pre><code>&lt;?php\n\nclass Exception\n{\n    /**\n     * @var int\n     */\n    protected $code;\n\n    /**\n     * @var string\n     */\n    protected $file;\n    /**\n     * @var int\n     */\n    protected $line;\n\n    /**\n     * @var string\n     */\n    protected $message;\n\n    public function __construct(\n        string $message = '' \n        [, int $code = 0 \n        [, Exception $previous = null ]]]\n    );\n\n    public function __toString() -&gt; string;\n\n    final public function getCode() -&gt; int;\n\n    final public function getFile() -&gt; string;\n\n    final public function getLine() -&gt; int;\n\n    final public function getMessage() -&gt; string;\n\n    final public function getPrevious() -&gt; Exception;\n\n    final public function getTrace() -&gt; array;\n\n    final public function getTraceAsString() -&gt; string;\n\n    final private function __clone() -&gt; void;\n}\n</code></pre> <p>You can use the same method calls when using the Phalcon\\Exception:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Exception;\n\ntry {\n\n    // ...\n\n} catch (Exception $ex) {\n    echo get_class($ex), ': ', $ex-&gt;getMessage(), PHP_EOL;\n    echo ' File=', $ex-&gt;getFile(), PHP_EOL;\n    echo ' Line=', $ex-&gt;getLine(), PHP_EOL;\n    echo $ex-&gt;getTraceAsString();\n}\n</code></pre> <p>It's therefore easy to find which file and line of the application's code generated the exception, as well as the components involved in generating the exception:</p> <pre><code>PDOException: SQLSTATE[28000] [1045] Access denied for user 'root'@'localhost'\n    (using password: NO)\n File=/app/public/index.php\n Line=74\n#0 [internal function]: PDO-&gt;__construct('mysql:host=loca...', 'root', '', Array)\n#1 [internal function]: Phalcon\\Db\\Adapter\\Pdo-&gt;connect(Array)\n#2 /app/public/index.php(74):\n    Phalcon\\Db\\Adapter\\Pdo-&gt;__construct(Array)\n#3 [internal function]: {closure}()\n#4 [internal function]: call_user_func_array(Object(Closure), Array)\n#5 [internal function]: Phalcon\\Di-&gt;_factory(Object(Closure), Array)\n#6 [internal function]: Phalcon\\Di-&gt;get('db', Array)\n#7 [internal function]: Phalcon\\Di-&gt;getShared('db')\n#8 [internal function]: Phalcon\\Mvc\\Model-&gt;getConnection()\n#9 [internal function]: Phalcon\\Mvc\\Model::_getOrCreateResultset('Users', Array, true)\n#10 /app/app/controllers/SessionController.php(83):\n    Phalcon\\Mvc\\Model::findFirst('email='demo@pha...')\n#11 [internal function]: SessionController-&gt;startAction()\n#12 [internal function]: call_user_func_array(Array, Array)\n#13 [internal function]: Phalcon\\Mvc\\Dispatcher-&gt;dispatch()\n#14 /app/public/index.php(114): Phalcon\\Mvc\\Application-&gt;handle()\n#15 {main}\n</code></pre> <p>As demonstrated above, it does not matter that Phalcon is compiled as a PHP extension. The exception information contains parameters and method calls that were involved in the call that generated the exception fragment above. Exception::getTrace() provides additional information if necessary.</p>"},{"location":"debug/#constructor","title":"Constructor","text":"<p>Phalcon\\Debug provides visual aids as well as additional information for developers to easily locate errors produced in an application.</p> <p>NOTE</p> <p>Please make sure that this component is not used in production environments, as it can reveal information about your server to attackers</p> <p>The following screencast explains how it works:</p> <p>To enable it, add the following to your bootstrap:</p> <pre><code>&lt;?php\n\nuse \\Phalcon\\Debug;\n\n$debug = new Debug();\n\n$debug-&gt;listen();\n</code></pre> <p>or using a shorter syntax:</p> <pre><code>&lt;?php\n\n(new \\Phalcon\\Debug())-&gt;listen();\n</code></pre> <p>NOTE</p> <p>Any <code>try</code>/<code>catch</code> blocks must be removed or disabled to make this component work properly.</p> <p>By default, the component will listen for uncaught exceptions but not low severity errors (warnings, notices etc.). You can modify this behavior by passing relevant parameters in <code>listen()</code></p> <ul> <li><code>exceptions</code> - boolean </li> <li><code>lowSeverity</code> - boolean</li> </ul> <p>In the example below, do not listen to uncaught exceptions but listen to non silent notices or warnings (low severity):</p> <pre><code>&lt;?php\n\nuse \\Phalcon\\Debug;\n\n$debug = new Debug();\n\n$debug-&gt;listen(false, true);\n</code></pre> <p>If your application flow is different, or do not wish to pass the parameters on <code>listen()</code>, you can always use <code>listenExceptions()</code> and <code>listenLowSeverity()</code>:</p> <pre><code>&lt;?php\n\nuse \\Phalcon\\Debug;\n\n$debug = new Debug();\n\n$debug\n    -&gt;listenExceptions()\n    -&gt;listenLowSeverity()\n    -&gt;listen();\n</code></pre> <p>NOTE</p> <p>The <code>listenExceptions()</code> and <code>listenLowSeverity()</code> are ON switches. If you wish to switch listening to exceptions or low severity errors OFF you need to pass <code>false</code> in the <code>listen()</code> method.</p>"},{"location":"debug/#getters","title":"Getters","text":"<p>There are a few getters available that offer information about the component. Extending those could also change the behavior of the component visually.</p> <ul> <li><code>getCssSources()</code> - <code>string</code> Returns the stylesheets used to display the contents on screen</li> <li><code>getJsSources()</code> - <code>string</code> Returns the javascript files used to display the contents on screen</li> <li><code>getVersion()</code> - <code>string</code> Returns the link to the current version documentation</li> </ul> <p>Extending the component and overriding the <code>getCssSources()</code> for instance to return different CSS HTML directives will change the appearance of the output on screen. The output CSS classes are based on Bootstrap CSS.</p>"},{"location":"debug/#setters","title":"Setters","text":"<p>Phalcon\\Debug also offers some setters to better customize the output when an error occurs in your application.</p> <ul> <li><code>setShowBackTrace(bool $showBackTrace)</code> - Show/hide the exception's backtrace</li> <li><code>setShowFileFragment(bool $showFileFragment)</code> - Show/Hide the file fragment in the output (related to the exception)</li> <li><code>setShowFiles(bool $showFiles)</code> - Show/Hide the files in the backtrace</li> <li><code>setUri(string $uri)</code> - The base URI for static resources (see also the Getters section for customization of the component)</li> </ul>"},{"location":"debug/#variables","title":"Variables","text":"<p>You can also use the <code>debugVar()</code> method, to inject any additional variables you want to present in the output. These are usually application specific variables. An example might be to show timing information for your application.</p> <pre><code>&lt;?php\n\nuse \\Phalcon\\Debug;\n\n$debug = new Debug();\n\n$time = time();\n$debug\n    -&gt;debugVar('time', $time)\n    -&gt;listen();\n</code></pre> <p>To clear the variable stack, you can call <code>clearVars()</code>.</p> <p>Finally you can halt execution of your application and trigger showing a backtrace by calling <code>halt()</code></p> <pre><code>&lt;?php\n\nuse \\Phalcon\\Debug;\n\n$debug = new Debug();\n\n$debug-&gt;listen();\n\n// .....\n\nif (12345 === $password) {\n    $debug-&gt;halt();\n}\n</code></pre>"},{"location":"debug/#blacklisting-output","title":"Blacklisting Output","text":"<p>As mentioned above, the component must not be enabled in production environments. Since Phalcon cannot control this behavior, there is a built-in blacklisting feature that allows the developer to blacklist certain pieces of information that they do not wish to be displayed on screen, just in case. These are elements of the <code>$_REQUEST</code> and <code>$_SERVER</code> arrays.</p> <pre><code>&lt;?php\n\nuse \\Phalcon\\Debug;\n\n$debug = new Debug();\n\n\n$debug\n    -&gt;setBlacklist(\n        [\n            'request' =&gt; ['some'],\n            'server'  =&gt; ['hostname'],\n        ]\n    )\n    -&gt;listen();\n</code></pre> <p>In the example above, we will never show the element <code>some</code> from the <code>$_REQUEST</code> as well as the <code>hostname</code> from <code>$_SERVER</code>. You can always add more elements not to be displayed, that exist in these two superglobals. This is particularly useful in case you forget to disable the component in your production environment. It is bad practice to leave it enabled but if you forget, at least certain key pieces of information about your host will not be visible to potential hackers.</p> <p>NOTE</p> <p>The keys of the array elements to be hidden are case insensitive</p>"},{"location":"debug/#handlers","title":"Handlers","text":"<p>In order to catch exceptions and low severity errors, Phalcon\\Debug makes use of <code>onUncaughtException()</code> and <code>onUncaughtLowSeverity()</code>. Most developers that use this component will never need to extend these methods. However, if you wish you can do so by extending the component and overriding these methods to manipulate the exception and return the output you require.</p> <p>These two methods are being set as exception handlers using PHP's set_exception_handler. When calling <code>listenExceptions()</code> the <code>onUncaughtException()</code> is registered, while when calling <code>listenLowSeverity()</code> the <code>onUncaughtLowSeverity</code> is registered.</p>"},{"location":"debug/#reflection-and-introspection","title":"Reflection and Introspection","text":"<p>Phalcon classes do not differ from any other PHP classes and therefore you can use the Reflection API or simply print any object to display its contents and state:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\nprint_r($router);\n</code></pre> <p>The above example prints the following:</p> <pre><code>Phalcon\\Mvc\\Router Object\n(\n    [_dependencyInjector:protected] =&gt;\n    [_module:protected] =&gt;\n    [_controller:protected] =&gt;\n    [_action:protected] =&gt;\n    [_params:protected] =&gt; Array\n        (\n        )\n    [_routes:protected] =&gt; Array\n        (\n            [0] =&gt; Phalcon\\Mvc\\Router\\Route Object\n                (\n                    [_pattern:protected] =&gt; #^/([a-zA-Z0-9\\_]+)[/]{0,1}$#\n                    [_compiledPattern:protected] =&gt; #^/([a-zA-Z0-9\\_]+)[/]{0,1}$#\n                    [_paths:protected] =&gt; Array\n                        (\n                            [controller] =&gt; 1\n                        )\n\n                    [_methods:protected] =&gt;\n                    [_id:protected] =&gt; 0\n                    [_name:protected] =&gt;\n                )\n\n            [1] =&gt; Phalcon\\Mvc\\Router\\Route Object\n                (\n                    [_pattern:protected] =&gt; #^/([a-zA-Z0-9\\_]+)/([a-zA-Z0-9\\_]+)(/.*)*$#\n                    [_compiledPattern:protected] =&gt; #^/([a-zA-Z0-9\\_]+)/([a-zA-Z0-9\\_]+)(/.*)*$#\n                    [_paths:protected] =&gt; Array\n                        (\n                            [controller] =&gt; 1\n                            [action] =&gt; 2\n                            [params] =&gt; 3\n                        )\n                    [_methods:protected] =&gt;\n                    [_id:protected] =&gt; 1\n                    [_name:protected] =&gt;\n                )\n        )\n    [_matchedRoute:protected] =&gt;\n    [_matches:protected] =&gt;\n    [_wasMatched:protected] =&gt;\n    [_defaultModule:protected] =&gt;\n    [_defaultController:protected] =&gt;\n    [_defaultAction:protected] =&gt;\n    [_defaultParams:protected] =&gt; Array\n        (\n        )\n)\n</code></pre>"},{"location":"debug/#xdebug","title":"Xdebug","text":"<p>Xdebug is an amazing tool that complements the debugging of PHP applications. It is also a C extension for PHP, and you can use it together with Phalcon without additional configuration or side effects.</p> <p>Once you have Xdebug installed, you can use its API to get a more detailed information about exceptions and messages.</p> <p>NOTE</p> <p>We highly recommend using the latest version of Xdebug for a better compatibility with Phalcon</p> <p>The following example implements xdebug_print_function_stack to stop the execution and generate a backtrace:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass SignupController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function registerAction()\n    {\n        $name  = $this-&gt;request-&gt;getPost('name', 'string');\n        $email = $this-&gt;request-&gt;getPost('email', 'email');\n\n        // Stop execution and show a backtrace\n        return xdebug_print_function_stack('stop here!');\n\n        $user        = new Users();\n        $user-&gt;name  = $name;\n        $user-&gt;email = $email;\n\n        // Store and check for errors\n        $user-&gt;save();\n    }\n}\n</code></pre> <p>For the above example, Xdebug will also show us the variables in the local scope as well as a backtrace:</p> <pre><code>Xdebug: stop here! in /app/app/controllers/SignupController.php\n    on line 19\n\nCall Stack:\n    0.0383     654600   1. {main}() /app//public/index.php:0\n    0.0392     663864   2. Phalcon\\Mvc\\Application-&gt;handle()\n        /app/public/index.php:37\n    0.0418     738848   3. SignupController-&gt;registerAction()\n        /app/public/index.php:0\n    0.0419     740144   4. xdebug_print_function_stack()\n        /app/app/controllers/SignupController.php:19\n</code></pre> <p>Xdebug offers several ways to get debug and trace information regarding the execution of your application using Phalcon. You can check the XDebug documentation for more information.</p> <p>To set up Xdebug for PHPStorm you can check this article.</p>"},{"location":"devtools/","title":"Phalcon Devtools","text":""},{"location":"devtools/#overview","title":"Overview","text":"<p>These tools help you to generate skeleton code, maintain your database structure and helps to speedup development. Core components of your application can be generated with a simple command, allowing you to easily develop applications using Phalcon.</p> <p>Phalcon Devtool can be controlled using the cmd line or the web interface.</p>"},{"location":"devtools/#installation","title":"Installation","text":"<p>Phalcon Devtools can be installed using composer. Make sure you have installed first. </p> <p>Install Phalcon Devtools globally <pre><code>composer global require phalcon/devtools\n</code></pre> Or only inside your project <pre><code>composer require phalcon/devtools\n</code></pre></p> <p>Test your installation by typing: <code>phalcon</code> <pre><code>$ phalcon\n\nPhalcon DevTools (4.0.0)\n\nAvailable commands:\n  info             (alias of: i)\n  commands         (alias of: list, enumerate)\n  controller       (alias of: create-controller)\n  module           (alias of: create-module)\n  model            (alias of: create-model)\n  all-models       (alias of: create-all-models)\n  project          (alias of: create-project)\n  scaffold         (alias of: create-scaffold)\n  migration        (alias of: create-migration)\n  webtools         (alias of: create-webtools)\n  serve            (alias of: server)\n  console          (alias of: shell, psysh)\n</code></pre></p> <p>The devtools are also available as phar download on our github repository.</p>"},{"location":"devtools/#usage","title":"Usage","text":""},{"location":"devtools/#available-commands","title":"Available Commands","text":"<p>You can get a list of available commands in Phalcon tools by typing: <code>phalcon commands</code></p> <pre><code>$ phalcon commands\n\nPhalcon DevTools (4.0.0)\n\nAvailable commands:\n  info             (alias of: i)\n  commands         (alias of: list, enumerate)\n  controller       (alias of: create-controller)\n  module           (alias of: create-module)\n  model            (alias of: create-model)\n  all-models       (alias of: create-all-models)\n  project          (alias of: create-project)\n  scaffold         (alias of: create-scaffold)\n  migration        (alias of: create-migration)\n  webtools         (alias of: create-webtools)\n  serve            (alias of: server)\n  console          (alias of: shell, psysh)\n</code></pre>"},{"location":"devtools/#generating-a-project-skeleton","title":"Generating a Project Skeleton","text":"<p>You can use Phalcon tools to generate pre-defined project skeletons for your applications with Phalcon framework. By default the project skeleton generator will use mod_rewrite for Apache. Type the following command on your web server document root:</p> <pre><code>$ phalcon create-project store\n</code></pre> <p>The above recommended project structure was generated:</p> <p></p> <p>You could add the parameter <code>--help</code> to get help on the usage of a certain script:</p> <pre><code>$ phalcon project --help\n\nPhalcon DevTools (4.0.0)\n\nHelp:\n  Creates a project\n\nUsage:\n  project [name] [type] [directory] [enable-webtools]\n\nArguments:\n  help  Shows this help text\n\nExample\n  phalcon project store simple\n\nOptions:\n --name=s               Name of the new project\n --enable-webtools      Determines if webtools should be enabled [optional]\n --directory=s          Base path on which project will be created [optional]\n --type=s               Type of the application to be generated (cli, micro, simple, modules)\n --template-path=s      Specify a template path [optional]\n --template-engine=s    Define the template engine, default phtml (phtml, volt) [optional]\n --use-config-ini       Use a ini file as configuration file [optional]\n --trace                Shows the trace of the framework in case of exception [optional]\n --help                 Shows this help [optional]\n</code></pre> <p>Accessing the project from the web server will show you:</p> <p></p>"},{"location":"devtools/#generating-controllers","title":"Generating Controllers","text":"<p>The command <code>create-controller</code> generates controller skeleton structures. It's important to invoke this command inside a directory that already has a Phalcon project.</p> <pre><code>$ phalcon create-controller --name test\n</code></pre> <p>The following code is generated by the script:</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nclass TestController extends \\Phalcon\\Mvc\\Controller\n{\n\n    public function indexAction()\n    {\n\n    }\n\n}\n</code></pre>"},{"location":"devtools/#preparing-database-settings","title":"Preparing Database Settings","text":"<p>When a project is generated using developer tools. A configuration file can be found in <code>app/config/config.php</code>. To generate models or scaffold, you will need to change the settings used to connect to your database.</p> <p>Change the database section in your config.php file:</p> <pre><code>&lt;?php\n\n/*\n * Modified: prepend directory path of current file, because of this file own different ENV under between Apache and command line.\n * NOTE: please remove this comment.\n */\ndefined('BASE_PATH') || define('BASE_PATH', getenv('BASE_PATH') ?: realpath(dirname(__FILE__) . '/../..'));\ndefined('APP_PATH') || define('APP_PATH', BASE_PATH . '/app');\n\nreturn new \\Phalcon\\Config([\n    'database' =&gt; [\n        'adapter'     =&gt; 'Mysql',\n        'options' =&gt; [\n            'host'        =&gt; 'localhost',\n            'username'    =&gt; 'root',\n            'password'    =&gt; '',\n            'dbname'      =&gt; 'test',\n            'charset'     =&gt; 'utf8',\n        ],\n    ],\n    'application' =&gt; [\n        'appDir'         =&gt; APP_PATH . '/',\n        'controllersDir' =&gt; APP_PATH . '/controllers/',\n        'modelsDir'      =&gt; APP_PATH . '/models/',\n        'migrationsDir'  =&gt; APP_PATH . '/migrations/',\n        'viewsDir'       =&gt; APP_PATH . '/views/',\n        'pluginsDir'     =&gt; APP_PATH . '/plugins/',\n        'libraryDir'     =&gt; APP_PATH . '/library/',\n        'cacheDir'       =&gt; BASE_PATH . '/cache/',\n        'baseUri'        =&gt; '/',\n    ]\n]);\n</code></pre>"},{"location":"devtools/#generating-models","title":"Generating Models","text":"<p>There are several ways to create models. You can create all models from the default database connection or some selectively. Models can have public attributes for the field representations or setters/getters can be used.</p> <pre><code>Options:\n --name=s             Table name\n --schema=s           Name of the schema [optional]\n --config=s           Configuration file [optional]\n --namespace=s        Model's namespace [optional]\n --get-set            Attributes will be protected and have setters/getters [optional]\n --extends=s          Model extends the class name supplied [optional]\n --excludefields=l    Excludes fields defined in a comma separated list [optional]\n --doc                Helps to improve code completion on IDEs [optional]\n --directory=s        Base path on which project is located [optional]\n --output=s           Folder where models are located [optional]\n --force              Rewrite the model [optional]\n --camelize           Properties is in camelCase [optional]\n --trace              Shows the trace of the framework in case of exception [optional]\n --mapcolumn          Get some code for map columns [optional]\n --abstract           Abstract Model [optional]\n --annotate           Annotate Attributes [optional]\n --help               Shows this help [optional]\n</code></pre> <p>The simplest way to generate a model for a table called users is: <pre><code>$ phalcon model users\n</code></pre> If your database looks like this: <pre><code>CREATE TABLE `users` (\n  `id` int(10) UNSIGNED NOT NULL,\n  `name` varchar(255) NOT NULL,\n  `email` varchar(255) NOT NULL,\n  `password` char(60) NOT NULL,\n  `active` tinyint(1) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nALTER TABLE `users`\n  ADD PRIMARY KEY (`id`),\n  ADD KEY `email` (`email`);\n\nALTER TABLE `users`\n  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT;\nCOMMIT;\n</code></pre> It will result in</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Email as EmailValidator;\n\nclass Users extends \\Phalcon\\Mvc\\Model\n{\n\n    /**\n     *\n     * @var integer\n     */\n    public $id;\n\n    /**\n     *\n     * @var string\n     */\n    public $name;\n\n    /**\n     *\n     * @var string\n     */\n    public $email;\n\n    /**\n     *\n     * @var string\n     */\n    public $password;\n\n    /**\n     *\n     * @var string\n     */\n    public $active;\n\n    /**\n     * Validations and business logic\n     *\n     * @return boolean\n     */\n    public function validation()\n    {\n        $validator = new Validation();\n\n        $validator-&gt;add(\n            'email',\n            new EmailValidator(\n                [\n                    'model'   =&gt; $this,\n                    'message' =&gt; 'Please enter a correct email address',\n                ]\n            )\n        );\n\n        return $this-&gt;validate($validator);\n    }\n\n    /**\n     * Initialize method for model.\n     */\n    public function initialize()\n    {\n        $this-&gt;setSchema(\"test\");\n        $this-&gt;setSource(\"users\");\n    }\n\n    /**\n     * Allows to query a set of records that match the specified conditions\n     *\n     * @param mixed $parameters\n     * @return Users[]|Users|\\Phalcon\\Mvc\\Model\\ResultSetInterface\n     */\n    public static function find($parameters = null): \\Phalcon\\Mvc\\Model\\ResultsetInterface\n    {\n        return parent::find($parameters);\n    }\n\n    /**\n     * Allows to query the first record that match the specified conditions\n     *\n     * @param mixed $parameters\n     * @return Users|\\Phalcon\\Mvc\\Model\\ResultInterface\n     */\n    public static function findFirst($parameters = null)\n    {\n        return parent::findFirst($parameters);\n    }\n\n}\n</code></pre> Options for generating different type of model blueprints can be found using <pre><code>phalcon model --help\n</code></pre></p>"},{"location":"devtools/#scaffold-a-crud","title":"Scaffold a CRUD","text":"<p>Scaffolding is a quick way to generate some of the major pieces of an application. If you want to create the models, views, and controllers for a new resource in a single operation, scaffolding is the tool for the job.</p> <p>Once the code is generated, it will have to be customized to meet your needs. Many developers avoid scaffolding entirely, opting to write all or most of their source code from scratch. The generated code can serve as a guide to better understand of how the framework works or develop prototypes. The code below shows a scaffold based on the table <code>users</code>:</p> <pre><code>$ phalcon scaffold --table-name users\n</code></pre> <p>The scaffold generator will build several files in your application, along with some folders. Here's a quick overview of what will be generated:</p> File Purpose <code>app/controllers/UsersController.php</code> The Users controller <code>app/models/Users.php</code> The Users model <code>app/views/layout/users.phtml</code> Controller layout for Users <code>app/views/products/search.phtml</code> View for the action <code>search</code> <code>app/views/products/new.phtml</code> View for the action <code>new</code> <code>app/views/products/edit.phtml</code> View for the action <code>edit</code> <p>When browsing the recently generated controller, you will see a search form and a link to create a new Product:</p> <p></p> <p>The <code>create page</code> allows you to create products applying validations on the Products model. Phalcon will automatically validate not null fields producing warnings if any of them is required.</p> <p></p> <p>After performing a search, a pager component is available to show paged results. Use the \"Edit\" or \"Delete\" links in front of each result to perform such actions.</p> <p></p>"},{"location":"devtools/#web-interface-to-tools","title":"Web Interface to Tools","text":"<p>Also, if you prefer, it's possible to use Phalcon Developer Tools from a web interface. Check out the following screencast to figure out how it works:</p>"},{"location":"devtools/#integrating-tools-with-phpstorm-ide","title":"Integrating Tools with PhpStorm IDE","text":"<p>The screencast below shows how to integrate developer tools with the PhpStorm IDE. The configuration steps could be easily adapted to other IDEs for PHP.</p>"},{"location":"devtools/#phalcon-plug-in-for-codelobster-ide","title":"Phalcon plug-in for CodeLobster IDE","text":"<p>Codelobster IDE includes a special plug-in for Phalcon development</p>"},{"location":"di/","title":"Dependency Injection / Service Location","text":""},{"location":"di/#overview","title":"Overview","text":"<p>Phalcon\\Di is a container that stores services or components (classes). These services are available throughout the application and ease development. Let us assume we are developing a component called <code>InvoiceComponent</code> that performs some calculations for a customer's invoice. It requires a database connection to retrieve the <code>Invoice</code> record from the database.</p> <p>Our component can be implemented as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Mysql;\n\nclass InvoiceComponent\n{\n    public function calculate()\n    {\n        $connection = new Mysql(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'tutorial',\n            ]\n        );\n\n        $invoice = $connection-&gt;exec(\n            'SELECT * FROM Invoices WHERE inv_id = 1'\n        );\n\n        // ...\n    }\n}\n\n$invoice = new InvoiceComponent();\n$invoice-&gt;calculate();\n</code></pre> <p>We use the <code>calculate</code> method to get our data. Inside the method, we create a new database connection to MySQL with set credentials and after that we execute a query. Although this is a perfectly valid implementation, it is impractical and will hinder the maintenance of our application later on, due to the fact that our connection parameters or type of the database are hard coded in the component. If in the future we need to change those, we will have to change them in this component and any other component designed in this manner.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Mysql;\n\nclass InvoiceComponent\n{\n    private $connection;\n\n    public function calculate()\n    {\n        $invoice = $this\n            -&gt;connection\n            -&gt;exec(\n                'SELECT * FROM Invoices WHERE inv_id = 1'\n            )\n        ;\n\n        // ...\n    }\n\n    public function setConnection(\n        Mysql $connection\n    ): InvoiceComponent {\n        $this-&gt;connection = $connection;\n\n        return $this;\n    }\n}\n\n$connection = new Mysql(\n    [\n        'host'     =&gt; 'localhost',\n        'username' =&gt; 'root',\n        'password' =&gt; 'secret',\n        'dbname'   =&gt; 'tutorial',\n    ]\n);\n\n$invoice = new InvoiceComponent();\n$invoice\n    -&gt;setConnection($connection)\n    -&gt;calculate()\n;\n</code></pre> <p>To improve flexibility, we could create the database connection outside the component, and set it in the <code>InvoiceComponent</code> using a setter. Using this approach, we can inject the database connection to any component that requires it, using the setter. Again this is a perfectly valid implementation but it does have some shortcomings. We will need for instance to construct the database connection every time we need to use any of our components that require database connectivity.  </p> <p>In order to centralize this functionality, we can implement a global registry pattern and store the connection object there. After that we can reuse it wherever we need to.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Mysql;\n\nclass Registry\n{\n    public static function getConnection(): Mysql\n    {\n        return new Mysql(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'tutorial',\n            ]\n        );\n    }\n}\n\nclass InvoiceComponent\n{\n    private $connection;\n\n    public function calculate()\n    {\n        $invoice = $this\n            -&gt;connection\n            -&gt;exec(\n                'SELECT * FROM Invoices WHERE inv_id = 1'\n            )\n        ;\n\n        // ...\n    }\n\n    public function setConnection(\n        Mysql $connection\n    ): InvoiceComponent {\n        $this-&gt;connection = $connection;\n\n        return $this;\n    }\n}\n\n$invoice = new InvoiceComponent();\n$invoice\n    -&gt;setConnection(Registry::getConnection())\n    -&gt;calculate()\n;\n</code></pre> <p>The above implementation will create a new connection every time we call <code>getConnection</code> on the <code>Registry</code> component. To address this issue, we can modify our <code>Registry</code> class to store the database connection and reuse it.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Mysql;\n\nclass Registry\n{\n    protected static $connection;\n\n    public static function getNewConnection(): Mysql\n    {\n        return self::createConnection();\n    }\n\n    public static function getSharedConnection(): Mysql\n    {\n        if (self::$connection === null) {\n            self::$connection = self::createConnection();\n        }\n\n        return self::$connection;\n    }\n\n    protected static function createConnection(): Mysql\n    {\n        return new Mysql(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'tuturial',\n            ]\n        );\n    }\n}\n\n\nclass InvoiceComponent\n{\n    private $connection;\n\n    public function calculate()\n    {\n        $invoice = $this\n            -&gt;connection\n            -&gt;exec(\n                'SELECT * FROM Invoices WHERE inv_id = 1'\n            )\n        ;\n\n        // ...\n    }\n\n    public function setConnection(\n        Mysql $connection\n    ): InvoiceComponent {\n        $this-&gt;connection = $connection;\n\n        return $this;\n    }\n}\n\n$invoice = new InvoiceComponent();\n$invoice\n    -&gt;setConnection(Registry::getSharedConnection())\n    -&gt;calculate()\n;\n\n$invoice = new InvoiceComponent();\n$invoice\n    -&gt;setConnection(Registry::getNewConnection())\n    -&gt;calculate()\n;\n</code></pre> <p>In the above example we changed the <code>Registry</code> class, exposing <code>getNewConnection</code> which creates a brand new database connection. It also exposes the <code>getSharedConnection</code> which will store the connection internally and reuse it for any other component that requires it.</p> <p>Injecting dependencies to our components solves the issues outlined above. Passing dependencies as arguments instead of creating them internally in methods makes our code more maintainable and decoupled. However, in the long term, this form of dependency injection has some disadvantages. If for instance the component has many dependencies, we will need to create multiple setter arguments to pass the dependencies or create a constructor that will be used to pass all the dependencies required as arguments. We would also need to create those dependencies before using the component. This makes our code not as maintainable as we would like:</p> <pre><code>&lt;?php\n\n$connection = new Connection();\n$fileSystem = new FileSystem();\n$filter     = new Filter();\n$selector   = new Selector();\n$session    = new Session();\n\n$invoice =  new InvoiceComponent(\n    $connection, \n    $session, \n    $fileSystem, \n    $filter, \n    $selector\n);\n\n$invoice\n    -&gt;setConnection($connection)\n    -&gt;setFileSystem($fileSystem)\n    -&gt;setFilter($filter)\n    -&gt;setSelector($selector)\n    -&gt;setSession($session)\n;\n</code></pre> <p>The problem of maintainability arises though here. If we have to create this object in many parts of the application, we will need to perform the same initialization, injecting all the dependencies. If in the future we need to change any of our components to require additional dependencies we have to go through all the areas that we have used this component or others to adjust our code. To solve this issue, we will use the global registry class to create the component. However, this approach adds one more layer of abstraction before creating the object:</p> <pre><code>&lt;?php\n\nclass InvoiceComponent\n{\n    private $connection;\n    private $fileSystem;\n    private $filter;\n    private $selector;\n    private $session;\n\n    public function __construct(\n        Connection $connection,\n        FileSystem $fileSystem,\n        Filter $filter,\n        Selector $selector,\n        Session $session\n\n    ) {\n        $this-&gt;connection = $connection;\n        $this-&gt;fileSystem = $fileSystem;\n        $this-&gt;filter     = $filter;\n        $this-&gt;selector   = $selector;\n        $this-&gt;session    = $session;\n    }\n\n    public static function factory()\n    {\n        $connection = new Connection();\n        $fileSystem = new FileSystem();\n        $filter     = new Filter();\n        $selector   = new Selector();\n        $session    = new Session();\n\n        return new self(\n            $connection, \n            $fileSystem, \n            $filter, \n            $selector,\n            $session \n        );\n    }\n}\n</code></pre> <p>We are now back where we started, instantiating dependencies within the component. To solve this issue we will use a container that can store all of our dependencies. This is a practical and elegant way. The container will act as the global registry that we investigated earlier. Using this container as a bridge to retrieve any dependencies, allows us to reduce the complexity of our component:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Mysql;\nuse Phalcon\\Di;\nuse Phalcon\\Di\\DiInterface;\n\nclass InvoiceComponent\n{\n    protected $container;\n\n    public function __construct(\n        DiInterface $container\n    ) {\n        $this-&gt;container = $container;\n    }\n\n    public function calculate()\n    {\n        $connection = $this\n            -&gt;container\n            -&gt;get('db')\n        ;\n    }\n\n    public function view($id)\n    {\n        $filter = $this\n            -&gt;container\n            -&gt;get('filter')\n        ;\n\n        $id = $filter-&gt;sanitize($id, null, 'int');\n\n        $connection = $this\n            -&gt;container\n            -&gt;getShared('db')\n        ;\n    }\n}\n\n$container = new Di();\n$container-&gt;set(\n    'db',\n    function () {\n        return new Mysql(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'tutorial',\n            ]\n        );\n    }\n);\n\n$container-&gt;set(\n    'filter',\n    function () {\n        return new Filter();\n    }\n);\n\n$container-&gt;set(\n    'session',\n    function () {\n        return new Session();\n    }\n);\n\n$invoice =  new InvoiceComponent($container);\n$invoice-&gt;calculate();\n</code></pre> <p>The component now can simply access the dependencies it requires when it needs them. If a dependency is not required, it will not be initialized ensuring minimum usage of memory. Our component is now highly decoupled. For instance, if we change the database connection in any way, it will not affect the component, while as far as maintenance is concerned, we only need to change the code in one place.</p> <p>Phalcon\\Di is a component implementing Dependency Injection and a Service Locator. Since Phalcon is highly decoupled, Phalcon\\Di is essential to integrate the different components of the framework. The developer can also use this component to inject dependencies and manage global instances of the different classes used in the application. It also implements the Inversion of Control pattern. Because of this, the objects do not receive their dependencies using setters or constructors, but requesting a service dependency injector. This reduces the overall complexity since there is only one way to get the required dependencies within a component.</p> <p>Additionally, this pattern increases testability in the code, thus making it less prone to errors.</p>"},{"location":"di/#methods","title":"Methods","text":"<p><pre><code>public function __call(\n    string $method, \n    array $arguments = []\n): mixed | null\n</code></pre> Magic method to get or set services using setters/getters</p> <p><pre><code>public function attempt(\n    string $name, \n    mixed definition, \n    bool shared = false\n): ServiceInterface | bool\n</code></pre> Attempts to register a service in the services container. Only is successful if a service hasn't been registered previously with the same name</p> <p><pre><code>public function get(\n    string $name, \n    mixed parameters = null\n): mixed\n</code></pre> Resolves the service based on its configuration</p> <p><pre><code>public static function getDefault(): DiInterface | null\n</code></pre> Return the latest DI created</p> <p><pre><code>public function getInternalEventsManager(): ManagerInterface\n</code></pre> Return the internal Events Manager</p> <p><pre><code>public function getRaw(string $name): mixed\n</code></pre> Returns a service definition without resolving</p> <p><pre><code>public function getService(string $name): ServiceInterface\n</code></pre> Returns a <code>Phalcon\\Di\\Service</code> instance</p> <p><pre><code>public function getServices(): ServiceInterface[]\n</code></pre> Return the services registered in the DI</p> <p><pre><code>public function getShared( \n    string $name, \n    mixed parameters = null\n): mixed\n</code></pre> Returns a shared service. The service is first resolved, then the resolved service is stored in the DI. Subsequent requests for this service will return the same instance</p> <p><pre><code>public function loadFromPhp(string $filePath)\n</code></pre> Loads services from a php config file.</p> <pre><code>// /app/config/services.php\nreturn [\n     'myComponent' =&gt; [\n         'className' =&gt; '\\Acme\\Components\\MyComponent',\n         'shared'    =&gt; true,\n     ],\n     'group'       =&gt; [\n         'className' =&gt; '\\Acme\\Group',\n         'arguments' =&gt; [\n             [\n                 'type'    =&gt; 'service',\n                 'service' =&gt; 'myComponent',\n             ],\n         ],\n     ],\n     'user'        =&gt; [\n         'className' =&gt; '\\Acme\\User',\n     ],\n];\n\n$container-&gt;loadFromPhp(\"/app/config/services.php\");\n</code></pre> <p><pre><code>public function loadFromYaml(\n    string $filePath, \n    array $callbacks = null\n)\n</code></pre> Loads services from a yaml file.</p> <pre><code>// /app/config/services.yml\nmyComponent:\n    className: \\Acme\\Components\\MyComponent\n    shared: true\n\ngroup:\n    className: \\Acme\\Group\n    arguments:\n        - type: service\n          name: myComponent\n\nuser:\n   className: \\Acme\\User\n\n\n$container-&gt;loadFromYaml(\n    \"/app/config/services.yaml\",\n    [\n        \"!approot\" =&gt; function ($value) {\n            return dirname(__DIR__) . $value;\n        }\n    ]\n);\n</code></pre> <p><pre><code>public function has(string $name): bool\n</code></pre> Check whether the DI contains a service by a name</p> <p><pre><code>public function offsetGet(mixed $name): mixed\n</code></pre> Gets a shared service using the array syntax</p> <pre><code>var_dump($container[\"request\"]);\n</code></pre> <p><pre><code>public function offsetExists(mixed $name): bool\n</code></pre> Check if a service is registered using the array syntax</p> <p><pre><code>public function offsetSet(mixed $name, mixed $definition)\n</code></pre> Allows to register a shared service using the array syntax</p> <pre><code>$container[\"request\"] = new \\Phalcon\\Http\\Request();\n</code></pre> <p><pre><code>public function offsetUnset(mixed $name)\n</code></pre> Removes a service from the services container using the array syntax</p> <p><pre><code>public function register(ServiceProviderInterface $provider)\n</code></pre> Registers a service provider.</p> <pre><code>use Phalcon\\Di\\DiInterface;\nuse Phalcon\\Di\\ServiceProviderInterface;\n\nclass SomeServiceProvider implements ServiceProviderInterface\n{\n    public function register(DiInterface $container)\n    {\n        $container-&gt;setShared(\n            'service',\n            function () {\n                // ...\n            }\n        );\n    }\n}\n</code></pre> <p><pre><code>public function remove(string $name)\n</code></pre> Removes a service in the services container. It also removes any shared instance created for the service</p> <p><pre><code>public static function reset()\n</code></pre> Resets the internal default DI</p> <p><pre><code>public function set(\n    string $name, \n    mixed $definition, \n    bool $shared = false\n): ServiceInterface\n</code></pre> Registers a service in the services container</p> <pre><code>public static function setDefault(&lt;DiInterface&gt; container)\n* Set a default dependency injection container to be obtained into static\n* methods\n</code></pre> <p><pre><code>public function setInternalEventsManager(\n    ManagerInterface $eventsManager\n)\n</code></pre> Sets the internal event manager</p> <p><pre><code>public function setService(\n    string $name, \n    ServiceInterface $rawDefinition\n): ServiceInterface\n</code></pre> Sets a service using a raw Phalcon\\Di\\Service definition</p> <p><pre><code>public function setShared(\n    string $name, \n    mixed $definition\n): ServiceInterface\n</code></pre> Registers an always shared service in the services container</p>"},{"location":"di/#registering-services","title":"Registering Services","text":"<p>The framework itself or the developer can register services. When a component A requires component B (or an instance of its class) to operate, it can request component B from the container, rather than creating a new instance component B.</p> <p>This approach offers the following advantages: * We can easily replace a component with one created by ourselves or a third party. * We have full control of the object initialization, allowing us to set these objects as needed before delivering them to components. * We can get global instances of components in a structured and unified way.</p> <p>Services can be registered using several types of definitions. Below we explore the different ways that services can be registered:</p>"},{"location":"di/#string","title":"String","text":"<p>This type expects the name of a valid class, returning an object of the specified class, if the class is not loaded it will be instantiated using an auto-loader. This type of definition does not allow to specify arguments for the class constructor or parameters:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$container-&gt;set(\n    'request',\n    Request::class\n);\n</code></pre>"},{"location":"di/#class-instances","title":"Class Instances","text":"<p>This type expects an object. Due to the fact that object does not need to be resolved as it is already an object, one could say that it is not really a dependency injection, however it is useful if you want to force the returned dependency to always be the same object/value:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$container-&gt;set(\n    'request',\n    new Request()\n);\n</code></pre>"},{"location":"di/#closures","title":"Closures","text":"<p>This method offers greater freedom to build the dependency as desired, however, it is difficult to change some of the parameters externally without having to completely change the definition of dependency:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n$container-&gt;set(\n    'db',\n    function () {\n        return new Mysql(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'tutorial',\n            ]\n        );\n    }\n);\n</code></pre> <p>Some of the limitations can be overcome by passing additional variables to the closure's environment:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n$config = new Config(\n    [\n        'host'     =&gt; 'localhost',\n        'username' =&gt; 'user',\n        'password' =&gt; 'pass',\n        'dbname'   =&gt; 'tutorial',\n    ]\n);\n\n$container-&gt;set(\n    'db',\n    function () use ($config) {\n        return new Mysql(\n            [\n                'host'     =&gt; $config-&gt;host,\n                'username' =&gt; $config-&gt;username,\n                'password' =&gt; $config-&gt;password,\n                'dbname'   =&gt; $config-&gt;name,\n            ]\n        );\n    }\n);\n</code></pre> <p>You can also access other DI services using the <code>get()</code> method:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n$container-&gt;set(\n    'config',\n    function () {\n        return new Config(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'user',\n                'password' =&gt; 'pass',\n                'dbname'   =&gt; 'tutorial',\n            ]\n        );\n    }\n);\n\n$container-&gt;set(\n    'db',\n    function () {\n        $config = $this-&gt;get('config');\n\n        return new Mysql(\n            [\n                'host'     =&gt; $config-&gt;host,\n                'username' =&gt; $config-&gt;username,\n                'password' =&gt; $config-&gt;password,\n                'dbname'   =&gt; $config-&gt;name,\n            ]\n        );\n    }\n);\n</code></pre> <p>NOTE</p> <p><code>$this</code> can be used inside a closure</p>"},{"location":"di/#complex-registration","title":"Complex Registration","text":"<p>If it is required to change the definition of a service without instantiating/resolving the service, then, we need to define the services using the array syntax. Define a service using an array definition can be a little more verbose:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Annotations\\Adapter\\Apcu;\n\n$container-&gt;set(\n    'annotations',\n    [\n        'className' =&gt; Apcu::class,\n        'arguments' =&gt; [\n            [\n                'type'  =&gt; 'parameter',\n                'name'  =&gt; 'prefix',\n                'value' =&gt; 'my-prefix',\n            ],\n            [\n                'type'  =&gt; 'parameter',\n                'name'  =&gt; 'lifetime',\n                'value' =&gt; 3600,\n            ],\n        ],\n    ]\n);\n\n\n$container-&gt;set(\n    'annotations',\n    function () {\n        return new Apcu(\n            [\n                'prefix'   =&gt; 'my-prefix',\n                'lifetime' =&gt; 3600,\n            ]\n        );\n    }\n);\n</code></pre> <p>Both service registrations above produce the same result. The array definition however, allows you to change the service parameters if you need to:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Annotations\\Adapter\\Memory;\n\n$container\n    -&gt;getService('annotations')\n    -&gt;setClassName(Memory::class)\n;\n\n$container\n    -&gt;getService('annotations')\n    -&gt;setParameter(\n        1,\n        [\n            'type'  =&gt; 'parameter',\n            'name'  =&gt; 'lifetime',\n            'value' =&gt; 7200,\n        ]\n    );\n</code></pre>"},{"location":"di/#injections","title":"Injections","text":"<p>In addition by using the array syntax you can use three types of dependency injection:</p>"},{"location":"di/#constructor-injection","title":"Constructor Injection","text":"<p>This injection type passes the dependencies/arguments to the class constructor. Let's pretend we have the following component:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Http;\n\nuse Phalcon\\Http\\Response;\n\nclass Responder\n{\n    /**\n     * @var Response\n     */\n    protected $response;\n\n    /**\n     * @var string\n     */\n    protected $contentType;\n\n    public function __construct(Response $response, string $contentType)\n    {\n        $this-&gt;response    = $response;\n        $this-&gt;contentType = $contentType;\n    }\n}\n</code></pre> <p>The service can be registered as follows:</p> <pre><code>&lt;?php\n\nuse MyApp\\Http\\Responder;\nuse Phalcon\\Http\\Response;\n\n$container-&gt;set(\n    'response',\n    [\n        'className' =&gt; Response::class\n    ]\n);\n\n$container-&gt;set(\n    'my-responder',\n    [\n        'className' =&gt; Responder::class,\n        'arguments' =&gt; [\n            [\n                'type' =&gt; 'service',\n                'name' =&gt; 'response',\n            ],\n            [\n                'type'  =&gt; 'parameter',\n                'value' =&gt; 'application/json',\n            ],\n        ]\n    ]\n);\n</code></pre> <p>The service <code>response</code> (Phalcon\\Http\\Response is resolved to be passed as the first argument of the constructor, while the second is a <code>string</code> value that is passed as it is.</p>"},{"location":"di/#setter-injection","title":"Setter Injection","text":"<p>Classes may have setters to inject optional dependencies, our previous class can be changed to accept the dependencies with setters:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Http;\n\nuse Phalcon\\Http\\Response;\n\nclass Responder\n{\n    /**\n     * @var Response\n     */\n    protected $response;\n\n    /**\n     * @var string\n     */\n    protected $contentType;\n\n    public function setResponse(Response $response)\n    {\n        $this-&gt;response = $response;\n    }\n\n    public function setContentType($contentType)\n    {\n        $this-&gt;contentType = $contentType;\n    }\n}\n</code></pre> <p>The above class can be registered as a service using the getter and setter:</p> <pre><code>&lt;?php\n\nuse MyApp\\Http\\Responder;\nuse Phalcon\\Http\\Response;\n\n$container-&gt;set(\n    'response',\n    [\n        'className' =&gt; Response::class,\n    ]\n);\n\n$container-&gt;set(\n    'my-responder',\n    [\n        'className' =&gt; Responder::class,\n        'calls'     =&gt; [\n            [\n                'method'    =&gt; 'setResponse',\n                'arguments' =&gt; [\n                    [\n                        'type' =&gt; 'service',\n                        'name' =&gt; 'response',\n                    ]\n                ]\n            ],\n            [\n                'method'    =&gt; 'setContentType',\n                'arguments' =&gt; [\n                    [\n                        'type'  =&gt; 'parameter',\n                        'value' =&gt; 'application/json',\n                    ]\n                ]\n            ]\n        ]\n    ]\n);\n</code></pre>"},{"location":"di/#properties-injection","title":"Properties Injection","text":"<p>A less common strategy is to inject dependencies or parameters directly into public attributes of the class:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Http;\n\nuse Phalcon\\Http\\Response;\n\nclass Responder\n{\n    /**\n     * @var Response\n     */\n    public $response;\n\n    /**\n     * @var string\n     */\n    public $contentType;\n}\n</code></pre> <p>A service with properties injection can be registered as follows:</p> <pre><code>&lt;?php\n\nuse MyApp\\Http\\Responder;\nuse Phalcon\\Http\\Response;\n\n$container-&gt;set(\n    'response',\n    [\n        'className' =&gt; Response::class,\n    ]\n);\n\n$container-&gt;set(\n    'my-responder',\n    [\n        'className'  =&gt; Responder::class,\n        'properties' =&gt; [\n            [\n                'name'  =&gt; 'response',\n                'value' =&gt; [\n                    'type' =&gt; 'service',\n                    'name' =&gt; 'response',\n                ],\n            ],\n            [\n                'name'  =&gt; 'contentType',\n                'value' =&gt; [\n                    'type'  =&gt; 'parameter',\n                    'value' =&gt; 'application/json',\n                ],\n            ]\n        ]\n    ]\n);\n</code></pre> <p>Supported parameter types include the following:</p> Type Description Example <code>instance</code> Represents an object that must be built dynamically <code>['type' =&gt; 'instance', 'className' =&gt; \\DateTime::class, 'arguments' =&gt; ['now']]</code> <code>parameter</code> Represents a literal value to be passed as parameter <code>['type' =&gt; 'parameter', 'value' =&gt; 1234]</code> <code>service</code> Represents another service in the service container <code>['type' =&gt; 'service', 'name' =&gt; 'request']</code> <p>Resolving a service whose definition is complex may be slightly slower than simple definitions seen previously. However, these provide a more robust approach to define and inject services. Mixing different types of definitions is allowed, and you can decide which way is the most appropriate for you to register the services according to the application needs.</p>"},{"location":"di/#array-syntax","title":"Array Syntax","text":"<p>The array syntax is also available to register services:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Http\\Request;\n\n$container = new Di();\n\n$container['request'] = Request::class;\n\n$container['request'] = function () {\n    return new Request();\n};\n\n$container['request'] = new Request();\n\n$container['request'] = [\n    'className' =&gt; Request::class,\n];\n</code></pre> <p>In the examples above, when the framework needs to access the request data, it will ask for the service identified as <code>request</code> in the container. The container in turn will return an instance of the required service. The component can be easily replaced with a different class if a need arises.</p> <p>As shown in the above examples, each of the ways used to set/register a service has advantages and disadvantages. It is up to the developer and the particular requirements that will designate which one is used. Setting a service by a string is simple, but lacks flexibility. Setting services using an array offers a lot more flexibility, but makes the code more complicated. The lambda function is a good balance between the two, but could lead to more maintenance than one would expect.</p> <p>NOTE</p> <p>Phalcon\\Di offers lazy loading for every service it stores. Unless the developer chooses to instantiate an object directly and store it in the container, any object stored in it (via array, string, etc.) will be lazy loaded i.e. instantiated only when requested.</p>"},{"location":"di/#load-from-config","title":"Load From Config","text":"<p>YAML</p> <p>This feature will load services by parsing a YAML file:</p> <pre><code>; /app/config/services.yml\nconfig:\n  className: \\Phalcon\\Config\n  shared: true\n</code></pre> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\n\n$container = new Di();\n$container-&gt;loadFromYaml('services.yml');\n$container-&gt;get('/app/config/services.yml');\n</code></pre> <p>NOTE</p> <p>This approach requires that the module Yaml be installed. Please refer to this document for more information.</p> <p>PHP</p> <p>You can also load services using a PHP array:</p> <pre><code>// /app/config/services.php\n\nuse Phalcon\\Config;\n\nreturn [\n    'config' =&gt; [\n        'className' =&gt; Config::class,\n        'shared'    =&gt; true,\n    ],\n];\n</code></pre> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\n\n$container = new Di();\n$container-&gt;loadFromPhp('/app/config/services.php');\n$container-&gt;get('config');\n</code></pre>"},{"location":"di/#resolving-services","title":"Resolving Services","text":"<p>Obtaining a service from the container is a matter of simply calling the 'get' method. A new instance of the service will be returned:</p> <pre><code>$request = $container-&gt;get('request');\n</code></pre> <p>Or by calling through the magic method:</p> <pre><code>$request = $container-&gt;getRequest();\n</code></pre> <p>Or using the array-access syntax:</p> <pre><code>$request = $container['request'];\n</code></pre> <p>Arguments can be passed to the constructor by adding an array parameter to the method 'get':</p> <pre><code>&lt;?php\n\nuse Phalcon\\Annotations\\Adapter\\Stream;\n\n$annotations = $container-&gt;get(\n    Stream::class,\n    [\n        ['annotationsDir' =&gt; 'storage/cache/annotations'],\n    ]\n);\n</code></pre>"},{"location":"di/#events","title":"Events","text":"<p>Phalcon\\Di is able to send events to an EventsManager if it is present. Events are triggered using the type <code>di</code>.</p> Event Name Triggered <code>afterServiceResolve</code> Triggered after resolve service. Listeners receive the service name, instance, and the parameters passed to it. <code>beforeServiceResolve</code> Triggered before resolve service. Listeners receive the service name and the parameters passed to it."},{"location":"di/#shared-services","title":"Shared Services","text":"<p>Services can be registered as <code>shared</code> services this means that they always will act as [singletons][singletons]. Once the service is resolved for the first time the same instance of it is returned every time the service is retrieved from the container:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\n\n$container-&gt;setShared(\n    'session',\n    function () {\n        $session = new Manager();\n        $files = new Stream(\n            [\n                'savePath' =&gt; '/tmp',\n            ]\n        );\n        $session-&gt;setAdapter($files);\n        $session-&gt;start();\n\n        return $session;\n    }\n);\n\n$session = $container-&gt;get('session');\n\n$session = $container-&gt;getSession();\n</code></pre> <p>The first call to <code>get</code> in the container resolves the service and returns the object back. The subsequent call to <code>getSession</code> will return the same object.</p> <p>An alternative way to register shared services is to pass <code>true</code> as third parameter of <code>set</code>:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\n\n$container-&gt;set(\n    'session',\n    function () {\n        $session = new Manager();\n        $files = new Stream(\n            [\n                'savePath' =&gt; '/tmp',\n            ]\n        );\n        $session-&gt;setAdapter($files);\n        $session-&gt;start();\n\n        return $session;\n    },\n    true\n);\n\n$session = $container-&gt;get('session');\n\n$session = $container-&gt;getSession();\n</code></pre> <p>NOTE</p> <p>If a service is not registered as shared and you want to ensure that a shared instance will be accessed every time the service is retrieved from the DI, you can use the <code>getShared</code> method</p> <pre><code>$request = $container-&gt;getShared('request');\n</code></pre>"},{"location":"di/#manipulating-services","title":"Manipulating Services","text":"<p>Once a service is registered in the service container, you can retrieve it to manipulate it individually:</p> <pre><code>    &lt;?php\n\n    use Phalcon\\Http\\Request;\n\n    // Register the 'request' service\n    $container-&gt;set('request', 'Phalcon\\Http\\Request');\n\n    // Get the service\n    $requestService = $container-&gt;getService('request');\n\n    // Change its definition\n    $requestService-&gt;setDefinition(\n        function () {\n            return new Request();\n        }\n    );\n\n    // Change it to shared\n    $requestService-&gt;setShared(true);\n\n    // Resolve the service (return a Phalcon\\Http\\Request instance)\n    $request = $requestService-&gt;resolve();\n</code></pre>"},{"location":"di/#instantiating-classes","title":"Instantiating Classes","text":"<p>When you request a service from the container, if it cannot be found by using the same name, it will try to load a class with the same name. This behavior allows you to replace any service with another, by simply registering a service with the common name:</p> <p><pre><code>&lt;?php\n\n$container-&gt;set(\n    'IndexController',\n    function () {\n        return new Component();\n    },\n    true\n);\n\n$container-&gt;set(\n    'IndexController',\n    function () {\n        return new AnotherComponent();\n    }\n);\n\n$component = $container-&gt;get('IndexController');\n</code></pre> In the above example we are replacing the <code>IndexController</code> with another component of our choosing.  Also you can adjust your code to always instantiate your classes using the service container, even if they are not registered as services. The container will fall back to the autoloader you have defined to load the class itself. By using this technique, you can replace any class in the future by implementing a different definition for it.</p>"},{"location":"di/#automatic-injecting","title":"Automatic Injecting","text":"<p>If a class or component requires the DI itself to locate services, the DI can automatically inject itself to the instances it creates. To take advantage of this, all you need is to implement the Phalcon\\Di\\InjectionAwareInterface in your classes:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\DiInterface;\nuse Phalcon\\Di\\InjectionAwareInterface;\n\nclass InvoiceComponent implements InjectionAwareInterface\n{\n    /**\n     * @var DiInterface\n     */\n    protected $container;\n\n    public function setDi(DiInterface $container)\n    {\n        $this-&gt;container = $container;\n    }\n\n    public function getDi(): DiInterface\n    {\n        return $this-&gt;container;\n    }\n}\n</code></pre> <p>Then once the service is resolved, the <code>$container</code> will be passed to <code>setDi()</code> automatically:</p> <pre><code>&lt;?php\n\n$container-&gt;set('inv-component', InvoiceComponent::class);\n\n$invoiceComponent = $container-&gt;get('inv-component');\n</code></pre> <p>NOTE</p> <p><code>$invoiceComponent-&gt;setDi($container)</code> is automatically called)</p> <p>For your convenience you can also extend the Phalcon\\Di\\AbstractInjectionAware class which contains the above code and exposes the protected <code>$container</code> property for you to use.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\DiInterface;\nuse Phalcon\\Di\\AbstractInjectionAware;\n\nclass InvoiceComponent extends AbstractInjectionAware\n{\n\n}\n</code></pre>"},{"location":"di/#organizing-services-in-files","title":"Organizing Services in Files","text":"<p>You can better organize your application by moving the service registration to individual files instead of register everything in the application's bootstrap:</p> <pre><code>&lt;?php\n\n$container-&gt;set(\n    'router',\n    function () {\n        return include '/app/config/routes.php';\n    }\n);\n</code></pre> <p>Then in the file (<code>'/app/config/routes.php'</code>) return the object resolved:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router();\n\n$router = new Router(false);\n\n$router-&gt;post('/login');\n\nreturn $router;\n</code></pre>"},{"location":"di/#static-access","title":"Static Access","text":"<p>The Phalcon\\Di offers the convenient <code>getDefault()</code> static method, which returns the latest container created. This allows you to access the container even from static classes:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\n\nclass InvoicesComponent\n{\n    public static function calculate()\n    {\n        $connection = Di::getDefault()-&gt;getDb();\n    }\n}\n</code></pre>"},{"location":"di/#service-providers","title":"Service Providers","text":"<p>Another method of registering services is by putting each service in its own file and registering all the services one after another with a simple loop. Each file will contain a class or <code>Provider</code> that implements the Phalcon\\Di\\ServiceProviderInterface. The reason you might want to do this is to have tiny files, each handling one service registration which will offer great flexibility, short code and finally the ability to add/remove services whenever you wish to, without having to sift through a large file such as your bootstap.</p> <p>Example</p> <p><code>app/config/providers.php</code> <pre><code>&lt;?php\n\nreturn [\n    MyApp\\Providers\\ConfigProvider::class,\n    MyApp\\Providers\\RegistryProvider::class,\n    MyApp\\Providers\\LoggerProvider::class,\n];    \n</code></pre></p> <p><code>app/library/Providers/ConfigProvider.php</code> <pre><code>&lt;?php\n\nnamespace MyApp\\Providers;\n\nuse Phalcon\\Config;\nuse Phalcon\\Di\\ServiceProviderInterface;\nuse Phalcon\\DiInterface;\n\nclass ConfigProvider implements ServiceProviderInterface\n{\n    /**\n     * @param DiInterface $container\n     */\n    public function register(DiInterface $container)\n    {\n        $container-&gt;setShared(\n            'config',\n            function () {\n                $data = require 'app/config/config.php';\n\n                return new Config($data);\n            }\n        );\n    }\n}\n</code></pre></p> <p><code>app/library/Providers/RegistryProvider.php</code> <pre><code>&lt;?php\n\nnamespace MyApp\\Providers;\n\nuse Phalcon\\Config;\nuse Phalcon\\Di\\ServiceProviderInterface;\nuse Phalcon\\DiInterface;\nuse Phalcon\\Registry;\nuse function microtime;\n\nclass RegistryProvider implements ServiceProviderInterface\n{\n    /**\n     * {@inheritdoc}\n     *\n     * @param DiInterface $container\n     */\n    public function register(DiInterface $container)\n    {\n        /** @var Config $config */\n        $config  = $container-&gt;getShared('config');\n        $devMode = $config-&gt;path('app.devMode', false);\n\n        $container-&gt;setShared(\n            'registry',\n            function () use ($devMode) {\n                $registry = new Registry();\n                $registry-&gt;offsetSet('devMode', $devMode);\n                $registry-&gt;offsetSet('execution', microtime(true));\n\n                return $registry;\n            }\n        );\n    }\n}\n</code></pre></p> <p><code>app/library/Providers/LoggerProvider.php</code>  ```php &lt;?php</p> <p>namespace MyApp\\Providers;</p> <p>use Phalcon\\Di\\ServiceProviderInterface; use Phalcon\\DiInterface; use Phalcon\\Logger; use Phalcon\\Logger\\Adapter\\Stream;</p> <p>class LoggerProvider implements ServiceProviderInterface {     use LoggerTrait;</p> <pre><code>/**\n * @param DiInterface $container\n *\n * @throws \\Exception\n */\npublic function register(DiInterface $container)\n{\n    $container-&gt;setShared(\n        'logger', \n        function () {\n            $adapter = new Stream('/storage/logs/main.log');\n\n            return new Logger(\n                'messages',\n                [\n                    'main' =&gt; $adapter,\n                ]\n            );\n        }\n    );\n}\n</code></pre> <p>}</p> <pre><code>Now we can register all the services with a simple loop:\n\n```php\n&lt;?php\n\nuse Phalcon\\Di;\n\n$services = include('app/config/providers.php');\n\n$container = new Di();\n\nforeach ($services as $service) {\n    $container-&gt;register(new $service());\n}\n</code></pre>"},{"location":"di/#factory-default","title":"Factory Default","text":"<p>For convenience to developers, the Phalcon\\Di\\FactoryDefault is available with several preset services for you. Nothing stops you from registering all the services your application requires one by one. However, you can use the Phalcon\\Di\\FactoryDefault, which contains a list of services ready to be used. The list of services registered allows you to have a container suitable for a full stack application.</p> <p>NOTE</p> <p>Since the services are always lazy loaded, instantiating the Phalcon\\Di\\FactoryDefault container will not consume more memory than a Phalcon\\Di one.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\n\n$container = new FactoryDefault();\n</code></pre> <p>The services registered in the Phalcon\\Di\\FactoryDefault are:</p> Name Object Shared Description <code>annotations</code> Phalcon\\Annotations\\Adapter\\Memory Yes Annotations parser <code>assets</code> Phalcon\\Assets\\Manager Yes Assets manager <code>crypt</code> Phalcon\\Crypt Yes Encrypt/Decrypt <code>cookies</code> Phalcon\\Http\\Response\\Cookies Yes HTTP Cookies manager <code>db</code> Phalcon\\Db Yes Database connection <code>dispatcher</code> Phalcon\\Mvc\\Dispatcher Yes Dispatcher <code>escaper</code> Phalcon\\Escaper Yes Escaper <code>eventsManager</code> Phalcon\\Events\\Manager Yes Events Manager <code>flash</code> Phalcon\\Flash\\Direct Yes Flash Messaging <code>flashSession</code> Phalcon\\Flash\\Session Yes Flash Session Messaging <code>filter</code> Phalcon\\Filter Yes Filtering / Sanitizing <code>modelsCache</code> Cache backend for models <code>modelsManager</code> Phalcon\\Mvc\\Model\\Manager Yes Models Management <code>modelsMetadata</code> Phalcon\\Mvc\\Model\\MetaData\\Memory No Models MetaData <code>request</code> Phalcon\\Http\\Request Yes HTTP Request <code>response</code> Phalcon\\Http\\Response Yes HTTP Response <code>router</code> Phalcon\\Mvc\\Router Yes Router <code>security</code> Phalcon\\Security Yes Security <code>session</code> Session Service <code>sessionBag</code> Phalcon\\Session\\Bag Yes Session Bag service <code>tag</code> Phalcon\\Tag Yes HTML Tag helpers <code>transactionManager</code> Phalcon\\Mvc\\Model\\Transaction\\Manager Yes Database Transaction Manager <code>url</code> Phalcon\\Url Yes URL Generation <p>The above names are used throughout the framework. For instance the <code>db</code> service is used within the <code>transactionManager</code> service. You can replace these components with the ones you prefer by just registering your component with the same name as the ones listed above.</p>"},{"location":"di/#exceptions","title":"Exceptions","text":"<p>Any exceptions thrown in the DI container will be either Phalcon\\Di\\Exception or Phalcon\\Di\\ServiceResolutionException. You can use this exception to selectively catch exceptions thrown only from this component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Di\\Exception;\n\ntry {\n    $container = new Di();\n    $component = $container-&gt;get('unknown-service');\n} catch (Exception $ex) {\n    echo $ex-&gt;getMessage();\n}\n</code></pre>"},{"location":"di/#custom","title":"Custom","text":"<p>The Phalcon\\Di\\DiInterface interface must be implemented to create your own DI replacing the one provided by Phalcon or extend the current one. You can also utilize the Phalcon\\Di\\ServiceInterface to create your own implementations of services and how they resolve in the DI container.</p>"},{"location":"dispatcher/","title":"Dispatcher Component","text":""},{"location":"dispatcher/#overview","title":"Overview","text":"<p>The Phalcon\\Mvc\\Dispatcher is the component responsible for instantiating controllers and executing the required actions on them in an MVC application. Dispatching is the process of taking the request object, extracting the module name, controller name, action name, and optional parameters contained in it, and then instantiating a controller and calling an action of that controller.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Mvc\\Dispatcher;\n\n$container  = new Di();\n$dispatcher = new Dispatcher();\n\n$dispatcher-&gt;setDI($container);\n\n$dispatcher-&gt;setControllerName(\"posts\");\n$dispatcher-&gt;setActionName(\"index\");\n$dispatcher-&gt;setParams([]);\n\n$controller = $dispatcher-&gt;dispatch();\n</code></pre>"},{"location":"dispatcher/#methods","title":"Methods","text":"<p><pre><code>public function callActionMethod(\n    mixed $handler, \n    string $actionMethod, \n    array $params = []\n)\n</code></pre> Calls an action method with a handler and parameters</p> <p><pre><code>public function dispatch(): object | bool\n</code></pre> Process the results of the router by calling into the appropriate controller action(s) including any routing data or injected parameters. Returns the dispatched handler class (the Controller for Mvc dispatching or a Task for CLI dispatching) or <code>false</code> if an exception occurred and the operation was stopped by returning <code>false</code> in the exception handler. Throws an Exception if any uncaught or unhandled exception occurs during the dispatcher process.</p> <p><pre><code>public function forward(\n    array $forward\n): void\n</code></pre> Forwards the execution flow to another controller/action.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Dispatcher;\nuse App\\Back\\Bootstrap as Back;\nuse App\\Front\\Bootstrap as Front;\n\n$modules = [\n    \"frontend\" =&gt; [\n        \"className\" =&gt; Front::class,\n        \"path\"      =&gt; __DIR__ . \"/app/Modules/Front/Bootstrap.php\",\n        \"metadata\"  =&gt; [\n            \"controllersNamespace\" =&gt; \"App\\Front\\Controllers\",\n        ],\n    ],\n    \"backend\" =&gt; [\n        \"className\" =&gt; Back::class,\n        \"path\"      =&gt; __DIR__ . \"/app/Modules/Back/Bootstrap.php\",\n        \"metadata\"  =&gt; [\n            \"controllersNamespace\" =&gt; \"App\\Back\\Controllers\",\n        ],\n    ],\n];\n\n$application-&gt;registerModules($modules);\n\n$eventsManager = $container-&gt;getShared(\"eventsManager\");\n\n$eventsManager-&gt;attach(\n    \"dispatch:beforeForward\",\n    function (\n        Event $event, \n        Dispatcher $dispatcher, \n        array $forward\n    ) use ($modules) {\n        $metadata = $modules[$forward[\"module\"]][\"metadata\"];\n\n        $dispatcher-&gt;setModuleName(\n            $forward[\"module\"]\n        );\n\n        $dispatcher-&gt;setNamespaceName(\n            $metadata[\"controllersNamespace\"]\n        );\n    }\n);\n\n// Forward\n$this-&gt;dispatcher-&gt;forward(\n    [\n        \"module\"     =&gt; \"backend\",\n        \"controller\" =&gt; \"posts\",\n        \"action\"     =&gt; \"index\",\n    ]\n);\n</code></pre> <p><pre><code>public function getActionName(): string\n</code></pre> Gets the latest dispatched action name</p> <p><pre><code>public function getActionSuffix(): string\n</code></pre> Gets the default action suffix</p> <p><pre><code>public function getActiveController(): ControllerInterface\n</code></pre> Returns the active controller in the dispatcher</p> <p><pre><code>public function getActiveMethod(): string\n</code></pre> Returns the current method to be/executed in the dispatcher</p> <p><pre><code>public function getBoundModels(): array\n</code></pre> Returns bound models from binder instance</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Dispatcher;\n\n/**\n * @property Dispatcher $dispatcher\n */\nclass InvoicesController extends Controller\n{\n    public function viewAction(Invoices $invoice)\n    {\n        $boundModels = $this\n            -&gt;dispatcher\n            -&gt;getBoundModels()\n        ;\n    }\n}\n</code></pre> <p><pre><code>public function getControllerClass(): string\n</code></pre> Possible controller class name that will be located to dispatch the request</p> <p><pre><code>public function getControllerName(): string\n</code></pre> Gets last dispatched controller name</p> <p><pre><code>public function getDefaultNamespace(): string\n</code></pre> Returns the default namespace</p> <p><pre><code>public function getHandlerClass(): string\n</code></pre> Possible class name that will be located to dispatch the request</p> <p><pre><code>public function getHandlerSuffix(): string\n</code></pre> Gets the default handler suffix</p> <p><pre><code>public function getLastController(): ControllerInterface\n</code></pre> Returns the latest dispatched controller</p> <p><pre><code>public function getModelBinder(): BinderInterface | null\n</code></pre> Gets the model binder</p> <p><pre><code>public function getModuleName(): string\n</code></pre> Gets the module where the controller class is</p> <p><pre><code>public function getNamespaceName(): string\n</code></pre> Gets a namespace to be prepended to the current handler name</p> <p><pre><code>public function getParam(\n    mixed $param, \n    string | array $filters = null, \n    mixed $defaultValue = null\n): mixed\n</code></pre> Gets a parameter by its name or numeric index</p> <p><pre><code>public function getParams(): array\n</code></pre> Gets action params</p> <p><pre><code>public function getPreviousActionName(): string\n</code></pre> Gets previous dispatched action name</p> <p><pre><code>public function getPreviousControllerName(): string\n</code></pre> Gets previous dispatched controller name</p> <p><pre><code>public function getPreviousNamespaceName(): string\n</code></pre> Gets previous dispatched namespace name</p> <p><pre><code>public function getReturnedValue(): mixed\n</code></pre> Returns value returned by the latest dispatched action</p> <p><pre><code>public function hasParam(\n    mixed $param\n): bool\n</code></pre> Check if a param exists</p> <p><pre><code>public function isFinished(): bool\n</code></pre> Checks if the dispatch loop is finished or has more pendent controllers/tasks to dispatch</p> <p><pre><code>public function setActionName(\n    string $actionName\n): void\n</code></pre> Sets the action name to be dispatched</p> <p><pre><code>public function setActionSuffix(\n    string $actionSuffix\n): void\n</code></pre> Sets the default action suffix</p> <p><pre><code>public function setControllerName(\n    string $controllerName\n)\n</code></pre> Sets the controller name to be dispatched</p> <p><pre><code>public function setControllerSuffix(\n    string $controllerSuffix\n)\n</code></pre> Sets the default controller suffix</p> <p><pre><code>public function setDefaultAction(\n    string $actionName\n): void\n</code></pre> Sets the default action name</p> <p><pre><code>public function setDefaultController(\n    string $controllerName\n)\n</code></pre> Sets the default controller name</p> <p><pre><code>public function setDefaultNamespace(\n    string $namespaceName\n): void\n</code></pre> Sets the default namespace</p> <p><pre><code>public function setHandlerSuffix(\n    string $handlerSuffix\n): void\n</code></pre> Sets the default suffix for the handler</p> <p><pre><code>public function setModelBinder(\n    BinderInterface $modelBinder, \n    mixed $cache = null\n): DispatcherInterface\n</code></pre> Enable model binding during dispatch</p> <pre><code>$container-&gt;set(\n    'dispatcher',\n    function() {\n        $dispatcher = new Dispatcher();\n\n        $dispatcher-&gt;setModelBinder(\n            new Binder(),\n            'cache'\n        );\n\n        return $dispatcher;\n    }\n);\n</code></pre> <p><pre><code>public function setModuleName(\n    string $moduleName\n): void\n</code></pre> Sets the module where the controller is (only informative)</p> <p><pre><code>public function setNamespaceName(\n    string $namespaceName\n): void\n</code></pre> Sets the namespace where the controller class is</p> <p><pre><code>public function setParam(\n    mixed $param, \n    mixed $value\n): void\n</code></pre> Set a param by its name or numeric index</p> <p><pre><code>public function setParams(\n    array $params\n): void\n</code></pre> Sets action params to be dispatched</p> <p><pre><code>public function setReturnedValue(\n    mixed $value\n): void\n</code></pre> Sets the latest returned value by an action manually</p> <p><pre><code>public function wasForwarded(): bool\n</code></pre> Check if the current executed action was forwarded by another one</p>"},{"location":"dispatcher/#dispatch-loop","title":"Dispatch Loop","text":"<p>This is an important process that has much to do with the MVC flow itself, especially with the controller part. The work occurs within the controller dispatcher. The controller files are read, loaded, and instantiated. Then the required actions are executed. If an action forwards the flow to another controller/action, the controller dispatcher starts again. To better illustrate this, the following example shows approximately the process performed within the Phalcon\\Mvc\\Dispatcher component.</p> <p><pre><code>&lt;?php\n\n$finished = false;\n\nwhile (true !== $finished) {\n    $finished = true;\n\n    $controllerClass = $controllerName . 'Controller';\n    $controller      = new $controllerClass();\n\n    call_user_func_array(\n        [\n            $controller,\n            $actionName . 'Action',\n        ],\n        $params\n    );\n\n    $finished = true;\n}\n</code></pre> In the code above, we are calculating the controller name, instantiate it and call the relevant action. After that we finish the loop. The example is very simplified and lacks validations, filters and additional checks, but it demonstrates the normal flow of operation within the dispatcher.</p>"},{"location":"dispatcher/#forwarding","title":"Forwarding","text":"<p>The dispatch loop allows you to forward the execution flow to another controller/action. This is very useful in situations when checking if the user has access to certain areas, and if not allowed be forwarded to other controllers and actions, thus allowing you to reuse code.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\Dispatcher;\n\n/**\n * @property Dispatcher $dispatcher\n */\nclass InvoicesController extends Controller\n{\n    public function saveAction($year, $postTitle)\n    {\n        // ... \n\n        $this-&gt;dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'invoices',\n                'action'     =&gt; 'list',\n            ]\n        );\n    }\n}\n</code></pre> <p>NOTE</p> <p>Keep in mind that performing a <code>forward</code> is not the same as making a HTTP redirect. Although they produce the same result, performing a <code>forward</code> will not reload the current page, while the HTTP redirect needs two requests to complete the process.</p> <p>Examples:</p> <p><pre><code>&lt;?php\n\n$this-&gt;dispatcher-&gt;forward(\n    [\n        'action' =&gt; 'search',\n    ]\n);\n</code></pre> Forward flow to another action in the current controller</p> <p><pre><code>&lt;?php\n\n$this-&gt;dispatcher-&gt;forward(\n    [\n        'action' =&gt; 'search',\n        'params' =&gt; [1, 2, 3],\n    ]\n);\n</code></pre> Forward flow to another action in the current controller, passing parameters</p> <p>A <code>forward</code> action accepts the following parameters:</p> Parameter Description <code>controller</code> A valid controller name to forward to. <code>action</code> A valid action name to forward to. <code>params</code> An array of parameters for the action. <code>namespace</code> A valid namespace name where the controller is part of."},{"location":"dispatcher/#parameters","title":"Parameters","text":""},{"location":"dispatcher/#preparing","title":"Preparing","text":"<p>By using events or hook points available by the Phalcon\\Mvc\\Dispatcher, you can easily adjust your application to accept any URL schema that suits your application. This is particularly useful when upgrading your application and want to transform some legacy URLs. For instance you might want your URLs to be:</p> <pre><code>https://domain.com/controller/key1/value1/key2/value\n</code></pre> <p>Since parameters are passed with the order that they are defined in the URL to actions, you can transform them to the desired schema:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Dispatcher;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager;\n\n$container-&gt;set(\n    'dispatcher',\n    function () {\n        $eventsManager = new Manager();\n\n        $eventsManager-&gt;attach(\n            'dispatch:beforeDispatchLoop',\n            function (Event $event, $dispatcher) {\n                $params    = $dispatcher-&gt;getParams();\n                $keyParams = [];\n\n                foreach ($params as $index =&gt; $value) {\n                    if ($index &amp; 1) {\n                        $key = $params[$index - 1];\n\n                        $keyParams[$key] = $value;\n                    }\n                }\n\n                $dispatcher-&gt;setParams($keyParams);\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n        $dispatcher-&gt;setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n</code></pre> <p>If the desired schema is: </p> <pre><code>https://example.com/controller/key1:value1/key2:value\n</code></pre> <p>you can use the following code:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Dispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\n\n$container-&gt;set(\n    'dispatcher',\n    function () {\n        $eventsManager = new Manager();\n\n        $eventsManager-&gt;attach(\n            'dispatch:beforeDispatchLoop',\n            function (Event $event, $dispatcher) {\n                $params    = $dispatcher-&gt;getParams();\n                $keyParams = [];\n\n                foreach ($params as $param) {\n                    $parts = explode(':', $param);\n                    $key   = $parts[0];\n                    $value = $parts[1];\n\n                    $keyParams[$key] = $value;\n                }\n\n                $dispatcher-&gt;setParams($keyParams);\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n        $dispatcher-&gt;setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n</code></pre>"},{"location":"dispatcher/#getting","title":"Getting","text":"<p>When a route provides named parameters you can receive them in a controller, a view or any other component that extends Phalcon\\Di\\Injectable</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\Dispatcher;\n\n/**\n * @property Dispatcher $dispatcher\n */\nclass InvoicesController extends Controller\n{\n    public function viewAction()\n    {\n        $invoiceId = $this\n            -&gt;dispatcher\n            -&gt;getParam('invoiceId', 'int')\n        ;\n        $filter = $this\n            -&gt;dispatcher\n            -&gt;getParam('filter', 'string')\n        ;\n\n        // ...\n    }\n}\n</code></pre> In the example above, we get the <code>invoiceId</code> as the first parameter passed and automatically sanitize it as an <code>integer</code>. The second parameter is the <code>filter</code> one, which is sanitized as a <code>string</code> </p>"},{"location":"dispatcher/#actions","title":"Actions","text":"<p>You can also define an arbitrary schema for actions <code>before</code> the dispatch loop is invoked.</p>"},{"location":"dispatcher/#camelize-names","title":"Camelize Names","text":"<p>If the original URL is</p> <pre><code>https://example.com/admin/invoices/show-unpaid\n</code></pre> <p>and for example you want to camelize <code>show-unpaid</code> to <code>ShowUnpaid</code>, the <code>beforeDispatchLoop</code> can be used to achieve that.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Text;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as Manager;\n\n$container-&gt;set(\n    'dispatcher',\n    function () {\n        $eventsManager = new Manager();\n\n        $eventsManager-&gt;attach(\n            'dispatch:beforeDispatchLoop',\n            function (Event $event, $dispatcher) {\n                $dispatcher-&gt;setActionName(\n                    Text::camelize(\n                        $dispatcher-&gt;getActionName()\n                    )\n                );\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n        $dispatcher-&gt;setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n</code></pre>"},{"location":"dispatcher/#filter-file-extensions","title":"Filter File Extensions","text":"<p>If the original URL always contains a <code>.php</code> extension:</p> <pre><code>https://example.com/admin/invoices/show-unpaid.php\nhttps://example.com/admin/invoices/index.php\n</code></pre> <p>You can remove it before dispatch the controller/action combination:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager;\n\n$container-&gt;set(\n    'dispatcher',\n    function () {\n        $eventsManager = new Manager();\n\n        $eventsManager-&gt;attach(\n            'dispatch:beforeDispatchLoop',\n            function (Event $event, $dispatcher) {\n                $action = $dispatcher-&gt;getActionName();\n                $action = preg_replace('/\\.php$/', '', $action);\n\n                $dispatcher-&gt;setActionName($action);\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n        $dispatcher-&gt;setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n</code></pre> <p>NOTE</p> <p>The code above can be used as is or adjusted to help with legacy URL transformations or other use cases where we need to manipulate the action name.</p>"},{"location":"dispatcher/#model-injection","title":"Model Injection","text":"<p>There are instances that you might want to inject automatically model instances that have been matched with the parameters passed in the URL. </p> <p>Our controller is:</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property View $view\n */\nclass InvoicesController extends Controller\n{\n    public function viewAction(Invoices $invoice)\n    {\n        $this-&gt;view-&gt;invoice = $invoice;\n    }\n}\n</code></pre> The <code>viewAction</code> receives an instance of the model <code>Invoices</code>. If you try to execute this method without any checks and manipulations, the call will fail. You can however inspect the passed parameters before the dispatch loop and manipulate the parameters accordingly.</p> <p><pre><code>&lt;?php\n\nuse \\Exception;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse \\ReflectionMethod;\n\n$container-&gt;set(\n    'dispatcher',\n    function () {\n        $eventsManager = new Manager();\n\n        $eventsManager-&gt;attach(\n            'dispatch:beforeDispatchLoop',\n            function (Event $event, $dispatcher) {\n                $controllerName = $dispatcher-&gt;getControllerClass();\n                $actionName     = $dispatcher-&gt;getActiveMethod();\n\n                try {\n                    $reflection = new ReflectionMethod(\n                        $controllerName, \n                        $actionName\n                    );\n                    $parameters = $reflection-&gt;getParameters();\n\n                    foreach ($parameters as $parameter) {\n                        $className = $parameter-&gt;getClass()-&gt;name;\n\n                        if (is_subclass_of($className, Model::class)) {\n                            $model = $className::findFirstById(\n                                $dispatcher-&gt;getParams()[0]\n                            );\n\n                            $dispatcher-&gt;setParams(\n                                [\n                                    $model,\n                                ]\n                            );\n                        }\n                    }\n                } catch (Exception $e) {\n                }\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n        $dispatcher-&gt;setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n</code></pre> In the example above, we get the controller class and active method from the dispatcher. Looping through the parameters, we use reflection to check the method to be executed. We calculate the model name and also check if the parameter is expecting a model name. If yes, we override the parameter by passing the model found. If an exception was thrown, we can handle that accordingly, for instance if the class or action do not exist or the record has not been found.</p> <p>The above example has been simplified. You can adjust it according to your needs and inject any kind of dependency or model to an action before it gets executed.</p> <p>The dispatcher also comes with an option to handle this internally for all models passed into a controller action by using the Phalcon\\Mvc\\Model\\Binder object.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\Model\\Binder;\n\n$dispatcher = new Dispatcher();\n\n$dispatcher-&gt;setModelBinder(\n    new Binder()\n);\n\nreturn $dispatcher;\n</code></pre> <p>NOTE</p> <p>The Phalcon\\Mvc\\Model\\Binder component uses PHP's Reflection API internally, which consumes additional processing cycles. For that reason, it has the ability to use a <code>cache</code> instance or a cache service name. To use this feature, you can pass the cache service name or instance as the second argument in the <code>setModelBinder()</code> method or by just passing the cache instance in the <code>Binder</code> constructor.</p> <p>Also, by using the Phalcon\\Mvc\\Model\\Binder\\BindableInterface in controllers, you can define the models binding in base controllers.</p> <p>In the example below, we have a base controller <code>CrudController</code> which <code>InvoicesController</code> extends from. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property View $view\n */\nclass CrudController extends Controller\n{\n    public function viewAction(Model $model)\n    {\n        $this-&gt;view-&gt;model = $model;\n    }\n}\n</code></pre> <p>In the <code>InvoicesController</code> we will define which model the controller is associated with. This is done by implementing the Phalcon\\Mvc\\Model\\Binder\\BindableInterface, which will make the <code>getModelName()</code> method available. This method is used to return the model name. It can return string with just one model name or an associative array with the key is the parameter name.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model\\Binder\\BindableInterface;\n\nclass InvoicesController extends CrudController implements BindableInterface\n{\n    public static function getModelName()\n    {\n        return Invoices::class;\n    }\n}\n</code></pre> <p>By declaring the model associated with the <code>InvoicesController</code> the binder can check the controller for the <code>getModelName()</code> method before passing the defined model into the parent <code>view</code> action.</p> <p>If your project structure does not use any base controllers, you can of course still bind the model directly into the controller action:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property View $view\n */\nclass InvoicesController extends Controller\n{\n    public function showAction(Invoices $invoice)\n    {\n        $this-&gt;view-&gt;invoice = $invoice;\n    }\n}\n</code></pre> <p>NOTE</p> <p>Currently, the binder will only use the models primary key to perform a <code>findFirst()</code> on. An example route for the above would be <code>/posts/show/{1}</code></p>"},{"location":"dispatcher/#not-found-404","title":"Not-Found (404)","text":"<p>If an Events Manager has been defined, you can use it to intercept exceptions that are thrown when the controller/action pair are not found.</p> <pre><code>&lt;?php\n\nuse Exception;\nuse Phalcon\\Dispatcher;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Mvc\\Dispatcher\\Exception as DispatchException;\n\n$container-&gt;setShared(\n    'dispatcher',\n    function () {\n        $eventsManager = new Manager();\n\n        $eventsManager-&gt;attach(\n            'dispatch:beforeException',\n            function (\n                Event $event, \n                $dispatcher, \n                Exception $exception\n            ) {\n                // 404\n                if ($exception instanceof DispatchException) {\n                    $dispatcher-&gt;forward(\n                        [\n                            'controller' =&gt; 'index',\n                            'action'     =&gt; 'fourOhFour',\n                        ]\n                    );\n\n                    return false;\n                }\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n        $dispatcher-&gt;setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n</code></pre> <p>or use an alternative syntax checking for the exception.</p> <pre><code>&lt;?php\n\nuse Exception;\nuse Phalcon\\Dispatcher\\Exception as DispatcherException;\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager;\n\n$container-&gt;setShared(\n    'dispatcher',\n    function () {\n        $eventsManager = new Manager();\n\n        $eventsManager-&gt;attach(\n            'dispatch:beforeException',\n            function (\n                Event $event, \n                $dispatcher, \n                Exception $exception\n            ) {\n                switch ($exception-&gt;getCode()) {\n                    case DispatcherException::EXCEPTION_HANDLER_NOT_FOUND:\n                    case DispatcherException::EXCEPTION_ACTION_NOT_FOUND:\n                        // 404\n                        $dispatcher-&gt;forward(\n                            [\n                                'controller' =&gt; 'index',\n                                'action'     =&gt; 'fourOhFour',\n                            ]\n                        );\n\n                        return false;\n                }\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n        $dispatcher-&gt;setEventsManager($eventsManager);\n\n        return $dispatcher;\n    }\n);\n</code></pre> <p>We can move this method in a plugin class:</p> <pre><code>&lt;?php\n\nuse Exception;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Mvc\\Dispatcher\\Exception as DispatchException;\n\nclass ExceptionsPlugin\n{\n    public function beforeException(\n        Event $event, \n        Dispatcher $dispatcher, \n        Exception $exception\n    ) {\n        $action = 'fiveOhThree';\n\n        if ($exception instanceof DispatchException) {\n            $action = 'fourOhFour';\n        }\n\n        $dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'index',\n                'action'     =&gt; $action,\n            ]\n        );\n\n        return false;\n    }\n}\n</code></pre> <p>NOTE</p> <p>Only exceptions produced by the dispatcher and exceptions produced in the executed action notify the <code>beforeException</code> events. Exceptions produced in listeners or controller events are redirected to the latest try/catch.</p>"},{"location":"dispatcher/#events","title":"Events","text":"<p>Phalcon\\Mvc\\Dispatcher is able to send events to an Manager if it is present. Events are triggered using the type <code>dispatch</code>. Some events when returning boolean <code>false</code> could stop the active operation. The following events are supported:</p> Event Name Triggered Can stop <code>afterBinding</code> After models are bound but before executing route Yes <code>afterDispatch</code> After executing the controller/action method. Yes <code>afterDispatchLoop</code> After exiting the dispatch loop No <code>afterExecuteRoute</code> After executing the controller/action method. No <code>afterInitialize</code> Allow to globally initialize the controller in the request No <code>beforeDispatch</code> After entering in the dispatch loop. The Dispatcher only knows the information passed by the Router. Yes <code>beforeDispatchLoop</code> Before entering in the dispatch loop. The Dispatcher only knows the information passed by the Router. Yes <code>beforeException</code> Before the dispatcher throws any exception Yes <code>beforeExecuteRoute</code> Before executing the controller/action method. The Dispatcher has initialized the controller and knows if the action exist. Yes <code>beforeForward</code> Before forwarding to a controller/action method. (MVC Dispatcher) No <code>beforeNotFoundAction</code> when the action was not found in the controller Yes <p>The INVO sample application, demonstrates how you can take advantage of dispatching events, implementing a security filter with Acl</p> <p>The following example demonstrates how to attach listeners to this component:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Dispatcher as MvcDispatcher;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager;\n\n$container-&gt;set(\n    'dispatcher',\n    function () {\n        $eventsManager = new Manager();\n\n        $eventsManager-&gt;attach(\n            'dispatch',\n            function (Event $event, $dispatcher) {\n                // ...\n            }\n        );\n\n        $dispatcher = new MvcDispatcher();\n        $dispatcher-&gt;setEventsManager($eventsManager);\n\n        return $dispatcher;\n    },\n    true\n);\n</code></pre> <p>An instantiated controller automatically acts as a listener for dispatch events, so you can implement methods as callbacks:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\Dispatcher;\n\nclass InvoicesController extends Controller\n{\n    public function beforeExecuteRoute(\n        Dispatcher $dispatcher\n    ) {\n        // ...\n    }\n\n    public function afterExecuteRoute(\n        Dispatcher $dispatcher\n    ) {\n        // ...\n    }\n}\n</code></pre> <p>NOTE</p> <p>Methods on event listeners accept an Phalcon\\Events\\Event object as their first parameter - methods in controllers do not.</p>"},{"location":"dispatcher/#events-manager","title":"Events Manager","text":"<p>You can use the <code>dispatcher::beforeForward</code> event to change modules and perform redirections easier.</p> <pre><code>&lt;?php\n\nuse App\\Back\\Bootstrap;\nuse Phalcon\\Di;\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Events\\Event;\n\n$container = new Di();\n\n$modules = [\n    'backend' =&gt; [\n        'className' =&gt; Bootstrap::class,\n        'path'      =&gt; '/app/Modules/Back/Bootstrap.php',\n        'metadata'  =&gt; [\n            'controllersNamespace' =&gt; 'App\\Back\\Controllers',\n        ],\n    ],\n];\n\n$manager = new Manager();\n$manager-&gt;attach(\n    'dispatch:beforeForward',\n    function (\n        Event $event, \n        Dispatcher $dispatcher, \n        array $forward\n    ) use ($modules) {\n        $moduleName = $forward['module'];\n        $metadata   = $modules[$moduleName]['metadata'];\n\n        $dispatcher-&gt;setModuleName($moduleName);\n        $dispatcher-&gt;setNamespaceName(\n            $metadata['controllersNamespace']\n        );\n    }\n);\n\n$dispatcher = new Dispatcher();\n$dispatcher-&gt;setDI($container);\ndispatcher-&gt;setManager($manager);\n$container-&gt;set('dispatcher', $dispatcher);\n\n$dispatcher-&gt;forward(\n    [\n        'module'     =&gt; 'backend',\n        'controller' =&gt; 'invoices',\n        'action'     =&gt; 'index',\n    ]\n);\n\necho $dispatcher-&gt;getModuleName();\n</code></pre>"},{"location":"dispatcher/#custom","title":"Custom","text":"<p>The Phalcon\\Mvc\\DispatcherInterface interface must be implemented to create your own dispatcher.</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Mvc\n\nuse Phalcon\\Mvc\\DispatcherInterface;\n\nclass MyDispatcher implements DispatcherInterface\n{\n    /**\n     * Dispatches a handle action taking into account the routing parameters\n     */\n    public function dispatch(): object | bool;\n\n    /**\n     * Forwards the execution flow to another controller/action\n     */\n    public function forward(array $forward): void;\n\n    /**\n     * Gets last dispatched action name\n     */\n    public function getActionName(): string;\n\n    /**\n     * Gets the default action suffix\n     */\n    public function getActionSuffix(): string;\n\n    /**\n     * Returns the active controller in the dispatcher\n     */\n    public function getActiveController(): ControllerInterface;\n\n    /**\n     * Gets last dispatched controller name\n     */\n    public function getControllerName(): string;\n\n    /**\n     * Gets the default handler suffix\n     */\n    public function getHandlerSuffix(): string;\n\n    /**\n     * Returns the latest dispatched controller\n     */\n    public function getLastController(): ControllerInterface;\n\n    /**\n     * Gets a param by its name or numeric index\n     *\n     * @param string|array filters\n     */\n    public function getParam($param, $filters = null);\n\n    /**\n     * Gets action params\n     */\n    public function getParams(): array;\n\n    /**\n     * Returns value returned by the latest dispatched action\n     */\n    public function getReturnedValue();\n\n    /**\n     * Check if a param exists\n     */\n    public function hasParam($param): bool;\n\n    /**\n     * Checks if the dispatch loop is finished or has more pendent\n     * controllers/tasks to dispatch\n     */\n    public function isFinished(): bool;\n\n    /**\n     * Sets the action name to be dispatched\n     */\n    public function setActionName(string $actionName): void;\n\n    /**\n     * Sets the default action suffix\n     */\n    public function setActionSuffix(string $actionSuffix): void;\n\n    /**\n     * Sets the default controller suffix\n     */\n    public function setControllerSuffix(string $controllerSuffix);\n\n    /**\n     * Sets the controller name to be dispatched\n     */\n    public function setControllerName(string $controllerName);\n\n    /**\n     * Sets the default action name\n     */\n    public function setDefaultAction(string $actionName): void;\n\n    /**\n     * Sets the default controller name\n     */\n    public function setDefaultController(string $controllerName);\n\n    /**\n     * Sets the default namespace\n     */\n    public function setDefaultNamespace(string $defaultNamespace): void;\n\n    /**\n     * Sets the default suffix for the handler\n     */\n    public function setHandlerSuffix(string $handlerSuffix): void;\n\n    /**\n     * Sets the module name which the application belongs to\n     */\n    public function setModuleName(string $moduleName): void;\n\n    /**\n     * Sets the namespace which the controller belongs to\n     */\n    public function setNamespaceName(string $namespaceName): void;\n\n    /**\n     * Set a param by its name or numeric index\n     *\n     * @param  mixed value\n     */\n    public function setParam($param, $value): void;\n\n    /**\n     * Sets action params to be dispatched\n     */\n    public function setParams(array $params): void;\n}\n</code></pre>"},{"location":"domain/","title":"Domain","text":"<p>The domain component incorporates components that are used for the implementation of the Action Domain Responder (ADR) pattern and can also be used when implementing Domain Driven Design.</p>"},{"location":"domain/#payload","title":"Payload","text":"<p>The Action Domain Responder requires a data transfer mechanism between the three layers to serve your application. The Phalcon\\Domain\\Payload is a data transfer object that is used to send data between the three layers of the pattern. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Domain\\Payload;\n\n$payload = new Payload();\n</code></pre> <p>When using this object, you can set its status, the input, the output, any messages or extra information required by each layer of your pattern to be transferred to the next layer that requires it during the application flow. The class itself is a data wrapper that contains the necessary information to be passed between layers.</p> <p>The properties stored are:</p> <ul> <li><code>extras</code>: Extra information</li> <li><code>input</code>: Input</li> <li><code>messages</code>: Messages</li> <li><code>status</code>: Status</li> <li><code>output</code>: Output</li> </ul> <p>The component offers getters and setters for the above properties.</p> <p>NOTE</p> <p>All the setters return back a Phalcon\\Domain\\Payload object, which allows you to chain calls for a more fluent syntax.</p>"},{"location":"domain/#factory","title":"Factory","text":"<p>Phalcon\\Domain\\PayloadFactory is also available, offering an easy way to generate new Payload objects.</p> <pre><code>&lt;?php\nuse Phalcon\\Domain\\PayloadFactory;\n\n$payloadFactory = new PayloadFactory();\n$payload = $payloadFactory-&gt;newInstance();\n?&gt;\n</code></pre>"},{"location":"domain/#interfaces","title":"Interfaces","text":"<p>There are three interfaces that you can take advantage of if you wish to extend the object.</p> <ul> <li><code>ReadableInterface</code>: contains only read methods</li> <li><code>WritableInterface</code>: contains only write methods</li> <li><code>PayloadInterface</code>: contains both read and write methods</li> </ul>"},{"location":"domain/#status-values","title":"Status Values","text":"<p>The Phalcon\\Domain\\Payload\\Status class contains several constants to help with the domain status of your Payload objects. You can always extend the class and introduce your own domain statuses, depending on the needs of your application.</p> <ul> <li><code>ACCEPTED</code> </li> <li><code>AUTHENTICATED</code> </li> <li><code>AUTHORIZED</code> </li> <li><code>CREATED</code> </li> <li><code>DELETED</code> </li> <li><code>ERROR</code> </li> <li><code>FAILURE</code> </li> <li><code>FOUND</code> </li> <li><code>NOT_ACCEPTED</code> </li> <li><code>NOT_AUTHENTICATED</code></li> <li><code>NOT_AUTHORIZED</code> </li> <li><code>NOT_CREATED</code> </li> <li><code>NOT_DELETED</code> </li> <li><code>NOT_FOUND</code> </li> <li><code>NOT_UPDATED</code> </li> <li><code>NOT_VALID</code> </li> <li><code>PROCESSING</code> </li> <li><code>SUCCESS</code> </li> <li><code>UPDATED</code> </li> <li><code>VALID</code> </li> </ul> <p>These statuses can be used at the display/view layer of your application to process domain objects retrieved via <code>Payload::getOutput()</code>.</p>"},{"location":"domain/#example","title":"Example","text":"<pre><code>&lt;?php\n\nuse Application\\Models\\Reports;\nuse Phalcon\\Domain\\PayloadFactory;\nuse Phalcon\\Domain\\Payload\\Status;\nuse Phalcon\\Mvc\\Controller;\n\nclass ReportsController extends Controller\n{\n    public function viewAction(int $reportId)\n    {\n        $factory = new PayloadFactory();\n        $payload = $factory-&gt;newInstance();\n\n        $report = Reports::find(\n            [\n                'conditions' =&gt; 'reportId = :reportId:',\n                'bind'       =&gt; [\n                    'reportId' =&gt; $reportId,\n                 ],\n            ]          \n        );\n\n        if (false === $report) {\n            $payload\n                -&gt;setStatus(Status::NOT_FOUND)\n                -&gt;setInput(func_get_args())\n            ;\n        } else {\n            $payload\n                -&gt;setStatus(Status::FOUND)\n                -&gt;setOutput($report)\n            ;\n        }\n\n        return $payload;\n    }\n}   \n</code></pre>"},{"location":"domain/#links","title":"Links","text":"<ul> <li>Action Domain Responder</li> <li>Clarifications to a review of Action Domain Responder</li> </ul>"},{"location":"environments-devilbox/","title":"Environments","text":""},{"location":"environments-devilbox/#overview","title":"Overview","text":"<p>The Devilbox The Devilbox is a modern and highly customizable dockerized PHP stack supporting full LAMP and MEAN and running on all major platforms. The main goal is to easily switch and combine any version required for local development. It supports an unlimited number of projects for which vhosts, SSL certificates and DNS records are created automatically. Reverse proxies per project are supported to ensure listening server such as NodeJS can also be reached. Email catch-all and popular development tools will be at your service as well. Configuration is not necessary, as everything is already pre-setup.</p> <p>Furthermore, the Devilbox provides an identical and reproducible development environment for different host operating systems.</p> <p>This example will use <code>phalcon</code> to install Phalcon from within the Devilbox PHP container. After completing the steps listed below, you will have a working Phalcon setup ready to be served via http and https.</p>"},{"location":"environments-devilbox/#configuration","title":"Configuration","text":"<p>The following configuration will be used:</p> <p>| Project name          | <code>my-phalcon</code>                                      | | VirtualHost directory | <code>/shared/httpd/my-phalcon</code>                        | | Database              | n.a.                                              | | <code>TLD_SUFFIX</code>          | loc                                               | | Project URL           | <code>http://my-phalcon.loc</code>, <code>https://my-phalcon.loc</code> |                          </p> <p>NOTE</p> <ul> <li>Inside the Devilbox PHP container, projects are always in <code>/shared/httpd/</code>.</li> <li>On your host operating system, projects are by default in <code>./data/www/</code> inside the Devilbox git directory. This path can be changed via <code>HOST_PATH_HTTPD_DATADIR</code>.</li> </ul>"},{"location":"environments-devilbox/#activation","title":"Activation","text":"<p>Your environment will be ready in six simple steps:</p> <ul> <li>Enter the PHP container</li> <li>Create a new VirtualHost directory</li> <li>Install Phalcon</li> <li>Symlink webroot directory</li> <li>Setup DNS record</li> <li>Visit <code>http://my-phalcon.loc</code> in your browser</li> <li>(Nginx) Create custom vhost config file</li> </ul>"},{"location":"environments-devilbox/#enter-the-php-container","title":"Enter the PHP Container","text":"<p>All the work will be performed inside the PHP container since it offers all the necessary tools. Navigate to the Devilbox git directory and execute <code>./shell.sh</code> (or <code>shell.bat</code> on Windows) to enter the running PHP container.</p> <pre><code>host&gt; ./shell.sh\n</code></pre>"},{"location":"environments-devilbox/#create-new-vhost-directory","title":"Create New Vhost Directory","text":"<p>The vhost directory defines the name under which your project will be available. (<code>&lt;vhost dir&gt;.TLD_SUFFIX</code> will be the final URL ).</p> <pre><code>devilbox@php-7.3 in /shared/httpd $ mkdir my-phalcon\n</code></pre>"},{"location":"environments-devilbox/#install-phalcon","title":"Install Phalcon","text":"<p>Navigate into your newly created vhost directory and install Phalcon with <code>phalcon</code> cli.</p> <pre><code>devilbox@php-7.3 in /shared/httpd $ cd my-phalcon\ndevilbox@php-7.3 in /shared/httpd/my-phalcon $ phalcon project phalconphp\n</code></pre> <p>The directory structure looks like this after the installation:</p> <pre><code>devilbox@php-7.3 in /shared/httpd/my-phalcon $ tree -L 1\n.\n\u2514\u2500\u2500 phalconphp\n\n1 directory, 0 files\n</code></pre>"},{"location":"environments-devilbox/#symlink-webroot","title":"Symlink Webroot","text":"<p>Symlinking the actual webroot directory to <code>htdocs</code> is important. The web server expects every project's document root to be in <code>&lt;vhost dir&gt;/htdocs/</code>. This is the path where it will serve the files. This is also the path where the entry point of your application (usually <code>index.php</code>) needs to reside.</p> <p>Some frameworks however, store files and content in nested directories of unknown levels. It is therefore impossible to set this as a pre-set for the environment. You will therefore have to manually set a symlink back to the expected path that your framework requires.</p> <pre><code>devilbox@php-7.3 in /shared/httpd/my-phalcon $ ln -s phalconphp/public/ htdocs\n</code></pre> <p>The directory structure looks like this after the installation:</p> <pre><code>devilbox@php-7.3 in /shared/httpd/my-phalcon $ tree -L 1\n.\n\u251c\u2500\u2500 phalconphp\n\u2514\u2500\u2500 htdocs -&gt; phalconphp/public\n\n2 directories, 0 files\n</code></pre> <p>As you can see in the above listing, the <code>htdocs</code> folder that is required by the web server is now pointing to the entry point of your framework.</p> <p>NOTE</p> <p>When using Docker Toolbox, you need to explicitly allow the usage of symlinks.</p>"},{"location":"environments-devilbox/#dns-record","title":"DNS Record","text":"<p>If you have Auto DNS configured already, you can skip this section, because DNS entries will be available automatically by the bundled DNS server.</p> <p>If you do not have Auto DNS configured, you will need to add the following line to your host operating system <code>/etc/hosts</code> file (or <code>C:\\Windows\\System32\\drivers\\etc</code> on Windows):</p> <pre><code>127.0.0.1 my-phalcon.loc\n</code></pre>"},{"location":"environments-devilbox/#open-your-browser","title":"Open your Browser","text":"<p>Open your browser and navigate to <code>http://my-phalcon.loc</code> or <code>https://my-phalcon.loc</code></p>"},{"location":"environments-devilbox/#create-custom-vhost-config-file-nginx-only","title":"Create Custom Vhost Config File (Nginx Only)","text":"<p>By default routes will not work if using Nginx. To fix this, you will need to create a custom vhost configuration. </p> <p>In your project folder, you will need to create a folder called <code>.devilbox</code> unless you changed <code>HTTPD_TEMPLATE_DIR</code> in your <code>.env</code></p> <p>Copy the default nginx config from <code>./cfg/vhost-gen/nginx.yml-example-vhost</code> to <code>./data/www/my-project/.devilbox/nginx.yml</code></p> <p>Carefully edit the nginx.yml file and change:</p> <p><code>try_files $uri $uri/ /index.php$is_args$args;</code></p> <p>to</p> <p><code>try_files $uri $uri/ /index.php?_url=$uri&amp;$args;</code></p> <p>and</p> <p><code>location ~ \\.php?$ {</code></p> <p>to</p> <p><code>location ~ [^/]\\.php(/|$) {</code></p> <p>Save the file as <code>nginx.yml</code> and ensure not to use any tabs in the file or devilbox will not use the custom configuration. You can use <code>yamllint nginx.yml</code> whilst inside the Devilbox shell to check the file before restarting devilbox.</p>"},{"location":"environments-devilbox/#references","title":"References","text":"<ul> <li>Devilbox.com</li> <li>Devilbox Documentation</li> <li>HOST_PATH_HTTPD_DATADIR</li> <li>Enter the PHP container </li> <li>Work inside the PHP container</li> <li>Available tools </li> <li>TLD_SUFFIX</li> <li>Docker Toolbox and Symlinks</li> <li>Add project hosts entry on MacOS</li> <li>Add project hosts entry on Windows</li> <li>Setup Auto DNS</li> </ul>"},{"location":"environments-nanobox/","title":"Environments","text":""},{"location":"environments-nanobox/#overview","title":"Overview","text":"<p>Nanobox is a portable, micro platform for developing and deploying apps. When working locally, Nanobox uses Docker to spin up and configure a virtual development environment configured to your specific needs. When you're ready to deploy to live servers, Nanobox will take that same environment and spin it up on your cloud provider of choice, where you can then manage and scale your app through the Nanobox dashboard.</p>"},{"location":"environments-nanobox/#local-development","title":"Local Development","text":"<p>Nanobox can be used for local development on any number of projects (not only restricted to PHP). To start working with nanobox you will first create a free Nanobox account, then download and run the Nanobox installer. The account is used only to login to nanobox using the console command. Nanobox will remember your credentials so you only have to do this once. If your intent is only to use nanobox locally, you do not need to do anything else. The same login however can be used later on if you wish to deploy your application to a live environment.</p>"},{"location":"environments-nanobox/#create-a-new-project","title":"Create a New Project","text":"<p>Create a project folder and <code>cd</code> into it:</p> <pre><code>mkdir nanobox-phalcon &amp;&amp; cd nanobox-phalcon\n</code></pre>"},{"location":"environments-nanobox/#add-a-boxfileyml","title":"Add a <code>boxfile.yml</code>","text":"<p>Nanobox uses the <code>boxfile.yml</code> to build and configure your app's runtime and environment. In the root of your project, create a <code>boxfile.yml</code> with the following:</p> <pre><code>run.config:\n  engine: php\n  engine.config:\n    runtime: php-7.2\n    document_root: public\n    extensions:\n      - phalcon\n  extra_steps:\n    #===========================================================================\n    # PSR extension compilation\n    - |\n      (\n        CURRENT_FOLDER=$(pwd)\n        rm -fR /tmp/php-psr\n        cd /tmp/build\n        git clone --depth=1 https://github.com/jbboehr/php-psr.git\n        cd php-psr\n        set -e\n        phpize\n        ./configure --with-php-config=$(which php-config)\n        make -j\"$(getconf _NPROCESSORS_ONLN)\"\n        make install\n        cd $CURRENT_FOLDER\n        rm -fR /tmp/php-psr\n        unset CURRENT_FOLDER\n      )\n    - echo -e 'extension=psr.so' &gt;&gt; \"/data/etc/php/dev_php.ini\"\n    - echo \"alias phalcon=\\'phalcon.php\\'\" &gt;&gt; /data/var/home/gonano/.bashrc\n</code></pre> <p>This tells Nanobox to:</p> <ul> <li>Use the PHP engine, a set of scripts that build your app's runtime.</li> <li>Use PHP 7.2.</li> <li>Set the Apache document root to <code>public</code>.</li> <li>Include the Phalcon extension. Nanobox takes a bare-bones approach to extensions, so you'll likely need to include other extensions. More information can be found here.</li> <li>Install the required PSR extension</li> <li>Add a bash alias for Phalcon Devtools so you can just use the <code>phalcon</code> command.</li> </ul> <p>Depending on the needs of your application, you might need to add additional extensions. For instance you might want to add <code>mbcrypt</code>, <code>igbinary</code>, <code>json</code>, <code>session</code> and <code>redis</code>. Your <code>extensions</code> section in the <code>boxfile.yml</code> will look like this:</p> <pre><code>run.config:\n  engine: php\n  engine.config:\n    extensions:\n      - json\n      - mbstring\n      - igbinary\n      - session\n      - phalcon\n      - redis\n</code></pre> <p>NOTE</p> <p>The order of the extensions does matter. Certain extensions will not load if their prerequisites are not loaded. For instance <code>igbinary</code> has to be loaded before <code>redis</code> etc.</p>"},{"location":"environments-nanobox/#add-phalcon-devtools-to-your-composerjson","title":"Add Phalcon Devtools to your <code>composer.json</code>","text":"<p>Create a <code>composer.json</code> file in the root of your project and add the <code>phalcon/devtools</code> package to your dev requirements:</p> <pre><code>{\n    \"require-dev\": {\n        \"phalcon/devtools\": \"~3.0.3\"\n    }\n}\n</code></pre> <p>NOTE</p> <p>The version of Phalcon Devtools depends on which PHP version as well as Phalcon version you're using.</p>"},{"location":"environments-nanobox/#start-nanobox-and-generate-a-new-phalcon-app","title":"Start Nanobox and Generate a New Phalcon App","text":"<p>From the root of your project, run the following commands to start Nanobox and generate a new Phalcon app. As Nanobox starts, the PHP engine will automatically install and enable the Phalcon extension, run a <code>composer install</code> which will install Phalcon Devtools, then drop you into an interactive console inside the virtual environment. Your working directory is mounted into the <code>/app</code> directory in the VM, so as changes are made, they will be reflected both in the VM and in your local working directory.</p> <pre><code># Start Nanobox and Drop into a Nanobox Console\nnanobox run\n\n# cd into the /tmp Directory\ncd /tmp\n\n# Generate a New Phalcon App\nphalcon project myapp\n\n# Change Back to the /app Dir\ncd -\n\n# Copy the Generated App into your Project\ncp -a /tmp/myapp/* .\n\n# Exit the Console\nexit\n</code></pre>"},{"location":"environments-nanobox/#run-the-app","title":"Run the App","text":"<p>Before actually running your new Phalcon app, we recommend using Nanobox to add a DNS alias. This will add an entry to your local <code>hosts</code> file pointing to your dev environment and provide a convenient way to access your app from a browser. </p> <pre><code>nanobox dns add local phalcon.dev\n</code></pre> <p>Alternatively you can use the IP address of your container. The IP address is displayed when you first run your container. If you forgot or did not notice it, on a separate terminal, navigate to the same folder that your project lives on your system and type </p> <p><pre><code>nanobox info local\n</code></pre> The output of this command will show you all the IP addresses of your containers/components as well as passwords to databases (if applicable). </p> <p>Nanobox provides a <code>php-server</code> helper script that starts both Apache (or Nginx depending on your <code>boxfile.yml</code> config) and PHP. When passed with the <code>nanobox run</code> command, it will start the local dev environment and immediately run your app.</p> <pre><code>nanobox run php-server\n</code></pre> <p>Once running, you can visit your app at <code>https://phalcon.dev</code>.</p>"},{"location":"environments-nanobox/#check-out-the-environment","title":"Check Out the Environment","text":"<p>Your virtual environment includes everything you need to run your Phalcon application.</p> <pre><code># Drop into a Nanobox Console\nnanobox run\n\n# Check the Php Version\nphp -v\n\n# Check that Phalcon Devtools Are Available\nphalcon info\n\n# Check that your Local Codebase is Mounted\nls\n\n# Exit the Console\nexit\n</code></pre>"},{"location":"escaper/","title":"Escaper","text":""},{"location":"escaper/#overview","title":"Overview","text":"<p>Websites and web applications are vulnerable to XSS attacks and although PHP provides escaping functionality, in some contexts it is not sufficient/appropriate. Phalcon\\Escaper provides contextual escaping and is written in Zephir, providing the minimal overhead when escaping different kinds of texts.</p> <p>We designed this component based on the XSS (Cross Site Scripting) Prevention Cheat Sheet created by the OWASP. Additionally, this component relies on mbstring to support almost any charset. To illustrate how this component works and why it is important, consider the following example:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\n\n$escaper = new Escaper();\n\n$title = '&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;';\necho $escaper-&gt;escapeHtml($title);\n// &amp;lt;/title&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;\n\n$css = ';`(';\necho $escaper-&gt;escapeCss($css);\n// &amp;#x3c &amp;#x2f style&amp;#x3e\n\n$fontName = 'Verdana\\\"&lt;/style&gt;';\necho $escaper-&gt;escapeCss($fontName);\n// Verdana\\22 \\3c \\2f style\\3e\n\n$js = \"';&lt;/script&gt;Hello\";\necho $escaper-&gt;escapeJs($js);\n// \\x27\\x3b\\x3c\\2fscript\\x3eHello\n</code></pre>"},{"location":"escaper/#html","title":"HTML","text":"<p>You can escape text prior to printing it to your views using <code>escapeHtml()</code>. Without escaping you could potentially echo unsafe data in your HTML output.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\n\n$escaper = new Escaper();\n\n$title = '&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;';\necho $escaper-&gt;escapeHtml($title);\n// &amp;lt;/title&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;escaper-&gt;escapeHtml($title); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ title | escape }}{% endraw %}\n</code></pre></p>"},{"location":"escaper/#html-attributes","title":"HTML Attributes","text":"<p>Escaping attributes is different than escaping HTML content. The escaper works by changing every non-alphanumeric character to a safe format. It uses htmlspecialchars internally. This kind of escaping is intended escape excluding complex ones such as <code>href</code> or <code>url</code>. To escape attributes, you can use the <code>escapeHtmlAttr() method</code></p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\n\n$escaper = new Escaper();\n\n$attr = '\"&gt;&lt;h1&gt;Hello&lt;/table';\necho $escaper-&gt;escapeHtmlAttr($attr);\n// &amp;#x22;&amp;#x3e;&amp;#x3c;h1&amp;#x3e;Hello&amp;#x3c;&amp;#x2f;table\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;escaper-&gt;escapeHtmlAttr($attr); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ attr | escape_attr }}{% endraw %}\n</code></pre></p>"},{"location":"escaper/#urls","title":"URLs","text":"<p><code>escapeUrl()</code> can be used to escape attributes such as <code>href</code> or <code>url</code>:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\n\n$escaper = new Escaper();\n\n$url = '\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;a href=\"#';\necho $escaper-&gt;escapeHtmlAttr($url);\n// %22%3E%3Cscript%3Ealert%281%29%3C%2Fscript%3E%3Ca%20href%3D%22%23\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;escaper-&gt;escapeHtmlAttr($url); ?&gt;\n</code></pre></p>"},{"location":"escaper/#css","title":"CSS","text":"<p>CSS identifiers/values can be escaped by using <code>escapeCss()</code>:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\n\n$escaper = new Escaper();\n\n$css = '\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;a href=\"#';\necho $escaper-&gt;escapeCss($css);\n// \\22 \\3e \\3c script\\3e alert\\28 1\\29 \\3c \\2f script\\3e \\3c a\\20 href\\3d \\22 \\23 \n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;escaper-&gt;escapeCss($css); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ css | escape_css }}{% endraw %}\n</code></pre></p>"},{"location":"escaper/#javascript","title":"JavaScript","text":"<p>Content printed into javascript code must be properly escaped. <code>escapeJs()</code> helps with this task:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\n\n$escaper = new Escaper();\n\n$js = \"'; alert(100); var x='\";\necho $escaper-&gt;escapeJs($js);\n// \\x27; alert(100); var x\\x3d\\x27\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;escaper-&gt;escapeJs($js); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ js | escape_js }}{% endraw %}\n</code></pre></p>"},{"location":"escaper/#encoding","title":"Encoding","text":"<p>Phalcon\\Escape also offers methods regarding the encoding of the text to be escaped.</p>"},{"location":"escaper/#detectencoding","title":"<code>detectEncoding()</code>","text":"<p>Detects the character encoding of a string to be handled by an encoder. Special-handling for <code>chr(172)</code> and <code>chr(128)</code> to <code>chr(159)</code> which fail to be detected mb_detect_encoding. The method returns a <code>string</code> with the detected encoding or <code>null</code></p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\n\n$escaper = new Escaper();\n\necho $escaper-&gt;detectEncoding('\u1e02\u1e03\u010a\u010b\u1e0a\u1e0b\u1e1e\u1e1f\u0120\u0121\u1e40\u1e41'); // UTF-8\n</code></pre>"},{"location":"escaper/#getencoding","title":"<code>getEncoding()</code>","text":"<p>Returns the internal encoding used by the escaper</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\n\n$escaper = new Escaper();\n\necho $escaper-&gt;getEncoding();\n</code></pre>"},{"location":"escaper/#normalizeencoding","title":"<code>normalizeEncoding()</code>","text":"<p>Utility method that normalizes a string's encoding to UTF-32.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\n\n$escaper = new Escaper();\n\necho $escaper-&gt;normalizeEncoding('\u1e02\u1e03\u010a\u010b\u1e0a\u1e0b\u1e1e\u1e1f\u0120\u0121\u1e40\u1e41');  \n</code></pre>"},{"location":"escaper/#setencoding","title":"<code>setEncoding()</code>","text":"<p>Sets the encoding to be used by the escaper</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\n\n$escaper = new Escaper();\n\n$escaper-&gt;setEncoding('utf-8');\n\necho $escaper-&gt;getEncoding(); // 'utf-8'\n</code></pre>"},{"location":"escaper/#setdoubleencode","title":"<code>setDoubleEncode()</code>","text":"<p>Sets the escaper to use double encoding or not (default <code>true</code>)</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\n\n$escaper = new Escaper();\n\n$escaper-&gt;setDoubleEncode(false);\n</code></pre>"},{"location":"escaper/#sethtmlquotetype","title":"<code>setHtmlQuoteType()</code>","text":"<p>You can set the quote type to be used by the escaper. The passed variable is one of the constants that htmlspecialchars accepts: - <code>ENT_COMPAT</code> - <code>ENT_QUOTES</code> - <code>ENT_NOQUOTES</code> - <code>ENT_IGNORE</code> - <code>ENT_SUBSTITUTE</code> - <code>ENT_DISALLOWED</code> - <code>ENT_HTML401</code> - <code>ENT_XML1</code> - <code>ENT_XHTML</code> - <code>ENT_HTML5</code> </p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\n\n$escaper = new Escaper();\n\n$escaper-&gt;setHtmlQuoteType(ENT_XHTML);\n</code></pre>"},{"location":"escaper/#exceptions","title":"Exceptions","text":"<p>Any exceptions thrown in the Escaper component will be of type Phalcon\\Escaper\\Exception. It is thrown when the data supplied to the component is not valid. You can use these exceptions to selectively catch exceptions thrown only from this component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Escaper\\Exception;\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * @property Escaper $escaper\n */\nclass IndexController extends Controller\n{\n    public function index()\n    {\n        try {\n            echo $this-&gt;escaper-&gt;normalizeEncoding('\u1e02\u1e03\u010a\u010b\u1e0a\u1e0b\u1e1e\u1e1f\u0120\u0121\u1e40\u1e41');  \n        } catch (Exception $ex) {\n            echo $ex-&gt;getMessage();\n        }\n    }\n}\n</code></pre>"},{"location":"escaper/#dependency-injection","title":"Dependency Injection","text":"<p>If you use the Phalcon\\Di\\FactoryDefault container, the Phalcon\\Escaper is already registered for you with the name <code>escaper</code>.</p> <p>An example of the registration of the service as well as accessing it is below:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Escaper;\n\n$container = new Di();\n\n$container-&gt;set(\n    'escaper',\n    function () use  {\n        return new Escaper();\n    }\n);\n</code></pre> <p>You can now use the component in a controller (or a component that implements Phalcon\\Di\\Injectable)</p> <pre><code>&lt;?php\n\nnamespace MyApp;\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * Invoices controller\n *\n * @property Escaper $escaper\n */\nclass InvoicesController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        echo $this-&gt;escaper-&gt;escapeHtml('The post was correctly saved!');\n    }\n}\n</code></pre>"},{"location":"escaper/#custom","title":"Custom","text":"<p>Phalcon also offers the Phalcon\\Escaper\\EscaperInterface which can be implemented in a custom class. The class can offer the escaper functionality you require.</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Escaper;\n\nuse Phalcon\\Escaper\\EscaperInterface;\n\nclass Custom extends EscaperInterface\n{\n    /**\n     * Escape CSS strings by replacing non-alphanumeric chars by their\n     * hexadecimal representation\n     */\n    public function escapeCss(string $css): string;\n\n    /**\n     * Escapes a HTML string\n     */\n    public function escapeHtml(string $text): string;\n\n    /**\n     * Escapes a HTML attribute string\n     */\n    public function escapeHtmlAttr(string $text): string;\n\n    /**\n     * Escape Javascript strings by replacing \n     * non-alphanumeric chars by their hexadecimal \n     * representation\n     */\n    public function escapeJs(string $js): string;\n\n    /**\n     * Escapes a URL. Internally uses rawurlencode\n     */\n    public function escapeUrl(string $url): string;\n\n    /**\n     * Returns the internal encoding used by the escaper\n     */\n    public function getEncoding(): string;\n\n    /**\n     * Sets the encoding to be used by the escaper\n     */\n    public function setEncoding(string $encoding): void;\n\n    /**\n     * Sets the HTML quoting type for htmlspecialchars\n     */\n    public function setHtmlQuoteType(int $quoteType): void;\n}\n</code></pre>"},{"location":"events/","title":"Events Manager","text":""},{"location":"events/#overview","title":"Overview","text":"<p>The purpose of this component is to intercept the execution of components in the framework by creating hooks. These hooks allow developers to obtain status information, manipulate data or change the flow of execution during the process of a component. The component consists of a Phalcon\\Events\\Manager that handles event propagation and execution of events. The manager contains various Phalcon\\Events\\Event objects, which contain information about each hook/event. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as DbAdapter;\n\n$eventsManager = new EventsManager();\n\n$eventsManager-&gt;attach(\n    'db:afterQuery',\n    function (Event $event, $connection) {\n        echo $connection-&gt;getSQLStatement();\n    }\n);\n\n$connection = new DbAdapter(\n    [\n        'host'     =&gt; 'localhost',\n        'username' =&gt; 'root',\n        'password' =&gt; 'secret',\n        'dbname'   =&gt; 'invo',\n    ]\n);\n\n$connection-&gt;setEventsManager($eventsManager);\n$connection-&gt;query(\n    'SELECT * FROM products p WHERE p.status = 1'\n);\n</code></pre>"},{"location":"events/#naming-convention","title":"Naming Convention","text":"<p>Phalcon events use namespaces to avoid naming collisions. Each component in Phalcon occupies a different event namespace and you are free to create your own as you see fit. Event names are formatted as <code>component:event</code>. For example, as Phalcon\\Db occupies the <code>db</code> namespace, its <code>afterQuery</code> event's full name is <code>db:afterQuery</code>.</p> <p>When attaching event listeners to the events manager, you can use <code>component</code> to catch all events from that component (eg. <code>db</code> to catch all of the Phalcon\\Db events) or <code>component:event</code> to target a specific event (eg. <code>db:afterQuery</code>).</p>"},{"location":"events/#manager","title":"Manager","text":"<p>The Phalcon\\Events\\Manager is the main component that handles all the events in Phalcon. Different implementations in other frameworks refer to this component as a handler. Regardless of the name, the functionality and purpose are the same. </p> <p>The component wraps a queue of objects using SplPriorityQueue internally. It registers those objects with a priority (default <code>100</code>) and then when the time comes, executes them.</p> <p>The methods exposed by the manager are:</p> <p><pre><code>public function attach(\n    string $eventType, \n    mixed $handler, \n    int $priority = self::DEFAULT_PRIORITY\n)\n</code></pre> Attaches a listener to the events manager. The <code>handler</code> is an object or a <code>callable</code>.</p> <p><pre><code>public function arePrioritiesEnabled(): bool\n</code></pre> Returns if priorities are enabled</p> <p><pre><code>public function collectResponses(bool $collect)\n</code></pre> Tells the event manager if it needs to collect all the responses returned by every registered listener in a single <code>fire</code> call</p> <p><pre><code>public function detach(string $eventType, mixed $handler)\n</code></pre> Detach the listener from the events manager</p> <p><pre><code>public function detachAll(string $type = null)\n</code></pre> Removes all events from the EventsManager</p> <p><pre><code>public function enablePriorities(bool $enablePriorities)\n</code></pre> Set if priorities are enabled in the events manager (default <code>false</code>).</p> <p><pre><code>public function fire(string $eventType, mixed $source, mixed $data = null, bool $cancelable = true)\n</code></pre> Fires an event in the events manager causing the active listeners to be notified about it</p> <p><pre><code>final public function fireQueue(SplPriorityQueue $queue, EventInterface $event): mixed\n ```\nInternal handler to call a queue of events\n\n```php\npublic function getListeners(string $type): array\n</code></pre> Returns all the attached listeners of a certain type</p> <p><pre><code>public function getResponses(): array\n</code></pre> Returns all the responses returned by every handler executed by the last <code>fire</code> executed</p> <p><pre><code>public function hasListeners(string $type): bool\n</code></pre> Check whether certain type of event has listeners</p> <p><pre><code>public function isCollecting(): bool\n</code></pre> Check if the events manager is collecting all all the responses returned  by every registered listener in a single <code>fire</code></p>"},{"location":"events/#usage","title":"Usage","text":"<p>If you are using the Phalcon\\Di\\FactoryDefault DI container, the Phalcon\\Events\\Manager is already registered for you with the name <code>eventsManager</code>. This is a global events manager. However you are not restricted to use only that one. You can always create a separate manager to handle events for any component that you require.</p> <p>The following example shows how you can create a query logging mechanism using the global events manager:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as DbAdapter;\n\n$container     = Di::getDefault();\n$eventsManager = $container-&gt;get('eventsManager');\n\n$eventsManager-&gt;attach(\n    'db:afterQuery',\n    function (Event $event, $connection) {\n        echo $connection-&gt;getSQLStatement();\n    }\n);\n\n$connection = new DbAdapter(\n    [\n        'host'     =&gt; 'localhost',\n        'username' =&gt; 'root',\n        'password' =&gt; 'secret',\n        'dbname'   =&gt; 'invo',\n    ]\n);\n\n$connection-&gt;setEventsManager($eventsManager);\n$connection-&gt;query(\n    'SELECT * FROM products p WHERE p.status = 1'\n);\n</code></pre> <p>or if you want a separate events manager:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as DbAdapter;\n\n$eventsManager = new EventsManager();\n$eventsManager-&gt;attach(\n    'db:afterQuery',\n    function (Event $event, $connection) {\n        echo $connection-&gt;getSQLStatement();\n    }\n);\n\n$connection = new DbAdapter(\n    [\n        'host'     =&gt; 'localhost',\n        'username' =&gt; 'root',\n        'password' =&gt; 'secret',\n        'dbname'   =&gt; 'invo',\n    ]\n);\n\n$connection-&gt;setEventsManager($eventsManager);\n$connection-&gt;query(\n    'SELECT * FROM products p WHERE p.status = 1'\n);\n</code></pre> <p>In the above example, we are using the events manager to listen to the <code>afterQuery</code> event produced by the <code>db</code> service, in this case MySQL. We use the <code>attach</code> method to attach our event to the manager and use the <code>db:afterQuery</code> event. We add an anonymous function as the handler for this event, which accepts a Phalcon\\Events\\Event as the first parameter. This object contains contextual information regarding the event that has been fired. The database connection object as the second. Using the connection variable we print out the SQL statement. You can always pass a third parameter with arbitrary data specific to the event, or even a logger object in the anonymous function so that you can log your queries in a separate log file.</p> <p>NOTE</p> <p>You must explicitly set the Events Manager to a component using the <code>setEventsManager()</code> method in order for that component to trigger events. You can create a new Events Manager instance for each component or you can set the same Events Manager to multiple components as the naming convention will avoid conflicts</p>"},{"location":"events/#handlers","title":"Handlers","text":"<p>The events manager wires a handler to an event. A handler is a piece of code that will do something when the event fires. As seen in the above example, you can use an anonymous function as your handler:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as DbAdapter;\n\n$eventsManager = new EventsManager();\n$eventsManager-&gt;attach(\n    'db:afterQuery',\n    function (Event $event, $connection) {\n        echo $connection-&gt;getSQLStatement();\n    }\n);\n\n$connection = new DbAdapter(\n    [\n        'host'     =&gt; 'localhost',\n        'username' =&gt; 'root',\n        'password' =&gt; 'secret',\n        'dbname'   =&gt; 'invo',\n    ]\n);\n\n$connection-&gt;setEventsManager($eventsManager);\n$connection-&gt;query(\n    'SELECT * FROM products p WHERE p.status = 1'\n);\n</code></pre> <p>You can also create a listener class, which offers more flexibility. In a listener, you can listen to multiple events and even extend [Phalcon\\Di\\Injectable][di-injectable] which will give you fill access to the services of the Di container. The example above can be enhanced by implementing the following listener:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Listeners;\n\nuse Phalcon\\Logger;\nuse Phalcon\\Config;\nuse Phalcon\\Db\\AdapterInterface;\nuse Phalcon\\Di\\Injectable;\nuse Phalcon\\Events\\Event;\n\n/**\n * Class QueryListener\n *\n * @property Config $config\n * @property Logger $logger\n */\nclass QueryListener extends Injectable\n{\n    public function beforeQuery(Event $event, AdapterInterface $connection)\n    {\n        if ($this-&gt;config-&gt;path('app.logLevel') &gt; 1) {\n            $this-&gt;logger-&gt;info(\n                sprintf(\n                    '%s - [%s]',\n                    $connection-&gt;getSQLStatement(),\n                    json_encode($connection-&gt;getSQLVariables())\n                )\n            );\n        }\n    }\n\n    public function rollbackTransaction(Event $event)\n    {\n        if ($this-&gt;config-&gt;path('app.logLevel') &gt; 1) {\n            $this-&gt;logger-&gt;warning($event-&gt;getType());\n        }\n    }\n}\n</code></pre> <p>Attaching the listener to our events manager is very simple:</p> <pre><code>&lt;?php\n\n$eventsManager-&gt;attach(\n    'db',\n    new QueryListener()\n);\n</code></pre> <p>The resulting behavior will be that if the <code>app.logLevel</code> configuration variable is set to greater than <code>1</code> (representing that we are in development mode), all queries will be logged along with the actual parameters that were bound to each query. Additionally we will log every time we have a rollback in a transaction.</p> <p>Another handy listener is the <code>404</code> one:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Listeners\\Dispatcher;\n\nuse Phalcon\\Logger;\nuse Phalcon\\Di\\Injectable;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Dispatcher;\nuse MyApp\\Auth\\Adapters\\AbstractAdapter;\n\n/**\n * Class NotFoundListener\n *\n * @property AbstractAdapter $auth\n * @property Logger          $logger\n */\nclass NotFoundListener extends Injectable\n{\n    public function beforeException(\n        Event $event, \n        Dispatcher $dispatcher, \n        \\Exception $ex\n    ) {\n        switch ($ex-&gt;getCode()) {\n            case Dispatcher::EXCEPTION_HANDLER_NOT_FOUND:\n            case Dispatcher::EXCEPTION_ACTION_NOT_FOUND:\n                $dispatcher-&gt;setModuleName('main');\n                $params = [\n                    'namespace'  =&gt; 'MyApp\\Controllers',\n                    'controller' =&gt; 'session',\n                    'action'     =&gt; 'fourohfour',\n                ];\n\n                /**\n                 * 404 not logged in\n                 */\n                if (true !== $this-&gt;auth-&gt;isLoggedIn()) {\n                    $params['action'] = 'login';\n                }\n\n                $dispatcher-&gt;forward($params);\n\n                return false;\n            default:\n                $this-&gt;logger-&gt;error($ex-&gt;getMessage());\n                $this-&gt;logger-&gt;error($ex-&gt;getTraceAsString());\n\n                return false;\n        }\n    }\n}\n</code></pre> <p>and attaching it to the events manager:</p> <pre><code>&lt;?php\n\n$eventsManager-&gt;attach(\n    'dispatch:beforeException',\n    new NotFoundListener(),\n    200\n);\n</code></pre> <p>First we attach the listener to the <code>dispatcher</code> component and the <code>beforeException</code> event. This means that the events manager will fire only for that event calling our listener. We could have just changed the hook point to <code>dispatcher</code> so that we are able in the future to add more dispatcher events in the same listener.</p> <p>The <code>beforeException</code> function accepts the <code>$event</code> as the first parameter, the <code>$dispatcher</code> as the second and the <code>$ex</code> exception thrown from the dispatcher component. Using those, we can then figure out if a handler (or controller) or an action were not found. If that is the case, we forward the user to a specific module, controller and action. If our user is not logged in, then we send them to the login page. Alternatively, we just log the exception message in our logger.</p> <p>The example demonstrates clearly the power of the events manager, and how you can alter the flow of the application using listeners. </p>"},{"location":"events/#events-trigger","title":"Events: Trigger","text":"<p>You can create components in your application that trigger events to an events manager. Listeners attached to those events will be invoked when the events are fired. In order to create a component that triggers events, we need to implement the Phalcon\\Events\\EventsAwareInterface.</p>"},{"location":"events/#custom-component","title":"Custom Component","text":"<p>Let's consider the following example:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Components;\n\nuse Phalcon\\Di\\Injectable;\nuse Phalcon\\Events\\EventsAwareInterface;\nuse Phalcon\\Events\\ManagerInterface;\n\n/**\n * @property Logger $logger\n */\nclass NotificationsAware extends Injectable implements EventsAwareInterface\n{\n    protected $eventsManager;\n\n    public function getEventsManager()\n    {\n        return $this-&gt;eventsManager;\n    }\n\n    public function setEventsManager(ManagerInterface $eventsManager)\n    {\n        $this-&gt;eventsManager = $eventsManager;\n    }\n\n\n    public function process()\n    {\n        $this-&gt;eventsManager-&gt;fire('notifications:beforeSend', $this);\n\n        $this-&gt;logger-&gt;info('Processing.... ');\n\n        $this-&gt;eventsManager-&gt;fire('notifications:afterSend', $this);\n    }\n}\n</code></pre> <p>The above component implements the Phalcon\\Events\\EventsAwareInterface and as a result it uses the <code>getEventsManager</code> and <code>setEventsManager</code>. The last method is what does the work. In this example we want to send some notifications to users and want to fire an event before and after the notification is sent. </p> <p>We chose to name the component <code>notification</code> and the events are called <code>beforeSend</code> and <code>afterSend</code>. In the <code>process</code> method, you can add any code you need in between the calls to fire the relevant events. Additionally, you can inject more data in this component that would help with your implementation and processing of the notifications.</p>"},{"location":"events/#custom-listener","title":"Custom Listener","text":"<p>Now we need to create a listener for this component:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Listeners;\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Logger;\n\n/**\n * @property Logger $logger\n */\nclass MotificationsListener\n{\n    /**\n     * @var Logger\n     */\n    private $logger;\n\n    public function __construct(Logger $logger)\n    {\n        $this-&gt;logger = $logger;\n    }\n\n    public function afterSend(\n        Event $event, \n        NotificationsAware $component\n    ) {\n        $this-&gt;logger-&gt;info('After Notification');\n    }\n\n    public function beforeSend(\n        Event $event, \n        NotificationsAware $component\n    ) {\n        $this-&gt;logger-&gt;info('Before Notification');\n    }\n}\n</code></pre> <p>Putting it all together</p> <pre><code>&lt;?php\n\nuse MyApp\\Components\\NotificationAware;\nuse MyApp\\Listeners\\MotificationsListener;\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$eventsManager = new EventsManager();\n$component     = new NotificationAware();\n\n$component-&gt;setEventsManager($eventsManager);\n\n$eventsManager-&gt;attach(\n    'notifications',\n    new NotificationsListener()\n);\n\n$component-&gt;process();\n</code></pre> <p>When <code>process</code> is executed, the two methods in the listener will be executed. Your log will then have the following entries:</p> <pre><code>[2019-12-25 01:02:03][INFO] Before Notification\n[2019-12-25 01:02:03][INFO] Processing...\n[2019-12-25 01:02:03][INFO] After Notification\n</code></pre>"},{"location":"events/#custom-data","title":"Custom Data","text":"<p>Additional data may also be passed when triggering an event using the third parameter of <code>fire()</code>:</p> <pre><code>&lt;?php\n\n$data = [\n    'name'     =&gt; 'Darth Vader',\n    'password' =&gt; '12345',\n];\n\n$eventsManager-&gt;fire('notifications:afterSend', $this, $data);\n</code></pre> <p>In a listener the third parameter also receives data:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\n\n$data = [\n    'name'     =&gt; 'Darth Vader',\n    'password' =&gt; '12345',\n];\n\n$eventsManager-&gt;attach(\n    'notifications',\n    function (Event $event, $component, $data) {\n        print_r($data);\n    }\n);\n\n$eventsManager-&gt;attach(\n    'notifications',\n    function (Event $event, $component) {\n        print_r($event-&gt;getData());\n    }\n);\n</code></pre>"},{"location":"events/#propagation","title":"Propagation","text":"<p>An events manager can have multiple listeners attached to it. Once an event fires, all listeners that can be notified for the particular event will be notified. This is the default behavior but can be altered if need be by stopping the propagation early:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\n\n$eventsManager-&gt;attach(\n    'db',\n    function (Event $event, $connection) {\n        if ('2019-01-01' &lt; date('Y-m-d')) {\n            $event-&gt;stop();\n        }\n    }\n);\n</code></pre> <p>In the above simple example, we stop all events if today is earlier than <code>2019-01-01</code>.</p>"},{"location":"events/#cancellation","title":"Cancellation","text":"<p>By default all events are cancelable. However you might want to set a particular event to not be cancelable, allowing the particular event to fire on all available listeners that implement it.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\n\n$eventsManager-&gt;attach(\n    'db',\n    function (Event $event, $connection) {\n        if ($event-&gt;isCancelable()) {\n            $event-&gt;stop();\n        }\n    }\n);\n</code></pre> <p>In the above example, if the event is cancelable, we will stop propagation. You can set a particular event to not be cancelable by utilizing the fourth parameter of <code>fire()</code>:</p> <pre><code>&lt;?php\n\n$eventsManager-&gt;fire('notifications:afterSend', $this, $data, false);\n</code></pre> <p>The <code>afterSend</code> event will no longer be cancelable and will execute on all listeners that implement it.</p> <p>NOTE</p> <p>You can stop the execution by returning <code>false</code> in your event (but not always). For instance, if you attach an event to <code>dispatch:beforeDispatchLoop</code> and your listener returns <code>false</code> the dispatch process will be halted. This is true if you only have one listener listening to the <code>dispatch:beforeDispatchLoop</code> event which returns <code>false</code>. If two listeners are attached to the event and the second one that executes returns <code>true</code> then the process will continue. If you wish to stop any subsequent events from firing, you will have to issue a <code>stop()</code> in your listener on the Event object.</p>"},{"location":"events/#priorities","title":"Priorities","text":"<p>When attaching listeners you can set a specific priority. Setting up priorities when attaching listeners to your events manager defines the order in which they are called:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$eventsManager = new EventsManager();\n\n$eventsManager-&gt;enablePriorities(true);\n\n$eventsManager-&gt;attach(\n    'db', \n    new QueryListener(), \n    150\n);\n$eventsManager-&gt;attach(\n    'db', \n    new QueryListener(), \n    100\n);\n$eventsManager-&gt;attach(\n    'db', \n    new QueryListener(), \n    50\n); \n</code></pre> <p>NOTE</p> <p>In order for the priorities to work <code>enablePriorities()</code> has to be called with <code>true</code> so as to enable them. Priorities are disabled by default</p> <p>NOTE</p> <p>A high priority number means that the listener will be processed before those with lower priorities</p>"},{"location":"events/#responses","title":"Responses","text":"<p>The events manager can also collect any responses returned by each event and return them back using the <code>getResponses()</code> method. The method returns an array with the responses:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Manager as EventsManager;\n\n$eventsManager = new EventsManager();\n\n$eventsManager-&gt;collectResponses(true);\n\n$eventsManager-&gt;attach(\n    'custom:custom',\n    function () {\n        return 'first response';\n    }\n);\n\n$eventsManager-&gt;attach(\n    'custom:custom',\n    function () {\n        return 'second response';\n    }\n);\n\n$eventsManager-&gt;fire('custom:custom', $eventsManager, null);\n\nprint_r($eventsManager-&gt;getResponses());\n</code></pre> <p>The above example produces:</p> <pre><code>[\n    0 =&gt; 'first response',\n    1 =&gt; 'second response',\n]\n</code></pre> <p>NOTE</p> <p>In order for the priorities to work <code>collectResponses()</code> has to be called with <code>true</code> so as to enable collecting them.</p>"},{"location":"events/#exceptions","title":"Exceptions","text":"<p>Any exceptions thrown in the Paginator component will be of type Phalcon\\Events\\Exception. You can use this exception to selectively catch exceptions thrown only from this component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\EventsManager;\nuse Phalcon\\Events\\Exception;\n\ntry {\n\n    $eventsManager = new EventsManager();\n\n    $eventsManager-&gt;attach('custom:custom', true);\n} catch (Exception $ex) {\n    echo $ex-&gt;getMessage();\n}\n</code></pre>"},{"location":"events/#controllers","title":"Controllers","text":"<p>Controllers act as listeners already registered in the events manager. As a result, you only need to create a method with the same name as a registered event and it will be fired.</p> <p>For instance if we want to send a user to the <code>/login</code> page if they are not logged in, we can add the following code in our master controller:</p> <p><pre><code>&lt;?php\n\nnamespace MyApp\\Controller;\n\nuse Phalcon\\Logger;\nuse Phalcon\\Dispatcher;\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Mvc\\Controller;\nuse MyApp\\Auth\\Adapters\\AbstractAdapter;\n\n/**\n * Class BaseController\n *\n * @property AbstractAdapter $auth\n * @property Logger          $logger\n * @property Response        $response\n */\nclass BaseController extends Controller\n{\n    public function beforeExecuteRoute(Dispatcher $dispatcher)\n    {\n        /**\n         * Send them to the login page if no identity exists\n         */\n        if (true !== $this-&gt;auth-&gt;isLoggedIn()) {\n            $this-&gt;response-&gt;redirect(\n                '/login',\n                true\n            );\n\n            return false;\n        }\n\n        return true;\n    }\n}\n</code></pre> Execute the code before the router so we can determine if the user is logged in or not. If not, forward them to the login page.</p>"},{"location":"events/#models","title":"Models","text":"<p>Similar to Controllers, Models also act as listeners already registered in the events manager. As a result, you only need to create a method with the same name as a registered event and it will be fired.</p> <p>In the following example, we are use the <code>beforeCreate</code> event, to automatically calculate an invoice number:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;use function str_pad;\n\n/**\n * Class Invoices\n *\n * @property string $inv_created_at\n * @property int    $inv_cst_id\n * @property int    $inv_id\n * @property string $inv_number\n * @property string $inv_title\n * @property float  $inv_total\n */\nclass Invoices extends Model\n{\n    /**\n     * @var int\n     */\n    public $inv_cst_id;\n\n    /**\n     * @var string\n     */\n    public $inv_created_at;\n\n    /**\n     * @var int\n     */\n    public $inv_id;\n\n    /**\n     * @var string\n     */\n    public $inv_number;\n\n    /**\n     * @var string\n     */\n    public $inv_title;\n\n    /**\n     * @var float\n     */\n    public $inv_total;\n\n    public function beforeCreate()\n    {\n        $date     = date('YmdHis');\n        $customer = substr(\n            str_pad(\n                $this-&gt;inv_cst_id, 6, '0', STR_PAD_LEFT\n            ),\n            -6\n        );\n\n        $this-&gt;inv_number = 'INV-' . $customer . '-' . $date;\n    }\n}\n</code></pre>"},{"location":"events/#custom","title":"Custom","text":"<p>The Phalcon\\Events\\ManagerInterface interface must be implemented to create your own events manager replacing the one provided by Phalcon.</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Events;\n\nuse Phalcon\\Events\\ManagerInterface;\n\nclass EventsManager implements ManagerInterface\n{\n    /**\n     * Attach a listener to the events manager\n     *\n     * @param string          $eventType\n     * @param object|callable $handler\n     */\n    public function attach(string $eventType, $handler);\n\n    /**\n     * Detach the listener from the events manager\n     *\n     * @param string          $eventType\n     * @param object|callable $handler\n     */\n    public function detach(string $eventType, $handler);\n\n    /**\n     * Removes all events from the EventsManager\n     * \n     * @param string $type\n     */\n    public function detachAll(string $type = null);\n\n    /**\n     * Fires an event in the events manager causing the active \n     * listeners to be notified about it\n     *\n     * @param string $eventType\n     * @param object $source\n     * @param mixed  $data\n     * @param mixed  $cancelable\n     * \n     * @return mixed\n     */\n    public function fire(\n        string $eventType, \n        $source, \n        $data = null, \n        bool $cancelable = false\n    );\n\n    /**\n     * Returns all the attached listeners of a certain type\n     *\n     * @param string $type\n     *\n     * @return array\n     */\n    public function getListeners(string $type): array;\n\n    /**\n     * Check whether certain type of event has listeners\n     *\n     * @param string $type\n     *\n     * @return bool\n     */\n    public function hasListeners(string $type): bool;\n}\n</code></pre>"},{"location":"events/#list-of-events","title":"List of Events","text":"<p>The events available in Phalcon are:</p> Component Event Parameters ACL <code>acl:afterCheckAccess</code> Acl ACL <code>acl:beforeCheckAccess</code> Acl Application <code>application:afterHandleRequest</code> Application, Controller Application <code>application:afterStartModule</code> Application, Module Application <code>application:beforeHandleRequest</code> Application, Dispatcher Application <code>application:beforeSendResponse</code> Application, Response Application <code>application:beforeStartModule</code> Application, Module Application <code>application:boot</code> Application Application <code>application:viewRender</code> Application, View CLI <code>dispatch:beforeException</code> Console, Exception Console <code>console:afterHandleTask</code> Console, Task Console <code>console:afterStartModule</code> Console, Module Console <code>console:beforeHandleTask</code> Console, Dispatcher Console <code>console:beforeStartModule</code> Console, Module Console <code>console:boot</code> Console Db <code>db:afterQuery</code> Db Db <code>db:beforeQuery</code> Db Db <code>db:beginTransaction</code> Db Db <code>db:createSavepoint</code> Db, Savepoint Name Db <code>db:commitTransaction</code> Db Db <code>db:releaseSavepoint</code> Db, Savepoint Name Db <code>db:rollbackTransaction</code> Db Db <code>db:rollbackSavepoint</code> Db, Savepoint Name Dispatcher <code>dispatch:afterBinding</code> Dispatcher Dispatcher <code>dispatch:afterDispatch</code> Dispatcher Dispatcher <code>dispatch:afterDispatchLoop</code> Dispatcher Dispatcher <code>dispatch:afterExecuteRoute</code> Dispatcher Dispatcher <code>dispatch:afterInitialize</code> Dispatcher Dispatcher <code>dispatch:beforeDispatch</code> Dispatcher Dispatcher <code>dispatch:beforeDispatchLoop</code> Dispatcher Dispatcher <code>dispatch:beforeException</code> Dispatcher, Exception Dispatcher <code>dispatch:beforeExecuteRoute</code> Dispatcher Dispatcher <code>dispatch:beforeForward</code> Dispatcher, array  (MVC Dispatcher) Dispatcher <code>dispatch:beforeNotFoundAction</code> Dispatcher Loader <code>loader:afterCheckClass</code> Loader, Class Name Loader <code>loader:beforeCheckClass</code> Loader, Class Name Loader <code>loader:beforeCheckPath</code> Loader Loader <code>loader:pathFound</code> Loader, File Path Micro <code>micro:afterBinding</code> Micro Micro <code>micro:afterHandleRoute</code> Micro, return value mixed Micro <code>micro:afterExecuteRoute</code> Micro Micro <code>micro:beforeException</code> Micro, Exception Micro <code>micro:beforeExecuteRoute</code> Micro Micro <code>micro:beforeHandleRoute</code> Micro Micro <code>micro:beforeNotFound</code> Micro Model <code>model:afterCreate</code> Model Model <code>model:afterDelete</code> Model Model <code>model:afterFetch</code> Model Model <code>model:afterSave</code> Model Model <code>model:afterUpdate</code> Model Model <code>model:afterValidation</code> Model Model <code>model:afterValidationOnCreate</code> Model Model <code>model:afterValidationOnUpdate</code> Model Model <code>model:beforeDelete</code> Model Model <code>model:beforeCreate</code> Model Model <code>model:beforeSave</code> Model Model <code>model:beforeUpdate</code> Model Model <code>model:beforeValidation</code> Model Model <code>model:beforeValidationOnCreate</code> Model Model <code>model:beforeValidationOnUpdate</code> Model Model <code>model:notDeleted</code> Model Model <code>model:notSaved</code> Model Model <code>model:onValidationFails</code> Model Model <code>model:prepareSave</code> Model Model <code>model:validation</code> Model Models Manager <code>modelsManager:afterInitialize</code> Manager, Model Request <code>request:afterAuthorizationResolve</code> Request, ['server' =&gt; Server array] Request <code>request:beforeAuthorizationResolve</code> Request, ['headers' =&gt; [Headers], 'server' =&gt; [Server]] Response <code>response:afterSendHeaders</code> Response Response <code>response:beforeSendHeaders</code> Response Router <code>router:afterCheckRoutes</code> Router Router <code>router:beforeCheckRoutes</code> Router Router <code>router:beforeCheckRoute</code> Router, Route Router <code>router:beforeMount</code> Router, Group Router <code>router:matchedRoute</code> Router, Route Router <code>router:notMatchedRoute</code> Router, Route View <code>view:afterCompile</code> Volt View <code>view:afterRender</code> View View <code>view:afterRenderView</code> View View <code>view:beforeCompile</code> Volt View <code>view:beforeRender</code> View View <code>view:beforeRenderView</code> View, View Engine Path View <code>view:notFoundView</code> View, View Engine Path Volt <code>compileFilter</code> Volt, [name, arguments, function arguments] Volt <code>compileFunction</code> Volt, [name, arguments, function arguments] Volt <code>compileStatement</code> Volt, [statement] Volt <code>resolveExpression</code> Volt, [expression]"},{"location":"filter/","title":"Filter","text":""},{"location":"filter/#overview","title":"Overview","text":"<p>Sanitizing user input is a critical part of software development. Trusting or neglecting to sanitize user input could lead to unauthorized access to the content of your application, mainly user data, or even the server your application is hosted on.</p> <p></p> <p>Full image on XKCD</p> <p>Sanitizing content can be achieved using the Phalcon\\Filter and Phalcon\\Filter\\FilterFactory classes.</p>"},{"location":"filter/#filterfactory","title":"FilterFactory","text":"<p>This component creates a new locator with predefined filters attached to it. Each filter is lazy loaded for maximum performance. To instantiate the factory and retrieve the Phalcon\\Filter with the preset sanitizers you need to call <code>newInstance()</code></p> <pre><code>&lt;?php\n\nuse Phalcon\\Filter\\FilterFactory;\n\n$factory = new FilterFactory();\n\n$locator = $factory-&gt;newInstance();\n</code></pre> <p>You can now use the locator wherever you need and sanitize content as per the needs of your application. </p>"},{"location":"filter/#filter_1","title":"Filter","text":"<p>The Phalcon\\Filter component implements a locator service and can be used as a stand alone component, without initializing the built-in filters. </p> <pre><code>&lt;?php\n\nuse MyApp\\Sanitizers\\HelloSanitizer;\nuse Phalcon\\Filter;\n\n$services = [\n    'hello' =&gt; HelloSanitizer::class,\n];\n\n$locator = new Filter($services);\n\n$text = $locator-&gt;hello('World');\n</code></pre> <p>NOTE</p> <p>The Phalcon\\Di\\FactoryDefault container already has a Phalcon\\Filter object loaded with the predefined sanitizers. The component can be accessed using the <code>filter</code> name.</p>"},{"location":"filter/#built-in","title":"Built-in","text":"<p>NOTE</p> <p>Where appropriate, the sanitizers will cast the value to the type expected. For example the <code>absint</code> sanitizer will remove all non numeric characters from the input, cast the input to an integer and return its absolute value.</p> <p>The following are the built-in filters provided by this component:</p>"},{"location":"filter/#absint","title":"<code>absint</code>","text":"<p><pre><code>AbsInt( mixed $input ): int\n</code></pre> Removes any non numeric characters, casts the value to integer and returns its absolute value. Internally it uses [<code>filter_var</code>] for the integer part, <code>intval</code> for casting and <code>absint</code>.</p>"},{"location":"filter/#alnum","title":"<code>alnum</code>","text":"<p><pre><code>Alnum( mixed $input ): string | array\n</code></pre> Removes all characters that are not numbers or characters of the alphabet. It uses <code>preg_replace</code> which can also accept arrays of strings as the parameters. </p>"},{"location":"filter/#alpha","title":"<code>alpha</code>","text":"<p><pre><code>Alpha( mixed $input ): string | array\n</code></pre> Removes all characters that are not characters of the alphabet. It uses preg_replace which can also accept arrays of strings as the parameters. </p>"},{"location":"filter/#bool","title":"<code>bool</code>","text":"<p><pre><code>BoolVal( mixed $input ): bool\n</code></pre> Casts the value to a boolean. </p> <p>It also returns <code>true</code> if the value is:</p> <ul> <li><code>true</code></li> <li><code>on</code></li> <li><code>yes</code></li> <li><code>y</code></li> <li><code>1</code></li> </ul> <p>It also returns <code>false</code> if the value is:</p> <ul> <li><code>false</code></li> <li><code>off</code></li> <li><code>no</code></li> <li><code>n</code></li> <li><code>0</code></li> </ul>"},{"location":"filter/#email","title":"<code>email</code>","text":"<p><pre><code>Email( mixed $input ): string\n</code></pre> Removes all characters except letters, digits and <code>!#$%&amp;*+-/=?^_`{\\|}~@.[]</code>. Internally it uses <code>filter_var</code> with <code>FILTER_FLAG_EMAIL_UNICODE</code>.</p>"},{"location":"filter/#float","title":"<code>float</code>","text":"<p><pre><code>FloatVal( mixed $input ): float\n</code></pre> Removes all characters except digits, dot, plus and minus sign and casts the value as a <code>double</code>. Internally it uses <code>filter_var</code> and <code>(double)</code>.</p>"},{"location":"filter/#int","title":"<code>int</code>","text":"<p><pre><code>IntVal( mixed $input ): int\n</code></pre> Remove all characters except digits, plus and minus sign and casts the value as an integer. Internally it uses <code>filter_var</code> and <code>(int)</code>.</p>"},{"location":"filter/#lower","title":"<code>lower</code>","text":"<p><pre><code>Lower( mixed $input ): string\n</code></pre> Converts all characters to lowercase. If the <code>mbstring</code> extension is loaded, it will use mb_convert_case to perform the transformation. As a fallback it uses the <code>strtolower</code> PHP function, with utf8_decode.</p>"},{"location":"filter/#lowerfirst","title":"<code>lowerFirst</code>","text":"<p><pre><code>LowerFirst( mixed $input ): string\n</code></pre> Converts the first character of the input to lower case. Internally it uses <code>lcfirst</code>.</p>"},{"location":"filter/#regex","title":"<code>regex</code>","text":"<p><pre><code>Regex( mixed $input, mixed $pattern, mixed $replace ): string\n</code></pre> Performs a regex replacement on the input using a <code>pattern</code> and the <code>replace</code> parameter. Internally it uses <code>preg_replace</code>.</p>"},{"location":"filter/#remove","title":"<code>remove</code>","text":"<p><pre><code>Remove( mixed $input, mixed $replace ): string\n</code></pre> Performs a replacement on the input, replacing the <code>replace</code> parameter with an empty string, effectively removing it. Internally it uses <code>str_replace</code>.</p>"},{"location":"filter/#replace","title":"<code>replace</code>","text":"<p><pre><code>Replace( mixed $input, mixed $from, mixed $to ): string\n</code></pre> Performs a replacement on the input based on the <code>from</code> and <code>to</code> passed parameters. Internally it uses <code>str_replace</code>.</p>"},{"location":"filter/#special","title":"<code>special</code>","text":"<p><pre><code>Special( mixed $input ): string\n</code></pre> Escapes all HTML characters of the input, as well as <code>'\"&lt;&gt;&amp;</code> and characters with ASCII value less than 32. Internally it uses <code>filter_var</code>.</p>"},{"location":"filter/#specialfull","title":"<code>specialFull</code>","text":"<p><pre><code>SpecialFull( mixed $input ): string\n</code></pre> Converts all the special characters of the input to HTML entities (both double and single quotes). Internally it uses <code>filter_var</code>.</p>"},{"location":"filter/#string","title":"<code>string</code>","text":"<p><pre><code>StringVal( mixed $input ): string\n</code></pre> Strip tags and encode HTML entities, including single and double quotes. Internally it uses <code>filter_var</code>.</p>"},{"location":"filter/#striptags","title":"<code>striptags</code>","text":"<p><pre><code>StripTags( mixed $input ): int\n</code></pre> Removes all HTML and PHP tags from the input. Internally it uses <code>strip_tags</code>.</p>"},{"location":"filter/#trim","title":"<code>trim</code>","text":"<p><pre><code>Trim( mixed $input ): string\n</code></pre> Removes all leading and trailing whitespace from the input. Internally it uses <code>trim</code>.</p>"},{"location":"filter/#upper","title":"<code>upper</code>","text":"<p><pre><code>Upper( mixed $input ): string\n</code></pre> Converts all characters to uppercase. If the <code>mbstring</code> extension is loaded, it will use <code>mb_convert_case</code> to perform the transformation. As a fallback it uses the <code>strtoupper</code> PHP function, with <code>utf8_decode</code>.</p>"},{"location":"filter/#upperfirst","title":"<code>upperFirst</code>","text":"<p><pre><code>UpperFirst( mixed $input ): string\n</code></pre> Converts the first character of the input to upper case. Internally it uses <code>ucfirst</code>.</p>"},{"location":"filter/#upperwords","title":"<code>upperWords</code>","text":"<p><pre><code>UpperWords( mixed $input ): string\n</code></pre> Converts into uppercase the first character of each word from the input. Internally it uses <code>ucwords</code>.</p>"},{"location":"filter/#url","title":"<code>url</code>","text":"<p><pre><code>Url( mixed $input ): string\n</code></pre> Constants are available and can be used to define the type of sanitizing required:</p> <pre><code>&lt;?php\n\nconst FILTER_ABSINT      = 'absint';\nconst FILTER_ALNUM       = 'alnum';\nconst FILTER_ALPHA       = 'alpha';\nconst FILTER_BOOL        = 'bool';\nconst FILTER_EMAIL       = 'email';\nconst FILTER_FLOAT       = 'float';\nconst FILTER_INT         = 'int';\nconst FILTER_LOWER       = 'lower';\nconst FILTER_LOWERFIRST  = 'lowerFirst';\nconst FILTER_REGEX       = 'regex';\nconst FILTER_REMOVE      = 'remove';\nconst FILTER_REPLACE     = 'replace';\nconst FILTER_SPECIAL     = 'special';\nconst FILTER_SPECIALFULL = 'specialFull';\nconst FILTER_STRING      = 'string';\nconst FILTER_STRIPTAGS   = 'striptags';\nconst FILTER_TRIM        = 'trim';\nconst FILTER_UPPER       = 'upper';\nconst FILTER_UPPERFIRST  = 'upperFirst';\nconst FILTER_UPPERWORDS  = 'upperWords';\nconst FILTER_URL         = 'url';\n</code></pre>"},{"location":"filter/#sanitizing-data","title":"Sanitizing Data","text":"<p>Sanitizing is the process which removes specific characters from a value, that are not required or desired by the user or application. By sanitizing input we ensure that application integrity will be intact.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Filter\\FilterFactory;\n\n$factory = new FilterFactory();\n$locator = $factory-&gt;newInstance();\n\n// 'someone@example.com'\n$locator-&gt;sanitize('some(one)@exa\\mple.com', 'email');\n\n// 'hello'\n$locator-&gt;sanitize('hello&lt;&lt;', 'string');\n\n// '100019'\n$locator-&gt;sanitize('!100a019', 'int');\n\n// '100019.01'\n$locator-&gt;sanitize('!100a019.01a', 'float');\n</code></pre>"},{"location":"filter/#controllers","title":"Controllers","text":"<p>You can access the Phalcon\\Filter object from your controllers when accessing <code>GET</code> or <code>POST</code> input data (through the request object). The first parameter is the name of the variable to be obtained; the second is the sanitizer to be applied on it. The second parameter can also be an array with any number of sanitizers that you want to apply. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Filter;\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * Class ProductsController\n * \n * @property Request $request\n */\nclass ProductsController extends Controller\n{\n    public function saveAction()\n    {\n        if (true === $this-&gt;request-&gt;isPost()) {\n            $price = $this-&gt;request-&gt;getPost('price', 'double');\n\n            $email = $this-&gt;request-&gt;getPost(\n                'customerEmail',\n                Filter::FILTER_EMAIL\n            );\n        }\n    }\n}\n</code></pre>"},{"location":"filter/#action-parameters","title":"Action Parameters","text":"<p>If you have used the Phalcon\\Di\\FactoryDefault as your DI container, the Phalcon\\Filter is already registered for you with the default sanitizers. To access it we can use the name <code>filter</code>. If you do not use the Phalcon\\Di\\FactoryDefault container, you will need to set the service up in it, so that it can be accessible in your controllers.</p> <p>We can sanitize values passed into controller actions as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Filter;\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * Class ProductsController\n * \n * @property Filter $filter\n */\nclass ProductsController extends Controller\n{\n    public function showAction($productId)\n    {\n        $productId = $this-&gt;filter-&gt;sanitize($productId, 'absint');\n    }\n}\n</code></pre>"},{"location":"filter/#filtering-data","title":"Filtering Data","text":"<p>The Phalcon\\Filter both filters and sanitizes data, depending on the sanitizers used. For instance the <code>trim</code> sanitizer will remove all leading and trailing whitespace, leaving the remaining input unchanged. The description of each sanitizer (see Built-in Sanitizers) can help you to understand and use the sanitizers according to your needs.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Filter\\FilterFactory;\n\n$factory = new FilterFactory();\n\n$locator = $factory-&gt;newInstance();\n\n// 'Hello'\n$locator-&gt;sanitize('&lt;h1&gt;Hello&lt;/h1&gt;', 'striptags');\n\n// 'Hello'\n$locator-&gt;sanitize('  Hello   ', 'trim');\n</code></pre>"},{"location":"filter/#adding-sanitizers","title":"Adding Sanitizers","text":"<p>You can add your own sanitizers to Phalcon\\Filter. The sanitizer can be an anonymous function when initializing the locator:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Filter;\n\n$services = [\n    'md5' =&gt; function ($input) {\n        return md5($input);\n    },\n];\n\n$locator = new Filter($services);\n\n$sanitized = $locator-&gt;sanitize($value, 'md5');\n</code></pre> <p>If you already have an instantiated filter locator object (for instance if you have used the Phalcon\\Filter\\FilterFactory and <code>newInstance()</code>), then you can simply add the custom filter:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Filter\\FilterFactory;\n\n$factory = new FilterFactory();\n\n$locator = $factory-&gt;newInstance();\n\n$locator-&gt;set(\n    'md5',\n    function ($input) {\n        return md5($input);\n    }\n);\n\n$sanitized = $locator-&gt;sanitize($value, 'md5');\n</code></pre> <p>Or, if you prefer, you can implement the filter in a class:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Filter\\FilterFactory;\n\nclass IPv4\n{\n    public function __invoke($value)\n    {\n        return filter_var($value, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4);\n    }\n}\n\n$factory = new FilterFactory();\n\n$locator = $factory-&gt;newInstance();\n\n$locator-&gt;set(\n    'ipv4',\n    new Ipv4()\n);\n\n// Sanitize with the 'ipv4' filter\n$filteredIp = $locator-&gt;sanitize('127.0.0.1', 'ipv4');\n</code></pre>"},{"location":"filter/#combining-sanitizers","title":"Combining Sanitizers","text":"<p>There are times where one sanitizer is not enough for your data. For instance a very common usage is the <code>striptags</code> and <code>trim</code> sanitizers for text input. The Phalcon\\Filter component offers the ability to accept an array of names for sanitizers to be applied on the input value. The following example demonstrates this:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Filter\\FilterFactory;\n\n$factory = new FilterFactory();\n\n$locator = $factory-&gt;newInstance();\n\n// Returns 'Hello'\n$locator-&gt;sanitize(\n    '   &lt;h1&gt; Hello &lt;/h1&gt;   ',\n    [\n        'striptags',\n        'trim',\n    ]\n);\n</code></pre> <p>Note that this feature also works on the Phalcon\\Http\\Request object, when calling methods to retrieve data from <code>GET</code> and <code>POST</code>, namely <code>getQuery()</code> and <code>getPost()</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Filter;\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * Class ProductsController\n * \n * @property Request $request\n */\nclass ProductsController extends Controller\n{\n    public function saveAction()\n    {\n        if (true === $this-&gt;request-&gt;isPost()) {\n            $message =  $this-&gt;request-&gt;getPost(\n                '   &lt;h1&gt; Hello &lt;/h1&gt;   ',\n                [\n                    'striptags',\n                    'trim',\n                ]\n            );\n\n        }\n    }\n}\n</code></pre>"},{"location":"filter/#custom-sanitizer","title":"Custom Sanitizer","text":"<p>A custom sanitizer can be implemented as as an anonymous function. If however you prefer to use a class per sanitizer, all you need to do is make it a callable by implementing the __invoke method with the relevant parameters.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Filter\\FilterFactory;\n\n$factory = new FilterFactory();\n\n$locator = $factory-&gt;newInstance();\n\n$locator-&gt;set(\n    'md5',\n    function ($input) {\n        return md5($input);\n    }\n);\n\n$sanitized = $locator-&gt;sanitize($value, 'md5');\n</code></pre> <p>Or, if you prefer, you can implement the sanitizer in a class:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Filter\\FilterFactory;\n\nclass IPv4\n{\n    public function __invoke($value)\n    {\n        return filter_var($value, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4);\n    }\n}\n\n$factory = new FilterFactory();\n\n$locator = $factory-&gt;newInstance();\n\n$locator-&gt;set(\n    'ipv4',\n    function () {\n        return new Ipv4();\n    }\n);\n\n// Sanitize with the 'ipv4' filter\n$filteredIp = $locator-&gt;sanitize('127.0.0.1', 'ipv4');\n</code></pre>"},{"location":"flash/","title":"Flash Messages","text":""},{"location":"flash/#overview","title":"Overview","text":"<p>Flash messages are used to notify the user about the state of actions he/she made or simply show information to the users. These kinds of messages can be generated using this component.</p>"},{"location":"flash/#adapters","title":"Adapters","text":"<p>This component uses adapters that dictate how messages are displayed or sent to the view. There are two adapters available but you can easily create your own adapter using the Phalcon\\Flash\\FlashInterface interface.</p> Adapter Description Phalcon\\Flash\\Direct Directly outputs the messages passed to the flasher Phalcon\\Flash\\Session Temporarily stores the messages in session, then messages can be printed in the next request"},{"location":"flash/#direct","title":"Direct","text":"<p>Phalcon\\Flash\\Direct can be used to directly output messages set in the component. This is useful in instances where you need to show data back to the user in the current request that does not employ any redirects.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Flash\\Direct;\n\n$escaper = new Escaper();\n$flash   = new Direct($escaper);\n\n$flash-&gt;error('Something went wrong');\n</code></pre>"},{"location":"flash/#session","title":"Session","text":"<p>Phalcon\\Flash\\Session can be used to output messages set in the component. The component transparently stores the messages in the session to be used after a redirect. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Flash\\Session as FlashSession;\nuse Phalcon\\Session\\Adapter\\Stream;\nuse Phalcon\\Session\\Manager;\n\n$session = new Manager();\n$files = new Stream(\n    [\n        'savePath' =&gt; '/tmp',\n    ]\n);\n$session-&gt;setHandler($files);\n\n$escaper = new Escaper();\n$flash   = new FlashSession($escaper, $session);\n\n$flash-&gt;error('Something went wrong');\n</code></pre> <p>and in your view</p> <pre><code>&lt;?php echo $flash-&gt;output(); ?&gt;\n</code></pre> <p>or when using Volt</p> <pre><code>{% raw %}{{ flash.output() }}{% endraw %}\n</code></pre> <p>Imagine a login form that you need to validate the username and password and inform the user if their credentials are correct. The Phalcon\\Flash\\Session can be used to perform this task as follows: - User enters credentials and clicks <code>Login</code> - The application posts the data to the <code>loginAction</code> of our controller - The application checks the data and the combination is not correct - The application stores the <code>Incorrect Credentials</code> message in the flash messenger - The application redirects the user back to the login page (<code>/login</code>) - The Flash messenger still holds the message <code>Incorrect Credentials</code> and will display it on the screen.</p> <p>The example below displays this behavior in the controller. If an error occurs, whether this is an actual application error or a result of incorrect credentials, the code sets the messages using <code>$this-&gt;flash-&gt;error()</code>.</p> <pre><code>&lt;?php\n\nnamespace MyApp;\n\nuse Phalcon\\Flash\\Session;\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\View;\nuse Vokuro\\Auth\\Auth; \nuse Vokuro\\Models\\Users;\nuse Vokuro\\Models\\ResetPasswords;\n\n/**\n * Controller used handle non-authenticated session actions like \n * login/logout, user signup, and forgotten passwords\n *\n * @property Auth     $auth\n * @property Request  $request\n * @property Response $response\n * @property Session  $flashSession\n * @property View     $view\n */\nclass SessionController extends Controller\n{\n    /**\n     * Starts a session in the admin backend\n     */\n    public function loginAction()\n    {\n        $form = new LoginForm();\n\n        try {\n            if (true !== $this-&gt;request-&gt;isPost()) {\n                // ....\n            } else {\n                $postData = $this-&gt;request-&gt;getPost();\n                if (true !== $form-&gt;isValid($postData)) {\n                    // Flash\n                    foreach ($form-&gt;getMessages() as $message) {\n                        $this-&gt;flashSession-&gt;error($message);\n                    }\n                } else {\n                    $email    = $this-&gt;request-&gt;getPost('email');\n                    $password = $this-&gt;request-&gt;getPost('password');\n                    $remember = $this-&gt;request-&gt;getPost('remember');\n\n                    $this-&gt;auth-&gt;check(\n                        [\n                            'email'    =&gt; $email,\n                            'password' =&gt; $password,\n                            'remember' =&gt; $remember,\n                        ]\n                    );\n\n                    return $this-&gt;response-&gt;redirect('users');\n                }\n            }\n        } catch (AuthException $e) {\n            // Flash\n            $this-&gt;flashSession-&gt;error($e-&gt;getMessage());\n        }\n\n        $this-&gt;view-&gt;form = $form;\n    }\n}\n</code></pre> <p>and in your view</p> <pre><code>&lt;?php echo $flashSession-&gt;output(); ?&gt;\n</code></pre> <p>or when using Volt</p> <pre><code>{% raw %}{{ flashSession.output() }}{% endraw %}\n</code></pre> <p>NOTE</p> <p>In the above example, the <code>flashSession</code> service has been already registered in the DI container. For more information about this please check the relevant section below.</p>"},{"location":"flash/#styling","title":"Styling","text":"<p>The component (irrespective of adapter) offers automatic styling of messages on screen. This means that messages will be wrapped in <code>&lt;div&gt;</code> tags. There is also a mapping of message type to CSS class that you can take advantage of based on the stylesheet you use in your application. By default the component uses the following mapping:</p> Type Name of CSS class <code>error</code> <code>errorMessage</code> <code>notice</code> <code>noticeMessage</code> <code>success</code> <code>successMessage</code> <code>warning</code> <code>warningMessage</code> <p>By using the default classes, you can style <code>errorMessage</code> accordingly in the stylesheet of your application to make it appear the way you want it to. It is common for error messages to have a red background for instance so that they stand out. </p> <p>An error message:</p> <pre><code>$flash-&gt;error('Error message');\n</code></pre> <p>will produce:</p> <pre><code>&lt;div class=\"errorMessage\"&gt;Error message&lt;/div&gt;\n</code></pre> <p>If you do not wish to use the default classes, you can use the <code>setCssClasses()</code> method to replace the mapping of type of message to class name.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Flash\\Direct;\n\n$escaper = new Escaper();\n$flash   = new Direct($escaper);\n\nvar_dump(\n    $flash-&gt;getCssClasses()\n);\n\n// [\n//     \"error\"   =&gt; \"errorMessage\",\n//     \"notice\"  =&gt; \"noticeMessage\",\n//     \"success\" =&gt; \"successMessage\",\n//     \"warning\" =&gt; \"warningMessage\",\n// ];\n\n\n$cssClasses = [\n    'error'   =&gt; 'alert alert-danger',\n    'success' =&gt; 'alert alert-success',\n    'notice'  =&gt; 'alert alert-info',\n    'warning' =&gt; 'alert alert-warning',\n];\n\n$flash-&gt;setCssClasses($cssClasses);\n</code></pre> <p>and then calling </p> <pre><code>$flash-&gt;error('Error message');\n</code></pre> <p>will produce:</p> <pre><code>&lt;div class=\"alert alert-danger\"&gt;Error message&lt;/div&gt;\n</code></pre> <p>NOTE</p> <p>The <code>setCssClasses()</code> returns back the object so you can use in a more fluent interface by chaining calls.</p> <p>The component also allows you to specify a different template, so that you can control the HTML produced by the component. The <code>setCustomTemplate()</code> and <code>getCustomTemplate()</code> expose this functionality. The template needs to have two placeholders:</p> <ul> <li><code>%cssClass%</code> - where the CSS class will be injected</li> <li><code>%message%</code> - where the message will be injected</li> </ul> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Flash\\Direct;\n\n$escaper = new Escaper();\n$flash   = new Direct($escaper);\n\n$template = '&lt;span class=\"%cssClass%\"&gt;%message%&lt;/span&gt;';\n\n$flash-&gt;setCustomTemplate($template);\n</code></pre> <p>and then calling </p> <pre><code>$flash-&gt;error('Error message');\n</code></pre> <p>will produce:</p> <pre><code>&lt;span class=\"myErrorClass\"&gt;Error message&lt;/span&gt;\n</code></pre> <p>NOTE</p> <p>The <code>setCustomTemplate()</code> returns back the object so you can use in a more fluent interface by chaining calls.</p>"},{"location":"flash/#messages","title":"Messages","text":"<p>As mentioned above, the component has different types of messages. To add a message to the component you can call <code>message()</code> with the type as well as the message itself. The types of messages are:</p> <ul> <li><code>error</code></li> <li><code>notice</code></li> <li><code>success</code></li> <li><code>warning</code></li> </ul> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Flash\\Direct;\n\n$escaper = new Escaper();\n$flash   = new Direct($escaper);\n\n$flash-&gt;message('error', 'Error message');\n</code></pre> <p>While you can pass the type as the first parameter when calling <code>message()</code> you can also use the relevant helper methods that do that for you:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Flash\\Direct;\n\n$escaper = new Escaper();\n$flash   = new Direct($escaper);\n\n$flash-&gt;error('Error message');\n$flash-&gt;notice('Notice message');\n$flash-&gt;success('Success message');\n$flash-&gt;warning('Warning message');\n</code></pre> <p>If your application requires it, you might want to clear the messages at some point when building the response. To do so you can use the <code>clear()</code> method. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Flash\\Direct;\n\n$escaper = new Escaper();\n$flash   = new Direct($escaper);\n\n$flash-&gt;error('Error message');\n\n$flash-&gt;clear();\n</code></pre> <p>NOTE</p> <p><code>clear()</code> works only when the implicit flush is disabled (<code>setImplicitFlush(false)</code>)</p>"},{"location":"flash/#implicit-flush","title":"Implicit Flush","text":"<p>By default implicit flushing is set to <code>true</code>. You can however turn it off by using <code>setImplicitFlush(false)</code>. The purpose of this method is to set whether the output must be implicitly flushed to the output or returned as string</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Flash\\Direct;\n\n$escaper = new Escaper();\n$flash   = new Direct($escaper);\n\necho $flash-&gt;getImplicitFlush(); // true\n\n$flash-&gt;error('Error'); // No output\n\necho $flash\n    -&gt;setImplicitFlush(false) \n    -&gt;error('Error Message') // 'Error Message'\n;\n</code></pre> <p>NOTE</p> <p>The <code>setImplicitFlush()</code> returns back the object so you can use in a more fluent interface by chaining calls.</p> <p>NOTE</p> <p>When using the Phalcon\\Flash\\Direct component, to directly show results on the page you must set <code>setImplicitFlush()</code> to <code>false</code>.</p>"},{"location":"flash/#escaping","title":"Escaping","text":"<p>By default, the component will escape the contents of the message. There might be times however that you do not wish to escape the contents of your messages. You can use the <code>setAutoescape(false)</code>;</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Flash\\Direct;\n\n$escaper = new Escaper();\n$flash   = new Direct($escaper);\n\necho $flash-&gt;getAutoescape(); // true\n\n$flash\n    -&gt;setAutoescape(false)\n    -&gt;error('&lt;h1&gt;Error&lt;/h1&gt;')\n;\n</code></pre> <p>will produce</p> <pre><code>&lt;div class=\"errorMessage\"&gt;&amp;lt;h1&amp;gt;Error&amp;lt;/h1&amp;gt;&lt;/div&gt;\n</code></pre> <p>NOTE</p> <p>The <code>setAutoescape()</code> returns back the object so you can use in a more fluent interface by chaining calls.</p>"},{"location":"flash/#dependency-injection","title":"Dependency Injection","text":"<p>If you use the Phalcon\\Di\\FactoryDefault container, the Phalcon\\Flash\\Direct is already registered for you with the name <code>flash</code>. Additionally the Phalcon\\Flash\\Session is already registered for you with the name <code>flashSession</code>. </p> <p>An example of the registration of the service as well as accessing it is below:</p> <p>Direct</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Escaper;\nuse Phalcon\\Flash\\Direct;\n\n$container = new Di();\n$escaper   = new Escaper();\n\n$container-&gt;set(\n    'flash',\n    function () use ($escaper) {\n        return new Direct($escaper);\n    }\n);\n</code></pre> <p>Session</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Escaper;\nuse Phalcon\\Flash\\Session as FlashSession;\nuse Phalcon\\Session\\Adapter\\Stream;\nuse Phalcon\\Session\\Manager;\n\n$container = new Di();\n$escaper   = new Escaper();\n$session   = new Manager();\n$files     = new Stream(\n    [\n        'savePath' =&gt; '/tmp',\n    ]\n);\n$session-&gt;setHandler($files);\n\n$container-&gt;set(\n    'flashSession',\n    function () use ($escaper, $session) {\n        return new FlashSession($escaper, $session);\n    }\n);\n</code></pre> <p>NOTE</p> <p>You do not need to pass the escaper or the session in the constructor. If you use the Di container and those services are already register in it, they will be used internally. This is another way of instantiating the components.</p> <p>You can now use the component in a controller (or a component that implements Phalcon\\Di\\Injectable)</p> <pre><code>&lt;?php\n\nnamespace MyApp;\n\nuse Phalcon\\Flash\\Direct;\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * Invoices controller\n *\n * @property Direct $flash\n */\nclass InvoicesController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        $this-&gt;flash-&gt;success('The post was correctly saved!');\n    }\n}\n</code></pre>"},{"location":"forms/","title":"Forms","text":""},{"location":"forms/#overview","title":"Overview","text":"<p>Phalcon offers a components under the <code>Phalcon\\Forms</code> namespace that help developers create and maintain forms that can be used to render HTML elements on screen but also perform validations on the input from those elements.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Select;\n\n$form = new Form();\n\n$form-&gt;add(\n    new Text(\n        'nameLast'\n    )\n);\n\n$form-&gt;add(\n    new Text(\n        'nameFirst'\n    )\n);\n\n$form-&gt;add(\n    new Select(\n        'phoneType',\n        [\n            1 =&gt; 'Home',\n            2 =&gt; 'Work',\n            3 =&gt; 'Mobile',\n        ]\n    )\n);\n</code></pre> <p>In the template:</p> <pre><code>&lt;h1&gt;\n    Contacts\n&lt;/h1&gt;\n\n&lt;form method='post'&gt;\n\n    &lt;p&gt;\n        &lt;label&gt;\n            Last Name\n        &lt;/label&gt;\n\n        &lt;?php echo $form-&gt;render('nameLast'); ?&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;\n        &lt;label&gt;\n            First Name\n        &lt;/label&gt;\n\n        &lt;?php echo $form-&gt;render('nameFirst'); ?&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;\n        &lt;label&gt;\n            Gender\n        &lt;/label&gt;\n\n        &lt;?php echo $form-&gt;render('phoneType'); ?&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;\n        &lt;input type='submit' value='Save' /&gt;\n    &lt;/p&gt;\n\n&lt;/form&gt;\n</code></pre> <p>Each element in the form can be rendered as required by the developer. Internally, Phalcon\\Tag is used to produce the correct HTML for each element and you can pass additional HTML attributes as the second parameter of <code>render()</code>:</p> <pre><code>&lt;p&gt;\n    &lt;label&gt;\n        Name\n    &lt;/label&gt;\n\n    &lt;?php \n        echo $form-&gt;render(\n            'nameFirst', \n            [\n                'maxlength'   =&gt; 30, \n                'placeholder' =&gt; 'First Name',\n            ]\n        ); ?&gt;\n&lt;/p&gt;\n</code></pre> <p>HTML attributes also can be set in the element's definition:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Form;\n\n$form = new Form();\n\n$form-&gt;add(\n    new Text(\n        'nameFirst',\n        [\n            'maxlength'   =&gt; 30, \n            'placeholder' =&gt; 'First Name',\n        ]\n    )\n);\n</code></pre>"},{"location":"forms/#methods","title":"Methods","text":"<p>Phalcon\\Forms\\Form exposes a number of methods that help with setting up a form with the necessary elements so that it can be used for validation, rendering elements etc.</p> <p><pre><code>public function __construct(\n    mixed $entity = null, \n    array $userOptions = []\n)\n</code></pre> Constructor. Accepts optionally an <code>entity</code> object which will be read internally. If the properties of the object contain properties that match the names of the elements defined in the form, those elements will be populated with the values of the corresponding properties of the entity. The entity can be an object such as a Phalcon\\Mvc\\Model or even a <code>\\stdClass</code>. The second parameter is <code>userOptions</code> an optional array with user defined data.</p> <p>NOTE</p> <p>If the form has the <code>initialize</code> method present, the constructor will call it automatically with the same parameters</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Select;\nuse Phalcon\\Forms\\Form;\n\n$form = new Form(\n    null,\n    [\n        'phoneTypes' =&gt; [\n            1 =&gt; 'Home',\n            2 =&gt; 'Work',\n            3 =&gt; 'Mobile',\n        ],\n    ]\n);\n\n$form-&gt;add(\n    new Text(\n        'nameLast'\n    )\n);\n\n$form-&gt;add(\n    new Text(\n        'nameFirst'\n    )\n);\n\n$options    = $this-&gt;getUserOptions();\n$phoneTypes = $options['phoneTypes'] ?? [];\n$form-&gt;add(\n    new Select(\n        'phoneType',\n        $phoneTypes\n    )\n);\n</code></pre> <p>If the <code>entity</code> is passed and it is not an object, a Phalcon\\Forms\\Exception will be thrown.</p> <p><pre><code>public function add(\n    ElementInterface $element, \n    string $position = null, \n    bool $type = null\n): Form\n</code></pre> Adds an element to the form. The first parameter is an <code>ElementInterface</code> object. The second parameter <code>position</code> (if defined) is the name of the existing element we are targeting. The third boolean parameter <code>type</code> if set to <code>true</code> the new element will be added before the element defined in <code>position</code>. If not set or set to <code>null</code>/<code>false</code>, the new element will be added after the one defined by the <code>position</code> parameter. </p> <p><pre><code>public function bind(\n    array $data, \n    mixed $entity, \n    array $whitelist = []\n): Form\n</code></pre> Binds data to the entity. The first parameter <code>data</code> is an array of key/values. This usually is the <code>$_POST</code> array. The second parameter <code>entity</code> is an entity object. If the properties of the entity object contain properties that match the names of the <code>data</code>elements defined in the form, those elements will be populated with the values of the corresponding properties of the entity. The entity can be an object such as a Phalcon\\Mvc\\Model or even a <code>\\stdClass</code>. The third parameter <code>whitelist</code> is an array of whitelisted elements. Any element in the <code>whitelist</code> array that has the same name as an element in the <code>data</code> array will be ignored.</p> <p>The <code>bind</code> method takes the first array (e.g <code>$_POST</code>) and an entity object (e.g. <code>Invoices</code>). It loops through the array and if it finds an array key that exists in the form, it applies the necessary filters (defined in the form) to the value of the array. After that, it checks the entity object (<code>Invoices</code>) and assigns this value to any property that matches the array key. If a method exists as a setter with the same name as an array key, it will be called first (i.e. <code>name</code> -&gt; <code>setName()</code>).  This method allows us to quickly filter input and assign this input to the passed entity object.</p> <pre><code>&lt;?php\n\n$form-&gt;bind($_POST, $customer);\n\nif (true === $form-&gt;isValid()) {\n    $customer-&gt;save();\n}\n</code></pre> <p>If there are no elements in the form, a Phalcon\\Forms\\Exception will be thrown.</p> <p><pre><code>public function clear(mixed $fields = null): Form\n</code></pre> Clears every element in the form to its default value. If the passed parameter <code>fields</code> is a string, only that field will will be cleared. If an array is passed, all elements in the array will be cleared. Finally, if nothing is passed, all fields will be cleared.</p> <p><pre><code>public function count(): int\n</code></pre> Returns the number of elements in the form</p> <p><pre><code>public function current(): ElementInterface | bool\n</code></pre> Returns the current element in the iterator</p> <p><pre><code>public function get(string $name): ElementInterface\n</code></pre> Returns an element added to the form by its name. If the element is not found in the form, a Phalcon\\Forms\\Exception will be thrown.</p> <p><pre><code>public function getAction(): string\n</code></pre> Returns the form's action</p> <p><pre><code>public function getAttributes(): Attributes\n</code></pre> Returns the form's attributes collection. The object returned is Phalcon\\Html\\Attributes.</p> <p><pre><code>public function getElements(): ElementInterface[]\n</code></pre> Returns the form elements added to the form</p> <p><pre><code>public function getEntity()\n</code></pre> Returns the entity related to the model</p> <p><pre><code>public function getLabel(string $name): string\n</code></pre> Returns a label for an element. If the element is not found in the form, a Phalcon\\Forms\\Exception will be thrown.</p> <p><pre><code>public function getMessages(): Messages | array\n</code></pre> Returns the messages generated in the validation.</p> <pre><code>if (false === $form-&gt;isValid($_POST)) {\n    $messages = $form-&gt;getMessages();\n    foreach ($messages as $message) {\n        echo $message, \"&lt;br&gt;\";\n    }\n}\n</code></pre> <p><pre><code>public function getMessagesFor(string $name): Messages\n</code></pre> Returns the messages generated for a specific element</p> <p><pre><code>public function getValidation(): ValidationInterface\n</code></pre> Returns the validator object registered in the form</p> <p><pre><code>public function getUserOption(\n    string option, \n    mixed defaultValue = null\n): mixed\n</code></pre> Returns the value of an option if present. If the option is not present the <code>defaultValue</code> will be returned.</p> <p><pre><code>public function getUserOptions(): array\n</code></pre> Returns the options for the element</p> <p><pre><code>public function getValue(string $name): mixed | null\n</code></pre> Gets a value from the internal related entity or from the default value</p> <p><pre><code>public function has(string $name): bool\n</code></pre> Check if the form contains an element</p> <p><pre><code>public function hasMessagesFor(string $name): bool\n</code></pre> Check if messages were generated for a specific element</p> <p><pre><code>public function isValid(\n    array $data = null, \n    object $entity = null\n): bool\n</code></pre> Validates the form. The first element is the data that has been provided by the user. This is usually the <code>$_POST</code> array. </p> <p>The second optional parameter is <code>entity</code> (object). If passed, internally the component will call <code>bind()</code> which will: - Loop through the passed <code>data</code> - Check if the element from the <code>data</code> exists (with the same name) in the <code>entity</code> - If yes, check the form's whitelist array. If the element exists there, it will not be changed - The value of the element (from the <code>data</code> array) will be sanitized based on the defined filters (if any) - Call any setters on the <code>entity</code> if present - Assign the value to the property with the same name on the <code>entity</code>. </p> <p>Once the <code>bind()</code> process finishes, the modified <code>entity</code> will be passed in the <code>beforeValidation</code> event (if events are enabled) and after that all the validators will be called on the form using the modified <code>entity</code> object. </p> <p>NOTE</p> <p>Passing an <code>entity</code> object will result in the object being modified by the user input as described above. If you do not wish this behavior, you can clone the entity before passing it, so as to keep a copy of the original object</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Customers;\nuse Phalcon\\Forms\\Form;\n\n$customer = Customers::findFirst();\n$form = new Form($customer);\n\nif (true === $form-&gt;isValid($_POST, $customer)) {\n    $customer-&gt;save();\n}\n</code></pre> <p><pre><code>public function key(): int\n</code></pre> Returns the current position/key in the iterator</p> <p><pre><code>public function label(\n    string $name, \n    array $attributes = null\n): string\n</code></pre> Generate the label of an element added to the form including HTML. The first parameter is the name of the element while the second one is an array with optional parameters that need to be added to the <code>&lt;label&gt;</code> HTML tag. Such parameter can be CSS classes for instance. If the element is not found in the form, a Phalcon\\Forms\\Exception will be thrown.</p> <p><pre><code>public function next(): void\n</code></pre> Moves the internal iteration pointer to the next position</p> <p><pre><code>public function render(\n    string $name, \n    array attributes = []\n): string\n</code></pre> Renders a specific item in the form. The optional <code>attributes</code> array parameter can be used to pass additional parameters for the element to be rendered. If the element is not found in the form, a Phalcon\\Forms\\Exception will be thrown.</p> <p><pre><code>public function remove(string $name): bool\n</code></pre> Removes an element from the form</p> <p><pre><code>public function rewind(): void\n</code></pre> Rewinds the internal iterator</p> <p><pre><code>public function setAction(string $action): Form\n</code></pre> Sets the form's action</p> <p><pre><code>public function setEntity(object $entity): Form\n</code></pre> Sets the entity related to the model</p> <p><pre><code>public function setAttributes(\n    Attributes&gt; $attributes\n): AttributesInterface\n</code></pre> Set form attributes collection</p> <p><pre><code>public function setValidation(\n    ValidationInterface $validation\n);\n</code></pre> Sets the validation object in the form.</p> <p><pre><code>public function setUserOption(\n    string $option, \n    mixed $value\n): Form\n</code></pre> Sets a user defined option for the form</p> <p><pre><code>public function setUserOptions(array $options): Form\n</code></pre> Sets user defined options for the form</p> <p><pre><code>public function valid(): bool\n</code></pre> Returns if the current element in the iterator is valid or not</p>"},{"location":"forms/#initialization","title":"Initialization","text":"<p>Forms can be initialized outside the form class by adding elements to it. However you can reuse code or organize your form classes by implementing forms in their own classes:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\PhoneTypes;\nuse Phalcon\\Forms\\Element\\Select;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Form;\n\nclass CustomersForm extends Form\n{\n    public function initialize()\n    {\n        $this-&gt;add(\n            new Text(\n                'nameLast'\n            )\n        );\n\n        $this-&gt;add(\n            new Text(\n                'nameFirst'\n            )\n        );\n\n        $this-&gt;add(\n            new Select(\n                'phoneType',\n                PhoneTypes::find(),\n                [\n                    'emptyText'  =&gt; 'Select one...',\n                    'emptyValue' =&gt; '',\n                    'useEmpty'   =&gt; true,\n                    'using'      =&gt; [\n                        'typ_id',\n                        'typ_name',\n                    ],\n                ]\n            )\n        );\n    }\n}\n</code></pre> <p>We can also pass an array of user defined options in the constructor, that will offer more functionality.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Customers;\nuse Phalcon\\Forms\\Element\\Hidden;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Form;\n\nclass CustomersForm extends Form\n{\n    public function initialize(\n        Customers $customer,\n        array $options\n    ) {\n        $mode = $options['mode'] ?? 'view';\n        if ('edit' === $mode) {\n            $this-&gt;add(\n                new Hidden(\n                    'id'\n                )\n            );\n        }\n\n        $this-&gt;add(\n            new Text(\n                'nameLast'\n            )\n        );\n\n        $this-&gt;add(\n            new Text(\n                'nameFirst'\n            )\n        );\n    }\n}\n</code></pre> <p>In the form's instantiation you will use:</p> <p><pre><code>&lt;?php\n\nuse MyApp\\Models\\Customers;\n\n$form = new CustomersForm(\n    new Customers(),\n    [\n        'mode' =&gt; 'edit',\n    ]\n);\n</code></pre> The code above will check the <code>options</code> array during the <code>initialize</code> method. The code will check for the <code>mode</code> element in the array and if not present it will default to <code>view</code>. If the <code>mode</code> is <code>edit</code>, we are going to add a Phalcon\\Forms\\Element\\Hidden element with the entity's ID in the form. By using the <code>options</code> array we can create reusable forms and also pass in our form additional data that could be required.</p>"},{"location":"forms/#entities","title":"Entities","text":"<p>An entity such as a Phalcon\\Mvc\\Model, a PHP class or even a <code>\\stdClass</code> object can be passed to the form in order to set default values, or to assign the values from the form to the object.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Customers;\nuse Phalcon\\Forms\\Form;\n\n$customer = Customers::findFirst();\n$form = new Form($customer);\n\n$form-&gt;add(\n    new Text(\n        'nameFirst'\n    )\n);\n\n$form-&gt;add(\n    new Text(\n        'nameLast'\n    )\n);\n</code></pre> <p>Once the form is rendered if there are no default values assigned to the elements it will use the ones provided by the entity:</p> <pre><code>&lt;?php echo $form-&gt;render('nameLast'); ?&gt;\n</code></pre> <p>You can also validate the form and assign the values from the user input to the entity as follows:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Customers;\nuse Phalcon\\Forms\\Form;\n\n$customer = Customers::findFirst();\n$form = new Form($customer);\n\n$form-&gt;bind($_POST, $customer);\n\nif (true === $form-&gt;isValid()) {\n    $customer-&gt;save();\n}\n</code></pre> <p>In the above example, we get the first <code>Customer</code> record. We pass that object in our form to populate it with initial values. Following that we call the <code>bind</code> method with the entity and the <code>$_POST</code> array. The form will automatically filter input from the <code>$_POST</code> and assign the input to the entity object (<code>Customers</code>). We can then save the object if the form has passed validation.</p> <p>We can also use a PHP class as an entity:</p> <pre><code>&lt;?php\n\nclass Preferences\n{\n    public $timezone = 'Europe/Amsterdam';\n\n    public $receiveEmails = 'No';\n}\n</code></pre> <p>Using this class as entity, allows the form to take the default values from it:</p> <pre><code>&lt;?php\n\n$form = new Form(\n    new Preferences()\n);\n\n$form-&gt;add(\n    new Select(\n        'timezone',\n        [\n            'America/New_York'  =&gt; 'New York',\n            'Europe/Amsterdam'  =&gt; 'Amsterdam',\n            'America/Sao_Paulo' =&gt; 'Sao Paulo',\n            'Asia/Tokyo'        =&gt; 'Tokyo',\n        ]\n    )\n);\n\n$form-&gt;add(\n    new Select(\n        'receiveEmails',\n        [\n            'Yes' =&gt; 'Yes, please!',\n            'No'  =&gt; 'No, thanks',\n        ]\n    )\n);\n</code></pre> <p>Entities can implement getters, which have a higher precedence than public properties. These methods offer more flexibility to generate values:</p> <p><pre><code>&lt;?php\n\nclass Preferences\n{\n    public $timezone;\n\n    public $receiveEmails;\n\n    public function getTimezone()\n    {\n        return 'Europe/Amsterdam';\n    }\n\n    public function getReceiveEmails()\n    {\n        return 'No';\n    }\n}\n</code></pre> For the above entity class, the <code>getReceiveEmails</code> and <code>getTimezone</code> methods will be used instead of the <code>receiveEmails</code> and <code>timezone</code> properties. </p>"},{"location":"forms/#elements","title":"Elements","text":"<p>Phalcon provides a set of built-in elements to use in your forms, all these elements are located in the <code>Phalcon\\Forms\\Element</code> namespace:</p> Name Description Phalcon\\Forms\\Element\\Check Generate <code>input[type=check]</code> elements Phalcon\\Forms\\Element\\Date Generate <code>input[type=date]</code> elements Phalcon\\Forms\\Element\\Email Generate <code>input[type=email]</code> elements Phalcon\\Forms\\Element\\File Generate <code>input[type=file]</code> elements Phalcon\\Forms\\Element\\Hidden Generate <code>input[type=hidden]</code> elements Phalcon\\Forms\\Element\\Numeric Generate <code>input[type=number]</code> elements Phalcon\\Forms\\Element\\Password Generate <code>input[type=password]</code> elements Phalcon\\Forms\\Element\\Radio Generate <code>radio</code> elements Phalcon\\Forms\\Element\\Select Generate <code>select</code> elements based on choices Phalcon\\Forms\\Element\\Submit Generate <code>input[type=submit]</code> elements Phalcon\\Forms\\Element\\Text Generate <code>input[type=text]</code> elements Phalcon\\Forms\\Element\\TextArea Generate <code>textarea</code> elements <p>These elements use the Phalcon\\Tag component transparently.</p> <p>NOTE</p> <p>For more information regarding HTML elements, you can check our Tag document</p> <p>The Phalcon\\Forms\\Element\\Select supports the <code>useEmpty</code> option to enable the use of a blank element within the list of available options. The options <code>emptyText</code> and<code>emptyValue</code> are optional, which allow you to customize, respectively, the text and the value of the empty element</p> <p>You can also create your own elements by extending the Phalcon\\Forms\\Element\\ElementInterface interface.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Element;\n\nclass MyElement extends Element\n{\n    public function render($attributes = null)\n    {\n        $html = '';// HTML\n\n        return $html;\n    }\n}\n</code></pre>"},{"location":"forms/#filtering","title":"Filtering","text":"<p>A form is also able to filter data before it is validated. You can set filters in each element:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Form;\n\n$form = new Form();\n\n$name = new Text('nameLast');\n$name-&gt;setFilters(\n    [\n        'string',\n        'trim',\n    ]\n);\n$form-&gt;add($name);\n\n$email = new Text('email');\n$email-&gt;setFilters(\n    'email'\n);\n$form-&gt;add($email);\n</code></pre> <p>NOTE</p> <p>For more information regarding filters, you can check our Filter document</p>"},{"location":"forms/#validation","title":"Validation","text":"<p>Phalcon forms are integrated with the validation component to offer instant validation. Built-in or custom validators could be set to each element:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\nuse Phalcon\\Validation\\Validator\\StringLength;\n\n$name = new Text(\n    'nameLast'\n);\n\n$name-&gt;addValidator(\n    new PresenceOf(\n        [\n            'message' =&gt; 'The name is required',\n        ]\n    )\n);\n\n$name-&gt;addValidator(\n    new StringLength(\n        [\n            'min'            =&gt; 10,\n            'messageMinimum' =&gt; 'The name is too short',\n        ]\n    )\n);\n\n$form-&gt;add($name);\n</code></pre> <p>Then you can validate the form according to the input entered by the user:</p> <pre><code>&lt;?php\n\nif (false === $form-&gt;isValid($_POST)) {\n    $messages = $form-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo $message, '&lt;br&gt;';\n    }\n}\n</code></pre> <p>Validators are executed in the same order as they were registered.</p> <p>By default messages generated by all the elements in the form are joined so they can be traversed using a single <code>foreach</code>. You can also get specific messages for an element:</p> <pre><code>&lt;?php\n\n$messages = $form-&gt;getMessagesFor('nameLast');\n\nforeach ($messages as $message) {\n    echo $message, '&lt;br&gt;';\n}\n</code></pre>"},{"location":"forms/#rendering","title":"Rendering","text":"<p>You can render the form with total flexibility, the following example shows how to render each element using a standard procedure:</p> <pre><code>&lt;form method='post'&gt;\n    &lt;?php\n\n        // Traverse the form\n        foreach ($form as $element) {\n            // Get any generated messages for the current element\n            $messages = $form-&gt;getMessagesFor(\n                $element-&gt;getName()\n            );\n\n            if (count($messages)) {\n                // Print each element\n                echo '&lt;div class=\"messages\"&gt;';\n\n                foreach ($messages as $message) {\n                    echo $message;\n                }\n\n                echo '&lt;/div&gt;';\n            }\n\n            echo '&lt;p&gt;';\n            echo '&lt;label for=\"' . \n                    $element-&gt;getName() .\n                 '\"&gt;' .\n                 $element-&gt;getLabel() .\n                 '&lt;/label&gt;' \n             ;\n\n            echo $element;\n            echo '&lt;/p&gt;';\n        }\n    ?&gt;\n\n    &lt;input type='submit' value='Send' /&gt;\n&lt;/form&gt;\n</code></pre> <p>Or reuse the logic in your form class:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Form;\n\nclass ContactForm extends Form\n{\n    public function initialize()\n    {\n        // ...\n    }\n\n    public function renderDecorated($name)\n    {\n        $element  = $this-&gt;get($name);\n        $messages = $this-&gt;getMessagesFor(\n            $element-&gt;getName()\n        );\n\n        if (count($messages)) {\n            echo \"&lt;div class='messages'&gt;\";\n\n            foreach ($messages as $message) {\n                echo $this-&gt;flash-&gt;error($message);\n            }\n\n            echo '&lt;/div&gt;';\n        }\n\n        echo '&lt;p&gt;';\n        echo '&lt;label for=\"' .\n                $element-&gt;getName() .\n             '\"&gt;' .\n             $element-&gt;getLabel() .\n             '&lt;/label&gt;';\n\n        echo $element;\n        echo '&lt;/p&gt;';\n    }\n}\n</code></pre> <p>In the view:</p> <pre><code>&lt;?php\n\necho $element-&gt;renderDecorated('nameLast');\necho $element-&gt;renderDecorated('nameFirst');\n</code></pre>"},{"location":"forms/#events","title":"Events","text":"<p>Whenever forms are implemented as classes, the callbacks: <code>beforeValidation()</code> and <code>afterValidation()</code> methods can be implemented in the form's class to perform pre-validations and post-validations:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Form;\n\nclass ContactForm extends Form\n{\n    public function beforeValidation()\n    {\n\n    }\n}\n</code></pre>"},{"location":"forms/#manager","title":"Manager","text":"<p>This component provides the Phalcon\\Forms\\Manager that can be used by the developer to register forms and access them via the service locator:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Forms\\Manager;\n\n$container = new FactoryDefault();\n$container-&gt;set(\n    'forms',\n    function () {\n        return new Manager();\n    }\n);\n</code></pre> <p>Forms are added to the forms manager and referenced by a unique name:</p> <pre><code>&lt;?php\n\n$this\n    -&gt;forms\n    -&gt;set(\n        'login',\n        new LoginForm()\n    )\n;\n</code></pre> <p>Using the unique name, forms can be accessed in any part of the application:</p> <pre><code>&lt;?php\n\n$loginForm = $this-&gt;forms-&gt;get('login');\n\necho $loginForm-&gt;render();\n</code></pre> <p>If a form is not found in the manager, a Phalcon\\Forms\\Exception will be thrown.</p>"},{"location":"forms/#exceptions","title":"Exceptions","text":"<p>Any exceptions thrown in the <code>Phalcon\\Forms</code> namespace will be Phalcon\\Forms\\Exception. You can use these exceptions to selectively catch exceptions thrown only from this component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Exception;\nuse Phalcon\\Forms\\Manager;\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * @property Manager $forms\n */\nclass IndexController extends Controller\n{\n    public function index()\n    {\n        try {\n            $this-&gt;forms-&gt;get('unknown-form');\n        } catch (Exception $ex) {\n            echo $ex-&gt;getMessage();\n        }\n    }\n}\n</code></pre>"},{"location":"forms/#dependency-injection","title":"Dependency Injection","text":"<p>Phalcon\\Forms\\Form extends Phalcon\\Di\\Injectable so you have access to the application services if needed:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Element\\Hidden;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Form;\nuse Phalcon\\Security;\n\n/**\n * @property Security $security\n */\nclass ContactForm extends Form\n{\n    public function initialize()\n    {\n        // Set the same form as entity\n        $this-&gt;setEntity($this);\n\n        // Add a text element to capture the 'email'\n        $this-&gt;add(\n            new Text(\n                'email'\n            )\n        );\n\n        // Add a text element to put a hidden CSRF\n        $this-&gt;add(\n            new Hidden(\n                'csrf'\n            )\n        );\n    }\n\n    public function getCsrf()\n    {\n        return $this-&gt;security-&gt;getToken();\n    }\n}\n</code></pre>"},{"location":"forms/#additional-resources","title":"Additional Resources","text":"<ul> <li>V\u00f6kur\u00f3, is a sample application that uses the forms builder to create and manage forms, [GitHub]</li> </ul>"},{"location":"generating-backtrace/","title":"Generating a Backtrace","text":"<p>Phalcon is compiled into a C extension loaded on your web server. Because of that, bugs lead to segmentation faults, causing Phalcon to crash some of your web server processes. </p> <p>For debugging these segmentation faults a stacktrace is required. Creating a stack trace requires a special build of php and some steps need to be done to generate a trace that allows the Phalcon team to debug this behavior. </p> <p>Please follow this guide to understand how to generate the backtrace.</p> <p>https://bugs.php.net/bugs-generating-backtrace.php</p> <p>https://bugs.php.net/bugs-generating-backtrace-win32.php</p>"},{"location":"helper/","title":"Helper Component","text":""},{"location":"helper/#overview","title":"Overview","text":"<p><code>Phalcon\\Helper</code> a component exposing helper classes and static methods used throughout the framework. </p>"},{"location":"helper/#arr","title":"Arr","text":"<p>Phalcon\\Helper\\Arr exposes static methods that offer quick access to common functionality when working with arrays.</p>"},{"location":"helper/#chunk","title":"<code>chunk</code>","text":"<p><pre><code>final public static function chunk(\n    array $collection, \n    int $size, \n    bool $preserveKeys = false\n): array\n</code></pre> Chunks an array into smaller arrays of a specified size.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$source   = [\n    'k1' =&gt; 1,\n    'k2' =&gt; 2,\n    'k3' =&gt; 3,\n    'k4' =&gt; 4,\n    'k5' =&gt; 5,\n    'k6' =&gt; 6,\n];\n\n$chunks = Arr::chunk($source, 2);\n\n// [\n//    [1, 2],\n//    [3, 4],\n//    [5, 6],\n// ]\n</code></pre>"},{"location":"helper/#first","title":"first","text":"<p><pre><code>final public static function first(\n    array $collection, \n    mixed $method = null\n): var\n</code></pre> Returns the first element of the collection. If a callable is passed, the element returned is the first that validates <code>true</code></p> <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$collection = [\n    'Phalcon',\n    'Framework',\n];\n\necho Arr::first($collection); // 'Phalcon'\n\n$result = Arr::first(\n    $collection,\n    function ($element) {\n        return strlen($element) &gt; 8;\n    }\n);\n\necho $result; // 'Framework'\n</code></pre>"},{"location":"helper/#firstkey","title":"<code>firstKey</code>","text":"<p><pre><code>final public static function firstKey(\n    array $collection, \n    mixed $method = null\n): var\n</code></pre> Returns the key of the first element of the collection. If a callable is passed, the element returned is the first that validates true</p> <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$collection = [\n    1 =&gt; 'Phalcon',\n    3 =&gt; 'Framework',\n];\n\necho Arr::firstKey($collection); // 1\n\n$result = Arr::firstKey(\n    $collection,\n    function ($element) {\n        return strlen($element) &gt; 8;\n    }\n);\n\necho $result; // 3\n</code></pre>"},{"location":"helper/#flatten","title":"<code>flatten</code>","text":"<p><pre><code>final public static function flatten(\n    array $collection, \n    bool $deep = false\n): array\n</code></pre> Flattens an array up to the one level depth. If <code>$deep</code> is set to <code>true</code>, it traverses all elements and flattens them all. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$source   = [1, [2], [[3], 4], 5];\nvar_dump(\n    Arr::flatten($source)\n);\n\n// [1, 2, [3], 4, 5];\n\n$source   = [1, [2], [[3], 4], 5];\nvar_dump(\n    Arr::flatten($source, true)\n);\n// [1, 2, 3, 4, 5];\n</code></pre></p>"},{"location":"helper/#get","title":"<code>get</code>","text":"<p><pre><code>final public static function get(\n    array $collection, \n    mixed $index, \n    mixed $defaultValue = null,\n    string $cast = null\n): mixed\n</code></pre> Retrieves an element from an array. If the element exists its value is returned. If not, the <code>defaultValue</code> is returned. The <code>cast</code> parameter accepts a string that defines what the returned value will be casted. The available values are:</p> <ul> <li><code>array</code></li> <li><code>bool</code></li> <li><code>boolean</code></li> <li><code>double</code></li> <li><code>float</code></li> <li><code>int</code></li> <li><code>integer</code></li> <li><code>null</code></li> <li><code>object</code></li> <li><code>string</code></li> </ul> <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\necho Arr::get($data, 'year');                    // 1776\necho Arr::get($data, 'unknown', 1776);           // 1776\necho Arr::get($data, 'unknown', 1776, 'string'); // '1776'\n</code></pre>"},{"location":"helper/#group","title":"<code>group</code>","text":"<p><pre><code>final public static function group(\n    array $collection, \n    mixed $method\n): array\n</code></pre> Groups the elements of an array based on the passed callable and returns the array of the grouped elements back. The callable can be a string as the element name, a callable or a method available. The array can contain sub arrays as elements or objects with relevant properties. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$collection =  [\n    ['name' =&gt; 'Paul',  'age' =&gt; 34],\n    ['name' =&gt; 'Peter', 'age' =&gt; 31],\n    ['name' =&gt; 'John',  'age' =&gt; 29],\n];\n\n$result = Arr::group($collection, 'age');\nvar_dump($result);\n\n// [\n//     34 =&gt; [\n//         [\n//             'name' =&gt; 'Paul',\n//             'age' =&gt; 34,\n//         ],\n//     ],\n//     31 =&gt; [\n//         [\n//             'name' =&gt; 'Peter',\n//             'age' =&gt; 31,\n//         ],\n//     ],\n//     29 =&gt; [\n//         [\n//             'name' =&gt; 'John',\n//             'age' =&gt; 29,\n//         ],\n//     ],\n// ]\n\n\n$peter = new \\stdClass();\n$peter-&gt;name = 'Peter';\n$peter-&gt;age = 34;\n\n$paul = new \\stdClass();\n$paul-&gt;name = 'Paul';\n$paul-&gt;age = 31;\n\n$collection = [\n    'peter' =&gt; $peter,\n    'paul'  =&gt; $paul,\n];\n\n$result = = Arr::group($collection, 'name');\nvar_dump($result);\n\n// [\n//     'Peter' =&gt; [\n//          stdClass(\n//              name : 'Peter',\n//              age  : 34\n//          ),\n//      ],\n//     'Paul'  =&gt; [\n//          stdClass(\n//              name : 'Paul',\n//              age  : 31\n//          ),\n//      ],\n// ]\n\n\n$collection = ['one', 'two', 'three'];\n\n$result = Arr::group($collection, 'strlen');\nvar_dump($result);\n\n// [\n//     3 =&gt; ['one', 'two'],\n//     5 =&gt; ['three']\n// ]\n</code></pre></p>"},{"location":"helper/#has","title":"<code>has</code>","text":"<p><pre><code>final public static function has(array $collection, mixed $index): bool\n</code></pre> Checks if an element exists in an array. Returns <code>true</code> if found, <code>false</code> otherwise.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\necho Arr::has($data, 'year');          // true\necho Arr::has($data, 'unknown');       // false\n</code></pre>"},{"location":"helper/#isunique","title":"<code>isUnique</code>","text":"<p><pre><code>final public static function isUnique(array $collection): bool\n</code></pre> Checks a flat list for duplicate values. Returns <code>true</code> if duplicate values exist and <code>false</code> if values are all unique. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$collection = [\n    'Phalcon',\n    'Framework',\n];\n\n$result = Arr::isUnique($collection); // true\n\n$collection = [\n    'Phalcon',\n    'Framework',\n    'Phalcon',\n];\n$result = Arr::isUnique($collection); // false\n</code></pre></p>"},{"location":"helper/#last","title":"<code>last</code>","text":"<p><pre><code>final public static function last(\n    array $collection, \n    mixed $method = null\n): var\n</code></pre> Returns the last element of the collection. If a callable is passed, the element returned is the last that validates <code>true</code></p> <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$collection = [\n    'Phalcon',\n    'Framework',\n];\n\necho Arr::last($collection); // 'Framework'\n\n$result = Arr::last(\n    $collection,\n    function ($element) {\n        return strlen($element) &lt; 8;\n    }\n);\n\necho $result; // 'Phalcon'\n</code></pre>"},{"location":"helper/#lastkey","title":"<code>lastKey</code>","text":"<p><pre><code>final public static function lastKey(\n    array $collection, \n    mixed $method = null\n): var\n</code></pre> Returns the key of the last element of the collection. If a callable is passed, the element returned is the last that validates <code>true</code></p> <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$collection = [\n    1 =&gt; 'Phalcon',\n    3 =&gt; 'Framework',\n];\n\necho Arr::lastKey($collection); // 3\n\n$result = Arr::lastKey(\n    $collection,\n    function ($element) {\n        return strlen($element) &lt; 8;\n    }\n);\n\necho $result; // 1\n</code></pre>"},{"location":"helper/#order","title":"<code>order</code>","text":"<p><pre><code>final public static function order(\n    array $collection, \n    mixed $attribute, \n    string $order = 'asc'\n): array\n</code></pre> Sorts a collection of arrays or objects by <code>attribute</code> and returns the sorted array. The third parameter controls the sort order. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$collection = [\n    ['id' =&gt; 2],\n    ['id' =&gt; 3],\n    ['id' =&gt; 1],\n];\n\n$result = Arr::order($collection, 'id');\nvar_dump($result);\n// [\n//     ['id' =&gt; 1],\n//     ['id' =&gt; 2],\n//     ['id' =&gt; 3],\n// ]\n\n$result = Arr::order($collection, 'id', 'desc');\nvar_dump($result);\n// [\n//     ['id' =&gt; 3],\n//     ['id' =&gt; 2],\n//     ['id' =&gt; 1],\n// ]\n</code></pre></p>"},{"location":"helper/#pluck","title":"<code>pluck</code>","text":"<p><pre><code>final public static function pluck(\n    array $collection, \n    string element\n): array\n</code></pre> Retrieves all of the values for a given key returning them as an array <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$collection = [\n    ['product_id' =&gt; 'prod-100', 'name' =&gt; 'Desk'],\n    ['product_id' =&gt; 'prod-200', 'name' =&gt; 'Chair'],\n];\n\n$result = Arr::pluck($collection, 'name');\nvar_dump($result);\n// [\n//     'Desk', \n//     'Chair'\n// ]\n</code></pre></p>"},{"location":"helper/#set","title":"<code>set</code>","text":"<p><pre><code>final public static function set(\n    array $collection, \n    mixed $value, \n    mixed $index = null\n): array\n</code></pre> Sets an array element and returns the new array back. The third parameter is the index/key. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$collection = [];\n$result = Arr::set($collection, 'Phalcon');\nvar_dump($result);\n// [\n//     0 =&gt; 'Phalcon',\n// ]\n\n\n$collection = [\n    1 =&gt; 'Phalcon'\n];\n$result = Arr::set($collection, 'Framework', 1);\nvar_dump($result);\n// [\n//     1 =&gt; 'Framework',\n// ]\n</code></pre></p>"},{"location":"helper/#sliceleft","title":"<code>sliceLeft</code>","text":"<p><pre><code>final public static function sliceLeft(\n    array $collection, \n    int $elements = 1\n): array\n</code></pre> Returns a new array with n elements removed from the left. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$collection = [\n    'Phalcon',\n    'Framework',\n    'for',\n    'PHP',\n];\n\n$result = Arr::sliceLeft($collection, 1);\nvar_dump($result);\n// [\n//     'Phalcon',\n// ]\n\n$result = Arr::sliceLeft($collection, 3);\nvar_dump($result);\n// [\n//     'Phalcon',\n//     'Framework',\n//     'for',\n// ]\n</code></pre></p>"},{"location":"helper/#sliceright","title":"<code>sliceRight</code>","text":"<p><pre><code>final public static function sliceRight(\n    array $collection, \n    int $elements = 1\n): array\n</code></pre> Returns a new array with n elements removed from the right. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$collection = [\n    'Phalcon',\n    'Framework',\n    'for',\n    'PHP',\n];\n\n$result   = Arr::sliceRight($collection, 1);\nvar_dump($result);\n// [\n//     'Framework',\n//     'for',\n//     'PHP',\n// ]\n\n$result   = Arr::sliceRight($collection, 3);\nvar_dump($result);\n// [\n//     'PHP',\n// ]\n</code></pre></p>"},{"location":"helper/#split","title":"<code>split</code>","text":"<p><pre><code>final public static function split(array $collection): array\n</code></pre> Returns a new array with keys of the passed array as one element and values as another. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$collection = [\n    1 =&gt; 'Phalcon',\n    3 =&gt; 'Framework',\n];\n\n$result = Arr::split($collection);\nvar_dump($result);\n// [\n//     [1, 3],\n//     ['Phalcon', 'Framework']\n// ]\n</code></pre></p>"},{"location":"helper/#toobject","title":"<code>toObject</code>","text":"<p><pre><code>final public static function toObject(array $collection)\n</code></pre> Converts an array to an object</p> <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$collection = [\n    1 =&gt; 'Phalcon',\n    3 =&gt; 'Framework',\n];\n\n$result = Arr::toObject($collection);\nvar_dump($result);\n// object(stdClass)#1 (2) {\n//   [\"1\"] =&gt; string(7) \"Phalcon\"\n//   [\"3\"] =&gt; string(9) \"Framework\"\n// }\n</code></pre>"},{"location":"helper/#validateall","title":"<code>validateAll</code>","text":"<p><pre><code>final public static function validateAll(\n    array $collection, \n    mixed $method\n): bool\n</code></pre> Returns true if the provided function returns <code>true</code> for all elements of the collection, <code>false</code> otherwise. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$collection = [2, 3, 4, 5];\n$result     = Arr::validateAll(\n    $collection,\n    function ($element) {\n        return $element &gt; 1;\n    }\n);\n\nvar_dump($result); // true\n</code></pre></p>"},{"location":"helper/#validateany","title":"<code>validateAny</code>","text":"<p><pre><code>final public static function validateAny(\n    array $collection, \n    mixed $method\n): bool\n</code></pre> Returns true if the provided function returns <code>true</code> for at least one element of the collection, <code>false</code> otherwise. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$collection = [2, 3, 4, 5];\n$result     = Arr::validateAny(\n    $collection,\n    function ($element) {\n        return $element &gt; 4;\n    }\n);\n\nvar_dump($result); // true\n</code></pre></p>"},{"location":"helper/#whitelist","title":"<code>whiteList</code>","text":"<p><pre><code>final public static function whiteList(\n    array $collection, \n    array $whiteList \n): array\n</code></pre> Returns a subset of the array, white listing elements by key. The returned array contains only the elements of the source array that have keys identical to the whitelist array that was passed as a parameter. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Arr;\n\n$collection = [\n    2     =&gt; 'Phalcon',\n    3     =&gt; 'Apples',\n    'one' =&gt; 'Framework',\n    'two' =&gt; 'Oranges',\n];\n$result     = Arr::whiteList(\n    $collection,\n    [2, 'one']\n);\n\nvar_dump($result);\n// [\n//     2     =&gt; 'Phalcon',\n//     'one' =&gt; 'Framework'\n// ]\n</code></pre></p>"},{"location":"helper/#exception","title":"Exception","text":"<p>Any exceptions thrown in the <code>Phalcon\\Helper\\*</code> components will be of this type: Phalcon\\Helper\\Exception</p>"},{"location":"helper/#fs","title":"Fs","text":"<p>Phalcon\\Helper\\Fs exposes static methods that offer file operation helper methods</p>"},{"location":"helper/#basename","title":"<code>basename</code>","text":"<pre><code>final public static function basename(\n    int $uri, \n    mixed $suffix\n) -&gt; string\n</code></pre> <p>Gets the filename from a given path, This method is similar to PHP's basename() but has non-ASCII character support. PHP's basename() does not properly support streams or filenames beginning with a non-US-ASCII character.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Fs;\n\n$file = '/file/\u70ed\u7231\u4e2d\u6587.txt';\n\necho Fs::basename($file); // '\u70ed\u7231\u4e2d\u6587.txt'\n\n$file = '/myfolder/\u65e5\u672c\u8a9e\u306e\u30d5\u30a1\u30a4\u30eb\u540d.txt';\n\necho Fs::basename($file); // '\u65e5\u672c\u8a9e\u306e\u30d5\u30a1\u30a4\u30eb\u540d.txt'\n\n$file = '/root/\u03b5\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac.txt';\n\necho Fs::basename($file); // '\u03b5\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac.txt';\n</code></pre>"},{"location":"helper/#json","title":"Json","text":"<p>Phalcon\\Helper\\Json acts as a wrapper to <code>json_encode</code> and <code>json_decode</code> PHP methods, checking for errors and raising exceptions accordingly.</p>"},{"location":"helper/#decode","title":"<code>decode</code>","text":"<pre><code>final public static function decode(\n    string $data,\n    bool $associative = false,\n    int $depth = 512,\n    int $options = 0\n ): mixed\n</code></pre> <p>Decodes a string using <code>json_decode</code> and throws an exception if the JSON data cannot be decoded</p> <pre><code>use Phalcon\\Helper\\Json;\n\n$data = '{\"one\":\"two\",\"0\":\"three\"}';\n\nvar_dump(Json::decode($data));\n// [\n//     'one' =&gt; 'two',\n//     'three'\n// ];\n</code></pre>"},{"location":"helper/#encode","title":"<code>encode</code>","text":"<p><pre><code>final public static function encode(\n    $data,\n    int $depth = 512,\n    int $options = 0\n): string\n</code></pre> Encodes a string using <code>json_encode</code> and throws an exception if the JSON data cannot be encoded</p> <pre><code>use Phalcon\\Helper\\Json;\n\n$data = [\n    'one' =&gt; 'two',\n    'three'\n];\n\necho Json::encode($data);\n// {\"one\":\"two\",\"0\":\"three\"}\n</code></pre>"},{"location":"helper/#number","title":"Number","text":"<p>Phalcon\\Helper\\Number exposes static methods that offer quick access to common functionality when working with numbers.</p>"},{"location":"helper/#between","title":"<code>between</code>","text":"<pre><code>final public static function between(\n    int $value, \n    int $from, \n    int $to\n) -&gt; bool\n</code></pre> <p>Checks if the passed value is between the range specified in <code>from</code> and <code>to</code></p> <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Number;\n\n$min   = 10;\n$max   = 100;\n$value = 13;\n\necho Number::between($value, $min, $max);   // true\n\n$value = 2;\necho Number::between($value, $min, $max);   // false\n</code></pre>"},{"location":"helper/#str","title":"Str","text":"<p>Phalcon\\Helper\\Str exposes static methods that offer quick manipulations to strings.</p>"},{"location":"helper/#camelize","title":"<code>camelize</code>","text":"<p><pre><code>final public static function camelize(string $text, mixed $delimiter = null): string\n</code></pre> Converts strings to camelize style <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::camelize('coco_bongo');         // CocoBongo\necho Str::camelize('co_co-bon_go', '-');  // Co_coBon_go\necho Str::camelize('co_co-bon_go', '_-'); // CoCoBonGo\n</code></pre></p>"},{"location":"helper/#concat","title":"<code>concat</code>","text":"<p><pre><code>final public static function concat(\n    string $separator, \n    string $a, \n    string $b \n    [, string $x] ... \n): string\n</code></pre> Concatenates strings using the separator only once, removing duplicate delimiters. The first parameter is the separator, the subsequent ones are the strings to concatenate together. The minimum required parameters are three. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\n$folder = Str::concat(\n    '/',\n    '/tmp/',\n    '/folder_1/',\n    '/folder_2',\n    'folder_3/'\n);\n\necho $folder; // /tmp/folder_1/folder_2/folder_3/\n</code></pre></p>"},{"location":"helper/#countvowels","title":"<code>countVowels</code>","text":"<p><pre><code>final public static function countVowels(string $text): int\n</code></pre> Returns number of vowels in provided string. Uses a regular expression to count the number of vowels (A, E, I, O, U) in a string. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\n$source = 'Luke, I am your father!';\n\necho Str::countVowels($source); // 8\n</code></pre></p>"},{"location":"helper/#decapitalize","title":"<code>decapitalize</code>","text":"<p><pre><code>final public static function decapitalize(\n    string $text, \n    bool $upperRest = false, \n    string $encoding = 'UTF-8'\n): string\n</code></pre> Decapitalizes the first letter of the string and then adds it back. If the <code>upperRest</code> parameter is set to <code>false</code> the rest of the string remains intact, otherwise it is converted to uppercase. The method will try to use methods provided by the <code>mbstring</code> extension and use the PHP equivalent as a fallback. The last parameter is the encoding that <code>mbstring</code> methods will use. It defaults to <code>UTF-8</code>. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\n$source   = 'BeetleJuice';\n\necho Str::decapitalize($source);       // beetleJuice\necho Str::decapitalize($source, true); // bEETLEJUICE\n</code></pre></p>"},{"location":"helper/#decrement","title":"decrement","text":"<p><pre><code>final public static function decrement(\n    string $text, \n    string $separator = '_'\n): string\n</code></pre> Removes a number from a string or decrements that number if it already is defined. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::decrement('a_1'); // 'a'\necho Str::decrement('a_2'); // 'a_1'\n</code></pre></p>"},{"location":"helper/#dirfromfile","title":"<code>dirFromFile</code>","text":"<p><pre><code>final public static function dirFromFile(string $file): string\n</code></pre> Accepts a file name (without extension) and returns a calculated directory structure with the filename in the end</p> <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::dirFromFile(\"file1234.jpg\"); // fi/le/12/\n</code></pre>"},{"location":"helper/#dirseparator","title":"<code>dirSeparator</code>","text":"<p><pre><code>final public static function dirSeparator(string $directory): string\n</code></pre> Accepts a directory name and ensures that it ends with <code>DIRECTORY_SEPARATOR</code></p> <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::dirSeparator(\"/home/phalcon\"); // /home/phalcon/\n</code></pre>"},{"location":"helper/#dynamic","title":"<code>dynamic</code>","text":"<p><pre><code>final public static function dynamic(\n    string $text,\n    string $leftDelimiter = '{',\n    string $rightDelimiter = '}',\n    string $separator = '|'\n): string\n</code></pre> Generates random text based on the template. The template needs separators as well as a delimiter for the different values. The defaults for those can be overridden with the method parameters. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::dynamic('{Han|Leia|Luke} {Solo|Skywalker}!');  // Han Solo!\necho Str::dynamic('{Han|Leia|Luke} {Solo|Skywalker}!');  // Leia Skywalker!\necho Str::dynamic('{Han|Leia|Luke} {Solo|Skywalker}!');  // Luke Solo!\n</code></pre></p>"},{"location":"helper/#endswith","title":"<code>endsWith</code>","text":"<p><pre><code>final public static function endsWith(\n    string $text, \n    string $end, \n    bool $ignoreCase = true\n): bool\n</code></pre> Returns <code>true</code> if a string ends with a given string. If the last parameter is <code>true</code> (default), the search is made in a case-insensitive manner. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::endsWith('Hello', 'llo');        // true\necho Str::endsWith('Hello', 'LLO', false); // false\necho Str::endsWith('Hello', 'LLO');        // true\n</code></pre></p>"},{"location":"helper/#firstbetween","title":"<code>firstBetween</code>","text":"<p><pre><code>final public static function firstBetween(\n    string $haystack,\n    string $start,\n    string $end\n): string\n</code></pre> Returns the first string there is between the strings from the parameter start and end. The method will try to use methods provided by the <code>mbstring</code> extension and use the PHP equivalent as a fallback. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\n$source   = 'This is a [custom] string with [other] stuff';\n\necho Str::firstBetween($source, '[', ']'); // custom\n</code></pre></p>"},{"location":"helper/#humanize","title":"<code>humanize</code>","text":"<p><pre><code>final public static function humanize(string $text): string\n</code></pre> Makes an underscored or dashed phrase human-readable <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::humanize('start-a-horse'); // 'start a horse'\necho Str::humanize('five_cats');     // 'five cats'\n</code></pre></p>"},{"location":"helper/#includes","title":"<code>includes</code>","text":"<p><pre><code>final public static function includes(\n    string $needle, \n    string $haystack\n): bool\n</code></pre> Checks if a string is included in another string. Returns <code>true</code> if it is included, <code>false</code> otherwise. The method will try to use methods provided by the <code>mbstring</code> extension and use the PHP equivalent as a fallback. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::includes('start', 'start-a-horse'); // true\necho Str::includes('end', 'start-a-horse'); // false\n</code></pre></p>"},{"location":"helper/#increment","title":"<code>increment</code>","text":"<p><pre><code>final public static function increment(\n    string $text, \n    string $separator = '_'\n): string\n</code></pre> Adds a number to a string or increment that number if it already is defined. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::increment('a');   // 'a_1'\necho Str::increment('a_1'); // 'a_2'\n</code></pre></p>"},{"location":"helper/#isanagram","title":"<code>isAnagram</code>","text":"<p><pre><code>final public static function isAnagram(\n    string $first, \n    string $second\n): bool\n</code></pre> Compare two strings and returns <code>true</code> if both strings are anagram, <code>false</code> otherwise. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::isAnagram('rail safety', 'fairy tales'); // true\n</code></pre></p>"},{"location":"helper/#islower","title":"<code>isLower</code>","text":"<p><pre><code>final public static function isLower(\n    string $text, \n    string $encoding = 'UTF-8'\n):  bool\n</code></pre> Returns <code>true</code> if the given string is lower case, <code>false</code> otherwise. The method will try to use methods provided by the <code>mbstring</code> extension and use the PHP equivalent as a fallback. The last parameter is the encoding that <code>mbstring</code> methods will use. It defaults to <code>UTF-8</code>. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::isLower('phalcon framework'); // true\necho Str::isLower('Phalcon Framework'); // false\n</code></pre></p>"},{"location":"helper/#ispalindrome","title":"<code>isPalindrome</code>","text":"<p><pre><code>final public static function isPalindrome(string $text): bool\n</code></pre> Returns <code>true</code> if the given string is a palindrome, <code>false</code> otherwise. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::isPalindrome('racecar'); // true\n</code></pre></p>"},{"location":"helper/#isupper","title":"<code>isUpper</code>","text":"<p><pre><code>final public static function isUpper(\n    string $text, \n    string $encoding = 'UTF-8'\n):  bool\n</code></pre> Returns <code>true</code> if the given string is upper case, <code>false</code> otherwise. The method will try to use methods provided by the <code>mbstring</code> extension and use the PHP equivalent as a fallback. The last parameter is the encoding that <code>mbstring</code> methods will use. It defaults to <code>UTF-8</code>. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::isUpper('PHALCON FRAMEWORK'); // true\necho Str::isUpper('Phalcon Framework'); // false\n</code></pre></p>"},{"location":"helper/#lower","title":"<code>lower</code>","text":"<p><pre><code>final public static function lower(\n    string $text, \n    string $encoding = 'UTF-8'\n): string\n</code></pre> Converts a string to lowercase characters. The method will try to use methods provided by the <code>mbstring</code> extension and use the PHP equivalent as a fallback. The last parameter is the encoding that <code>mbstring</code> methods will use. It defaults to <code>UTF-8</code>. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::lower('PHALCON FRAMEWORK'); // phalcon framework\n</code></pre></p>"},{"location":"helper/#random","title":"<code>random</code>","text":"<p><pre><code>final public static function random(\n    int $type = 0, \n    long $length = 8\n): string\n</code></pre> Generates a random string based on the given type. The first parameter is one of the <code>RANDOM_*</code> constants. The second parameter specifies the length of the string (defaults to 8).</p> Constant Description <code>RANDOM_ALNUM</code> Only alpha numeric characters <code>[a-zA-Z0-9]</code> <code>RANDOM_ALPHA</code> Only alphabetical characters <code>[azAZ]</code> <code>RANDOM_DISTINCT</code> Only alpha numeric uppercase characters exclude similar characters <code>[2345679ACDEFHJKLMNPRSTUVWXYZ]</code> <code>RANDOM_HEXDEC</code> Only hexadecimal characters <code>[0-9a-f]</code> <code>RANDOM_NOZERO</code> Only numbers without <code>0</code> <code>[1-9]</code> <code>RANDOM_NUMERIC</code> Only numbers <code>[0-9]</code> <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::random(Str::RANDOM_ALNUM); // 'aloiwkqz'\n</code></pre>"},{"location":"helper/#reduceslashes","title":"<code>reduceSlashes</code>","text":"<p><pre><code>final public static function reduceSlashes(string $text): string\n</code></pre> Reduces multiple slashes in a string to single slashes. If a scheme is present (<code>https://</code>, <code>ftp://</code> it will not be changed) <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::reduceSlashes('foo//bar/baz');             // foo/bar/baz\necho Str::reduceSlashes('http://foo.bar///baz/buz'); // http://foo.bar/baz/buz\necho Str::reduceSlashes('//foo.bar///baz/buz');      // /foo.bar/baz/buz\necho Str::reduceSlashes('ftp://foo.bar///baz/buz');  // ftp://foo.bar/baz/buz\necho Str::reduceSlashes('ftp//foo.bar///baz/buz');   // ftp/foo.bar/baz/buz\n</code></pre></p>"},{"location":"helper/#startswith","title":"<code>startsWith</code>","text":"<p><pre><code>final public static function startsWith(\n    string $text, \n    string $start, \n    bool $ignoreCase = true\n): bool\n</code></pre> Returns <code>true</code> if a string starts with a given string. If the last parameter is <code>true</code> (default), the search is made in a case-insensitive manner. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::startsWith('Hello', 'He');        // true\necho Str::startsWith('Hello', 'he', false); // false\necho Str::startsWith('Hello', 'he');        // true\n</code></pre></p>"},{"location":"helper/#uncamelize","title":"<code>uncamelize</code>","text":"<p><pre><code>final public static function uncamelize(\n    string $text,   \n    mixed $delimiter = null\n): string\n</code></pre> Uncamelize strings which are camelized <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::uncamelize('CocoBongo');      // coco_bongo\necho Str::uncamelize('CocoBongo', '-'); // coco-bongo\n</code></pre></p>"},{"location":"helper/#underscore","title":"<code>underscore</code>","text":"<p><pre><code>final public static function underscore(string $text): string\n</code></pre> Makes a phrase underscored instead of spaced. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::underscore('look behind');     // 'look_behind'\necho Str::underscore('Awesome Phalcon'); // 'Awesome_Phalcon'\n</code></pre></p>"},{"location":"helper/#upper","title":"<code>upper</code>","text":"<p><pre><code>final public static function upper(\n    string $text, \n    string $encoding = 'UTF-8'\n): string\n</code></pre> Converts a string to uppercase characters. The method will try to use methods provided by the <code>mbstring</code> extension and use the PHP equivalent as a fallback. The last parameter is the encoding that <code>mbstring</code> methods will use. It defaults to <code>UTF-8</code>. <pre><code>&lt;?php\n\nuse Phalcon\\Helper\\Str;\n\necho Str::upper('phalcon framework'); // PHALCON FRAMEWORK\n</code></pre></p>"},{"location":"html-link/","title":"HTML Link (PSR-13)","text":""},{"location":"html-link/#overview","title":"Overview","text":"<p>Phalcon\\Html\\Link\\EvolvableLink, Phalcon\\Html\\Link\\EvolvableLinkProvider, Phalcon\\Html\\Link\\Link and Phalcon\\Html\\Link\\LinkProvider are classes that implement the interfaces as defined by PHP-FIG.</p> <p></p> <p>These components aid in creating Link objects as defined by the PSR-13 standard.</p> <p>NOTE</p> <p>This component does not generate any HTML links. It just stores the links and offers methods as defined by the PSR-13 standard. You will need to create your own serializers that will parse these objects and generate the necessary output. The Phalcon\\Html\\Link\\Serializer\\Header serializer is available for you to use.</p>"},{"location":"html-link/#link","title":"Link","text":"<p>The Phalcon\\Html\\Link\\Link is used to create a link and assign attributes to it upon construction.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Html\\Link\\Link;\n\n$href       = 'https://dev.phalcon.ld';\n$attributes = [\n    'one'   =&gt; true,\n    'two'   =&gt; 123,\n    'three' =&gt; 'four',\n    'five'  =&gt; [\n        'six',\n        'seven',\n    ],\n];\n\n$link = new Link('payment', $href, $attributes);\n</code></pre>"},{"location":"html-link/#linkprovider","title":"LinkProvider","text":"<p>The Phalcon\\Html\\Link\\LinkProvider is used as a container of Phalcon\\Html\\Link\\Link objects. You can add them in the provider and then access them as a whole or retrieve them by <code>rel</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Html\\Link\\Link;\nuse Phalcon\\Html\\Link\\LinkProvider;\n\n$links = [\n    new Link('canonical', 'https://dev.phalcon.ld'),\n    new Link('cite-as', 'https://test.phalcon.ld'),\n];\n$link  = new LinkProvider($links);\n\n\nvar_dump(\n    $link-&gt;getLinksByRel('cite-as')\n);\n\n// [\n//     Link('cite-as', 'https://test.phalcon.ld'),\n// ]\n</code></pre>"},{"location":"html-link/#evolvablelink","title":"EvolvableLink","text":"<p>Link objects are immutable. However, there is a need to manipulate them based on your application needs. The Phalcon\\Html\\Link\\EvolvableLink is available, allowing you to manipulate the link.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Html\\Link\\EvolvableLink;\n\n$href       = 'https://dev.phalcon.ld';\n$attributes = ['one' =&gt; true];\n\n$link = new EvolvableLink('payment', $href, $attributes);\n\n$newInstance = $link-&gt;withAttribute('two', 'three');\n\nvar_dump(\n    $newInstance-&gt;getAttributes()\n);\n\n//  [\n//      'one' =&gt; true,\n//      'two' =&gt; 'three',\n//  ];\n</code></pre>"},{"location":"html-link/#evolvablelinkprovider","title":"EvolvableLinkProvider","text":"<p>The Phalcon\\Html\\Link\\LinkProvider is used as a container of Phalcon\\Html\\Link\\EvolvableLink objects. You can add them in the provider and then access them as a whole or retrieve them by <code>rel</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Html\\Link\\EvolvableLink;\nuse Phalcon\\Html\\Link\\EvolvableLinkProvider;\n\n$links = [\n    new Link('canonical', 'https://dev.phalcon.ld'),\n    new Link('cite-as', 'https://test.phalcon.ld'),\n];\n$link  = new EvolvableLinkProvider($links);\n\n\nvar_dump(\n    $link-&gt;getLinksByRel('cite-as')\n);\n\n// [\n//     Link('cite-as', 'https://test.phalcon.ld'),\n// ]\n</code></pre>"},{"location":"html-link/#serializers","title":"Serializers","text":""},{"location":"html-link/#header","title":"Header","text":"<p>You can use a serializer to parse the <code>Phalcon\\Html\\Links</code> objects and create the necessary headers. Phalcon comes with the Phalcon\\Html\\Link\\Serializer\\Header serializer, to help with the task of serializing links for the headers:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Html\\Link\\EvolvableLink;\nuse Phalcon\\Html\\Link\\Serializer\\Header;\n\n$serializer = new Header();\n\n$link = new EvolvableLink('prefetch', '/images/apple-icon-114.png');\n\necho $serializer-&gt;serialize([$link]);\n// &lt;/images/apple-icon-114.png&gt;; rel=\"prefetch\"';\n\n\n$links = [\n    (new EvolvableLink('preload', '/1'))\n        -&gt;withAttribute('as', 'image')\n        -&gt;withAttribute('nopush', true),\n    (new EvolvableLink('alternate', '/2'))\n        -&gt;withRel('next')\n        -&gt;withAttribute('hreflang', ['en', 'es'])\n];\n\necho $serializer-&gt;serialize([$link]);\n// &lt;/1&gt;; rel=\"preload\"; as=\"image\"; nopush,\n//     &lt;/2&gt;; rel=\"alternate next\"; hreflang=\"en\"; hreflang=\"es\"\n;\n</code></pre>"},{"location":"html-link/#custom","title":"Custom","text":"<p>You can create your own serializers for relevant links by extending the Phalcon\\Html\\Link\\Serializer\\SerializerInterface</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Html\\Serializers;\n\nuse Phalcon\\Html\\Link\\Serializer\\SerializerInterface;\n\nclass Custom implements SerializerInterface \n{\n    public function serialize(array $links): ?string\n    {\n        // ....\n    }\n}\n</code></pre>"},{"location":"html/","title":"HTML Helpers","text":""},{"location":"html/#overview","title":"Overview","text":"<p>This namespace contains components that help with the generation of HTML.</p>"},{"location":"html/#attributes","title":"Attributes","text":"<p>The Phalcon\\Html\\Attributes is a wrapper of Phalcon\\Collection. It also contains two more methods <code>render()</code> and <code>__toString()</code>. <code>render()</code> uses Phalcon\\Tag internally to render the attributes that a HTML element has. These HTML attributes are defined in the object itself.</p> <p>The component can be used on its own if you want to collect HTML attributes in an object and then _render) them (return them as a string) in a <code>key=value</code> format.</p> <p>This component is used internally by Phalcon\\Forms\\Form to store the attributes of form elements.</p>"},{"location":"html/#breadcrumbs","title":"Breadcrumbs","text":"<p>A common piece of HTML that is present in many web applications is the breadcrumbs. These are links separated by a space or by the <code>/</code> character usually, that represent the tree structure of an application. The purpose is to give users another easy visual way to navigate throughout the application. </p> <p>An example is an application that has an <code>admin</code> module, an <code>invoices</code> area and a <code>view invoice</code> page. Usually, you would select the the <code>admin</code> module, then from the links you will choose <code>invoices</code> (list) and then clicking on one of the invoices in the list, you can view it. To represent this tree like structure, the breadcrumbs displayed could be:</p> <p><pre><code>Home / Admin / Invoices / Viewing Invoice [1234]\n</code></pre> Each of the words above (apart from the last one) are links to the respective pages. This way the user can quickly navigate back to a different area without having to click the back button or use another menu.</p> <p>Phalcon\\Html\\Breadcrumbs offers functionality to add text and URLs. The resulting HTML when calling <code>render()</code> will have each breadcrumb enclosed in <code>&lt;dt&gt;</code> tags, while the whole string is enclosed in <code>&lt;dl&gt;</code> tags. </p>"},{"location":"html/#methods","title":"Methods","text":"<p><pre><code>public function add(\n    string $label, \n    string $link = \"\"\n): Breadcrumbs\n</code></pre> Adds a new crumb.</p> <p>In the example below, add a crumb with a link and then add a crumb without a link (normally the last one)</p> <pre><code>$breadcrumbs\n    -&gt;add(\"Home\", \"/\")\n    -&gt;add(\"Users\")\n;\n</code></pre> <p><pre><code>public function clear(): void\n</code></pre> Clears the crumbs</p> <pre><code>$breadcrumbs-&gt;clear()\n</code></pre> <p><pre><code>public function getSeparator(): string\n</code></pre> Returns the separator used for the breadcrumbs</p> <p><pre><code>public function remove(string $link): void\n</code></pre> Removes crumb by url.</p> <p>In the example below remove a crumb by URL and also remove a crumb without an url (last link)</p> <pre><code>$breadcrumbs-&gt;remove(\"/admin/user/create\");\n$breadcrumbs-&gt;remove();\n</code></pre> <p><pre><code>public function render(): string\n</code></pre> Renders and outputs breadcrumbs HTML. The template used is:</p> <p><pre><code>&lt;dl&gt;\n    &lt;dt&gt;&lt;a href=\"Hyperlink\"&gt;Text&lt;/a&gt;&lt;/dt&gt; / \n    &lt;dt&gt;&lt;a href=\"Hyperlink\"&gt;Text&lt;/a&gt;&lt;/dt&gt; / \n    &lt;dt&gt;Text&lt;/dt&gt;\n&lt;/dl&gt;\n</code></pre> The last set crumb will not have a link and will only have its text displayed. Each crumb is wrapped in <code>&lt;dt&gt;&lt;/dt&gt;</code> tags. The whole collection is wrapped in <code>&lt;dl&gt;&lt;/dl&gt;</code> tags. You can use them in conjunction with CSS to format the crumbs on screen according to the needs of your application.</p> <pre><code>echo $breadcrumbs-&gt;render();\n</code></pre> <p><pre><code>public function setSeparator(string $separator)\n</code></pre> The default separator between the crumbs is <code>/</code>. You can set a different one if you wish using this method.</p> <pre><code>$breadcrumbs-&gt;setSeparator('-');\n</code></pre> <p><pre><code>public function toArray(): array\n</code></pre> Returns the internal breadcrumbs array</p>"},{"location":"html/#tagfactory","title":"TagFactory","text":"<p>Phalcon\\Html\\TagFactory is a component that generates HTML tags. This component creates a new class locator with predefined HTML tag classes attached to it. Each tag class is lazy loaded for maximum performance. To instantiate the factory and retrieve a tag helper, you need to call <code>newInstance()</code>.</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Html\\TagFactory;\n\n$escaper = new Escaper();\n$factory = new TagFactory($escaper);\n$anchor  = $factory-&gt;newInstance('a');\n</code></pre> The registered names for respective helpers are:</p> Name Description <code>a</code> Phalcon\\Html\\Helper\\Anchor - <code>&lt;a&gt;</code> tag <code>aRaw</code> Phalcon\\Html\\Helper\\AnchorRaw - <code>&lt;a&gt;</code> tag raw <code>body</code> Phalcon\\Html\\Helper\\Body - <code>&lt;body&gt;</code> tag <code>button</code> Phalcon\\Html\\Helper\\Button - <code>&lt;button&gt;</code> tag <code>close</code> Phalcon\\Html\\Helper\\Close - close tag <code>element</code> Phalcon\\Html\\Helper\\Element - any tag <code>elementRaw</code> Phalcon\\Html\\Helper\\ElementRaw - any tag raw <code>form</code> Phalcon\\Html\\Helper\\Form - <code>&lt;form&gt;</code> tag <code>img</code> Phalcon\\Html\\Helper\\Img - <code>&lt;img&gt;</code> tag <code>label</code> Phalcon\\Html\\Helper\\Label - <code>&lt;label&gt;</code> tag <code>textarea</code> Phalcon\\Html\\Helper\\TextArea - <code>&lt;textarea&gt;</code> tag"},{"location":"html/#helpers","title":"Helpers","text":"<p>All helpers that are used by the Phalcon\\Html\\TagFactory are located under the <code>Phalcon\\Html\\Helper</code> namespace. You can create each of these classes individually if you wish to, or you can use the tag factory as shown above. Other than the <code>*Raw</code> helpers, if text is required by the helper, it will be automatically escaped using Phalcon\\Escaper.</p> <p>NOTE</p> <p>The code and output below has been formatted for readability</p>"},{"location":"html/#a","title":"<code>a</code>","text":"<p>Phalcon\\Html\\Helper\\Anchor creates anchor HTML tags. The component accepts the <code>href</code> as a string, the <code>text</code> as a string and optionally an array with all the attributes that the anchor needs.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Html\\Helper\\Anchor;\n\n$escaper = new Escaper();\n$anchor  = new Anchor($escaper);\n$options = [\n    'class' =&gt; 'my-class',\n    'name'  =&gt; 'my-name',\n    'id'    =&gt; 'my-id',\n];\n\necho $anchor('/myurl', 'click&lt;&gt;me', $options);\n// &lt;a href=\"/myurl\" \n//    id=\"my-id\" \n//    name=\"my-name\" \n//    class=\"my-class\"&gt;\n//     click&amp;lt;&amp;gt;me\n// &lt;/a&gt;\n</code></pre>"},{"location":"html/#araw","title":"<code>aRaw</code>","text":"<p>Phalcon\\Html\\Helper\\AchorRaw creates raw anchor HTML tags, i.e. the text will not be escaped. The component accepts the <code>href</code> as a string, the <code>text</code> as a string and optionally an array with all the attributes that the anchor needs.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Html\\Helper\\AnchorRaw;\n\n$escaper = new Escaper();\n$anchor  = new AnchorRaw($escaper);\n$options = [\n    'class' =&gt; 'my-class',\n    'name'  =&gt; 'my-name',\n    'id'    =&gt; 'my-id',\n];\n\necho $anchor('/myurl', 'click&lt;&gt;me', $options);\n// &lt;a href=\"/myurl\" \n//    id=\"my-id\" \n//    name=\"my-name\" \n//    class=\"my-class\"&gt;\n//     click&lt;&gt;me\n// &lt;/a&gt;\n</code></pre>"},{"location":"html/#body","title":"<code>body</code>","text":"<p>Phalcon\\Html\\Helper\\Body creates a <code>&lt;body&gt;</code> tag. The component accepts optionally an array with all the attributes that the anchor needs.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Html\\Helper\\Body;\n\n$escaper = new Escaper();\n$anchor  = new Body($escaper);\n$options = [\n    'class' =&gt; 'my-class',\n    'id'    =&gt; 'my-id',\n];\n\necho $anchor($options);\n// &lt;body id=\"my-id\" class=\"my-class\"&gt;\n</code></pre> <p>NOTE</p> <p>This helper creates only the opening <code>&lt;body&gt;</code> tag. You will need to use the <code>Close</code> helper to generate the closing <code>&lt;/body&gt;</code> tag.</p>"},{"location":"html/#button","title":"<code>button</code>","text":"<p>Phalcon\\Html\\Helper\\Button creates <code>&lt;button&gt;</code> HTML tags. The component accepts the <code>text</code> as a string and optionally an array with all the attributes that the anchor needs.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Html\\Helper\\Button;\n\n$escaper = new Escaper();\n$anchor  = new Button($escaper);\n$options = [\n    'class' =&gt; 'my-class',\n    'name'  =&gt; 'my-name',\n    'id'    =&gt; 'my-id',\n];\n\necho $anchor('click&lt;&gt;me', $options);\n// &lt;button \n//    id=\"my-id\" \n//    name=\"my-name\" \n//    class=\"my-class\"&gt;\n//     click&amp;lt;&amp;gt;me\n// &lt;/button&gt;\n</code></pre>"},{"location":"html/#close","title":"<code>close</code>","text":"<p>Phalcon\\Html\\Helper\\Close creates the closing HTML tags. The component accepts the <code>name</code> of the tag to close.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Html\\Helper\\Close;\n\n$escaper = new Escaper();\n$anchor  = new Close($escaper);\n\necho $anchor('form');\n// &lt;/form&gt;\n</code></pre>"},{"location":"html/#element","title":"<code>element</code>","text":"<p>Phalcon\\Html\\Helper\\Element creates HTML tags based on the passed <code>name</code> parameter. The component accepts the <code>name</code> as a string, the <code>text</code> as a string and optionally an array with all the attributes that the anchor needs.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Html\\Helper\\Element;\n\n$escaper = new Escaper();\n$anchor  = new Element($escaper);\n$options = [\n    'class' =&gt; 'my-class',\n    'name'  =&gt; 'my-name',\n    'id'    =&gt; 'my-id',\n];\n\necho $anchor('address', 'click&lt;&gt;me', $options);\n// &lt;address \n//    id=\"my-id\" \n//    name=\"my-name\" \n//    class=\"my-class\"&gt;\n//     click&amp;lt;&amp;gt;me\n// &lt;/address&gt;\n</code></pre>"},{"location":"html/#elementraw","title":"<code>elementRaw</code>","text":"<p>Phalcon\\Html\\Helper\\ElementRaw creates raw HTML tags, i.e. the text will not be escaped. The tag created is based on the passed <code>name</code> parameter. The component accepts the <code>name</code> as a string, the <code>text</code> as a string and optionally an array with all the attributes that the anchor needs.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Html\\Helper\\ElementRaw;\n\n$escaper = new Escaper();\n$anchor  = new ElementRaw($escaper);\n$options = [\n    'class' =&gt; 'my-class',\n    'name'  =&gt; 'my-name',\n    'id'    =&gt; 'my-id',\n];\n\necho $anchor('address', 'click&lt;&gt;me', $options);\n// &lt;address \n//    id=\"my-id\" \n//    name=\"my-name\" \n//    class=\"my-class\"&gt;\n//     click&lt;&gt;me\n// &lt;/address&gt;\n</code></pre>"},{"location":"html/#form","title":"<code>form</code>","text":"<p>Phalcon\\Html\\Helper\\Form creates <code>&lt;form&gt;</code> HTML tags. The component accepts an array with all the attributes that the anchor needs. By default the form has its <code>method</code> to <code>post</code> and <code>enctype</code> to <code>multipart/form-data</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Html\\Helper\\Form;\n\n$escaper = new Escaper();\n$anchor  = new Form($escaper);\n$options = [\n    'class'   =&gt; 'my-class',\n    'name'    =&gt; 'my-name',\n    'id'      =&gt; 'my-id',\n    'method'  =&gt; 'post',\n    'enctype' =&gt; 'multipart/form-data'\n];\n\necho $anchor($options);\n// &lt;form \n//    id=\"my-id\" \n//    name=\"my-name\" \n//    class=\"my-class\"\n//    method=\"post\"\n//    enctype=\"multipart/form-data\"&gt;\n</code></pre> <p>NOTE</p> <p>This helper creates only the opening <code>&lt;form&gt;</code> tag. You will need to use the <code>Close</code> helper to generate the closing <code>&lt;/form&gt;</code> tag.</p>"},{"location":"html/#img","title":"<code>img</code>","text":"<p>Phalcon\\Html\\Helper\\Img creates <code>&lt;img&gt;</code> HTML tags. The component accepts the <code>src</code> as a string and optionally an array with all the attributes that the anchor needs.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Html\\Helper\\Img;\n\n$escaper = new Escaper();\n$anchor  = new Img($escaper);\n$options = [\n    'class' =&gt; 'my-class',\n    'name'  =&gt; 'my-name',\n    'id'    =&gt; 'my-id',\n];\n\necho $anchor('/my-url', $options);\n// &lt;img \n//    src=\"/my-url\" \n//    id=\"my-id\" \n//    name=\"my-name\" \n//    class=\"my-class\"&gt;\n</code></pre>"},{"location":"html/#label","title":"<code>label</code>","text":"<p>Phalcon\\Html\\Helper\\Label creates <code>&lt;label&gt;</code> HTML tags. The component accepts optionally an array with all the attributes that the anchor needs.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Html\\Helper\\Label;\n\n$escaper = new Escaper();\n$anchor  = new Label($escaper);\n$options = [\n    'class' =&gt; 'my-class',\n    'name'  =&gt; 'my-name',\n    'id'    =&gt; 'my-id',\n];\n\necho $anchor($options);\n// &lt;label \n//    id=\"my-id\" \n//    name=\"my-name\" \n//    class=\"my-class\"&gt;\n</code></pre> <p>NOTE</p> <p>This helper creates only the opening <code>&lt;label&gt;</code> tag. You will need to use the <code>Close</code> helper to generate the closing <code>&lt;/label&gt;</code> tag.</p>"},{"location":"html/#textarea","title":"<code>textarea</code>","text":"<p>Phalcon\\Html\\Helper\\TextArea creates <code>&lt;textarea&gt;</code> HTML tags. The component accepts the <code>text</code> as a string and optionally an array with all the attributes that the anchor needs.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Escaper;\nuse Phalcon\\Html\\Helper\\TextArea;\n\n$escaper = new Escaper();\n$anchor  = new TextArea($escaper);\n$options = [\n    'class' =&gt; 'my-class',\n    'name'  =&gt; 'my-name',\n    'id'    =&gt; 'my-id',\n];\n\necho $anchor('click&lt;&gt;me', $options);\n// &lt;textarea \n//    id=\"my-id\" \n//    name=\"my-name\" \n//    class=\"my-class\"&gt;\n//     click&amp;lt;&amp;gt;me\n// &lt;/textarea&gt;\n</code></pre> <p>NOTE</p> <p>More helpers will become available in future versions of Phalcon. The goal is to completely replace the Phalcon\\Tag object with small HTML helper classes.</p>"},{"location":"http-factories/","title":"HTTP Factories (PSR-17)","text":""},{"location":"http-factories/#overview","title":"Overview","text":"<p>Phalcon\\Http\\Message\\RequestFactory, Phalcon\\Http\\Message\\ResponseFactory, Phalcon\\Http\\Message\\ServerRequestFactory, Phalcon\\Http\\Message\\StreamFactory, Phalcon\\Http\\Message\\UploadedFileFactory, Phalcon\\Http\\Message\\UriFactory are the factories implemented of the PSR-17 HTTP messaging interface factories as defined by PHP-FIG.</p> <p></p> <p>These components aid in creating HTTP objects as defined by the PSR-7 standard.</p>"},{"location":"http-factories/#requestfactory","title":"RequestFactory","text":"<p>The Phalcon\\Http\\Message\\RequestFactory can be used to create Phalcon\\Http\\Message\\Request objects.</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\RequestFactory;\n\n$factory = new RequestFactory();\n\n$stream = $factory-&gt;createRequest(\n    'GET', \n    'https://api.phalcon.io/companies/1'\n);\n</code></pre> The <code>createRequest()</code> method accepts a string as the method (<code>GET</code>, <code>POST</code> etc.) and the URI and returns back the request object.</p>"},{"location":"http-factories/#responsefactory","title":"ResponseFactory","text":"<p>The Phalcon\\Http\\Message\\ResponseFactory can be used to create Phalcon\\Http\\Message\\Response objects.</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ResponseFactory;\n\n$factory = new ResponseFactory();\n\n$stream = $factory-&gt;createResponse(200, 'OK');\n</code></pre> The <code>createResponse()</code> method accepts an integer which is the response status as well as a string, representing the reason phrase. If no reason is specified, the component will use the default ones as suggested by the HTTP RFCs.</p>"},{"location":"http-factories/#serverrequestfactory","title":"ServerRequestFactory","text":"<p>The Phalcon\\Http\\Message\\ServerRequestFactory can be used to create Phalcon\\Http\\Message\\ServerRequest objects.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequestFactory;\n\n$factory = new ServerRequestFactory();\n\n$request = $factory-&gt;createServerRequest(\n    'GET', \n    'https://api.phalcon.io/companies/1',\n    [\n        'param' =&gt; 'value'\n    ]\n);\n</code></pre> <p>The <code>createServerRequest()</code> creates the new object using a method (<code>GET</code>, <code>POST</code> etc.), a URI and optionally an array of SAPI parameters with which to seed the generated request instance.</p> <p>In addition to the <code>createServerRequest()</code> the factory offers the <code>load()</code> method as a helper to create a request by populating it from the superglobals.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequestFactory;\n\n$factory = new ServerRequestFactory();\n\n$request = $factory-&gt;load(\n    $_SERVER,\n    $_GET,\n    $_POST,\n    $_COOKIE,\n    $_FILES\n);\n</code></pre> <p>If If any argument is not supplied, the corresponding superglobal will be used.</p>"},{"location":"http-factories/#streamfactory","title":"StreamFactory","text":"<p>The Phalcon\\Http\\Message\\StreamFactory can be used to create Phalcon\\Http\\Message\\Stream objects.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\StreamFactory;\n\n$factory = new StreamFactory();\n\n$stream = $factory-&gt;createStream('stream contents');\n</code></pre>"},{"location":"http-factories/#uploadedfilefactory","title":"UploadedFileFactory","text":"<p>The Phalcon\\Http\\Message\\UploadedFileFactory can be used to create Phalcon\\Http\\Message\\UploadedFile objects.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\StreamFactory;\nuse Phalcon\\Http\\Message\\UploadedFileFactory;\n\n$factory = new UploadedFileFactory();\n$streamFactory = new StreamFactory();\n\n$stream = $streamFactory-&gt;createStream('stream contents');\n\n$size            = 12345;\n$error           = 0;\n$clientFilename  = null;\n$clientMediaType = null;\n\n$file = $factory-&gt;createUploadedFile(\n    $stream,\n    $size,\n    $error,\n    $clientFilename,\n    $clientMediaType\n);\n</code></pre> <p>If a size is not provided it will be determined by checking the size of the stream. The <code>$error</code> is the PHP file upload error, It defaults to <code>0</code>. If provided by the client, you can use the <code>clientFilename</code> and <code>clientMediaType</code>. Otherwise they can be set to <code>null</code>.</p>"},{"location":"http-factories/#urifactory","title":"UriFactory","text":"<p>The Phalcon\\Http\\Message\\UriFactory can be used to create Phalcon\\Http\\Message\\Uri objects.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\UriFactory;\n\n$factory = new UriFactory();\n\n$uri = $factory-&gt;createUri('https://api.phalcon.io/companies/1');\n</code></pre>"},{"location":"http-request/","title":"HTTP Request (PSR-7)","text":""},{"location":"http-request/#overview","title":"Overview","text":"<p>Phalcon\\Http\\Message\\Request is an implementation of the PSR-7 HTTP messaging interface as defined by PHP-FIG.</p> <p></p> <p>This implementation has been created to establish a standard between middleware implementations. Applications often need to send requests to external endpoints. To achieve this you can use the Phalcon\\Http\\Message\\Request object. In return, our application will receive back a response object. </p> <p>NOTE</p> <p>Phalcon does not restrict you in using a specific HTTP Client. Any PSR-7 compliant client will work with this component so that you can perform your requests.</p> <p>NOTE</p> <p>In the examples below, <code>$httpClient</code> is the client of your choice which implements PSR-7. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Request;\nuse Phalcon\\Http\\Message\\Uri;\n\n$request = new Request();\n$uri     = new Uri('https://api.phalcon.io/companies/1');\n\n$jwtToken = 'abc.def.ghi';\n\n$request = $request\n   -&gt;withMethod('POST')\n   -&gt;withHeader('Authorization', 'Bearer ' . $jwtToken)\n   -&gt;withHeader('Content-Type', 'application/json')\n;\n\n$result = $httpClient-&gt;send($request);\n</code></pre> <p>We are creating a new Phalcon\\Http\\Message\\Request object and a new Phalcon\\Http\\Message\\Uri object with the target URL. Following that we define the method (<code>POST</code>) and additional headers that we need to send with our request. The client then sends the request by using the request object. </p> <p>The above example can be implemented by only using the constructor parameters:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Request;\n\n$jwtToken = 'abc.def.ghi';\n\n$request = new Request(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    'php://memory',\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n        'Content-Type'  =&gt; 'application/json',\n    ]\n);\n\n$result = $httpClient-&gt;send($request);\n</code></pre> <p>The Request object created is immutable, meaning it will never change. Any call to methods prefixed with <code>with*</code> will return a clone of the object to maintain immutability, as per the standard.</p>"},{"location":"http-request/#constructor","title":"Constructor","text":"<p><pre><code>public function __construct(\n    [string $method = \"GET\" \n    [, mixed $uri = null \n    [, mixed $body = \"php://temp\" \n    [, array $headers = [] ]]]]\n)\n</code></pre> The constructor accepts parameters allowing you to create the object with certain properties populated. You can define the target HTTP method, the URL, the body as well as the headers. All parameters are optional.</p> <ul> <li><code>method</code> - defaults to <code>GET</code>. The supported methods are: <code>GET</code>, <code>CONNECT</code>, <code>DELETE</code>, <code>HEAD</code>, <code>OPTIONS</code>, <code>PATCH</code>, <code>POST</code>, <code>PUT</code>, <code>TRACE</code></li> <li><code>uri</code> - An instance of Phalcon\\Http\\Message\\Uri or a URL.</li> <li><code>body</code> - It defaults to <code>php://memory</code>. The method accepts either an object that implements the <code>StreamInterface</code> interface or a string such as the name of the stream. The default mode for the stream is <code>w+b</code>. If a non valid stream is passed, an InvalidArgumentException is thrown</li> <li><code>headers</code>  - A key value array, with key as the header name and value as the header value.</li> </ul>"},{"location":"http-request/#getters","title":"Getters","text":""},{"location":"http-request/#getbody","title":"<code>getBody()</code>","text":"<p>Returns the body as a <code>StreamInterface</code> object</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Request;\nuse Phalcon\\Http\\Message\\Stream;\n\n$jwtToken = 'abc.def.ghi';\n$fileName = dataFolder('/assets/stream/mit.txt');\n$stream   = new Stream($fileName, 'rb');\n\n$request = new Request(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    $stream,\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n        'Content-Type'  =&gt; 'application/json',\n    ]\n);\n\necho $request-&gt;getBody(); // '/assets/stream/mit.txt'\n</code></pre>"},{"location":"http-request/#getheader","title":"<code>getHeader()</code>","text":"<p>Returns an array of all the header values of the passed case insensitive header name. If the string parameter representing the header name requested is not present, an empty array is returned.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Request;\n\n$jwtToken = 'abc.def.ghi';\n\n$request = new Request(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    'php://memory',\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n        'Content-Type'  =&gt; 'application/json',\n    ]\n);\n\necho $request-&gt;getHeader('content-Type'); // ['application/json']\necho $request-&gt;getHeader('unknown');      // []\n</code></pre>"},{"location":"http-request/#getheaderline","title":"<code>getHeaderLine()</code>","text":"<p>Returns all of the header values of the given case-insensitive header name as a string concatenated together using a comma. If the string parameter representing the header name requested, an empty string is returned.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Request;\n\n$jwtToken = 'abc.def.ghi';\n\n$request = new Request(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    'php://memory',\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n        'Content-Type'  =&gt; [\n            'application/json',\n            'application/html',\n        ],\n    ]\n);\n\necho $request-&gt;getHeaderLine('content-Type'); // 'application/json,application/html'\n</code></pre>"},{"location":"http-request/#getheaders","title":"<code>getHeaders()</code>","text":"<p>Returns an array with all the message header values. The keys represent the header name as it will be sent over the wire, and each value is an array of strings associated with the header. While header names are not case-sensitive, this method preserves the exact case in which headers were originally specified.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Request;\n\n$jwtToken = 'abc.def.ghi';\n\n$request = new Request(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    'php://memory',\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n        'Content-Type'  =&gt; [\n            'application/json',\n            'application/html',\n        ],\n    ]\n);\n\nvar_dump(\n    $request-&gt;getHeaders()\n);\n// [\n//     'Authorization' =&gt; 'Bearer abc.def.ghi',\n//     'Content-Type'  =&gt; [\n//         'application/json',\n//         'application/html',\n//     ],\n// ]\n</code></pre>"},{"location":"http-request/#getmethod","title":"<code>getMethod()</code>","text":"<p>Returns the method as a string</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Request;\n\n$jwtToken = 'abc.def.ghi';\n\n$request = new Request(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    'php://memory',\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n        'Content-Type'  =&gt; 'application/json',\n    ]\n);\n\necho $request-&gt;getMethod(); // POST\n</code></pre>"},{"location":"http-request/#getprotocolversion","title":"<code>getProtocolVersion()</code>","text":"<p>Returns the protocol version as as string (default <code>1.1</code>)</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Request;\n\n$jwtToken = 'abc.def.ghi';\n\n$request = new Request(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    'php://memory',\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n        'Content-Type'  =&gt; 'application/json',\n    ]\n);\n\necho $request-&gt;getProtocolVersion(); // '1.1'\n</code></pre>"},{"location":"http-request/#getrequesttarget","title":"<code>getRequestTarget()</code>","text":"<p>Returns a string representing the message's request-target either as it will appear (for clients), as it appeared at request (for servers), or as it was specified for the instance (see <code>withRequestTarget()</code>). In most cases, this will be the origin-form of the composed URI, unless a value was provided to the concrete implementation (see <code>withRequestTarget()</code>).</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Request;\n\n$request = new Request();\n$request = $request-&gt;withRequestTarget('/test');\n\necho $request-&gt;getRequestTarget(); // '/test'\n</code></pre>"},{"location":"http-request/#geturi","title":"<code>getUri()</code>","text":"<p>Returns the Uri as a <code>UriInterface</code> object</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Request;\n\n$jwtToken = 'abc.def.ghi';\n\n$request = new Request(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    'php://memory',\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n        'Content-Type'  =&gt; 'application/json',\n    ]\n);\n\necho $request-&gt;getUri(); // UriInterface : https://api.phalcon.io/companies/1\n</code></pre>"},{"location":"http-request/#existence","title":"Existence","text":""},{"location":"http-request/#hasheader","title":"<code>hasHeader()</code>","text":"<p>Checks if a header exists by the given case-insensitive name. Returns <code>true</code> if the header has been found, <code>false</code> otherwise</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Request;\n\n$jwtToken = 'abc.def.ghi';\n\n$request = new Request(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    'php://memory',\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n        'Content-Type'  =&gt; [\n            'application/json',\n            'application/html',\n        ],\n    ]\n);\n\necho $request-&gt;hasHeader('content-type'); // true\n</code></pre>"},{"location":"http-request/#with","title":"With","text":"<p>The Request object is immutable. However there are a number of methods that allow you to inject data into it. The returned object is a clone of the original one. </p>"},{"location":"http-request/#withaddedheader","title":"<code>withAddedHeader()</code>","text":"<p>Returns an instance with an additional header appended with the given value. Existing values for the specified header will be maintained. The new value(s) will be appended to the existing list. If the header did not exist previously, it will be added. Throws InvalidArgumentException for invalid header names or values. The header values can be a string or an array of strings.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Request;\n\n$jwtToken = 'abc.def.ghi';\n\n$request = new Request(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    'php://memory',\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n        'Content-Type'  =&gt; [\n            'application/json',\n        ],\n    ]\n);\n\nvar_dump(\n    $request-&gt;getHeaders()\n);\n// [\n//     'Authorization' =&gt; 'Bearer abc.def.ghi',\n//     'Content-Type'  =&gt; [\n//         'application/json',\n//     ],\n// ]\n\n$clone = $request\n    -&gt;withAddedHeader(\n        'Content-Type', \n        [\n            'application/html'\n        ]\n    );\n\nvar_dump(\n    $clone-&gt;getHeaders()\n);\n// [\n//     'Authorization' =&gt; 'Bearer abc.def.ghi',\n//     'Content-Type'  =&gt; [\n//         'application/json',\n//         'application/html',\n//     ],\n// ]\n</code></pre>"},{"location":"http-request/#withbody","title":"<code>withBody()</code>","text":"<p>Returns an instance with the specified message body which implements <code>StreamInterface</code>. Throws InvalidArgumentException when the body is not valid.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Request;\nuse Phalcon\\Http\\Message\\Stream;\n\n$jwtToken = 'abc.def.ghi';\n$fileName = dataFolder('/assets/stream/mit.txt');\n$stream   = new Stream($fileName, 'rb');\n\n$request = new Request(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    'php://memory',\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n        'Content-Type'  =&gt; 'application/json',\n    ]\n);\n\n$clone = $request-&gt;withBody($stream);\n\necho $clone-&gt;getBody(); // '/assets/stream/mit.txt'\n</code></pre>"},{"location":"http-request/#withheader","title":"<code>withHeader()</code>","text":"<p>Returns an instance with the provided value replacing the specified header. While header names are case-insensitive, the casing of the header will be preserved by this function, and returned from <code>getHeaders()</code>. Throws InvalidArgumentException for invalid header names or values.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Request;\n\n$jwtToken = 'abc.def.ghi';\n\n$request = new Request(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    'php://memory',\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n    ]\n);\n\nvar_dump(\n    $request-&gt;getHeaders()\n);\n// [\n//     'Authorization' =&gt; 'Bearer abc.def.ghi',\n// ]\n\n$clone = $request-&gt;withAddedHeader(\n    'Content-Type',\n    [\n        'application/html',\n    ]\n);\n\nvar_dump(\n    $clone-&gt;getHeaders()\n);\n// [\n//     'Authorization' =&gt; 'Bearer abc.def.ghi',\n//     'Content-Type'  =&gt; [\n//         'application/html',\n//     ],\n// ]\n</code></pre>"},{"location":"http-request/#withmethod","title":"<code>withMethod()</code>","text":"<p>Return an instance with the provided HTTP method as a string. Throws InvalidArgumentException for invalid HTTP methods.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Request;\n\n$jwtToken = 'abc.def.ghi';\n\n$request = new Request(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    'php://memory',\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n        'Content-Type'  =&gt; 'application/json',\n    ]\n);\n\necho $request-&gt;getMethod(); // POST\n\n$clone = $request-&gt;withMethod('GET');\n\necho $clone-&gt;getMethod(); // GET\n</code></pre>"},{"location":"http-request/#withprotocolversion","title":"<code>withProtocolVersion()</code>","text":"<p>Returns an instance with the specified HTTP protocol version (as string). </p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Request;\n\n$request  = new Request();\n\necho $request-&gt;getProtocolVersion(); // '1.1'\n\n$clone = $request-&gt;withProtocolVersion('2.0');\n\necho $clone-&gt;getProtocolVersion(); // '2.0'\n</code></pre>"},{"location":"http-request/#withrequesttarget","title":"<code>withRequestTarget()</code>","text":"<p>Returns an instance with the specific request-target. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Request;\n\n$request = new Request();\n\necho $request-&gt;getRequestTarget(); // \"/\"\n\n$clone = $request-&gt;withRequestTarget('/test');\n\necho $clone-&gt;getRequestTarget(); // '/test'\n</code></pre>"},{"location":"http-request/#withuri","title":"<code>withUri()</code>","text":"<p>Returns an instance with the provided <code>UriInterface</code> URI. This method updates the <code>Host</code> header of the returned request by default if the URI contains a host component. If the URI does not contain a host component, any pre-existing Host header will be carried over to the returned request.</p> <p>You can opt-in to preserving the original state of the Host header by setting <code>$preserveHost</code> to <code>true</code>. When <code>$preserveHost</code> is set to <code>true</code>, this method interacts with the Host header in the following ways:</p> <ul> <li>If the Host header is missing or empty, and the new URI contains a host component, this method will update the <code>Host</code> header in the returned request.</li> <li>If the Host header is missing or empty, and the new URI does not contain a host component, this method will not update the <code>Host</code> header in the returned request.</li> <li>If a Host header is present and non-empty, this method will not update the <code>Host</code> header in the returned request.</li> </ul> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Request;\n\n$query   = 'https://phalcon.io';\n$uri     = new Uri($query);\n$request = new Request();\n\n$clone = $request-&gt;withUri($uri);\n\necho $clone-&gt;getRequestTarget(); // 'https://phalcon.io'\n</code></pre>"},{"location":"http-request/#withoutheader","title":"<code>withoutHeader()</code>","text":"<p>Return an instance without the specified header.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Request;\n\n$jwtToken = 'abc.def.ghi';\n\n$request = new Request(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    'php://memory',\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n        'Content-Type'  =&gt; [\n            'application/json',\n        ],\n    ]\n);\n\nvar_dump(\n    $request-&gt;getHeaders()\n);\n// [\n//     'Authorization' =&gt; 'Bearer abc.def.ghi',\n//     'Content-Type'  =&gt; [\n//         'application/json',\n//     ],\n// ]\n\n$clone = $request-&gt;withoutHeader('Content-Type');\n\nvar_dump(\n    $clone-&gt;getHeaders()\n);\n// [\n//     'Authorization' =&gt; 'Bearer abc.def.ghi',\n// ]\n</code></pre>"},{"location":"http-response/","title":"HTTP Response (PSR-7)","text":""},{"location":"http-response/#overview","title":"Overview","text":"<p>Phalcon\\Http\\Message\\Response is an implementation of the PSR-7 HTTP messaging interface as defined by PHP-FIG.</p> <p></p> <p>Phalcon\\Http\\Message\\Response is a representation of an outgoing, server-side response. As per the HTTP specification, this interface includes properties for each of the following:  - Protocol version  - Status code and reason phrase  - Headers  - Message body</p> <p>NOTE</p> <p>In the examples below, <code>$httpClient</code> is the client of your choice which implements PSR-7. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Response;\nuse Phalcon\\Http\\Message\\Stream;\n\n$response = new Response();\n\n$payload = [\n    'code'   =&gt; 2000,\n    'status' =&gt; 'success',\n    'payload' =&gt; [\n        'id'   =&gt; 12345,\n        'name' =&gt; 'John Doe',\n    ]\n];\n\n$stream = new Stream('php://memory', 'wb');\n$stream-&gt;write(json_encode($payload));\n\n$response = $response\n    -&gt;withHeader('Content-Type', 'application/json')\n    -&gt;withBody($stream)\n    -&gt;withStatus(200)\n;\n\n$result = $httpClient-&gt;send($response);\n\n\n$payload = 'The above copyright notice and this permission '\n         . 'notice shall be included in all copies or '\n         . 'substantial portions of the Software.'\n;\n\n$response = $response\n    -&gt;withHeader('Content-Type', 'text/html')\n    -&gt;withBody($payload)\n    -&gt;withStatus(200)\n;\n\n$result = $httpClient-&gt;send($response);\n</code></pre> <p>We are creating a new Phalcon\\Http\\Message\\Response object with a payload represented as JSON, the necessary headers and the status code. The client then sends the response back using the request object. </p> <p>The above example can be implemented by only using the constructor parameters:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Response;\n\n$payload = [\n    'code'   =&gt; 2000,\n    'status' =&gt; 'success',\n    'payload' =&gt; [\n        'id'   =&gt; 12345,\n        'name' =&gt; 'John Doe',\n    ]\n];\n\n\n$request = new Response(\n    json_encode($payload),\n    200,\n    [\n        'Content-Type'  =&gt; 'application/json',\n    ]\n);\n\n$result = $httpClient-&gt;send($request);\n</code></pre> <p>The Response object created is immutable, meaning it will never change. Any call to methods prefixed with <code>with*</code> will return a clone of the object to maintain immutability, as per the standard.</p>"},{"location":"http-response/#constructor","title":"Constructor","text":"<p><pre><code>public function __construct(\n    [mixed $body = \"php://temp\" \n    [, int $code = 200 \n    [, array $headers = [] ]]]\n)\n</code></pre> The constructor accepts parameters allowing you to create the object with certain properties populated. You can define the body, status code as well as the headers. All parameters are optional.</p> <ul> <li><code>body</code> - It defaults to <code>php://memory</code>. The method accepts either an object that implements the <code>StreamInterface</code> interface or a string such as the name of the stream. The default mode for the stream is <code>w+b</code>. If a non valid stream is passed, an InvalidArgumentException is thrown</li> <li><code>code</code>  - An integer representing the status code for the response. It defaults to <code>200</code>.</li> <li><code>headers</code>  - A key value array, with key as the header name and value as the header value.</li> </ul>"},{"location":"http-response/#getters","title":"Getters","text":""},{"location":"http-response/#getbody","title":"<code>getBody()</code>","text":"<p>Returns the body as a <code>StreamInterface</code> object. This method is useful also when in need to quickly adjust the body of the message. You can check the methods you can call by checking the Phalcon\\Http\\Message\\Stream class.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Response;\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataFolder('/assets/stream/mit.txt');\n$stream   = new Stream($fileName, 'rb');\n\n$response = new Response($stream);\n\necho $response-&gt;getBody(); // '/assets/stream/mit.txt'\n\n\n$response-&gt;getBody()-&gt;write('additional content goes here');\n</code></pre> <p>To get all the contents of the stream:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Response;\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataFolder('/assets/stream/mit.txt');\n$stream   = new Stream($fileName, 'rb');\n\n$response = new Response($stream);\n\n$body = $response-&gt;getBody();\n$body-&gt;rewind()\n\n$text = $body-&gt;getContents();\n</code></pre>"},{"location":"http-response/#getheader","title":"<code>getHeader()</code>","text":"<p>Returns an array of all the header values of the passed case insensitive header name. If the string parameter representing the header name requested is not present, an empty array is returned.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Response;\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataFolder('/assets/stream/mit.txt');\n$stream   = new Stream($fileName, 'rb');\n\n$response = new Response(\n    $stream,\n    200,\n    [\n        'Content-Type'  =&gt; 'application/json',\n    ]\n);\n\necho $response-&gt;getHeader('content-Type'); // ['application/json']\necho $response-&gt;getHeader('unknown');      // []\n</code></pre>"},{"location":"http-response/#getheaderline","title":"<code>getHeaderLine()</code>","text":"<p>Returns all of the header values of the given case-insensitive header name as a string concatenated together using a comma. If the string parameter representing the header name requested, an empty string is returned.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Response;\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataFolder('/assets/stream/mit.txt');\n$stream   = new Stream($fileName, 'rb');\n\n$response = new Response(\n    $stream,\n    200,\n    [\n        'Content-Type'  =&gt; [\n            'application/json',\n            'application/html',\n        ],\n    ]\n);\n\necho $response-&gt;getHeaderLine('content-Type'); // 'application/json,application/html'\n</code></pre>"},{"location":"http-response/#getheaders","title":"<code>getHeaders()</code>","text":"<p>Returns an array with all the message header values. The keys represent the header name as it will be sent over the wire, and each value is an array of strings associated with the header. While header names are not case-sensitive, this method preserves the exact case in which headers were originally specified.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Response;\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataFolder('/assets/stream/mit.txt');\n$stream   = new Stream($fileName, 'rb');\n\n$response = new Response(\n    $stream,\n    200,\n    [\n        'Content-Type'  =&gt; [\n            'application/json',\n            'application/html',\n        ],\n    ]\n);\n\nvar_dump(\n    $response-&gt;getHeaders()\n);\n// [\n//     'Content-Type'  =&gt; [\n//         'application/json',\n//         'application/html',\n//     ],\n// ]\n</code></pre>"},{"location":"http-response/#getprotocolversion","title":"<code>getProtocolVersion()</code>","text":"<p>Returns the protocol version as as string (default <code>1.1</code>)</p> <pre><code>&lt;?php\n\n\nuse Phalcon\\Http\\Message\\Response;\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataFolder('/assets/stream/mit.txt');\n$stream   = new Stream($fileName, 'rb');\n\n$response = new Response(\n    $stream,\n    200,\n    [\n        'Content-Type'  =&gt; 'application/json',\n    ]\n);\n\n\necho $response-&gt;getProtocolVersion(); // '1.1'\n</code></pre>"},{"location":"http-response/#getreasonphrase","title":"<code>getReasonPhrase()</code>","text":"<p>Returns the response reason phrase associated with the status code. Because a reason phrase is not a required element in a response status line, the reason phrase value may be empty. The return string comes from the IANA HTTP Status Code Registry, as defined in the RFC 7231.</p> <pre><code>&lt;?php\n\n\nuse Phalcon\\Http\\Message\\Response;\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataFolder('/assets/stream/mit.txt');\n$stream   = new Stream($fileName, 'rb');\n\n$response = new Response(\n    $stream,\n    203,\n    [\n        'Content-Type'  =&gt; 'application/json',\n    ]\n);\n\n\necho $response-&gt;getReasonPhrase(); // 'Non-Authoritative Information'\n</code></pre>"},{"location":"http-response/#getstatuscode","title":"<code>getStatusCode()</code>","text":"<p>Returns the response status code. The status code is a 3-digit integer result code of the server's attempt to understand and satisfy the request.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Response;\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataFolder('/assets/stream/mit.txt');\n$stream   = new Stream($fileName, 'rb');\n\n$response = new Response(\n    $stream,\n    203,\n    [\n        'Content-Type'  =&gt; 'application/json',\n    ]\n);\n\n\necho $response-&gt;getStatusCode(); // 203\n</code></pre>"},{"location":"http-response/#geturi","title":"<code>getUri()</code>","text":"<p>Returns the Uri as a <code>UriInterface</code> object</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Response;\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataFolder('/assets/stream/mit.txt');\n$stream   = new Stream($fileName, 'rb');\n\n$response = new Response(\n    $stream,\n    200,\n    [\n        'Content-Type'  =&gt; 'application/json',\n    ]\n);\n\n$response = $response-&gt;withUri('https://api.phalcon.io/companies/1');\n\necho $response-&gt;getUri(); // UriInterface : https://api.phalcon.io/companies/1\n</code></pre>"},{"location":"http-response/#existence","title":"Existence","text":""},{"location":"http-response/#hasheader","title":"<code>hasHeader()</code>","text":"<p>Checks if a header exists by the given case-insensitive name. Returns <code>true</code> if the header has been found, <code>false</code> otherwise</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Response;\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataFolder('/assets/stream/mit.txt');\n$stream   = new Stream($fileName, 'rb');\n\n$response = new Response(\n    $stream,\n    200,\n    [\n        'Content-Type'  =&gt; [\n            'application/json',\n            'application/html',\n        ],\n    ]\n);\n\necho $response-&gt;hasHeader('content-type'); // true\n</code></pre>"},{"location":"http-response/#with","title":"With","text":"<p>The Request object is immutable. However there are a number of methods that allow you to inject data into it. The returned object is a clone of the original one. </p>"},{"location":"http-response/#withaddedheader","title":"<code>withAddedHeader()</code>","text":"<p>Returns an instance with an additional header appended with the given value. Existing values for the specified header will be maintained. The new value(s) will be appended to the existing list. If the header did not exist previously, it will be added. Throws InvalidArgumentException for invalid header names or values. The header values can be a string or an array of strings.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Response;\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataFolder('/assets/stream/mit.txt');\n$stream   = new Stream($fileName, 'rb');\n\n$jwtToken = 'abc.def.ghi';\n$response = new Response(\n    $stream,\n    200,\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n        'Content-Type'  =&gt; [\n            'application/json',\n        ],\n    ]\n);\n\nvar_dump(\n    $response-&gt;getHeaders()\n);\n// [\n//     'Authorization' =&gt; 'Bearer abc.def.ghi',\n//     'Content-Type'  =&gt; [\n//         'application/json',\n//     ],\n// ]\n\n$clone = $response-&gt;withAddedHeader('Content-Type', ['application/html']);\n\nvar_dump(\n    $clone-&gt;getHeaders()\n);\n// [\n//     'Authorization' =&gt; 'Bearer abc.def.ghi',\n//     'Content-Type'  =&gt; [\n//         'application/json',\n//         'application/html',\n//     ],\n// ]\n</code></pre>"},{"location":"http-response/#withbody","title":"<code>withBody()</code>","text":"<p>Returns an instance with the specified message body which implements <code>StreamInterface</code>. Throws InvalidArgumentException when the body is not valid.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Response;\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataFolder('/assets/stream/mit.txt');\n$stream   = new Stream($fileName, 'rb');\n\n$jwtToken = 'abc.def.ghi';\n$response = new Response(\n    null,\n    200,\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n        'Content-Type'  =&gt; 'application/json',\n    ]\n);\n\n$clone = $response-&gt;withBody($stream);\n\necho $clone-&gt;getBody(); // '/assets/stream/mit.txt'\n</code></pre>"},{"location":"http-response/#withheader","title":"<code>withHeader()</code>","text":"<p>Returns an instance with the provided value replacing the specified header. While header names are case-insensitive, the casing of the header will be preserved by this function, and returned from <code>getHeaders()</code>. Throws InvalidArgumentException for invalid header names or values.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Response;\n\n$jwtToken = 'abc.def.ghi';\n$response = new Response(\n    null,\n    200,\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n    ]\n);\n\nvar_dump(\n    $response-&gt;getHeaders()\n);\n// [\n//     'Authorization' =&gt; 'Bearer abc.def.ghi',\n// ]\n\n$clone = $response-&gt;withAddedHeader(\n    'Content-Type',\n    [\n        'application/html',\n    ]\n);\n\nvar_dump(\n    $clone-&gt;getHeaders()\n);\n// [\n//     'Authorization' =&gt; 'Bearer abc.def.ghi',\n//     'Content-Type'  =&gt; [\n//         'application/html',\n//     ],\n// ]\n</code></pre>"},{"location":"http-response/#withprotocolversion","title":"<code>withProtocolVersion()</code>","text":"<p>Returns an instance with the specified HTTP protocol version (as string). </p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Response;\n\n$response  = new Request();\n\necho $response-&gt;getProtocolVersion(); // '1.1'\n\n$clone = $response-&gt;withProtocolVersion('2.0');\n\necho $clone-&gt;getProtocolVersion(); // '2.0'\n</code></pre>"},{"location":"http-response/#withstatus","title":"<code>withStatus()</code>","text":"<p>Return an instance with the specified status code and, optionally, reason phrase. If no reason is defined, the reason string will come from the IANA HTTP Status Code Registry, as defined in the RFC 7231.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Response;\n\n$response  = new Request();\n\necho $response-&gt;getStatusCode();   // 200\necho $response-&gt;getReasonPhrase(); // OK\n\n$clone = $response-&gt;withStatus(203, 'Something Else');\n\necho $response-&gt;getStatusCode();   // 203\necho $response-&gt;getReasonPhrase(); // 'Something Else'\n</code></pre>"},{"location":"http-response/#withuri","title":"<code>withUri()</code>","text":"<p>Returns an instance with the provided <code>UriInterface</code> URI. This method updates the <code>Host</code> header of the returned request by default if the URI contains a host component. If the URI does not contain a host component, any pre-existing Host header will be carried over to the returned request.</p> <p>You can opt-in to preserving the original state of the Host header by setting <code>$preserveHost</code> to <code>true</code>. When <code>$preserveHost</code> is set to <code>true</code>, this method interacts with the Host header in the following ways:</p> <ul> <li>If the Host header is missing or empty, and the new URI contains a host component, this method will update the <code>Host</code> header in the returned request.</li> <li>If the Host header is missing or empty, and the new URI does not contain a host component, this method will not update the <code>Host</code> header in the returned request.</li> <li>If a Host header is present and non-empty, this method will not update the <code>Host</code> header in the returned request.</li> </ul> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Response;\n\n$query   = 'https://phalcon.io';\n$uri     = new Uri($query);\n$request = new Response();\n\n$clone = $request-&gt;withUri($uri);\n\necho $clone-&gt;getUri(); // UriInterface: 'https://phalcon.io'\n</code></pre>"},{"location":"http-response/#withoutheader","title":"<code>withoutHeader()</code>","text":"<p>Return an instance without the specified header.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Response;\n\n$jwtToken = 'abc.def.ghi';\n\n$response = new Response(\n    null,\n    200,\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n        'Content-Type'  =&gt; [\n            'application/json',\n        ],\n    ]\n);\n\nvar_dump(\n    $response-&gt;getHeaders()\n);\n// [\n//     'Authorization' =&gt; 'Bearer abc.def.ghi',\n//     'Content-Type'  =&gt; [\n//         'application/json',\n//     ],\n// ]\n\n$clone = $response-&gt;withoutHeader('Content-Type');\n\nvar_dump(\n    $clone-&gt;getHeaders()\n);\n// [\n//     'Authorization' =&gt; 'Bearer abc.def.ghi',\n// ]\n</code></pre>"},{"location":"http-server-request/","title":"HTTP Server Request (PSR-7)","text":""},{"location":"http-server-request/#overview","title":"Overview","text":"<p>Phalcon\\Http\\Message\\ServerRequest is an implementation of the PSR-7 HTTP messaging interface as defined by PHP-FIG.</p> <p></p> <p>These interface implementations have been created to establish a standard between middleware implementations. Applications often need to receive data from external sources such as the users using the application. The Phalcon\\Http\\Message\\ServerRequest represents an incoming, server-side HTTP request. Per the HTTP specification, this interface includes properties for each of the following: These interface implementations have been created to establish a standard between middleware implementations. Applications often need to receive data from external sources such as the users using the application. The Phalcon\\Http\\Message\\ServerRequest represents an incoming, server-side HTTP request. Per the HTTP specification, this interface includes properties for each of the following:</p> <ul> <li>Headers</li> <li>HTTP method</li> <li>Message body</li> <li>Protocol version</li> <li>URI</li> </ul> <p>Additionally, it encapsulates all data as it has arrived at the application from the CGI and/or PHP environment, including:</p> <ul> <li>The values represented in <code>$_SERVER</code>.</li> <li>Any cookies provided (generally via <code>$_COOKIE</code>)</li> <li>Query string arguments (generally via <code>$_GET</code>, or as parsed via parse_str())</li> <li>Upload files, if any (as represented by <code>$_FILES</code>)</li> <li>Unserialized body parameters (generally from <code>$_POST</code>)</li> </ul> <p><code>$_SERVER</code> values are treated as immutable, as they represent application state at the time of request; as such, no methods are provided to allow modification of those values. The other values provide such methods, as they can be restored from <code>$_SERVER</code> or the request body, and may need treatment during the application (e.g., body parameters may be unserialized based on content type).</p> <p>Additionally, this interface recognizes the utility of introspecting a request to derive and match additional parameters (e.g., via URI path matching, decrypting cookie values, unserializing non-form-encoded body content, matching authorization headers to users, etc). These parameters are stored in an \"attributes\" property.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\nuse Phalcon\\Http\\Message\\Uri;\n\n$request = new Request();\n$uri     = new Uri('https://api.phalcon.io/companies/1');\n\n$request = new ServerRequest();\n$request = $request\n    -&gt;withHeader('Content-Type', ['application/json'])\n    -&gt;withMethod('GET')\n    -&gt;withProtocolVersion('1.1')\n    -&gt;withUploadedFiles($_FILES)\n    -&gt;withUri($uri)\n;\n</code></pre> <p>We are creating a new Phalcon\\Http\\Message\\ServerRequest object and a new Phalcon\\Http\\Message\\Uri object with the target URL. Following that we define the method (<code>GET</code>), a protocol version, uploaded files and additional headers. </p> <p>The above example can be implemented by only using the constructor parameters:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request = new ServerRequest(\n    'GET',\n    'https://api.phalcon.io/companies/1',\n    $_SERVER,\n    'php://input',\n    [\n        'Content-Type'  =&gt; 'application/json',\n    ],\n    $_COOKIE,\n    $_GET,\n    $_FILES,\n    'some body',\n    '1.2'\n);\n</code></pre> <p>The ServerRequest object created is immutable, meaning it will never change. Any call to methods prefixed with <code>with*</code> will return a clone of the object to maintain immutability, as per the standard.</p>"},{"location":"http-server-request/#constructor","title":"Constructor","text":"<p><pre><code>public function __construct(\n    [string $method = \"GET\" \n    [, mixed $uri = null \n    [, array serverParams = [],\n    [, mixed body = \"php://input\",\n    [, mixed headers = [],\n    [, array cookies = [],\n    [, array queryParams = [],\n    [, array uploadFiles = [],\n    [, mixed parsedBody = null,\n    [, string protocol = \"1.1\"]]]]]]]]]]\n)\n</code></pre> The constructor accepts parameters allowing you to create the object with certain properties populated. You can define the target HTTP method, the URL, the body as well as the headers. All parameters are optional.</p> <ul> <li><code>method</code> - defaults to <code>GET</code>. The supported methods are: <code>GET</code>, <code>CONNECT</code>, <code>DELETE</code>, <code>HEAD</code>, <code>OPTIONS</code>, <code>PATCH</code>, <code>POST</code>, <code>PUT</code>, <code>TRACE</code></li> <li><code>uri</code> - An instance of Phalcon\\Http\\Message\\Uri or a URL.</li> <li><code>serverParams</code> - A key value array, with key as the server variable name and value as the server value</li> <li><code>body</code> - It defaults to <code>php://input</code>. The method accepts either an object that implements the <code>StreamInterface</code> interface or a string such as the name of the stream. The default mode for the stream is <code>w+b</code>. If a non valid stream is passed, an InvalidArgumentException is thrown</li> <li><code>headers</code> - A key value array, with key as the header name and value as the header value.</li> <li><code>cookies</code> - A key value array, with key as the cookie name and value as the cookie value.</li> <li><code>queryParams</code> - A key value array, with key as the query parameter name and value as the query parameter value.</li> <li><code>uploadFiles</code> - An array of uploaded files (<code>$_FILES</code>)</li> <li><code>parsedBody</code> - The parsed body of the server request</li> <li><code>protocol</code> - A string representing the protocol (<code>1.0</code>, <code>1.1</code>)</li> </ul> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request = new ServerRequest(\n    'GET',\n    'https://api.phalcon.io/companies/1',\n    $_SERVER,\n    'php://input',\n    [\n        'Content-Type'  =&gt; 'application/json',\n    ],\n    $_COOKIE,\n    $_GET,\n    $_FILES,\n    'some body',\n    '1.2'\n);\n</code></pre>"},{"location":"http-server-request/#getters","title":"Getters","text":""},{"location":"http-server-request/#getattribute","title":"<code>getAttribute()</code>","text":"<p>Returns a single derived request attribute. The method gets a single attribute as produced by <code>getAttributes()</code>. The first parameter defines the name of the attribute that we need to retrieve. You can also supply a second variable which will be used as a default, in case the requested attribute name does not exist.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request = new ServerRequest();\n$request = $request\n    -&gt;withAttribute('one', 'two')\n;\n\necho $request-&gt;getAttribute('one');           // 'two'\necho $request-&gt;getAttribute('three', 'four'); // 'four'\n</code></pre>"},{"location":"http-server-request/#getattributes","title":"<code>getAttributes()</code>","text":"<p>Returns an array with all the attributes derived from the request. These request \"attributes\" may be used to allow injection of any parameters derived from the request: e.g., the results of path match operations; the results of decrypting cookies; the results of unserializing non-form-encoded message bodies; etc. Attributes will be application and request specific, and can be mutable.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request = new ServerRequest();\n$request = $request\n    -&gt;withAttribute('one', 'two')\n;\n\nvar_dump(\n    $request-&gt;getAttributes()\n);\n\n// [\n//     'one' =&gt; 'two',\n// ]\n</code></pre>"},{"location":"http-server-request/#getbody","title":"<code>getBody()</code>","text":"<p>Returns the body as a <code>StreamInterface</code> object</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\nuse Phalcon\\Http\\Message\\Stream;\n\n$jwtToken = 'abc.def.ghi';\n$fileName = dataFolder('/assets/stream/mit.txt');\n$stream   = new Stream($fileName, 'rb');\n\n$request = new ServerRequest('GET', null, [], $stream);\n\necho $request-&gt;getBody(); // '/assets/stream/mit.txt'\n</code></pre>"},{"location":"http-server-request/#getcookieparams","title":"<code>getCookieParams()</code>","text":"<p>Returns the cookies of the server request. The returned array is compatible with the structure of the <code>$_COOKIE</code> superglobal.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request = new ServerRequest(\n    'GET',\n    'https://api.phalcon.io/companies/1',\n    [],\n    'php://input',\n    [],\n    [\n        'cookie-one' =&gt; 'cookie-value-one',\n    ]\n);\n\nvar_dump(\n    $request-&gt;getCookieParams()\n);\n\n// [\n//     'cookie-one' =&gt; 'cookie-value-one',\n// ]\n</code></pre>"},{"location":"http-server-request/#getheader","title":"<code>getHeader()</code>","text":"<p>Returns an array of all the header values of the passed case insensitive header name. If the string parameter representing the header name requested is not present, an empty array is returned.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request  = new ServerRequest(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    [],\n    'php://memory',\n    [\n        'Content-Type' =&gt; 'application/json',\n    ]\n);\n\necho $request-&gt;getHeader('content-Type'); // ['application/json']\necho $request-&gt;getHeader('unknown');      // []\n</code></pre>"},{"location":"http-server-request/#getheaderline","title":"<code>getHeaderLine()</code>","text":"<p>Returns all of the header values of the given case-insensitive header name as a string concatenated together using a comma. If the string parameter representing the header name requested, an empty string is returned.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request  = new ServerRequest(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    [],\n    'php://memory',\n    [\n        'Content-Type'  =&gt; [\n            'application/json',\n            'application/html',\n        ],\n    ]\n);\n\necho $request-&gt;getHeaderLine('content-Type'); // 'application/json,application/html'\n</code></pre>"},{"location":"http-server-request/#getheaders","title":"<code>getHeaders()</code>","text":"<p>Returns an array with all the message header values. The keys represent the header name as it will be sent over the wire, and each value is an array of strings associated with the header. While header names are not case-sensitive, this method preserves the exact case in which headers were originally specified.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request  = new ServerRequest(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    [],\n    'php://memory',\n    [\n        'Content-Type'  =&gt; [\n            'application/json',\n            'application/html',\n        ],\n    ]\n);\n\nvar_dump(\n    $request-&gt;getHeaders()\n);\n// [\n//     'Content-Type'  =&gt; [\n//         'application/json',\n//         'application/html',\n//     ],\n// ]\n</code></pre>"},{"location":"http-server-request/#getmethod","title":"<code>getMethod()</code>","text":"<p>Returns the method as a string</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request  = new ServerRequest('POST');\n\necho $request-&gt;getMethod(); // POST\n</code></pre>"},{"location":"http-server-request/#getparsedbody","title":"<code>getParsedBody()</code>","text":"<p>Returns any parameters provided in the request body. If the request <code>Content-Type</code> is either <code>application/x-www-form-urlencoded</code> or <code>multipart/form-data</code>, and the request method is <code>POST</code>, this method will return the contents of <code>$_POST</code>. Otherwise, this method may return any results of unserializing the request body content; as parsing returns structured content, the potential types will be arrays or objects only. If there is no body content, <code>null</code> will be returned.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request = new ServerRequest(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    $_SERVER,\n    'php://input',\n    [\n        'Content-Type'  =&gt; 'application/x-www-form-urlencoded',\n    ],\n    $_COOKIE,\n    $_GET,\n    $_FILES,\n    $_POST,\n    '1.2'\n);\n\nvar_dump(\n    $this-&gt;getParsedBody()\n);\n\n// $_POST\n</code></pre>"},{"location":"http-server-request/#getprotocolversion","title":"<code>getProtocolVersion()</code>","text":"<p>Returns the protocol version as as string (default <code>1.1</code>)</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request  = new ServerRequest();\n\necho $request-&gt;getProtocolVersion(); // '1.1'\n</code></pre>"},{"location":"http-server-request/#getqueryparams","title":"<code>getQueryParams()</code>","text":"<p>Returns an array with the unserialized query string arguments, if any. Note that the query params might not be in sync with the URI or server parameters. If you need to ensure you are only getting the original values, you may need to parse the query string from <code>getUri()-&gt;getQuery()</code> or from the <code>QUERY_STRING</code> server parameter.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request = new ServerRequest();\n$request = $request-&gt;withQueryParams(\n    [\n        'param' =&gt; 'value',\n    ]\n);\n\nvar_dump(\n    $request-&gt;getQueryParams()\n);\n\n// [\n//     'param' =&gt; 'value',\n// ]\n</code></pre>"},{"location":"http-server-request/#getrequesttarget","title":"<code>getRequestTarget()</code>","text":"<p>Returns a string representing the message's request-target either as it will appear (for clients), as it appeared at request (for servers), or as it was specified for the instance (see <code>withRequestTarget()</code>). In most cases, this will be the origin-form of the composed URI, unless a value was provided to the concrete implementation (see <code>withRequestTarget()</code>).</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request = new ServerRequest();\n$request = $request-&gt;withRequestTarget('/test');\n\necho $request-&gt;getRequestTarget(); // '/test'\n</code></pre>"},{"location":"http-server-request/#getserverparams","title":"<code>getServerParams()</code>","text":"<p>Returns an array of data related to the incoming request environment, typically derived from PHP's <code>$_SERVER</code> superglobal. This data however is not required to originate from the <code>$_SERVER</code> superglobal.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request  = new ServerRequest(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    $_SERVER\n);\n\nvar_dump(\n    $this-&gt;getServerParams()\n);\n\n// $_POST\n\n$request  = new ServerRequest(\n    'POST',\n    'https://api.phalcon.io/companies/1',\n    [\n        'param' =&gt; 'value',\n    ]   \n);\n\nvar_dump(\n    $this-&gt;getServerParams()\n);\n\n// [\n//     'param' =&gt; 'value',\n// ]\n</code></pre>"},{"location":"http-server-request/#getuploadedfiles","title":"<code>getUploadedFiles()</code>","text":"<p>Returns an array with upload metadata in a normalized tree, with each leaf is an instance of <code>Psr\\Http\\Message\\UploadedFileInterface</code>. These values can derive from the <code>$_FILES</code> superglobal or the message body during instantiation or they can be injected using <code>withUploadedFiles()</code>. If no data is present, an empty array will be returned.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request = new ServerRequest(\n    'GET',\n    'https://api.phalcon.io/companies/1',\n    $_SERVER,\n    'php://input',\n    [\n        'Content-Type'  =&gt; 'application/json',\n    ],\n    $_COOKIE,\n    $_GET,\n    $_FILES\n);\n\nvar_dump(\n    $this-&gt;getUploadedFiles()\n);\n\n// [\n//     'my-form' =&gt; [\n//         'details' =&gt; [\n//             'invoice' =&gt; /* UploadedFileInterface instance */\n//         ],\n//     ],\n// ]\n</code></pre>"},{"location":"http-server-request/#geturi","title":"<code>getUri()</code>","text":"<p>Returns the Uri as a <code>UriInterface</code> object</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request = new ServerRequest(\n    'POST',\n    'https://api.phalcon.io/companies/1'\n);\n\necho $request-&gt;getUri(); // UriInterface : https://api.phalcon.io/companies/1\n</code></pre>"},{"location":"http-server-request/#existence","title":"Existence","text":""},{"location":"http-server-request/#hasheader","title":"<code>hasHeader()</code>","text":"<p>Checks if a header exists by the given case-insensitive name. Returns <code>true</code> if the header has been found, <code>false</code> otherwise</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$jwtToken = 'abc.def.ghi';\n\n$request = new ServerRequest(\n    'GET',\n    'https://api.phalcon.io/companies/1',\n    $_SERVER,\n    'php://memory',\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n        'Content-Type'  =&gt; [\n            'application/json',\n            'application/html',\n        ],\n    ]\n);\n\necho $request-&gt;hasHeader('content-type'); // true\n</code></pre>"},{"location":"http-server-request/#with","title":"With","text":"<p>The Request object is immutable. However there are a number of methods that allow you to inject data into it. The returned object is a clone of the original one. </p>"},{"location":"http-server-request/#withaddedheader","title":"<code>withAddedHeader()</code>","text":"<p>Returns an instance with an additional header appended with the given value. Existing values for the specified header will be maintained. The new value(s) will be appended to the existing list. If the header did not exist previously, it will be added. Throws InvalidArgumentException for invalid header names or values. The header values can be a string or an array of strings.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$jwtToken = 'abc.def.ghi';\n\n$request = new ServerRequest(\n    'GET',\n    'https://api.phalcon.io/companies/1',\n    $_SERVER,\n    'php://memory',\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n        'Content-Type'  =&gt; [\n            'application/json',\n        ],\n    ]\n);\n\nvar_dump(\n    $request-&gt;getHeaders()\n);\n// [\n//     'Authorization' =&gt; 'Bearer abc.def.ghi',\n//     'Content-Type'  =&gt; [\n//         'application/json',\n//     ],\n// ]\n\n$clone = $request\n    -&gt;withAddedHeader(\n        'Content-Type', \n        [\n            'application/html'\n        ]\n    );\n\nvar_dump(\n    $clone-&gt;getHeaders()\n);\n// [\n//     'Authorization' =&gt; 'Bearer abc.def.ghi',\n//     'Content-Type'  =&gt; [\n//         'application/json',\n//         'application/html',\n//     ],\n// ]\n</code></pre>"},{"location":"http-server-request/#withattribute","title":"<code>withAttribute()</code>","text":"<p>Returns an instance with the specified derived request attribute. This method allows setting a single derived request attribute as described in <code>getAttributes()</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request = new ServerRequest();\n\n$clone = $request\n    -&gt;withAttribute(\n        'attribute-name', \n        'attribute-value'\n    );\n\nvar_dump(\n    $clone-&gt;getAttributes()\n);\n// [\n//     'attribute-name' =&gt; 'attribute-value',\n// ]\n</code></pre>"},{"location":"http-server-request/#withbody","title":"<code>withBody()</code>","text":"<p>Returns an instance with the specified message body which implements <code>StreamInterface</code>. Throws InvalidArgumentException when the body is not valid.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataFolder('/assets/stream/mit.txt');\n$stream   = new Stream($fileName, 'rb');\n\n$request = new ServerRequest();\n\n$clone = $request-&gt;withBody($stream);\n\necho $clone-&gt;getBody(); // '/assets/stream/mit.txt'\n</code></pre>"},{"location":"http-server-request/#withcookieparams","title":"<code>withCookieParams()</code>","text":"<p>Returns an instance with the specified cookies. The data is not required to come from the <code>$_COOKIE</code> superglobal, but it must be compatible with the structure of <code>$_COOKIE</code>. Typically, this data will be injected at instantiation. This method does not update the related <code>Cookie</code> header of the request instance, nor related values in the server parameters.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request = new ServerRequest();\n\n$clone = $request\n    -&gt;withCookieParams(\n        [\n            'cookie-name' =&gt; 'cookie-value',\n        ]\n    );\n\nvar_dump(\n    $clone-&gt;getCookieParams()\n);\n// [\n//     'cookie-name' =&gt; 'cookie-value',\n// ]\n</code></pre>"},{"location":"http-server-request/#withheader","title":"<code>withHeader()</code>","text":"<p>Returns an instance with the provided value replacing the specified header. While header names are case-insensitive, the casing of the header will be preserved by this function, and returned from <code>getHeaders()</code>. Throws InvalidArgumentException for invalid header names or values.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$jwtToken = 'abc.def.ghi';\n\n$request = new ServerRequest(\n    'GET',\n    'https://api.phalcon.io/companies/1',\n    $_SERVER,\n    'php://memory',\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n    ]\n);\n\nvar_dump(\n    $request-&gt;getHeaders()\n);\n// [\n//     'Authorization' =&gt; 'Bearer abc.def.ghi',\n// ]\n\n$clone = $request-&gt;withAddedHeader(\n    'Content-Type',\n    [\n        'application/html',\n    ]\n);\n\nvar_dump(\n    $clone-&gt;getHeaders()\n);\n// [\n//     'Authorization' =&gt; 'Bearer abc.def.ghi',\n//     'Content-Type'  =&gt; [\n//         'application/html',\n//     ],\n// ]\n</code></pre>"},{"location":"http-server-request/#withmethod","title":"<code>withMethod()</code>","text":"<p>Return an instance with the provided HTTP method as a string. Throws InvalidArgumentException for invalid HTTP methods.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request = new ServerRequest('POST');\n\necho $request-&gt;getMethod(); // POST\n\n$clone = $request-&gt;withMethod('GET');\n\necho $clone-&gt;getMethod(); // GET\n</code></pre>"},{"location":"http-server-request/#withparsedbody","title":"<code>withParsedBody()</code>","text":"<p>Returns an instance with the specified body parameters. If the request <code>Content-Type</code> is either <code>application/x-www-form-urlencoded</code> or <code>multipart/form-data</code>, and the request method is <code>POST</code>, this method should be used only to inject the contents of <code>$_POST</code>. The data is not required to come from <code>$_POST</code>, but will be the results of unserializing the request body content. Unserialization/parsing returns structured data, and, as such, this method only accepts arrays or objects, or a null value if nothing was available to parse.</p> <p>As an example, if content negotiation determines that the request data is a JSON payload, this method could be used to create a request instance with the unserialized parameters. Throws InvalidArgumentException for unsupported argument types.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request = new ServerRequest();\n\n$clone = $request-&gt;withParsedBody(\n    [\n        'one' =&gt; 'two',\n    ]\n);\n\necho $clone-&gt;getParsedBody(); \n</code></pre>"},{"location":"http-server-request/#withprotocolversion","title":"<code>withProtocolVersion()</code>","text":"<p>Returns an instance with the specified HTTP protocol version (as string). </p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request = new ServerRequest();\n\necho $request-&gt;getProtocolVersion(); // '1.1'\n\n$clone = $request-&gt;withProtocolVersion('2.0');\n\necho $clone-&gt;getProtocolVersion(); // '2.0'\n</code></pre>"},{"location":"http-server-request/#withqueryparams","title":"<code>withQueryParams()</code>","text":"<p>Returns an instance with the specified query string arguments. These values remain immutable over the course of the incoming request. You can inject these parameters during instantiation, such as from PHP's <code>$_GET</code> superglobal, or they can be derived from some other value such as the URI. In cases where the arguments are parsed from the URI, the data is compatible with what PHP's parse_str() would return for purposes of how duplicate query parameters are handled, and how nested sets are handled.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request = new ServerRequest();\n\n$clone = $request-&gt;withQueryParams(\n    [\n        'one' =&gt; 'two',\n    ]\n);\n\nvar_dump(\n    $clone-&gt;getQueryParams()\n);\n\n// [\n//     'one' =&gt; 'two',\n// ]\n</code></pre>"},{"location":"http-server-request/#withrequesttarget","title":"<code>withRequestTarget()</code>","text":"<p>Returns an instance with the specific request-target. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request = new ServerRequest();\n\necho $request-&gt;getRequestTarget(); // \"/\"\n\n$clone = $request-&gt;withRequestTarget('/test');\n\necho $clone-&gt;getRequestTarget(); // '/test'\n</code></pre>"},{"location":"http-server-request/#withuploadedfiles","title":"<code>withUploadedFiles()</code>","text":"<p>Creates a new instance with the specified uploaded files. It accepts an array tree of <code>UploadedFileInterface</code> instances. Throws InvalidArgumentException if an invalid structure is provided.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\nuse Phalcon\\Http\\Message\\UploadedFile;\n\n$fileName = dataFolder('/assets/stream/mit.txt');\n$stream   = new Stream($fileName, 'rb');\n\n$file = new UploadedFile(\n    $stream,\n    1234,\n    UPLOAD_ERR_OK,\n    'phalcon.txt'\n);\n\n$request = new ServerRequest();\n\n$clone = $request\n    -&gt;withUploadedFiles(\n        [\n            'my-form' =&gt; [\n                'details' =&gt; [\n                    'invoice' =&gt; $file,\n                ] \n            ]          \n        ]           \n    );\n\nvar_dump(\n    $this-&gt;getUploadedFiles()\n);\n\n// [\n//     'my-form' =&gt; [\n//         'details' =&gt; [\n//             'invoice' =&gt; /* UploadedFileInterface instance */\n//         ],\n//     ],\n// ]\n</code></pre>"},{"location":"http-server-request/#withuri","title":"<code>withUri()</code>","text":"<p>Returns an instance with the provided <code>UriInterface</code> URI. This method updates the <code>Host</code> header of the returned request by default if the URI contains a host component. If the URI does not contain a host component, any pre-existing Host header will be carried over to the returned request.</p> <p>You can opt-in to preserving the original state of the Host header by setting <code>$preserveHost</code> to <code>true</code>. When <code>$preserveHost</code> is set to <code>true</code>, this method interacts with the Host header in the following ways:</p> <ul> <li>If the Host header is missing or empty, and the new URI contains a host component, this method will update the <code>Host</code> header in the returned request.</li> <li>If the Host header is missing or empty, and the new URI does not contain a host component, this method will not update the <code>Host</code> header in the returned request.</li> <li>If a Host header is present and non-empty, this method will not update the <code>Host</code> header in the returned request.</li> </ul> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$query   = 'https://phalcon.io';\n$uri     = new Uri($query);\n$request = new ServerRequest();\n\n$clone = $request-&gt;withUri($uri);\n\necho $clone-&gt;getRequestTarget(); // 'https://phalcon.io'\n</code></pre>"},{"location":"http-server-request/#withoutattribute","title":"<code>withoutAttribute()</code>","text":"<p>Returns an instance that removes the specified derived request attribute. This method allows removing a single derived request attribute as described in <code>getAttributes()</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$request = new ServerRequest();\n\n$clone = $request\n    -&gt;withAttribute('one', 'two')\n    -&gt;withAttribute('three', 'four')\n;\n\nvar_dump(\n    $clone-&gt;getAttributes()\n);\n// [\n//     'one'   =&gt; 'two',\n//     'three' =&gt; 'four',\n// ]\n\n\n$newClone = $request\n    -&gt;withoutAttribute('one')\n;\n\nvar_dump(\n    $newClone-&gt;getAttributes()\n);\n// [\n//     'three' =&gt; 'four',\n// ]\n</code></pre>"},{"location":"http-server-request/#withoutheader","title":"<code>withoutHeader()</code>","text":"<p>Return an instance without the specified header.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\ServerRequest;\n\n$jwtToken = 'abc.def.ghi';\n\n$request = new ServerRequest(\n    'GET',\n    'https://api.phalcon.io/companies/1',\n    $_SERVER,\n    'php://memory',\n    [\n        'Authorization' =&gt; 'Bearer ' . $jwtToken,\n        'Content-Type'  =&gt; [\n            'application/json',\n        ],\n    ]\n);\n\nvar_dump(\n    $request-&gt;getHeaders()\n);\n// [\n//     'Authorization' =&gt; 'Bearer abc.def.ghi',\n//     'Content-Type'  =&gt; [\n//         'application/json',\n//     ],\n// ]\n\n$clone = $request-&gt;withoutHeader('Content-Type');\n\nvar_dump(\n    $clone-&gt;getHeaders()\n);\n// [\n//     'Authorization' =&gt; 'Bearer abc.def.ghi',\n// ]\n</code></pre>"},{"location":"http-stream/","title":"HTTP Response (PSR-7)","text":""},{"location":"http-stream/#overview","title":"Overview","text":"<p>Phalcon\\Http\\Message\\Stream is an implementation of the PSR-7 HTTP messaging interface as defined by PHP-FIG.</p> <p></p> <p>This class describes a data stream. Typically, an instance will wrap a PHP stream; this interface provides a wrapper around the most common operations, including serialization of the entire stream to a string.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataDir('assets/stream/mit.txt');\n\n$stream = new Stream($fileName, 'rb');\n\necho $stream-&gt;getContents(); // 'The MIT License (MIT) ...'\n</code></pre>"},{"location":"http-stream/#constructor","title":"Constructor","text":"<p><pre><code>public function __construct(\n    mixed $stream, \n    string $mode = \"rb\"\n)\n</code></pre> The first parameter can be a string representing the location of the file on the file system or storage area. It can also be a resource, as returned by a method such as fopen. The second parameter is the open mode for the stream. The default mode is <code>rb</code>. For a list of available modes, you can check the documentation for fopen.</p> <ul> <li><code>stream</code> - string or resource</li> <li><code>mode</code> - A string representing the mode the file is to be opened.</li> </ul> <p>If there is an error, a <code>RuntimeException</code> will be thrown.</p>"},{"location":"http-stream/#getters","title":"Getters","text":""},{"location":"http-stream/#__tostring","title":"<code>__toString()</code>","text":"<p>Reads all data from the stream into a string, from the beginning to end. The method will first try to <code>seek()</code> to the beginning of the stream before reading the data and read the stream until the end is reached. </p> <p>NOTE</p> <p>Calling this method on large files will result in a large amount of data being loaded in memory</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataDir('assets/stream/mit.txt');\n\n$stream = new Stream($fileName, 'rb');\n\necho (string) $stream; // 'The MIT License (MIT) ...'\n</code></pre>"},{"location":"http-stream/#getcontents","title":"<code>getContents()</code>","text":"<p>Returns a string with the remaining contents in a string. If the stream cannot be read or an error occurs, a <code>RuntimeException</code> will be thrown. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataDir('assets/stream/mit.txt');\n\n$stream = new Stream($fileName, 'rb');\n\necho $stream-&gt;getContents(); // 'The MIT License (MIT) ...'\n</code></pre>"},{"location":"http-stream/#getmetadata","title":"<code>getMetadata()</code>","text":"<p>Returns the stream metadata as an associative array. If the parameter <code>$key</code> is defined, the relevant string element will be returned. The method is a wrapper for PHP's stream_get_meta_data() function. If the key is not found, the method will return <code>null</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataDir('assets/stream/mit.txt');\n\n$stream = new Stream($fileName, 'rb');\n\nvar_dump(\n    $stream-&gt;getMetadata()\n);\n\n// [\n//     'timed_out'    =&gt; false,\n//     'blocked'      =&gt; true,\n//     'eof'          =&gt; false,\n//     'wrapper_type' =&gt; 'plainfile',\n//     'stream_type'  =&gt; 'STDIO',\n//     'mode'         =&gt; 'rb',\n//     'unread_bytes' =&gt; 0,\n//     'seekable'     =&gt; true,\n//     'uri'          =&gt; $fileName,\n// ];\n\necho $stream-&gt;getMetadata('wrapper_type'); // 'plainfile'\necho $stream-&gt;getMetadata('unknown');      // null\n</code></pre>"},{"location":"http-stream/#getsize","title":"<code>getSize()</code>","text":"<p>Returns the size of the stream. If it is not known, <code>null</code> will be returned</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataDir('assets/stream/mit.txt');\n\n$stream = new Stream($fileName, 'rb');\n\necho $stream-&gt;getSize(); // 1087\n</code></pre>"},{"location":"http-stream/#is","title":"Is","text":""},{"location":"http-stream/#isseekable","title":"<code>isSeekable()</code>","text":"<p>Returns <code>true</code> if the stream is seekable, <code>false</code> otherwise.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataDir('assets/stream/mit.txt');\n\n$stream = new Stream($fileName, 'rb');\n\necho $stream-&gt;isSeekable(); // 'true'\n</code></pre>"},{"location":"http-stream/#isreadable","title":"<code>isReadable()</code>","text":"<p>Returns <code>true</code> if the stream is readable, <code>false</code> otherwise.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataDir('assets/stream/mit.txt');\n\n$stream = new Stream($fileName, 'w');\n\necho $stream-&gt;isReadable(); // 'false'\n</code></pre>"},{"location":"http-stream/#iswritable","title":"<code>isWritable()</code>","text":"<p>Returns <code>true</code> if the stream is writable, <code>false</code> otherwise.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataDir('assets/stream/mit.txt');\n\n$stream = new Stream($fileName, 'rb');\n\necho $stream-&gt;isWritable(); // 'false'\n</code></pre>"},{"location":"http-stream/#close","title":"<code>close()</code>","text":"<p>Closes the stream and any underlying resources.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataDir('assets/stream/mit.txt');\n\n$stream = new Stream($fileName, 'rb');\n\n$stream-&gt;close();\n</code></pre>"},{"location":"http-stream/#detach","title":"<code>detach()</code>","text":"<p>Separates any underlying resources from the stream. After the stream has been detached, the stream is in an unusable state. Calling this method on a closed/detached stream will return <code>null</code></p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataDir('assets/stream/mit.txt');\n\n$stream = new Stream($fileName, 'rb');\n\necho $stream-&gt;detach(); // The handle\necho $stream-&gt;detach(); // null\n</code></pre>"},{"location":"http-stream/#eof","title":"<code>eof()</code>","text":"<p>Returns <code>true</code> if the stream is at the end of the stream, <code>false</code> otherwise.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataDir('assets/stream/mit.txt');\n\n$stream = new Stream($fileName, 'rb');\n\necho $stream-&gt;eof(); // false\n\n$stream-&gt;seek(9999);\n\necho $stream-&gt;eof(); // true\n</code></pre>"},{"location":"http-stream/#read","title":"<code>read()</code>","text":"<p>Read data from the stream. The method accepts an integer specifying the number of bytes from the object and return them. The method could return less number of bytes than specified if the end of the stream is defined. If no more data is available an empty string will be returned. If an error occurs, a <code>RuntimeException</code> will be thrown.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataDir('assets/stream/mit.txt');\n\n$stream = new Stream($fileName, 'rb');\n\necho $stream-&gt;read(15); // 'The MIT License'\n</code></pre>"},{"location":"http-stream/#rewind","title":"<code>rewind()</code>","text":"<p>Seek to the beginning of the stream. Uses fseek() calling <code>seek(0)</code> internally. If the stream is not seekable, a <code>RuntimeException</code> will be thrown.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataDir('assets/stream/mit.txt');\n\n$stream = new Stream($fileName, 'rb');\n\n$stream-&gt;seek(8);\necho $stream-&gt;read(7); // 'License'\n$stream-&gt;rewind();\necho $stream-&gt;read(3); // 'The'\n</code></pre>"},{"location":"http-stream/#seek","title":"<code>seek()</code>","text":"<p>Seek to a position in the stream. Uses fseek() internally. It accepts: - <code>offset</code> - <code>int</code> The stream offset - <code>whence</code> - <code>int</code> Specifies how the cursor position will be calculated based on the seek offset. Valid values are identical to the built-in PHP $whence values for fseek().     - <code>SEEK_SET</code> Set position equal to offset bytes     - <code>SEEK_CUR</code> Set position to current location plus offset     - <code>SEEK_END</code> Set position to end-of-stream plus offset.</p> <p>If an error occurs, a <code>RuntimeException</code> will be thrown. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataDir('assets/stream/mit.txt');\n\n$stream = new Stream($fileName, 'rb');\n\n$stream-&gt;seek(8);\necho $stream-&gt;read(7); // 'License'\n$stream-&gt;rewind();\necho $stream-&gt;read(3); // 'The'\n</code></pre>"},{"location":"http-stream/#tell","title":"<code>tell()</code>","text":"<p>Returns the current position of the file read/write pointer as an integer. If an error occurs, a <code>RuntimeException</code> will be thrown.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Stream;\n\n$fileName = dataDir('assets/stream/mit.txt');\n\n$stream = new Stream($fileName, 'rb');\n\n$stream-&gt;seek(8);\necho $stream-&gt;tell(); // 8\n</code></pre>"},{"location":"http-stream/#write","title":"<code>write()</code>","text":"<p>Write data to the stream. It accepts a <code>string</code> parameter as the contents to be written. The method returns the number of bytes written to the stream as an integer. If an error occurs, a <code>RuntimeException</code> will be thrown.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Stream;\n\n$stream = new Stream('php://memory', 'wb');\n$source = 'The above copyright notice and this permission '\n        . 'notice shall be included in all copies or '\n        . 'substantial portions of the Software.';\n\necho $stream-&gt;write($source); // 126\n</code></pre>"},{"location":"http-uploaded-file/","title":"HTTP Uploaded File (PSR-7)","text":""},{"location":"http-uploaded-file/#overview","title":"Overview","text":"<p>Phalcon\\Http\\Message\\UploadedFile is an implementation of the PSR-7 HTTP messaging interface as defined by PHP-FIG.</p> <p></p> <p>The Phalcon\\Http\\Message\\UploadedFile is a value object class that stores information for the uploaded files to your application. making it easier to work with. There are several limitations when using just the <code>$_FILES</code> superglobal, which the Phalcon\\Http\\Message\\UploadedFile resolves. The Phalcon\\Http\\Message\\ServerRequest object allows you to retrieve all the uploaded files in a normalized structure, which each leaf is a Phalcon\\Http\\Message\\UploadedFile object. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\UploadedFile;\n\n$file = new UploadedFile(\n    'php://memory',\n    0,\n    UPLOAD_ERR_OK,\n    'phalcon.txt'\n);\n\necho $file-&gt;getClientFilename(); // 'phalcon.txt'\n</code></pre> <p>We are creating a new Phalcon\\Http\\Message\\UploadedFile using the memory stream, with size <code>0</code>, specifying that there was no upload error (<code>UPLOAD_ERR_OK</code>) and the name of the file is <code>phalcon.txt</code>. This information is available to us when working with the Phalcon\\Http\\Message\\ServerRequest object automatically.</p>"},{"location":"http-uploaded-file/#constructor","title":"Constructor","text":"<p><pre><code>public function __construct(\n    StreamInterface | string | null $stream \n    [, int $size = null \n    [, int error = 0\n    [, string clientFilename = null\n    [, string clientMediaType = null ]]]] \n)\n</code></pre> The constructor accepts parameters allowing you to create the object with certain properties populated. You can define the stream, the size of the file, if any error occurred during the upload, the client file name as well as the client media type.</p> <ul> <li><code>stream</code> - A valid stream for the file (<code>StreamInterface</code>, <code>string</code>) </li> <li><code>size</code> - The size of the file </li> <li><code>error</code> - An upload error (see the <code>UPLOAD_ERR_*</code>PHP constants)</li> <li><code>clientFilename</code> - The name of the uploaded file from the client</li> <li><code>clientMediaType</code> - The media type of the uploaded file from the client</li> </ul>"},{"location":"http-uploaded-file/#getters","title":"Getters","text":""},{"location":"http-uploaded-file/#getclientfilename","title":"<code>getClientFilename()</code>","text":"<p>Returns the filename sent by the client. You should not trust the value returned by this method. The client could very well send a malicious filename with the intent to corrupt or hack your application. The value returned is the value stored in the <code>name</code> key in the <code>$_FILES</code> array.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\UploadedFile;\n\n$file = new UploadedFile(\n    'php://memory',\n    0,\n    UPLOAD_ERR_OK,\n    'phalcon.txt'\n);\n\necho $file-&gt;getClientFilename(); // 'phalcon.txt'\n</code></pre>"},{"location":"http-uploaded-file/#getclientmediatype","title":"<code>getClientMediaType()</code>","text":"<p>Returns the media type sent by the client. You should not trust the value returned by this method. The client could very well send a malicious filename with the intent to corrupt or hack your application. The value returned is the value stored in the <code>type</code> key in the <code>$_FILES</code> array.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\UploadedFile;\n\n$file = new UploadedFile(\n    'php://memory',\n    0,\n    UPLOAD_ERR_OK,\n    'phalcon.txt',\n    'application/text'\n);\n\necho $file-&gt;getClientMediaType(); // 'application/text'\n</code></pre>"},{"location":"http-uploaded-file/#geterror","title":"<code>getError()</code>","text":"<p>Returns the error associated with the uploaded file. The value is PHP's <code>UPLOAD_ERR_*</code> constants. If the file was uploaded successfully, the method will return <code>UPLOAD_ERR_OK</code>. The value returned is the value stored in the <code>error</code> key in the <code>$_FILES</code> array.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\UploadedFile;\n\n$file = new UploadedFile(\n    'php://memory',\n    0,\n    UPLOAD_ERR_OK,\n    'phalcon.txt',\n    'application/text'\n);\n\necho $file-&gt;getError(); // UPLOAD_ERR_OK\n</code></pre>"},{"location":"http-uploaded-file/#getsize","title":"<code>getSize()</code>","text":"<p>Returns the size of the uploaded file. The value returned is the value stored in the <code>size</code> key in the <code>$_FILES</code> array if available.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\UploadedFile;\n\n$file = new UploadedFile(\n    'php://memory',\n    1234,\n    UPLOAD_ERR_OK,\n    'phalcon.txt'\n);\n\necho $file-&gt;getSize(); // 1234\n</code></pre>"},{"location":"http-uploaded-file/#getstream","title":"<code>getStream()</code>","text":"<p>Returns the stream representing the uploaded file. The method returns a <code>StreamInterface</code> instance. The purpose of this method is to allow utilizing native PHP stream functionality to manipulate the file upload, such as stream_copy_to_stream() (though the result will need to be decorated in a native PHP stream wrapper to work with such functions).</p> <p>If the <code>moveTo()</code> method has been called previously, a Phalcon\\Http\\Message\\Exception\\InvalidArgumentException exception will be thrown.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Stream;\nuse Phalcon\\Http\\Message\\UploadedFile;\n\n$fileName = dataFolder('/assets/stream/mit.txt');\n$stream   = new Stream($fileName, 'rb');\n\n$file = new UploadedFile(\n    $stream,\n    1234,\n    UPLOAD_ERR_OK,\n    'phalcon.txt'\n);\n\necho $file-&gt;getStream(); // '/assets/stream/mit.txt'\n</code></pre>"},{"location":"http-uploaded-file/#moveto","title":"<code>moveTo()</code>","text":"<p>Moves the uploaded file to a new location. This method should be used as an alternative to move_uploaded_file(). This method is guaranteed to work in both SAPI and non-SAPI environments.</p> <p>The parameter <code>$targetPath</code> can be an absolute or relative path. When calling this method, the original file or stream will be removed. As noted above, if this method is called more than once, any subsequent calls will raise a Phalcon\\Http\\Message\\Exception\\InvalidArgumentException exception.</p> <p>The method performs necessary checks internally so that permissions are properly maintained. If you need to to move the file to a stream, you will need to use <code>getStream()</code>, since SAPI operations cannot guarantee writing stream destinations.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Stream;\nuse Phalcon\\Http\\Message\\UploadedFile;\n\n$fileName = dataFolder('/assets/stream/mit.txt');\n$stream   = new Stream($fileName, 'rb');\n\n$file = new UploadedFile(\n    $stream,\n    1234,\n    UPLOAD_ERR_OK,\n    'phalcon.txt'\n);\n\n$file-&gt;moveTo('/storage/files/');\n</code></pre>"},{"location":"http-uri/","title":"HTTP Uri (PSR-7)","text":"<p>Phalcon\\Http\\Message\\Uri is an implementation of the PSR-7 HTTP messaging interface as defined by PHP-FIG.</p> <p></p> <p>The Phalcon\\Http\\Message\\Uri returns a value object representing a URI. The object represents a URI as defined in RFC 3986, providing methods for the most common operations. The primary use of this component is for HTTP requests but can be used in other contexts. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Uri;\n\n$query = 'https://usr:pass@d.phalcon.ld:8080/action?par=val#frag';\n$uri   = new Uri($query);\n\necho $uri-&gt;getHost(); // 'd.phalcon.ld'\n</code></pre> <p>The Uri object created is immutable, meaning it will never change. Any call to methods prefixed with <code>with*</code> will return a clone of the object to maintain immutability, as per the standard.</p>"},{"location":"http-uri/#constructor","title":"Constructor","text":"<p><pre><code>public function __construct(\n    [string $uri = ''] \n)\n</code></pre> The constructor accepts an optional string, representing the URI. If specified, the URI will be processed and split into the necessary parts internally. </p>"},{"location":"http-uri/#getters","title":"Getters","text":""},{"location":"http-uri/#__tostring","title":"<code>__toString()</code>","text":"<p>Returns the string representation of the URI. Depending on which components of the URI are present, the resulting string is either a full URI or relative reference according to RFC 3986, Section 4.1. The method concatenates the various components of the URI.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Uri;\n\n$query = 'https://usr:pass@d.phalcon.ld:8080/action?par=val#frag';\n$uri   = new Uri($query);\n\necho (string) $uri; \n// 'https://usr:pass@d.phalcon.ld:8080/action?par=val#frag'\n</code></pre>"},{"location":"http-uri/#getauthority","title":"<code>getAuthority()</code>","text":"<p>Returns a string representing the authority of the URI. If no authority is present, an empty string is returned. The format of the authority is:</p> <pre><code>[user-info@]host[:port]\n</code></pre> <p>If the port is not set, or is one of the standard for the scheme, it will not be returned</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Uri;\n\n$query = 'https://usr:pass@d.phalcon.ld:8080/action?par=val#frag';\n$uri   = new Uri($query);\n\necho $uri-&gt;getAuthority(); // 'usr:pass@d.phalcon.ld:8080'\n</code></pre>"},{"location":"http-uri/#getfragment","title":"<code>getFragment()</code>","text":"<p>Returns a string representing the fragment of the URI. If no fragment is present, an empty string is returned. The value returned will not contain the leading <code>#</code> and it will be percent-encoded.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Uri;\n\n$query = 'https://usr:pass@d.phalcon.ld:8080/action?par=val#frag';\n$uri   = new Uri($query);\n\necho $uri-&gt;getFragment(); // 'frag'\n</code></pre>"},{"location":"http-uri/#gethost","title":"<code>getHost()</code>","text":"<p>Returns a string representing the host component of the URI. If no host is present, an empty string is returned. The value returned will be converted to lowercase.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Uri;\n\n$query = 'https://usr:pass@d.phalcon.ld:8080/action?par=val#frag';\n$uri   = new Uri($query);\n\necho $uri-&gt;getHost(); // 'd.phalcon.ld'\n</code></pre>"},{"location":"http-uri/#getpath","title":"<code>getPath()</code>","text":"<p>Returns a string representing the path component of the URI. The path can either be empty or absolute (starting with a slash) or rootless (not starting with a slash). Normally, the empty path \"\" and absolute path <code>/</code> are considered equal but this method will not do this normalization automatically. The value returned is percent-encoded.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Uri;\n\n$query = 'https://usr:pass@d.phalcon.ld:8080/action?par=val#frag';\n$uri   = new Uri($query);\n\necho $uri-&gt;getPath(); // '/action'\n</code></pre>"},{"location":"http-uri/#getport","title":"<code>getPort()</code>","text":"<p>Returns an integer representing the port component of the URI. If the port is present and it is non-standard for the current scheme, it will be returned. If however it is a standard port for the specified scheme, <code>null</code> will be returned. Additionally, if no port is present and no scheme is present then <code>null</code> is returned. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Uri;\n\n$query = 'https://usr:pass@d.phalcon.ld:8080/action?par=val#frag';\n$uri   = new Uri($query);\n\necho $uri-&gt;getPort(); // 8080\n</code></pre>"},{"location":"http-uri/#getquery","title":"<code>getQuery()</code>","text":"<p>Returns a string representing the query of the URI. If no query is present, an empty string is returned. The value returned will not contain the leading <code>?</code> and it will be percent-encoded.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Uri;\n\n$query = 'https://usr:pass@d.phalcon.ld:8080/action?par=val#frag';\n$uri   = new Uri($query);\n\necho $uri-&gt;getQuery(); // '/par=val'\n</code></pre>"},{"location":"http-uri/#getscheme","title":"<code>getScheme()</code>","text":"<p>Returns a string representing the scheme of the URI. If the scheme is not present, an empty string is returned. The value returned is converted to lowercase. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Uri;\n\n$query = 'https://usr:pass@d.phalcon.ld:8080/action?par=val#frag';\n$uri   = new Uri($query);\n\necho $uri-&gt;getScheme(); // 'https'\n</code></pre>"},{"location":"http-uri/#getuserinfo","title":"<code>getUserInfo()</code>","text":"<p>Returns a string representation of the user information of the URI. If no user information is present, an empty string is returned. If both user and password are present, they will be returned together concatenated with a colon (<code>:</code>) separating the values.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Uri;\n\n$query = 'https://usr:pass@d.phalcon.ld:8080/action?par=val#frag';\n$uri   = new Uri($query);\n\necho $uri-&gt;getUserInfo(); // 'usr:pass'\n</code></pre>"},{"location":"http-uri/#with","title":"With","text":"<p>The Request object is immutable. However there are a number of methods that allow you to inject data into it. The returned object is a clone of the original one. </p>"},{"location":"http-uri/#withfragment","title":"<code>withFragment()</code>","text":"<p>Returns an instance with the new fragment. An empty fragment supplied will remove the fragment from the URI.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Uri;\n\n$query = 'https://usr:pass@d.phalcon.ld:8080/action?par=val#frag';\n$uri   = new Uri($query);\n\necho $uri-&gt;getFragment(); // 'frag'\n\n$clone = $uri-&gt;withFragment('newfrag');\n\necho $clone-&gt;getFragment(); // 'newfrag'\n</code></pre>"},{"location":"http-uri/#withhost","title":"<code>withHost()</code>","text":"<p>Returns an instance with the new host. An empty host supplied will remove the host from the URI.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Uri;\n\n$query = 'https://usr:pass@d.phalcon.ld:8080/action?par=val#frag';\n$uri   = new Uri($query);\n\necho $uri-&gt;getHost(); // 'd.phalcon.ld'\n\n$clone = $uri-&gt;withHost('a.phalcon.ld');\n\necho $clone-&gt;getHost(); // 'a.phalcon.ld'\n</code></pre>"},{"location":"http-uri/#withpath","title":"<code>withPath()</code>","text":"<p>Returns an instance with the new path. An empty path supplied will remove the path from the URI.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Uri;\n\n$query = 'https://usr:pass@d.phalcon.ld:8080/action?par=val#frag';\n$uri   = new Uri($query);\n\necho $uri-&gt;getPath(); // '/action'\n\n$clone = $uri-&gt;withPath('/create');\n\necho $clone-&gt;getPath(); // '/create'\n</code></pre>"},{"location":"http-uri/#withport","title":"<code>withPort()</code>","text":"<p>Returns an instance with the new port. A <code>null</code> port supplied will remove the port from the URI.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Uri;\n\n$query = 'https://usr:pass@d.phalcon.ld:8080/action?par=val#frag';\n$uri   = new Uri($query);\n\necho $uri-&gt;getPort(); // 8080\n\n$clone = $uri-&gt;withPort(8081);\n\necho $clone-&gt;getPort(); // 8081\n</code></pre>"},{"location":"http-uri/#withquery","title":"<code>withQuery()</code>","text":"<p>Returns an instance with the new query. An empty query supplied will remove the query from the URI.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Uri;\n\n$query = 'https://usr:pass@d.phalcon.ld:8080/action?par=val#frag';\n$uri   = new Uri($query);\n\necho $uri-&gt;getQuery(); // 'par=val'\n\n$clone = $uri-&gt;withQuery('one=two');\n\necho $clone-&gt;getQuery(); // 'one=two'\n</code></pre>"},{"location":"http-uri/#withscheme","title":"<code>withScheme()</code>","text":"<p>Returns an instance with the new scheme. An empty scheme supplied will remove the scheme from the URI.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Uri;\n\n$query = 'https://usr:pass@d.phalcon.ld:8080/action?par=val#frag';\n$uri   = new Uri($query);\n\necho $uri-&gt;getScheme(); // 'https'\n\n$clone = $uri-&gt;withScheme('http');\n\necho $clone-&gt;getScheme(); // 'http'\n</code></pre>"},{"location":"http-uri/#withuserinfo","title":"<code>withUserInfo()</code>","text":"<p>Returns an instance with the new user information. The password is optional. If an empty user is supplied, it will remove the user information from the URI.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Message\\Uri;\n\n$query = 'https://usr:pass@d.phalcon.ld:8080/action?par=val#frag';\n$uri   = new Uri($query);\n\necho $uri-&gt;getUserInfo(); // 'usr:pass'\n\n$clone = $uri-&gt;withUserInfo('phalcon', 'notsecret');\n\necho $clone-&gt;getUserInfo(); // 'phalcon:notsecret'\n</code></pre>"},{"location":"i18n/","title":"Internationalization","text":""},{"location":"i18n/#overview","title":"Overview","text":"<p>Phalcon is written in C as an extension for PHP. There is a PECL extension that offers internationalization functions to PHP applications called intl. Its documentation can be found in the pages of the official PHP manual.</p> <p>Phalcon does not offer this functionality, since creating such a component would be replicating existing code.</p> <p>In the examples below, we will show you how to implement the intl extension's functionality into Phalcon powered applications.</p> <p>NOTE</p> <p>This guide is not intended to be a complete documentation of the intl extension. Please visit its the documentation of the extension for a reference.</p>"},{"location":"i18n/#find-out-best-available-locale","title":"Find out Best Available Locale","text":"<p>There are several ways to find out the best available locale using intl. One of them is to check the HTTP <code>Accept-Language</code> header: </p> <pre><code>&lt;?php\n\nuse Locale;\n\n$locale = Locale::acceptFromHttp($_SERVER['HTTP_ACCEPT_LANGUAGE']);\n\n// Locale could be something like 'en_GB' or 'en'\necho $locale;\n</code></pre> <p>Below method returns a locale identified. It is used to get language, culture, or regionally-specific behavior from the Locale API.</p> <p>Examples of identifiers include:</p> <ul> <li><code>en-US</code> (English, United States)</li> <li><code>ru-RU</code> (Russian, Russia)</li> <li><code>zh-Hant-TW</code> (Chinese, Traditional Script, Taiwan)</li> <li><code>fr-CA</code>, <code>fr-FR</code> (French for Canada and France respectively)</li> </ul>"},{"location":"i18n/#formatting-messages-based-on-locale","title":"Formatting Messages Based on Locale","text":"<p>Part of creating a localized application is to produce concatenated, language-neutral messages. The MessageFormatter allows for the production of those messages.</p> <p>Printing numbers formatted based on some locale:</p> <pre><code>&lt;?php\n\nuse MessageFormatter;\n\n// \u20ac 4 560\n$formatter = new MessageFormatter('fr_FR', '\u20ac {0, number, integer}');\necho $formatter-&gt;format([4560]);\n\n// USD$ 4,560.5\n$formatter = new MessageFormatter('en_US', 'USD$ {0, number}');\necho $formatter-&gt;format([4560.50]);\n\n// ARS$ 1.250,25\n$formatter = new MessageFormatter('es_AR', 'ARS$ {0, number}');\necho $formatter-&gt;format([1250.25]);\n</code></pre> <p>Message formatting using time and date patterns:</p> <pre><code>&lt;?php\n\nuse MessageFormatter;\n\n$time   = time();\n$values = [7, $time, $time];\n\n// 'At 3:50:31 PM on Apr 19, 2015, there was a disturbance on planet 7.'\n$pattern   = 'At {1, time} on {1, date}, there was a disturbance on planet {0, number}.';\n$formatter = new MessageFormatter('en_US', $pattern);\necho $formatter-&gt;format($values);\n\n// '\u00c0 15:53:01 le 19 avr. 2015, il y avait une perturbation sur la plan\u00e8te 7.'\n$pattern   = '\u00c0 {1, time} le {1, date}, il y avait une perturbation sur la plan\u00e8te {0, number}.';\n$formatter = new MessageFormatter('fr_FR', $pattern);\necho $formatter-&gt;format($values);\n</code></pre>"},{"location":"i18n/#locale-sensitive-comparison","title":"Locale-Sensitive Comparison","text":"<p>The Collator class provides string comparison capability with support for appropriate locale-sensitive sort orderings. Check the examples below on the usage of this class:</p> <pre><code>&lt;?php\n\nuse Collator;\n\n// Create a collator using Spanish locale\n$collator = new Collator('es');\n\n// Returns that the strings are equal, in spite of the emphasis on the 'o'\n$collator-&gt;setStrength(Collator::PRIMARY);\n\nvar_dump(\n    $collator-&gt;compare('una canci\u00f3n', 'una cancion')\n);\n\n// Returns that the strings are not equal\n$collator-&gt;setStrength(Collator::DEFAULT_VALUE);\n\nvar_dump(\n    $collator-&gt;compare('una canci\u00f3n', 'una cancion')\n);\n</code></pre>"},{"location":"i18n/#transliteration","title":"Transliteration","text":"<p>Transliterator provides transliteration of strings:</p> <pre><code>&lt;?php\n\nuse Transliterator;\n\n$id = 'Any-Latin; NFD; [:Nonspacing Mark:] Remove; NFC; [:Punctuation:] Remove; Lower();';\n$transliterator = Transliterator::create($id);\n\n$string = \"gar\u00e7on-\u00e9tudiant-o\u00f9-L'\u00e9cole\";\necho $transliterator-&gt;transliterate($string); // garconetudiantoulecole\n</code></pre>"},{"location":"image/","title":"Image","text":""},{"location":"image/#overview","title":"Overview","text":"<p>The <code>Phalcon\\Image</code> namespace exposes adapter that offer image manipulating functionality. These adapters are designed to allow multiple operations to be performed on the same image.</p>"},{"location":"image/#adapters","title":"Adapters","text":"<p>This component uses adapters that offer methods to manipulate images. You can easily create your own adapter using the Phalcon\\Image\\Adapter\\AdapterInterface.</p> Class Description Phalcon\\Image\\Adapter\\Gd Requires the GD PHP extension Phalcon\\Image\\Adapter\\Imagick Requires the ImageMagick PHP extension"},{"location":"image/#constants","title":"Constants","text":"<p>Phalcon\\Image\\Enum holds constants for image resizing and flipping. The available constants are:</p> <p>Resize</p> <ul> <li><code>AUTO</code></li> <li><code>HEIGHT</code></li> <li><code>INVERSE</code></li> <li><code>NONE</code></li> <li><code>PRECISE</code></li> <li><code>TENSILE</code></li> <li><code>WIDTH</code></li> </ul> <p>Flip</p> <ul> <li><code>HORIZONTAL</code></li> <li><code>VERTICAL</code></li> </ul>"},{"location":"image/#getters","title":"Getters","text":"<p>Each adapter offers getters to provide information about the component: - <code>getHeight()</code> - <code>int</code> - Returns the image height - <code>getImage()</code> - <code>mixed</code> - Returns the image - <code>getMime()</code> - <code>string</code> - Returns the image mime type - <code>getRealpath()</code> - <code>string</code> - Returns the real path where the image is located - <code>getType()</code> - <code>int</code> - Returns the image type (This is driver dependent) - <code>getWidth()</code> - <code>int</code> - Returns the image width </p>"},{"location":"image/#gd","title":"GD","text":"<p>Phalcon\\Image\\Adapters\\Gd utilizes the GD PHP extension. In order for you to use this adapter, the extension has to be present in your system. The adapter offers all the methods described below in the operations section.</p>"},{"location":"image/#imagick","title":"Imagick","text":"<p>Phalcon\\Image\\Adapters\\Imagick utilizes the ImageMagick PHP extension. In order for you to use this adapter, the extension has to be present in your system. The adapter offers all the methods described below in the operations section.</p>"},{"location":"image/#operations","title":"Operations","text":""},{"location":"image/#background","title":"<code>background()</code>","text":"<p>Sets the background color for the image. The available parameters are: - <code>color</code> - <code>string</code> - the color in hex format - <code>opacity</code> - <code>int</code> - the opacity (optional - default <code>100</code>).</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\n\n$image = new Gd('image.jpg');\n\n$image-&gt;background('#000033', 70);\n\n$image-&gt;save('background-image.jpg');\n</code></pre>"},{"location":"image/#blur","title":"<code>blur()</code>","text":"<p>Blurs the image. The passed integer parameter specifies the radius for the blur operation. The range is between 0 (no effect) and 100 (very blurry):</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\n\n$image = new Gd('image.jpg');\n\n$image-&gt;blur(50);\n\n$image-&gt;save('blur-image.jpg');\n</code></pre>"},{"location":"image/#crop","title":"<code>crop()</code>","text":"<p>You can crop images programmatically. The <code>crop()</code> method accepts the following parameters: - <code>width</code> - <code>int</code> - the width - <code>height</code> - <code>int</code> - the height - <code>offsetX</code> - <code>int</code> - the X offset (optional) - <code>offsetY</code> - <code>int</code> - the Y offset (optional)</p> <p>The following example crops 100px by 100px from the center of the image:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\n\n$image = new Gd('image.jpg');\n\n$width   = 100;\n$height  = 100;\n$offsetX = ($image-&gt;getWidth() - $width) / 2;\n$offsetY = ($image-&gt;getHeight() - $height) / 2;\n\n$image-&gt;crop($width, $height, $offsetX, $offsetY);\n\n$image-&gt;save('crop-image.jpg');\n</code></pre>"},{"location":"image/#flip","title":"<code>flip()</code>","text":"<p>You can flip an image horizontally or vertically. The <code>flip()</code> method accepts an integer, signifying the direction. You can use the constants for this operation:</p> <ul> <li><code>Phalcon\\Image\\Enum::HORIZONTAL</code></li> <li><code>Phalcon\\Image\\Enum::VERTICAL</code></li> </ul> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\nuse Phalcon\\Image\\Enum;\n\n$image = new Gd('image.jpg');\n\n$image-&gt;flip(Enum::HORIZONTAL);\n\n$image-&gt;save('flip-image.jpg');\n</code></pre>"},{"location":"image/#liquidrescale","title":"<code>liquidRescale()</code>","text":"<p>This method is only available in the Phalcon\\Image\\Imagick adapter. It uses the liquid rescaling method to rescale the image. The method accepts the following parameters: - <code>width</code> - <code>int</code> - the new width  - <code>height</code> - <code>int</code> - the new height - <code>deltaX</code> - <code>int</code> - How much the seam can traverse on x-axis. Passing <code>0</code> causes the seams to be straight. (optional - default <code>0</code>) - <code>rigidity</code> - <code>int</code> - Introduces a bias for non-straight seams. (optional - default <code>0</code>).</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\n\n$image = new Gd('image.jpg');\n\n$image-&gt;liquidRescale(500, 200, 3, 25);\n\n$image-&gt;save('liquidrescale-image.jpg');\n</code></pre>"},{"location":"image/#mask","title":"<code>mask()</code>","text":"<p>Creates a composite image from two images. Accepts the first image as a parameter.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\n\n$front = new Gd('front.jpg');\n$back  = new Gd('back.jpg');\n\n$front-&gt;mask($front);\n\n$front-&gt;save('mask-image.jpg');\n</code></pre>"},{"location":"image/#pixelate","title":"<code>pixelate()</code>","text":"<p>Adds pixelation to the image. The method accepts a single integer parameter. The higher the number, the more pixelated the image becomes:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\n\n$image = new Gd('image.jpg');\n\n$image-&gt;pixelate(10);\n\n$image-&gt;save('pixelate-image.jpg');\n</code></pre>"},{"location":"image/#reflection","title":"<code>reflection()</code>","text":"<p>Adds reflection to the image. The method accepts the following parameters: - <code>height</code> - <code>int</code> - the height - <code>opacity</code> - <code>int</code> - the opacity (optional - default <code>100</code>) - <code>fadeIn</code> - <code>bool</code> - whether to fade in or not (optional - default <code>false</code>)</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\n\n$image = new Gd('image.jpg');\n\n$image-&gt;reflection(100, 75, true);\n\n$image-&gt;save('reflection-image.jpg');\n</code></pre>"},{"location":"image/#render","title":"<code>render()</code>","text":"<p>Renders the image and returns it back as a binary string. The method accepts the following parameters: - <code>ext</code> - <code>string</code> - the extension (optional) - <code>quality</code> - <code>int</code> - the quality of the image (optional - default <code>100</code>)</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\n\n$image = new Gd('image.jpg');\n\n// ....\n\necho $image-&gt;render('jpg', 90);\n</code></pre>"},{"location":"image/#resize","title":"<code>resize()</code>","text":"<p>Resizes the image based on the passed parameters. The method accepts the following parameters: - <code>width</code> - <code>int</code> - the width (optional) - <code>height</code> - <code>int</code> - the height (optional) - <code>master</code> - <code>int</code> - constant signifying the resizing method (default <code>AUTO</code>)     - <code>Phalcon\\Image\\Enum::AUTO</code>     - <code>Phalcon\\Image\\Enum::HEIGHT</code>     - <code>Phalcon\\Image\\Enum::INVERSE</code>     - <code>Phalcon\\Image\\Enum::NONE</code>     - <code>Phalcon\\Image\\Enum::PRECISE</code>     - <code>Phalcon\\Image\\Enum::TENSILE</code>     - <code>Phalcon\\Image\\Enum::WIDTH</code></p> <p>If any of the parameters are not correct, a Phalcon\\Image\\Exception will be thrown.</p> <p>HEIGHT</p> <p>The width will automatically be generated to keep the proportions the same; if you specify a width, it will be ignored.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\nuse Phalcon\\Image\\Enum;\n\n$image = new Gd('image.jpg');\n\n$image-&gt;resize(null, 300, Enum::HEIGHT);\n\n$image-&gt;save('resize-height-image.jpg');\n</code></pre> <p>INVERSE</p> <p>Resizes and inverts the width and height passed</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\nuse Phalcon\\Image\\Enum;\n\n$image = new Gd('image.jpg');\n\n$image-&gt;resize(400, 200, Enum::INVERSE);\n\n$image-&gt;save('resize-inverse-image.jpg');\n</code></pre> <p>NONE</p> <ul> <li>The <code>NONE</code> constant ignores the original image's ratio.</li> <li>Neither width and height are required.</li> <li>If a dimension is not specified, the original dimension will be used.</li> <li>If the new proportions differ from the original proportions, the image may be distorted and stretched.</li> </ul> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\nuse Phalcon\\Image\\Enum;\n\n$image = new Gd('image.jpg');\n\n$image-&gt;resize(400, 200, Enum::NONE);\n\n$image-&gt;save('resize-none-image.jpg');\n</code></pre> <p>TENSILE</p> <ul> <li>Similar to the <code>NONE</code> constant, the <code>TENSILE</code> constant ignores the original image's ratio.</li> <li>Both width and height are required.</li> <li>If the new proportions differ from the original proportions, the image may be distorted and stretched.</li> </ul> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\nuse Phalcon\\Image\\Enum;\n\n$image = new Gd('image.jpg');\n\n$image-&gt;resize(400, 200, Enum::TENSILE);\n\n$image-&gt;save('resize-tensile-image.jpg');\n</code></pre> <p>WIDTH</p> <p>The height will automatically be generated to keep the proportions the same; if you specify a height, it will be ignored.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\nuse Phalcon\\Image\\Enum;\n\n$image = new Gd('image.jpg');\n\n$image-&gt;resize(300, null, Enum::WIDTH);\n\n$image-&gt;save('resize-width-image.jpg');\n</code></pre>"},{"location":"image/#rotate","title":"<code>rotate()</code>","text":"<p>Rotates an image based on the given degrees. Positive numbers rotate the image clockwise while negative counter clockwise.</p> <p>The following example rotates an image by 90 degrees clockwise</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\n\n$image = new Gd('image.jpg');\n\n$image-&gt;rotate(90);\n\n$image-&gt;save('rotate-image.jpg');\n</code></pre>"},{"location":"image/#save","title":"<code>save()</code>","text":"<p>After manipulating your image, you will most likely want to save it. If you wish to just get the result of the manipulations back as a string, you can use the <code>render()</code> method.</p> <p>The <code>save()</code> method accepts the filename and quality as parameters: - <code>file</code> - <code>string</code> - the target file name (optional) - <code>quality</code> - <code>int</code> - the quality of the image (optional - default <code>-1</code>)</p> <p>If a file name is not specified, the manipulated image will overwrite the original image. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\n\n$image = new Gd('image.jpg');\n\n$image-&gt;rotate(90);\n\n$image-&gt;save();\n</code></pre> <p>When specifying a file name, the manipulated image will be saved with that name, leaving the original image unchanged.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\n\n$image = new Gd('image.jpg');\n\n$image-&gt;rotate(90);\n\n$image-&gt;save('rotate-image.jpg');\n</code></pre> <p>You can also change the format of the image using a different extension. This functionality depends on the adapter you are working with.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\n\n$image = new Gd('image.jpg');\n\n$image-&gt;rotate(90);\n\n$image-&gt;save('rotate-image.png');\n</code></pre> <p>When saving as a JPEG, you can also specify the quality as the second parameter:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\n\n$image = new Gd('image.jpg');\n\n$image-&gt;rotate(90);\n\n$image-&gt;save('rotate-image.jpg', 90);\n</code></pre>"},{"location":"image/#sharpen","title":"<code>sharpen()</code>","text":"<p>Sharpens the image. The passed integer parameter specifies the amount for the sharpen operation. The range is between 0 (no effect) and 100 (very sharp):</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\n\n$image = new Gd('image.jpg');\n\n$image-&gt;sharpen(50);\n\n$image-&gt;save('sharpen-image.jpg');\n</code></pre>"},{"location":"image/#text","title":"<code>text()</code>","text":"<p>You can add text to your image by calling <code>text()</code>. The available parameters are: - <code>text</code> - <code>string</code> - the text - <code>offsetX</code> - <code>int</code>/<code>false</code> - the X offset, <code>false</code> to disable  - <code>offsetY</code> - <code>int</code>/<code>false</code> - the Y offset, <code>false</code> to disable  - <code>opacity</code> - <code>int</code> - the opacity of the text (optional - default <code>100</code>) - <code>color</code> - <code>string</code> - the color for the text (optional - default <code>\"000000\"</code>) - <code>size</code> - <code>int</code> - the size of the font for the text (optional - default <code>12</code>) - <code>fontfile</code> - <code>string</code> - the font file to be used for the text (optional)</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\n\n$image = new Gd('image.jpg');\n\n$image-&gt;text(\n    'Phalcon Framework',\n    10,\n    10,\n    75,\n    '000033',\n    14,\n    '/app/assets/fonts/titilium.tff'\n);\n\n$image-&gt;save('text-image.jpg');\n</code></pre>"},{"location":"image/#watermark","title":"<code>watermark()</code>","text":"<p>Adds a watermark to an image. The available parameters are: - <code>watermark</code> - <code>AdapterInterface</code> - the image to use for the watermark - <code>offsetX</code> - <code>int</code> - the X offset (optional) - <code>offsetY</code> - <code>int</code> - the Y offset (optional)  - <code>opacity</code> - <code>int</code> - the opacity of the image (optional - default <code>100</code>)</p> <p>The following example puts the watermark at the top left corner of the image:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\n\n$watermark = new Gd('watermark.jpg');\n$image     = new Gd('image.jpg');\n\n$offsetX = 10;\n$offsetY = 10;\n$opacity = 70;\n\n$image-&gt;watermark(\n    $watermark,\n    $offsetX,\n    $offsetY,\n    $opacity\n);\n\n$image-&gt;save('watermark-image.jpg');\n</code></pre> <p>You can also manipulate the watermarked image before applying it to the main image. In the following example we resize, rotate and sharpen the watermark and put it at the bottom right corner with a 10px margin:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\n\n$watermark = new Gd('watermark.jpg');\n$image     = new Gd('image.jpg');\n\n$watermark-&gt;resize(100, 100);\n$watermark-&gt;rotate(90);\n$watermark-&gt;sharpen(5);\n\n$offsetX = ($image-&gt;getWidth() - $watermark-&gt;getWidth() - 10);\n$offsetY = ($image-&gt;getHeight() - $watermark-&gt;getHeight() - 10);\n\n$opacity = 70;\n\n$image-&gt;watermark(\n    $watermark,\n    $offsetX,\n    $offsetY,\n    $opacity\n);\n\n$image-&gt;save('watermark-image.jpg');\n</code></pre>"},{"location":"image/#factory","title":"Factory","text":""},{"location":"image/#newinstance","title":"<code>newInstance</code>","text":"<p>The Phalcon\\Image\\ImageFactory offers an easy way to create image adapter objects. There are two adapters already preset for you:</p> <ul> <li><code>gd</code>- Phalcon\\Image\\Adapter\\Gd </li> <li><code>imagick</code> - Phalcon\\Image\\Adapter\\Imagick</li> </ul> <p>Calling <code>newInstance()</code> with the relevant key as well as parameters will return the relevant adapter. The factory always returns a new instance of Phalcon\\Image\\Adapter\\AdapterInterface.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\ImageFactory;\n\n$factory = new ImageFactory();\n\n$image = $factory-&gt;newInstance('gd', 'image.jpg');\n</code></pre> <p>The available parameters for <code>newInstance()</code> are: - <code>name</code> - <code>string</code> - the name of the adapter - <code>file</code> - <code>string</code> - the file name - <code>width</code> - <code>int</code> - the width of the image (optional) - <code>height</code> - <code>int</code> - the height of the image (optional)</p>"},{"location":"image/#load","title":"<code>load</code>","text":"<p>The Image Factory also offers the <code>load</code> method, which accepts a configuration object. This object can be an array or a Phalcon\\Config object, with directives that are used to set up the image adapter. The object requires the <code>adapter</code> element, as well as the <code>file</code> element. <code>width</code> and <code>height</code> can also be set as options.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\ImageFactory;\n\n$factory = new ImageFactory();\n$options = [\n    'adapter' =&gt; 'gd',\n    'file'    =&gt; 'image.jpg',\n    'width'   =&gt; 400,\n    'height'  =&gt; 200,\n];\n\n$image = $factory-&gt;load($options);\n</code></pre>"},{"location":"image/#exceptions","title":"Exceptions","text":"<p>Any exceptions thrown in the Image components will be of type Phalcon\\Image\\Exception. You can use this exception to selectively catch exceptions thrown only from this component. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\Gd;\nuse Phalcon\\Image\\Exception;\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    public function index()\n    {\n        try {\n            $image = new Gd('image.jpg');\n            $image-&gt;pixelate(10);\n\n            $image-&gt;save('pixelated-image.jpg');\n        } catch (Exception $ex) {\n            echo $ex-&gt;getMessage();\n        }\n    }\n}\n</code></pre>"},{"location":"image/#custom","title":"Custom","text":"<p>The Phalcon\\Image\\Adapter\\AdapterInterface interface must be implemented in order to create your own image adapters or extend the existing ones. You can then easily add it to the Phalcon\\Image\\ImageFactory.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Adapter\\AdapterInterface;\nuse Phalcon\\Image\\Enum;\n\nclass MyImageAdapter implements AdapterInterface\n{\n    /**\n     * Manipulate the background\n     */\n    public function background(\n        string $color, \n        int $opacity = 100\n    );\n\n    /**\n     * Blur the image\n     */\n    public function blur(int $radius);\n\n    /**\n     * Crop the image\n     */\n    public function crop(\n        int $width, \n        int $height, \n        int $offsetX = null, \n        int $offsetY = null\n    );\n\n    /**\n     * Flip the image\n     */\n    public function flip(int $direction);\n\n    /**\n     * Add a mask to the image\n     */\n    public function mask(AdapterInterface $watermark);\n\n    /**\n     * Pixelate the image\n     */\n    public function pixelate(int $amount);\n\n    /**\n     * Add a reflection to the image\n     */\n    public function reflection(\n        int $height, \n        int $opacity = 100, \n        bool $fadeIn = false\n    );\n\n    /**\n     * Render the image\n     */\n    public function render(\n        string $ext = null, \n        int $quality = 100\n    );\n\n    /**\n     * Resize the image\n     */\n    public function resize(\n        int $width = null, \n        int $height = null, \n        int $master = Enum::AUTO\n    );\n\n    /**\n     * Rotate the image\n     */\n    public function rotate(int degrees);\n\n    /**\n     * Save the image\n     */\n    public function save(string $file = null, int $quality = 100);\n\n    /**\n     * Sharpen the image\n     */\n    public function sharpen(int $amount);\n\n    /**\n     * Add text to the image\n     */\n    public function text(\n        string $text, \n        int $offsetX = 0, \n        int $offsetY = 0, \n        int $opacity = 100, \n        string $color = \"000000\", \n        int $size = 12, \n        string $fontfile = null\n    );\n\n    /**\n     * Add a watermark tot he image\n     */\n    public function watermark(\n        AdapterInterface $watermark, \n        int $offsetX = 0, \n        int $offsetY = 0, \n        int $opacity = 100\n    );\n}\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":""},{"location":"installation/#php-72","title":"PHP 7.2","text":"<p>Phalcon v4 supports only PHP 7.2 and above. PHP 7.1 has been released 2 years ago and its active support has lapsed, so we decided to follow actively supported PHP versions. Installing a web server is outside the scope of this document. Please refer to relevant guides on the Internet on how to install a web server.</p>"},{"location":"installation/#psr","title":"PSR","text":"<p>Phalcon requires the PSR extension. The extension can be downloaded and compiled from this GitHub repository. Installation instructions are available on the <code>README</code> of the repository. Depending on the installation method you chose, you might need to add a directive in your <code>php.ini</code> so that the PSR extension is loaded.</p> <pre><code>extension=psr.so\n</code></pre> <p>NOTE</p> <p>You will need the PSR 1.0 extension installed.</p>"},{"location":"installation/#pdo","title":"PDO","text":"<p>Since Phalcon is loosely coupled, it exposes functionality without the need for additional extensions. However, certain components rely on additional extensions to work. When in need for database connectivity and access, you will need to install the <code>php_pdo</code> extension. If your RDBMS is MySQL/MariaDB or Aurora, you will need the <code>php_mysqlnd</code> extension also. Similarly, using a PostgreSql database with Phalcon requires the <code>php_pgsql</code> extension.</p>"},{"location":"installation/#load-order","title":"Load order","text":"<p>Phalcon needs to be loaded after <code>PDO</code> and <code>PSR</code>. Some distributions add a number prefix on <code>ini</code> files. If that is the case, choose a high number for Phalcon (e.g. <code>50-phalcon.ini</code>), higher than <code>PDO</code> and <code>PSR</code>. This will load it after the two prerequisite extensions. If however, your distribution only has a <code>php.ini</code> file, please make sure that the order is similar to this:</p> <pre><code>extension=psr.so\nextension=phalcon.so\n</code></pre>"},{"location":"installation/#hardware","title":"Hardware","text":"<p>Phalcon is designed to use as little resources as possible, while offering high performance. Although we have tested Phalcon in various low end environments, (such as 0.25GB RAM, 0.5 CPU), the hardware that you will choose will depend on the your application needs.</p> <p>We have hosted our website and blog for the last few years on an Amazon VM with 512MB RAM and 1 vCPU.</p>"},{"location":"installation/#software","title":"Software","text":"<p>NOTE</p> <p>You should always try and use the latest version of Phalcon and PHP as both address bugs, security enhancements as well as performance.</p> <p>Along with PHP 7.2 or greater, depending on your application needs and the Phalcon components you need, you might need to install the following extensions:</p> <ul> <li>curl</li> <li>fileinfo</li> <li>gettext</li> <li>gd2 (to use the Phalcon\\Image\\Adapter\\Gd class)</li> <li>imagick (to use the Phalcon\\Image\\Adapter\\Imagick class)</li> <li>json</li> <li><code>libpcre3-dev</code> (Debian/Ubuntu), <code>pcre-devel</code> (CentOS), <code>pcre</code> (macOS)</li> <li>PDO Extension as well as the relevant RDBMS specific extension (i.e. MySQL, PostgreSql etc.)</li> <li>OpenSSL Extension</li> <li>Mbstring Extension</li> <li>Memcached or other relevant cache adapters depending on your usage of cache</li> </ul> <p>NOTE</p> <p>Installing these packages will vary based on your operating system as well as the package manager you use (if any). Please consult the relevant documentation on how to install these extensions.</p> <p>For the <code>libpcre3-dev</code> package you can use the following commands:</p>"},{"location":"installation/#pecl","title":"Pecl","text":"<p>The Pecl installation method is available for Windows, Linux and MacOS. Under windows pre-compiled dll files will be used. Under Linux and MacOS it will compile Phalcon locally so it could be faster to use a different installation method on these platforms. To install using Pecl make sure you have pecl/pear installed.  <pre><code>pecl channel-update pecl.php.net\npecl install phalcon\n</code></pre></p>"},{"location":"installation/#debian","title":"Debian","text":"<p><pre><code>sudo apt-get install libpcre3-dev\n</code></pre> and then try and install Phalcon again</p>"},{"location":"installation/#centos","title":"CentOS","text":"<pre><code>sudo yum install pcre-devel\n</code></pre>"},{"location":"installation/#macosx-using-brew","title":"Mac/Osx using Brew","text":"<pre><code>brew install pcre\n</code></pre> <p>Without <code>brew</code>, you need to go to the PCRE website and download the latest pcre:</p> <pre><code>tar -xzvf pcre-8.42.tar.gz\ncd pcre-8.42\n./configure --prefix=/usr/local/pcre-8.42\nmake\nmake install\nln -s /usr/local/pcre-8.42 /usr/sbin/pcre\nln -s /usr/local/pcre-8.42/include/pcre.h /usr/include/pcre.h\n</code></pre> <p>For Maverick <pre><code>brew install pcre\n</code></pre> if it gives you error, you can use</p> <pre><code>sudo ln -s /opt/local/include/pcre.h /usr/include/\nsudo pecl install apc \n</code></pre>"},{"location":"installation/#installation-platforms","title":"Installation Platforms","text":"<p>Since Phalcon is compiled as a PHP extension, its installation is somewhat different than any other traditional PHP framework. Phalcon needs to be installed and loaded as a module on your web server.</p>"},{"location":"installation/#linux","title":"Linux","text":"<p>To install Phalcon on Linux, you will need to add our repository in your distribution and then install it.</p>"},{"location":"installation/#deb-based-distributions-debian-ubuntu-etc","title":"DEB Based Distributions (Debian, Ubuntu, Etc.)","text":""},{"location":"installation/#repository-installation","title":"Repository installation","text":"<p>Add the repository to your distribution:</p> <p>Stable releases <pre><code>curl -s https://packagecloud.io/install/repositories/phalcon/stable/script.deb.sh | sudo bash\n</code></pre></p> <p>Nightly releases <pre><code>curl -s https://packagecloud.io/install/repositories/phalcon/nightly/script.deb.sh | sudo bash\n</code></pre></p> <p>Mainline releases (alpha, beta etc.) <pre><code>curl -s https://packagecloud.io/install/repositories/phalcon/mainline/script.deb.sh | sudo bash\n</code></pre></p> <p>NOTE</p> <p>This only needs to be done only once, unless your distribution changes or you want to switch from stable to nightly builds.</p>"},{"location":"installation/#phalcon-installation","title":"Phalcon installation","text":"<p>To install Phalcon you need to type the following commands in your terminal:</p> <pre><code>sudo apt-get update\nsudo apt-get install php7.2-phalcon\n</code></pre>"},{"location":"installation/#additional-ppas","title":"Additional PPAs","text":"<p>Ond\u0159ej Sur\u00fd</p> <p>If you do not wish to use our repository at packagecloud.io, you can always use the one offered by Ond\u0159ej Sur\u00fd.</p> <p>Installation of the repo: <pre><code>sudo add-apt-repository ppa:ondrej/php\nsudo apt-get update\n</code></pre></p> <p>and Phalcon:</p> <pre><code>sudo apt-get install php-phalcon4\n</code></pre>"},{"location":"installation/#rpm-based-distributions-centos-fedora-etc","title":"RPM Based Distributions (CentOS, Fedora, Etc.)","text":""},{"location":"installation/#repository-installation_1","title":"Repository installation","text":"<p>Add the repository to your distribution:</p> <p>Stable releases <pre><code>curl -s https://packagecloud.io/install/repositories/phalcon/stable/script.rpm.sh | sudo bash\n</code></pre></p> <p>Nightly releases <pre><code>curl -s https://packagecloud.io/install/repositories/phalcon/nightly/script.rpm.sh | sudo bash\n</code></pre></p> <p>Mainline releases (alpha, beta etc.) <pre><code>curl -s https://packagecloud.io/install/repositories/phalcon/mainline/script.rpm.sh | sudo bash\n</code></pre></p> <p>NOTE</p> <p>This only needs to be done only once, unless your distribution changes or you want to switch from stable to nightly builds.</p>"},{"location":"installation/#phalcon-installation_1","title":"Phalcon installation","text":"<p>To install Phalcon you need to issue the following commands in your terminal:</p> <pre><code>sudo yum update\nsudo yum install php72u-phalcon\n</code></pre>"},{"location":"installation/#additional-rpms","title":"Additional RPMs","text":"<p>Remi</p> <p>Remi Collet maintains an excellent repository for RPM based installations. You can find instructions on how to enable it for your distribution here.</p> <p>Installing Phalcon after that is as easy as:</p> <pre><code>yum install php72-php-phalcon4\n</code></pre> <p>Additional versions are available both architecture specific (x86/x64) as well as PHP version specific</p>"},{"location":"installation/#freebsd","title":"FreeBSD","text":"<p>Binary package (pkg) and compile myself from source (ports) are available for FreeBSD. To install it you will need to issue the following commands:</p>"},{"location":"installation/#pkg","title":"pkg","text":"<pre><code>pkg install php74-phalcon4\n</code></pre>"},{"location":"installation/#ports","title":"ports","text":"<pre><code>cd /usr/ports/www/phalcon4\n\nmake install clean\n</code></pre>"},{"location":"installation/#gentoo","title":"Gentoo","text":"<p>An overlay for installing Phalcon can be found here</p>"},{"location":"installation/#raspberry-pi","title":"Raspberry Pi","text":"<pre><code>sudo -s\ngit clone https://github.com/phalcon/cphalcon\ncd cphalcon/\ngit checkout tags/v4.0.0 ./\nzephir fullclean\nzephir build\n</code></pre> <p>It is also necessary to increase the swap file from the default 100 MB to at least 2000 MB. Because, the compiler lacks RAM.</p> <pre><code>sudo -s\nnano /etc/dphys-swapfile\n</code></pre> <p>Replacing <code>CONF_SWAPSIZE=100</code> with <code>CONF_SWAPSIZE=2000</code></p> <p>After saving the setting, restart the daemon:</p> <pre><code>/etc/init.d/dphys-swapfile stop\n/etc/init.d/dphys-swapfile start\n</code></pre>"},{"location":"installation/#macos","title":"macOS","text":"<p>Brew includes binary packages so you don't need to compile Phalcon yourself. If you want to compile the extension yourself you need the following dependencies installed:</p>"},{"location":"installation/#compilation-requirements","title":"Compilation requirements","text":"<ul> <li>PHP 7.x development resources</li> <li>XCode</li> </ul>"},{"location":"installation/#brew","title":"Brew","text":"<p>Binary installation (preferred): <pre><code>brew tap phalcon/extension https://github.com/phalcon/homebrew-tap\nbrew install phalcon\n</code></pre> Compile phalcon: <pre><code>brew tap phalcon/extension https://github.com/phalcon/homebrew-tap\nbrew install phalcon --build-from-source \n</code></pre></p>"},{"location":"installation/#macports","title":"MacPorts","text":"<pre><code>sudo port install php72-phalcon\nsudo port install php73-phalcon\n</code></pre> <p>Edit your php.ini file and then append at the end:</p> <pre><code>extension=php_phalcon.so\n</code></pre> <p>Restart your webserver.</p>"},{"location":"installation/#phpbrew-macoslinux","title":"PHPBrew (macOS/Linux)","text":"<p>PHPBrew is an excellent way to manage multiple versions of PHP and PHP extensions on your system(s). Installation instructions for PHPBrew can be found here </p> <p>If you're using PHPBrew, you can install Phalcon using the following:</p> <pre><code>sudo phpbrew ext install phalcon\n</code></pre> <p>You can install the PSR dependency via phpbrew as well if needed:</p> <pre><code>sudo phpbrew ext install psr\n</code></pre>"},{"location":"installation/#windows","title":"Windows","text":"<p>To use Phalcon on Windows, you will need to install the phalcon.dll. We have compiled several DLLs depending on the target platform. The DLLs can be found in our download page.</p> <p>Identify your PHP installation as well as architecture. If you download the wrong DLL, Phalcon will not work. <code>phpinfo()</code> contains this information. In the example below, we will need the NTS version of the DLL:</p> <p></p> <p>The available DLLs are:</p> Architecture Version Type x64 7.x Thread safe x64 7.x Non Thread safe (NTS) x86 7.x Thread safe x86 7.x Non Thread safe (NTS) <p>Edit your php.ini file and then append at the end:</p> <pre><code>extension=php_phalcon.dll\n</code></pre> <p>Restart your webserver.</p>"},{"location":"installation/#compile-from-sources","title":"Compile From Sources","text":"<p>Compiling from source is similar to most environments (Linux/macOS).</p>"},{"location":"installation/#requirements_1","title":"Requirements","text":"<ul> <li>PHP 7.2.x/7.3.x development resources</li> <li>GCC compiler (Linux/Solaris/FreeBSD) or Xcode (macOS)</li> <li>re2c &gt;= 0.13</li> <li>libpcre-dev</li> </ul>"},{"location":"installation/#compilation","title":"Compilation","text":"<p>Download the latest <code>zephir.phar</code> from here. Add it to a folder that can be accessed by your system.</p> <p>Clone the repository</p> <pre><code>git clone https://github.com/phalcon/cphalcon\n</code></pre> <p>Compile Phalcon</p> <pre><code>cd cphalcon/\ngit checkout tags/v4.0.0 ./\nzephir fullclean\nzephir build\n</code></pre> <p>Check the module</p> <pre><code>php -m | grep phalcon\n</code></pre> <p>You will now need to add <code>extension=phalcon.so</code> to your PHP ini and restart your web server, so as to load the extension. <pre><code>; Suse: Add a File Called Phalcon.ini in /etc/php7/conf.d/ with This Content:\nextension=phalcon.so\n\n; CentOS/RedHat/Fedora: Add a File Called Phalcon.ini in /etc/php.d/ with This Content:\nextension=phalcon.so\n\n; Ubuntu/Debian with Apache2: Add a File Called 30-phalcon.ini in /etc/php7/apache2/conf.d/ with This Content:\nextension=phalcon.so\n\n; Ubuntu/Debian with Php7-fpm: Add a File Called 30-phalcon.ini in /etc/php7/fpm/conf.d/ with This Content:\nextension=phalcon.so\n\n; Ubuntu/Debian with Php7-cli: Add a File Called 30-phalcon.ini in /etc/php7/cli/conf.d/ with This Content:\nextension=phalcon.so\n</code></pre></p> <p>The instructions above will compile and install the module on your system. You can also compile the extension and then add it manually in your <code>ini</code> file:</p> <pre><code>cd cphalcon/\ngit checkout tags/v4.0.0 ./\nzephir fullclean\nzephir compile\ncd ext\nphpize\n./configure\nmake &amp;&amp; make install\n</code></pre> <p>If you use the above method you will need to add the <code>extension=phalcon.so</code> in your <code>php.ini</code> both for CLI and web server.</p>"},{"location":"installation/#tuning-build","title":"Tuning Build","text":"<p>By default we compile to be as compatible as possible with all processors (<code>gcc -mtune=native -O2 -fomit-frame-pointer</code>). If you would like instruct the compiler to generate optimized machine code that matches the processor where it is currently running on you can set your own compile flags by exporting CFLAGS before the build. For example</p> <pre><code>export CFLAGS=\"-march=native -O2 -fomit-frame-pointer\"\nzephir build\n</code></pre> <p>This will generate the best possible code for that chipset but will likely break the compiled object on older chipsets.</p>"},{"location":"installation/#shared-hosting","title":"Shared Hosting","text":"<p>Running your application on shared hosting might restrict you in installing Phalcon, especially if you do not have root access. Some web hosting control panels luckily have Phalcon support.</p>"},{"location":"installation/#cpanel-whm","title":"cPanel &amp; WHM","text":"<p>cPanel &amp; WHM support Phalcon using Easy Apache 4 (EA4). You can install Phalcon by enabling the module in Easy Apache 4 (EA4).</p>"},{"location":"installation/#plesk","title":"Plesk","text":"<p>The plesk control panel doesn't have Phalcon support but you can find installation instructions on the Plesk website</p>"},{"location":"introduction/","title":"Phalcon Framework: A PHP framework built as an extension for PHP","text":"<p>A full-stack PHP framework delivered as a C-extension</p>"},{"location":"introduction/#mission","title":"Mission","text":"<p>Our mission is to empower developers with an advanced, feature-rich tool: Phalcon. This framework is designed to facilitate the development of powerful applications with minimal server resource consumption and optimal performance.</p>"},{"location":"introduction/#what-is-phalcon","title":"What is Phalcon","text":"<p>Phalcon is an open-source full-stack framework for PHP, distinguished by its unique architecture written as a C-extension. This means that it is implemented in C and directly integrated into PHP for enhanced performance.</p> <p>Its innovative architecture ensures that the framework is always memory-resident, providing functionality on demand without the overhead of file stats and reads typical in traditional PHP frameworks.</p>"},{"location":"introduction/#usage","title":"Usage","text":"<p>Phalcon is designed to be developer-friendly, and you don't need to be familiar with the C language to utilize its power. The framework's interface is exposed as PHP classes under the <code>Phalcon</code> namespace, making it accessible and easy to use.</p> <p>Phalcon is loosely coupled, allowing developers to use only the objects that they need as glue components based in the needs of their applications.</p> <p>NOTE</p> <p>The translation of the documentation is driven by enthusiasts and contributors. We invite and appreciate your participation in the translation effort. Contribute new translations or corrections via GitHub for English or [Crowdin][crowdin] for other languages.</p> <p>You can check our GitHub project for the code and browse through these documents for usage and functionality.</p> <p>Since this is a community driven project, you can share your thoughts and requests for functionality you need by issuing a New Feature Request and if you wish vote in GitHub for existing NFRs.</p> <p>Feel free to connect with us using our social media accounts:</p> <ul> <li> <p> Chat - QA</p> <p> Discord Chat</p> <p> Discussions</p> </li> <li> <p> Support</p> <p> GitHub Sponsors - Support Us</p> <p> OpenCollective - Support Us</p> </li> <li> <p> Social Media</p> <p> Telegram</p> <p> Gab</p> <p> MeWe</p> <p> Reddit</p> <p> Facebook</p> <p> Twitter</p> </li> <li> <p> Videos</p> <p> BitChute</p> <p> LBRY</p> <p> YouTube</p> </li> </ul>"},{"location":"loader/","title":"Loader","text":""},{"location":"loader/#overview","title":"Overview","text":"<p>Phalcon\\Loader is an autoloader that implements PSR-4. Just like any autoloader, depending on its setup, it will try and find the files your code is looking for based on file, class, namespace etc. Since this component is written in C, it offers the lowest overhead when processing its setup, thus offering a performance boost. </p> <p></p> <p>This component relies on PHP's autoloading classes capability. If a class defined in the code has not been included yet, a special handler will try to load it. Phalcon\\Loader serves as the special handler for this operation. By loading classes on a need to load basis, the overall performance is increased since the only file reads that occur are for the files needed. This technique is called lazy initialization.</p> <p>The component offers options for loading files based on their class, file name, directories on your file system as well as file extensions.</p>"},{"location":"loader/#registration","title":"Registration","text":"<p>Usually we would use the spl_autoload_register() to register a custom autoloader for our application. Phalcon\\Loader hides this complexity. After you define all your namespaces, classes, directories and files you will need to call the <code>register()</code> function, and the autoloader is ready to be used. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n$loader = new Loader();\n\n$loader-&gt;registerNamespaces(\n    [\n       'MyApp'        =&gt; 'app/library',\n       'MyApp\\Models' =&gt; 'app/models',\n    ]\n);\n\n$loader-&gt;register();\n</code></pre> <p><code>register()</code> uses spl_autoload_register() internally. As a result it accepts also accepts the boolean <code>prepend</code> parameter. If supplied and is <code>true</code>, the autoloader will be prepended on the autoload queue instead of appended (default behavior). </p> <p>You can always call the <code>isRegistered()</code> method to check if your autoloader is registered or not.</p> <p>NOTE</p> <p>If there is an error in registering the autoloader, the component will throw an exception.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n$loader = new Loader();\n\n$loader-&gt;registerNamespaces(\n    [\n       'MyApp'        =&gt; 'app/library',\n       'MyApp\\Models' =&gt; 'app/models',\n    ]\n);\n\n$loader-&gt;register();\n\necho $loader-&gt;isRegistered(); // true\n</code></pre> <p>Unregistering the autoloader is similarly easy. All you need to do is call <code>unregister()</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n$loader = new Loader();\n\n$loader-&gt;registerNamespaces(\n    [\n       'MyApp'        =&gt; 'app/library',\n       'MyApp\\Models' =&gt; 'app/models',\n    ]\n);\n\n$loader-&gt;register();\n\nif (true === $loader-&gt;isRegistered()) {\n    $loader-&gt;unregister();\n}\n</code></pre>"},{"location":"loader/#security-layer","title":"Security Layer","text":"<p>Phalcon\\Loader incorporates a security layer, by sanitizing class names by default i.e. removing invalid characters. As such it makes it more difficult for malicious code to be injected in your application.</p> <p>Consider the following example:</p> <pre><code>&lt;?php\n\n// Basic autoloader\nspl_autoload_register(\n    function (string $className) {\n        $filepath = $className . '.php';\n\n        if (file_exists($filepath)) {\n            require $filepath;\n        }\n    }\n);\n</code></pre> <p>The above auto loader lacks any kind of security. If a part of your code accidentally calls the auto loader with a name that points to a script containing malicious code, then your application will be compromised.</p> <pre><code>&lt;?php\n\n$className = '../processes/important-process';\n\nif (class_exists($className)) {\n    // ...\n}\n</code></pre> <p>In the above snippet, if <code>../processes/important-process.php</code> is a valid file, that could have been uploaded by a hacker or from a not so careful upload process, then an external user could execute the code without any authorization and subsequently get access to the whole application if not the server.</p> <p>To avoid most of these kind of attacks, Phalcon\\Loader removes invalid characters from the class name.</p>"},{"location":"loader/#namespaces","title":"Namespaces","text":"<p>A very popular way to organize your application is with directories, each representing a particular namespace. Phalcon\\Loader can register those namespace to directory mapping and traverse those directories to search the file that your application is requiring. </p> <p>The <code>registerNamespaces()</code> method accepts an array, where keys are the namespaces and values are the actual directories in the file system. The namespace separator will be replaced by the directory separator when the loader tries to find the classes. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n$loader = new Loader();\n\n$loader-&gt;registerNamespaces(\n    [\n       'MyApp'             =&gt; 'app/library',\n       'MyApp\\Controllers' =&gt; 'app/controllers',\n       'MyApp\\Models'      =&gt; 'app/models',\n    ]\n);\n\n$loader-&gt;register();\n</code></pre> <p>In the above example, whenever we reference a controller, the loader will search for it in <code>app/controllers</code> and its subdirectories. Similarly for a model the search will occur in <code>app/models</code>. </p> <p>You do not need to register the sub namespaces, if the actual files are located in sub directories that map the namespace naming convention. </p> <p>So for instance the above example defines our <code>MyApp</code> namespace to point to <code>app/library</code>. If we have a file:</p> <pre><code>/app/library/Components/Mail.php\n</code></pre> <p>that has a namespace of:</p> <pre><code>MyApp\\Components\n</code></pre> <p>then the loader, as defined above, does not need to know about the <code>MyApp\\Components</code> namespace location, or have it defined in the <code>registerNamespaces()</code> declaration. </p> <p>If the component referenced in the code is <code>MyApp\\Components\\Mail</code>, it will assume that it is a sub directory of the root namespace. However, since we specified a different location for the <code>MyApp\\Controllers</code> and <code>MyApp\\Models</code> namespaces, the loader will look for those namespaces in the specified directories.</p> <p>The <code>registerNamespaces()</code> method also accepts a second parameter <code>merge</code>. By default it is <code>false</code>. You can however set it to <code>true</code> when having multiple calls to <code>registerNamespaces()</code> so that the namespace definitions are merged. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n$loader = new Loader();\n\n$loader-&gt;registerNamespaces(\n    [\n       'MyApp'             =&gt; 'app/library',\n    ]\n);\n\n$loader-&gt;registerNamespaces(\n    [\n       'MyApp\\Controllers' =&gt; 'app/controllers',\n       'MyApp\\Models'      =&gt; 'app/models',\n    ],\n    true\n);\n\n$loader-&gt;register();\n</code></pre> <p>The above example merges the second declaration of <code>registerNamespaces()</code> with the previous one.</p> <p>If you need to check what namespaces are registered in the autoloader, you can use the <code>getNamespaces()</code> getter, which returns the array of the registered namespaces. For the example above, <code>getNamespaces()</code> returns:</p> <pre><code>[\n   'MyApp'             =&gt; 'app/library',\n   'MyApp\\Controllers' =&gt; 'app/controllers',\n   'MyApp\\Models'      =&gt; 'app/models',\n]\n</code></pre>"},{"location":"loader/#classes","title":"Classes","text":"<p>Another way to let Phalcon\\Loader know where your components/classes are located, so that the autoloader can load them properly, is by using <code>registerClasses()</code>.</p> <p>The method accepts an array, where the key is the namespaced class and the value is the location of the file that contains the class. As expected, this is the fastest way to autoload a class, since the autoloader does not need to do file scans or stats to find the files references.</p> <p>However, using this method can hinder the maintenance of your application. The more your application grows, the more files are added, the easier it becomes to make a mistake while maintaining the list of files used in <code>registerClasses()</code></p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n$loader = new Loader();\n\n$loader-&gt;registerClasses(\n    [\n        'MyApp\\Components\\Mail'             =&gt; 'app/library/Components/Mail.php',\n        'MyApp\\Controllers\\IndexController' =&gt; 'app/controllers/IndexController.php',\n        'MyApp\\Controllers\\AdminController' =&gt; 'app/controllers/AdminController.php',\n        'MyApp\\Models\\Invoices'             =&gt; 'app/models/Invoices.php',\n        'MyApp\\Models\\Users'                =&gt; 'app/models/Users.php',\n    ]\n);\n\n$loader-&gt;register();\n</code></pre> <p>In the above example, we are defining the relationship between a namespaced class and a file. As you can see, the loader will be as fast as it can be but the list will start growing, the more our application grows, making maintenance difficult. If however your application does not have that many components, there is no reason why you cannot use this method of autoloading components.</p> <p>The <code>registerClasses()</code> method also accepts a second parameter <code>merge</code>. By default it is <code>false</code>. You can however set it to <code>true</code> when having multiple calls to <code>registerClasses()</code> so that the class definitions are merged. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n$loader = new Loader();\n\n$loader-&gt;registerClasses(\n    [\n        'MyApp\\Components\\Mail'             =&gt; 'app/library/Components/Mail.php',\n        'MyApp\\Controllers\\IndexController' =&gt; 'app/controllers/IndexController.php',\n        'MyApp\\Controllers\\AdminController' =&gt; 'app/controllers/AdminController.php',\n    ]\n);\n\n$loader-&gt;registerClasses(\n    [\n        'MyApp\\Models\\Invoices'             =&gt; 'app/models/Invoices.php',\n        'MyApp\\Models\\Users'                =&gt; 'app/models/Users.php',\n    ],\n    true\n);\n\n$loader-&gt;register();\n</code></pre> <p>The above example merges the second declaration of <code>registerClasses()</code> with the previous one.</p> <p>If you need to check what classes are registered in the autoloader, you can use the <code>getClasses()</code> getter, which returns the array of the registered classes. For the example above, <code>getClasses()</code> returns:</p> <pre><code>[\n    'MyApp\\Components\\Mail'             =&gt; 'app/library/Components/Mail.php',\n    'MyApp\\Controllers\\IndexController' =&gt; 'app/controllers/IndexController.php',\n    'MyApp\\Controllers\\AdminController' =&gt; 'app/controllers/AdminController.php',\n    'MyApp\\Models\\Invoices'             =&gt; 'app/models/Invoices.php',\n    'MyApp\\Models\\Users'                =&gt; 'app/models/Users.php',\n]\n</code></pre>"},{"location":"loader/#files","title":"Files","text":"<p>There are times that you might need to require a specific file that contains a class without a namespace or a file that contains some code that you need. An example would be a file that contains handy debugging functions. </p> <p>Phalcon\\Loader offers <code>registerFiles()</code> which is used to require such files. It accepts an array, containing the file name and location of each file.  </p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n$loader = new Loader();\n\n$loader-&gt;registerFiles(\n    [\n        'functions.php',\n        'arrayFunctions.php',\n    ]\n);\n\n$loader-&gt;register();\n</code></pre> <p>These files are automatically loaded when the <code>register()</code> method is called.</p> <p>The <code>registerFiles()</code> method also accepts a second parameter <code>merge</code>. By default it is <code>false</code>. You can however set it to <code>true</code> when having multiple calls to <code>registerFiles()</code> so that the file definitions are merged. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n$loader = new Loader();\n\n$loader-&gt;registerFiles(\n    [\n        'app/functions/functions.php',\n    ]\n);\n\n$loader-&gt;registerFiles(\n    [\n        'app/functions/debug.php',\n    ],\n    true\n);\n\n$loader-&gt;register();\n</code></pre> <p>The above example merges the second declaration of <code>registerFiles()</code> with the previous one.</p> <p>If you need to check what files are registered in the autoloader, you can use the <code>getFiles()</code> getter, which returns the array of the registered files. For the example above, <code>getFiles()</code> returns:</p> <pre><code>[\n    'app/functions/functions.php',\n    'app/functions/debug.php',\n]\n</code></pre> <p>You also have access to the <code>loadFiles()</code> method, which will traverse all the files registered and if they exist it will <code>require</code> them. This method is automatically called when you call <code>register()</code>.</p>"},{"location":"loader/#directories","title":"Directories","text":"<p>Another way to let Phalcon\\Loader know where your application files are is to register directories. When a file needs to be required by the application, the autoloader will scan the registered directories to find the referenced file so that it can require it. </p> <p>The <code>registerDirs()</code> method accepts an array with each element being a directory in the file system containing the files that will be required by the application.</p> <p>This type of registration is not recommended in terms of performance. Additionally the order of declared directories matters, since the autoloader tries to locate the files by searching directories sequentially. As a result, the directory that contains the most referenced files should be declared first, etc.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n$loader = new Loader();\n\n$loader-&gt;registerDirs(\n    [\n        'app/functions',\n        'app/controllers',\n        'app/models',\n    ]\n);\n\n$loader-&gt;register();\n</code></pre> <p>The <code>registerDirs()</code> method also accepts a second parameter <code>merge</code>. By default it is <code>false</code>. You can however set it to <code>true</code> when having multiple calls to <code>registerDirs()</code> so that the class definitions are merged. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n$loader = new Loader();\n\n$loader-&gt;registerDirs(\n    [\n        'app/functions',\n    ]\n);\n\n$loader-&gt;registerDirs(\n    [\n        'app/controllers',\n        'app/models',\n    ],\n    true\n);\n\n$loader-&gt;register();\n</code></pre> <p>The above example merges the second declaration of <code>registerDirs()</code> with the previous one.</p> <p>If you need to check what directories are registered in the autoloader, you can use the <code>getDirs()</code> getter, which returns the array of the registered directories. For the example above, <code>getDirs()</code> returns:</p> <pre><code>[\n    'app/functions',\n    'app/controllers',\n    'app/models',\n]\n</code></pre>"},{"location":"loader/#file-extensions","title":"File Extensions","text":"<p>When you use the <code>registerNamespaces()</code> and <code>registerDirs()</code>,  Phalcon\\Loader automatically assumes that your files will have the <code>.php</code> extension. You can change this behavior by using the <code>setExtensions()</code> method. The method accepts an array, where each element is the extension to be checked (without the <code>.</code>):</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n$loader = new Loader();\n\n$loader-&gt;setExtensions(\n    [\n        'php',\n        'inc',\n        'phb',\n    ]\n);\n\n$loader-&gt;registerDirs(\n    [\n        'app/functions',\n    ]\n);\n</code></pre> <p>In the example above, when referencing a file <code>Mail</code>, the autoloader will search in <code>app/functions</code> for the following files:</p> <ul> <li><code>Mail.php</code></li> <li><code>Mail.inc</code></li> <li><code>Mail.phb</code></li> </ul> <p>Files are checked in the order that each extension is defined.</p>"},{"location":"loader/#file-checking-callback","title":"File Checking Callback","text":"<p>You can speed up the loader by setting a different file checking callback method using the <code>setFileCheckingCallback()</code> method.</p> <p>The default behavior uses is_file. However you can also use <code>null</code> which will not check whether a file exists or not, before loading it or you can use stream_resolve_include_path which is much faster than is_file but will cause problems if the target file is removed from the file system.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n$loader = new Loader();\n\n$loader-&gt;setFileCheckingCallback(\"is_file\");\n</code></pre> <p>Default behavior</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n$loader = new Loader();\n\n$loader-&gt;setFileCheckingCallback(\"stream_resolve_include_path\");\n</code></pre> <p>Faster than <code>is_file()</code>, but introduces issues if the file is removed from the filesystem.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\n$loader = new Loader();\n\n$loader-&gt;setFileCheckingCallback(null);\n</code></pre> <p>Do not check file existence.</p>"},{"location":"loader/#events","title":"Events","text":"<p>The [Events Manager][events] component offers hooks that can be implemented to observe or expand the functionality of the loader. The Phalcon\\Loader implements the Phalcon\\Events\\EventsAwareInterface, and therefore the <code>getEventsManager()</code> and <code>setEventsManager()</code> methods are available.</p> <p>The following events are available:</p> Event Description Can stop operation? <code>afterCheckClass</code> Fires at the end of the auto load process when the class has not been found. No <code>beforeCheckClass</code> Fires at the beginning of the auto load process, before checking for the class. Yes <code>beforeCheckPath</code> Fires before checking a directory for a class file. Yes <code>pathFound</code> Fires when the loader locates a class file or a file in a registered directory Yes <p>In the following example, the <code>EventsManager</code> is working with the class loader, offering additional information on the operation flow:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Loader;\n\n$eventsManager = new Manager();\n$loader        = new Loader();\n\n$loader-&gt;registerNamespaces(\n    [\n       'MyApp'        =&gt; 'app/library',\n       'MyApp\\Models' =&gt; 'app/models',\n    ]\n);\n\n$eventsManager-&gt;attach(\n    'loader:beforeCheckPath',\n    function (\n        Event $event, \n        Loader $loader\n    ) {\n        echo $loader-&gt;getCheckedPath();\n    }\n);\n\n$loader-&gt;setEventsManager($eventsManager);\n\n$loader-&gt;register();\n</code></pre> <p>In the above example, we create a new Events Manager object, attach a method to the <code>loader:beforeCheckPath</code> event and then set it in our autoloader. Every time the loader loops and looks for a particular file in a specific path, the path will be printed on screen. </p> <p>The <code>getCheckedPath()</code> holds the path that is scanned during each iteration of the internal loop. Also you can use the <code>getfoundPath()</code> method, which holds the path of the found file during the internal loop.</p> <p>For events that can stop operation, all you will need to do is return <code>false</code> in the method that is attached to the particular event:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Loader;\n\n$eventsManager = new Manager();\n$loader        = new Loader();\n\n$loader-&gt;registerNamespaces(\n    [\n       'MyApp'        =&gt; 'app/library',\n       'MyApp\\Models' =&gt; 'app/models',\n    ]\n);\n\n$eventsManager-&gt;attach(\n    'loader:beforeCheckPath',\n    function (\n        Event $event, \n        Loader $loader\n    ) {\n        if ('app/models' === $loader-&gt;getCheckedPath()) {\n            return false;\n        }\n    }\n);\n\n$loader-&gt;setEventsManager($eventsManager);\n\n$loader-&gt;register();\n</code></pre> <p>In the above example, when the autoloader starts scanning the <code>app/models</code> folder for the <code>MyApp\\Models</code> namespace, it will stop the operation.</p>"},{"location":"loader/#troubleshooting","title":"Troubleshooting","text":"<p>Some things to keep in mind when using the autoloader:</p> <ul> <li>The auto-loading process is case-sensitive</li> <li>Strategies based on namespaces/prefixes are faster than the directories strategy</li> <li>If a bytecode cache, such as APCu, is installed, it will be used to get the requested file (an implicit caching of the file is performed)</li> </ul>"},{"location":"logger/","title":"Logger","text":""},{"location":"logger/#overview","title":"Overview","text":"<p>Phalcon\\Logger is a component providing logging services for applications. It offers logging to different back-ends using different adapters. It also offers transaction logging, configuration options and different logging formats. You can use the Phalcon\\Logger for any logging need your application has, from debugging processes to tracing application flow.</p> <p></p> <p>The Phalcon\\Logger has been rewritten to comply with PSR-3. This allows you to use the Phalcon\\Logger to any application that utilizes a PSR-3 logger, not just Phalcon based ones.</p> <p>In v3, the logger was incorporating the adapter in the same component. So in essence when creating a logger object, the developer was creating an adapter (file, stream etc.) with logger functionality. </p> <p>For v4, we rewrote the component to implement only the logging functionality and to accept one or more adapters that would be responsible for doing the work of logging. This immediately offers compatibility with PSR-3 and separates the responsibilities of the component. It also offers an easy way to attach more than one adapter to the logging component so that logging to multiple adapters can be achieved. By using this implementation we have reduced the code necessary for this component and removed the old <code>Logger\\Multiple</code> component.</p>"},{"location":"logger/#adapters","title":"Adapters","text":"<p>This component makes use of adapters to store the logged messages. The use of adapters allows for a common logging interface which provides the ability to easily switch back-ends, or use multiple adapters if necessary. The adapters supported are:</p> Adapter Description Phalcon\\Logger\\Adapter\\Noop Blackhole adapter (used for testing mostly) Phalcon\\Logger\\Adapter\\Stream Logs messages on a file stream Phalcon\\Logger\\Adapter\\Syslog Logs messages to the Syslog"},{"location":"logger/#stream","title":"Stream","text":"<p>This adapter is used when we want to log messages to a particular file stream. This adapter combines the v3 <code>Stream</code> and <code>File</code> ones. Usually this is the most used one: logging to a file in the file system.</p>"},{"location":"logger/#syslog","title":"Syslog","text":"<p>This adapter sends messages to the system log. The syslog behavior may vary from one operating system to another.</p>"},{"location":"logger/#noop","title":"Noop","text":"<p>This is a black hole adapter. It sends messages to infinity and beyond! This adapter is used mostly for testing or if you want to joke with a colleague.</p>"},{"location":"logger/#factory","title":"Factory","text":"<p>You can use the Phalcon\\Logger\\LoggerFactory component to create a logger. For the Phalcon\\Logger\\LoggerFactory to work, it needs to be instantiated with an Phalcon\\Logger\\AdapterFactory:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger\\LoggerFactory;\nuse Phalcon\\Logger\\AdapterFactory;\n\n$adapterFactory = new AdapterFactory();\n$loggerFactory  = new LoggerFactory($adapterFactory);\n</code></pre>"},{"location":"logger/#load","title":"<code>load()</code>","text":"<p>Phalcon\\Logger\\LoggerFactory offers the <code>load</code> method, that constructs a logger based on supplied configuration. The configuration can be an array or a Phalcon\\Config object. </p> <p>NOTE</p> <p>Use Case: Create a Logger with two Stream adapters. One adapter will be called <code>main</code> for logging all messages, while the second one will be called <code>admin</code>, logging only messages generated in the admin area of our application </p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger\\AdapterFactory;\nuse Phalcon\\Logger\\LoggerFactory;\n\n$config = [\n    \"name\"     =&gt; \"prod-logger\",\n    \"adapters\" =&gt; [\n        \"main\"  =&gt; [\n            \"adapter\" =&gt; \"stream\",\n            \"name\"    =&gt; \"/storage/logs/main.log\",\n            \"options\" =&gt; []\n        ],\n        \"admin\" =&gt; [\n            \"adapter\" =&gt; \"stream\",\n            \"name\"    =&gt; \"/storage/logs/admin.log\",\n            \"options\" =&gt; []\n        ],\n    ],\n];\n\n$adapterFactory = new AdapterFactory();\n$loggerFactory  = new LoggerFactory($adapterFactory);\n\n$logger = $loggerFactory-&gt;load($config);\n</code></pre>"},{"location":"logger/#newinstance","title":"<code>newInstance()</code>","text":"<p>The Phalcon\\Logger\\LoggerFactory also offers the <code>newInstance()</code> method, that constructs a logger based on the supplied name and array of relevant adapters. Using the use case above:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger\\Adapter\\Stream;\nuse Phalcon\\Logger\\AdapterFactory;\nuse Phalcon\\Logger\\LoggerFactory;\n\n$adapters = [\n    \"main\"  =&gt; new Stream(\"/storage/logs/main.log\"),\n    \"admin\" =&gt; new Stream(\"/storage/logs/admin.log\"),\n];\n\n$adapterFactory = new AdapterFactory();\n$loggerFactory  = new LoggerFactory($adapterFactory);\n\n$logger = $loggerFactory-&gt;newInstance('prod-logger', $adapters);\n</code></pre>"},{"location":"logger/#creating-a-logger","title":"Creating a Logger","text":"<p>Creating a logger is a multi step process. First you create the logger object and then you attach an adapter to it. After that you can start logging messages according to the needs of your application.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\n\n$adapter = new Stream('/storage/logs/main.log');\n$logger  = new Logger(\n    'messages',\n    [\n        'main' =&gt; $adapter,\n    ]\n);\n\n$logger-&gt;error('Something went wrong');\n</code></pre> <p>The above example creates a Stream adapter. We then create a logger object and attach this adapter to it. Each adapter attached to a logger needs to have a unique name, for the logger to be able to know where to log the messages. When calling the <code>error()</code> method on the logger object, the message is going to be stored in the <code>/storage/logs/main.log</code>.</p> <p>Since the logger component implements PSR-3, the following methods are available:</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\n\n$adapter = new Stream('/storage/logs/main.log');\n$logger  = new Logger(\n    'messages',\n    [\n        'main' =&gt; $adapter,\n    ]\n);\n\n$logger-&gt;alert(\"This is an alert message\");\n$logger-&gt;critical(\"This is a critical message\");\n$logger-&gt;debug(\"This is a debug message\");\n$logger-&gt;error(\"This is an error message\");\n$logger-&gt;emergency(\"This is an emergency message\");\n$logger-&gt;info(\"This is an info message\");\n$logger-&gt;log(Logger::CRITICAL, \"This is a log message\");\n$logger-&gt;notice(\"This is a notice message\");\n$logger-&gt;warning(\"This is a warning message\");\n</code></pre> The log generated is as follows:</p> <pre><code>[Tue, 25 Dec 18 12:13:14 -0400][ALERT] This is an alert message\n[Tue, 25 Dec 18 12:13:14 -0400][CRITICAL] This is a critical message\n[Tue, 25 Dec 18 12:13:14 -0400][DEBUG] This is a debug message\n[Tue, 25 Dec 18 12:13:14 -0400][ERROR] This is an error message\n[Tue, 25 Dec 18 12:13:14 -0400][EMERGENCY] This is an emergency message\n[Tue, 25 Dec 18 12:13:14 -0400][INFO] This is an info message\n[Tue, 25 Dec 18 12:13:14 -0400][CRITICAL] This is a log message\n[Tue, 25 Dec 18 12:13:14 -0400][NOTICE] This is a notice message\n[Tue, 25 Dec 18 12:13:14 -0400][WARNING] This is warning message\n</code></pre>"},{"location":"logger/#multiple-adapters","title":"Multiple Adapters","text":"<p>Phalcon\\Logger can send messages to multiple adapters with a just single call:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\n\n$adapter1 = new Stream('/logs/first-log.log');\n$adapter2 = new Stream('/remote/second-log.log');\n$adapter3 = new Stream('/manager/third-log.log');\n\n$logger = new Logger(\n    'messages',\n    [\n        'local'   =&gt; $adapter1,\n        'remote'  =&gt; $adapter2,\n        'manager' =&gt; $adapter3,\n    ]\n);\n\n// Log to all adapters\n$logger-&gt;error('Something went wrong');\n</code></pre> <p>The messages are sent to the handlers in the order they were registered using the first in first out principle.</p>"},{"location":"logger/#excluding-adapters","title":"Excluding Adapters","text":"<p>Phalcon\\Logger also offers the ability to exclude logging to one or more adapters when logging a message. This is particularly useful when in need to log a <code>manager</code> related message in the <code>manager</code> log but not in the <code>local</code> log without having to instantiate a new logger.</p> <p>With the following setup:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\n\n$adapter1 = new Stream('/logs/first-log.log');\n$adapter2 = new Stream('/remote/second-log.log');\n$adapter3 = new Stream('/manager/third-log.log');\n\n$logger = new Logger(\n    'messages',\n    [\n        'local'   =&gt; $adapter1,\n        'remote'  =&gt; $adapter2,\n        'manager' =&gt; $adapter3,\n    ]\n);\n</code></pre> <p>we have the following:</p> <p><pre><code>&lt;?php\n\n$logger-&gt;error('Something went wrong');\n</code></pre> Log to all adapters</p> <p><pre><code>&lt;?php\n\n$logger\n    -&gt;excludeAdapters(['local'])\n    -&gt;info('This does not go to the \"local\" logger');\n</code></pre> Log only to remote and manager</p> <p>NOTE</p> <p>Internally, the component loops through the registered adapters and calls the relevant logging method to achieve logging to multiple adapters. If one of them fails, the loop will break and the remaining adapters (from the loop) will not log the message. In future versions of Phalcon we will be introducing asynchronous logging to alleviate this problem.</p>"},{"location":"logger/#constants","title":"Constants","text":"<p>The class offers a number of constants that can be used to distinguish between log levels. These constants can also be used as the first parameter in the <code>log()</code> method. </p> Constant Value <code>EMERGENCY</code> 0 <code>CRITICAL</code> 1 <code>ALERT</code> 2 <code>ERROR</code> 3 <code>WARNING</code> 4 <code>NOTICE</code> 5 <code>INFO</code> 6 <code>DEBUG</code> 7 <code>CUSTOM</code> 8"},{"location":"logger/#log-levels","title":"Log Levels","text":"<p>Phalcon\\Logger allows you to set the minimum log level for the logger(s) to log. If you set this integer value, any level higher in number than the one set will not be logged. Check the values of the constants in the previous section for the order that the levels are being set.</p> <p>In the following example, we set the log level to <code>ALERT</code>. We will only see <code>EMERGENCY</code>, <code>CRITICAL</code> and <code>ALERT</code> messages.</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\n\n$adapter = new Stream('/storage/logs/main.log');\n$logger  = new Logger(\n    'messages',\n    [\n        'main' =&gt; $adapter,\n    ]\n);\n\n$logger-&gt;setLogLevel(Logger::ALERT);\n\n$logger-&gt;alert(\"This is an alert message\");\n$logger-&gt;critical(\"This is a critical message\");\n$logger-&gt;debug(\"This is a debug message\");\n$logger-&gt;error(\"This is an error message\");\n$logger-&gt;emergency(\"This is an emergency message\");\n$logger-&gt;info(\"This is an info message\");\n$logger-&gt;log(Logger::CRITICAL, \"This is a log message\");\n$logger-&gt;notice(\"This is a notice message\");\n$logger-&gt;warning(\"This is a warning message\");\n</code></pre> The log generated is as follows:</p> <pre><code>[Tue, 25 Dec 18 12:13:14 -0400][ALERT] This is an alert message\n[Tue, 25 Dec 18 12:13:14 -0400][CRITICAL] This is a critical message\n[Tue, 25 Dec 18 12:13:14 -0400][EMERGENCY] This is an emergency message\n[Tue, 25 Dec 18 12:13:14 -0400][CRITICAL] This is a log message\n</code></pre> <p>The above can be used in situations where you want to log messages above a certain severity based on conditions in your application such as development mode vs. production.</p> <p>NOTE</p> <p>The log level set is included in the logging. Anything below that level (i.e. higher number) will not be logged</p> <p>NOTE</p> <p>It is never a good idea to suppress logging levels in your application, since even warning errors do require CPU cycles to be processed and neglecting these errors could potentially lead to unintended circumstances </p>"},{"location":"logger/#transactions","title":"Transactions","text":"<p>Phalcon\\Logger also offers the ability to queue the messages in your logger, and then commit them all together in the log file. This is similar to a database transaction with <code>begin</code> and <code>commit</code>. Each adapter exposes the following methods: - <code>begin</code> - begins the logging transaction - <code>inTransaction</code> - <code>bool</code> if you are in a transaction or not - <code>commit</code> - writes all the queued messages in the log file</p> <p>Since the functionality is available at the adapter level, you can program your logger to use transactions on a per adapter basis.</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\n\n$adapter1 = new Stream('/logs/first-log.log');\n$adapter2 = new Stream('/remote/second-log.log');\n$adapter3 = new Stream('/manager/third-log.log');\n\n$logger = new Logger(\n    'messages',\n    [\n        'local'   =&gt; $adapter1,\n        'remote'  =&gt; $adapter2,\n        'manager' =&gt; $adapter3,\n    ]\n);\n\n$logger-&gt;getAdapter('manager')-&gt;begin();\n\n$logger-&gt;error('Something happened');\n\n$logger-&gt;getAdapter('manager')-&gt;commit();\n</code></pre> In the example above, we register three adapters. We set the <code>manager</code> logger to be in transaction mode. As soon as we call:</p> <p><pre><code>$logger-&gt;error('Something happened');\n</code></pre> the message will be logged in both <code>local</code> and <code>remote</code> adapters. It will be queued for the <code>manager</code> adapter and not logged until we call the <code>commit</code> method in the <code>manager</code> adapter.</p> <p>NOTE</p> <p>If you set one or more adapters to be in transaction mode (i.e. call <code>begin</code>) and forget to call <code>commit</code>, The adapter will call <code>commit</code> for you right before it is destroyed.</p>"},{"location":"logger/#message-formatting","title":"Message Formatting","text":"<p>This component makes use of <code>formatters</code> to format messages before sending them to the backend. The formatters available are:</p> Adapter Description Phalcon\\Logger\\Formatter\\Line Formats the message on a single line of text Phalcon\\Logger\\Formatter\\Json Formats the message in a JSON string"},{"location":"logger/#line-formatter","title":"Line Formatter","text":"<p>Formats the messages using a one-line string. The default logging format is:</p> <pre><code>[%date%][%type%] %message%\n</code></pre>"},{"location":"logger/#message-format","title":"Message Format","text":"<p>If the default format of the message does not fit the needs of your application you can change it using the <code>setFormat()</code> method. The log format variables allowed are:</p> Variable Description <code>%message%</code> The message itself expected to be logged <code>%date%</code> Date the message was added <code>%type%</code> Uppercase string with message type <p>The following example demonstrates how to change the message format:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\nuse Phalcon\\Logger\\Formatter\\Line;\n\n$formatter = new Line('[%type%] - [%date%] - %message%');\n$adapter   = new Stream('/storage/logs/main.log');\n\n$adapter-&gt;setFormatter($formatter);\n\n$logger  = new Logger(\n    'messages',\n    [\n        'main' =&gt; $adapter,\n    ]\n);\n\n$logger-&gt;error('Something went wrong');\n</code></pre> <p>which produces:</p> <pre><code>[ALERT] - [Tue, 25 Dec 18 12:13:14 -0400] - Something went wrong\n</code></pre> <p>If you do not want to use the constructor to change the message, you can always use the <code>setFormat()</code> on the formatter:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\nuse Phalcon\\Logger\\Formatter\\Line;\n\n$formatter = new Line();\n$formatter-&gt;setFormat('[%type%] - [%date%] - %message%');\n\n$adapter = new Stream('/storage/logs/main.log');\n\n$adapter-&gt;setFormatter($formatter);\n\n$logger  = new Logger(\n    'messages',\n    [\n        'main' =&gt; $adapter,\n    ]\n);\n\n$logger-&gt;error('Something went wrong');\n</code></pre>"},{"location":"logger/#date-format","title":"Date Format","text":"<p>The default date format is:</p> <pre><code>\"D, d M y H:i:s O\"\n</code></pre> <p>If the default format of the message does not fit the needs of your application you can change it using the <code>setDateFormat()</code> method. The method accepts a string with characters that correspond to date formats. For all available formats, please consult this page.</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\nuse Phalcon\\Logger\\Formatter\\Line;\n\n$formatter = new Line();\n$formatter-&gt;setDateFormat('Ymd-His');\n\n$adapter = new Stream('/storage/logs/main.log');\n\n$adapter-&gt;setFormatter($formatter);\n\n$logger  = new Logger(\n    'messages',\n    [\n        'main' =&gt; $adapter,\n    ]\n);\n\n$logger-&gt;error('Something went wrong'); \n</code></pre> which produces:</p> <pre><code>[ERROR] - [20181225-121314] - Something went wrong\n</code></pre>"},{"location":"logger/#json-formatter","title":"JSON Formatter","text":"<p>Formats the messages returning a JSON string:</p> <pre><code>{\n    \"type\"      : \"Type of the message\",\n    \"message\"   : \"The message\",\n    \"timestamp\" : \"The date as defined in the date format\"\n}\n</code></pre>"},{"location":"logger/#date-format_1","title":"Date Format","text":"<p>The default date format is:</p> <pre><code>\"D, d M y H:i:s O\"\n</code></pre> <p>If the default format of the message does not fit the needs of your application you can change it using the <code>setDateFormat()</code> method. The method accepts a string with characters that correspond to date formats. For all available formats, please consult this page.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\nuse Phalcon\\Logger\\Formatter\\Line;\n\n$formatter = new Line();\n$formatter-&gt;setDateFormat('Ymd-His');\n\n$adapter = new Stream('/storage/logs/main.log');\n$adapter-&gt;setFormatter($formatter);\n\n$logger  = new Logger(\n    'messages',\n    [\n        'main' =&gt; $adapter,\n    ]\n);\n\n$logger-&gt;error('Something went wrong');\n</code></pre> <p>which produces:</p> <pre><code>{\n    \"type\"      : \"error\",\n    \"message\"   : \"Something went wrong\",\n    \"timestamp\" : \"20181225-121314\"\n}\n</code></pre>"},{"location":"logger/#custom-formatter","title":"Custom Formatter","text":"<p>The Phalcon\\Logger\\Formatter\\FormatterInterface interface must be implemented in order to create your own formatter or extend the existing ones. Additionally you can reuse the Phalcon\\Logger\\Formatter\\AbstractFormatter abstract class.</p>"},{"location":"logger/#interpolation","title":"Interpolation","text":"<p>The logger also supports interpolation. There are times that you might need to inject additional text in your logging messages; text that is dynamically created by your application. This can be easily achieved by sending an array as the second parameter of the logging method (i.e. <code>error</code>, <code>info</code>, <code>alert</code> etc.). The array holds keys and values, where the key is the placeholder in the message and the value is what will be injected in the message.</p> <p>The following example demonstrates interpolation by injecting in the message the parameter \"framework\" and \"secs\".</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\n\n$adapter = new Stream('/storage/logs/main.log');\n$logger  = new Logger(\n    'messages',\n    [\n        'main' =&gt; $adapter,\n    ]\n);\n\n$message = '{framework} executed the \"Hello World\" test in {secs} second(s)';\n$context = [\n    'framework' =&gt; 'Phalcon',\n    'secs'      =&gt; 1,\n];\n\n$logger-&gt;info($message, $context);\n</code></pre>"},{"location":"logger/#item","title":"Item","text":"<p>The formatter classes above accept a Phalcon\\Logger\\Item object. The object contains all the necessary data required for the logging process. It is used as a transport of data from the logger to the formatter.</p>"},{"location":"logger/#exceptions","title":"Exceptions","text":"<p>Any exceptions thrown in the Logger component will be of type Phalcon\\Logger\\Exception. You can use this exception to selectively catch exceptions thrown only from this component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\nuse Phalcon\\Logger\\Exception;\n\ntry {\n    $adapter = new Stream('/storage/logs/main.log');\n    $logger  = new Logger(\n        'messages',\n        [\n            'main' =&gt; $adapter,\n        ]\n    );\n\n    // Log to all adapters\n    $logger-&gt;error('Something went wrong');\n} catch (Exception $ex) {\n    echo $ex-&gt;getMessage();\n}\n</code></pre>"},{"location":"logger/#examples","title":"Examples","text":""},{"location":"logger/#stream_1","title":"Stream","text":"<p>Logging to a file:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\n\n$adapter = new Stream('/storage/logs/main.log');\n$logger  = new Logger(\n    'messages',\n    [\n        'main' =&gt; $adapter,\n    ]\n);\n\n// Log to all adapters\n$logger-&gt;error('Something went wrong');\n</code></pre> <p>The stream logger writes messages to a valid registered stream in PHP. A list of streams is available here. Logging to a stream</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\n\n$adapter = new Stream('php://stderr');\n$logger  = new Logger(\n    'messages',\n    [\n        'main' =&gt; $adapter,\n    ]\n);\n\n$logger-&gt;error('Something went wrong');\n</code></pre>"},{"location":"logger/#syslog_1","title":"Syslog","text":"<pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Syslog;\n\n// Setting identity/mode/facility\n$adapter = new Syslog(\n    'ident-name',\n    [\n        'option'   =&gt; LOG_NDELAY,\n        'facility' =&gt; LOG_MAIL,\n    ]\n);\n\n$logger  = new Logger(\n    'messages',\n    [\n        'main' =&gt; $adapter,\n    ]\n);\n\n$logger-&gt;error('Something went wrong');\n</code></pre>"},{"location":"logger/#noop_1","title":"Noop","text":"<pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Noop;\n\n$adapter = new Noop('nothing');\n$logger  = new Logger(\n    'messages',\n    [\n        'main' =&gt; $adapter,\n    ]\n);\n\n$logger-&gt;error('Something went wrong');\n</code></pre>"},{"location":"logger/#custom-adapters","title":"Custom Adapters","text":"<p>The Phalcon\\Logger\\AdapterInterface interface must be implemented in order to create your own logger adapters or extend the existing ones. You can also take advantage of the functionality in Phalcon\\Logger\\Adapter\\AbstractAdapter abstract class. </p>"},{"location":"logger/#abstract-classes","title":"Abstract Classes","text":"<p>There are two abstract classes that offer useful functionality when creating custom adapters: Phalcon\\Logger\\Adapter\\AbstractAdapter and Phalcon\\Logger\\Formatter\\AbstractFormatter.</p>"},{"location":"logger/#dependency-injection","title":"Dependency Injection","text":"<p>You can register as many loggers as you want in the [Phalcon\\Di\\FactoryDefault][factorydefault] container. An example of the registration of the service as well as accessing it is below:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\n\n$container = new Di();\n\n$container-&gt;set(\n    'logger',\n    function () {\n        $adapter = new Stream('/storage/logs/main.log');\n        $logger  = new Logger(\n            'messages',\n            [\n                'main' =&gt; $adapter,\n            ]\n        );\n\n        return $logger;\n    }\n);\n\n// accessing it later:\n$logger = $container-&gt;getShared('logger');\n</code></pre>"},{"location":"mvc/","title":"MVC - Model View Controller","text":""},{"location":"mvc/#overview","title":"Overview","text":"<p>Model View Controller (MVC) is a software architectural pattern, which divides the application logic into three interconnected elements, separating internal representations of information of the application. </p> <p>Phalcon offers the object-oriented classes, necessary to implement the Model View Controller in your application. This design pattern is widely used by other web frameworks and desktop applications.</p> <p>MVC benefits include:</p> <ul> <li>Isolation of business logic from the user interface and the database layer</li> <li>Making it clear where different types of code belong for easier maintenance</li> </ul> <p>If you decide to use MVC, every request to your application resources will be managed by the MVC architecture. Phalcon classes are written in Zephir, which is translated to C, offering a high performance implementation of the MVC pattern in PHP applications.</p>"},{"location":"mvc/#models","title":"Models","text":"<p>A model represents the information (data) of the application and the rules to manipulate that data. Models are primarily used for managing the rules of interaction with a corresponding database table. In most cases, each table in your database will correspond to one model in your application. The bulk of your application's business logic will be concentrated in the models. more...</p>"},{"location":"mvc/#views","title":"Views","text":"<p>Views represent the user interface of your application. Views are often HTML files with embedded PHP code that perform tasks related solely to the presentation of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application. more...</p>"},{"location":"mvc/#controllers","title":"Controllers","text":"<p>The controllers provide the flow between models and views. Controllers are responsible for processing the incoming requests from the web browser, interrogating the models for data, and passing that data on to the views for presentation. more...</p>"},{"location":"namespaces/","title":"Namespaces","text":""},{"location":"namespaces/#overview","title":"Overview","text":"<p>Namespaces can be used to avoid class name collisions. This means that if you have two controllers in an application with the same name, a namespace can be used help PHP understand that they are two different classes. Namespaces are also useful when creating bundles or modules.</p>"},{"location":"namespaces/#activation","title":"Activation","text":"<p>If you decided to use namespaces for your application, you will need to instruct your autoloader on where your namespaces reside. This is the most common way to distinguish between namespaces in your application. If you chose to use the Phalcon\\Loader component, then you will need to register your namespaces accordingly:</p> <pre><code>&lt;?php\n\n$loader-&gt;registerNamespaces(\n    [\n       'MyApp\\Admin\\Controllers' =&gt; '/app/web/admin/controllers/',\n       'MyApp\\Admin\\Models'      =&gt; '/app/web/admin/models/',\n    ]\n);\n</code></pre> <p>You can also specify the namespace when defining your routes, using the Router component:</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    '/admin/invoices/list',\n    [\n        'namespace'  =&gt; 'MyApp\\Admin',\n        'controller' =&gt; 'Invoices',\n        'action'     =&gt; 'list',\n    ]\n);\n</code></pre> <p>or passing it as part of the route as a parameter</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    '/:namespace/invoices/list',\n    [\n        'namespace'  =&gt; 1,\n        'controller' =&gt; 'Invoices',\n        'action'     =&gt; 'list',\n    ]\n);\n</code></pre> <p>Finally, if you are only working with the same namespace for every controller, you can define a default namespace in your Dispatcher. Doing so, you will not need to specify the full class in the router path:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Dispatcher;\n\n$di-&gt;set(\n    'dispatcher',\n    function () {\n        $dispatcher = new Dispatcher();\n\n        $dispatcher-&gt;setDefaultNamespace(\n            'MyApp\\Admin\\Controllers'\n        );\n\n        return $dispatcher;\n    }\n);\n</code></pre>"},{"location":"namespaces/#controllers","title":"Controllers","text":"<p>The following example shows how to implement a controller that uses namespaces:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Admin\\Controllers;\n\nuse Phalcon\\Mvc\\Controller;\n\nclass InvoicesController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function listAction()\n    {\n\n    }\n}\n</code></pre>"},{"location":"namespaces/#models","title":"Models","text":"<p>The following example shows a model that is namespaced:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Admin\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n\n}\n</code></pre> <p>If models have relationships they must include the namespace too:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Admin\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\nclass Invoices extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;hasMany(\n            'inv_cst_id',\n            Customers::class,\n            'cst_id',\n            [\n                'alias' =&gt; 'customers',\n            ]\n        );\n    }\n}\n</code></pre> <p>In PHQL you must write the statements including namespaces:</p> <pre><code>&lt;?php\n\n$phql = 'SELECT i.* '\n      . 'FROM MyApp\\Admin\\Models\\Invoices i '\n      . 'JOIN MyApp\\Admin\\Models\\Customers c';\n</code></pre>"},{"location":"new-feature-request-list/","title":"New Feature Request List","text":"Votes Description 030 ORM: Many to Many behaviour - save related phalcon/phalcon#138 027 Queue: Add redis queue adapter to replace beanstalkd phalcon/phalcon#153 023 ODM: MongoDB Driver support phalcon/cphalcon#11156  022 Volt: Support for embedding blocks into other blocks phalcon/phalcon#133 020 Url: UPDATE query with JOIN in PHQL phalcon/phalcon#146 018 HTTP: Ability to handle the request via Psr ServerRequest phalcon/cphalcon#14390 018 HTTP: Rework the Phalcon HTTP stack phalcon/cphalcon#12485 018 Router: generate URL for route with hostName phalcon/phalcon#141 018 Forms: Embedded Forms phalcon/phalcon#134 016 Application: Phalcon Authentication phalcon/phalcon#162 016 Tag: HTML OPTION attributes by Phalcon\\Tag::select() phalcon/phalcon#135 015 Volt: Volt with \"Literal\" tag phalcon/phalcon#136 014 Application: Use the same way to register modules Mvc/Cli/Micro 013 Db - add multi array insertion phalcon/cphalcon#14620 013 Router: Router enhancements and changes phalcon/phalcon#148 012 ORM: Prevent unnecessary database requests for relationships where key is NULL phalcon/cphalcon#14471 012 Validation: Add an option to cancel other validators only for the same field when the validator fails phalcon/cphalcon#1540 011 Db - Support MySQL 8 - phalcon/cphalcon#14719  011 Security: Don't change the CSRF token on every request phalcon/cphalcon#14413 010 Queue: Queue Service phalcon/phalcon#163 009 Security: different UUID versions phalcon/cphalcon#14955 009 Db: Postgres Arrays and array operators support phalcon/cphalcon#14579 009 ORM: Data Mapper Implementation phalcon/phalcon#166 009 Url: Url get() function enhancement request phalcon/phalcon#145 008 Http - Firewall https://github.com/phalcon/cphalcon/issues/11389 008 Security: Security Improvement phalcon/cphalcon#14456 007 Db - add support for Microsoft SQL Server phalcon/cphalcon#1184 007 Validation: Forms should transform \"\" to NULL unless explicitly told not to phalcon/phalcon#158 007 Form Elements: Add proper support to \\Phalcon\\Form for Radio button phalcon/phalcon#154 007 Application: Add module name to module class name format in Application::registerModules phalcon/cphalcon#12252 006 ROUTER: Initialize Router from Array https://github.com/phalcon/cphalcon/issues/15050 006 ORM: Global option for <code>reusable</code> in relationships phalcon/cphalcon#14788   006 Router: Nested route group phalcon/cphalcon#13904 006 Validation: PresenceOf and Regex validators phalcon/phalcon#157 005 DB: Add <code>POINT</code> column. Issue https://github.com/phalcon/cphalcon/issues/14769 005 Pagination: SQL Instrumental key pagination phalcon/cphalcon#14754 (using LIMIT instead of OFFSET) 005 Forms: beforeBind and afterBind for Form phalcon/cphalcon#14598 005 Config: Review logic of \"Load services from config\" phalcon/phalcon#176 005 ORM: Many-To-Many relation with composite PKs phalcon/cphalcon#13890 005 Storage: Phalcon JSON Flat-File CRUDS Support phalcon/cphalcon#13783 005 Volt: Volt output filters phalcon/phalcon#137 004 PHQL: Registering custom expressions in PHQL Dialects like PostgreSQL @@ Expression phalcon/cphalcon#14954 004 Assets Reintroduce Cssmin/Jsmin phalcon/cphalcon#14903 004 Forms: Forms: Multiple csrf phalcon/cphalcon#13922 004 ORM: ORM: add the ability to return a custom Phalcon\\Mvc\\Model\\Row class instance phalcon/phalcon#159 004 Dispatcher: Can't get module name from cli dispatcher phalcon/phalcon#152 004 Volt: volt strings do not know about escape sequences phalcon/phalcon#150 003 Application Micro: <code>removeExtraSlashes</code> should be <code>false</code> by default  phalcon/cphalcon#14920   003 ORM: New chunk() method for Phalcon ORM phalcon/cphalcon#14005 003 Models: ReusableInterface phalcon/phalcon#155 002 VIEW: Add has method to View https://github.com/phalcon/cphalcon/issues/14815 002 Volt: Volt: Block functions phalcon/cphalcon#14436 002 ORM: When the model uses <code>columns()</code>, it should bind the original model instead of <code>Phalcon\\Mvc\\Model\\Row</code> phalcon/phalcon#167 002 Helper: BCMath wrapper phalcon/cphalcon#14008 002 CLI: Lock for cli component phalcon/cphalcon#14006 002 Volt: Volt PHP 7 strict type support phalcon/cphalcon#13978 002 Application: Make Micro Collection create handler instance with DI phalcon/cphalcon#13967 002 ORM: Cascade update in ORM phalcon/cphalcon#13804 001 Dispatcher: can we add controller filter like cakephp4 phalcon/cphalcon#14902 001 URL: Add a global suffix to URL phalcon/cphalcon#14806 001 Translate: Gettext query domain phalcon/cphalcon#14527 001 General: Classes should not have application defaults phalcon/cphalcon#14412 001 Volt: Volt extends from virable or from absolute path phalcon/phalcon#175 001 Events: When no Event \"data\" is supplied, do not pass the parameter phalcon/cphalcon#13965 001 Volt: Volt cache system phalcon/cphalcon#13926 001 Image: Add Gmagic adapter for Phalcon\\Image phalcon/cphalcon#13884 001 Db: MySQL point field support missing phalcon/cphalcon#13670 001 DI: Make shared instances removable. phalcon/cphalcon#13285 001 DI: \\Phalcon\\Di add alias? phalcon/cphalcon#13042 001 Translate: SetLocale() not support multiple parameters phalcon/cphalcon#12202 001 Translate: Support 'context' in Gettext (msgctxt) phalcon/cphalcon#12201 000 Config: Introduce HJSON format phalcon/cphalcon#15696 000 Model: Add method to Mvc/Model/CriteriaInterface phalcon/cphalcon#14818 000 Model: Add the merge mode for the <code>Model::skipAttributes()</code> phalcon/cphalcon#14934 000 Link to docs in changelog -  https://github.com/phalcon/cphalcon/issues/14642 000 Model: set properties in Phalcon\\Mvc::refresh() phalcon/phalcon#174 000 Validator: add aspect ratios validation for Validator/Files phalcon/phalcon#173 000 HTTP Response: add setStreamToSend for response class phalcon/phalcon#268 000 Validator: validation :field should use translation pattern %field% phalcon/cphalcon#14308 000 Validator: regex for Validator/Files allowedTypes phalcon/phalcon#170 000 ORM: Query Builder duplicating JOIN clause phalcon/cphalcon#14214 000 ORM: suggest adding the alias method to the model phalcon/cphalcon#14185 000 Pagination: Dynamic Loop Counters When Using Pagination phalcon/cphalcon#14046 000 ORM: Map record to target model (Inheritance mapping) phalcon/cphalcon#14007 000 Volt: Remove Single Quotes From Volt Names phalcon/cphalcon#13942 000 Volt: Shorter Volt Filter Names or Optional Shorter Alias Names phalcon/cphalcon#13940 000 Translate: Proposal on adding a LocaleAwareInterface for Translate adapters (and interpolators) phalcon/cphalcon#13905 000 Dispatcher: setDefaultNamespace() Alias setNamespace() phalcon/cphalcon#13814 000 Db: Different types of messages in virtual foreign keys phalcon/cphalcon#13801 000 Session: Need the lock for redis session phalcon/phalcon#161 000 Validation: Why not to use ioc/factory style for validators like filters? phalcon/cphalcon#13567 000 View: View active render path not return to prev path after partial render phalcon/cphalcon#13554 000 Volt Compiler: Allow \\Phalcon\\Mvc\\View\\Engine\\Volt to accept Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler in the constructor phalcon/phalcon#274"},{"location":"new-feature-request/","title":"New Feature Request","text":"<p>List of NFRs</p> <p>A NFR is a short document explaining how a new feature request must be submitted, how it can be implemented, and how it can help core developers and others to understand and implement it.</p> <p>A NFR contains:</p> <ul> <li>Suggested syntax</li> <li>Suggested class names and methods</li> <li>A description detailing the usage</li> <li>How it can benefit the framework and the community</li> <li>If the feature is already implemented in other frameworks, a short explanation of how that was implemented and its advantages</li> </ul> <p>In the following cases a new feature request will be rejected if:</p> <ul> <li>The feature makes the framework slow</li> <li>The feature does not provide any additional value to the framework</li> <li>The NFR is not clear, bad documentation, unclear explanation, etc.</li> <li>The NFR has not been discussed with the Team or voted by the community</li> <li>The NFR does not follow the current guidelines/philosophy of the framework</li> <li>The NFR affects/breaks applications developed in current/older versions of the framework</li> <li>The original poster does not provide feedback/input when requested</li> <li>It's technically impossible to implement</li> <li>It can only be used in the development/testing stages</li> <li>Submitted/proposed classes/components don't follow the Single Responsibility Principle</li> <li>Uses static methods - (not allowed)</li> </ul> <p>To send a NFR you do not need to provide Zephir or C code or develop the feature. New Feature requests explain the goal of the intended implementation and start a discussion on how best to implement it.</p> <p>All NFRs should be posted as a new issue on GitHub. Please make sure to use the prefix <code>[NFR]</code> in the title of your issue.</p>"},{"location":"new-pull-request/","title":"New Pull Request","text":"<p>A pull request for Phalcon must be against our main repository cphalcon. It is a collection of changes to the code that:</p> <ul> <li>fix a bug (current issue)</li> <li>introduce new functionality or enhancement.</li> </ul> <p>Your pull request must include:</p> <ul> <li>Target the correct branch.</li> <li>Update the relevant <code>CHANGELOG.md</code></li> <li>Contain unit tests</li> <li>Updates to the documentation and usage examples as necessary</li> <li>Your code must abide by the coding standards that Phalcon uses. For PHP code we use PSR-2 while for Zephir code, we have an <code>.editorconfig</code> file available at the root of the repository to help you follow the standards.</li> </ul> <p>NOTE</p> <p>We do not accept Pull Requests to the <code>master</code> branch</p> <p>If your pull request relates to fixing an issue/bug, please link the issue number in the pull request body. You can utilize the template we have in GitHub to present this information. If no issue exists, please create one.</p> <p>For new functionality, we will need to have an issue created and referenced. If the functionality you are introducing collides with the philosophy and implementation of Phalcon, the pull request will be rejected. </p> <p>Additionally, any new functionality that introduces breaking changes will not be accepted for the current release but instead will need to be updated to target the next major version. </p> <p>It is highly recommended to discuss your NFR and PR with the core team and most importantly with the community so as to get feedback, guidance and to work on a release plan that will benefit everyone.</p>"},{"location":"new-pull-request/#branch-and-commits","title":"Branch and Commits","text":"<p>The following steps are recommended but not mandatory.</p> <p>If you are working on an issue, note the number of the issue down. Let us assume that the issue is:</p> <p><code>#12345 - Create New Object</code></p> <ul> <li>Checkout the <code>4.0.x</code> branch</li> <li>Create a branch: <code>T12345-create-new-object</code></li> </ul> <p>The name of the branch starts with <code>T</code>, followed by the number of the issue and then the title of the issue as a slug.</p> <p>In your <code>cphalcon</code> folder navigate to <code>.git/hooks</code></p> <p>Create a new file called <code>commit-msg</code> and paste the code below in it and save it:</p> <pre><code>#!/bin/bash\n# This Way You can Customize Which Branches Should be Skipped When\n# Prepending Commit Message.\nif [ -z \"$BRANCHES_TO_SKIP\" ]; then\n  BRANCHES_TO_SKIP=(master develop)\nfi\nBRANCH_NAME=$(git symbolic-ref --short HEAD)\nBRANCH_NAME=\"${BRANCH_NAME##*/}\"\nBRANCH_EXCLUDED=$(printf \"%s\\n\" \"${BRANCHES_TO_SKIP[@]}\" | grep -c \"^$BRANCH_NAME$\")\nBRANCH_IN_COMMIT=$(grep -c \"\\[$BRANCH_NAME\\]\" $1)\nif [ -n \"$BRANCH_NAME\" ] &amp;&amp; ! [[ $BRANCH_EXCLUDED -eq 1 ]] &amp;&amp; ! [[ $BRANCH_IN_COMMIT -ge 1 ]]; then\n  ISSUE=\"$(echo $BRANCH_NAME | cut -d'-' -f 1)\"\n  ISSUE=\"${ISSUE/T/#}\"\n  sed -i.bak -e \"1s/^/[$ISSUE] - /\" $1\nfi\n</code></pre> <p>Ensure that the file is executable</p> <pre><code>chmod a+x commit-msg\n</code></pre> <p>Any commits you add now to your branch will appear tied to the <code>12345</code> issue.</p> <p>Doing the above allows everyone to see which commits relate to which issue.</p>"},{"location":"pagination/","title":"Pagination","text":""},{"location":"pagination/#overview","title":"Overview","text":"<p>A paginator is a component which helps with splitting a large amount of data gradually. An example would be displaying all the posts of a blog, 5 at a time. The Phalcon Paginator accepts parameters and based on those returns the relevant slice of the whole resultset so that the developer can present the paginated data. </p> <p>```php &lt;?php </p> <p>use Phalcon\\Paginator\\Adapter\\NativeArray;</p> <p>$currentPage = 2; $paginator   = new NativeArray(     [         \"data\"  =&gt; [             [\"id\" =&gt; 1, \"name\" =&gt; \"Artichoke\"],             [\"id\" =&gt; 2, \"name\" =&gt; \"Carrots\"],             [\"id\" =&gt; 3, \"name\" =&gt; \"Beet\"],             [\"id\" =&gt; 4, \"name\" =&gt; \"Lettuce\"],             [\"id\" =&gt; 5, \"name\" =&gt; \"\"],         ],         \"limit\" =&gt; 2,         \"page\"  =&gt; $currentPage,     ]  );</p> <p>$paginate = $paginator-&gt;paginate();  ```</p> <p>The example above uses an array as the source, and limits the results to 2 records at a time. It will return elements with id <code>3</code> and <code>4</code> because the <code>page</code> has been set to <code>2</code>. </p>"},{"location":"pagination/#adapters","title":"Adapters","text":"<p>For the source of the data, the component uses adapters. It comes with the following adapters: </p> Adapter Description Phalcon\\Paginator\\Adapter\\Model Use a Phalcon\\Mvc\\Model\\Resultset object as source data. Phalcon\\Paginator\\Adapter\\NativeArray Use a PHP array as source data Phalcon\\Paginator\\Adapter\\QueryBuilder Use a Phalcon\\Mvc\\Model\\Query\\Builder object as source data <p>NOTE</p> <p>Since PDO does not support scrollable cursors, Phalcon\\Paginator\\Adapter\\Model should not be used to paginate a large number of records</p>"},{"location":"pagination/#methods","title":"Methods","text":"<pre><code>public function __construct(array $config)\n</code></pre> <p>Every adapter requires options to operate properly. These options are passed as a key/value array in the constructor of the adapter.</p> <ul> <li><code>builder</code> - Used only for the Phalcon\\Paginator\\Adapter\\QueryBuilder to pass the builder object</li> <li><code>data</code> - The data to paginate. (Phalcon\\Paginator\\Adapter\\NativeArray adapter)</li> <li><code>limit</code> - <code>int</code> - The size of the page slice. If <code>limit</code> is negative, an exception will be thrown.</li> <li><code>model</code> - The data to paginate. (Phalcon\\Paginator\\Adapter\\Model adapter)</li> <li><code>page</code> - <code>int</code> - The current page </li> <li><code>repository</code> - Phalcon\\Paginator\\RepositoryInterface - A repository object setting up the resultset. For more about repositories see below. </li> </ul> <p>The methods exposed are:</p> <ul> <li><code>getLimit()</code> - <code>int</code> - Get current rows limit</li> <li><code>getRepository(array $properties = null)</code> - <code>RepositoryInterface</code> - Gets current repository for pagination</li> <li><code>setCurrentPage(int $page)</code> - <code>AdapterInterface</code> - Set the current page number</li> <li><code>setLimit(int $limitRows)</code> - <code>AdapterInterface</code> - Set current rows limit</li> <li><code>setRepository(RepositoryInterface $repository)</code> - <code>AdapterInterface</code> - Sets current repository for pagination</li> </ul>"},{"location":"pagination/#model","title":"Model","text":"<p>The Phalcon\\Paginator\\Adapter\\Model adapter uses a Phalcon\\Mvc\\Model\\Resultset as the source of the data. This is the result of the <code>find()</code> method on a model.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Paginator\\Adapter\\Model;\n\n$currentPage = 2;\n$paginator   = new Model(\n    [\n        \"model\"      =&gt; Invoices::class,\n        \"parameters\" =&gt; [\n            \"inv_cst_id = :cst_id:\",\n              \"bind\" =&gt; [\n                  \"cst_id\" =&gt; 1\n              ],\n              \"order\" =&gt; \"inv_title\"\n        ],\n        \"limit\"      =&gt; 25,\n        \"page\"       =&gt; $currentPage,\n    ]\n);\n\n$paginate = $paginator-&gt;paginate();\n</code></pre> <p>The array accepts <code>model</code> for the model class to be used. The method <code>find()</code> will be called on it. Additionally this adapter can accept <code>parameters</code> as the array that <code>find()</code> can use with all the relevant conditionals required.</p>"},{"location":"pagination/#array","title":"Array","text":"<p>The Phalcon\\Paginator\\Adapter\\NativeArray accepts a PHP array as the source of the data.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Paginator\\Adapter\\NativeArray;\n\n$currentPage = 2;\n$paginator   = new NativeArray(\n    [\n        \"data\"  =&gt; [\n            [\"id\" =&gt; 1, \"name\" =&gt; \"Artichoke\"],\n            [\"id\" =&gt; 2, \"name\" =&gt; \"Carrots\"],\n            [\"id\" =&gt; 3, \"name\" =&gt; \"Beet\"],\n            [\"id\" =&gt; 4, \"name\" =&gt; \"Lettuce\"],\n            [\"id\" =&gt; 5, \"name\" =&gt; \"\"],\n        ],\n        \"limit\" =&gt; 2,\n        \"page\"  =&gt; $currentPage,\n    ]\n);\n\n$paginate = $paginator-&gt;paginate();\n</code></pre>"},{"location":"pagination/#query-builder","title":"Query Builder","text":"<p>The Phalcon\\Paginator\\Adapter\\QueryBuilder adapter uses a Phalcon\\Mvc\\Model\\Query\\Builder object to perform a PHQL query against the database. </p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Paginator\\Adapter\\QueryBuilder;\n\n$builder = $this\n    -&gt;modelsManager\n    -&gt;createBuilder()\n    -&gt;columns(\"inv_id, inv_title\")\n    -&gt;from(Invoices::class)\n    -&gt;orderBy(\"inv_title\");\n\n$paginator = new QueryBuilder(\n    [\n        \"builder\" =&gt; $builder,\n        \"limit\"   =&gt; 20,\n        \"page\"    =&gt; 1,\n    ]\n);\n\n$paginate = $paginator-&gt;paginate();\n</code></pre>"},{"location":"pagination/#repository","title":"Repository","text":"<p>The <code>paginate()</code> method does all the work to paginate the data. It returns a Phalcon\\Paginator\\Repository object which stores all the necessary elements for the pagination. The object exposes the following constants:</p> <ul> <li><code>PROPERTY_CURRENT_PAGE</code>  = \"current\";</li> <li><code>PROPERTY_FIRST_PAGE</code>    = \"first\";</li> <li><code>PROPERTY_ITEMS</code>         = \"items\";</li> <li><code>PROPERTY_LAST_PAGE</code>     = \"last\";</li> <li><code>PROPERTY_LIMIT</code>         = \"limit\";</li> <li><code>PROPERTY_NEXT_PAGE</code>     = \"next\";</li> <li><code>PROPERTY_PREVIOUS_PAGE</code> = \"previous\";</li> <li><code>PROPERTY_TOTAL_ITEMS</code>   = \"total_items\";</li> </ul>"},{"location":"pagination/#methods_1","title":"Methods","text":"<p>The methods exposed are:</p> <ul> <li><code>getAliases()</code> - <code>array</code> - Gets the aliases for properties repository</li> <li><code>getCurrent()</code> - <code>int</code> - Gets number of the current page</li> <li><code>getFirst()</code> - <code>int</code> - Gets number of the first page</li> <li><code>getItems()</code> - <code>mixed</code> - Gets the items on the current page</li> <li><code>getLast()</code> - <code>int</code> - Gets number of the last page</li> <li><code>getLimit()</code> - <code>int</code> - Gets current rows limit</li> <li><code>getNext()</code> - <code>int</code> - Gets number of the next page</li> <li><code>getPrevious()</code> - <code>int</code> - Gets number of the previous page</li> <li><code>getTotalItems()</code> - <code>int</code> - Gets the total number of items</li> <li><code>setAliases(array $aliases)</code> - <code>RepositoryInterface</code> - Sets the aliases for properties repository</li> <li><code>setProperties(array $properties)</code> - <code>RepositoryInterface</code> - Sets values for properties of the repository</li> </ul> <p>You can access the data by using the methods above or use the magic properties as defined in the constants:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Paginator\\Adapter\\NativeArray;\n\n$currentPage = 2;\n$paginator   = new NativeArray(\n    [\n        \"data\"  =&gt; [\n            [\"id\" =&gt; 1, \"name\" =&gt; \"Artichoke\"],\n            [\"id\" =&gt; 2, \"name\" =&gt; \"Carrots\"],\n            [\"id\" =&gt; 3, \"name\" =&gt; \"Beet\"],\n            [\"id\" =&gt; 4, \"name\" =&gt; \"Lettuce\"],\n            [\"id\" =&gt; 5, \"name\" =&gt; \"\"],\n        ],\n        \"limit\" =&gt; 2,\n        \"page\"  =&gt; $currentPage,\n    ]\n);\n\n$paginate = $paginator-&gt;paginate();\n\necho $paginate-&gt;getCurrent();    // 2\necho $paginate-&gt;current     ;    // 2\necho $paginate-&gt;getFirst();      // 1\necho $paginate-&gt;first;           // 1\nvar_dump($paginate-&gt;getItems());  \n// [\n//     [\n//         'id'   =&gt; 3\n//         'name' =&gt; \"Beet\",\n//     ],\n//     [\n//         'id'   =&gt; 4,\n//         'name' =&gt; \"Lettuce\",\n//     ]\n// ]\nvar_dump($paginate-&gt;getItems());  \necho $paginate-&gt;getLast();       // 3\necho $paginate-&gt;last;            // 3\necho $paginate-&gt;getLimit();      // 2\necho $paginate-&gt;limit;           // 2\necho $paginate-&gt;getNext();       // 3\necho $paginate-&gt;next;            // 3\necho $paginate-&gt;getPrevious();   // 1\necho $paginate-&gt;previous;        // 1\necho $paginate-&gt;getTotalItems(); // 5 \necho $paginate-&gt;total_items;     // 5 \n</code></pre>"},{"location":"pagination/#aliases","title":"Aliases","text":"<p>If you want to use your own names for each magic property the Repository object exposes, you can use the <code>setAliases()</code> method to do so.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Paginator\\Repository;\nuse Phalcon\\Paginator\\Adapter\\NativeArray;\n\n$repository = = new Repository();\n$repository-&gt;setAliases(\n    [\n        'myCurrentPage' =&gt; $repository::PROPERTY_CURRENT_PAGE,\n        'myFirstPage'   =&gt; $repository::PROPERTY_FIRST_PAGE,\n        'myLastPage'    =&gt; $repository::PROPERTY_LAST_PAGE,\n        'myLimit'       =&gt; $repository::PROPERTY_LIMIT,\n        'myNextPage'    =&gt; $repository::PROPERTY_NEXT_PAGE,\n        'myTotalItems'  =&gt; $repository::PROPERTY_TOTAL_ITEMS,\n    ]\n);\n\n$currentPage = 2;\n$paginator   = new NativeArray(\n    [\n        \"data\"       =&gt; [\n            [\"id\" =&gt; 1, \"name\" =&gt; \"Artichoke\"],\n            [\"id\" =&gt; 2, \"name\" =&gt; \"Carrots\"],\n            [\"id\" =&gt; 3, \"name\" =&gt; \"Beet\"],\n            [\"id\" =&gt; 4, \"name\" =&gt; \"Lettuce\"],\n            [\"id\" =&gt; 5, \"name\" =&gt; \"\"],\n        ],\n        \"limit\"      =&gt; 2,\n        \"page\"       =&gt; $currentPage,\n        'repository' =&gt; $repository,\n    ]\n);\n\n$paginate = $paginator-&gt;paginate();\n\necho $paginate-&gt;myCurrentPage;   // 2\necho $paginate-&gt;myFirstPage;     // 1\necho $paginate-&gt;myLastPage;      // 3\necho $paginate-&gt;myLimit;         // 2\necho $paginate-&gt;myNextPage;      // 3\necho $paginate-&gt;myTotalItems;    // 1\n</code></pre> <p>You can also create your custom repository class by implementing the Phalcon\\Paginator\\RepositoryInterface interface.</p>"},{"location":"pagination/#factory","title":"Factory","text":"<p>You can use the Pagination Factory class to instantiate a new paginator object. The names of the services are:</p> <ul> <li><code>model</code> - Phalcon\\Paginator\\Adapter\\Model</li> <li><code>nativeArray</code> - Phalcon\\Paginator\\Adapter\\NativeArray</li> <li><code>queryBuilder</code> - Phalcon\\Paginator\\Adapter\\QueryBuilder</li> </ul>"},{"location":"pagination/#new-instance","title":"New Instance","text":"<p>One method that you can use is <code>newInstance()</code>:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Paginator\\PaginatorFactory;\n\n$builder = $this\n    -&gt;modelsManager\n    -&gt;createBuilder()\n    -&gt;columns('inv_id, inv_title')\n    -&gt;from(Invoices::class)\n    -&gt;orderBy('name')\n;\n\n$options = [\n    'builder' =&gt; $builder,\n    'limit'   =&gt; 20,\n    'page'    =&gt; 1,\n];\n\n$factory   = new PaginatorFactory();\n$paginator = $factory-&gt;newInstance('queryBuilder');\n</code></pre>"},{"location":"pagination/#load","title":"Load","text":"<p>Loads Paginator Adapter class using <code>adapter</code> option. The configuration passed can be an array or a Phalcon\\Config object with the necessary entries for the class to be instantiated.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Paginator\\PaginatorFactory;\n\n$builder = $this\n    -&gt;modelsManager\n    -&gt;createBuilder()\n    -&gt;columns('inv_id, inv_title')\n    -&gt;from(Invoices::class)\n    -&gt;orderBy('inv_title')\n;\n\n$options = [\n    'builder' =&gt; $builder,\n    'limit'   =&gt; 20,\n    'page'    =&gt; 1,\n    'adapter' =&gt; 'queryBuilder',\n];\n\n$paginator = (new PaginatorFactory())-&gt;load($options);\n</code></pre> <p>A sample configuration object is:</p> <pre><code>[paginator]\nadapter = queryBuilder\noptions.limit = 20\noptions.page = 1\n</code></pre> <p>The configuration expects an element <code>adapter</code> for the relevant adapter and an <code>options</code> array with the necessary options for the adapter.</p>"},{"location":"pagination/#exception","title":"Exception","text":"<p>Any exceptions thrown in the Paginator component will be of type Phalcon\\Paginator\\Exception. You can use this exception to selectively catch exceptions thrown only from this component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Paginator\\Adapter\\NativeArray;\nuse Phalcon\\Paginator\\Exception;\n\ntry {\n    $currentPage = 2;\n    $paginator   = new NativeArray(\n        [\n            \"data\"  =&gt; [\n                [\"id\" =&gt; 1, \"name\" =&gt; \"Artichoke\"],\n                [\"id\" =&gt; 2, \"name\" =&gt; \"Carrots\"],\n                [\"id\" =&gt; 3, \"name\" =&gt; \"Beet\"],\n                [\"id\" =&gt; 4, \"name\" =&gt; \"Lettuce\"],\n                [\"id\" =&gt; 5, \"name\" =&gt; \"\"],\n            ],\n            \"limit\" =&gt; -5,\n            \"page\"  =&gt; $currentPage,\n        ]\n    );\n\n    $paginate = $paginator-&gt;paginate();\n} catch (Exception $ex) {\n    echo $ex-&gt;getMessage();\n}\n</code></pre>"},{"location":"pagination/#examples","title":"Examples","text":"<p>In the example below, the paginator will use the result of a query from a model as its source data, and limit the displayed data to 10 records per page:</p>"},{"location":"pagination/#full","title":"Full","text":"<pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Paginator\\Adapter\\Model as PaginatorModel;\n\n/**\n * @property Request $request\n * @property View    $view\n */\nclass InvoicesController extends Controller\n{\n    public function listAction()\n    {\n        $currentPage = $this-&gt;request-&gt;getQuery('page', 'int', 1);\n        $paginator   = new PaginatorModel(\n            [\n                'model'  =&gt; Invoices::class,\n                'limit' =&gt; 10,\n                'page'  =&gt; $currentPage,\n            ]\n        );\n\n        $page = $paginator-&gt;paginate();\n\n        $this-&gt;view-&gt;setVar('page', $page);\n\n    }\n}\n</code></pre> <p>In the example above <code>$currentPage</code> contains an integer, user supplied variable, for the page to be displayed. The <code>$paginator-&gt;paginate()</code> returns a Phalcon\\Paginator\\Repository object that contains the paginated data. It can be used for generating the pagination in a view for instance:</p> <pre><code>&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;Id&lt;/th&gt;\n        &lt;th&gt;Status&lt;/th&gt;\n        &lt;th&gt;Title&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;?php foreach ($page-&gt;getItems() as $item) { ?&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;?php echo $item['inv_id']; ?&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;?php echo ($item['inv_status_flag']) ? 'Paid' : ''; ?&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;?php echo $item['inv_title']; ?&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;?php } ?&gt;\n&lt;/table&gt;\n</code></pre> <p>The <code>$page</code> object also contains navigation data:</p> <pre><code>&lt;a href=\"/invoices/list\"&gt;First&lt;/a&gt;\n&lt;a href=\"/invoices/list?page=&lt;?= $page-&gt;getPrevious(); ?&gt;\"&gt;Previous&lt;/a&gt;\n&lt;a href=\"/invoices/list?page=&lt;?= $page-&gt;getNext(); ?&gt;\"&gt;Next&lt;/a&gt;\n&lt;a href=\"/invoices/list?page=&lt;?= $page-&gt;getLast(); ?&gt;\"&gt;Last&lt;/a&gt;\n\n&lt;?php echo \"Page {$page-&gt;getCurrent()}  of {$page-&gt;getLast()}\"; ?&gt;\n</code></pre>"},{"location":"pagination/#factory_1","title":"Factory","text":"<p>You can instantiate a Paginator class using the <code>AdapterFactory</code>.</p> <p>Model <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Paginator\\PaginatorFactory;\n\n$factory = new PaginatorFactory();\n\n$currentPage = 2;\n$options     = [\n   'model'  =&gt; Invoices::class,\n   'limit' =&gt; 10,\n   'page'  =&gt; $currentPage,\n];\n\n$paginator = $factory-&gt;newInstance('model', $options);\n</code></pre></p> <p>Array <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Paginator\\PaginatorFactory;\n\n$factory = new PaginatorFactory();\n\n$currentPage = 2;\n$options     = [\n    'data'  =&gt; [\n        ['id' =&gt; 1, 'name' =&gt; 'Artichoke'],\n        ['id' =&gt; 2, 'name' =&gt; 'Carrots'],\n        ['id' =&gt; 3, 'name' =&gt; 'Beet'],\n        ['id' =&gt; 4, 'name' =&gt; 'Lettuce'],\n        ['id' =&gt; 5, 'name' =&gt; ''],\n    ],\n    'limit' =&gt; 2,\n    'page'  =&gt; $currentPage,\n];\n\n$paginator = $factory-&gt;newInstance('nativeArray', $options);\n</code></pre></p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Paginator\\PaginatorFactory;\n\n$factory = new PaginatorFactory();\n\n$currentPage = 2;\n$builder     = $this\n    -&gt;modelsManager\n    -&gt;createBuilder()\n    -&gt;columns('id, name')\n    -&gt;from('Robots')\n    -&gt;orderBy('name');\n$options = [\n    'builder' =&gt; $builder,\n    'limit'   =&gt; 20,\n    'page'    =&gt; $currentPage,\n];\n\n$paginator = $factory-&gt;newInstance('queryBuilder', $options);\n</code></pre>"},{"location":"pagination/#individual-classes","title":"Individual Classes","text":"<p>An example of the source data that must be used for each adapter:</p> <p>Model <pre><code>&lt;?php\n\nuse Phalcon\\Paginator\\Adapter\\Model as PaginatorModel;\n\n$currentPage = 2;\n$paginator   = new PaginatorModel(\n    [\n       'model'  =&gt; Invoices::class,\n       'limit' =&gt; 10,\n       'page'  =&gt; $currentPage,\n    ]\n);\n</code></pre></p> <p>Array <pre><code>&lt;?php\n\nuse Phalcon\\Paginator\\Adapter\\NativeArray as PaginatorArray;\n\n$currentPage = 2;\n$paginator   = new PaginatorArray(\n    [\n        'data'  =&gt; [\n            ['id' =&gt; 1, 'name' =&gt; 'Artichoke'],\n            ['id' =&gt; 2, 'name' =&gt; 'Carrots'],\n            ['id' =&gt; 3, 'name' =&gt; 'Beet'],\n            ['id' =&gt; 4, 'name' =&gt; 'Lettuce'],\n            ['id' =&gt; 5, 'name' =&gt; ''],\n        ],\n        'limit' =&gt; 2,\n        'page'  =&gt; $currentPage,\n    ]\n);\n</code></pre></p> <p>Query Builder <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Paginator\\Adapter\\QueryBuilder as PaginatorQueryBuilder;\n\n$currentPage = 2;\n$builder     = $this\n    -&gt;modelsManager\n    -&gt;createBuilder()\n    -&gt;columns('id, name')\n    -&gt;from('Robots')\n    -&gt;orderBy('name');\n\n$paginator = new PaginatorQueryBuilder(\n    [\n        'builder' =&gt; $builder,\n        'limit'   =&gt; 20,\n        'page'    =&gt; $currentPage,\n    ]\n);\n</code></pre></p>"},{"location":"pagination/#custom","title":"Custom","text":"<p>The Phalcon\\Paginator\\AdapterInterface interface must be implemented in order to create your own paginator adapters or extend the existing ones:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Paginator\\AdapterInterface as PaginatorInterface;\nuse Phalcon\\Paginator\\RepositoryInterface;\n\nclass MyPaginator implements PaginatorInterface\n{\n    /**\n     * Get current rows limit\n     */\n    public function getLimit(): int;\n\n    /**\n     * Returns a slice of the resultset to show in the pagination\n     */\n    public function paginate(): RepositoryInterface;\n\n    /**\n     * Set the current page number\n     */\n    public function setCurrentPage(int $page);\n\n    /**\n     * Set current rows limit\n     */\n    public function setLimit(int $limit);\n}\n</code></pre>"},{"location":"performance/","title":"Performance","text":""},{"location":"performance/#overview","title":"Overview","text":"<p>A poorly written application will always have poor performance. A very common way for developers to increase the performance of their application is:</p> <p>Solution?</p> <p>just throw more hardware to it</p> <p>The problem with the above approach is two fold. For starters, in most cases the owner is the one that will incur the additional costs. The second issue is that there comes a time that one can no longer upgrade the hardware and will have to resort to load balancers, docker swarms etc. which will skyrocket costs.</p> <p>The problem will remain: the poorly written application</p> <p>In order to speed up your application, you first need to ensure that your application is written with the best way possible that fulfills its requirements. Nothing beats a good design. After that, there are many aspects to consider: - server hardware - clients connecting (location, browsers) - network latency - database hardware</p> <p>and many more. In this article we will try to highlight some scenarios that could provide more insight as to where your application is really slow.</p> <p>NOTE</p> <p>These are recommendations and good practices. You are by no means obligated to follow the advice on this document, and by no means is this list exhaustive. Your performance enhancing strategies rely primarily on the needs of your application.</p>"},{"location":"performance/#server","title":"Server","text":"<p>Profiling is a form of dynamic application analysis that offers metrics regarding your application. Profiling offers the real picture on what is really going on at any given time in your application, and thus guide you to areas where you application needs attention. Profiling should be continuous in a production application.</p> <p>It does have an overhead so that has to be taken into account. The most verbose profiling happens on every request but it will all depend on your traffic. We certainly do not want to increase the load on the server just because we are profiling the application. A common way of profiling is one request per 100 or one per 1,000. After a while you will have enough data to draw conclusions as to where slowdowns occur, why peaks occurred etc.</p>"},{"location":"performance/#xdebug","title":"XDebug","text":"<p>XDebug offers a very handy profiler right out of the box. All you have to do is install the extension and enable profiling in your <code>php.ini</code>:</p> <pre><code>xdebug.profiler_enable = On\n</code></pre> <p>Using a tool such as Webgrind will allow you to connect to XDebug and get very valuable information as to what is going on with your code. Webgrind offers statistics on which methods are slower than others and other statistics.</p>"},{"location":"performance/#xhprof","title":"Xhprof","text":"<p>Xhprof is another extension to profile PHP applications. To enable it, all you need is to add the following line to the start of the bootstrap file:</p> <pre><code>&lt;?php\n\nxhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY);\n</code></pre> <p>Then at the end of the file save the profiled data:</p> <pre><code>&lt;?php\n\n$xhprof_data = xhprof_disable('/tmp');\n\n$XHPROF_ROOT = '/var/www/xhprof/';\ninclude_once $XHPROF_ROOT . '/xhprof_lib/utils/xhprof_lib.php';\ninclude_once $XHPROF_ROOT . '/xhprof_lib/utils/xhprof_runs.php';\n\n$xhprof_runs = new XHProfRuns_Default();\n$run_id = $xhprof_runs-&gt;save_run($xhprof_data, 'xhprof_testing');\n\necho \"https://localhost/xhprof/xhprof_html/index.php?run={$run_id}&amp;source=xhprof_testing\\n\";\n</code></pre> <p>Xhprof provides a built-in HTML viewer to analyze the profiled data:</p> <p></p> <p></p> <p>As mentioned above, profiling can increase the load on your server. In the case of Xhprof, you can introduce a conditional that would start profiling only after X requests.</p>"},{"location":"performance/#sql-statements","title":"SQL Statements","text":"<p>Almost all RDBMs offer tools to identify slow SQL statements. Identifying and fixing slow queries is very important in terms of performance on the server side. MariaDB / MySql / AuroraDb offer configuration settings that enable a <code>slow-query</code> log. The database then keeps its own metrics and whenever a query takes long to complete it will be logged in the <code>slow-query</code> log. The log can then be analyzed by the development team and adjustments can be made.</p> <p>To enable this feature you will need to add this to <code>my.cnf</code> (don't forget to restart your database server)</p> <pre><code>log-slow-queries = /var/log/slow-queries.log\nlong_query_time = 1.5\n</code></pre>"},{"location":"performance/#client","title":"Client","text":"<p>Another area to focus on is the client. Improving the loading of assets such as images, stylesheets, javascript files can significantly improve performance and enhance user experience. There are a number of tools that can help with identifying bottlenecks on the client:</p>"},{"location":"performance/#browsers","title":"Browsers","text":"<p>Most modern browsers have tools to profile a page's loading time. Those are easily called web inspectors or developer tools. For instance when using Brave or any Chromium based browser you can inspect the page and the developer tools will show a waterfall of what has loaded for the current page (files), how much time it took and the total loading time:</p> <p></p> <p>A relatively easy fix for increasing client performance is to set the correct headers for assets so that they expire in the future vs. being loaded from the server on every request. Additionally, CDN providers can help with distributing assets from their distribution centers that are closest to the client originating the request.</p>"},{"location":"performance/#yahoo-yslow","title":"Yahoo! YSlow","text":"<p>YSlow analyzes web pages and suggests ways to improve their performance based on a set of rules for high performance web pages</p> <p></p>"},{"location":"performance/#php","title":"PHP","text":"<p>PHP is becoming faster with every new version. Using the latest version improves the performance of your applications and also of Phalcon.</p>"},{"location":"performance/#bytecode-cache","title":"Bytecode Cache","text":"<p>OPcache as many other bytecode caches helps applications reduce the overhead of read, tokenize and parse PHP files in each request. The interpreted results are kept in RAM between requests as long as PHP runs as fcgi (fpm) or mod_php. OPcache is bundled with php starting 5.5.0. To check if it is activated, look for the following entry in php.ini:</p> <p><pre><code>opcache.enable = On\nopcache.memory_consumption = 128    ;default\n</code></pre> Furthermore, the amount of memory available for opcode caching needs to be enough to hold all files of your applications. The default of 128MB is usually enough for even larger codebases.</p>"},{"location":"performance/#serverside-cache","title":"Serverside cache","text":"<p>APCu can be used to cache the results of computational expensive operations or otherwise slow data sources like webservices with high latency. What makes a result cacheable is another topic, as a rule of thumb: the operations needs to be executed often and yield identical results. Make sure to measure through profiling that the optimizations actually improved execution time.</p> <pre><code>apc.enabled = On\napc.shm_size = 32M  ;default\n</code></pre> <p>As with the aforementioned opcache, make sure, the amount of RAM available suits your application. Alternatives to APCu would be Redis or Memcached - although they need extra processes running on your server or another machine.</p>"},{"location":"performance/#slow-tasks","title":"Slow Tasks","text":"<p>Based on the requirements of your application, there maybe times that you will need to perform long running tasks. Examples of such tasks could be processing a video, optimizing images, sending emails, generating PDF documents etc. These tasks should be processed using background jobs. The usual process is: - The application initiates a task by sending a message to a queue service - The user sees a message that the task has been scheduled - In the background (or different server), worker scripts peek at the queue - When a message arrives, the worker script detects the type of message and calls the relevant task script - Once the task finishes, the user is notified that their data is ready.</p> <p>The above is a simplistic view of how a queue service for background processing works, but can offer ideas on how background tasks can be executed. There are also a variety of queue services available that you can leverage using the relevant PHP libraries:</p> <ul> <li>NATS</li> <li>RabbitMQ</li> <li>Redis</li> <li>Resque</li> <li>SQS</li> <li>ZeroMQ</li> </ul>"},{"location":"performance/#page-speed","title":"Page Speed","text":"<p>mod_pagespeed speeds up your site and reduces page load time. This open-source Apache HTTP server module (also available for nginx) automatically applies web performance best practices to pages, and associated assets (CSS, JavaScript, images) without requiring you to modify your existing content or workflow.</p>"},{"location":"queue/","title":"Queueing","text":"<p>NOTE</p> <p>The Queue component has been removed from v4 because of lack of activity for Beanstalkd. In future versions of v4 we will introduce a separate package that uses queue-interop to ensure maximum reusability and extensibility for your queues.</p>"},{"location":"registry/","title":"Registry Component","text":""},{"location":"registry/#overview","title":"Overview","text":"<p>Phalcon\\Registry is an object oriented array. It extends Phalcon\\Collection but cannot be extended itself since all of its methods are declared <code>final</code>. It offers speed, as well as implementations of various PHP interfaces. These are:</p> <ul> <li>ArrayAccess</li> <li>Countable</li> <li>IteratorAggregate</li> <li>JsonSerializable</li> <li>Serializable</li> </ul> <pre><code>&lt;?php\n\nuse Phalcon\\Registry;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Registry($data);\n</code></pre>"},{"location":"registry/#constructor","title":"Constructor","text":"<p>You can construct the object as any other object in PHP. However, the constructor accepts an optional <code>array</code> parameter, which will populate the object for you.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Registry;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Registry($data);\n</code></pre>"},{"location":"registry/#reusing","title":"Reusing","text":"<p>You can also reuse the component, by repopulating it. Phalcon\\Registry exposes the <code>clear()</code> and <code>init()</code> methods, which will clear and repopulate the internal array respectively, </p> <pre><code>&lt;?php\n\nuse Phalcon\\Registry;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Registry($data);\n\necho $collection-&gt;count(); // 2\n\n$data = [\n    'year' =&gt; 1776,\n];\n\n$collection-&gt;clear();\n\n$collection-&gt;init($data);\n\necho $collection-&gt;count(); // 1\n</code></pre>"},{"location":"registry/#get","title":"Get","text":"<p>As mentioned above, Phalcon\\Registry implements several interfaces, in order to make the component as flexible as possible. Retrieving data stored in an element can be done by using: - Property - <code>__get()</code> - array based get (<code>$collection[$element]</code>) - <code>offsetGet()</code> - <code>get()</code></p> <p>The fastest way is by using the property syntax:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Registry;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Registry($data);\n\necho $collection-&gt;year; // 1776\n</code></pre> <p>You can use <code>__get($element)</code> but it is not advisable as it is much slower than the property syntax. The same applies to <code>offsetGet</code></p> <pre><code>echo $collection-&gt;__get('year');           // 1776\necho $collection['year'];                  // 1776\necho $collection-&gt;offsetGet('year');       // 1776\necho $collection-&gt;get('year', 1776, true); // 1776\n</code></pre> <pre><code>public function get(\n    string $element, \n    mixed $defaultValue = null, \n    string $cast = null\n):  mixed\n</code></pre> <p>Using <code>get()</code> offers three extra parameters. When <code>$defaultValue</code> is defined in the call and the element is not found, <code>$defaultValue</code> will be returned. The <code>cast</code> parameter accepts a string that defines what the returned value will be casted. The available values are:</p> <ul> <li><code>array</code></li> <li><code>bool</code></li> <li><code>boolean</code></li> <li><code>double</code></li> <li><code>float</code></li> <li><code>int</code></li> <li><code>integer</code></li> <li><code>null</code></li> <li><code>object</code></li> <li><code>string</code></li> </ul>"},{"location":"registry/#has","title":"Has","text":"<p>To check whether an element exists or not in the collection, you can use the following: - <code>isset()</code> on the property - <code>__isset()</code> - array based isset (<code>isset($collection[$element])</code>) - <code>offsetExists()</code> - <code>has()</code></p> <p>The fastest way is by using the property syntax:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Registry;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Registry($data);\n\necho isset($collection-&gt;year); // true\n</code></pre> <p>You can use <code>__isset(element)</code> but it is not advisable as it is much slower than the property syntax. The same applies to <code>offsetExists</code></p> <pre><code>echo $collection-&gt;__isset('year');        // true\necho isset($collection['year']);          // true\necho $collection-&gt;offsetExists('year');   // true\necho $collection-&gt;has('year', true);      // true\n</code></pre> <pre><code>public function has(string $element):  bool\n</code></pre>"},{"location":"registry/#set","title":"Set","text":"<p>To set an element in the collection, you can use the following: - assign the value to the property - <code>__set()</code> - array based assignment  - <code>offsetSet()</code> - <code>set()</code></p> <p>The fastest way is by using the property syntax:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Registry;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n];\n\n$collection = new Registry($data);\n\n$collection-&gt;year = 1776;\n</code></pre> <p>You can use <code>__set($element, $value)</code> but it is not advisable as it is much slower than the property syntax. The same applies to <code>offsetSet</code></p> <pre><code>$collection-&gt;__set('year', 1776);\n$collection['year'] = 1776;\n$collection-&gt;offsetSet('year', 1776);\n$collection-&gt;set('year', 1776); \n</code></pre>"},{"location":"registry/#remove","title":"Remove","text":"<p>To remove an element in the collection, you can use the following: - unset the property - <code>__unset()</code> - array based unset  - <code>offsetUnset()</code> - <code>remove()</code></p> <p>The fastest way is by using the property syntax:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Registry;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n];\n\n$collection = new Registry($data);\n\nunset($collection-&gt;year);\n</code></pre> <p>You can use <code>__unset($element)</code> but it is not advisable as it is much slower than the property syntax. The same applies to <code>offsetUnset</code></p> <pre><code>$collection-&gt;__unset('year');\nunset($collection['year']);\n$collection-&gt;offsetUnset('year');\n$collection-&gt;remove('year'); \n</code></pre> <pre><code>public function remove(string $element):  void\n</code></pre>"},{"location":"registry/#iteration","title":"Iteration","text":"<p>Since the collection object implements <code>\\IteratorAggregate</code>, you can iterate through the object with ease. The method <code>getIterator()</code> returns an <code>ArrayIterator()</code> object</p> <pre><code>&lt;?php\n\nuse Phalcon\\Registry;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Registry($data);\n\nforeach ($collection as $key =&gt; $value) {\n    echo $key . ' - ' . $value . PHP_EOL;\n}\n</code></pre>"},{"location":"registry/#count","title":"Count","text":"<p>The implementation of the <code>\\Countable</code> interface exposes the <code>count()</code> method, which stores the number of elements in the collection.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Registry;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Registry($data);\n\necho $collection-&gt;count(); // 2\n</code></pre>"},{"location":"registry/#serialization","title":"Serialization","text":"<p>The <code>\\Serializable</code> and <code>\\JsonSerializable</code> interfaces expose methods that allow you to serialize and unserialize the object. <code>serialize()</code> and <code>unserialize()</code> use PHP's <code>serialize</code> and <code>unserialize</code> functions. <code>jsonSerialize()</code> returns an array which can be used with <code>json_encode</code> to serialize the object.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Registry;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Registry($data);\n\necho $collection-&gt;serialize();    // a:2:{s:6:\"colors\";a:3:{i:0;s:3:\"red\";i:1;s:5:\"white\";i:2;s:4:\"blue\";}s:4:\"year\";i:1776;}\n\n$serialized = 'a:2:{s:6:\"colors\";a:3:{i:0;s:3:\"red\";i:1;s:5:\"white\";i:2;s:4:\"blue\";}s:4:\"year\";i:1776;}';\n$collection-&gt;unserialize($serialized);\n\necho $collection-&gt;jsonSerialize(); // $data\n</code></pre>"},{"location":"registry/#transformations","title":"Transformations","text":"<p>Phalcon\\Registry also exposes two transformation methods: <code>toArray()</code> and <code>toJson(int $options)</code>. <code>toArray()</code> returns the object transformed as an array. This method returns the same array as <code>jsonSerialize()</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Registry;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Registry($data);\n\necho $collection-&gt;toArray(); // $data\n</code></pre> <p><code>toJson(int $options)</code> returns a JSON representation of the object. It uses <code>json_encode</code> internally and accepts a parameter, which represents the flags that <code>json_encode</code> accepts. By default the options are set up with the value 74, (RFC4327) which translates to: - <code>JSON_HEX_TAG</code> - <code>JSON_HEX_APOS</code> - <code>JSON_HEX_AMP</code> - <code>JSON_HEX_QUOT</code> - <code>JSON_UNESCAPED_SLASHES</code></p> <p>You can pass any valid flags to the method according to your needs.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Registry;\n\n$data = [\n    'colors' =&gt; [\n        'red',\n        'white',\n        'blue',\n    ],\n    'year'   =&gt; 1776,\n];\n\n$collection = new Registry($data);\n\necho $collection-&gt;toJson(); // [\"red\",\"white\",\"blue\"],\"year\":1776}\n\necho $collection-&gt;toJson(74 + JSON_PRETTY_PRINT);\n/**\n{\n    \"colors\": [\n        \"red\",\n        \"white\",\n        \"blue\"\n    ],\n    \"year\": 1776\n}\n*/\n</code></pre>"},{"location":"releases/","title":"Release History","text":"Version Release date PHP version 0.3 November 14, 2012 0.4 June 02, 2012 0.5 September 17, 2012 0.6 November 11, 2012 0.7 December 12, 2012 0.8 January 09, 2013 0.9 February 05, 2013 1.0 March 21, 2013 1.3 March 17, 2014 2.0 April 17, 2015 3.0 July 29, 2016 5.6-7.0 4.0 December 21, 2019 7.2-7.4 Legend:              Old version                       Older version, still maintained          Latest version              Latest preview version                       Future release"},{"location":"reproducible-tests/","title":"Reproducible Tests","text":"<p>NOTE</p> <p>If you have found a bug, you can open an issue in GitHub. Along with your description of the bug, you will need to provide as much information as possible so that the core team can reproduce the behavior you are experiencing. The best way to do this is to create a test that fails, showcasing the behavior. If the bug you found is in an application that is publicly available in a repository, please provide also the link for this repository. You can also use a Gist to post any code you want to share with us.</p>"},{"location":"reproducible-tests/#creating-a-small-script","title":"Creating a Small Script","text":"<p>A small PHP file can be used to showcase how to reproduce the issue:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Di\\Injectable;\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Files;\nuse Phalcon\\Http\\Response\\Cookies;\n\n$container = new FactoryDefault();\n\n// Register your custom services\n$container['session'] = function() {\n    $session = new Manager();\n    $adapter = new Files(\n        [\n            'save_path' =&gt; '/tmp',\n         ]\n    );\n\n    $session-&gt;setHandler($adapter);\n\n    $session-&gt;start();\n\n    return $session;\n};\n\n$container['cookies'] = function() {\n    $cookies = new Cookies();\n\n    $cookies-&gt;useEncryption(false);\n\n    return $cookies;\n};\n\nclass SomeClass extends Injectable\n{\n    public function someMethod()\n    {\n        $cookies = $this-&gt;getDI()-&gt;getCookies();\n\n        $cookies-&gt;set(\n            'mycookie',\n            'test',\n            time() + 3600,\n            '/'\n        );\n    }\n}\n\n$class = new MyClass();\n\n$class-&gt;setDI($container);\n\n$class-&gt;someMethod();\n\n$container['cookies']-&gt;send();\n\nvar_dump($_SESSION);\nvar_dump($_COOKIE);\n</code></pre>"},{"location":"reproducible-tests/#database","title":"Database","text":"<p>NOTE</p> <p>Remember to include the register information for your <code>db</code> service, i.e. adapter, connection parameters etc.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n$container = new FactoryDefault();\n\n$container-&gt;setShared(\n    'db', \n    function () {\n        return new Mysql(\n            [\n                'host'     =&gt; '127.0.0.1',\n                'username' =&gt; 'root',\n                'password' =&gt; '',\n                'dbname'   =&gt; 'test',\n                'charset'  =&gt; 'utf8',\n            ]\n        );\n    }\n);\n\n$result = $container['db']-&gt;query('SELECT * FROM customers');\n</code></pre>"},{"location":"reproducible-tests/#singlemulti-module-applications","title":"Single/Multi-Module Applications","text":"<p>NOTE</p> <p>Remember to add to the script how you are creating the <code>Phalcon\\Mvc\\Application</code> instance and how you register your modules</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Mvc\\Application;\n\n$container = new FactoryDefault();\n\n// other services\n\n$application = new Application();\n\n$application-&gt;setDI($container);\n\n// register modules if any\n\n$response = $application-&gt;handle(\n    $_SERVER[\"REQUEST_URI\"]\n);\n\necho $response-&gt;getContent();\n</code></pre> <p>Include models and controllers as part of the test:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\Model;\n\n$container = new FactoryDefault();\n\n// other services\n\n$application = new Application();\n\n$application-&gt;setDI($container);\n\nclass IndexController extends Controller\n{\n    public function indexAction() { \n          /* your content here */\n    }\n}\n\nclass Users extends Model\n{\n}\n\n$response = $application-&gt;handle(\n    $_SERVER[\"REQUEST_URI\"]\n);\n\necho $response-&gt;getContent();\n</code></pre>"},{"location":"reproducible-tests/#micro-application","title":"Micro Application","text":"<p>For micro applications, you can use the skeleton script below:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Mvc\\Micro;\n\n$container = new FactoryDefault();\n\n// other services\n\n$application = new Micro($container);\n\n// define your routes here\n\n$application-&gt;handle(\n    $_SERVER[\"REQUEST_URI\"]\n);\n</code></pre>"},{"location":"reproducible-tests/#orm","title":"ORM","text":"<p>NOTE</p> <p>You can provide your own database schema or even better, use any of the existing schemas in our testing suite (located in <code>tests/_data/assets/db/schemas/</code> in the repository).</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as Connection;\nuse Phalcon\\Events\\Manager as EventsManager;\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Manager as ModelsManager;\nuse Phalcon\\Mvc\\Model\\Metadata\\Memory as ModelsMetaData;\n\n$eventsManager = new EventsManager();\n$container     = new Di();\n$connection    = new Connection(\n    [\n        'host'     =&gt; 'localhost',\n        'username' =&gt; 'root',\n        'password' =&gt; '',\n        'dbname'   =&gt; 'test',\n    ]\n);\n\n$connection-&gt;setEventsManager($eventsManager);\n\n$eventsManager-&gt;attach(\n    'db:beforeQuery',\n    function ($event, $connection) {\n        echo $connection-&gt;getSqlStatement(), '&lt;br&gt;' . PHP_EOL;\n    }\n);\n\n$container['db']             = $connection;\n$container['modelsManager']  = new ModelsManager();\n$container['modelsMetadata'] = new ModelsMetadata();\n\nif (true !== $connection-&gt;tableExists('user', 'test')) {\n    $connection-&gt;execute(\n        'CREATE TABLE user (id integer primary key auto_increment, email varchar(120) not null)'\n    );\n}\n\nclass User extends Model\n{\n    public $id;\n\n    public $email;\n\n    public static function createNewUserReturnId()\n    {\n        $newUser = new User();\n\n        $newUser-&gt;email = 'test';\n\n        if (false === $newUser-&gt;save()) {\n            return false;\n        }\n\n        return $newUser-&gt;id;\n    }\n}\n\necho User::createNewUserReturnId();\n</code></pre>"},{"location":"request/","title":"Request Component","text":""},{"location":"request/#overview","title":"Overview","text":"<p>Phalcon\\Http\\Request is a component that encapsulates the actual HTTP request (usually originated by a browser) and sent to our application. The Phalcon\\Http\\Request object is a simple value object that is passed between the dispatcher and controller classes, wrapping the HTTP request environment. It also offers easy access to information such as header data, files, method, variables etc.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request();\n\n// POST\nif (true === $request-&gt;isPost()) {\n    // AJAX\n    if (true === $request-&gt;isAjax()) {\n        // ....\n    }\n}\n</code></pre>"},{"location":"request/#getting-values","title":"Getting Values","text":"<p>PHP automatically fills the superglobal arrays $_GET, $_POST and $_REQUEST depending on the type of the request. These arrays contain the values present in forms submitted or the parameters sent via the URL. The variables in the arrays are never sanitized and can contain illegal characters or even malicious code, which can lead to SQL injection or Cross Site Scripting (XSS) attacks.</p> <p>Phalcon\\Http\\Request allows you to access the values stored in the $_GET, $_POST and $_REQUEST arrays and sanitize or filter them with the filter service. </p> <p>There are 5 methods that allow you to retrieve submitted data from a request: - <code>get()</code> - <code>getQuery()</code> - <code>getPost()</code>  - <code>getPut()</code> - <code>getServer()</code></p> <p>All (except <code>getServer()</code>) accept the following parameters: - <code>name</code> the name of the value to get - <code>filters</code> (array/string) the sanitizers to apply to the value - <code>defaultValue</code> returned if the element is not defined (<code>null</code>) - <code>notAllowEmpty</code> if set (default) and the value is empty, the <code>defaultValue</code> will be returned; otherwise <code>null</code> - <code>noRecursive</code> applies the sanitizers recursively in the value (if value is an array)</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request();\n\n$request-&gt;get(\n    $name = null,            // string\n    $filters = null,         // mixed\n    $defaultValue = null,    // mixed\n    $notAllowEmpty = false,  // bool\n    $noRecursive = false     // bool\n): mixed\n</code></pre> <p><code>getServer()</code> accepts only a <code>name</code> (string) variable, representing the name of the server variable that you need to retrieve.</p>"},{"location":"request/#_request","title":"$_REQUEST","text":"<p>The $_REQUEST superglobal contains an associative array that contains the contents of $_GET, $_POST and $_COOKIE. You can retrieve the data stored in the array by calling the <code>get()</code> method in the Phalcon\\Http\\Request object as follows: </p> <p>Examples Get the <code>userEmail</code> field from the <code>$_REQUEST</code> superglobal:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request();\n\n$email = $request-&gt;get('userEmail');\n</code></pre> <p>Get the <code>userEmail</code> field from the <code>$_REQUEST</code> superglobal. Sanitize the value with the <code>email</code> sanitizer:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request();\n\n$email = $request-&gt;get('userEmail', 'email', 'some@example.com');\n</code></pre> <p>Get the <code>userEmail</code> field from the <code>$_REQUEST</code> superglobal. Do not sanitize it. If the parameter is null, return the default value:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request();\n\n$email = $request-&gt;get('userEmail', null, 'some@example.com');\n</code></pre>"},{"location":"request/#_get","title":"$_GET","text":"<p>The $_GET superglobal contains an associative array that contains the variables passed to the current script via URL parameters (also known as the query string). You can retrieve the data stored in the array by calling the <code>getQuery()</code> method as follows: </p> <p>Examples Get the <code>userEmail</code> field from the <code>$_GET</code> superglobal:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request();\n\n$email = $request-&gt;getQuery('userEmail');\n</code></pre> <p>Get the <code>userEmail</code> field from the <code>$_GET</code> superglobal. Sanitize the value with the <code>email</code> sanitizer:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request();\n\n$email = $request-&gt;getQuery('userEmail', 'email', 'some@example.com');\n</code></pre> <p>Get the <code>userEmail</code> field from the <code>$_GET</code> superglobal. Do not sanitize it. If the parameter is null, return the default value:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request();\n\n$email = $request-&gt;getQuery('userEmail', null, 'some@example.com');\n</code></pre>"},{"location":"request/#_post","title":"$_POST","text":"<p>The $_POST superglobal contains an associative array that contains the variables passed to the current script via the HTTP POST method when using <code>application/x-www-form-urlencoded</code> or <code>multipart/form-data</code> as the HTTP <code>Content-Type</code> in the request. You can retrieve the data stored in the array by calling the <code>getPost()</code> method as follows: </p> <p>Examples Get the <code>userEmail</code> field from the <code>$_POST</code> superglobal:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request();\n\n$email = $request-&gt;getPost('userEmail');\n</code></pre> <p>Get the <code>userEmail</code> field from the <code>$_POST</code> superglobal. Sanitize the value with the <code>email</code> sanitizer:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request();\n\n$email = $request-&gt;getPost('userEmail', 'email', 'some@example.com');\n</code></pre> <p>Get the <code>userEmail</code> field from the <code>$_POST</code> superglobal. Do not sanitize it. If the parameter is null, return the default value:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request();\n\n$email = $request-&gt;getPost('userEmail', null, 'some@example.com');\n</code></pre>"},{"location":"request/#put","title":"Put","text":"<p>The request object parses the PUT stream that has been received internally. You can retrieve the data stored in the array by calling the <code>getPut()</code> method as follows: </p> <p>Examples Get the <code>userEmail</code> field from the <code>PUT</code> stream:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request();\n\n$email = $request-&gt;getPut('userEmail');\n</code></pre> <p>Get the <code>userEmail</code> field from the <code>PUT</code> stream. Sanitize the value with the <code>email</code> sanitizer:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request();\n\n$email = $request-&gt;getPut('userEmail', 'email', 'some@example.com');\n</code></pre> <p>Get the <code>userEmail</code> field from the <code>PUT</code> stream. Do not sanitize it. If the parameter is null, return the default value:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request();\n\n$email = $request-&gt;getPut('userEmail', null, 'some@example.com');\n</code></pre>"},{"location":"request/#_server","title":"$_SERVER","text":"<p>The $_SERVER superglobal contains an array containing information such as headers, paths, and script locations. You can retrieve the data stored in the array by calling the <code>getServer()</code> method as follows: </p> <p>Examples Get the <code>SERVER_NAME</code> value from the <code>$_SERVER</code> superglobal:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request();\n\n$name = $request-&gt;getServer('SERVER_NAME');\n</code></pre>"},{"location":"request/#preset-sanitizers","title":"Preset Sanitizers","text":"<p>It is relatively common that certain fields are using the same name throughout your application. A field posted from a form in your application can have the same name and function with another form in a different area. Examples of this behavior could be <code>id</code> fields, <code>name</code> etc.</p> <p>To make the sanitization process easier, when retrieving such fields, Phalcon\\Http\\Request offers a method to define those sanitizing filters based on HTTP methods when setting up the object.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Filter;\nuse Phalcon\\Http\\Request;\n\n$container = new Di();\n\n$container-&gt;set(\n    'request',\n    function () {\n        $request = new Request();\n        $request\n            -&gt;setParameterFilters(\n                'id', \n                Filter::FILTER_ABSINT, \n                [\n                    'post'\n                ]\n            )\n            -&gt;setParameterFilters(\n                'name', \n                [\n                    'trim', \n                    'string'\n                ], \n                [\n                    'post'\n                ]\n            )\n        ;\n\n        return $request;\n    }\n);\n</code></pre> <p>The above will automatically sanitize any parameter that is POSTed from a form that has a name <code>id</code> or <code>name</code> with their respective filters. Sanitization takes place when calling the following methods (one per HTTP method) - <code>getFilteredPost()</code> - <code>getFilteredPut()</code> - <code>getFilteredQuery()</code></p> <p>These methods accept the same parameters as the <code>getPost()</code>, <code>getPut()</code> and <code>getQuery()</code> but without the <code>$filter</code> parameter.</p>"},{"location":"request/#controllers","title":"Controllers","text":"<p>If you use the Phalcon\\Di\\FactoryDefault container, the Phalcon\\Http\\Request is already registered for you. The most common place to access the request environment is in an action of a controller. To access the Phalcon\\Http\\Request object from a controller you will need to use the <code>$this-&gt;request</code> public property of the controller:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * Class PostsController\n * \n * @property Request $request\n */\nclass PostsController extends Controller\n{\n    public function saveAction()\n    {\n        // Check if request has made with POST\n        if (true === $this-&gt;request-&gt;isPost()) {\n            // Access POST data\n            $customerName = $this\n                -&gt;request\n                -&gt;getPost('name');\n            $customerBorn = $this\n                -&gt;request\n                -&gt;getPost('born', 'string', '1984');\n        }\n    }\n}\n</code></pre>"},{"location":"request/#checking-operations","title":"Checking Operations","text":"<p>The Phalcon\\Http\\Request component contains a number of methods that help you check the current operation. For instance if you want to check if a particular request was made using AJAX, you can do so by using the <code>isAjax()</code> method. All the methods are prefixed with <code>is</code>. - <code>isAjax()</code>: Checks whether request has been made using AJAX - <code>isConnect()</code>: Checks whether HTTP method is CONNECT - <code>isDelete()</code>: Checks whether HTTP method is DELETE - <code>isGet()</code>: Checks whether HTTP method is GET - <code>isHead()</code>: Checks whether HTTP method is HEAD - <code>isMethod()</code>: Check if HTTP method match any of the passed methods - <code>isOptions()</code>: Checks whether HTTP method is OPTIONS - <code>isPatch()</code>: Checks whether HTTP method is PATCH - <code>isPost()</code>: Checks whether HTTP method is POST - <code>isPurge()</code>: Checks whether HTTP method is PURGE (Squid and Varnish support) - <code>isPut()</code>: Checks whether HTTP method is PUT - <code>isSecure()</code>: Checks whether request has been made using any secure layer - <code>isSoap()</code>: Checks whether request has been made using SOAP - <code>isTrace()</code>: Checks whether HTTP method is TRACE - <code>isValidHttpMethod()</code>: Checks if a method is a valid HTTP method</p>"},{"location":"request/#checking-existence","title":"Checking Existence","text":"<p>There are a number of methods available that allow you to check the existence of elements in the request. These methods are prefixed with <code>has</code>. Depending on the method used, you can check if an element exists in the <code>$_REQUEST</code>, <code>$_GET</code>, <code>$_POST</code>, <code>$_SERVER</code>, <code>$_FILES</code>, PUT cache and the request headers.  - <code>has()</code>: Checks whether the $_REQUEST superglobal has a certain element - <code>hasFiles()</code>: Checks whether the request has any uploaded files - <code>hasHeader()</code>: Checks whether the headers have a certain element - <code>hasPost()</code>: Checks whether $_POST superglobal has a certain element - <code>hasPut()</code>: Checks whether the PUT data has a certain element - <code>hasQuery()</code>: Checks whether $_GET superglobal has a certain element - <code>hasServer()</code>: Checks whether $_SERVER superglobal has a certain element - <code>numFiles()</code>: Returns the number of files present in the request</p>"},{"location":"request/#request-information","title":"Request Information","text":"<p>The Phalcon\\Http\\Request object offers methods that provide additional information regarding the request. </p>"},{"location":"request/#authentication","title":"Authentication","text":"<ul> <li><code>getBasicAuth()</code>: Gets auth info accepted by the browser/client</li> <li><code>getDigestAuth()</code>: Gets auth info accepted by the browser/client</li> </ul>"},{"location":"request/#client","title":"Client","text":"<ul> <li><code>getClientAddress()</code>: Gets most possible client IPv4 Address</li> <li><code>getClientCharsets()</code>: Gets a charsets array and their quality accepted by the browser/client</li> <li><code>getUserAgent()</code>: Gets HTTP user agent used to made the request</li> <li><code>getHTTPReferer()</code>: Gets web page that refers active request</li> </ul>"},{"location":"request/#content","title":"Content","text":"<ul> <li><code>getAcceptableContent()</code>: Gets an array with mime/types and their quality accepted by the browser/client</li> <li><code>getBestAccept()</code>: Gets best mime/type accepted by the browser/client</li> <li><code>getContentType()</code>: Gets content type which request has been made</li> <li><code>getJsonRawBody()</code>: Gets decoded JSON HTTP raw request body</li> <li><code>getRawBody()</code>: Gets HTTP raw request body</li> </ul>"},{"location":"request/#i18n","title":"i18n","text":"<ul> <li><code>getBestCharset()</code>: Gets best charset accepted by the browser/client</li> <li><code>getBestLanguage()</code>: Gets best language accepted by the browser/client</li> <li><code>getLanguages()</code>: Gets languages array and their quality accepted by the browser/client</li> </ul>"},{"location":"request/#server","title":"Server","text":"<ul> <li><code>getPort()</code>: Gets information about the port on which the request is made</li> <li><code>getServerAddress()</code>: Gets active server address IP</li> <li><code>getServerName()</code>: Gets active server name</li> <li><code>getScheme()</code>: Gets HTTP schema (http/https)</li> <li><code>getURI()</code>: Gets HTTP URI which request has been made. If <code>true</code> is passed as a parameter, the query part will not be returned</li> </ul> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request();\n\nif ($request-&gt;isAjax()) {\n    echo 'The request was made with Ajax';\n}\n\n// Check the request layer\nif ($request-&gt;isSecure()) {\n    echo 'The request was made using a secure layer';\n}\n</code></pre> <p>Some methods:</p> <p><pre><code>$ipAddress = $request-&gt;getServerAddress();\n</code></pre> Get the servers's IP address. ie. <code>192.168.0.100</code></p> <p><pre><code>$ipAddress = $request-&gt;getClientAddress();\n</code></pre> Get the client's IP address ie. <code>201.245.53.51</code></p> <p><pre><code>$userAgent = $request-&gt;getUserAgent();\n</code></pre> Get the User Agent (<code>HTTP_USER_AGENT</code>)</p> <p><pre><code>$contentType = $request-&gt;getAcceptableContent();\n</code></pre> Get the best acceptable content by the browser. ie text/xml</p> <p><pre><code>$charset = $request-&gt;getBestCharset();\n</code></pre> Get the best charset accepted by the browser. ie. <code>utf-8</code></p> <p><pre><code>$language = $request-&gt;getBestLanguage();\n</code></pre> Get the best language accepted configured in the browser. ie. <code>en-us</code></p>"},{"location":"request/#method","title":"Method","text":"<p><code>getMethod()</code> returns the HTTP method which request has been made. If the <code>X-HTTP-Method-Override</code> header is set, and if the method is a <code>POST</code>, then it is used to determine the \"real\" intended HTTP method. The <code>_method</code> request parameter can also be used to determine the HTTP method, <code>setHttpMethodParameterOverride(true)</code> has been called. The method always returns an uppercase string.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request();\n\n// POST\n$_SERVER['REQUEST_METHOD'] = 'POST';\necho $request-&gt;getMethod();\n\n/**\n * header('X-HTTP-Method-Override: GET');\n */ \n$_SERVER['REQUEST_METHOD'] = 'POST';\n$request-&gt;setHttpMethodParameterOverride(true);\necho $request-&gt;getMethod();\n\n// GET\n$_SERVER['REQUEST_METHOD'] = 'POST';\n$_REQUEST['_method']       = 'GET';\n$request-&gt;setHttpMethodParameterOverride(true);\necho $request-&gt;getMethod();\n</code></pre>"},{"location":"request/#dependency-injection","title":"Dependency Injection","text":"<p>The Phalcon\\Http\\Request object implements the Phalcon\\Di\\InjectionAwareInterface interface. As a result, the DI container is available and can be retrieved using the <code>getDI()</code> method. A container can also be set using the <code>setDI()</code> method.</p>"},{"location":"request/#working-with-headers","title":"Working with Headers","text":"<p>Request headers contain useful information, allowing you to take necessary steps to send the proper response back to the user. The Phalcon\\Http\\Request exposes the <code>getHeader()</code> and <code>getHeaders()</code> methods.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$request = new Request;\n\n$_SERVER[\"HTTP_HOST\"] = \"example.com\";\n$request-&gt;getHttpHost(); // example.com\n\n$_SERVER[\"HTTP_HOST\"] = \"example.com:8080\";\n$request-&gt;getHttpHost(); // example.com:8080\n\n$request-&gt;setStrictHostCheck(true);\n$_SERVER[\"HTTP_HOST\"] = \"ex=am~ple.com\";\n$request-&gt;getHttpHost(); // UnexpectedValueException\n\n$_SERVER[\"HTTP_HOST\"] = \"ExAmPlE.com\";\n$request-&gt;getHttpHost(); // example.com\n</code></pre> <p>The <code>getHttpHost()</code> method will return the host name used by the request. The method will try to find host name in following order: - <code>$_SERVER[\"HTTP_HOST\"]</code> - <code>$_SERVER[\"SERVER_NAME\"]</code> - <code>$_SERVER[\"SERVER_ADDR\"]</code></p> <p>Optionally <code>getHttpHost()</code> validates and performs a strict check on the host name. To achieve that you can use the <code>setStrictHostCheck()</code> method.</p>"},{"location":"request/#uploaded-files","title":"Uploaded Files","text":"<p>Another common task is file uploading. Phalcon\\Http\\Request offers an object-oriented way work with files. For the whole upload process to work, you will need to make the necessary changes to your <code>php.ini</code> (see php-uploads).</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * Class PostsController\n * \n * @property Request $request\n */\nclass PostsController extends Controller\n{\n    public function uploadAction()\n    {\n        // if ($this-&gt;request-&gt;numFiles() &gt; 0) {\n        if ($this-&gt;request-&gt;hasFiles()) {\n            $files = $this-&gt;request-&gt;getUploadedFiles();\n\n            foreach ($files as $file) {\n                echo $file-&gt;getName(), ' ', $file-&gt;getSize(), '\\n';\n\n                $file-&gt;moveTo(\n                    'files/' . $file-&gt;getName()\n                );\n            }\n        }\n    }\n}\n</code></pre> <p>Each object returned by <code>Phalcon\\Http\\Request::getUploadedFiles()</code> is an instance of the Phalcon\\Http\\Request\\File which implements the Phalcon\\Http\\Request\\FileInterface class. Using the <code>$_FILES</code> superglobal array offers the same behavior. Phalcon\\Http\\Request\\File encapsulates only the information related to each file uploaded with the request.</p> <p>The <code>getUploadedFiles()</code> accepts two parameters. - <code>$onlySuccessful</code>: Contains only successful uploads - <code>$namedKeys</code>: Returns the array with named keys obtained by the upload process</p> <p>The method returns an array of Phalcon\\Http\\Request\\File objects. Each object offers the following properties and methods, allowing you to work with uploaded files:</p> <ul> <li><code>getError()</code> (string) - Returns any error that happened with this file</li> <li><code>getExtension()</code> (string) - Returns the extension of the file</li> <li><code>getKey()</code> (string) - Returns the internal key of the file</li> <li><code>getName()</code> (string) -Returns the real name of the uploaded file</li> <li><code>getRealType()</code> (string) - Return the real mime type of the upload file using finfo</li> <li><code>getSize()</code>  (int) - Returns the file size of the uploaded file</li> <li><code>getTempName()</code> (string) - Returns the temporary name of the uploaded file</li> <li><code>getType()</code> (string) - Returns the mime type reported by the browser. This mime type is not completely secure, use <code>getRealType()</code> instead</li> <li><code>isUploadedFile()</code> (bool) - Checks whether the file has been uploaded via <code>POST</code>.</li> <li><code>moveTo(string $destination)</code> (bool) - Moves the temporary file to a destination within the application</li> </ul>"},{"location":"request/#dependency-injection_1","title":"Dependency Injection","text":"<p>The Phalcon\\Http\\Request object implements the Phalcon\\Di\\InjectionAwareInterface interface. As a result, the DI container is available and can be retrieved using the <code>getDI()</code> method. A container can also be set using the <code>setDI()</code> method.</p>"},{"location":"request/#events","title":"Events","text":"<p>The Phalcon\\Http\\Request object implements the Phalcon\\Events\\EventsAware interfaces. As a result <code>getEventsManager()</code> and <code>setEventsManager()</code> are available for you to use.</p> Event Description Can stop operation <code>afterAuthorizationResolve</code> Fires when the authorization has been resolved No <code>beforeAuthorizationResolve</code> Fires before the authorization has been resolved Yes <p>When using HTTP authorization, the <code>Authorization</code> header has the following format:</p> <pre><code>Authorization: &lt;type&gt; &lt;credentials&gt;\n</code></pre> <p>where <code>&lt;type&gt;</code> is an authentication type. A common type is <code>Basic</code>. Additional authentication types are described in IANA registry of Authentication schemes and Authentication for AWS servers (AWS4-HMAC-SHA256). In most use cases the authentication type is: * <code>AWS4-HMAC-SHA256</code> * <code>Basic</code> * <code>Bearer</code> * <code>Digest</code> * <code>HOBA</code> * <code>Mutual</code> * <code>Negotiate</code> * <code>OAuth</code> * <code>SCRAM-SHA-1</code> * <code>SCRAM-SHA-256</code> * <code>vapid</code></p> <p>You can use the <code>request:beforeAuthorizationResolve</code> and <code>request:afterAuthorizationResolve</code> events to perform additional operations before or after the authorization resolves. </p> <p>The <code>request:beforeAuthorizationResolve</code> receives the <code>SERVER</code> array with the key <code>server</code> as the second parameter of the event. </p> <p>The <code>request:afterAuthorizationResolve</code> receives the <code>SERVER</code> array with the key <code>server</code> as well as the headers with the key <code>headers</code>.</p> <p>A custom authorization resolver is required.</p> <p>Example without using custom authorization resolver: <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\n\n$_SERVER['HTTP_AUTHORIZATION'] = 'Enigma Secret';\n\n$request = new Request();\nprint_r($request-&gt;getHeaders());\n</code></pre></p> <p>Result: </p> <pre><code>Array\n(\n    [Authorization] =&gt; Enigma Secret\n)\n\nType: Enigma\nCredentials: Secret\n</code></pre> <p>Example using custom authorization resolver: <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Events\\Manager;\n\nclass NegotiateAuthorizationListener\n{\n    public function afterAuthorizationResolve(Event $event, Request $request, array $data)\n    {\n        if (empty($data['server']['CUSTOM_KERBEROS_AUTH'])) {\n            return false;\n        }\n\n        list($type,) = explode(\n            ' ', \n            $data['server']['CUSTOM_KERBEROS_AUTH'], \n            2\n        );\n\n        if (!$type || stripos($type, 'negotiate') !== 0) {\n            return false;\n        }\n\n        return [\n           'Authorization'=&gt; $data['server']['CUSTOM_KERBEROS_AUTH'],\n        ];\n    }\n}\n\n$_SERVER['CUSTOM_KERBEROS_AUTH'] = 'Negotiate '\n                                 . 'a87421000492aa874209af8bc028';\n\n$di = new Di();\n\n$di-&gt;set(\n    'eventsManager',\n    function () {\n        $manager = new Manager();\n\n        $manager-&gt;attach(\n            'request',\n            new NegotiateAuthorizationListener()\n        );\n\n        return $manager;\n    }\n);\n\n$request = new Request();\n\n$request-&gt;setDI($di);\n\nprint_r(\n    $request-&gt;getHeaders()\n);\n</code></pre></p> <p>Result: </p> <pre><code>Array\n(\n    [Authorization] =&gt; Negotiate a87421000492aa874209af8bc028\n)\n\nType: Negotiate\nCredentials: a87421000492aa874209af8bc028\n</code></pre>"},{"location":"response/","title":"Response Component","text":""},{"location":"response/#overview","title":"Overview","text":"<p>Phalcon\\Http\\Response is a component that encapsulates the actual HTTP response by the application to the user. The most commonly returned payload is headers and content. Note that this is not only the actual response payload. The component acts as a constructor of the response and as a HTTP client to send the response back to the caller. You can always use the Phalcon\\Http\\Message\\Response for a PSR-7 compatible response and use a client such as Guzzle to send it back to the caller.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n// Getting a response instance\n$response = new Response();\n\n$response-&gt;setStatusCode(404, 'Not Found');\n$response-&gt;setContent(\"Sorry, the page doesn't exist\");\n$response-&gt;send();\n</code></pre> <p>The above example demonstrates how we can send a 404 page back to the user.</p> <p>The component implements the Phalcon\\Http\\ResponseInterface, Phalcon\\Di\\InjectionAware and Phalcon\\Events\\EventsAware interfaces.</p> <p>Upon instantiation, you can use the constructor to set your content, the code as well as the status if you need to. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n// Getting a response instance\n$response = new Response(\n    \"Sorry, the page doesn't exist\",\n    404, \n    'Not Found'\n);\n\n$response-&gt;send();\n</code></pre> <p>After we set up all the necessary information, we can call the <code>send()</code> method to send the response back. There are however instances that due to errors or application workflow, that our response might have already been sent back to the caller. Calling <code>send()</code> will therefore introduce the dreaded <code>headers already sent</code> message on screen.</p> <p>To avoid this we can use the <code>isSent()</code> method to check if the response has already sent the data back to the caller.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n// Getting a response instance\n$response = new Response(\n    \"Sorry, the page doesn't exist\",\n    404, \n    'Not Found'\n);\n\nif (true !== $response-&gt;isSent()) {\n    $response-&gt;send();\n}\n</code></pre>"},{"location":"response/#getters","title":"Getters","text":"<p>The Phalcon\\Http\\Response offers several getters, allowing you to retrieve information regarding the response based on your application needs. The following getters are available: - <code>getContent(): string</code> - Returns the HTTP response body. - <code>getHeaders(): HeadersInterface</code> - Returns the headers object, containing headers set by the user. - <code>getReasonPhrase(): string | null</code> - Returns the reason phrase (e.g. <code>Not Found</code>). The text returned is the one specified in the IANA HTTP Status Codes document. - <code>getStatusCode(): int | null</code> - Returns the status code (e.g. <code>200</code>).</p>"},{"location":"response/#content","title":"Content","text":"<p>There are a number of methods available that allow you to set the content or body of the response. <code>setContent()</code> is the most frequently used method.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n// Getting a response instance\n$response = new Response();\n\n$response-&gt;setContent(\"&lt;h1&gt;Hello World!&lt;/h1&gt;\");\n$response-&gt;send();\n</code></pre> <p>You can also accompany that with <code>setContentLength()</code> which allows you to set the length or number of bytes that the response has, as well as the <code>setContentType()</code> which tells the recipient what type the data is. This is especially handy to use, because the recipient (often a browser) will treat different types of content differently. </p> <p>NOTE</p> <p>All setters return the response object back so they are chainable, offering a more fluent interface</p> <p>Examples</p> <p>PDF File:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n$response = new Response();\n$contents = file_get_contents('/app/storage/files/invoice.pdf');\n\n$response\n    -&gt;setContent($contents)\n    -&gt;setContentType('application/pdf')\n    -&gt;setHeader(\n        'Content-Disposition', \n        \"attachment; filename='downloaded.pdf'\"\n    )\n    -&gt;send()\n;\n</code></pre> <p>JSON:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n$response = new Response();\n$contents = [\n    'invoice' =&gt; [\n        'id'    =&gt; 12345,\n        'name'  =&gt; 'invoice.pdf',\n        'date'  =&gt; '2019-01-01 01:02:03',\n        'owner' =&gt; 'admin',\n    ]   \n];\n\n$response\n    -&gt;setJsonContent($contents)\n    -&gt;send();\n</code></pre> <p>Note that in the above JSON example we used the <code>setJsonContent()</code> instead of the <code>setContent()</code>. <code>setJsonContent()</code> allows us to send a payload to the method and it will automatically set the content type header to <code>application/json</code> and call <code>json_encode</code> on the payload. You can also pass options and depth as the last two parameters of the method, which will be used by json_encode internally:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n$response = new Response();\n$contents = [\n    'invoice' =&gt; [\n        'id'    =&gt; 12345,\n        'name'  =&gt; 'invoice.pdf',\n        'date'  =&gt; '2019-01-01 01:02:03',\n        'owner' =&gt; 'admin',\n    ]   \n];\n\n$response\n    -&gt;setJsonContent($contents, JSON_PRETTY_PRINT, 512)\n    -&gt;send();\n</code></pre> <p>For applications that need to add content to the response based on certain criteria (various <code>if</code> statements for instance), you can use the <code>appendContent()</code> method, which will just add the new content to the existing one stored in the component.</p>"},{"location":"response/#headers","title":"Headers","text":"<p>The HTTP headers are a very important part of the HTTP response, since they contain information regarding the response. Information such as the status, content type, cache etc. is wrapped in the headers. The Phalcon\\Http\\Response object offers methods that allow you to manipulate those headers based on your application workflow and needs. </p> <p>Setting headers using the response object only requires you to call the <code>setHeader()</code> method.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n$response = new Response();\n\n$response\n    -&gt;setHeader(\n        'Content-Type', \n        'application/pdf'\n    )\n    -&gt;setHeader(\n        'Content-Disposition', \n        \"attachment; filename='downloaded.pdf'\"\n    )\n;\n\n$response-&gt;setRawHeader('HTTP/1.1 200 OK');\n</code></pre> <p>You can also use the <code>setRawHeader()</code> method to set the header using the raw syntax. </p> <p>You can check whether a header exists using <code>hasHeader()</code>, remove it using <code>removeHeader()</code> method, or clear the headers completely using <code>resetHeaders()</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n$response = new Response();\n\n$response-&gt;setHeader(\n    'Content-Type', \n    'application/pdf'\n);\n\nif (true === $response-&gt;hasHeader('Content-Type')) {\n    $response-&gt;removeHeader('Content-Type');\n}\n\n$response-&gt;resetHeaders();\n</code></pre> <p>If you need to, you can also send only the headers back to the caller using <code>sendHeaders()</code></p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n$response = new Response();\n\n$response-&gt;setHeader(\n    'Content-Type', \n    'application/pdf'\n);\n\n$response-&gt;sendHeaders();\n</code></pre> <p>The Phalcon\\Http\\Response object also wraps the Phalcon\\Http\\Response\\Headers collection object automatically, which offers more methods for header manipulation. You can instantiate a Phalcon\\Http\\Response\\Headers object or any object that implements the Phalcon\\Http\\Response\\HeadersInterface and then set it in the response using <code>setHeaders()</code>:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Http\\Response\\Headers;\n\n$response = new Response();\n$headers  = new Headers();\n\n$headers\n    -&gt;set(\n        'Content-Type', \n        'application/pdf'\n    )\n    -&gt;set(\n        'Content-Disposition', \n        \"attachment; filename='downloaded.pdf'\"\n    )\n;\n\n$response-&gt;setHeaders($headers);\n</code></pre> <p>NOTE</p> <p>Note that using <code>setHeaders()</code> merges the passed headers with the ones present in the response object already. The method will not clear the headers before setting them. To clear the headers you need to call <code>reset()</code> first (or <code>resetHeaders()</code> on the response object).</p> <p>The Phalcon\\Http\\Response\\Headers object offers the following methods, allowing you to manipulate headers:</p> <ul> <li><code>get( string $name ): string | bool</code> - Gets a header value from the object</li> <li><code>has( string $name ): bool</code> - Checks if a header already exists in the reponse</li> <li><code>remove( string $header )</code> - Removes a header from the response</li> <li><code>reset()</code> - Resets all headers</li> <li><code>send(): bool</code> - Sends the headers to the client</li> <li><code>set( string $name, string $value )</code> - Sets a header to be sent at the end of the response</li> <li><code>setRaw( string $header )</code> Sets a raw header to be sent at the end of the response</li> <li><code>toArray(): array</code> - Returns the current headers as an array</li> </ul> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n$response = new Response();\n$headers  = $response-&gt;getHeaders();\n\n$headers-&gt;set('Content-Type', 'application/json');\n\n$response-&gt;setHeaders($headers);\n</code></pre>"},{"location":"response/#cookies","title":"Cookies","text":"<p>The Phalcon\\Http\\Response offers a collection to store and manipulate cookies. You can then send those cookies back with the response.</p> <p>To set up cookies you will need to instantiate a Phalcon\\Http\\Response\\Cookies object or any object that implements the Phalcon\\Http\\Response\\CookiesInterface.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Http\\Response\\Cookies;\n\n$response = new Response();\n$cookies  = new Cookies();\n\n$response-&gt;setCookies($cookies);\n</code></pre> <p>To get the cookies set by the user you can use the <code>getCookies()</code> method on the Phalcon\\Http\\Response object. The method returns a Phalcon\\Http\\Response\\Cookies collection object. You can set the cookies in the response object using the <code>setCookies()</code>, as shown above, and then use <code>sendCookies()</code> to send them back to the caller.</p>"},{"location":"response/#samesite","title":"<code>SameSite</code>","text":"<p>If you are using PHP 7.3 or later you can set the <code>SameSite</code> as an element to the <code>options</code> array (last parameter of the constructor) or by using <code>setOptions()</code>. It is your responsibility to assign a valid value for <code>SameSite</code> (such as <code>Strict</code>, <code>Lax</code> etc.)</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Cookie;\n\n$cookie  = new Cookie(\n    'my-cookie',                   // name\n    1234,                          // value\n    time() + 86400,                // expires\n    \"/\",                           // path\n    true,                          // secure\n    \".phalcon.io\",                 // domain\n    true,                          // httponly\n    [                              // options\n        \"samesite\" =&gt; \"Strict\",    // \n    ]                              // \n);\n</code></pre> <p>NOTE</p> <p>If your DI container contains the <code>session</code> service, the cookies will be stored in the session automatically. If not, they will not be stored, and you are responsible to persist them if you wish to.</p>"},{"location":"response/#encryption","title":"Encryption","text":"<p>The cookies collection is automatically registered as part of the <code>response</code> service that is registered in the DI container. By default, cookies are automatically encrypted prior to sending them to the client and are decrypted when retrieved from the user.  </p> <p>In order to set the sign key used to generate a message you can either set it in the constructor:</p> <pre><code>&lt;?php \n\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Http\\Response\\Cookies;\n\n$response = new Response();\n$signKey  = \"#1dj8$=dp?.ak//j1V$~%*0XaK\\xb1\\x8d\\xa9\\x98\\x054t7w!z%C*F-Jk\\x98\\x05\\\\\\x5c\";\n\n$cookies  = new Cookies(true, $signKey);\n\n$response-&gt;setCookies($cookies);\n</code></pre> <p>or if you want you can use the <code>setSignKey()</code> method:</p> <pre><code>&lt;?php \n\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Http\\Response\\Cookies;\n\n$response = new Response();\n$signKey  = \"#1dj8$=dp?.ak//j1V$~%*0XaK\\xb1\\x8d\\xa9\\x98\\x054t7w!z%C*F-Jk\\x98\\x05\\\\\\x5c\";\n\n$cookies  = new Cookies();\n\n$cookies-&gt;setSignKey($signKey);\n\n$response-&gt;setCookies($cookies);\n</code></pre> <p>NOTE</p> <p>The <code>signKey</code> MUST be at least 32 characters long, and it always helps if it is generated using a cryptographically secure pseudo random generator. You can always use the <code>Crypt</code> component to generate a good <code>signKey</code>.</p> <p>NOTE</p> <p>Cookies can contain complex structures such as service information, resultsets etc. As a result, sending cookies without encryption to clients could expose application details that can be used by attackers to compromise the application and underlying system. If you do not wish to use encryption, you could send only unique identifiers that could be tied to a database table that stores more complex information that your application can use. </p>"},{"location":"response/#methods","title":"Methods","text":"<p>There are several methods available to help you retrieve data from the component:</p> <ul> <li><code>delete( string $name ): bool</code> - Deletes a cookie by name. This method does not remove cookies from the <code>$_COOKIE</code> superglobal</li> <li><code>get( string $name ): CookieInterface</code> - Gets a cookie by name. It checks the internal collection and if the cookie is found, it will return it back. If not found, it will pick up the cookie from the superglobal, create an object and then return it back. It will not store it in the internal collection because it will be sent twice otherwise.</li> <li><code>getCookies(): array</code> - Returns an array of all available cookies in the object</li> <li><code>has( string $name ): bool</code> - Checks the internal cookie collection or the <code>$_COOKIE</code> superglobal. It returns <code>true</code> if the cookie exists in either collections, <code>false</code> otherwise.</li> <li><code>isUsingEncryption(): bool</code> - Returns if the collection is automatically encrypting/decrypting cookies.</li> <li><code>reset(): CookiesInterface</code> - Reset all set cookies from the internal collection</li> <li><code>send(): bool</code> - Sends all the cookies to the client. Cookies are not sent if headers are already sent during the current request</li> <li><code>setSignKey( string $signKey = null ): CookieInterface</code> - Sets the cookie's sign key. If set to <code>NULL</code> the signing is disabled.</li> <li><code>useEncryption( bool $useEncryption ): CookiesInterface</code> - Set if cookies in the bag must be automatically encrypted/decrypted</li> <li><code>set()</code> - Sets a cookie to be sent at the end of the request.</li> </ul> <p><code>set(): CookiesInterface</code> accepts the following parameters: - <code>string $name</code> - The name of the cookie - <code>mixed $value = null</code> - The value of the cookie - <code>int $expire = 0</code> - The expiration of the cookie - <code>string $path = \"/\"</code> - The path of the cookie - <code>bool $secure = null</code> - Whether the cookie is secure or not - <code>string $domain = null</code> - The domain of the cookie - <code>bool $httpOnly = null</code> - Whether to set http only or not</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response\\Cookies;\n\n$now = new DateTimeImmutable();\n$tomorrow = $now-&gt;modify('tomorrow');\n\n$cookies = new Cookies();\n$cookies-&gt;set(\n    'remember-me',\n    json_encode(\n        [\n            'user_id' =&gt; 1,\n        ]\n    ),\n    (int) $tomorrow-&gt;format('U')\n);\n</code></pre>"},{"location":"response/#files","title":"Files","text":"<p>The <code>setFileToSend()</code> helper method allows you to easily set a file to be sent back to the caller using the response object. This is particularly useful when we want to introduce download files functionality in our application.</p> <p>The method accepts the following parameters: - <code>filePath</code> - string - The path of where the file is - <code>attachmentName</code> - string - the name that the browser will save the file as - <code>attachment</code> - bool - whether this is an attachment or not (sets headers)</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n$response = new Response();\n$contents = file_get_contents();\n\n$response\n    -&gt;setFileToSend(\n        '/app/storage/files/invoice.pdf',\n        'downloaded.pdf',\n        true\n    )\n    -&gt;send()\n;\n</code></pre> <p>In the above example, we set where the file lives (<code>/app/storage/files/invoice.pdf</code>). The second parameter will set the name of the file (when downloaded by the browser) to <code>downloaded.pdf</code>. The third parameter instructs the component to set the relevant headers for the download to happen. These are:</p> <ul> <li><code>Content-Description: File Transfer</code></li> <li><code>Content-Type: application/octet-stream\"</code></li> <li><code>Content-Disposition: attachment; filename=downloaded.pdf;\"</code></li> <li><code>Content-Transfer-Encoding: binary\"</code></li> </ul> <p>When calling <code>send()</code>, the file will be read using readfile() and the contents will be sent back to the caller.</p>"},{"location":"response/#redirections","title":"Redirections","text":"<p>With Phalcon\\Http\\Response you can also execute HTTP redirections.</p> <p>Examples</p> <p>Redirect to the default URI</p> <pre><code>&lt;?php \n\nuse Phalcon\\Http\\Response;\n\n$response = new Response();\n\n$response-&gt;redirect();\n</code></pre> <p>Redirect to <code>posts/index</code></p> <pre><code>&lt;?php \n\nuse Phalcon\\Http\\Response;\n\n$response = new Response();\n\n$response-&gt;redirect('posts/index');\n</code></pre> <p>Redirect to an external URI (note the second parameter set to <code>true</code>)</p> <pre><code>&lt;?php \n\nuse Phalcon\\Http\\Response;\n\n$response = new Response();\n\n$response-&gt;redirect('https://en.wikipedia.org', true);\n</code></pre> <p>Redirect to an external URI with a HTTP status code, handy for permanent or temporary redirections.</p> <pre><code>&lt;?php \n\nuse Phalcon\\Http\\Response;\n\n$response = new Response();\n\n$response-&gt;redirect('https://www.example.com/new-location', true, 301);\n</code></pre> <p>All internal URIs are generated using the url service (by default Phalcon\\Url). This example demonstrates how you can redirect using a route you have defined in your application:</p> <pre><code>&lt;?php \n\nuse Phalcon\\Http\\Response;\n\n$response = new Response();\n\nreturn $response-&gt;redirect(\n    [\n        'for'        =&gt; 'index-lang',\n        'lang'       =&gt; 'jp',\n        'controller' =&gt; 'index',\n    ]\n);\n</code></pre> <p>NOTE</p> <p>Even if there is a view associated with the current action, it will not be rendered since <code>redirect</code> disables the view.</p>"},{"location":"response/#http-cache","title":"HTTP Cache","text":"<p>One of the easiest ways to improve the performance in your applications and reduce the traffic is using HTTP Cache. The Phalcon\\Http\\Response object exposes methods that help with this task.</p> <p>NOTE</p> <p>Depending on the needs of your application, you might not want to control HTTP caching using Phalcon. There are several services available on the Internet that can help with that and could potentially be cheaper and easier to maintain (BitMitigate, Varnish etc.). Implementing HTTP Cache in your application will definitely help but it will have a small impact in the performance of your application. It is up to you to decide which strategy is best for your application and audience.</p> <p>HTTP Cache is implemented by setting certain headers in the response. The cache is set (using the headers) upon the first visit of the user to our application. The following headers help with HTTP Cache: * <code>Expires:</code> - Set the expiration date of the page. Once the page expires the browser will request a fresh copy of the page vs. using the cached one. * <code>Cache-Control:</code> - How long is a page considered fresh in the browser. * <code>Last-Modified:</code> - When was the last time that this page was modified by the application (avoids reloading). * <code>ETag:</code> - Also known as entity tag, is a unique identifier for each page, created using the modification timestamp. * <code>304:</code> - Send a <code>not modified</code> back</p>"},{"location":"response/#expires","title":"<code>Expires</code>","text":"<p>The expiration date is one of the easiest and most effective ways to cache a page in the client (browser). Starting from the current date we add the amount of time the page will be stored in the browser cache. The browser will not request a copy of this page until the time expires.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n$response   = new Response();\n$expiryDate = new DateTime();\n\n$expiryDate-&gt;modify('+2 months');\n\n$response-&gt;setExpires($expiryDate);\n</code></pre> <p>The Phalcon\\Http\\Response component automatically formats the date to the <code>GMT</code> timezone as expected in an <code>Expires</code> header. Irrespective of the timezone of your application, the component converts the time first to <code>UTC</code> and then sets the <code>Expires</code> header. Setting the expiry with a date in the past will instruct the browser to always request a fresh copy of the page. This is particularly useful if we want to force the client browsers to request a new copy of our page.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n$response   = new Response();\n$expiryDate = new DateTime();\n\n$expiryDate-&gt;modify('-10 minutes');\n\n$response-&gt;setExpires($expiryDate);\n</code></pre> <p>NOTE</p> <p>Browsers rely on the client machine's clock to identify if the date has passed or not. Therefore this caching mechanism has some limitations that the developer must account for (different timezones, clock skew etc.)</p>"},{"location":"response/#cache-control","title":"<code>Cache-Control</code>","text":"<p>This header provides a better to cache the pages served. We simply specify a time in seconds, instructing the browser that our content is cached for that amount of time.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n$response = new Response();\n\n$response-&gt;setHeader(\n    'Cache-Control', \n    'max-age=86400'\n);\n</code></pre> <p>If you do not want to call the <code>setHeaders()</code>, a utility method is available to you <code>setCache()</code> which sets the <code>Cache-Control</code> for you.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n$response = new Response();\n\n// $response-&gt;setHeader('Cache-Control', 'max-age=86400');\n$response-&gt;setCache(86400);\n</code></pre> <p>To invalidate the above or to instruct the browser to always request a fresh copy of the page, we can do the following:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n$response = new Response();\n\n$response-&gt;setHeader(\n    'Cache-Control', \n    'private, max-age=0, must-revalidate'\n);\n</code></pre>"},{"location":"response/#last-modified","title":"<code>Last-Modified</code>","text":"<p>You can also use the <code>setLastModified()</code> method to instruct the browser on when the page was last modified. This header is less accurate than the <code>E-Tag</code> header but can be used as a fallback mechanism.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n$response   = new Response();\n$expiryDate = new DateTime();\n\n$expiryDate-&gt;modify('+2 months');\n\n$response-&gt;setLastModified($expiryDate);\n</code></pre> <p>The Phalcon\\Http\\Response component automatically formats the date to the <code>GMT</code> timezone as expected in an <code>Last-Modified</code> header. Irrespective of the timezone of your application, the component converts the time first to <code>UTC</code> and then sets the <code>Last-Modified</code> header. Setting the expiry with a date in the past will instruct the browser to always request a fresh copy of the page. This is particularly useful if we want to force the client browsers to request a new copy of our page.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n$response   = new Response();\n$expiryDate = new DateTime();\n\n$expiryDate-&gt;modify('-10 minutes');\n\n$response-&gt;setLastModified($expiryDate);\n</code></pre>"},{"location":"response/#e-tag","title":"<code>E-Tag</code>","text":"<p>An <code>entity-tag</code> or <code>E-tag</code> is a unique identifier that helps the browser identify if the page has changed or not between requests. The identifier is usually calculated taking into account the last modified date, the contents and other identifying parameters for the page:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Http\\Response;\n\n$response = new Response();\n\n$mostRecentDate = Invoices::maximum(\n    [\n        'column' =&gt; 'inv_created_date',\n    ]\n);\n\n$eTag = sha1($mostRecentDate);\n\n$response-&gt;setHeader('E-Tag', $eTag);\n</code></pre>"},{"location":"response/#304","title":"<code>304</code>","text":"<p>Generating a <code>not-modified</code> response also helps with caching, by instructing the browser that the contents have not been modified, and therefore the locally cached copy of the data on the browser should be used.</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Http\\Response;\n\n$response = new Response();\n\n$response-&gt;setNotModified();\n</code></pre>"},{"location":"response/#dependency-injection","title":"Dependency Injection","text":"<p>The Phalcon\\Http\\Response object implements the Phalcon\\Di\\InjectionAwareInterface interface. As a result, the DI container is available and can be retrieved using the <code>getDI()</code> method. A container can also be set using the <code>setDI()</code> method.</p> <p>If you have used the Phalcon\\Di\\FactoryDefault DI container for your application, the service is already registered for you. You can access it using the <code>response</code> name. The example below shows the usage in a controller</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * Class PostsController\n * \n * @property Response $response\n */\nclass PostsController extends Controller\n{\n    public function uploadAction()\n    {\n        return $this\n            -&gt;response\n            -&gt;setStatusCode(404, 'Not Found')\n            -&gt;setContent(\"Sorry, the page doesn't exist\")\n            -&gt;send();\n    }\n}\n</code></pre>"},{"location":"response/#events","title":"Events","text":"<p>The Phalcon\\Http\\Response object implements the Phalcon\\Events\\EventsAware interfaces. As a result <code>getEventsManager()</code> and <code>setEventsManager()</code> are available for you to use.</p> Event Description Can stop operation <code>afterSendHeaders</code> Fires after the headers have been sent No <code>beforeSendHeaders</code> Fires before the headers have been sent Yes"},{"location":"routing/","title":"Routing Component","text":""},{"location":"routing/#overview","title":"Overview","text":"<p>The Phalcon\\Mvc\\Router component allows you to define routes that are mapped to controllers or handlers that receive and can handle the request. The router has two modes: MVC mode and match-only mode. The first mode is ideal for working with MVC applications.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n$router-&gt;add(\n    '/admin/invoices/list',\n    [\n        'controller' =&gt; 'invoices',\n        'action'     =&gt; 'list',\n    ]\n);\n\n$router-&gt;handle(\n    $_SERVER[\"REQUEST_URI\"]\n);\n</code></pre>"},{"location":"routing/#constants","title":"Constants","text":"<p>There are two constants available for the Phalcon\\Mvc\\Router component that are used to define the position of the route in the processing stack.</p> <ul> <li><code>POSITION_FIRST</code></li> <li><code>POSITION_LAST</code></li> </ul>"},{"location":"routing/#methods","title":"Methods","text":"<pre><code>public function __construct(\n    bool $defaultRoutes = true\n)\n</code></pre> <p>Phalcon\\Mvc\\Router constructor</p> <p><pre><code>public function add(\n    string $pattern, \n    mixed $paths = null, \n    mixed $httpMethods = null, \n    mixed $position = Router::POSITION_LAST\n): RouteInterface\n</code></pre>  Adds a route to the router without any HTTP constraint</p> <pre><code>use Phalcon\\Mvc\\Router;\n\n$router-&gt;add(\"/about\", \"About::index\");\n\n$router-&gt;add(\n    \"/about\",\n    \"About::index\",\n    [\"GET\", \"POST\"]\n);\n\n$router-&gt;add(\n    \"/about\",\n    \"About::index\",\n    [\"GET\", \"POST\"],\n    Router::POSITION_FIRST\n);\n</code></pre> <p><pre><code>public function addConnect(\n    string $pattern, \n    mixed $paths = null, \n    mixed $position = Router::POSITION_LAST\n): RouteInterface\n</code></pre> Adds a route to the router that only match if the HTTP method is <code>CONNECT</code></p> <p><pre><code>public function addDelete(\n    string $pattern, \n    mixed $paths = null, \n    mixed $position = Router::POSITION_LAST\n): RouteInterface\n</code></pre> Adds a route to the router that only match if the HTTP method is <code>DELETE</code></p> <p><pre><code>public function addGet(\n    string $pattern, \n    mixed $paths = null, \n    mixed $position = Router::POSITION_LAST\n): RouteInterface\n</code></pre> Adds a route to the router that only match if the HTTP method is <code>GET</code></p> <p><pre><code>public function addHead(\n    string $pattern, \n    mixed $paths = null, \n    mixed $position = Router::POSITION_LAST\n): RouteInterface\n</code></pre> Adds a route to the router that only match if the HTTP method is <code>HEAD</code></p> <p><pre><code>public function addOptions(\n    string $pattern, \n    mixed $paths = null, \n    mixed $position = Router::POSITION_LAST\n): RouteInterface\n</code></pre> Add a route to the router that only match if the HTTP method is <code>OPTIONS</code></p> <p><pre><code>public function addPatch(\n    string $pattern, \n    mixed $paths = null, \n    mixed $position = Router::POSITION_LAST\n): RouteInterface\n</code></pre> Adds a route to the router that only match if the HTTP method is <code>PATCH</code></p> <p><pre><code>public function addPost(\n    string $pattern, \n    mixed $paths = null, \n    mixed $position = Router::POSITION_LAST\n): RouteInterface\n</code></pre> Adds a route to the router that only match if the HTTP method is <code>POST</code></p> <p><pre><code>public function addPurge(\n    string $pattern, \n    mixed $paths = null, \n    mixed $position = Router::POSITION_LAST\n): RouteInterface\n</code></pre> Adds a route to the router that only match if the HTTP method is <code>PURGE</code> (Squid and Varnish support)</p> <p><pre><code>public function addPut(\n    string $pattern, \n    mixed $paths = null, \n    mixed $position = Router::POSITION_LAST\n): RouteInterface\n</code></pre> Adds a route to the router that only match if the HTTP method is <code>PUT</code></p> <p><pre><code>public function addTrace(\n    string $pattern, \n    mixed $paths = null, \n    mixed $position = Router::POSITION_LAST\n): RouteInterface\n</code></pre> Adds a route to the router that only match if the HTTP method is <code>TRACE</code></p> <p><pre><code>public function attach(\n    RouteInterface $route, \n    mixed $position = Router::POSITION_LAST\n): RouterInterface\n</code></pre>  Attach Route object to the routes stack.</p> <pre><code>use Phalcon\\Mvc\\Router;\nuse Phalcon\\Mvc\\Router\\Route;\n\nclass CustomRoute extends Route {\n     // ...\n}\n\n$router = new Router();\n\n$router-&gt;attach(\n    new CustomRoute(\n        \"/about\", \n        \"About::index\", \n        [\"GET\", \"HEAD\"]\n    ),\n    Router::POSITION_FIRST\n);\n</code></pre> <p><pre><code>public function clear(): void\n</code></pre> Removes all the pre-defined routes</p> <p><pre><code>public function getActionName(): string\n</code></pre> Returns the processed action name</p> <p><pre><code>public function getControllerName(): string\n</code></pre> Returns the processed controller name</p> <p><pre><code>public function getMatchedRoute(): RouteInterface\n</code></pre> Returns the route that matches the handled URI</p> <p><pre><code>public function getMatches(): array\n</code></pre> Returns the sub expressions in the regular expression matched</p> <p><pre><code>public function getModuleName(): string\n</code></pre> Returns the processed module name</p> <p><pre><code>public function getNamespaceName(): string\n</code></pre> Returns the processed namespace name</p> <p><pre><code>public function getParams(): array\n</code></pre> Returns the processed parameters</p> <p><pre><code>public function getRouteById(\n    mixed $id\n): RouteInterface | bool\n</code></pre> Returns a route object by its id</p> <p><pre><code>public function getRouteByName(\n    string $name\n): RouteInterface | bool\n</code></pre> Returns a route object by its name</p> <p><pre><code>public function getRoutes(): RouteInterface[]\n</code></pre> Returns all the routes defined in the router</p> <p><pre><code>public function handle(string $uri): void\n</code></pre> Handles routing information received from the rewrite engine</p> <pre><code>$router-&gt;handle(\"/posts/edit/1\");\n</code></pre> <p><pre><code>public function isExactControllerName(): bool\n</code></pre> Returns whether controller name should not be mangled</p> <p><pre><code>public function mount(\n    GroupInterface $group\n): RouterInterface\n</code></pre> Mounts a group of routes in the router</p> <p><pre><code>public function notFound(\n    mixed $paths\n): RouterInterface\n</code></pre> Set a group of paths to be returned when none of the defined routes are matched</p> <p><pre><code>public function removeExtraSlashes(\n    bool $remove\n): RouterInterface\n</code></pre> Set whether router must remove the extra slashes in the handled routes</p> <p><pre><code>public function setDefaultAction(\n    string $actionName\n): RouterInterface\n</code></pre> Sets the default action name</p> <p><pre><code>public function setDefaultController(\n    string $controllerName\n): RouterInterface\n</code></pre> Sets the default controller name</p> <p><pre><code>public function setDefaultModule(\n    string $moduleName\n): RouterInterface\n</code></pre> Sets the name of the default module</p> <p><pre><code>public function setDefaultNamespace(\n    string $namespaceName\n): RouterInterface\n</code></pre> Sets the name of the default namespace</p> <p><pre><code>public function setDefaults(\n    array $defaults\n): RouterInterface\n</code></pre> Sets an array of default paths. If a route is missing a path the router will use the defined here. This method must not be used to set a 404 route</p> <pre><code>$router-&gt;setDefaults(\n    [\n        \"module\" =&gt; \"common\",\n        \"action\" =&gt; \"index\",\n    ]\n);\n</code></pre> <p><pre><code>public function getDefaults(): array\n</code></pre> Returns an array of default parameters</p> <p><pre><code>public function wasMatched(): bool\n</code></pre> Checks if the router matches any of the defined routes</p>"},{"location":"routing/#defining-routes","title":"Defining Routes","text":"<p>Phalcon\\Mvc\\Router provides advanced routing capabilities. In MVC mode, you can define routes and map them to controllers/actions that you require. A route is defined as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n$router-&gt;add(\n    '/admin/invoices/list',\n    [\n        'controller' =&gt; 'invoices',\n        'action'     =&gt; 'list',\n    ]\n);\n\n$router-&gt;add(\n    '/admin/customers/list',\n    [\n        'controller' =&gt; 'customers',\n        'action'     =&gt; 'list',\n    ]\n);\n\n$router-&gt;handle(\n    $_SERVER[\"REQUEST_URI\"]\n);\n</code></pre> <p>The first parameter of the <code>add()</code> method is the pattern you want to match and, optionally, the second parameter is a set of paths. In the above example, for the URI <code>/admin/invoices/list</code>, the <code>InvoicesController</code> will be loaded and the <code>listAction</code> will be called. It is important to remember that the router does not execute the controller and action, it only collects this information and then forwards it to the Phalcon\\Mvc\\Dispatcher which executes them.</p> <p>An application can have many paths and defining routes one by one can be a cumbersome task. Phalcon\\Mvc\\Router offers an easier way to register routes.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n$router-&gt;add(\n    '/admin/:controller/:action/:params',\n    [\n        'controller' =&gt; 1,\n        'action'     =&gt; 2,\n        'params'     =&gt; 3,\n    ]\n);\n</code></pre> <p>In the example above, we are using wildcards to make a route valid for many URIs. For example, by accessing the following URL (<code>/admin/customers/view/12345/1</code>) would produce:</p> Controller Action Parameter Parameter <code>customers</code> <code>view</code> <code>12345</code> <code>1</code> <p>The <code>add()</code> method receives a pattern that can optionally have predefined placeholders and regular expression modifiers. All the routing patterns must start with a forward slash character (<code>/</code>). The regular expression syntax used is the same as the PCRE regular expressions. </p> <p>NOTE</p> <p>It is not necessary to add regular expression delimiters. All route patterns are case-insensitive.</p> <p>The second parameter defines how the matched parts should bind to the controller/action/parameters. Matching parts are placeholders or subpatterns delimited by parentheses (round brackets). In the example given above, the first subpattern matched (<code>:controller</code>) is the controller part of the route, the second the action (<code>:action</code>) and after that any parameters passed (<code>:params</code>).</p> <p>These placeholders make the route expressions more readable and easier to understand. The following placeholders are supported:</p> Placeholder Regular Expression Matches <code>/:module</code> <code>/([a-zA-Z0-9\\_\\-]+)</code> Valid module name with alpha-numeric characters only <code>/:controller</code> <code>/([a-zA-Z0-9\\_\\-]+)</code> Valid controller name with alpha-numeric characters only <code>/:action</code> <code>/([a-zA-Z0-9_-]+)</code> Valid action name with alpha-numeric characters only <code>/:params</code> <code>(/.*)*</code> List of optional words separated by slashes. Only use this placeholder at the end of a route <code>/:namespace</code> <code>/([a-zA-Z0-9\\_\\-]+)</code> Single level namespace name <code>/:int</code> <code>/([0-9]+)</code> Integer parameter <p>Controller names are camelized, this means that characters (<code>-</code>) and (<code>_</code>) are removed and the next character is uppercased. For instance, <code>some_controller</code> is converted to <code>SomeController</code>.</p> <p>Since you can add as many routes as needed using the <code>add()</code> method, the order in which routes are added indicates their relevance. The routes added last have more relevance than the ones added above them. Internally, all defined routes are traversed in reverse order until Phalcon\\Mvc\\Router finds the one that matches the given URI and processes it, while ignoring the rest.</p>"},{"location":"routing/#named-parameters","title":"Named Parameters","text":"<p>The example below demonstrates how to define names to route parameters:</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    //         1     /     2    /    3     /   4\n    '/admin/([0-9]{4})/([0-9]{2})/([0-9]{2})/:params',\n    [\n        'controller' =&gt; 'invoices',\n        'action'     =&gt; 'view',\n        'year'       =&gt; 1, // ([0-9]{4})\n        'month'      =&gt; 2, // ([0-9]{2})\n        'day'        =&gt; 3, // ([0-9]{2})\n        'params'     =&gt; 4, // :params\n    ]\n);\n</code></pre> <p>In the above example, the route does not define a <code>controller</code> or <code>action</code>. Those are replaced with fixed values (<code>invoices</code> and <code>view</code>). The user will never know the underlying controller that is dispatched by the request. In the controller, those named parameters can be accessed as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\Dispatcher;\n\n/**\n * @property Dispatcher $dispatcher\n */\nclass InvoicesController extends Controller\n{\n    public function viewAction()\n    {\n        // year\n        $year = $this-&gt;dispatcher-&gt;getParam('year');\n\n        // month\n        $month = $this-&gt;dispatcher-&gt;getParam('month');\n\n        // day\n        $day = $this-&gt;dispatcher-&gt;getParam('day');\n\n        // ...\n    }\n}\n</code></pre> <p>Note that the values of the parameters are obtained from the dispatcher. There is also another way to create named parameters as part of the pattern:</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    '/admin/{year}/{month}/{day}/{invoiceNo:[0-9]+}',\n    [\n        'controller' =&gt; 'invoices',\n        'action'     =&gt; 'view',\n    ]\n);\n</code></pre> <p>You can access their values in the same way as before:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\Dispatcher;\n\n/**\n * @property Dispatcher $dispatcher\n */\nclass InvoicesController extends Controller\n{\n    public function viewAction()\n    {\n        // year\n        $year = $this-&gt;dispatcher-&gt;getParam('year');\n\n        // month\n        $month = $this-&gt;dispatcher-&gt;getParam('month');\n\n        // day \n        $day = $this-&gt;dispatcher-&gt;getParam('day');\n\n        // invoiceNo\n        $invoicNo = $this-&gt;dispatcher-&gt;getParam('invoiceNo');\n\n        // ...\n    }\n}\n</code></pre>"},{"location":"routing/#short-syntax","title":"Short Syntax","text":"<p>Phalcon\\Mvc\\Router also offers an alternative, shorter syntax. The following examples produce the same result:</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    '/admin/{year:[0-9]{4}}/{month:[0-9]{2}}/{day:[0-9]{2}}/:params',\n    'Invoices::view'\n);\n\n$router-&gt;add(\n    '/admin/([0-9]{4})/([0-9]{2})/([0-9]{2})/:params',\n    [\n        'controller' =&gt; 'invoices',\n        'action'     =&gt; 'view',\n        'year'       =&gt; 1, // ([0-9]{4})\n        'month'      =&gt; 2, // ([0-9]{2})\n        'day'        =&gt; 3, // ([0-9]{2})\n        'params'     =&gt; 4, // :params\n    ]\n);\n</code></pre>"},{"location":"routing/#array-and-short-syntax","title":"Array and Short Syntax","text":"<p>Array and short syntax can be mixed to define a route, in this case note that named parameters automatically are added to the route paths according to the position on which they were defined:</p> <p><pre><code>&lt;?php\n\n$router-&gt;add(\n    '/admin/{year:[0-9]{4}}/([0-9]{2})/([0-9]{2})/:params',\n    [\n        'controller' =&gt; 'invoices',\n        'action'     =&gt; 'view',\n        'month'      =&gt; 2, // ([0-9]{2}) // 2\n        'day'        =&gt; 3, // ([0-9]{2}) // 3\n        'params'     =&gt; 4, // :params    // 4\n    ]\n);\n</code></pre> The first position must be skipped because it is used for the named parameter <code>year</code>.</p>"},{"location":"routing/#modules","title":"Modules","text":"<p>You can define routes with modules in the path. This is specially suitable to multi-module applications. You can define a default route that includes a module wildcard.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router(false);\n\n$router-&gt;add(\n    '/:module/:controller/:action/:params',\n    [\n        'module'     =&gt; 1,\n        'controller' =&gt; 2,\n        'action'     =&gt; 3,\n        'params'     =&gt; 4,\n    ]\n);\n</code></pre> <p>With the above route, you need to always have the module name as part of your URL. For example, for the following URL: <code>/admin/invoices/view/12345</code>, will be processed as:</p> Module Controller Action Parameter <code>admin</code> <code>invoices</code> <code>view</code> <code>12345</code> <p>Or you can bind specific routes to specific modules:</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    '/login',\n    [\n        'module'     =&gt; 'session',\n        'controller' =&gt; 'login',\n        'action'     =&gt; 'index',\n    ]\n);\n\n$router-&gt;add(\n    '/invoices/:action',\n    [\n        'module'     =&gt; 'admin',\n        'controller' =&gt; 'invoices',\n        'action'     =&gt; 1,\n    ]\n);\n</code></pre> <p>Or bind them to specific namespaces:</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    '/:namespace/login',\n    [\n        'namespace'  =&gt; 1,\n        'controller' =&gt; 'login',\n        'action'     =&gt; 'index',\n    ]\n);\n</code></pre> <p>The full namespace needs to be passed separately:</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    '/login',\n    [\n        'namespace'  =&gt; 'Admin\\Controllers',\n        'controller' =&gt; 'login',\n        'action'     =&gt; 'index',\n    ]\n);\n</code></pre>"},{"location":"routing/#http-methods","title":"HTTP Methods","text":"<p>When you add a route using simply <code>add()</code>, the route will be enabled for any HTTP method. Sometimes we can restrict a route to a specific method. This is particularly useful when creating RESTful applications.</p> <pre><code>&lt;?php\n\n// GET\n$router-&gt;addGet(\n    '/invoices/edit/{id}',\n    'Invoices::edit'\n);\n\n// POST\n$router-&gt;addPost(\n    '/invoices/save',\n    'Invoices::save'\n);\n\n// POST/PUT\n$router-&gt;add(\n    '/invoices/update',\n    'Invoices::update'\n)-&gt;via(\n    [\n        'POST',\n        'PUT',\n    ]\n);\n</code></pre>"},{"location":"routing/#converters","title":"Converters","text":"<p>Converters are snippets of code that allow you to convert the parameters of a route prior to it being sent to the dispatcher</p> <p><pre><code>&lt;?php\n\n$route = $router-&gt;add(\n    '/products/{slug:[a-z\\-]+}',\n    [\n        'controller' =&gt; 'products',\n        'action'     =&gt; 'show',\n    ]\n);\n\n$route-&gt;convert(\n    'slug',\n    function ($slug) {\n        return str_replace('-', '', $slug);\n    }\n);\n</code></pre> In the above example, the parameter's name allows dashes, therefore a URL can be <code>/products/new-ipod-nano-generation</code>. The <code>convert</code> method will change the parameter to <code>newipodnanogeneration</code>.</p> <p>Another use case for converters is when binding a model to a route. This allows the model to be passed into the defined action directly.</p> <p><pre><code>&lt;?php\n\n$route = $router-&gt;add(\n    '/products/{id}',\n    [\n        'controller' =&gt; 'products',\n        'action'     =&gt; 'show',\n    ]\n);\n\n$route-&gt;convert(\n    'id',\n    function ($id) {\n        return Product::findFirstById($id);\n    }\n);\n</code></pre> In the above example the ID is passed in the URL and our converter gets the record from the database, passing it back.</p>"},{"location":"routing/#groups","title":"Groups","text":"<p>If a set of routes have common paths they can be grouped for easier maintenance. To achieve this, we utilize the Phalcon\\Mvc\\Router\\Group component</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\nuse Phalcon\\Mvc\\Router\\Group;\n\n$router   = new Router();\n$invoices = new RouterGroup(\n    [\n        'module'     =&gt; 'admin',\n        'controller' =&gt; 'invoices',\n    ]\n);\n\n$invoices-&gt;setPrefix('/invoices');\n\n$invoices-&gt;add(\n    '/list',\n    [\n        'action' =&gt; 'list',\n    ]\n);\n\n$invoices-&gt;add(\n    '/edit/{id}',\n    [\n        'action' =&gt; 'edit',\n    ]\n);\n\n$invoices-&gt;add(\n    '/view',\n    [\n        'controller' =&gt; 'common',\n        'action'     =&gt; 'index',\n    ]\n);\n\n$router-&gt;mount($invoices);\n</code></pre> In the above example, we first create a group with a common module and controller. We then add the prefix for the group to be <code>/invoices</code>. We then add more routes to the group, some without parameters and some with. The last route allows us to use a different controller than the default one (<code>common</code>). Finally, we add the group to the router.</p> <p>We can extend the Phalcon\\Mvc\\Router\\Group component and register our routes in it on a per group basis. This allows us to better organize the routes of our application.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router\\Group;\n\nclass InvoicesRoutes extends Group\n{\n    public function initialize()\n    {\n        $this-&gt;setPaths(\n            [\n                'module'    =&gt; 'invoices',\n                'namespace' =&gt; 'Invoices\\Controllers',\n            ]\n        );\n\n        $this-&gt;setPrefix('/invoices');\n\n        $this-&gt;add(\n            '/list',\n            [\n                'action' =&gt; 'list',\n            ]\n        );\n\n        $this-&gt;add(\n            '/edit/{id}',\n            [\n                'action' =&gt; 'edit',\n            ]\n        );\n\n        $this-&gt;add(\n            '/view',\n            [\n                'controller' =&gt; 'common',\n                'action'     =&gt; 'index',\n            ]\n        );\n    }\n}\n</code></pre> <p>Now we can mount the custom group class in the router:</p> <pre><code>&lt;?php\n\n$router-&gt;mount(\n    new InvoicesRoutes()\n);\n</code></pre>"},{"location":"routing/#matching-routes","title":"Matching Routes","text":"<p>A valid URI must be passed to the Router so that it can process it and find a matching route. By default, the routing URI is taken from the <code>$_GET['_url']</code> variable that is created by the rewrite engine module. A couple of rewrite rules that work very well with Phalcon are:</p> <pre><code>RewriteEngine On\nRewriteCond   %{REQUEST_FILENAME} !-d\nRewriteCond   %{REQUEST_FILENAME} !-f\nRewriteRule   ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n</code></pre> <p>In this configuration, any requests to files or folders that do not exist will be sent to <code>index.php</code>. The following example shows how to use this as a stand alone component:</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n// ...\n\n$router-&gt;handle(\n    $_GET[\"_url\"]\n);\n\necho $router-&gt;getControllerName();\necho $router-&gt;getActionName();\n\n$route = $router-&gt;getMatchedRoute();\n</code></pre> In the above example, we first create a router object. We can have some code after that, such as defining services, routes etc.. We then take the <code>_url</code> element from the <code>$_GET</code> superglobal and after that we can get the controller name or the action name or even get back the matched route.  </p>"},{"location":"routing/#naming-routes","title":"Naming Routes","text":"<p>Each route that is added to the router is stored internally as a Phalcon\\Mvc\\Router\\Route object. That class encapsulates all the details of each route. For instance, we can give a name to a path to identify it uniquely in our application. This is especially useful if you want to create URLs from it.</p> <pre><code>&lt;?php\n\n$route = $router-&gt;add(\n    '/admin/{year:[0-9]{4}}/{month:[0-9]{2}}/{day:[0-9]{2}}/{id:[0-9]{4}',\n    'Invoices::view'\n);\n\n$route-&gt;setName('invoices-view');\n</code></pre> <p>Then, using for example the component Phalcon\\Url we can build routes from the defined name:</p> <pre><code>&lt;?php\n\n// /admin/2019/12/25/1234\necho $url-&gt;get(\n    [\n        'for'   =&gt; 'invoices-view',\n        'year'  =&gt; '2019',\n        'month' =&gt; '12',\n        'day'   =&gt; '25',\n        'id'    =&gt; '1234',\n    ]\n);\n</code></pre>"},{"location":"routing/#default-behavior","title":"Default Behavior","text":"<p>Phalcon\\Mvc\\Router has a default behavior providing simple routing that always expects a URI and matches the following pattern: </p> <pre><code>/:controller/:action/:params\n</code></pre> <p>For example, for a URL like this <code>https://dev.phalcon.od/download/linux/ubuntu.html</code>, this router will translate it as follows:</p> Controller Action Parameter <code>DownloadController</code> <code>linuxAction</code> <code>ubuntu.html</code> <p>If you do not want the router to follow this behavior, you must create the router passing <code>false</code> in the constructor.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router(false);\n</code></pre>"},{"location":"routing/#default-route","title":"Default Route","text":"<p>When your application is accessed without any route, the <code>/</code> route is used to determine what paths must be used to show the initial page in your application</p> <pre><code>&lt;?php\n\n$router-&gt;add(\n    '/',\n    [\n        'controller' =&gt; 'index',\n        'action'     =&gt; 'index',\n    ]\n);\n</code></pre>"},{"location":"routing/#not-found-404","title":"Not Found (404)","text":"<p>If none of the routes, specified in the router, match, you can define a 404 controller/action by using the <code>notFound</code> method.</p> <pre><code>&lt;?php\n\n$router-&gt;notFound(\n    [\n        'controller' =&gt; 'index',\n        'action'     =&gt; 'fourOhFour',\n    ]\n);\n</code></pre> <p>NOTE</p> <p>This will only work if the router was created without default routes: <code>$router = Phalcon\\Mvc\\Router(false);</code></p>"},{"location":"routing/#defaults","title":"Defaults","text":"<p>You can define default values for <code>module</code>, <code>controller</code> and `action. When a route is missing any of these elements in its path, the router will automatically use the default value set.</p> <pre><code>&lt;?php\n\n$router-&gt;setDefaultModule('admin');\n$router-&gt;setDefaultNamespace('Admin\\Controllers');\n$router-&gt;setDefaultController('index');\n$router-&gt;setDefaultAction('index');\n\n$router-&gt;setDefaults(\n    [\n        'controller' =&gt; 'index',\n        'action'     =&gt; 'index',\n    ]\n);\n</code></pre>"},{"location":"routing/#trailing-slashes","title":"Trailing Slashes","text":"<p>Sometimes a route could be accessed with extra/trailing slashes. The extra slashes will produce a not-found status in the dispatcher, which is not what we want. You can set up the router to automatically remove the slashes from the end of handled route.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n$router-&gt;removeExtraSlashes(true);\n</code></pre> <p>Or, you can modify specific routes to optionally accept trailing slashes:</p> <p><pre><code>&lt;?php\n\n$route = $router-&gt;add(\n    '/admin/:controller/status[/]{0,1}',\n    [\n        'controller' =&gt; 2,\n        'action'     =&gt; 'status',\n    ]\n);\n</code></pre> In the above, the <code>[/]{0,1}</code> allows for an optional trailing slash</p>"},{"location":"routing/#callbacks","title":"Callbacks","text":"<p>Sometimes, routes should only be matched if they meet specific conditions. You can add arbitrary conditions to routes using the <code>beforeMatch</code> callback. If this function return <code>false</code>, the route will be treated as non-matched:</p> <p><pre><code>&lt;?php\n\n$route = $router-&gt;add(\n    '/login',\n    [\n        'module'     =&gt; 'admin',\n        'controller' =&gt; 'session',\n    ]\n);\n\n$route-&gt;beforeMatch(\n    function ($uri, $route) {\n        if (true === isset($_SERVER['HTTP_X_REQUESTED_WITH']) &amp;&amp; \n            $_SERVER['HTTP_X_REQUESTED_WITH'] === 'XMLHttpRequest'\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n);\n</code></pre> The above will check if the request has been made with AJAX and return <code>false</code> if it was not</p> <p>You can create a filter class, to allow you to inject the same functionality in different routes.</p> <pre><code>&lt;?php\n\nclass AjaxFilter\n{\n    public function check()\n    {\n        return $_SERVER['HTTP_X_REQUESTED_WITH'] === 'XMLHttpRequest';\n    }\n}\n</code></pre> <p>To set this up, we just add the class to the <code>beforeMatch</code> call.</p> <pre><code>&lt;?php\n\n$route = $router-&gt;add(\n    '/login',\n    [\n        'module'     =&gt; 'admin',\n        'controller' =&gt; 'session',\n    ]\n);\n\n$route-&gt;beforeMatch(\n    [\n        new AjaxFilter(),\n        'check'\n    ]\n);\n</code></pre> <p>Finally you can use the <code>beforeMatch</code> method (or event) to check whether this was an AJAX call or not.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\DiInterface;\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Mvc\\Router\\Route;\n\n$route = $router-&gt;add(\n    '/login',\n    [\n        'module'     =&gt; 'admin',\n        'controller' =&gt; 'session',\n    ]\n);\n\n$route-&gt;beforeMatch(\n    function ($uri, $route) {\n        /**\n         * @var string     $uri\n         * @var Route       $route\n         * @var DiInterface $this\n         * @var Request     $request\n         */\n        $request = $this-&gt;getShared('request');\n\n        return $request-&gt;isAjax();\n    }\n);\n</code></pre>"},{"location":"routing/#hostname","title":"Hostname","text":"<p>The Phalcon\\Mvc\\Router component also allows for hostname constraints. This means that the specific routes or a group of routes can be restricted to only match the route if it originated from a specific hostname.</p> <pre><code>&lt;?php\n\n$route = $router-&gt;add(\n    '/admin/invoices/:action/:params',\n    [\n        'module'     =&gt; 'admin',\n        'controller' =&gt; 'invoices',\n        'action'     =&gt; 1,\n        'params'     =&gt; 2,\n    ]\n);\n\n$route-&gt;setHostName('dev.phalcon.ld');\n</code></pre> <p>The hostname can also be passed as a regular expressions:</p> <pre><code>&lt;?php\n\n$route = $router-&gt;add(\n    '/admin/invoices/:action/:params',\n    [\n        'module'     =&gt; 'admin',\n        'controller' =&gt; 'invoices',\n        'action'     =&gt; 1,\n        'params'     =&gt; 2,\n    ]\n);\n\n$route-&gt;setHostName('([a-z]+).phalcon.ld');\n</code></pre> <p>When using groups of routes, you can set the hostname constraints that apply for every route in the group.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router\\Group;\n\n$invoices = new Group(\n    [\n        'module'     =&gt; 'admin',\n        'controller' =&gt; 'invoices',\n    ]\n);\n\n$invoices-&gt;setHostName('dev.phalcon.ld');\n$invoices-&gt;setPrefix('/invoices');\n\n$invoices-&gt;add(\n    '/',\n    [\n        'action' =&gt; 'index',\n    ]\n);\n\n$invoices-&gt;add(\n    '/list',\n    [\n        'action' =&gt; 'list',\n    ]\n);\n\n$invoices-&gt;add(\n    '/view/{id}',\n    [\n        'action' =&gt; 'view',\n    ]\n);\n\n$router-&gt;mount($invoices);\n</code></pre>"},{"location":"routing/#testing","title":"Testing","text":"<p>This component does not have any dependencies. As such you can create unit tests to test your routes.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n$testRoutes = [\n    '/',\n    '/index',\n    '/index/index',\n    '/index/test',\n    '/products',\n    '/products/index/',\n    '/products/show/101',\n];\n\n$router = new Router();\n\nforeach ($testRoutes as $testRoute) {\n    // Handle the route\n    $router-&gt;handle($testRoute);\n\n    echo 'Testing ', $testRoute, '&lt;br&gt;';\n\n    // Check if some route was matched\n    if ($router-&gt;wasMatched()) {\n        echo 'Controller: ', $router-&gt;getControllerName(), '&lt;br&gt;';\n        echo 'Action: ', $router-&gt;getActionName(), '&lt;br&gt;';\n    } else {\n        echo \"The route wasn't matched by any route&lt;br&gt;\";\n    }\n\n    echo '&lt;br&gt;';\n}\n</code></pre>"},{"location":"routing/#events","title":"Events","text":"<p>Similar to other Phalcon components, Phalcon\\Mvc\\Router also has events, when an Events Manager is present. The available events are:</p> Event Fired when <code>router:afterCheckRoutes</code> After checking all the routes <code>router:beforeCheckRoute</code> Before checking a route <code>router:beforeCheckRoutes</code> Before checking all loaded routes <code>router:beforeMount</code> Before mounting a new route <code>router:matchedRoute</code> When a route is matched <code>router:notMatchedRoute</code> When a route is not matched"},{"location":"routing/#annotations","title":"Annotations","text":"<p>This component provides a variant that is integrated with the annotations service. Using this strategy you can write the routes directly in the controllers instead of adding them in router component directly.</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router\\Annotations;\n\n$container['router'] = function () {\n    $router = new Annotations(false);\n\n    $router-&gt;addResource('Invoices', '/admin/invoices');\n\n    return $router;\n};\n</code></pre> In the above example, we utilize the Phalcon\\Mvc\\Router\\Annotations component to set up our routes. We pass <code>false</code> to remove the default behavior. After that we are instructing the component to read the annotations from the <code>InvoicesController</code> if the URI matches <code>/admin/invoices</code>.</p> <p>The <code>InvoicesController</code> will need to have the following implementation:</p> <pre><code>&lt;?php\n\n/**\n * @RoutePrefix('/admin/invoices')\n */\nclass InvoicesController\n{\n    /**\n     * @Get(\n     *     '/'\n     * )\n     */\n    public function indexAction()\n    {\n\n    }\n\n    /**\n     * @Get(\n     *     '/edit/{id:[0-9]+}',\n     *     name='invoice-edit'\n     * )\n     */\n    public function editAction($id)\n    {\n\n    }\n\n    /**\n     * @Route(\n     *     '/save',\n     *     methods={'POST', 'PUT'},\n     *     name='invoice-save'\n     * )\n     */\n    public function saveAction()\n    {\n\n    }\n\n    /**\n     * @Route(\n     *     '/delete/{id:[0-9]+}',\n     *     methods='DELETE',\n     *     converters={\n     *         id='MyConverters::checkId'\n     *     }\n     * )\n     */\n    public function deleteAction($id)\n    {\n\n    }\n}\n</code></pre> <p>Only methods marked with valid annotations are used as routes. The available annotations are:</p> Annotation Description Usage <code>Delete</code> Restrict the HTTP method to <code>DELETE</code> <code>@Delete('/invoices/delete/{id}')</code> <code>Get</code> Restrict the HTTP method to <code>GET</code> <code>@Get('/invoices/search')</code> <code>Options</code> Restrict the HTTP method to <code>OPTIONS</code> <code>@Option('/invoices/info')</code> <code>Post</code> Restrict the HTTP method to <code>POST</code> <code>@Post('/invoices/save')</code> <code>Put</code> Restrict the HTTP method to <code>PUT</code> <code>@Put('/invoices/save')</code> <code>Route</code> Mark a method as a route. Must be placed in a method docblock <code>@Route('/invoices/show')</code> <code>RoutePrefix</code> Prefix to be prepended to each route URI. Must be placed in the class docblock <code>@RoutePrefix('/invoices')</code> <p>For annotations that add routes, the following parameters are supported:</p> Name Description Usage <code>converters</code> A hash of converters for the parameters <code>@Route('/posts/{id}/{slug}', converter={id='MyConverter::getId'})</code> <code>methods</code> One or more HTTP methods allowed for the route <code>@Route('/api/products', methods={'GET', 'POST'})</code> <code>name</code> The name for the route <code>@Route('/api/products', name='get-products')</code> <code>paths</code> Paths array for the route <code>@Route('/invoices/view/{id}/{slug}', paths={module='backend'})</code> <p>If you are using modules in your application, it is better use the <code>addModuleResource()</code> method:</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router\\Annotations;\n\n$container['router'] = function () {\n    $router = new Annotations(false);\n\n    $router-&gt;addModuleResource(\n        'admin', \n        'Invoices', \n        '/admin/invoices'\n    );\n\n    return $router;\n};\n</code></pre> In the above we will read the annotations from <code>Admin\\Controllers\\InvoicesController</code> if the URI starts with <code>/admin/invoices</code>.</p> <p>The router also understand prefixes to ensure that the routes are resolved as fast as possible. For instance for the following routes:</p> <pre><code>/clients/{clientId:[0-9]+}/\n/clients/{clientId:[0-9]+}/robots\n/clients/{clientId:[0-9]+}/parts\n</code></pre> <p>only the <code>/clients</code> prefix can be used in all controllers, thus speeding up the lookup.</p>"},{"location":"routing/#dependency-injection","title":"Dependency Injection","text":"<p>You can register the router component during the container setup, to make it available inside the controllers or any other components that extend the Phalcon\\Di\\Injectable component.</p> <p>You can use the example below in your bootstrap file (for example <code>index.php</code> or <code>app/config/services.php</code> if you use Phalcon Developer Tools).</p> <pre><code>&lt;?php\n\n$container-&gt;set(\n    'router',\n    function () {\n        require __DIR__ . '/app/config/routes.php';\n\n        return $router;\n    }\n);\n</code></pre> <p>You need to create <code>app/config/routes.php</code> and add the router initialization code:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n$router-&gt;add(\n    '/login',\n    [\n        'controller' =&gt; 'login',\n        'action'     =&gt; 'index',\n    ]\n);\n\n$router-&gt;add(\n    '/invoices/:action',\n    [\n        'controller' =&gt; 'invoices',\n        'action'     =&gt; 1,\n    ]\n);\n\nreturn $router;\n</code></pre>"},{"location":"routing/#custom","title":"Custom","text":"<p>You can create your own components by implementing the supplied interfaces: - Phalcon\\Mvc\\Router\\GroupInterface - Phalcon\\Mvc\\Router\\RouteInterface - Phalcon\\Mvc\\RouterInterface</p>"},{"location":"routing/#examples","title":"Examples","text":"<p>The following are examples of custom routes:</p> <pre><code>&lt;?php\n\n// '/system/admin/a/edit/7001'\n$router-&gt;add(\n    '/system/:controller/a/:action/:params',\n    [\n        'controller' =&gt; 1,\n        'action'     =&gt; 2,\n        'params'     =&gt; 3,\n    ]\n);\n\n// '/en/news'\n$router-&gt;add(\n    '/([a-z]{2})/:controller',\n    [\n        'controller' =&gt; 2,\n        'action'     =&gt; 'index',\n        'language'   =&gt; 1,\n    ]\n);\n\n// '/en/news'\n$router-&gt;add(\n    '/{language:[a-z]{2}}/:controller',\n    [\n        'controller' =&gt; 2,\n        'action'     =&gt; 'index',\n    ]\n);\n\n// '/admin/posts/edit/100'\n$router-&gt;add(\n    '/admin/:controller/:action/:int',\n    [\n        'controller' =&gt; 1,\n        'action'     =&gt; 2,\n        'id'         =&gt; 3,\n    ]\n);\n\n// '/posts/2015/02/some-cool-content'\n$router-&gt;add(\n    '/posts/([0-9]{4})/([0-9]{2})/([a-z\\-]+)',\n    [\n        'controller' =&gt; 'posts',\n        'action'     =&gt; 'show',\n        'year'       =&gt; 1,\n        'month'      =&gt; 2,\n        'title'      =&gt; 3,\n    ]\n);\n\n// '/manual/en/translate.adapter.html'\n$router-&gt;add(\n    '/manual/([a-z]{2})/([a-z\\.]+)\\.html',\n    [\n        'controller' =&gt; 'manual',\n        'action'     =&gt; 'show',\n        'language'   =&gt; 1,\n        'file'       =&gt; 2,\n    ]\n);\n\n// /feed/fr/hot-news.atom\n$router-&gt;add(\n    '/feed/{lang:[a-z]+}/{blog:[a-z\\-]+}\\.{type:[a-z\\-]+}',\n    'Feed::get'\n);\n\n// /api/v1/users/peter.json\n$router-&gt;add(\n    '/api/(v1|v2)/{method:[a-z]+}/{param:[a-z]+}\\.(json|xml)',\n    [\n        'controller' =&gt; 'api',\n        'version'    =&gt; 1,\n        'format'     =&gt; 4,\n    ]\n);\n</code></pre> <p>NOTE</p> <p>Be careful when allowing characters in regular expressions for controllers and namespaces. These will become class names and in turn they will interact with the file system. As such, it is possible that an attacker can access unauthorized files. A safe regular expression is: <code>/([a-zA-Z0-9\\_\\-]+)</code></p>"},{"location":"security-jwt/","title":"Security - JSON Web Tokens (JWT)","text":""},{"location":"security-jwt/#overview","title":"Overview","text":"<p>NOTE</p> <p>Currently, only symmetric algorithms are supported </p> <p><code>Phalcon\\Security\\JWT</code> is a namespace that contains components that allow you to issue, parse and validate JSON Web Tokens as described in RFC 7519. These components are:</p> <ul> <li>Builder (Phalcon\\Security\\JWT\\Builder)</li> <li>Parser (Phalcon\\Security\\JWT\\Token\\Parser)</li> <li>Validator (Phalcon\\Security\\JWT\\Validator)</li> </ul> <p>An example of using the component is:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Security\\JWT\\Builder;\nuse Phalcon\\Security\\JWT\\Signer\\Hmac;\nuse Phalcon\\Security\\JWT\\Token\\Parser;\nuse Phalcon\\Security\\JWT\\Validator;\n\n// Defaults to 'sha512'\n$signer  = new Hmac();\n\n// Builder object\n$builder = new Builder($signer);\n\n$now        = new DateTimeImmutable();\n$issued     = $now-&gt;getTimestamp();\n$notBefore  = $now-&gt;modify('-1 minute')-&gt;getTimestamp();\n$expires    = $now-&gt;modify('+1 day')-&gt;getTimestamp();\n$passphrase = 'QcMpZ&amp;b&amp;mo3TPsPk668J6QH8JA$&amp;U&amp;m2';\n\n// Setup\n$builder\n    -&gt;setAudience('https://target.phalcon.io')  // aud\n    -&gt;setContentType('application/json')        // cty - header\n    -&gt;setExpirationTime($expires)               // exp \n    -&gt;setId('abcd123456789')                    // JTI id \n    -&gt;setIssuedAt($issued)                      // iat \n    -&gt;setIssuer('https://phalcon.io')           // iss \n    -&gt;setNotBefore($notBefore)                  // nbf\n    -&gt;setSubject('my subject for this claim')   // sub\n    -&gt;setPassphrase($passphrase)                // password \n;\n\n// Phalcon\\Security\\JWT\\Token\\Token object\n$tokenObject = $builder-&gt;getToken();\n\n// The token\necho $tokenObject-&gt;getToken();\n\n// Token split into different lines for readability\n//\n// eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiIsImN0eSI6ImFwcGxpY2F0aW9uXC9qc29uIn0.\n// eyJhdWQiOlsiaHR0cHM6XC9cL3RhcmdldC5waGFsY29uLmlvIl0sImV4cCI6MTYxNDE4NTkxN\n// ywianRpIjoiYWJjZDEyMzQ1Njc4OSIsImlhdCI6MTYxNDA5OTUxNywiaXNzIjoiaHR0cHM6XC\n// 9cL3BoYWxjb24uaW8iLCJuYmYiOjE2MTQwOTk0NTcsInN1YiI6Im15IHN1YmplY3QgZm9yIHR\n// oaXMgY2xhaW0ifQ.\n// LdYevRZaQDZ2lul4CCQ5DymeP2ubcapTtgeezOZGIq7Meu7rFF1pv32b-AMWOxCS63CQz_jpm\n// BPlPyOeEAkMbg\n</code></pre> <pre><code>// $tokenReceived is what we received\n$tokenReceived = getMyTokenFromTheApplication();\n$audience      = 'https://target.phalcon.io';\n$now           = new DateTimeImmutable();\n$issued        = $now-&gt;getTimestamp();\n$notBefore     = $now-&gt;modify('-1 minute')-&gt;getTimestamp();\n$expires       = $now-&gt;getTimestamp();\n$id            = 'abcd123456789';\n$issuer        = 'https://phalcon.io';\n\n// Defaults to 'sha512'\n$signer     = new Hmac();\n$passphrase = 'QcMpZ&amp;b&amp;mo3TPsPk668J6QH8JA$&amp;U&amp;m2';\n\n// Parse the token\n$parser      = new Parser();\n\n// Phalcon\\Security\\JWT\\Token\\Token object\n$tokenObject = $parser-&gt;parse($tokenReceived);\n\n// Phalcon\\Security\\JWT\\Validator object\n$validator = new Validator($tokenObject, 100); // allow for a time shift of 100\n\n// Throw exceptions if those do not validate\n$validator\n    -&gt;validateAudience($audience)\n    -&gt;validateExpiration($expires)\n    -&gt;validateId($id)\n    -&gt;validateIssuedAt($issued)\n    -&gt;validateIssuer($issuer)\n    -&gt;validateNotBefore($notBefore)\n    -&gt;validateSignature($signer, $passphrase)\n;\n</code></pre> <p>The above example gives a general view on how the component can be used to generate, parse and validate JSON Web Tokens. </p>"},{"location":"security-jwt/#objects","title":"Objects","text":"<p>There are several utility components that live in the <code>Phalcon\\Security\\JWT\\Token</code> namespace, that help with the issuing, parsing and validating JWT tokens</p>"},{"location":"security-jwt/#enum","title":"Enum","text":"<p>Phalcon\\Security\\JWT\\Token\\Enum is a class that contains several constants. These constants are the strings defined in RFC 7915. You can use them if you wish or instead use their string equivalents.</p> <pre><code>&lt;?php\n\nclass Enum\n{\n    /**\n     * Headers\n     */\n    const TYPE         = \"typ\";\n    const ALGO         = \"alg\";\n    const CONTENT_TYPE = \"cty\";\n\n    /**\n     * Claims\n     */\n    const AUDIENCE        = \"aud\";\n    const EXPIRATION_TIME = \"exp\";\n    const ID              = \"jti\";\n    const ISSUED_AT       = \"iat\";\n    const ISSUER          = \"iss\";\n    const NOT_BEFORE      = \"nbf\";\n    const SUBJECT         = \"sub\";\n}\n</code></pre>"},{"location":"security-jwt/#item","title":"Item","text":"<p>Phalcon\\Security\\JWT\\Token\\Item is used internally to store a payload as well as its encoded state. Such payload can be the claims data or the headers data. By using this component, we can easily extract the necessary information for each Token.</p>"},{"location":"security-jwt/#signature","title":"Signature","text":"<p>Phalcon\\Security\\JWT\\Token\\Signature is similar to the Phalcon\\Security\\JWT\\Token\\Item, but it only holds the signature hash as well as its encoded value.</p>"},{"location":"security-jwt/#token","title":"Token","text":"<p>Phalcon\\Security\\JWT\\Token\\Token is the component responsible for storing and calculating the JWT token. It accepts the headers, claims (as Phalcon\\Security\\JWT\\Token\\Item objects) and signature objects in its constructor and exposes:</p> <ul> <li><code>getPayload</code>: Returns the payload</li> <li><code>getToken</code>: Returns the token</li> </ul> <p>For a token <code>abcd.efgh.ijkl</code>, <code>getPayload</code> will return <code>abcd.efgh</code> and <code>getToken</code> will return <code>abcd.efgh.ijkl</code>. </p>"},{"location":"security-jwt/#signer","title":"Signer","text":"<p>In order to create a JWT token, we need to supply a Signing algorithm. By default, the builder uses \"none\" (Phalcon\\Security\\JWT\\Signer\\None). You can however use the HMAC signer (Phalcon\\Security\\JWT\\Signer\\Hmac). Also, for further customization, you can utilize the supplied Phalcon\\Security\\JWT\\Signer\\SignerInterface interface.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Security\\JWT\\Signer\\Hmac;\n\n$signer  = new Hmac();\n</code></pre> <p>None</p> <p>This signer is provided mostly for development purposes. You should always sign your JWT tokens. </p> <p>HMAC</p> <p>The HMAC signer supports the <code>sha512</code>, <code>sha384</code>, and <code>sha256</code> algorithms. If none is supplied, the <code>sha512</code> is automatically selected. If you supply a different algorithm, a Phalcon\\Security\\JWT\\Exceptions\\UnsupportedAlgorithmException will be raised. The algorithm is set in the constructor. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Security\\JWT\\Signer\\Hmac;\n\n$signer  = new Hmac();\n$signer  = new Hmac('sha512');\n$signer  = new Hmac('sha384');\n$signer  = new Hmac('sha256');\n$signer  = new Hmac('sha111'); // exception\n</code></pre> <p>The component utilizes the [hmac_equals][hmac_equals] and [hash_hmac][hash_hmac] PHP methods internally to verify and sign the payload. It exposes the following methods:</p> <pre><code>public function getAlgHeader(): string\n</code></pre> <p>Returns a string identifying the algorithm. For the HMAC algoritms it will return:</p> Algorithm <code>getAlgHeader</code> <code>sha512</code> <code>HS512</code> <code>sha384</code> <code>HS384</code> <code>sha256</code> <code>HS256</code> <pre><code>public function sign(string $payload, string $passphrase): string\n</code></pre> <p>Returns the hash of the payload using the passphrase</p> <pre><code>public function verify(string $source, string $payload, string $passphrase): bool\n</code></pre> <p>Verifies that the hashed source string is the same as the hash of the payload with the passphrase.</p>"},{"location":"security-jwt/#issuing-tokens","title":"Issuing Tokens","text":"<p>A Builder component (Phalcon\\Security\\JWT\\Builder) is available, utilizing chained methods, and ready to be used to create JWT tokens. All you have to do is instantiate the Builder object, configure your token and call <code>getToken()</code>. This will return a Phalcon\\Security\\Token\\Token object which contains all the necessary information for your token. When instantiating the builder component, you have to supply the signer class. In the example below we use the Phalcon\\Security\\JWT\\Signer\\Hmac signer.</p> <p>All setters in this component are chainable.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Security\\JWT\\Builder;\nuse Phalcon\\Security\\JWT\\Signer\\Hmac;\n\n// Defaults to 'sha512'\n$signer  = new Hmac();\n\n// Builder object\n$builder = new Builder($signer);\n</code></pre>"},{"location":"security-jwt/#methods","title":"Methods","text":"<p><pre><code>public function __construct(SignerInterface $signer): Builder\n</code></pre> Constructor</p> <p><pre><code>public function init(): Builder\n</code></pre> Initializes the object - useful when you want to reuse the same builder</p> <p><pre><code>public function getAudience()\n</code></pre> Returns the <code>aud</code> contents</p> <p><pre><code>public function getClaims(): array\n</code></pre> Returns the claims as an array</p> <p><pre><code>public function getContentType(): ?string\n</code></pre> Returns the content type (<code>cty</code> - headers)</p> <p><pre><code>public function getExpirationTime(): ?int\n</code></pre> Returns the <code>exp</code> contents</p> <p><pre><code>public function getHeaders(): array\n</code></pre> Returns the headers as an array</p> <p><pre><code>public function getId(): ?string\n</code></pre> Returns the <code>jti</code> contents (ID of this JWT)</p> <p><pre><code>public function getIssuedAt(): ?int\n</code></pre> Returns the <code>iat</code> contents</p> <p><pre><code>public function getIssuer(): ?string\n</code></pre> Returns the <code>iss</code> contents</p> <p><pre><code>public function getNotBefore(): ?int\n</code></pre> Returns the <code>nbf</code> contents</p> <p><pre><code>public function getSubject(): ?string\n</code></pre> Returns the <code>sub</code> contents</p> <p><pre><code>public function getToken(): Token\n</code></pre> Returns the token</p> <p><pre><code>public function getPassphrase(): string\n</code></pre> Returns the supplied passphrase</p> <p><pre><code>public function setAudience($audience): Builder\n</code></pre> Sets the audience (<code>aud</code>). If the parameter passed is not an array or a string, a Phalcon\\Security\\JWT\\Exceptions\\ValidatorException will be thrown.</p> <p><pre><code>public function setContentType(string $contentType): Builder\n</code></pre> Sets the content type (<code>cty</code> - headers)</p> <p><pre><code>public function setExpirationTime(int $timestamp): Builder\n</code></pre> Sets the audience (<code>exp</code>). If the <code>$timestamp</code> is less than the current time, a Phalcon\\Security\\JWT\\Exceptions\\ValidatorException will be thrown.</p> <p><pre><code>public function setId(string $id): Builder\n</code></pre> Sets the id (<code>jti</code>). </p> <p><pre><code>public function setIssuedAt(int $timestamp): Builder\n</code></pre> Sets the issued at time (<code>iat</code>).</p> <p><pre><code>public function setIssuer(string $issuer): Builder\n</code></pre> Sets the issuer (<code>iss</code>).</p> <p><pre><code>public function setNotBefore(int $timestamp): Builder\n</code></pre> Sets the not before time (<code>nbf</code>). If the <code>$timestamp</code> is greater than the current time, a Phalcon\\Security\\JWT\\Exceptions\\ValidatorException will be thrown.</p> <p><pre><code>public function setSubject(string $subject): Builder\n</code></pre> Sets the subject (<code>sub</code>).</p> <p><pre><code>public function setPassphrase(string $passphrase): Builder\n</code></pre> Sets the passphrase. If the <code>$passphrase</code> is weak, a Phalcon\\Security\\JWT\\Exceptions\\ValidatorException will be thrown.</p> <p><pre><code>private function setClaim(string $name, $value): Builder\n</code></pre> Sets a claim value in the internal collection.</p>"},{"location":"security-jwt/#example","title":"Example","text":"<pre><code>&lt;?php\n\nuse Phalcon\\Security\\JWT\\Builder;\nuse Phalcon\\Security\\JWT\\Signer\\Hmac;\nuse Phalcon\\Security\\JWT\\Token\\Parser;\nuse Phalcon\\Security\\JWT\\Validator;\n\n// Defaults to 'sha512'\n$signer  = new Hmac();\n\n// Builder object\n$builder = new Builder($signer);\n\n$now        = new DateTimeImmutable();\n$issued     = $now-&gt;getTimestamp();\n$notBefore  = $now-&gt;modify('-1 minute')-&gt;getTimestamp();\n$expires    = $now-&gt;modify('+1 day')-&gt;getTimestamp();\n$passphrase = 'QcMpZ&amp;b&amp;mo3TPsPk668J6QH8JA$&amp;U&amp;m2';\n\n// Setup\n$builder\n    -&gt;setAudience('https://target.phalcon.io')  // aud\n    -&gt;setContentType('application/json')        // cty - header\n    -&gt;setExpirationTime($expires)               // exp \n    -&gt;setId('abcd123456789')                    // JTI id \n    -&gt;setIssuedAt($issued)                      // iat \n    -&gt;setIssuer('https://phalcon.io')           // iss \n    -&gt;setNotBefore($notBefore)                  // nbf\n    -&gt;setSubject('my subject for this claim')   // sub\n    -&gt;setPassphrase($passphrase)                // password \n;\n\n// Phalcon\\Security\\JWT\\Token\\Token object\n$tokenObject = $builder-&gt;getToken();\n\n// The token\necho $tokenObject-&gt;getToken();\n\n// Token split into different lines for readability\n//\n// eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiIsImN0eSI6ImFwcGxpY2F0aW9uXC9qc29uIn0.\n// eyJhdWQiOlsiaHR0cHM6XC9cL3RhcmdldC5waGFsY29uLmlvIl0sImV4cCI6MTYxNDE4NTkxN\n// ywianRpIjoiYWJjZDEyMzQ1Njc4OSIsImlhdCI6MTYxNDA5OTUxNywiaXNzIjoiaHR0cHM6XC\n// 9cL3BoYWxjb24uaW8iLCJuYmYiOjE2MTQwOTk0NTcsInN1YiI6Im15IHN1YmplY3QgZm9yIHR\n// oaXMgY2xhaW0ifQ.\n// LdYevRZaQDZ2lul4CCQ5DymeP2ubcapTtgeezOZGIq7Meu7rFF1pv32b-AMWOxCS63CQz_jpm\n// BPlPyOeEAkMbg\n</code></pre>"},{"location":"security-jwt/#validating-tokens","title":"Validating Tokens","text":"<p>In order to validate a token you will need to create a new Phalcon\\Security\\JWT\\Validator object. The object can be constructed using a Phalcon\\Security\\JWT\\Token\\Token object and an offset in time to handle time/clock shifts of the sending and receiving computers.</p> <p>In order to parse the JWT received and convert it to a Phalcon\\Security\\JWT\\Token\\Token object, you will need to use a Phalcon\\Security\\JWT\\Token\\Parser object and parse it.</p> <pre><code>// Parser\n$parser = new Parser();\n\n// Parse the token received\n$tokenObject = $parser-&gt;parse($tokenReceived);\n\n// Create the validator\n$validator = new Validator($tokenObject, 100); // allow for a time shift of 100\n</code></pre> <p>After that, you can start calling the <code>validate*</code> methods with the necessary parameters to validate the token received. If no exceptions are thrown, the token is valid.</p>"},{"location":"security-jwt/#methods_1","title":"Methods","text":"<p><pre><code>public function __construct(Token $token, int $timeShift = 0)\n</code></pre> Constructor</p> <p><pre><code>public function setToken(Token $token): Validator\n</code></pre> Sets the token object.</p> <p><pre><code>public function validateAudience(string $audience): Validator\n</code></pre> Validates the audience. If it is not included in the token's <code>aud</code>, a Phalcon\\Security\\JWT\\Exceptions\\ValidatorException will be thrown.</p> <p><pre><code>public function validateExpiration(int $timestamp): Validator\n</code></pre> Validates the expiration time. If the <code>exp</code> value stored in the token is less than now, a Phalcon\\Security\\JWT\\Exceptions\\ValidatorException will be thrown.</p> <p><pre><code>public function validateId(string $id): Validator\n</code></pre> Validates the id. If it is not the same as the <code>jti</code> value stored in the token, a Phalcon\\Security\\JWT\\Exceptions\\ValidatorException will be thrown.</p> <p><pre><code>public function validateIssuedAt(int $timestamp): Validator\n</code></pre> Validates the issued at time. If the <code>iat</code> value stored in the token is greater than now, a Phalcon\\Security\\JWT\\Exceptions\\ValidatorException will be thrown.</p> <p><pre><code>public function validateIssuer(string $issuer): Validator\n</code></pre> Validates the issuer. If it is not the same as the <code>iss</code> value stored in the token, a Phalcon\\Security\\JWT\\Exceptions\\ValidatorException will be thrown.</p> <p><pre><code>public function validateNotBefore(int $timestamp): Validator\n</code></pre> Validates the not before time. If the <code>nbf</code> value stored in the token is greater than now, a Phalcon\\Security\\JWT\\Exceptions\\ValidatorException will be thrown.</p> <p><pre><code>public function validateSignature(SignerInterface $signer, string $passphrase): Validator\n</code></pre> Validates the signature of the token. If the signature is not valid, a Phalcon\\Security\\JWT\\Exceptions\\ValidatorException will be thrown.</p>"},{"location":"security-jwt/#example_1","title":"Example","text":"<pre><code>&lt;?php\n\nuse Phalcon\\Security\\JWT\\Signer\\Hmac;\nuse Phalcon\\Security\\JWT\\Token\\Parser;\nuse Phalcon\\Security\\JWT\\Validator;\n\n// Token split into different lines for readability\n//\n// eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiIsImN0eSI6ImFwcGxpY2F0aW9uXC9qc29uIn0.\n// eyJhdWQiOlsiaHR0cHM6XC9cL3RhcmdldC5waGFsY29uLmlvIl0sImV4cCI6MTYxNDE4NTkxN\n// ywianRpIjoiYWJjZDEyMzQ1Njc4OSIsImlhdCI6MTYxNDA5OTUxNywiaXNzIjoiaHR0cHM6XC\n// 9cL3BoYWxjb24uaW8iLCJuYmYiOjE2MTQwOTk0NTcsInN1YiI6Im15IHN1YmplY3QgZm9yIHR\n// oaXMgY2xhaW0ifQ.\n// LdYevRZaQDZ2lul4CCQ5DymeP2ubcapTtgeezOZGIq7Meu7rFF1pv32b-AMWOxCS63CQz_jpm\n// BPlPyOeEAkMbg\n\n// $tokenReceived is what we received\n$tokenReceived = getMyTokenFromTheApplication();\n$audience      = 'https://target.phalcon.io';\n$now           = new DateTimeImmutable();\n$issued        = $now-&gt;getTimestamp();\n$notBefore     = $now-&gt;modify('-1 minute')-&gt;getTimestamp();\n$expires       = $now-&gt;getTimestamp();\n$id            = 'abcd123456789';\n$issuer        = 'https://phalcon.io';\n\n// Defaults to 'sha512'\n$signer     = new Hmac();\n$passphrase = 'QcMpZ&amp;b&amp;mo3TPsPk668J6QH8JA$&amp;U&amp;m2';\n\n// Parse the token\n$parser      = new Parser();\n\n// Phalcon\\Security\\JWT\\Token\\Token object\n$tokenObject = $parser-&gt;parse($tokenReceived);\n\n// Phalcon\\Security\\JWT\\Validator object\n$validator = new Validator($tokenObject, 100); // allow for a time shift of 100\n\n// Throw exceptions if those do not validate\n$validator\n    -&gt;validateAudience($audience)\n    -&gt;validateExpiration($expires)\n    -&gt;validateId($id)\n    -&gt;validateIssuedAt($issued)\n    -&gt;validateIssuer($issuer)\n    -&gt;validateNotBefore($notBefore)\n    -&gt;validateSignature($signer, $passphrase)\n;\n</code></pre>"},{"location":"security-jwt/#exceptions","title":"Exceptions","text":"<p>Any exceptions thrown in the Security component will be of the namespace <code>Phalcon\\Security\\JWT\\*</code>. You can use this exception to selectively catch exceptions thrown only from this component. There are two exceptions raised. First if you supply the wrong algoritm string when instantiating the Phalcon\\Security\\JWT\\Signer\\Hmac component. This exception is Phalcon\\Security\\JWT\\Exceptions\\UnsupportedAlgorithmException.</p> <p>The second exception is thrown when validating a JWT. This exception is Phalcon\\Security\\JWT\\Exceptions\\ValidatorException.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Security\\JWT\\Builder;\nuse Phalcon\\Security\\JWT\\Exceptions\\ValidatorException;\nuse Phalcon\\Security\\JWT\\Signer\\Hmac;\nuse Phalcon\\Security\\JWT\\Validator;\n\nclass IndexController extends Controller\n{\n    public function index()\n    {\n        try {\n            $signer     = new Hmac();\n            $builder    = new Builder($signer);\n            $expiry     = strtotime('+1 day');\n            $issued     = strtotime('now') + 100;\n            $notBefore  = strtotime('-1 day');\n            $passphrase = '&amp;vsJBETaizP3A3VX&amp;TPMJUqi48fJEgN7';\n\n            return $builder\n                -&gt;setAudience('my-audience')\n                -&gt;setExpirationTime($expiry)\n                -&gt;setIssuer('Phalcon JWT')\n                -&gt;setIssuedAt($issued)\n                -&gt;setId('PH-JWT')\n                -&gt;setNotBefore($notBefore)\n                -&gt;setSubject('Mary had a little lamb')\n                -&gt;setPassphrase($passphrase)\n                -&gt;getToken()\n            ;\n\n            $validator = new Validator($token);\n            $validator-&gt;validateAudience(\"unknown\");\n        } catch (Exception $ex) {\n            echo $ex-&gt;getMessage(); // Validation: audience not allowed\n        }\n    }\n}\n</code></pre>"},{"location":"security/","title":"Security","text":""},{"location":"security/#overview","title":"Overview","text":"<p>NOTE</p> <p>Requires PHP's openssl extension to be present in the system</p> <p>Phalcon\\Security is a component that helps developers with common security related tasks, such as password hashing and Cross-Site Request Forgery protection (CSRF).</p>"},{"location":"security/#password-hashing","title":"Password Hashing","text":"<p>Storing passwords in plain text is a bad security practice. Anyone with access to the database will immediately have access to all user accounts thus being able to engage in unauthorized activities. To combat that, many applications use popular one way hashing methods md5 and sha1. However, hardware evolves on a daily basis and as processors become faster, these algorithms are becoming vulnerable to brute force attacks. These attacks are also known as rainbow tables.</p> <p>The security component uses bcrypt as the hashing algorithm. Thanks to the Eksblowfish key setup algorithm, we can make the password encryption as <code>slow</code> as we want. Slow algorithms minimize the impact of brute force attacks. </p> <p>Bcrypt, is an adaptive hash function based on the Blowfish symmetric block cipher cryptographic algorithm. It also introduces a security or work factor, which determines how slow the hash function will be to generate the hash. This effectively negates the use of FPGA or GPU hashing techniques.</p> <p>Should hardware becomes faster in the future, we can increase the work factor to mitigate this. The salt is generated using pseudo-random bytes with the PHP's function openssl_random_pseudo_bytes.</p> <p>This component offers a simple interface to use the algorithm:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Security;\n\n$security = new Security();\n\necho $security-&gt;hash('Phalcon'); \n// $2y$08$ZUFGUUk5c3VpcHFoVUFXeOYoA4NPFEP4G9gcm6rdo3jFPaNFdR2/O\n</code></pre> <p>The hash that was created used the default work factor which is set to <code>10</code>. Using a higher work factor will take a bit more time to calculate the hash. </p> <p>We can now check if a value sent to us by a user through the UI of our application, is identical to our hashed string:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Security;\n\n$password = $_POST['password'] ?? '';\n\n$security = new Security();\n$hashed = $security-&gt;hash('Phalcon');\n\necho $security-&gt;checkHash($password, $hashed); // true / false\n</code></pre> <p>The above example simply shows how the <code>checkHash()</code> can be used. In production applications we will definitely need to sanitize input and also we need to store the hashed password in a data store such as a database. Using controllers, the above example can be shown as:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Users;\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Security;\n\n/**\n * @property Request  $request\n * @property Security $security\n */\nclass SessionController extends Controller\n{\n    /**\n     * Login\n     */\n    public function loginAction()\n    {\n        $login    = $this-&gt;request-&gt;getPost('login');\n        $password = $this-&gt;request-&gt;getPost('password');\n\n        $user = Users::findFirst(\n            [\n                'conditions' =&gt; 'login = :login:',\n                'bind'       =&gt; [\n                    'login' =&gt; $login,\n                ],\n            ]\n        );\n\n        if (false !== $user) {\n            $check = $this\n                -&gt;security\n                -&gt;checkHash($password, $user-&gt;password);\n\n            if (true === $check) {\n                // OK\n            }\n        } else {\n            $this-&gt;security-&gt;hash(rand());\n        }\n\n        // ERROR\n    }\n\n    /**\n     * Register\n     */\n    public function registerAction()\n    {\n        $login    = $this-&gt;request-&gt;getPost('login', 'string');\n        $password = $this-&gt;request-&gt;getPost('password', 'string');\n\n        $user = new Users();\n\n        $user-&gt;login    = $login;\n        $user-&gt;password = $this-&gt;security-&gt;hash($password);\n\n        $user-&gt;save();\n    }\n\n}\n</code></pre> <p>NOTE</p> <p>The code snippet above is incomplete and must not be used as is for production applications</p> <p>The <code>registerAction()</code> above accepts posted data from the UI. It sanitizes it with the <code>string</code> filter and then creates a new <code>User</code> model object. It then assigns the passed data to the relevant properties before saving it. Notice that for the password, we use the <code>hash()</code> method of the Phalcon\\Security component so that we do not save it as plain text in our database.</p> <p>The <code>loginAction()</code> accepts posted data from the UI and then tries to find the user in the database based on the <code>login</code> field. If the user does exist, it will use the <code>checkHash()</code> method of the Phacon\\Security component, to assess whether the supplied password hashed is the same as the one stored in the database. </p> <p>NOTE</p> <p>You do not need to hash the supplied password (first parameter) when using <code>checkHash()</code> - the component will do that for you.</p> <p>If the password is not correct, you can then inform the user that something is wrong with the credentials. It is always a good idea not to provide specific information about your users to people that want to hack your site. So for instance our example above can produce two messages:</p> <ul> <li>User not found in the database</li> <li>Password is incorrect</li> </ul> <p>Separating the error messages is not a good idea. If a hacker that is using brute force attack detects the second message, they can stop trying to guess the <code>login</code> and concentrate on the password, thus increasing their chances of gaining access. A more appropriate message for both potential error conditions could be</p> <p><code>Invalid Login/Password combination</code></p> <p>Finally you will notice in the example that when the user is not found, we call:</p> <pre><code>$this-&gt;security-&gt;hash(rand());\n</code></pre> <p>This is done to protect against timing attacks. Irrespective of whether a user exists or not, the script will take roughly the same amount of time to execute, since it is computing a hash again, even though we will never use that result.</p>"},{"location":"security/#exceptions","title":"Exceptions","text":"<p>Any exceptions thrown in the Security component will be of type Phalcon\\Security\\Exception. You can use this exception to selectively catch exceptions thrown only from this component. Exceptions can be raised if the hashing algorithm is unknown, if the <code>session</code> service is not present in the Di container etc.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Security\\Exception;\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    public function index()\n    {\n        try {\n            $this-&gt;security-&gt;hash('123');\n        } catch (Exception $ex) {\n            echo $ex-&gt;getMessage();\n        }\n    }\n}\n</code></pre>"},{"location":"security/#csrf-protection","title":"CSRF Protection","text":"<p>Cross-Site Request Forgery (CSRF) is another common attack against web sites and applications. Forms designed to perform tasks such as user registration or adding comments are vulnerable to this attack.</p> <p>The idea is to prevent the form values from being sent outside our application. To fix this, we generate a random nonce (token) in each form, add the token in the session and then validate the token once the form posts data back to our application by comparing the stored token in the session to the one submitted by the form:</p> <pre><code>&lt;form method='post' action='session/login'&gt;\n\n    &lt;!-- Login and password inputs ... --&gt;\n\n    &lt;input type='hidden' name='&lt;?php echo $this-&gt;security-&gt;getTokenKey() ?&gt;'\n        value='&lt;?php echo $this-&gt;security-&gt;getToken() ?&gt;'/&gt;\n\n&lt;/form&gt;\n</code></pre> <p>Then in the controller's action you can check if the CSRF token is valid:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * @property Request  $request\n * @property Security $security\n */\nclass SessionController extends Controller\n{\n    public function loginAction()\n    {\n        if ($this-&gt;request-&gt;isPost()) {\n            if ($this-&gt;security-&gt;checkToken()) {\n                // OK\n            }\n        }\n    }\n}\n</code></pre> <p>NOTE</p> <p>It is important to remember that you will need to have a valid <code>session</code> service registered in your Dependency Injection container. Otherwise the <code>checkToken()</code> will not work.</p> <p>Adding a captcha to the form is also recommended to completely avoid the risks of this attack.</p>"},{"location":"security/#functionality","title":"Functionality","text":""},{"location":"security/#hash","title":"Hash","text":"<p>getDefaultHash() / setDefaultHash()</p> <p>Getter and setter for the default hash that the component will use. By default the hash is set to <code>CRYPT_DEFAULT</code> (<code>0</code>). The available options are:</p> <ul> <li><code>CRYPT_BLOWFISH_A</code></li> <li><code>CRYPT_BLOWFISH_X</code></li> <li><code>CRYPT_BLOWFISH_Y</code></li> <li><code>CRYPT_MD5</code></li> <li><code>CRYPT_SHA256</code></li> <li><code>CRYPT_SHA512</code></li> <li><code>CRYPT_DEFAULT</code></li> </ul> <p>hash()</p> <p>Hashes a string or password and returns the hashed string back. The second parameter is optional, and allows you to set temporarily a specific <code>workFactor</code> or passes which overrides the default one. </p> <p>checkHash() </p> <p>Accepts a string (usually the password), an already hashed string (the hashed password) and an optional minimum password length. It checks them both and returns <code>true</code> if they are identical and <code>false</code> otherwise.</p> <p>isLegacyHash()</p> <p>Returns <code>true</code> if the passed hashed string is a valid bcrypt hash.</p>"},{"location":"security/#hmac","title":"HMAC","text":"<p>computeHmac() </p> <p>Generates a keyed hash value using the HMAC method. It uses PHP's <code>hash_hmac</code> method internally, therefore all the parameters it accepts are the same as the <code>hash_hmac</code>.</p>"},{"location":"security/#random","title":"Random","text":"<p><code>getRandom()</code></p> <p>Returns a Phalcon\\Security\\Random object, which is secure random number generator instance. The component is explained in detail below.</p> <p><code>getRandomBytes()</code> / <code>setRandomBytes()</code></p> <p>Getter and setter methods to specify the number of bytes to be generated by the openssl pseudo random generator. It defaults to <code>16</code>.</p> <p><code>getSaltBytes()</code></p> <p>Generates a pseudo random string to be used as a salt for passwords. It uses the <code>getRandomBytes()</code> value for the length of the string. It can however be overridden by the passed numeric parameter.</p>"},{"location":"security/#token","title":"Token","text":"<p><code>getToken()</code></p> <p>Generates a pseudo random token value to be used as input's value in a CSRF check.</p> <p><code>getTokenKey()</code></p> <p>Generates a pseudo random token key to be used as input's name in a CSRF check.</p> <p><code>getRequestToken()</code></p> <p>Returns the value of the CSRF token for the current request.</p> <p><code>checkToken()</code></p> <p>Check if the CSRF token sent in the request is the same that the current in session. The first parameter is the token key and the second one the token value. It also accepts a third boolean parameter <code>destroyIfValid</code> which if set to <code>true</code> will destroy the token if the method returns <code>true</code>.</p> <p><code>getSessionToken()</code></p> <p>Returns the value of the CSRF token in session</p> <p><code>destroyToken()</code></p> <p>Removes the value of the CSRF token and key from session</p>"},{"location":"security/#random_1","title":"Random","text":"<p>The Phalcon\\Security\\Random class makes it really easy to generate lots of types of random data to be used in salts, new user passwords, session keys, complicated keys, encryption systems etc. This class partially borrows SecureRandom library from Ruby.</p> <p>It supports following secure random number generators: * random_bytes * libsodium * openssl, libressl * /dev/urandom</p> <p>To utilize the above you will need to ensure that the generators are available in your system. For instance to use <code>openssl</code> your PHP installation needs to support it.  </p> <pre><code>&lt;?php\n\nuse Phalcon\\Security\\Random;\n\n$random = new Random();\n\necho $random-&gt;hex(10);       // a29f470508d5ccb8e289\necho $random-&gt;base62();      // z0RkwHfh8ErDM1xw\necho $random-&gt;base64(16);    // SvdhPcIHDZFad838Bb0Swg==\necho $random-&gt;base64Safe();  // PcV6jGbJ6vfVw7hfKIFDGA\necho $random-&gt;uuid();        // db082997-2572-4e2c-a046-5eefe97b1235\necho $random-&gt;number(256);   // 84\necho $random-&gt;base58();      // 4kUgL2pdQMSCQtjE\n</code></pre> <p><code>base58()</code></p> <p>Generates a random <code>base58</code> string. If the <code>$len</code> parameter is not specified, <code>16</code> is assumed. It may be larger in future. The result may contain alphanumeric characters except <code>0</code> (zero), <code>O</code> (capital <code>o</code>), <code>I</code> (capital <code>i</code>) and <code>l</code> (lower case <code>L</code>).</p> <p>It is similar to <code>base64()</code> but has been modified to avoid both non-alphanumeric characters and letters which might look ambiguous when printed.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Security\\Random;\n\n$random = new Random();\n\necho $random-&gt;base58(); // 4kUgL2pdQMSCQtjE\n</code></pre> <p><code>base62()</code></p> <p>Generates a random <code>base62</code> string. If the <code>$len</code> parameter is not specified, <code>16</code> is assumed. It may be larger in future. It is similar to <code>base58()</code> but has been modified to provide the largest value that can safely be used in URLs without needing to take extra characters into consideration because it is <code>[A-Za-z0-9]</code></p> <pre><code>&lt;?php\n\nuse Phalcon\\Security\\Random;\n\n$random = new Random();\n\necho $random-&gt;base62(); // z0RkwHfh8ErDM1xw\n</code></pre> <p><code>base64()</code></p> <p>Generates a random <code>base64</code> string. If the <code>$len</code> parameter is not specified, <code>16</code> is assumed. It may be larger in future. The length of the result string is usually greater of <code>$len</code>. The size formula is:</p> <p><code>4 * ($len / 3)</code> rounded up to a multiple of 4.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Security\\Random;\n\n$random = new Random();\n\necho $random-&gt;base64(12); // 3rcq39QzGK9fUqh8\n</code></pre> <p><code>base64Safe()</code></p> <p>Generates a URL safe random <code>base64</code> string. If the <code>$len</code> parameter is not specified, <code>16</code> is assumed. It may be larger in future. The length of the result string is usually greater of <code>$len</code>.</p> <p>By default, padding is not generated because <code>=</code> may be used as a URL delimiter. The result may contain <code>A-Z</code>, <code>a-z</code>, <code>0-9</code>, <code>-</code> and <code>_</code>. <code>=</code> is also used if <code>$padding</code> is <code>true</code>. See RFC 3548 for the definition of URL-safe <code>base64</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Security\\Random;\n\n$random = new Random();\n\necho $random-&gt;base64Safe(); // GD8JojhzSTrqX7Q8J6uug\n</code></pre> <p><code>bytes()</code></p> <p>Generates a random binary string and accepts as input an integer representing the length in bytes to be returned. If <code>$len</code> is not specified, <code>16</code> is assumed. It may be larger in future. The result may contain any byte: <code>x00</code> - <code>xFF</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Security\\Random;\n\n$random = new Random();\n\n$bytes = $random-&gt;bytes();\nvar_dump(bin2hex($bytes));\n// Possible output: string(32) \"00f6c04b144b41fad6a59111c126e1ee\"\n</code></pre> <p><code>hex()</code></p> <p>Generates a random hex string. If <code>$len</code> is not specified, 16 is assumed. It may be larger in future. The length of the result string is usually greater of <code>$len</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Security\\Random;\n\n$random = new Random();\n\necho $random-&gt;hex(10); // a29f470508d5ccb8e289\n</code></pre> <p><code>number()</code></p> <p>Generates a random number between <code>0</code> and <code>$len</code>. Returns an integer: <code>0 &lt;= result &lt;= $len</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Security\\Random;\n\n$random = new Random();\n\necho $random-&gt;number(16); // 8\n</code></pre> <p><code>uuid()</code></p> <p>Generates a v4 random UUID (Universally Unique IDentifier). The version 4 UUID is purely random (except the version). It doesn't contain meaningful information such as MAC address, time, etc. See RFC 4122 for details of UUID.</p> <p>This algorithm sets the version number (4 bits) as well as two reserved bits. All other bits (the remaining 122 bits) are set using a random or pseudorandom data source. Version 4 UUIDs have the form <code>xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx</code> where x is any hexadecimal digit and <code>y</code> is one of <code>8</code>, <code>9</code>, <code>A</code>, or <code>B</code> (e.g., <code>f47ac10b-58cc-4372-a567-0e02b2c3d479</code>). * <pre><code>&lt;?php\n\nuse Phalcon\\Security\\Random;\n\n$random = new Random();\n\necho $random-&gt;uuid(); // 1378c906-64bb-4f81-a8d6-4ae1bfcdec22\n</code></pre></p>"},{"location":"security/#dependency-injection","title":"Dependency Injection","text":"<p>If you use the Phalcon\\Di\\FactoryDefault container, the Phalcon\\Security is already registered for you. However you might want to override the default registration in order to set your own <code>workFactor()</code>. Alternatively if you are not using the Phalcon\\Di\\FactoryDefault and instead are using the Phalcon\\Di the registration is the same. By doing so, you will be able to access your configuration object from controllers, models, views and any component that implements <code>Injectable</code>.</p> <p>An example of the registration of the service as well as accessing it is below:</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Security;\n\n// Create a container\n$container = new FactoryDefault();\n\n$container-&gt;set(\n    'security',\n    function () {\n        $security = new Security();\n\n        $security-&gt;setWorkFactor(12);\n\n        return $security;\n    },\n    true\n);\n</code></pre> In the above example, the <code>setWorkFactor()</code> sets the password hashing factor to 12 rounds.</p> <p>The component is now available in your controllers using the <code>security</code> key</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Security;\n\n/**\n * @property Security $security\n */\nclass MyController extends Controller\n{\n    private function getHash(string $password): string\n    {\n        return $this-&gt;security-&gt;hash($password);\n    }\n}\n</code></pre> <p>Also in your views (Volt syntax)</p> <pre><code>{% raw %}{{ security.getToken() }}{% endraw %}\n</code></pre>"},{"location":"session/","title":"Session","text":""},{"location":"session/#overview","title":"Overview","text":"<p>Sessions are used in PHP to persist data between requests. This enables developers to build better applications and increase the user experience. A very common usage of sessions is to keep whether a user is logged in or not. Phalcon\\Session\\Manager is an object oriented approach to handle sessions using Phalcon. There are several reasons to use this component instead of raw sessions or accessing the <code>$_SESSION</code> superglobal:</p> <ul> <li>You can easily isolate session data across applications on the same domain</li> <li>Intercept where session data is set/get in your application</li> <li>Change the session adapter according to the application needs</li> </ul>"},{"location":"session/#manager","title":"Manager","text":"<p>Phalcon\\Session\\Manager is a component that allows you to manipulate sessions in your application. This manager accepts an adapter which is the way the data will be communicated to a particular store. </p> <p>NOTE</p> <p>PHP uses the term <code>handler</code> for the component that will be responsible for storing and retrieving the data. In <code>Phalcon\\Session\\Manager</code> we use the term <code>adapter</code>. So in order to set a handler in your session, for <code>Phalcon\\Session\\Manager</code> you need to call <code>setAdapter()</code>. The functionality is the same.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\n\n$session = new Manager();\n$files = new Stream(\n    [\n        'savePath' =&gt; '/tmp',\n    ]\n);\n$session-&gt;setAdapter($files);\n</code></pre> <p>First we need to create an adapter object. The object can be one of the adapters distributed with Phalcon (see below) but it can also be an object that implements SessionHandlerInterface. Once we instantiate the new Phalcon\\Session\\Manager object and pass the adapter in it. After that you can start working with the session.</p>"},{"location":"session/#constructor","title":"Constructor","text":"<p><pre><code>public function __construct(array $options = [])\n</code></pre> The constructor accepts an array of options that relate to the session. You can set a unique id for your session using <code>uniqueId</code> as a key and your chosen id string. This allows you to create more than one of these objects, each with its own unique id, if necessary. This parameter is optional, but it is advisable to set it always. Doing so will help you with potential session leaks.</p>"},{"location":"session/#start","title":"Start","text":"<p>In order to work with the session, you need to start it. <code>start()</code> performs this task. Usually this call is made when the component is registered or at the very top of your application's workflow. <code>start()</code> returns a boolean value indicating success or failure. </p> <p>NOTE</p> <ul> <li>If the session has already started, the call will return <code>true</code>. </li> <li>If any headers have been sent, it will return <code>false</code></li> <li>If the adapter is not set, it will throw an exception</li> <li>It will return the result of <code>session_start()</code></li> </ul> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\n\n$session = new Manager();\n$files = new Stream(\n    [\n        'savePath' =&gt; '/tmp',\n    ]\n);\n$session-&gt;setAdapter($files);\n\n$session-&gt;start();\n</code></pre>"},{"location":"session/#destroy","title":"Destroy","text":"<p>Similarly, you can call <code>destroy()</code> to kill the session. Usually this happens when a user logs out.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\n\n$session = new Manager();\n$files = new Stream(\n    [\n        'savePath' =&gt; '/tmp',\n    ]\n);\n$session\n    -&gt;setAdapter($files)\n    -&gt;start();\n\n// ....\n\n$session-&gt;destroy();\n</code></pre>"},{"location":"session/#exists","title":"Exists","text":"<p>To check if your session has started, you can use <code>exists()</code></p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\n\n$session = new Manager();\n$files = new Stream(\n    [\n        'savePath' =&gt; '/tmp',\n    ]\n);\n\nvar_dump(\n    $session-&gt;exists()\n);\n// `false`\n\n$session\n    -&gt;setAdapter($files)\n    -&gt;start();\n\nvar_dump(\n    $session-&gt;exists()\n);\n// `true`\n</code></pre>"},{"location":"session/#regenerate-id","title":"Regenerate Id","text":"<p>Phalcon\\Session\\Manager supports regenerating the session id. This allows you to replace the current session id with a new one and keep the current session information intact. To achieve this you can call <code>regenerateId()</code>. The method also accepts a <code>bool</code> parameter, which if <code>true</code> will instruct the component to remove old session file.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\n\n$session = new Manager();\n$files = new Stream(\n    [\n        'savePath' =&gt; '/tmp',\n    ]\n);\n\n$session\n    -&gt;setAdapter($files)\n    -&gt;start();\n\n$session-&gt;regenerateId();\n</code></pre>"},{"location":"session/#get","title":"Get","text":"<p>You can use <code>get()</code> to retrieve the contents stored in the session for a particular element passed as a string parameter. The component also supports the magic getter so you can retrieve it as a property of the manager.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\n\n$session = new Manager();\n$files = new Stream(\n    [\n        'savePath' =&gt; '/tmp',\n    ]\n);\n\n$session\n    -&gt;setAdapter($files)\n    -&gt;start();\n\necho $session-&gt;get('userId');\necho $session-&gt;userId;\n</code></pre>"},{"location":"session/#has","title":"Has","text":"<p>You can use <code>has()</code> to check whether a particular element is stored in your session. The component also supports the magic <code>__isset</code>, allowing you to use PHP's <code>isset()</code> method if you want.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\n\n$session = new Manager();\n$files = new Stream(\n    [\n        'savePath' =&gt; '/tmp',\n    ]\n);\n\n$session\n    -&gt;setAdapter($files)\n    -&gt;start();\n\necho $session-&gt;has('userId');\nvar_dump(\n    isset($session-&gt;userId)\n);\n</code></pre>"},{"location":"session/#id","title":"Id","text":"<p>You can also set the session id. The session id is set in a HTTP cookie. You can set the name by calling <code>setId()</code>. <code>getId()</code> is used to retrieve the session id.</p> <p>NOTE</p> <p>You need call this method before calling <code>start()</code> for the id to take effect</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\n\n$session = new Manager();\n$files = new Stream(\n    [\n        'savePath' =&gt; '/tmp',\n    ]\n);\n$session\n    -&gt;setAdapter($files)\n    -&gt;setId('phalcon-id')\n    -&gt;start();\n\necho $session-&gt;getId(); // 'phalcon-id'\n</code></pre>"},{"location":"session/#name","title":"Name","text":"<p>Each session can have a name. The session name is set in a HTTP cookie. If this is not set, the <code>session.name</code> <code>php.ini</code> setting is used. You can set the name by calling <code>setName()</code>. <code>getName()</code> is used to retrieve the session name.</p> <p>NOTE</p> <p>You need to call this method before calling <code>start()</code> for the name to take effect</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\n\n$session = new Manager();\n$files = new Stream(\n    [\n        'savePath' =&gt; '/tmp',\n    ]\n);\n$session\n    -&gt;setAdapter($files)\n    -&gt;setName('phalcon-app')\n    -&gt;start();\n\necho $session-&gt;getName(); // 'phalcon-app'\n</code></pre>"},{"location":"session/#options","title":"Options","text":"<p>You can set options for the manager by using <code>setOptions()</code>. The method accepts an array and in it you can set the <code>uniqueId</code> for the session. To get the options you can call <code>getOptions()</code> which will return the array of options stored in the manager.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\n\n$session = new Manager('id-1');\n$files = new Stream(\n    [\n        'savePath' =&gt; '/tmp',\n    ]\n);\n$session\n    -&gt;setAdapter($files)\n    -&gt;start();\n\n$session-&gt;setOptions(\n    [\n        'uniqueId' =&gt; 'id-2'\n    ]   \n);\n</code></pre> <p>In the above example, after <code>setOptions()</code> is called with a new <code>uniqueId</code>, data will be stored using <code>id-2</code> now and anything stored before that will not be accessible until you change the key back to <code>id-1</code>.</p>"},{"location":"session/#set","title":"Set","text":"<p>You can use <code>set()</code> to store contents in your session. The method accepts a <code>string</code> as the name of the element and the value to be stored. The component also supports the magic setter so you can set it as a property of the manager.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\n\n$session = new Manager();\n$files = new Stream(\n    [\n        'savePath' =&gt; '/tmp',\n    ]\n);\n\n$session\n    -&gt;setAdapter($files)\n    -&gt;start();\n\n$session-&gt;set('userId', 12345);\n$session-&gt;userId = 12345;\n</code></pre>"},{"location":"session/#remove","title":"Remove","text":"<p>To remove a stored element in the session, you need to call <code>remove()</code> with the name of the element. The component also supports the magic <code>__unset</code> so you can use PHP's <code>unset()</code> method if you want.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\n\n$session = new Manager();\n$files = new Stream(\n    [\n        'savePath' =&gt; '/tmp',\n    ]\n);\n\n$session\n    -&gt;setAdapter($files)\n    -&gt;start();\n\n$session-&gt;remove('userId');\nunset($session-&gt;userId);\n</code></pre>"},{"location":"session/#adapters","title":"Adapters","text":""},{"location":"session/#libmemcached","title":"Libmemcached","text":"<p>Phalcon\\Session\\Adapter\\Libmemcached uses the Phalcon\\Storage\\Adapter\\Libmemcached internally to store data in Memcached. In order to use this adapter you need the settings for Memcached and a Phalcon\\Storage\\AdapterFactory object in order for the adapter to be created internally.  </p> <p>The available options for Memcached are: - <code>client</code> - client settings - <code>servers</code> - array of server data     - <code>host</code> - the host     - <code>port</code> - the port     - <code>weight</code> - the weight for the server</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Adapter\\Libmemcached;\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Storage\\AdapterFactory;\nuse Phalcon\\Storage\\SerializerFactory;\n\n$options = [\n    'client'  =&gt; [],\n    'servers' =&gt; [\n        [\n            'host'   =&gt; '127.0.0.1',\n            'port'   =&gt; 11211,\n            'weight' =&gt; 0,\n        ],\n    ],\n];\n\n$session           = new Manager();\n$serializerFactory = new SerializerFactory();\n$factory           = new AdapterFactory($serializerFactory);\n$libmemcached      = new Libmemcached($factory, $options);\n\n$session\n    -&gt;setAdapter($libmemcached)\n    -&gt;start();\n</code></pre>"},{"location":"session/#noop","title":"Noop","text":"<p>Phalcon\\Session\\Adapter\\Noop is an \"empty\" or <code>null</code> adapter. It can be used for testing, a joke for your colleagues or any other purpose that no session needs to be invoked.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Noop;\n\n$session = new Manager();\n$session\n    -&gt;setAdapter(new Noop())\n    -&gt;start();\n</code></pre>"},{"location":"session/#redis","title":"Redis","text":"<p>Phalcon\\Session\\Adapter\\Redis uses the Phalcon\\Storage\\Adapter\\Redis internally to store data in Redis. In order to use this adapter you need the settings for Redis and a Phalcon\\Storage\\AdapterFactory object in order for the adapter to be created internally.  </p> <p>The available options for Redis are: - <code>host</code> - the host - <code>port</code> - the port - <code>index</code> - the index - <code>persistent</code> - whether to persist connections or not - <code>auth</code> - authentication parameters - <code>socket</code> - socket connection</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Adapter\\Redis;\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Storage\\AdapterFactory;\nuse Phalcon\\Storage\\SerializerFactory;\n\n$options = [\n    'host'  =&gt; '127.0.0.1',\n    'port'  =&gt; 6379,\n    'index' =&gt; '1',\n];\n\n$session           = new Manager();\n$serializerFactory = new SerializerFactory();\n$factory           = new AdapterFactory($serializerFactory);\n$redis             = new Redis($factory, $options);\n\n$session\n    -&gt;setAdapter($redis)\n    -&gt;start();\n</code></pre>"},{"location":"session/#stream","title":"Stream","text":"<p>This adapter is the most common one, storing the session files on the file system. You need to create a Phalcon\\Session\\Adapter\\Stream adapter with the <code>savePath</code> defined in the options. The path needs to be writeable by the web server, otherwise your sessions will not work.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\n\n$session = new Manager();\n$files = new Stream(\n    [\n        'savePath' =&gt; '/tmp',\n    ]\n);\n\n$session\n    -&gt;setAdapter($files)\n    -&gt;start();\n</code></pre>"},{"location":"session/#custom","title":"Custom","text":"<p>The adapters implement PHP's SessionHandlerInterface. As a result you can create any adapter you need by extending this interface. You can also use any adapter that implements this interface and set the adapter to Phalcon\\Session\\Manager. There are more adapters available for this component in the Phalcon Incubator.</p> <pre><code>&lt;?php\n\nnamespace MyApp\\Session\\Adapter;\n\nuse SessionHandlerInterface;\n\nclass Custom extends SessionHandlerInterface\n{\n    /**\n     * Close\n     */\n    public function close() -&gt; bool;\n\n    /**\n     * Destroy\n     */\n    public function destroy($sessionId) -&gt; bool;\n\n    /**\n     * Garbage Collector\n     */\n    public function gc($maxlifetime) -&gt; bool;\n\n    /**\n     * Read\n     */\n    public function read($sessionId) -&gt; string;\n\n    /**\n     * Open\n     */\n    public function open($savePath, $sessionName) -&gt; bool;\n\n    /**\n     * Write\n     */\n    public function write($sessionId, $data) -&gt; bool;\n}\n</code></pre>"},{"location":"session/#exceptions","title":"Exceptions","text":"<p>Any exceptions thrown in the Session component will be of type Phalcon\\Session\\Exception. It is thrown if any session operation is not completed correctly. You can use these exceptions to selectively catch exceptions thrown only from this component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Exception;\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * @property Manager $session\n */\nclass IndexController extends Controller\n{\n    public function index()\n    {\n        try {\n            $this-&gt;session-&gt;set('key', 'value');\n        } catch (Exception $ex) {\n            echo $ex-&gt;getMessage();\n        }\n    }\n}\n</code></pre>"},{"location":"session/#bag","title":"Bag","text":"<p>Phalcon\\Session\\Bag is a component that helps separating session data into <code>namespaces</code>. This way you can create groups of session variables for your application. Setting data in the bag stores them automatically in the session:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\nuse Phalcon\\Session\\Bag as SessionBag;\n\n$container = new Di();\n\n$container-&gt;set(\n    'session',\n    function () {\n        $session = new Manager();\n        $files = new Stream(\n            [\n                'savePath' =&gt; '/tmp',\n            ]\n        );\n\n        $session\n            -&gt;setAdapter($files)\n            -&gt;start();\n\n        return $session;\n    }\n);\n\n$user = new SessionBag('user');\n\n$user-&gt;setDI($container);\n\n$user-&gt;name     = 'Dark Helmet';\n$user-&gt;password = 12345;\n</code></pre>"},{"location":"session/#dependency-injection","title":"Dependency Injection","text":"<p>If you use the Phalcon\\Di\\FactoryDefault container you can register your session manager. An example of the registration of the service as well as accessing it is below:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\n\n$container = new Di();\n\n$container-&gt;set(\n    'session',\n    function () {\n        $session = new Manager();\n        $files = new Stream(\n            [\n                'savePath' =&gt; '/tmp',\n            ]\n        );\n\n        $session\n            -&gt;setAdapter($files)\n            -&gt;start();\n\n        return $session;\n    }\n);\n</code></pre> <p>After registering the manager you can access your session from controllers, views or any other components that extend Phalcon\\Di\\Injectable as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Session\\Manager;\n\n/**\n * @property Manager $session\n */\nclass InvoicesController extends Controller\n{\n    public function indexAction()\n    {\n        // Set a session variable\n        $this-&gt;session-&gt;set('user-name', 'Dark Helmet');\n    }\n}\n</code></pre>"},{"location":"session/#persistent-data","title":"Persistent Data","text":"<p>You can also inject the Phalcon\\Session\\Bag component. Doing so will help you isolate variables for every class without polluting the session. The component is registered automatically using the <code>persistent</code> property name. </p> <p>NOTE</p> <p>A <code>session</code> service must be present for the <code>persistent</code> service to work and persist the data</p> <p>In your providers/services setup:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\n\n$container = new Di();\n\n$container-&gt;set(\n    'session',\n    function () {\n        $session = new Manager();\n        $files = new Stream(\n            [\n                'savePath' =&gt; '/tmp',\n            ]\n        );\n\n        $session\n            -&gt;setAdapter($files)\n            -&gt;start();\n\n        return $session;\n    }\n);\n</code></pre> <p>In a controller:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Session\\Bag;\nuse Phalcon\\Session\\Manager;\n\n/**\n * @property Bag     $persistent\n * @property Manager $session\n */\nclass InvoicesController extends Controller\n{\n    public function indexAction()\n    {\n        // Set a session variable\n        $this-&gt;persistent-&gt;name = 'Dark Helmet';\n        $this-&gt;session-&gt;name    = 'Princess Vespa';\n    }\n\n    public function echoAction()\n    {\n        // Set a session variable\n        echo $this-&gt;persistent-&gt;name; // 'Dark Helmet';\n        echo $this-&gt;session-&gt;name;    // 'Princess Vespa';\n    }\n}\n</code></pre> <p>In a component:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Session\\Bag;\nuse Phalcon\\Session\\Manager;\n\n/**\n * @property Bag     $persistent\n * @property Manager $session\n */\nclass InvoicesController extends Controller\n{\n    public function indexAction()\n    {\n        // Set a session variable\n        $this-&gt;persistent-&gt;name = 'President Skroob';\n    }\n\n    public function echoAction()\n    {\n        // Set a session variable\n        echo $this-&gt;persistent-&gt;name; // 'President Skroob';\n        echo $this-&gt;session-&gt;name;    // 'Princess Vespa';\n    }\n}\n</code></pre>"},{"location":"sponsors/","title":"Becoming a Sponsor","text":"<p>For those that wish to sponsor our work and further the development of Phalcon, we offer various sponsorship options that will fit any budget. Sponsoring our work allows us to devote more time to the project, offer faster responses to bugs and features and ensure the project's stability.</p>"},{"location":"sponsors/#sponsors-and-supporters","title":"Sponsors and Supporters","text":"Support Us"},{"location":"static-analysis/","title":"Static Analysis","text":""},{"location":"static-analysis/#overview","title":"Overview","text":"<p>Using a static analysis tool in your project can dramatically increase your code quality and highlight potential bugs before they are exposed.</p>"},{"location":"static-analysis/#integrating-psalm-with-phalcon","title":"Integrating Psalm with Phalcon","text":"<pre><code>composer require --dev vimeo/psalm:^3.11\n</code></pre> <p>or by manually adding it to <code>composer.json</code>:</p> <pre><code>{\n    \"require-dev\": {\n        \"vimeo/psalm\": \"^3.11\"\n    }\n}\n</code></pre>"},{"location":"static-analysis/#phalcon-ide-stubs","title":"Phalcon IDE Stubs","text":"<p>Phalcon provides a stub library that provides support for most IDEs. Psalm requires these stubs in order to properly analyze the codebase. These files exist in the Phalcon IDE Stubs repository.</p> <p>You can use the IDE Stubs library by adding it as a dependency:</p> <pre><code>composer require --dev phalcon/ide-stubs:^v4.0\n</code></pre> <p>or by manually adding it to <code>composer.json</code>:</p> <pre><code>{\n    \"require-dev\": {\n        \"phalcon/ide-stubs\": \",^v4.0\"\n    }\n}\n</code></pre>"},{"location":"static-analysis/#initializing-psalm","title":"Initializing Psalm","text":"<p>Run the command <code>vendor/bin/psalm --init</code> in the root of your project to initialize Psalm. Psalm will create a default project configuration file called <code>psalm.xml</code> at the root of your project. </p>"},{"location":"static-analysis/#sample-configuration-with-phalcon-stubs","title":"Sample Configuration with Phalcon Stubs","text":"<p>The configuration file below serves as a good base to use in your project. Replace the contents in <code>psalm.xml</code> with the contents below and update any parameters applicable to your project settings.</p> <p>If you find that you need to stub additional Phalcon components, add them to the stub section of the configuration with the full path to their location in the <code>ide-stubs</code> package.</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;psalm\n    name=\"Phalcon - Psalm Config\"\n    totallyTyped=\"true\"\n    errorLevel=\"3\"\n    resolveFromConfigFile=\"true\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"https://getpsalm.org/schema/config\"\n    xsi:schemaLocation=\"https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd\"\n&gt;\n    &lt;stubs&gt;\n        &lt;file name=\"vendor/phalcon/ide-stubs/src/Phalcon/Di/Injectable.php\" /&gt;\n        &lt;file name=\"vendor/phalcon/ide-stubs/src/Phalcon/Di/AbstractInjectionAware.php\"/&gt;\n        &lt;file name=\"vendor/phalcon/ide-stubs/src/Phalcon/Mvc/Controller.php\"/&gt;\n        &lt;file name=\"vendor/phalcon/ide-stubs/src/Phalcon/Mvc/Model.php\"/&gt;\n        &lt;file name=\"vendor/phalcon/ide-stubs/src/Phalcon/Validation.php\"/&gt;\n        &lt;file name=\"vendor/phalcon/ide-stubs/src/Phalcon/Http/Response.php\"/&gt;\n        &lt;file name=\"vendor/phalcon/ide-stubs/src/Phalcon/Http/Request.php\"/&gt;\n    &lt;/stubs&gt;\n    &lt;projectFiles&gt;\n        &lt;directory name=\"app\" /&gt;\n        &lt;directory name=\"src\" /&gt;\n        &lt;ignoreFiles&gt;\n            &lt;directory name=\"vendor\" /&gt;\n            &lt;directory name=\"public\" /&gt;\n        &lt;/ignoreFiles&gt;\n    &lt;/projectFiles&gt;\n    &lt;issueHandlers&gt;\n        &lt;PropertyNotSetInConstructor&gt;\n            &lt;errorLevel type=\"suppress\"&gt;\n                &lt;directory name=\"src\"/&gt;\n            &lt;/errorLevel&gt;\n        &lt;/PropertyNotSetInConstructor&gt;\n        &lt;MissingConstructor&gt;\n            &lt;errorLevel type=\"suppress\"&gt;\n                &lt;directory name=\"src/Controller\"/&gt;\n            &lt;/errorLevel&gt;\n        &lt;/MissingConstructor&gt;\n    &lt;/issueHandlers&gt;\n&lt;/psalm&gt;\n</code></pre>"},{"location":"static-analysis/#running-psalm","title":"Running Psalm","text":"<p>When you execute <code>vendor/bin/psalm</code> in your command-line, you will a get similar output depending on your errors:</p> <pre><code>Scanning files...\nAnalyzing files...\n\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 60 / 95 (63%)\n\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\n------------------------------\nNo errors found!\n------------------------------\n\nChecks took 0.80 seconds and used 214.993MB of memory\nPsalm was able to infer types for 92.9630% of the codebase\n</code></pre> <p>Fix your errors, and re-run Psalm!</p>"},{"location":"static-analysis/#resources","title":"Resources","text":"<ul> <li>Psalm Documentation</li> <li>Static Analysis with Psalm PHP</li> <li>What Is Static Code Analysis?</li> </ul>"},{"location":"tag/","title":"Tag (View Helpers)","text":""},{"location":"tag/#overview","title":"Overview","text":"<p>Writing and maintaining HTML markup can quickly become a tedious task because of the naming conventions and numerous attributes that have to be taken into consideration. Phalcon deals with this complexity by offering the Phalcon\\Tag component which in turn offers view helpers to generate HTML markup.</p> <p>This component can be used in a plain HTML+PHP view or in a Volt template.</p> <p>NOTE</p> <p>This offers the same functionality as <code>Phalcon\\Html\\TagFactory</code>. In future versions, this component will be replaced by the <code>TagFactory</code> one. The reason for both components is to offer as much time as possible to developers to adapt their code, since HTML generation touches a lot of areas of the application, the view in particular.</p>"},{"location":"tag/#doctype","title":"DocType","text":"<p>You can set the doctype for your page using <code>setDocType()</code>. The method accepts one of the available constants, generating the necessary <code>&lt;doctype&gt;</code> HTML. The method returns the <code>Tag</code> component and thus the call can be chained.</p> <ul> <li><code>HTML32</code> </li> <li><code>HTML401_STRICT</code> </li> <li><code>HTML401_TRANSITIONAL</code></li> <li><code>HTML401_FRAMESET</code> </li> <li><code>HTML5</code> </li> <li><code>XHTML10_STRICT</code> </li> <li><code>XHTML10_TRANSITIONAL</code></li> <li><code>XHTML10_FRAMESET</code> </li> <li><code>XHTML11</code> </li> <li><code>XHTML20</code> </li> <li><code>XHTML5</code> </li> </ul> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\nTag::setDocType(Tag::XHTML20);\n\necho Tag::getDocType(); \n</code></pre> <p>The above example will produce:</p> <pre><code>&lt;!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 2.0//EN'\n    'http://www.w3.org/MarkUp/DTD/xhtml2.dtd'&gt;\n</code></pre> <p>The default value is <code>HTML5</code> which generates:</p> <pre><code>&lt;!DOCTYPE html&gt;\n</code></pre> <p>You can output the doctype using <code>getDocType()</code> in your views:</p> <pre><code>&lt;?php echo $this-&gt;tag-&gt;getDocType(); ?&gt;\n</code></pre> <p>or in Volt: </p> <pre><code>{% raw %}{{ get_doctype() }}{% endraw %}\n</code></pre>"},{"location":"tag/#title","title":"Title","text":"<p>Phalcon\\Tag offers methods to set the tag of the resulting page or HTML sent to the user. There are several methods available:</p>"},{"location":"tag/#appendtitle","title":"<code>appendTitle()</code>","text":"<p>Appends text to the current title. The method accepts either a <code>string</code> or an <code>array</code>. </p> <p>NOTE</p> <p>If a <code>string</code> is supplied, it will be added to the internal collection holding the append title text. If however you supply an <code>array</code> the internal collection will be replaced.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\nTag::setTitle('Phalcon');\n\necho Tag::getTitle(); // 'Phalcon'\n\nTag::appendTitle(' Framework');\nTag::appendTitle(' Rocks');\n\necho Tag::getTitle(); // 'Phalcon Framework Rocks'\n\nTag::appendTitle('Will be replaced');\nTag::appendTitle(\n    [\n        ' Framework',\n        ' Rocks',\n    ]\n);\n\necho Tag::getTitle(); // 'Phalcon Framework Rocks'\n</code></pre>"},{"location":"tag/#friendlytitle","title":"<code>friendlyTitle()</code>","text":"<p>Converts text to URL-friendly strings. It accepts the following parameters: - <code>text</code> - The text to be processed - <code>parameters</code> - Array of parameters to generate the friendly title</p> <p>The parameters can be: - <code>lowercase</code> - <code>bool</code> Whether to convert everything to lowercase or not - <code>separator</code> - <code>string</code> - The separator. Defaults to <code>-</code> - <code>replace</code> - <code>array</code> - Key value array to replace characters with others. This uses [str_replace][str_replace] internally for this replacement</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::friendlyTitle('Phalcon Framework'); \n// 'Phalcon-Framework';\n\necho Tag::friendlyTitle(\n    'Phalcon Framework',\n    [\n        'separator' =&gt; '_',\n        'lowercase' =&gt; true,\n    ]\n); // 'phalcon_framework\n\necho Tag::friendlyTitle(\n    'Phalcon Framework',\n    [\n        'separator' =&gt; '_',\n        'lowercase' =&gt; true,\n        'replace'   =&gt; [\n            'a' =&gt; 'x',\n            'e' =&gt; 'x',\n            'o' =&gt; 'x',\n        ] \n    ]\n); // 'phxlcxn_frxmxwxrk\n</code></pre>"},{"location":"tag/#gettitle","title":"<code>getTitle()</code>","text":"<p>Returns the current title. The title is automatically escaped. The method accepts two parameters:  - <code>prepend</code> - <code>bool</code> Whether to output any text set with <code>prependTitle()</code>  - <code>append</code> - <code>bool</code> Whether to output any text set with <code>appendTitle()</code></p> <p>Both parameters are <code>true</code> by default.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\nTag::setTitleSeparator(' ');\n\nTag::prependTitle('Hello');\nTag::setTitle('World');\nTag::appendTitle('from Phalcon');\n\necho Tag::getTitle();             // 'Hello World from Phalcon';\necho Tag::getTitle(false);        // 'World from Phalcon';\necho Tag::getTitle(true, false);  // 'Hello World';\necho Tag::getTitle(false, false); // 'World';\n</code></pre>"},{"location":"tag/#gettitleseparator","title":"<code>getTitleSeparator()</code>","text":"<p>Returns the current title separator. The default value is an empty string.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::getTitleSeparator(); // ''\n</code></pre>"},{"location":"tag/#prependtitle","title":"<code>prependTitle()</code>","text":"<p>Prepends text to the current title. The method accepts either a <code>string</code> or an <code>array</code>. </p> <p>NOTE</p> <p>If a <code>string</code> is supplied, it will be added to the internal collection holding the prepend title text. If however you supply an <code>array</code> the internal collection will be replaced.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\nTag::setTitle('Rocks');\n\necho Tag::getTitle(); // 'Rocks'\n\nTag::prependTitle('Phalcon ');\nTag::prependTitle('Framework ');\n\necho Tag::getTitle(); // 'Phalcon Framework Rocks'\n\nTag::prependTitle('Will be replaced');\nTag::prependTitle(\n    [\n        'Phalcon ',\n        'Framework ',\n    ]\n);\n\necho Tag::getTitle(); // 'Phalcon Framework Rocks'\n</code></pre>"},{"location":"tag/#rendertitle","title":"<code>renderTitle()</code>","text":"<p>Returns the current title wrapped in <code>&lt;title&gt;</code> tags. The title is automatically escaped. The method accepts two parameters:  - <code>prepend</code> - <code>bool</code> Whether to output any text set with <code>prependTitle()</code>  - <code>append</code> - <code>bool</code> Whether to output any text set with <code>appendTitle()</code></p> <p>Both parameters are <code>true</code> by default.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\nTag::setTitleSeparator(' ');\n\nTag::prependTitle('Hello');\nTag::setTitle('World');\nTag::appendTitle('from Phalcon');\n\necho Tag::renderTitle();             \n// '&lt;title&gt;Hello World from Phalcon&lt;/title&gt;';\necho Tag::renderTitle(false);        \n// '&lt;title&gt;World from Phalcon&lt;/title&gt;';\necho Tag::renderTitle(true, false);  \n// '&lt;title&gt;Hello World&lt;/title&gt;';\necho Tag::renderTitle(false, false); \n// '&lt;title&gt;World&lt;/title&gt;';\n</code></pre>"},{"location":"tag/#settitle","title":"<code>setTitle()</code>","text":"<p>Sets the title text. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\nTag::setTitle('World');\n</code></pre>"},{"location":"tag/#settitleseparator","title":"<code>setTitleSeparator()</code>","text":"<p>Set the separator of the title.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\nTag::setTitleSeparator(' ');\n</code></pre>"},{"location":"tag/#input","title":"Input","text":""},{"location":"tag/#checkfield","title":"<code>checkField()</code>","text":"<p>Builds a HTML <code>input[type='check']</code> tag. Accepts an array with the attributes of the element. The first element of the array is the name of the element.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::checkField(\n    [\n        'terms',\n        'value' =&gt; 'Y',\n    ]\n);\n\n// &lt;input type='checkbox' id='terms' name='terms' value='Y' /&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;checkField(\n    [\n        'terms', \n        'value' =&gt; 'Y',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ check_field('terms', 'value': 'Y') }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#colorfield","title":"<code>colorField()</code>","text":"<p>Builds a HTML <code>input[type='color']</code> tag. Accepts an array with the attributes of the element. The first element of the array is the name of the element.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::colorField(\n    [\n        'background',\n        'class' =&gt; 'myclass',\n    ]\n);\n\n// &lt;input type='color' id='background' name='background' class='myclass' /&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;colorField(\n    [\n        'background',\n        'class' =&gt; 'myclass',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ color_field('background', 'class': 'myclass') }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#datefield","title":"<code>dateField()</code>","text":"<p>Builds a HTML <code>input[type='date']</code> tag. Accepts an array with the attributes of the element. The first element of the array is the name of the element.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::dateField(\n    [\n        'born',\n        'value' =&gt; '1980-01-01',\n    ]\n);\n\n// &lt;input type='date' id='born' name='born' value='1980-01-01' /&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;dateField(\n    [\n        'born',\n        'value' =&gt; '1980-01-01',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ date_field('born', 'value': '1980-01-01') }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#datetimefield","title":"<code>dateTimeField()</code>","text":"<p>Builds a HTML <code>input[type='datetime']</code> tag. Accepts an array with the attributes of the element. The first element of the array is the name of the element.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::dateTimeField(\n    [\n        'born',\n        'value' =&gt; '1980-01-01 01:02:03',\n    ]\n);\n\n// &lt;input type='datetime' id='born' name='born' \n//        value='1980-01-01 01:02:03' /&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;dateTimeField(\n    [\n        'born',\n        'value' =&gt; '1980-01-01 01:02:03',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ date_time_field('born', 'value': '1980-01-01') }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#datetimelocalfield","title":"<code>dateTimeLocalField()</code>","text":"<p>Builds a HTML <code>input[type='datetime-local']</code> tag. Accepts an array with the attributes of the element. The first element of the array is the name of the element.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::dateTimeLocalField(\n    [\n        'born',\n        'value' =&gt; '1980-01-01 01:02:03',\n    ]\n);\n\n// &lt;input type='datetime-local' id='born' name='born' \n//        value='1980-01-01 01:02:03' /&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;dateTimeLocalField(\n    [\n        'born',\n        'value' =&gt; '1980-01-01 01:02:03',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ date_time_local_field('born', 'value': '1980-01-01 01:02:03') }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#filefield","title":"<code>fileField()</code>","text":"<p>Builds a HTML <code>input[type='file']</code> tag. Accepts an array with the attributes of the element. The first element of the array is the name of the element.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::fileField(\n    [\n        'document',\n        'class' =&gt; 'input',\n    ]\n);\n\n// &lt;input type='file' id='document' name='document' class='input' /&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;fileField(\n    [\n        'document',\n        'class' =&gt; 'input',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ file_field('document', 'class': 'input') }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#hiddenfield","title":"<code>hiddenField()</code>","text":"<p>Builds a HTML <code>input[type='hidden']</code> tag. Accepts an array with the attributes of the element. The first element of the array is the name of the element.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::hiddenField(\n    [\n        'id',\n        'value' =&gt; '1234',\n    ]\n);\n\n// &lt;input type='hidden' id='id' name='id' value='1234' /&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;hiddenField(\n    [\n        'id',\n        'value' =&gt; '1234',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ hidden_field('id', 'value': '1234') }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#imageinput","title":"<code>imageInput()</code>","text":"<p>Builds a HTML <code>input[type='image']</code> tag. Accepts an array with the attributes of the element. The first element of the array is the name of the element.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::imageInput(\n    [\n        'src' =&gt; '/img/button.png',\n    ]\n);\n\n// &lt;input type='image' src='/img/button.png' /&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;imageInput(\n    [\n        'src' =&gt; '/img/button.png',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ image_input('src': '/img/button.png') }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#monthfield","title":"<code>monthField()</code>","text":"<p>Builds a HTML <code>input[type='month']</code> tag. Accepts an array with the attributes of the element. The first element of the array is the name of the element.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::monthField(\n    [\n        'month',\n        'value' =&gt; '04',\n    ]\n);\n\n// &lt;input type='month' id='month' name='month' value='04' /&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;monthField(\n    [\n        'month',\n        'value' =&gt; '04',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ month_field('month', 'value': '04') }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#numericfield","title":"<code>numericField()</code>","text":"<p>Builds a HTML <code>input[type='number']</code> tag. Accepts an array with the attributes of the element. The first element of the array is the name of the element.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::numericField(\n    [\n        'price',\n        'min' =&gt; '1',\n        'max' =&gt; '5',\n    ]\n);\n\n// &lt;input type='number' id='price' name='price' min='1' max='5' /&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;numericField(\n    [\n       'price',\n       'min' =&gt; '1',\n       'max' =&gt; '5',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ numeric_field('price', 'min': '1', 'max': '5') }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#radiofield","title":"<code>radioField()</code>","text":"<p>Builds a HTML <code>input[type='radio']</code> tag. Accepts an array with the attributes of the element. The first element of the array is the name of the element.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::radioField(\n    [\n        'gender',\n        'value' =&gt; 'Male',\n    ]\n);\n\n// &lt;input type='radio' id='gender' name='gender' value='Male' /&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;radioField(\n    [\n        'gender',\n        'value' =&gt; 'Male',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ radio_field('gender', 'value': 'Male') }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#rangefield","title":"<code>rangeField()</code>","text":"<p>Builds a HTML <code>input[type='range']</code> tag. Accepts an array with the attributes of the element. The first element of the array is the name of the element.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::rangeField(\n    [\n        'points',\n        'min' =&gt; '0',\n        'max' =&gt; '10',\n    ]\n);\n\n// &lt;input type='range' id='points' name='points' min='0' max='10' /&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;rangeField(\n    [\n        'points',\n        'min' =&gt; '0',\n        'max' =&gt; '10',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ range_field('points', 'min': '0', 'max': '10') }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#searchfield","title":"<code>searchField()</code>","text":"<p>Builds a HTML <code>input[type='search']</code> tag. Accepts an array with the attributes of the element. The first element of the array is the name of the element.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::searchField(\n    [\n        'search',\n        'q' =&gt; 'startpage',\n    ]\n);\n\n// &lt;input type='search' id='search' name='search' q='startpage' /&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;searchField(\n    [\n        'search',\n        'q' =&gt; 'startpage',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ search_field('search', 'q': 'startsearch') }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#submitbutton","title":"<code>submitButton()</code>","text":"<p>Builds a HTML <code>input[type='submit']</code> tag. Accepts an array with the attributes of the element. The first element of the array is the name of the element.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::submitButton(\n    [\n        'Save',\n    ]\n);\n\n// &lt;input type='submit' value='Save' /&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;submitButton(\n    [\n       'Save',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ submit_button('Save') }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#telfield","title":"<code>telField()</code>","text":"<p>Builds a HTML <code>input[type='tel']</code> tag. Accepts an array with the attributes of the element. The first element of the array is the name of the element.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::telField(\n    [\n        'mobile',\n        'size' =&gt; '12',\n    ]\n);\n\n// &lt;input type='tel' id='mobile' name='mobile' size='12' /&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;telField(\n    [\n       'mobile',\n       'size' =&gt; '12',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ tel_field('mobile', 'size': '12') }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#passwordfield","title":"<code>passwordField()</code>","text":"<p>Builds a HTML <code>input[type='text']</code> tag. Accepts an array with the attributes of the element. The first element of the array is the name of the element.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::textField(\n    [\n        'name',\n        'size' =&gt; '30',\n    ]\n);\n\n// &lt;input type='text' id='name' name='name' size='30' /&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;textField(\n    [\n       'name',\n       'size' =&gt; '30',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ text_field('name', 'size': '30') }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#timefield","title":"<code>timeField()</code>","text":"<p>Builds a HTML <code>input[type='time']</code> tag. Accepts an array with the attributes of the element. The first element of the array is the name of the element.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::timeField(\n    [\n        'start',\n        'size' =&gt; '5',\n    ]\n);\n\n// &lt;input type='time' id='start' name='start' size='5' /&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;timeField(\n    [\n       'start',\n       'size' =&gt; '5',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ time_field('start', 'size': '5') }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#urlfield","title":"<code>urlField()</code>","text":"<p>Builds a HTML <code>input[type='url']</code> tag. Accepts an array with the attributes of the element. The first element of the array is the name of the element.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::urlField(\n    [\n        'homepage',\n    ]\n);\n\n// &lt;input type='url' id='homepage' name='homepage' /&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;urlField(\n    [\n       'homepage',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ url_field('homepage') }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#weekfield","title":"<code>weekField()</code>","text":"<p>Builds a HTML <code>input[type='week']</code> tag. Accepts an array with the attributes of the element. The first element of the array is the name of the element.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::weekField(\n    [\n        'week',\n        'size' =&gt; '2',\n    ]\n);\n\n// &lt;input type='week' id='week' name='week' size='2' /&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;weekField(\n    [\n       'week',\n       'size' =&gt; '2',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ week_field('week', 'size': '2') }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#elements","title":"Elements","text":""},{"location":"tag/#image","title":"<code>image()</code>","text":"<p>Builds a HTML image tag. Accepts an array with the attributes of the element. The first element of the array is the src of the element. The method accepts a second boolean parameter, signifying whether this resource is local or not.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::image(\n    [\n       'img/hello.gif',\n       'alt' =&gt; 'alternative text',\n    ]\n);\n\n// &lt;img alt='alternative text' src='/your-app/img/hello.gif'&gt;\n\necho Tag::image(\n   'http://static.mywebsite.com/img/bg.png',\n    false\n);\n\n// &lt;img src='http://static.mywebsite.com/img/bg.png'&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;image(\n    [\n       'img/hello.gif',\n       'alt' =&gt; 'alternative text',\n    ]\n); ?&gt;\n\n&lt;?php echo $this-&gt;tag-&gt;image(\n   'http://static.mywebsite.com/img/bg.png',\n    false\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ image('img/hello.gif', 'alt': 'alternative text') }}\n{{ image('http://static.mywebsite.com/img/bg.png', false) }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#select","title":"<code>select()</code>","text":"<p><code>select()</code> is a helper that allows you to create a <code>&lt;select&gt;</code> element based on a <code>Phalcon\\Mvc\\Model</code> resultset. You will need to have a valid database connection set up in your DI container for this method to produce the correct HTML. The component requires parameters and data to operate. - <code>parameters</code> - <code>string</code>/<code>array</code>. If a string is passed, it will be the name of the element. If an array is passed, the first element will be the name of the element. There available parameters are:     - <code>id</code> - <code>string</code> - sets the id of the element     - <code>using</code> - <code>array</code> - required a two element array defining the key and value fields of the model to populate the select     - <code>useEmpty</code> - <code>bool</code> - defaults to <code>false</code>. If set, it will add an empty option to the select box     - <code>emptyText</code> - <code>string</code> - the text to display for the empty option (i.e. Choose an option)     - <code>emptyValue</code> - <code>string</code>/<code>number</code> - the value to assign for the empty option     - any additional HTML attributes in a key/value format - <code>data</code> - <code>Resultset</code> the resultset from the model operation. </p> <pre><code>&lt;?php\n\nuse MyApp\\Constants\\Status;\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Tag;\n\n$resultset = Invoices::find(\n    [\n        'conditions' =&gt; 'inv_status_flag = :status:',\n        'bind'       =&gt; [\n            'status' =&gt; Status::UNPAID,\n        ]\n    ]\n);\n\necho Tag::select(\n    [\n        'invoiceId',\n        $resultset,\n        'using'      =&gt; [\n            'inv_id', \n            'inv_title',\n        ],\n        'useEmpty'   =&gt; true,\n        'emptyText'  =&gt; 'Choose an Invoice to pay',\n        'emptyValue' =&gt; '0',\n    ]\n);\n\n// &lt;select id='invoiceId' name='invoiceId'&gt;\n//     &lt;option value='0'&gt;Choose an Invoice to pay&lt;/option&gt;\n//     &lt;option value='24'&gt;Chocolates 24oz box&lt;/option&gt;\n//     &lt;option value='77'&gt;Sugar 1 bag&lt;/option&gt;\n// &lt;/select&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;select(\n    [\n        'invoiceId',\n        $resultset,\n        'using'      =&gt; [\n            'inv_id', \n            'inv_title',\n        ],\n        'useEmpty'   =&gt; true,\n        'emptyText'  =&gt; 'Choose an Invoice to pay',\n        'emptyValue' =&gt; '0',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ select(\n    [\n        'invoiceId',\n        $resultset,\n        'using'      : [\n            'inv_id', \n            'inv_title',\n        ],\n        'useEmpty'   : true,\n        'emptyText'  : 'Choose an Invoice to pay',\n        'emptyValue' : '0',\n    ]\n) }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#selectstatic","title":"<code>selectStatic()</code>","text":"<p>This helper is similar to <code>select()</code>, but it uses a PHP array as the source. The component requires parameters and data to operate. - <code>parameters</code> - <code>string</code>/<code>array</code>. If a string is passed, it will be the name of the element. If an array is passed, the first element will be the name of the element. There available parameters are:     - <code>id</code> - <code>string</code> - sets the id of the element     - <code>useEmpty</code> - <code>bool</code> - defaults to <code>false</code>. If set, it will add an empty option to the select box     - <code>emptyText</code> - <code>string</code> - the text to display for the empty option (i.e. Choose an option)     - <code>emptyValue</code> - <code>string</code>/<code>number</code> - the value to assign for the empty option     - any additional HTML attributes in a key/value format - <code>data</code> - <code>array</code> the array of data with key as the id and value as the text </p> <pre><code>&lt;?php\n\nuse MyApp\\Constants\\Status;\nuse MyApp\\Models\\Invoices;\nuse Phalcon\\Tag;\n\n$resultset = [\n    24 =&gt; 'Chocolates 24oz box',\n    77 =&gt; 'Sugar 1 bag',\n];\n\necho Tag::selectStatic(\n    [\n        'invoiceId',\n        $resultset,\n        'useEmpty'   =&gt; true,\n        'emptyText'  =&gt; 'Choose an Invoice to pay',\n        'emptyValue' =&gt; '0',\n    ]\n);\n\n// &lt;select id='invoiceId' name='invoiceId'&gt;\n//     &lt;option value='0'&gt;Choose an Invoice to pay&lt;/option&gt;\n//     &lt;option value='24'&gt;Chocolates 24oz box&lt;/option&gt;\n//     &lt;option value='77'&gt;Sugar 1 bag&lt;/option&gt;\n// &lt;/select&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php echo $this-&gt;tag-&gt;selectStatic(\n    [\n        'invoiceId',\n        $resultset,\n        'useEmpty'   =&gt; true,\n        'emptyText'  =&gt; 'Choose an Invoice to pay',\n        'emptyValue' =&gt; '0',\n    ]\n); ?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}{{ select(\n    [\n        'invoiceId',\n        $resultset,\n        'useEmpty'   : true,\n        'emptyText'  : 'Choose an Invoice to pay',\n        'emptyValue' : '0',\n    ]\n) }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#taghtml","title":"<code>tagHtml()</code>","text":"<p>Phalcon offers a generic HTML helper that allows the generation of any kind of HTML element. It is up to the developer to produce a valid HTML element name to the helper. The accompanying <code>tagHtmlClose()</code> can be used to close the tag if necessary.</p> <p>The <code>tagHtml()</code> accepts the following parameters - <code>name</code> - <code>string</code> - the name of the element - <code>attributes</code> - <code>array</code> - any attributes - <code>selfClose</code> - <code>bool</code> - whether this is a self closing element or not - <code>onlyStart</code> - <code>bool</code> - whether to produce only the opening part of the tag (i.e. <code>&lt;tag&gt;</code> vs. <code>&lt;tag&gt;&lt;/tag&gt;</code>) - <code>useEol</code> - <code>bool</code> - add a <code>PHP_EOL</code> at the end of the generated string or not</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::tagHtml(\n    'canvas', \n    [\n        'id'    =&gt; 'canvas1', \n        'width' =&gt; '300', \n        'class' =&gt; 'cnvclass',\n    ], \n    false, \n    true, \n    true\n);\n\necho 'This is my canvas';\necho Tag::tagHtmlClose('canvas');\n\n// &lt;canvas id='canvas1' width='300' class='cnvclass'&gt;\n// This is my canvas\n// &lt;/canvas&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php \n\necho $this-&gt;tag-&gt;tagHtml(\n    'canvas', \n    [\n        'id'    =&gt; 'canvas1', \n        'width' =&gt; '300', \n        'class' =&gt; 'cnvclass',\n    ], \n    false, \n    true, \n    true\n);\n\necho 'This is my canvas';\necho $this-&gt;tag-&gt;tagHtmlClose('canvas'); \n\n?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}\n{{ tag_html('canvas', ['id': 'canvas1', width': '300', 'class': 'cnvclass'], false, true, true) }}\n    This is my canvas\n{{ tag_html_close('canvas') }}\n{% endraw %}\n</code></pre></p>"},{"location":"tag/#assets","title":"Assets","text":"<p>Phalcon\\Tag offers helper methods to generate stylesheet and javascript HTML tags.</p>"},{"location":"tag/#stylesheetlink","title":"<code>stylesheetLink()</code>","text":"<p>The first parameter a <code>string</code> or an <code>array</code> is the parameters necessary to construct the element. The second parameter is a boolean, dictating whether the link is pointing to a local asset or a remote.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::stylesheetLink('css/style.css');\n// &lt;link rel='stylesheet' href='/css/style.css'&gt;\n\necho Tag::stylesheetLink(\n    'https://fonts.googleapis.com/css?family=Rosario',\n    false\n);\n// &lt;link rel='stylesheet' \n//       href='https://fonts.googleapis.com/css?family=Rosario' \n//       type='text/css'&gt;\n\necho Tag::stylesheetLink(\n    [\n        'href'  =&gt; 'https://fonts.googleapis.com/css?family=Rosario',\n        'class' =&gt; 'some-class',\n    ],\n    false\n);\n// &lt;link rel='stylesheet' \n//       href='https://fonts.googleapis.com/css?family=Rosario' \n//       type='text/css'&gt;\n</code></pre> <p>HTML syntax</p> <pre><code>&lt;?php echo $this-&gt;tag-&gt;stylesheetLink('css/style.css'); ?&gt;\n\n&lt;?php \n\necho $this-&gt;tag-&gt;stylesheetLink(\n    'https://fonts.googleapis.com/css?family=Rosario',\n    false\n); ?&gt;\n\n&lt;?php \n\necho $this-&gt;tag-&gt;stylesheetLink(\n    [\n        'href'  =&gt; 'https://fonts.googleapis.com/css?family=Rosario',\n        'class' =&gt; 'some-class',\n    ],\n    false\n); ?&gt;\n</code></pre> <p>Volt Syntax:</p> <pre><code>{% raw %}{{ stylesheet_link('css/style.css') }}\n{{ stylesheet_link(\n        'https://fonts.googleapis.com/css?family=Rosario', \n        false\n    ) \n}}\n{{ stylesheet_link(\n        [\n            'href'  : 'https://fonts.googleapis.com/css?family=Rosario',\n            'class' : 'some-class',\n        ],\n        false\n    ) \n}}{% endraw %}\n</code></pre>"},{"location":"tag/#javascriptinclude","title":"<code>javascriptInclude()</code>","text":"<p>The first parameter a <code>string</code> or an <code>array</code> is the parameters necessary to construct the element. The second parameter is a boolean, dictating whether the link is pointing to a local asset or a remote.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::javascriptInclude('js/jquery.js');\n// &lt;script src='/js/jquery.js' type='text/javascript'&gt;&lt;/script&gt;\n\necho Tag::javascriptInclude(\n    'https://code.jquery.com/jquery/jquery.min.js',\n    false\n);\n// &lt;script src='https://code.jquery.com/jquery/jquery.min.js' \n//         type='text/javascript'&gt;&lt;/script&gt;\n\necho Tag::javascriptInclude(\n    [\n        'src'  =&gt; 'https://code.jquery.com/jquery/jquery.min.js',\n        'type' =&gt; 'application/javascript',\n    ],\n    false\n);\n// &lt;script src='https://code.jquery.com/jquery/jquery.min.js' \n//         type='application/javascript'&gt;&lt;/script&gt;\n</code></pre> <p>HTML syntax</p> <pre><code>&lt;?php echo $this-&gt;tag-&gt;javascriptInclude('js/jquery.js'); ?&gt;\n\n&lt;?php \n\necho $this-&gt;tag-&gt;javascriptInclude(\n    'https://fonts.googleapis.com/css?family=Rosario',\n    false\n); ?&gt;\n\n&lt;?php \n\necho $this-&gt;tag-&gt;javascriptInclude(\n    [\n        'src'  =&gt; 'https://code.jquery.com/jquery/jquery.min.js',\n        'type' =&gt; 'application/javascript',\n    ],\n    false\n); ?&gt;\n</code></pre> <p>Volt Syntax:</p> <pre><code>{% raw %}{{ javascript_include('js/jquery.js') }}\n{{ javascript_include(\n        'https://code.jquery.com/jquery/jquery.min.js', \n        false\n    ) \n}}\n{{ javascript_include(\n        [\n            'src'  : 'https://code.jquery.com/jquery/jquery.min.js',\n            'type' : 'application/javascript',\n        ],\n        false\n    ) \n}}{% endraw %}\n</code></pre>"},{"location":"tag/#links","title":"Links","text":"<p>A common task in any web application is to show links that help with the navigation from one area to another. Phalcon\\Tag offers <code>linkTo()</code> to help with this task. The method accepts three parameters. - <code>parameters</code> - <code>array</code>/<code>string</code> - The attributes and parameters of the element. If a string is passed it will be treated as the target URL for the link. If an array is passed, the following elements can be sent:     - <code>action</code> - the URL. If the <code>action</code> is an array, you can reference a named route defined in your routes using the <code>for</code> element     - <code>query</code> - the base query for the URL     - <code>text</code> - the text of the link     - <code>local</code> - whether this is a local or remote link     - additional key/value attributes for the link - <code>text</code> - <code>string</code> - the text of the link - <code>local</code> - <code>bool</code> - whether this is a local or remote link</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::linkTo('signup/register', 'Register Here!');\n\n// &lt;a href='/signup/register'&gt;Register Here!&lt;/a&gt;\necho Tag::linkTo(\n    [\n        'signup/register',\n        'Register Here!',\n        'class' =&gt; 'btn-primary',\n    ]\n);\n// &lt;a href='/signup/register' class='btn-primary'&gt;Register Here!&lt;/a&gt;\n\necho Tag::linkTo('https://phalcon.io/', 'Phalcon', false);\n// &lt;a href='https://phalcon.io/'&gt;Phalcon&lt;/a&gt;\n\n echo Tag::linkTo(\n    [\n        'https://phalcon.io/',\n        'Phalcon Home',\n        false,\n    ]\n);\n// &lt;a href='https://phalcon.io/'&gt;Phalcon Home&lt;/a&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php \n\necho $this-&gt;tag-&gt;linkTo('signup/register', 'Register Here!');\n\necho $this-&gt;tag-&gt;linkTo(\n    [\n        'signup/register',\n        'Register Here!',\n        'class' =&gt; 'btn-primary',\n    ]\n);\n\necho $this-&gt;tag-&gt;linkTo('https://phalcon.io/', 'Phalcon', false);\n\n echo $this-&gt;tag-&gt;linkTo(\n    [\n        'https://phalcon.io/',\n        'Phalcon Home',\n        false,\n    ]\n);\n\n?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}\n{{ link_to('signup/register', 'Register Here!') }}\n{{ link_to(\n    'signup/register',\n    'Register Here!',\n    'class': 'btn-primary'\n) }}\n\n{{ link_to('https://phalcon.io/', 'Phalcon', false) }}\n\n{{ link_to(\n    'https://phalcon.io/',\n    'Phalcon Home',\n    false\n) }}{% endraw %}\n</code></pre></p> <p>If you have named routes, you can use the <code>for</code> keyword in your parameter array to reference it. Phalcon\\Tag will resolve the route internally and produce the correct URL using Phalcon\\Url.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::linkTo(\n    [\n        [   \n            'for'   =&gt; 'invoice-view', \n            'title' =&gt; 12345, \n            'name'  =&gt; 'invoice-12345'\n        ], \n        'Show Invoice'\n    ]\n);\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php \n\necho $this-&gt;tag-&gt;linkTo(\n    [\n        [   \n            'for'   =&gt; 'invoice-view', \n            'title' =&gt; 12345, \n            'name'  =&gt; 'invoice-12345'\n        ], \n        'Show Invoice'\n    ]\n);\n\n?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}\n{{ link_to('signup/register', 'Register Here!') }}\n{{ link_to(\n    [   \n        'for'   : 'invoice-view', \n        'title' : 12345, \n        'name'  : 'invoice-12345'\n    ], \n    'Show Invoice',\n    'class': 'edit-btn'\n) }}{% endraw %}\n</code></pre></p>"},{"location":"tag/#forms","title":"Forms","text":"<p>Forms play an important role in any web application, since they are used to collect input from the user. Phalcon\\Tag offers the <code>form()</code> and <code>endForm()</code> methods, which create <code>&lt;form&gt;</code> elements.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::form(\n    [\n        '/admin/invoices/create', \n        'method' =&gt; 'post',\n        'class'  =&gt; 'input'\n    ]\n);\n\n// &lt;form action='admin/invoices/create' method='post' class='input'&gt;\n\n// ...\n\necho Tag::endForm();\n\n// &lt;/form&gt;\n</code></pre> <p>HTML syntax: <pre><code>&lt;?php \n\necho $this-&gt;tag-&gt;form(\n    [\n        '/admin/invoices/create', \n        'method' =&gt; 'post',\n        'class'  =&gt; 'input'\n    ]\n);\n\n// ...\n\necho $this-&gt;tag-&gt;endForm();\n?&gt;\n</code></pre></p> <p>Volt syntax: <pre><code>{% raw %}\n{{ form(\n    [\n        '/admin/invoices/create', \n        'method' : 'post',\n        'class'  : 'input'\n    ]\n);\n\n{{ end_form() }}{% endraw %}\n</code></pre></p> <p>Phalcon also provides a form builder to create forms in an object-oriented manner.</p>"},{"location":"tag/#data","title":"Data","text":""},{"location":"tag/#setdefault","title":"<code>setDefault()</code>","text":"<p>You can use <code>setDefault()</code> to pre populate values for elements generated by Phalcon\\Tag. The helpers of this component will retain the values between requests. This way you can easily show validation messages without losing entered data. Every form helper supports the parameter <code>value</code>. With it you can specify a value for the helper directly. When the parameter is present, any preset value using <code>setDefault()</code> or via request will be ignored.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\nTag::setDefault('framework', 'Phalcon');\n\necho Tag::textField(\n    [\n        'framework', \n        'class'  =&gt; 'input'\n    ]\n);\n\n// &lt;input type='text' id='framework' name='framework' \n//        value='Phalcon' class='class' /&gt;\n</code></pre>"},{"location":"tag/#setdefaults","title":"<code>setDefaults()</code>","text":"<p><code>setDefaults()</code> allows you to specify more than one value to be set in elements of your form, by passing a key value array. The method can be called more than one time and each time it is called it will overwrite the data set in the previous call. You can however specify the second parameter as <code>true</code> so that the values are merged.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\nTag::setDefaults(\n    [\n        'framework' =&gt; 'Phalcon',\n        'version'   =&gt; '4.0',\n    ]\n);\n\necho Tag::textField(\n    [\n        'framework', \n        'class'  =&gt; 'input'\n    ]\n);\n\n// &lt;input type='text' id='framework' name='framework' \n//        value='Phalcon' class='class' /&gt;\n\necho Tag::textField(\n    [\n        'version', \n        'class'  =&gt; 'input'\n    ]\n);\n\n// &lt;input type='text' id='version' name='version' \n//        value='4.0' class='class' /&gt;\n</code></pre>"},{"location":"tag/#getvalue","title":"<code>getValue()</code>","text":"<p>This method is called from every helper in this component, to find whether a value has been set for an element wither by having used <code>setDefault()</code> before or in the <code>$_POST</code> superglobal.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\nTag::setDefaults(\n    [\n        'framework' =&gt; 'Phalcon',\n        'version'   =&gt; '4.0',\n    ]\n);\n\necho Tag::getValue('framework'); // 'Phalcon'\n\n$_POST = [\n    'framework' =&gt; 'Phalcon',\n    'version'   =&gt; '4.0',\n];\n\necho Tag::getValue('framework'); // 'Phalcon'\n</code></pre>"},{"location":"tag/#hasvalue","title":"<code>hasValue()</code>","text":"<p>This method checks if a <code>value</code> in an element has already been set using <code>setDefault()</code> or is in the <code>$_POST</code> superglobal.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\nTag::setDefaults(\n    [\n        'framework' =&gt; 'Phalcon',\n        'version'   =&gt; '4.0',\n    ]\n);\n\necho Tag::hasValue('framework'); // 'true'\n\n$_POST = [\n    'framework' =&gt; 'Phalcon',\n    'version'   =&gt; '4.0',\n];\n\necho Tag::hasValue('framework'); // 'true'\n</code></pre>"},{"location":"tag/#escaping","title":"Escaping","text":"<p>Phalcon\\Tag automatically escapes text supplied for its helpers. If your application requires it, you can disable automatic escaping by using <code>setAutoEscape()</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Tag;\n\necho Tag::textField(\n    [\n        'framework',\n        'value' =&gt; '&lt;h1&gt;hello&lt;/h1&gt;', \n    ]\n);\n\n// &lt;input type=\"text\" id=\"framework\" name=\"framework\" \n//        value=\"&amp;lt;h1&amp;gt;hello&amp;lt;/h1&amp;gt;\" /&gt;\n\nTag::setAutoescape(false);\n\necho Tag::textField(\n    [\n        'framework',\n        'value' =&gt; '&lt;h1&gt;hello&lt;/h1&gt;', \n    ]\n);\n\n// &lt;input type=\"text\" id=\"framework\" name=\"framework\" \n//        value=\"&lt;h1&gt;hello&lt;/h1&gt;\" /&gt;\n</code></pre>"},{"location":"tag/#dependency-injection","title":"Dependency Injection","text":"<p>If you use the Phalcon\\Di\\FactoryDefault container, the Phalcon\\Tag is already registered for you with the name <code>tag</code>.  </p> <p>An example of the registration of the service as well as accessing it is below:</p> <p>Direct</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Tag;\n\n$container = new Di();\n\n$container-&gt;set(\n    'tag',\n    function () use  {\n        return new Tag();\n    }\n);\n</code></pre> <p>You can always implement your own <code>tag</code> helper and register it in the place of <code>tag</code> in the Di container.</p> <p>Accessing the service from any component that implements the Phalcon\\Di\\Injectable is as simple as accessing the <code>tag</code> property.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Tag;\n\n/**\n * @property Tag $tag\n */\nclass SessionController extends Controller\n{\n    public function indexAction()\n    {\n        $this-&gt;tag-&gt;setTitle('Phalcon Framework');\n    }\n}\n</code></pre>"},{"location":"tag/#custom","title":"Custom","text":"<p>You can easily extend this functionality and create your own helpers. </p> <ul> <li>First create a new directory in your application's file system that the helper files will be stored.</li> <li>Name it something that will represent it. For instance in this example we use <code>customhelpers</code>.</li> <li>Create a file called <code>MyTags.php</code> in your <code>customhelpers</code> directory.</li> <li>Extend the Phalcon\\Tag class and implement your own methods.</li> </ul> <pre><code>&lt;?php\n\nnamespace MyApp;\n\nuse Phalcon\\Tag;\n\nclass MyTags extends Tag\n{\n    /**\n     * Generates a widget to show a HTML5 audio tag\n     *\n     * @param array\n     * @return string\n     */\n    public static function audioField($parameters)\n    {\n        // Converting parameters to array if it is not\n        if (true !== is_array($parameters)) {\n            $parameters = [$parameters];\n        }\n\n        // Determining attributes 'id' and 'name'\n        $parameters[0]      = $parameters[0] ?? $parameters['id'];\n        $id                 = $parameters[0];\n        $parameters['name'] = $parameters['name'] ?? $id;\n\n        // Determining widget value,\n        // \\Phalcon\\Tag::setDefault() allows to set the widget value\n        if (true === isset($parameters['value'])) {\n            $value = $parameters['value'];\n\n            unset($parameters['value']);\n        } else {\n            $value = self::getValue($id);\n        }\n\n        // Generate the tag code\n        $code = sprintf(\n            '&lt;audio id=\"%s\" value=\"%s\" ',\n            $id,\n            $value\n        );\n\n        foreach ($parameters as $key =&gt; $attributeValue) {\n            if (!is_integer($key)) {\n                $code .= sprintf('%s=\"%s\" ', $key, $attributeValue);\n            }\n        }\n\n        $code.=' /&gt;';\n\n        return $code;\n    }\n}\n</code></pre> <p>After creating our custom helper, we will autoload the new directory that contains our helper class from our <code>index.php</code> located in the public directory.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Di\\FactoryDefault();\nuse Phalcon\\Exception as PhalconException;\n\ntry {\n    $loader = new Loader();\n\n    $loader-&gt;registerDirs(\n        [\n            '../app/controllers',\n            '../app/models',\n            '../app/customhelpers', // Add the new helpers folder\n        ]\n    );\n\n    $loader-&gt;register();\n\n    $di = new FactoryDefault();\n\n    // Assign our new tag a definition so we can call it\n    $di-&gt;set(\n        'MyTags',\n        function () {\n            return new MyTags();\n        }\n    );\n\n    $application = new Application($di);\n\n    $response = $application-&gt;handle(\n        $_SERVER['REQUEST_URI']\n    );\n\n    $response-&gt;send();\n} catch (PhalconException $e) {\n    echo 'PhalconException: ', $e-&gt;getMessage();\n}\n</code></pre> <p>Now you are ready to use your new helper within your views:</p> <pre><code>&lt;?php\n\necho MyTags::audioField(\n    [\n        'name' =&gt; 'test',\n        'id'   =&gt; 'audio_test',\n        'src'  =&gt; '/path/to/audio.mp3',\n    ]\n);\n\n?&gt;\n</code></pre> <p>You can also check out Volt a faster template engine for PHP, where you can use a more developer friendly syntax for helpers provided by Phalcon\\Tag.</p>"},{"location":"testing-environment/","title":"Testing Environment","text":""},{"location":"testing-environment/#overview","title":"Overview","text":"<p>Phalcon has always had a small development community and not that many pull requests, offering bug fixes and enhancements, compared to other PHP frameworks. This was primarily due to the fact that most developers do not really know C. To help developers contribute, we have created a new language called Zephir, which has a very similar syntax to PHP or Javascript. In 2003 we announced this plan and a few months later we released the language and rewrote all the Phalcon code in Zephir. We have been using Zephir ever since for developing Phalcon.</p>"},{"location":"testing-environment/#the-problem","title":"The Problem","text":"<p>Having a framework that is rich in features requires a development environment that will offer all those features and related services. For instance one needs to install <code>MySQL</code>, <code>Postgresql</code> and <code>Sqlite</code> to be able to check whether functionality in the ORM will be the same when using any of these adapters for your database needs. Additionally the relevant extensions for PHP have to be installed in the development system.</p> <p>When looking at all the functionality that Phalcon offers, just to run the testing suite, one needs a great number of extensions as well as services installed (Redis, Memcached, Beanstalkd etc.)</p> <p>If one considers the PHP version also (PHP 7.2, 7.3 etc.), developing for Phalcon is not an easy task, because of all these prerequisites.</p>"},{"location":"testing-environment/#solution","title":"Solution","text":"<p>We have tried in the past to create a development environment based on docker, but after a while, maintaining this environment was very taxing for the core team. </p> <p>Recently however, we have redoubled our efforts to create this environment and we decided to use nanobox. For those that do not know, nanobox is a \"wrapper\" to docker which creates a unique environment in your machine, ready to use. The environment is folder based so you could potentially have two folders where you have cloned Phalcon, and use the PHP 7.2 on one and the 7.3 on the other. Each of those environments is completely isolated. We have been using nanobox for a while now and it is working extremely well.</p>"},{"location":"testing-environment/#installation","title":"Installation","text":"<p>You will first need to have docker installed on your machine. Instructions on how to do that, can be found here.</p> <p>Go to https://nanobox.io and create an account if you do not have one already, so that you can download the nanobox installation file for your platform.</p> <p>Once the file is downloaded, install it.</p>"},{"location":"testing-environment/#running-the-environment","title":"Running the Environment","text":""},{"location":"testing-environment/#fork-the-repository","title":"Fork the Repository","text":"<p>Fork the cphalcon to your github account, if you have not done so already. Visit the cphalcon page on your browser and click the <code>Fork</code> button at the top right of the screen.</p>"},{"location":"testing-environment/#clone-the-fork","title":"Clone the Fork","text":"<p>Now you will need to clone the forked repository to a folder of your choice. The example below assumes that the github account is <code>niden</code> - change it to your own.</p> <pre><code>git clone git@github.com:niden/cphalcon\n</code></pre>"},{"location":"testing-environment/#copy-the-boxfile","title":"Copy the Boxfile","text":"<p>Nanobox reads a file called <code>boxfile.yml</code> and located in the root of your folder. There are two files supplied in Phalcon that you can use to develop with. One for PHP 7.2 and one for 7.3. Copy one of them to the root of the folder you have cloned your repository.</p> <p><pre><code>cd ./cphalcon\ncp -v ./tests/_ci/nanobox/boxfile.7.2.yml ./boxfile.yml\n</code></pre> You will now end up with a <code>boxfile.yml</code> file at the root of your project.</p>"},{"location":"testing-environment/#configure-nanobox","title":"Configure Nanobox","text":"<p>Now we need to run nanobox for the first time. Since this will be the first time you run nanobox, it will ask you to configure it. The installation is very simple <pre><code>nanobox run\n</code></pre> It will ask you to log in first. Type your nanobox username and password, the same credentials you used when creating the nanobox account, so that you can download the installation file.</p> <pre><code>$ nanobox login\nNanobox Username: niden\nNanobox Password: \n</code></pre> <p>You will also need to configure nanobox. The next step is to decide how you want nanobox to work. There are two options * a lightweight VM (Virtualbox) * docker native</p> <p>It is highly recommended you use docker (hence the requirement above to ensure that you have docker installed).</p> <pre><code>CONFIGURE NANOBOX\n---------------------------------------------------------------\nPlease answer the following questions so we can customize your\nnanobox configuration. Feel free to update your config at any\ntime by running: 'nanobox configure'\n\n(Learn more at : https://docs.nanobox.io/local-config/configure-nanobox/)\n\nHow would you like to run nanobox?\n  a) Inside a lightweight VM\n  b) Via Docker Native\n\n  Note : Mac users, we strongly recommend choosing (a) until Docker Native\n         resolves an issue causing slow speeds : https://bit.ly/2jYFfWQ\n\nAnswer: \n</code></pre>"},{"location":"testing-environment/#run-nanobox","title":"Run Nanobox","text":"<p>After finishing the configuration, you will see nanobox trying to download a lot of packages and containers. This is normal and it is going to take a while depending on the connection speed you have. After packages and containers are downloaded, subsequent runs will use cached copies of those packages (unless there is an update).</p> <p>Once the whole process finishes, you will end up with a screen that looks like this: <pre><code>Preparing environment :\n\n\n                                   **\n                                ********\n                             ***************\n                          *********************\n                            *****************\n                          ::    *********    ::\n                             ::    ***    ::\n                           ++   :::   :::   ++\n                              ++   :::   ++\n                                 ++   ++\n                                    +\n                    _  _ ____ _  _ ____ ___  ____ _  _\n                    |\\ | |__| |\\ | |  | |__) |  |  \\/\n                    | \\| |  | | \\| |__| |__) |__| _/\\_\n\n--------------------------------------------------------------------------------\n+ You are in a Linux container\n+ Your local source code has been mounted into the container\n+ Changes to your code in either the container or desktop will be mirrored\n+ If you run a server, access it at &gt;&gt; 172.18.0.2\n--------------------------------------------------------------------------------\n</code></pre></p> <p>You are now inside the environment with all the extensions and services you need. Please note that the IP shown will most likely be different than the one displayed above.</p>"},{"location":"testing-environment/#composer","title":"Composer","text":"<p>Just in case update composer:</p> <pre><code>/app $ composer install\n</code></pre>"},{"location":"testing-environment/#check-zephir","title":"Check Zephir","text":"<p>Zephir is already installed in the environment. Just check it:</p> <p><pre><code>/app $ zephir help\n</code></pre> A screen like the one below should appear:</p> <pre><code>Usage:\n  help [options] [--] [&lt;command_name&gt;]\n\nArguments:\n  command               The command to execute\n  command_name          The command name [default: \"help\"]\n\nOptions:\n      --format=FORMAT   The output format (txt, xml, json, or md) [default: \"txt\"]\n      --raw             To output raw command help\n  -h, --help            Display this help message\n  -q, --quiet           Do not output any message\n  -V, --version         Display this application version\n      --ansi            Force ANSI output\n      --no-ansi         Disable ANSI output\n  -n, --no-interaction  Do not ask any interactive question\n      --dumpversion     Print the Zephir version \u2014 and don't do anything else\n  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n\nHelp:\n  The help command displays help for a given command:\n\n    php /data/bin/zephir help list\n\n  You can also output the help in other formats by using the --format option:\n\n    php /data/bin/zephir help --format=xml list\n\n  To display the list of available commands, please use the list command.\n</code></pre>"},{"location":"testing-environment/#compile-phalcon","title":"Compile Phalcon","text":"<p>Phalcon is not compiled yet. We need to instruct Zephir to do that:</p> <pre><code>/app $ zephir fullclean\n/app $ zephir build\n</code></pre>"},{"location":"testing-environment/#check-extensions","title":"Check Extensions","text":"<p>Type</p> <pre><code>/app $ php -m\n</code></pre> <p>and you will see:</p> <pre><code>[PHP Modules]\napcu\nCore\nctype\n....\nPDO\npdo_mysql\npdo_pgsql\npdo_sqlite\nphalcon\nPhar\npsr\nredis\n...\n\n[Zend Modules]\nXdebug\n</code></pre> <p>Note that Phalcon v4+ requires the PSR extension to be loaded before Phalcon. In this environment we have compiled it for you. Once you see <code>phalcon</code> in the list, you have the extension compiled and ready to use.</p>"},{"location":"testing-environment/#setup-databases","title":"Setup databases","text":"<p>First, we need to have a <code>.env</code> file in the project root.</p> <pre><code>/app $ cp tests/_ci/nanobox/.env.example .env\n</code></pre> <p>To generate the necessary database schemas, you need to run the relevant script:</p> <pre><code>/app $ php tests/_ci/generate-db-schemas.php\n</code></pre> <p>The script looks for classes located under <code>tests/_data/fixtures/Migrations</code>. These classes contain the necessary code to create the relevant SQL statements for each RDBMS. You can easily inspect one of those files to understand its structure. Additionally, these migration classes can be instantiated in your tests to clear the target table, insert new records etc. This methodology allows us to create the database schema per RDBMS, which will be loaded automatically from Codeception, but also allows us to clear tables and insert data we need to them so that our tests are more controlled and isolated.</p> <p>If there is a need to add an additional table, all you have to do is create the Phalcon model of course but also create the migration class with the relevant SQL statements. Running the generate script (as seen above) will update the schema file so that Codeception can load it in your RDBMS prior to running the tests.</p> <p>To populate the databases you will need to run the following script:</p> <pre><code>/app $ tests/_ci/nanobox/setup-dbs-nanobox.sh\n</code></pre>"},{"location":"testing-environment/#running-tests","title":"Running Tests","text":""},{"location":"testing-environment/#unit","title":"Unit","text":"<p>Now that the environment is set up, we need to run the tests. The testing framework Phalcon uses is Codeception. For a basic introduction you can check this page. Also for the list of the commands, you can check here.</p> <p>We need to first build the Codeception base classes. This needs to happen every time new functionality is introduced in Codeception's helpers.</p> <p>Now you can run: <pre><code>/app $ vendor/bin/codecept build\n</code></pre> The output should show: <pre><code>Building Actor classes for suites: cli, database, integration, unit\n -&gt; CliTesterActions.php generated successfully. 152 methods added\n\\CliTester includes modules: Asserts, Cli, \\Helper\\Cli, \\Helper\\Unit\n -&gt; DatabaseTesterActions.php generated successfully. 252 methods added\n\\DatabaseTester includes modules: Phalcon4, Redis, Asserts, Filesystem, Helper\\Database, Helper\\Unit\n -&gt; IntegrationTesterActions.php generated successfully. 251 methods added\n\\IntegrationTester includes modules: Phalcon4, Redis, Asserts, Filesystem, Helper\\Integration, Helper\\PhalconLibmemcached, Helper\\Unit\n -&gt; UnitTesterActions.php generated successfully. 166 methods added\n\\UnitTester includes modules: Apc, Asserts, Filesystem, Helper\\Unit\n</code></pre></p> <p>Now we can run the tests:</p> <pre><code>/app $ php vendor/bin/codecept run unit\n</code></pre> <p>This will start running the unit testing suite. You will see a lot of tests and assertions. At the time of this article, we have <code>Tests: 3235, Assertions: 8244, Skipped: 175</code> unit tests. The reason for so many skipped tests is because we created test stubs for every component and every method in each component. This was so as to create awareness on what needs to be checked and what components/methods we need to write tests for. Of course some of the test stubs are duplicate or obsolete. Those will be deleted once the relevant component is checked and tests written for it. Our goal is to get as close to 100% code coverage as possible. If we manage to get to 100% that would be great!</p> <p>Execute all tests from a folder:</p> <pre><code>/app $ php vendor/bin/codecept run tests/unit/some/folder/\n</code></pre> <p>Execute single test:</p> <pre><code>/app $ php vendor/bin/codecept run tests/unit/some/folder/some/test/file.php\n</code></pre>"},{"location":"testing-environment/#database","title":"Database","text":"<p>To run database related tests you need to run the <code>database</code> suite specifying the RDBMS and group:</p> <pre><code>/app $ php vendor/bin/codecept run tests/database -g common\n/app $ php vendor/bin/codecept run tests/database -g mysql --env mysql\n/app $ php vendor/bin/codecept run tests/database -g sqlite --env sqlite\n/app $ php vendor/bin/codecept run tests/database -g pgsql --env pgsql\n</code></pre> <p>Available options:</p> <pre><code>--env mysql\n--env sqlite\n--env pgsql\n</code></pre> <p>If you need to access the databases themselves, you will need the connection information. Nanobox creates that for you and stores it in environment variables. You can easily check those variables and if need be write them down.</p> <p>Open a separate terminal and navigate to the same folder where you have nanobox running from and type:</p> <pre><code>cd ./cphalcon/\nnanobox info local\n</code></pre> <p>You will see an output as the one below:</p> <pre><code>----------------------------------------------\ncphalcon (dev)              Status: up\n----------------------------------------------\n\nMount Path: /home/niden/cphalcon\nEnv IP: 172.20.0.20\n\ndata.memcached\n  IP      : 172.20.0.23\n\ndata.mongodb\n  IP      : 172.20.0.24\n\ndata.mysql\n  IP      : 172.20.0.25\n  User(s) :\n    root - 9IqTGEVM2M\n    nanobox - yXOMmf71NS\n\ndata.postgres\n  IP      : 172.20.0.21\n  User(s) :\n    nanobox - exwjG6g6rm\n\ndata.redis\n  IP      : 172.20.0.22\n\nEnvironment Variables\n  DATA_MONGODB_HOST = 172.20.0.24\n  DATA_MYSQL_HOST = 172.20.0.25\n  DATA_MYSQL_ROOT_PASS = 9IqTGEVM2M\n  DATA_MYSQL_USER = nanobox\n  DATA_POSTGRES_PASS = exwjG6g6rm\n  APP_NAME = dev\n  DATA_MYSQL_NANOBOX_PASS = yXOMmf71NS\n  DATA_MYSQL_USERS = root nanobox\n  DATA_POSTGRES_HOST = 172.20.0.21\n  DATA_POSTGRES_USER = nanobox\n  DATA_MEMCACHED_HOST = 172.20.0.23\n  DATA_POSTGRES_NANOBOX_PASS = exwjG6g6rm\n  DATA_POSTGRES_USERS = nanobox\n  DATA_REDIS_HOST = 172.20.0.22\n  DATA_MYSQL_PASS = yXOMmf71NS\n\nDNS Aliases\n  none\n</code></pre> <p>You can use these variables to connect to your databases or other services such as Mongo, Redis etc.</p>"},{"location":"testing-environment/#development","title":"Development","text":"<p>You can now open your favorite editor and start developing in Zephir. You can create new functionality, fix issues, write tests etc. Remember though that if you change any of the <code>zep</code> files (inside the <code>phalcon</code> folder), you will need to recompile the extension:</p> <p><pre><code>/app $ zephir fullclean\n/app $ zephir build\n</code></pre> and then you can run your tests</p> <pre><code>/app $ codecept run tests/unit/somefolder/somecestfile:sometest\n</code></pre> <p>For Zephir documentation, you can visit the Zephir Docs site.</p>"},{"location":"testing-environment/#services","title":"Services","text":"<p>The available services are: - Memcached - Mongodb - Mysql - Postgresql - Redis</p> <p>The PHP extensions enabled are: - apcu - ctype - curl - dom - fileinfo - gd - gmp - gettext - imagick - iconv - igbinary - intl - json - memcached - mbstring - mongodb - opcache - phar - pdo - pdo_mysql - pdo_pgsql - pdo_sqlite - redis - session - simplexml - sqlite3 - tokenizer - yaml - zephir_parser - xdebug - xml - xmlwriter - zip - zlib</p> <p>The database dumps are located under <code>tests/_data/assets/schemas</code></p> <p>If you have any questions, feel free to join us in our Discord server or our Forum.</p> <p>&lt;3 Phalcon Team</p>"},{"location":"translate/","title":"Translation Component","text":""},{"location":"translate/#overview","title":"Overview","text":"<p>The component Phalcon\\Translate offers multilingual capabilities to applications. This component allows you to display content in different languages, based on the user's choice of language, available by the application.</p>"},{"location":"translate/#usage","title":"Usage","text":"<p>Introducing translations in your application is a relatively simple task. However no two implementations are the same and of course the implementation will depend on the needs of your application. Some of the options available can be an automatic detection of the visitor's language using the server headers (parsing the <code>HTTP_ACCEPT_LANGUAGE</code> contents or using the <code>getBestLanguage()</code> method of the Phalcon\\Http\\Request object).</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Translate\\Adapter\\NativeArray;\nuse Phalcon\\Translate\\InterpolatorFactory;\nuse Phalcon\\Translate\\TranslateFactory;\n\n/**\n * @property Phalcon\\Http\\Request $request\n * @property Phalcon\\Mvc\\View     $view\n */\nclass UserController extends Controller\n{\n\n    public function indexAction()\n    {\n        $this-&gt;view-&gt;name = 'Mike';\n        $this-&gt;view-&gt;t    = $this-&gt;getTranslator();\n    }\n\n    /**\n     * @return NativeArray\n     */\n    private function getTranslator(): NativeArray\n    {\n        // Ask browser what is the best language\n        $language = $this-&gt;request-&gt;getBestLanguage();\n        $messages = [];\n\n        $translationFile = 'app/messages/' . $language . '.php';\n\n        if (true !== file_exists($translationFile)) {\n            $translationFile = 'app/messages/en.php';\n        }\n\n        require $translationFile;\n\n        $interpolator = new InterpolatorFactory();\n        $factory      = new TranslateFactory($interpolator);\n\n        return $factory-&gt;newInstance(\n            'array',\n            [\n                'content' =&gt; $messages,\n            ]\n        );\n    }\n}\n</code></pre> <p>The <code>getTranslator()</code> method is available in the controller for all actions that require it. You could of course introduce a caching mechanism to store the translation adapter in your cache (based on the language selected i.e. <code>en.cache</code>, <code>de-cache</code> etc.)</p> <p>The <code>t</code> variable is passed then in the view and with it we can perform translations in the view layer.</p> <pre><code>&lt;!-- welcome --&gt;\n&lt;!-- String: hi =&gt; 'Hello' --&gt;\n&lt;p&gt;&lt;?php echo $t-&gt;_('hi'), ' ', $name; ?&gt;&lt;/p&gt;\n</code></pre> <p>and for Volt:</p> <pre><code>&lt;p&gt;{% raw %}{{ t._('hi') }} {{ name }}{% endraw %}&lt;/p&gt;\n</code></pre>"},{"location":"translate/#placeholders","title":"Placeholders","text":"<p>The <code>_()</code> method will return the translated string of the key passed. In the above example, it will return the value stored for the key <code>hi</code>. The component can also parse placeholders using [interpolation][#interpolation]. Therefore for a translation of:</p> <pre><code>Hello %name%!\n</code></pre> <p>you will need to pass the <code>$name</code> variable in the <code>_()</code> call and the component will perform the replacement for you.</p> <pre><code>&lt;!-- welcome --&gt;\n&lt;!-- String: hi-name =&gt; 'Hello %name%' --&gt;\n&lt;p&gt;&lt;?php echo $t-&gt;_('hi-name', ['name' =&gt; $name]); ?&gt;&lt;/p&gt;\n</code></pre> <p>and for Volt:</p> <pre><code>&lt;p&gt;{% raw %}{{ t._('hi-name', ['name' =&gt; name]) }}{% endraw %}&lt;/p&gt;\n</code></pre>"},{"location":"translate/#plugin","title":"Plugin","text":"<p>The implementation above can be extended to offer translation capabilities throughout the application. We can of course move the <code>getTranslator()</code> method in a base controller and change its visibility to <code>protected</code>. However, we might want to use translations in other components that are outside the scope of a controller. </p> <p>To achieve this, we can implement a new component as a Plugin and register it in our Di container.</p> <pre><code>&lt;?php\n\nnamespace MyApp;\n\nuse Phalcon\\Di\\Injectable;\nuse Phalcon\\Translate\\Adapter\\NativeArray;\nuse Phalcon\\Translate\\InterpolatorFactory;\nuse Phalcon\\Translate\\TranslateFactory;\n\nclass Locale extends Injectable\n{\n    /**\n     * @return NativeArray\n     */\n    public function getTranslator(): NativeArray\n    {\n        // Ask browser what is the best language\n        $language = $this-&gt;request-&gt;getBestLanguage();\n        $messages = [];\n\n        $translationFile = 'app/messages/' . $language . '.php';\n\n        if (true !== file_exists($translationFile)) {\n            $translationFile = 'app/messages/en.php';\n        }\n\n        require $translationFile;\n\n        $interpolator = new InterpolatorFactory();\n        $factory      = new TranslateFactory($interpolator);\n\n        return $factory-&gt;newInstance(\n            'array',\n            [\n                'content' =&gt; $messages,\n            ]\n        );\n    }\n}\n</code></pre> <p>Then we can register it in the Di container, when setting up services during bootstrap:</p> <pre><code>&lt;?php\n\nuse MyApp\\Locale;\n\n$container-&gt;set('locale', (new Locale())-&gt;getTranslator());\n</code></pre> <p>And now you can access the <code>Locale</code> plugin from your controllers and anywhere you need to.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\n/**\n * @property MyApp\\Locale $locale\n */\nclass MyController extends Controller\n{\n    public function indexAction()\n    {\n        $name = 'Mike';\n\n        $text = $this-&gt;locale-&gt;_(\n            'hi-name',\n            [\n                'name' =&gt; $name,\n            ]\n        );\n\n        $this-&gt;view-&gt;text = $text;\n    }\n}\n</code></pre> <p>or in a view directly</p> <pre><code>&lt;?php echo $locale-&gt;_('hi-name', ['name' =&gt; 'Mike']);\n</code></pre> <p>and for Volt:</p> <pre><code>&lt;p&gt;{% raw %}{{ locale._('hi-name', ['name' =&gt; 'Mike']) }}{% endraw %}&lt;/p&gt;\n</code></pre>"},{"location":"translate/#routing","title":"Routing","text":"<p>Some applications use the URL of the request to distinguish content based on different languages, in order to help with SEO. A sample URL is:  ```bash https://mozilla.org/es-ES/firefox/ <pre><code>Phalcon can implement this functionality by using a [Router](routing.md).\n\n## Translate Factory\nLoads Translate Adapter class using `adapter` option, the remaining options will be passed to the adapter constructor.\n\n```php\n&lt;?php\n\nuse Phalcon\\Translate\\InterpolatorFactory;\nuse Phalcon\\Translate\\TranslateFactory;\n\n$interpolator = new InterpolatorFactory();\n$factory      = new TranslateFactory($interpolator);\n\n$options = [\n    'content' =&gt; [\n        'hi'  =&gt; 'Hello',\n        'bye' =&gt; 'Good Bye',\n    ],\n];\n\n$translator = $factory-&gt;newInstance('array', $options);\n</code></pre></p>"},{"location":"translate/#adapters","title":"Adapters","text":"<p>This component makes use of adapters to read translation messages from different sources in a unified way.</p> Adapter Description Phalcon\\Translate\\Adapter\\NativeArray Uses PHP arrays to store the messages. Phalcon\\Translate\\Adapter\\Csv Uses a <code>.csv</code> file to store the messages for a language. Phalcon\\Translate\\Adapter\\Gettext Uses gettext to retrieve the messages from a <code>.po</code> file."},{"location":"translate/#native-array","title":"Native Array","text":"<p>This adapter stores the translated strings in a PHP array. This adapter is clearly the fastest of all since strings are stored in memory. Additionally the fact that it uses PHP arrays makes maintenance easier. The strings can also be stored in JSON files which in turn can be translated back to the native PHP array format when retrieved.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Translate\\InterpolatorFactory;\nuse Phalcon\\Translate\\TranslateFactory;\n\n$interpolator = new InterpolatorFactory();\n$factory      = new TranslateFactory($interpolator);\n\n$options = [\n    'content' =&gt; [\n        'hi'  =&gt; 'Hello',\n        'bye' =&gt; 'Good Bye',\n    ],\n];\n\n$translator = $factory-&gt;newInstance('array', $options);\n</code></pre> <p>The recommended usage would be to create one file per language and store it in the file system. After that you can load the relevant file, based on the language selected. A sample structure can be: </p> <p><pre><code>app/messages/en.php\napp/messages/es.php\napp/messages/fr.php\napp/messages/zh.php\n</code></pre> or in JSON format <pre><code>app/messages/en.json\napp/messages/es.json\napp/messages/fr.json\napp/messages/zh.json\n</code></pre> Each file contains PHP arrays, where key is the key of the translated string and value the translated message. Each file contains the same keys but the values are of course the message translated in the respective language.</p> <pre><code>&lt;?php\n\n// app/messages/en.php\n$messages = [\n    'hi'      =&gt; 'Hello',\n    'bye'     =&gt; 'Good Bye',\n    'hi-name' =&gt; 'Hello %name%',\n    'song'    =&gt; 'This song is %song%',\n];\n</code></pre> <p><pre><code>&lt;?php\n\n// app/messages/fr.php\n$messages = [\n    'hi'      =&gt; 'Bonjour',\n    'bye'     =&gt; 'Au revoir',\n    'hi-name' =&gt; 'Bonjour %name%',\n    'song'    =&gt; 'La chanson est %song%',\n];\n</code></pre> Creating this adapter can be achieved by using the Translate Factory, but you can instantiate it directly: <pre><code>&lt;?php\n\nuse Phalcon\\Translate\\InterpolatorFactory;\nuse Phalcon\\Translate\\Adapter\\NativeArray;\n\n$interpolator = new InterpolatorFactory();\n$options      = [\n    'content' =&gt; [\n        'hi'  =&gt; 'Hello',\n        'bye' =&gt; 'Good Bye',\n    ],\n];\n\n$translator = new NativeArray($interpolator, $options);\n</code></pre></p> <p>Not Found</p> <p>If the option <code>triggerError</code> is passed and set to <code>true</code> then the <code>notFound()</code> method will be called when a key is not found. The method will trigger an error.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Translate\\InterpolatorFactory;\nuse Phalcon\\Translate\\TranslateFactory;\n\n$interpolator = new InterpolatorFactory();\n$factory      = new TranslateFactory($interpolator);\n\n$options = [\n    'content'      =&gt; [\n        'hi'  =&gt; 'Hello',\n        'bye' =&gt; 'Good Bye',\n    ],\n    'triggerError' =&gt; true,\n];\n\n$translator = $factory-&gt;newInstance('array', $options);\n\necho $translator-&gt;query('unknown');\n</code></pre> <p>The code above will trigger an error when we try to access the <code>unknown</code> entry.</p>"},{"location":"translate/#csv","title":"Csv","text":"<p>If your translation strings are stored in a <code>.csv</code> file. The Phalcon\\Translate\\Adapter\\Csv adapter accepts the interpolator factory and an array with options necessary for loading the translations. The options array accepts: - <code>content</code>: The location of the CSV file on the file system - <code>delimiter</code>: The delimiter the CSV file uses (optional - defaults to <code>;</code>) - <code>enclosure</code>: The character that surrounds the text (optional - defaults to <code>\"</code>) </p> <pre><code>&lt;?php\n\nuse Phalcon\\Translate\\InterpolatorFactory;\nuse Phalcon\\Translate\\TranslateFactory;\n\n$interpolator = new InterpolatorFactory();\n$factory      = new TranslateFactory($interpolator);\n\n// `sample-key`|`sample-translated-text`\n$options = [\n    'content'   =&gt; '/path/to/translation-file.csv',\n    'delimiter' =&gt; '|',\n    'enclosure' =&gt; '`',\n];\n\n$translator = $factory-&gt;newInstance('csv', $options);\n</code></pre> <p>In the above example you can see the usage of <code>delimiter</code> and <code>enclosure</code>. In most cases you will not need to supply these options but in case your CSV files are somewhat different, you have the option to instruct the adapter as to how it will parse the contents of the translation file.</p> <p>Creating this adapter can be achieved by using the Translate Factory, but you can instantiate it directly: <pre><code>&lt;?php\n\nuse Phalcon\\Translate\\InterpolatorFactory;\nuse Phalcon\\Translate\\Adapter\\Csv;\n\n$interpolator = new InterpolatorFactory();\n$options      = [\n    'content'   =&gt; '/path/to/translation-file.csv',\n    'delimiter' =&gt; '|',\n    'enclosure' =&gt; '`',\n];\n\n$translator = new Csv($interpolator, $options);\n</code></pre></p>"},{"location":"translate/#gettext","title":"Gettext","text":"<p>NOTE</p> <p>This adapter requires the gettext PHP extension. Please make sure that your system has it installed so that you can take advantage of this adapter's functionality</p> <p>The gettext format has been around for years and many applications are using it because it has become a standard and it is easy to use. The translations are stored in <code>.po</code> and <code>.mo</code> files, and content can be easily added or changed using online editors or tools such as POEdit. This adapter requires files to be in specific folders so it can locate the translation files. The options array accepts:</p> <ul> <li><code>locale</code>: The language locale you need</li> <li><code>defaultDomain</code>: The domain for the files. This is the actual name of the files. Both <code>po</code> and <code>mo</code> files must have the same name.</li> <li><code>directory</code>: The directory where the translation files are located</li> <li><code>category</code>: A <code>LC*</code> PHP variable defining what category should be used. This maps to a folder (as seen below in the sample directory structure).</li> </ul> <pre><code>&lt;?php\n\nuse Phalcon\\Translate\\InterpolatorFactory;\nuse Phalcon\\Translate\\TranslateFactory;\n\n$interpolator = new InterpolatorFactory();\n$factory      = new TranslateFactory($interpolator);\n\n$options = [\n    'locale'        =&gt; 'de_DE.UTF-8',\n    'defaultDomain' =&gt; 'translations',\n    'directory'     =&gt; '/path/to/application/locales',\n    'category'      =&gt; LC_MESSAGES,\n];\n\n$translator = $factory-&gt;newInstance('gettext', $options);\n</code></pre> <p>A sample directory structure for the translation files is:</p> <pre><code>translations/\n    en_US.UTF-8/\n        LC_MESSAGES/\n            translations.mo\n            translations.po\n    de_DE.UTF-8\n        LC_MESSAGES/\n            translations.mo\n            translations.po\n</code></pre> <p>Creating this adapter can be achieved by using the Translate Factory, but you can instantiate it directly: <pre><code>&lt;?php\n\nuse Phalcon\\Translate\\InterpolatorFactory;\nuse Phalcon\\Translate\\Adapter\\Gettext;\n\n$interpolator = new InterpolatorFactory();\n$options      = [\n    'locale'        =&gt; 'de_DE.UTF-8',\n    'defaultDomain' =&gt; 'translations',\n    'directory'     =&gt; '/path/to/application/locales',\n    'category'      =&gt; LC_MESSAGES,\n];\n\n$translator = new Gettext($interpolator, $options);\n</code></pre></p>"},{"location":"translate/#custom","title":"Custom","text":"<p>The Phalcon\\Translate\\Adapter\\AdapterInterface interface must be implemented in order to create your own translate adapters or extend the existing ones:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Translate\\Adapter\\AdapterInterface;\n\nclass MyTranslateAdapter implements AdapterInterface\n{\n    /**\n     * @param array $options\n     */\n    public function __construct(array $options);\n\n    /**\n     * @param  string $translateKey\n     * @param  array  $placeholders\n     * \n     * @return string\n     */\n    public function t(string $translateKey, array $placeholders = []);\n\n    /**\n     * @param   string $translateKey\n     * @param   array  $placeholders\n     * \n     * @return  string\n     */\n    public function _(\n        string $translateKey, \n        array $placeholders = []\n    ): string;\n\n    /**\n     * @param   string $index\n     * @param   array  $placeholders\n     * \n     * @return  string\n     */\n    public function query(string $index, array $placeholders = []): string;\n\n    /**\n     * @param   string $index\n     * @return  bool\n     */\n    public function exists(string $index): bool;\n}\n</code></pre> <p>There are more adapters available for this components in the Phalcon Incubator</p>"},{"location":"translate/#interpolation","title":"Interpolation","text":"<p>In many cases, the translated strings need to be with data. With interpolation you can inject a variable from your code to the translated message at a specific place. The placeholder in the message is enclosed with <code>%</code> characters.</p> <pre><code>Hello %name, good %time%!\nSalut %name%, bien %time%!\n</code></pre> <p>Assuming that the context will not change based on each language's strings, you can add these placeholders to your translated strings. The Translate component with its adapters will then correctly perform the interpolation for you.</p>"},{"location":"translate/#changing-the-interpolator","title":"Changing the Interpolator","text":"<p>To change the interpolator that your adapter uses, all you have to do is pass the name of the interpolator in the options using the <code>defaultInterpolator</code> key.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Translate\\InterpolatorFactory;\nuse Phalcon\\Translate\\TranslateFactory;\n\n$interpolator = new InterpolatorFactory();\n$factory      = new TranslateFactory($interpolator);\n\n$options = [\n    'defaultInterpolator' =&gt; 'indexedArray',\n    'content'             =&gt; [\n        'hi-name' =&gt; 'Hello %1$s, it\\'s %2$d o\\'clock',\n    ],\n];\n\n$translator = $factory-&gt;newInstance('array', $options);\n</code></pre>"},{"location":"translate/#associatedarray","title":"AssociatedArray","text":"<p>Phalcon\\Translate\\Interpolator\\AssociativeArray is the default interpolator. It allows you to do a key/value replacement of the placeholders.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Translate\\InterpolatorFactory;\nuse Phalcon\\Translate\\TranslateFactory;\n\n$interpolator = new InterpolatorFactory();\n$factory      = new TranslateFactory($interpolator);\n\n$options = [\n    'content' =&gt; [\n        'hi-name' =&gt; 'Hello %name%, good %time% !',\n    ],\n];\n\n$translator = $factory-&gt;newInstance('array', $options);\n\n$name = 'Henry';\n\n$translator-&gt;_(\n    'hi-name',\n    [\n        'name' =&gt; $name,\n        'time' =&gt; 'day',\n    ]\n); // Hello Henry, good day !\n\n$translator-&gt;_(\n    'hi-name',\n    [\n        'name' =&gt; $name,\n        'time' =&gt; 'night',\n    ]\n); // Hello Henry, good night !\n</code></pre>"},{"location":"translate/#indexedarray","title":"IndexedArray","text":"<p>Phalcon\\Translate\\Interpolator\\IndexedArray is another option that you can use as the interpolator. This interpolator follows the sprintf convention.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Translate\\InterpolatorFactory;\nuse Phalcon\\Translate\\TranslateFactory;\n\n$interpolator = new InterpolatorFactory();\n$factory      = new TranslateFactory($interpolator);\n\n$options = [\n    'defaultInterpolator' =&gt; 'indexedArray',\n    'content'             =&gt; [\n        'hi-name' =&gt; 'Hello %1$s, it\\'s %2$d o\\'clock',\n    ],\n];\n\n$translator = $factory-&gt;newInstance('array', $options);\n\n$name = 'Henry';\n\n$translator-&gt;_(\n    'hi-name',\n    [\n        $name,\n        8,\n    ]\n); // Hello Henry, it's 8 o'clock\n</code></pre>"},{"location":"translate/#custom-interpolators","title":"Custom Interpolators","text":"<p>The Phalcon\\Translate\\Interpolator\\InterpolatorInterface interface must be implemented in order to create your own interpolators or extend the existing ones:</p>"},{"location":"translate/#interpolator-factory","title":"Interpolator Factory","text":"<p>The Phalcon\\Translate\\InterpolatorFactory factory offers an easy way to create interpolators. It is an object required to be passed to the translate adapters and translate factory, so that in turn can create the relevant interpolation class that the adapter will use.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Translate\\InterpolatorFactory;\nuse Phalcon\\Translate\\TranslateFactory;\n\n$interpolator = new InterpolatorFactory();\n$factory      = new TranslateFactory($interpolator);\n\n$translator = $factory-&gt;newInstance(\n    'array',\n    [\n        'content' =&gt; [\n            'hi'  =&gt; 'Hello',\n            'bye' =&gt; 'Good Bye',\n        ],\n    ]\n);\n</code></pre>"},{"location":"tutorial-basic/","title":"Tutorial - Basic","text":""},{"location":"tutorial-basic/#overview","title":"Overview","text":"<p>Throughout this tutorial, we will create an application with a simple registration form, while introducing the main design aspects of Phalcon. </p> <p>This tutorial covers the implementation of a simple MVC application, showing how fast and easy it can be done with Phalcon. Once developed, you can use this application and extend it to suit your needs. The code in this tutorial can also be used as a playground to learn other Phalcon specific concepts and ideas.</p> <p>If you just want to get started you can skip this and create a Phalcon project automatically with our developer tools.</p> <p>The best way to use this guide is to follow along and try to have fun. You can get the complete code here. If you get stuck or have questions, please visit us on Discord or in our Forum.</p>"},{"location":"tutorial-basic/#file-structure","title":"File Structure","text":"<p>One of the key features of Phalcon is that it is loosely coupled. Because of that, you can use any directory structure that is convenient to you. In this tutorial we will use a standard directory structure, commonly used in MVC applications.</p> <pre><code>.\n\u2514\u2500\u2500 tutorial\n    \u251c\u2500\u2500 app\n    \u2502   \u251c\u2500\u2500 controllers\n    \u2502   \u2502   \u251c\u2500\u2500 IndexController.php\n    \u2502   \u2502   \u2514\u2500\u2500 SignupController.php\n    \u2502   \u251c\u2500\u2500 models\n    \u2502   \u2502   \u2514\u2500\u2500 Users.php\n    \u2502   \u2514\u2500\u2500 views\n    \u2514\u2500\u2500 public\n        \u251c\u2500\u2500 css\n        \u251c\u2500\u2500 img\n        \u251c\u2500\u2500 index.php\n        \u2514\u2500\u2500 js\n</code></pre> <p>NOTE</p> <p>Since all the code that Phalcon exposes is encapsulated in the extension (that you have loaded on your web server), you will not see <code>vendor</code> directory containing Phalcon code. Everything you need is in memory. If you have not installed the application yet, head over to the installation page and complete the installation prior to continuing with this tutorial.</p> <p>If this is all brand new it is recommended that you install the Phalcon Devtools also. The DevTools leverage PHP's built-in web server, allowing you to run your application almost immediately. If you choose this option, you will need a <code>.htrouter.php</code> file at the root of your project with the following contents:</p> <pre><code>&lt;?php\n\n$uri = urldecode(\n    parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH)\n);\n\nif ($uri !== '/' &amp;&amp; file_exists(__DIR__ . '/public' . $uri)) {\n    return false;\n}\n\n$_GET['_url'] = $_SERVER['REQUEST_URI'];\n\nrequire_once __DIR__ . '/public/index.php';\n</code></pre> <p>In the case of our tutorial, this file must be located in the <code>tutorial</code> directory.</p> <p>You can also use nginX, apache, cherokee or other web servers. You can check the webserver setup page for instructions.</p>"},{"location":"tutorial-basic/#bootstrap","title":"Bootstrap","text":"<p>The first file you need to create is the bootstrap file. This file acts as the entry-point and configuration for your application. In this file, you can implement initialization of components as well define application behavior.</p> <p>This file handles 3 things: - Registration of component autoloaders - Configuring Services and registering them with the Dependency Injection context - Resolving the application's HTTP requests</p>"},{"location":"tutorial-basic/#autoloader","title":"Autoloader","text":"<p>We are going to use Phalcon\\Loader a PSR-4 compliant file loader. Common things that should be added to the autoloader are your controllers and models. You can also register directories which will be scanned for files required by the application.</p> <p>To start, lets register our app's <code>controllers</code> and <code>models</code> directories using Phalcon\\Loader:</p> <p><code>public/index.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\n\ndefine('BASE_PATH', dirname(__DIR__));\ndefine('APP_PATH', BASE_PATH . '/app');\n// ...\n\n$loader = new Loader();\n\n$loader-&gt;registerDirs(\n    [\n        APP_PATH . '/controllers/',\n        APP_PATH . '/models/',\n    ]\n);\n\n$loader-&gt;register();\n</code></pre></p>"},{"location":"tutorial-basic/#dependency-management","title":"Dependency Management","text":"<p>Since Phalcon is loosely coupled, services are registered with the frameworks Dependency Manager so they can be injected automatically to components and services wrapped in the IoC container. Frequently you will encounter the term DI which stands for Dependency Injection. Dependency Injection and Inversion of Control(IoC) may sound complex but Phalcon ensures that their use is simple, practical and efficient. Phalcon's IoC container consists of the following concepts: - Service Container: a \"bag\" where we globally store the services that our application needs to function. - Service or Component: Data processing object which will be injected into components</p> <p>Each time the framework requires a component or service, it will ask the container using an agreed upon name for the service. This way we have an easy way to retrieve objects necessary for our application, such as the logger, database connection etc.</p> <p>NOTE</p> <p>If you are still interested in the details please see this article by Martin Fowler. Also we have a great tutorial covering many use cases.</p>"},{"location":"tutorial-basic/#factory-default","title":"Factory Default","text":"<p>The Phalcon\\Di\\FactoryDefault is a variant of Phalcon\\Di. To make things easier, it will automatically register most of the components that are required by an application and come with Phalcon as standard. Although it is recommended to set up services manually, you can use the Phalcon\\Di\\FactoryDefault container initially and later on customize it to fit your needs.</p> <p>Services can be registered in several ways, but for our tutorial, we will use an anonymous function:</p> <p><code>public/index.php</code></p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\n\n// Create a DI\n$container = new FactoryDefault();\n</code></pre> <p>Now we need to register the view service, setting the directory where the framework will find the view files. As the views do not correspond to classes, they cannot be automatically loaded by our autoloader.</p> <p><code>public/index.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\n\n// ...\n\n$container-&gt;set(\n    'view',\n    function () {\n        $view = new View();\n        $view-&gt;setViewsDir(APP_PATH . '/views/');\n\n        return $view;\n    }\n);\n</code></pre></p> <p>Now we need to register a base URI, that will offer the functionality to create all URIs by Phalcon. The component will ensure that whether you run your application through the top directory or a subdirectory, all your URIs will be correct. For this tutorial our base path is <code>/</code>. This will become important later on in this tutorial when we use the class <code>Phalcon\\Tag</code> to generate hyperlinks.</p> <p><code>public/index.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Url;\n\n// ...\n\n$container-&gt;set(\n    'url',\n    function () {\n        $url = new Url();\n        $url-&gt;setBaseUri('/');\n\n        return $url;\n    }\n);\n</code></pre></p>"},{"location":"tutorial-basic/#handling-the-application-request","title":"Handling the Application Request","text":"<p>In order to handle any requests, the Phalcon\\Mvc\\Application object is used to do all the heavy lifting for us. The component will accept the request by the user, detect the routes and dispatch the controller and render the view returning back the results.</p> <p><code>public/index.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Application;\n\n// ...\n\n$application = new Application($container);\n\n$response = $application-&gt;handle(\n    $_SERVER[\"REQUEST_URI\"]\n);\n\n$response-&gt;send();\n</code></pre></p>"},{"location":"tutorial-basic/#putting-everything-together","title":"Putting Everything Together","text":"<p>The <code>tutorial/public/index.php</code> file should look like:</p> <p><code>public/index.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\Application;\nuse Phalcon\\Url;\n\n// Define some absolute path constants to aid in locating resources\ndefine('BASE_PATH', dirname(__DIR__));\ndefine('APP_PATH', BASE_PATH . '/app');\n\n// Register an autoloader\n$loader = new Loader();\n\n$loader-&gt;registerDirs(\n    [\n        APP_PATH . '/controllers/',\n        APP_PATH . '/models/',\n    ]\n);\n\n$loader-&gt;register();\n\n$container = new FactoryDefault();\n\n$container-&gt;set(\n    'view',\n    function () {\n        $view = new View();\n        $view-&gt;setViewsDir(APP_PATH . '/views/');\n        return $view;\n    }\n);\n\n$container-&gt;set(\n    'url',\n    function () {\n        $url = new Url();\n        $url-&gt;setBaseUri('/');\n        return $url;\n    }\n);\n\n$application = new Application($container);\n\ntry {\n    // Handle the request\n    $response = $application-&gt;handle(\n        $_SERVER[\"REQUEST_URI\"]\n    );\n\n    $response-&gt;send();\n} catch (\\Exception $e) {\n    echo 'Exception: ', $e-&gt;getMessage();\n}\n</code></pre></p> <p>As you can see, the bootstrap file is very short and we do not need to include any additional files. You are well on your way to creating a flexible MVC application in less than 30 lines of code.</p>"},{"location":"tutorial-basic/#creating-a-controller","title":"Creating a Controller","text":"<p>By default Phalcon will look for a controller named <code>IndexController</code>. It is the starting point when no controller or action has been added in the request (eg. <code>https://localhost/</code>). An <code>IndexController</code> and its <code>IndexAction</code> should resemble the following example:</p> <p><code>app/controllers/IndexController.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    public function indexAction()\n    {\n        return '&lt;h1&gt;Hello!&lt;/h1&gt;';\n    }\n}\n</code></pre></p> <p>The controller classes must have the suffix <code>Controller</code> and controller actions must have the suffix <code>Action</code>. For more information you can read our document about controllers. If you access the application from your browser, you should see something like this:</p> <p></p> <p>NOTE</p> <p>Congratulations, you are Phlying with Phalcon!</p>"},{"location":"tutorial-basic/#sending-output-to-a-view","title":"Sending Output to a View","text":"<p>Sending output to the screen from the controller is at times necessary but not desirable as most purists in the MVC community will attest. Everything must be passed to the view that is responsible for outputting data on screen. Phalcon will look for a view with the same name as the last executed action inside a directory named as the last executed controller. </p> <p>Therefore in our case if the URL is:</p> <pre><code>http://localhost/\n</code></pre> <p>will invoke the <code>IndexController</code> and <code>indexAction</code>, and it will search the view:</p> <pre><code>/views/index/index.phtml\n</code></pre> <p>If found it will parse it and send the output on screen. Our view then will have the following contents:</p> <p><code>app/views/index/index.phtml</code> <pre><code>&lt;?php echo \"&lt;h1&gt;Hello!&lt;/h1&gt;\";\n</code></pre></p> <p>and since we moved the <code>echo</code> from our controller action to the view, it will be empty now:</p> <p><code>app/controllers/IndexController.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n}\n</code></pre></p> <p>The browser output will remain the same. The <code>Phalcon\\Mvc\\View</code> component is automatically created when the action execution has ended. You can read more about views in Phalcon here.</p>"},{"location":"tutorial-basic/#designing-a-sign-up-form","title":"Designing a Sign-up Form","text":"<p>Now we will change the <code>index.phtml</code> view file, to add a link to a new controller named signup. The goal is to allow users to sign up to our application.</p> <p><code>app/views/index/index.phtml</code> <pre><code>&lt;?php\n\necho \"&lt;h1&gt;Hello!&lt;/h1&gt;\";\n\necho PHP_EOL;\n\necho PHP_EOL;\n\necho $this-&gt;tag-&gt;linkTo(\n    'signup',\n    'Sign Up Here!'\n);\n</code></pre></p> <p>The generated HTML code displays an anchor (<code>&lt;a&gt;</code>) HTML tag linking to a new controller:</p> <p><code>app/views/index/index.phtml</code> (rendered) <pre><code>&lt;h1&gt;Hello!&lt;/h1&gt;\n\n&lt;a href=\"/signup\"&gt;Sign Up Here!&lt;/a&gt;\n</code></pre></p> <p>To generate the link for the <code>&lt;a&gt;</code> tag, we use the Phalcon\\Tag component. This is a utility class that offers an easy way to build HTML tags with framework conventions in mind. This class is also a service registered in the Dependency Injector so we can use <code>$this-&gt;tag</code> to access its functionality. </p> <p>NOTE</p> <p><code>Phalcon\\Tag</code> is already registered in the DI container since we have used the <code>Phalcon\\Di\\FactoryDefault</code> container. If you registered all the services on your own, you will need to register this component in your container to make it available in your application.</p> <p>The Phalcon\\Tag component also uses the previously registered Phalcon\\Uri component to correctly generate URIs. A more detailed article regarding HTML generation can be found here.</p> <p></p> <p>And the Signup controller is (<code>app/controllers/SignupController.php</code>):</p> <p><code>app/controllers/SignupController.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass SignupController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n}\n</code></pre></p> <p>The empty index action gives the clean pass to a view with the form definition (<code>app/views/signup/index.phtml</code>):</p> <p><code>app/views/signup/index.phtml</code> <pre><code>&lt;h2&gt;Sign up using this form&lt;/h2&gt;\n\n&lt;?php echo $this-&gt;tag-&gt;form(\"signup/register\"); ?&gt;\n\n    &lt;p&gt;\n        &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n        &lt;?php echo $this-&gt;tag-&gt;textField(\"name\"); ?&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;\n        &lt;label for=\"email\"&gt;E-Mail&lt;/label&gt;\n        &lt;?php echo $this-&gt;tag-&gt;textField(\"email\"); ?&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;\n        &lt;?php echo $this-&gt;tag-&gt;submitButton(\"Register\"); ?&gt;\n    &lt;/p&gt;\n\n&lt;/form&gt;\n</code></pre></p> <p>Viewing the form in your browser will display the following:</p> <p></p> <p>As mentioned above, the Phalcon\\Tag utility class, exposes useful methods allowing you to build form HTML elements with ease. The <code>Phalcon\\Tag::form()</code> method receives only one parameter for instance, a relative URI to a controller/action in the application. The <code>Phalcon\\Tag::textField()</code> creates a text HTML element with the name as the passed parameter, while the <code>Phalcon\\Tag::submitButton()</code> creates a submit HTML button.</p> <p>By clicking the Register button, you will notice an exception thrown from the framework, indicating that we are missing the <code>register</code> action in the controller <code>signup</code>. Our <code>public/index.php</code> file throws this exception:</p> <pre><code>Exception: Action \"register\" was not found on handler \"signup\"\n</code></pre> <p>Implementing that method will remove the exception:</p> <p><code>app/controllers/SignupController.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass SignupController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function registerAction()\n    {\n\n    }\n}\n</code></pre></p> <p>If you click the Register button again, you will see a blank page. We will be adding a view a little later that provides useful feedback. But first, we should work on the code to store the user's inputs in a database.</p> <p>According to MVC guidelines, database interactions must be done through models to ensure clean, object-oriented code.</p>"},{"location":"tutorial-basic/#creating-a-model","title":"Creating a Model","text":"<p>Phalcon brings the first ORM for PHP entirely written in C-language. Instead of increasing the complexity of development, it simplifies it.</p> <p>Before creating our first model, we need to create a database table using a database access tool or the database command line utility. For this tutorial we are using MySQL as our database, A simple table to store registered users can be created as follows:</p> <p><code>create_users_table.sql</code> <pre><code>CREATE TABLE `users` (\n    `id`    int(10)     unsigned NOT NULL AUTO_INCREMENT,\n    `name`  varchar(70)          NOT NULL,\n    `email` varchar(70)          NOT NULL,\n\n    PRIMARY KEY (`id`)\n);\n</code></pre></p> <p>A model should be located in the <code>app/models</code> directory (<code>app/models/Users.php</code>). The model maps to the users table:</p> <p><code>app/models/Users.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Users extends Model\n{\n    public $id;\n    public $name;\n    public $email;\n}\n</code></pre></p> <p>NOTE</p> <p>Note that the public properties of the model correspond to the names of the fields in our table. </p>"},{"location":"tutorial-basic/#setting-a-database-connection","title":"Setting a Database Connection","text":"<p>In order to use a database connection and subsequently access data through our models, we need to specify it in our bootstrap process. A database connection is just another service that our application has, that can be used throughout our application:</p> <p><code>public/index.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n$container-&gt;set(\n    'db',\n    function () {\n        return new Mysql(\n            [\n                'host'     =&gt; '127.0.0.1',\n                'username' =&gt; 'root',\n                'password' =&gt; 'secret',\n                'dbname'   =&gt; 'tutorial',\n            ]\n        );\n    }\n);\n</code></pre></p> <p>Adjust the code snippet above as appropriate for your database. </p> <p>With the correct database parameters, our model is ready to interact with the rest of the application so we can save the user's input. First, let's take a moment and create a view for <code>SignupController::registerAction()</code> that will display a message letting the user know the outcome of the save operation.</p> <p><code>app/views/signup/register.phtml</code> <pre><code>&lt;div class=\"alert alert-&lt;?php echo $success === true ? 'success' : 'danger'; ?&gt;\"&gt;\n    &lt;?php echo $message; ?&gt;\n&lt;/div&gt;\n\n&lt;?php echo $this-&gt;tag-&gt;linkTo(['/', 'Go back', 'class' =&gt; 'btn btn-primary']); ?&gt;\n</code></pre> Note that we have added some css styling in the code above. We will cover including the stylesheet in the Styling section below.</p>"},{"location":"tutorial-basic/#storing-data-using-models","title":"Storing Data using Models","text":"<p><code>app/controllers/SignupController.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass SignupController extends Controller\n{\n    public function indexAction()\n    {\n\n    }\n\n    public function registerAction()\n    {\n        $user = new Users();\n\n        //assign value from the form to $user\n        $user-&gt;assign(\n            $this-&gt;request-&gt;getPost(),\n            [\n                'name',\n                'email'\n            ]\n        );\n\n        // Store and check for errors\n        $success = $user-&gt;save();\n\n        // passing the result to the view\n        $this-&gt;view-&gt;success = $success;\n\n        if ($success) {\n            $message = \"Thanks for registering!\";\n        } else {\n            $message = \"Sorry, the following problems were generated:&lt;br&gt;\"\n                     . implode('&lt;br&gt;', $user-&gt;getMessages());\n        }\n\n        // passing a message to the view\n        $this-&gt;view-&gt;message = $message;\n    }\n}\n</code></pre></p> <p>At the beginning of the <code>registerAction</code> we create an empty user object using the <code>Users</code> class we created earlier. We will use this class to manage the record of a user. As mentioned above, the class's public properties map to the fields of the <code>users</code> table in our database. Setting the relevant values in the new record and calling <code>save()</code> will store the data in the database for that record. The <code>save()</code> method returns a <code>boolean</code> value which indicates whether the save was successful or not.</p> <p>The ORM will automatically escape the input preventing SQL injections so we only need to pass the request to the <code>save()</code> method.</p> <p>Additional validation happens automatically on fields that are defined as not null (required). If we do not enter any of the required fields in the sign-up form our screen will look like this:</p> <p></p>"},{"location":"tutorial-basic/#list-the-registered-users","title":"List the Registered Users","text":"<p>Now we will need to get and display all the registered users in our database</p> <p>The first thing that we are going to do in our <code>indexAction</code> of the<code>IndexController</code> is to show the result of the search of all the users, which is done simply by calling the static method <code>find()</code> on our model (<code>Users::find()</code>). </p> <p><code>indexAction</code> would change as follows:</p> <p><code>app/controllers/IndexController.php</code> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    /**\n     * Welcome and user list\n     */\n    public function indexAction()\n    {\n        $this-&gt;view-&gt;users = Users::find();\n    }\n}\n</code></pre></p> <p>NOTE</p> <p>We assign the results of the <code>find</code> to a magic property on the <code>view</code> object. This sets this variable with the assigned data and makes it available in our view</p> <p>In our view file <code>views/index/index.phtml</code> we can use the <code>$users</code> variable as follows:</p> <p>The view will look like this:</p> <p><code>views/index/index.phtml</code> <pre><code>&lt;?php\n\necho \"&lt;h1&gt;Hello!&lt;/h1&gt;\";\n\necho $this-&gt;tag-&gt;linkTo([\"signup\", \"Sign Up Here!\", 'class' =&gt; 'btn btn-primary']);\n\nif ($users-&gt;count() &gt; 0) {\n    ?&gt;\n    &lt;table class=\"table table-bordered table-hover\"&gt;\n        &lt;thead class=\"thead-light\"&gt;\n        &lt;tr&gt;\n            &lt;th&gt;#&lt;/th&gt;\n            &lt;th&gt;Name&lt;/th&gt;\n            &lt;th&gt;Email&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tfoot&gt;\n        &lt;tr&gt;\n            &lt;td colspan=\"3\"&gt;Users quantity: &lt;?php echo $users-&gt;count(); ?&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;/tfoot&gt;\n        &lt;tbody&gt;\n        &lt;?php foreach ($users as $user) { ?&gt;\n            &lt;tr&gt;\n                &lt;td&gt;&lt;?php echo $user-&gt;id; ?&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;?php echo $user-&gt;name; ?&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;?php echo $user-&gt;email; ?&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;?php } ?&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n    &lt;?php\n}\n</code></pre></p> <p>As you can see our variable <code>$users</code> can be iterated and counted. You can get more information on how models operate in our document about models.</p> <p></p>"},{"location":"tutorial-basic/#styling","title":"Styling","text":"<p>We can now add small design touches to our application. We can add the Bootstrap CSS in our code so that it is used throughout our views. We will add an <code>index.phtml</code> file in the<code>views</code> folder, with the following content:</p> <p><code>app/views/index.phtml</code> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Phalcon Tutorial&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div class=\"container\"&gt;\n    &lt;?php echo $this-&gt;getContent(); ?&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p>In the above template, the most important line is the call to the <code>getContent()</code> method. This method returns all the content that has been generated from our view. Our application will now show:</p> <p> </p>"},{"location":"tutorial-basic/#conclusion","title":"Conclusion","text":"<p>As you can see, it is easy to start building an application using Phalcon. Because Phalcon is an extension loaded in memory, the footprint of your project will be minimal, while at the same time you will enjoy a nice performance boost. </p> <p>If you are ready to learn more check out the V\u00f6kur\u00f3 Tutorial next.</p>"},{"location":"tutorial-invo/","title":"Tutorial - INVO","text":""},{"location":"tutorial-invo/#overview","title":"Overview","text":"<p>INVO is a small application that allows users to generate invoices, manage customers and products as well as sign up and log in. It showcases how certain tasks are handled by Phalcon. On the client side, Bootstrap is used for the UI. The application does not generate actual invoices, but serves as an example on how these tasks are implemented using Phalcon.</p> <p>NOTE</p> <p>It is recommended that you open the application in your favorite editor so that you can follow this tutorial easier. </p> <p>NOTE</p> <p>Note the code below has been formatted to increase readability</p>"},{"location":"tutorial-invo/#structure","title":"Structure","text":"<p>You can clone the repository to your machine (or download it) from GitHub. Once you clone it (or download and unzip it) you will end up with the following directory structure: </p> <p><pre><code>\u2514\u2500\u2500 invo\n    \u251c\u2500\u2500 app\n    \u2502   \u251c\u2500\u2500 config\n    \u2502   \u251c\u2500\u2500 controllers\n    \u2502   \u251c\u2500\u2500 forms\n    \u2502   \u251c\u2500\u2500 library\n    \u2502   \u251c\u2500\u2500 logs\n    \u2502   \u251c\u2500\u2500 models\n    \u2502   \u251c\u2500\u2500 plugins\n    \u2502   \u2514\u2500\u2500 views\n    \u251c\u2500\u2500 cache\n    \u2502   \u2514\u2500\u2500 volt\n    \u251c\u2500\u2500 docs\n    \u2502\u2500\u2500 public\n    \u2502   \u251c\u2500\u2500 css\n    \u2502   \u251c\u2500\u2500 img\n    \u2502   \u251c\u2500\u2500 index.php\n    \u2502   \u2514\u2500\u2500 js\n    \u2514\u2500\u2500 schemas\n</code></pre> Since Phalcon does not impose a particular directory structure, the particular structure is just our implementation. You will need to set up your webserver with instructions from the webserver setup page.</p> <p>Once the application is set up, you can open it in your browser by navigating to the following URL <code>https://localhost/invo</code>. You will see a screen similar to the one below:</p> <p></p> <p>The application is divided into two parts: a frontend and a backend. The frontend is a public area where visitors can receive information about INVO and request contact information. The backend is an administrative area where registered users can manage their products and customers.</p>"},{"location":"tutorial-invo/#routing","title":"Routing","text":"<p>INVO uses the standard route that is built-in with the Router component. These routes match the following pattern: </p> <pre><code>/:controller/:action/:params\n</code></pre> <p>The custom route <code>/session/register</code> executes the controller <code>SessionController</code> and its action <code>registerAction</code>.</p>"},{"location":"tutorial-invo/#configuration","title":"Configuration","text":"<p>INVO has a configuration file that sets general parameters in the application. This file is located at <code>app/config/config.ini</code> and is loaded in the very first lines of the application bootstrap (<code>public/index.php</code>):</p> <pre><code>&lt;?php\n\nuse Phalcon\\Config\\Adapter\\Ini as ConfigIni;\n\n// ...\n\n$config = new ConfigIni(\n    APP_PATH . 'app/config/config.ini'\n);\n</code></pre> <p>Phalcon Config allows us to manipulate the file in an object-oriented way. In this example, we are using an <code>ini</code> file for configuration. The Phalcon\\Config object has additional adapter that load configuration files from different sources. The configuration file has the following settings:</p> <pre><code>[database]\nhost     = localhost\nusername = root\npassword = secret\nname     = invo\n\n[application]\ncontrollersDir = app/controllers/\nmodelsDir      = app/models/\nviewsDir       = app/views/\npluginsDir     = app/plugins/\nformsDir       = app/forms/\nlibraryDir     = app/library/\nbaseUri        = /invo/\n</code></pre> <p>Phalcon does not have a convention for defining settings. Sections help us to organize the options based on groups that makes sense for our application. In our file there are two questions that will be used later on: <code>application</code> and <code>database</code>.</p>"},{"location":"tutorial-invo/#autoloader","title":"Autoloader","text":"<p>The second part that appears in the bootstrap file (<code>public/index.php</code>) is the autoloader:</p> <pre><code>&lt;?php\n\nrequire APP_PATH . 'app/config/loader.php';\n</code></pre> <p>The autoloader registers a set of directories, in which, the application will look for the classes that we will need.</p> <pre><code>&lt;?php\n\n$loader = new Phalcon\\Loader();\n$loader-&gt;registerDirs(\n    [\n        APP_PATH . $config-&gt;application-&gt;controllersDir,\n        APP_PATH . $config-&gt;application-&gt;pluginsDir,\n        APP_PATH . $config-&gt;application-&gt;libraryDir,\n        APP_PATH . $config-&gt;application-&gt;modelsDir,\n        APP_PATH . $config-&gt;application-&gt;formsDir,\n    ]\n);\n\n$loader-&gt;register();\n</code></pre> <p>NOTE</p> <p>The above code has registered the directories that were defined in the configuration file. The only directory that is not registered is the <code>viewsDir</code> because it contains HTML + PHP files but no classes. </p> <p>NOTE</p> <p>We use a constant called <code>APP_PATH</code>. This constant is defined in the bootstrap (<code>public/index.php</code>) to allow us to have a reference to the root of our project:</p> <pre><code>&lt;?php\n\n// ...\n\ndefine('APP_PATH', realpath('..') . '/');\n</code></pre>"},{"location":"tutorial-invo/#services","title":"Services","text":"<p>Another file that is required in the bootstrap is (<code>app/config/services.php</code>). This file allows us to organize the services that INVO uses and registers them in the DI container.</p> <pre><code>&lt;?php\n\nrequire APP_PATH . 'app/config/services.php';\n</code></pre> <p>For service registration, we use closures for lazy loading the required components:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Url;\n\n$container-&gt;set(\n    'url',\n    function () use ($config) {\n        $url = new Url();\n\n        $url-&gt;setBaseUri(\n            $config-&gt;application-&gt;baseUri\n        );\n\n        return $url;\n    }\n);\n</code></pre>"},{"location":"tutorial-invo/#request-handling","title":"Request Handling","text":"<p>If we skip to the end of the file (<code>public/index.php</code>), the request is finally handled by Phalcon\\Mvc\\Application, which initializes all the services necessary for the application to run.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Application;\n\n// ...\n\n$application = new Application($container);\n\n$response = $application-&gt;handle(\n    $_SERVER[\"REQUEST_URI\"]\n);\n\n$response-&gt;send();\n</code></pre>"},{"location":"tutorial-invo/#dependency-injection","title":"Dependency Injection","text":"<p>In the first line of the code block above, the Application class constructor receives the variable <code>$container</code> as an argument.</p> <p>Since Phalcon is highly decoupled, we need the container to be able to access registered services from it in different parts of the application. The component in question is Phalcon\\Di. It is a service container, that also performs dependency injection and service location, instantiating all components as they are needed by the application.</p> <p>There are many ways available to register services in the container. In INVO, most services have been registered using anonymous functions/closures. Thanks to this, the objects are lazy loaded, reducing the resources required by the application to a bare minimum.</p> <p>For instance, in the following excerpt the session service is registered. The anonymous function will only be called when the application requires access to the session data:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\n\n$container-&gt;set(\n    'session',\n    function () {\n        $session = new Manager();\n        $files   = new Stream(\n            [\n                'savePath' =&gt; '/tmp',\n            ]\n        );\n        $session-&gt;setAdapter($files);\n\n        $session-&gt;start();\n\n        return $session;\n    }\n);\n</code></pre> <p>Here, we have the freedom to change the adapter, perform additional initialization and much more. Note that the service was registered using the name <code>session</code>. This is a convention that will allow the framework to identify the active service in the services container.</p> <p>A request can use many services and registering each service individually can be a cumbersome task. For that reason, the framework provides a variant of Phalcon\\Di called Phalcon\\Di\\FactoryDefault`. This class has pre-registered services to suit a full stack MVC application.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\n\n// ...\n\n$container = new FactoryDefault();\n</code></pre> <p>If any services need to be overwritten we could just set it again as we did above with <code>session</code> or <code>url</code>. This is the reason for the existence of the variable <code>$container</code>.</p>"},{"location":"tutorial-invo/#log-in","title":"Log in","text":"<p>A <code>log in</code> page will allow us to work with the backend controllers. The separation between backend controllers and frontend ones is arbitrary. All controllers are located in the same directory (<code>app/controllers/</code>).</p> <p></p> <p>To enter the system, users must have a valid username and password. User data is stored in the table <code>users</code> in the database <code>invo</code>.</p> <p>Now we need to configure the connection to the database. A service called <code>db</code> is set up in the service container with the connection information. As with the autoloader, we are again taking parameters from the configuration file in order to configure the service:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as DbAdapter;\n\n// ...\n\n$container-&gt;set(\n    'db',\n    function () use ($config) {\n        return new DbAdapter(\n            [\n                'host'     =&gt; $config-&gt;database-&gt;host,\n                'username' =&gt; $config-&gt;database-&gt;username,\n                'password' =&gt; $config-&gt;database-&gt;password,\n                'dbname'   =&gt; $config-&gt;database-&gt;name,\n            ]\n        );\n    }\n);\n</code></pre> <p>Here, we return an instance of the MySQL connection adapter. We can also add extra functionality, such as adding a Logger, a profiler to measure query execution times or even change the adapter to a different RDBMS.</p> <p>The following simple form (<code>app/views/session/index.volt</code>) produces the necessary HTML so that users can submit login information. Some of the HTML code has been removed to improve readability:</p> <pre><code>{% raw %}\n{{ form('session/start') }}\n    &lt;fieldset&gt;\n        &lt;div&gt;\n            &lt;label for='email'&gt;\n                Username/Email\n            &lt;/label&gt;\n\n            &lt;div&gt;\n                {{ text_field('email') }}\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div&gt;\n            &lt;label for='password'&gt;\n                Password\n            &lt;/label&gt;\n\n            &lt;div&gt;\n                {{ password_field('password') }}\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div&gt;\n            {{ submit_button('Login') }}\n        &lt;/div&gt;\n    &lt;/fieldset&gt;\n{{ endForm() }}\n{% endraw %}\n</code></pre> <p>We are using Volt as our template engine instead of PHP. This is a built-in template engine inspired by Jinja providing a simple and user friendly syntax to create templates. If you have worked with Jinja or Twig in the past, you will see many similarities.</p> <p>The <code>SessionController::startAction</code> function (<code>app/controllers/SessionController.php</code>) validates the data submitted from the form, and also checks for a valid user in the database:</p> <pre><code>&lt;?php\n\nclass SessionController extends ControllerBase\n{\n    // ...\n\n    private function _registerSession($user)\n    {\n        $this-&gt;session-&gt;set(\n            'auth',\n            [\n                'id'   =&gt; $user-&gt;id,\n                'name' =&gt; $user-&gt;name,\n            ]\n        );\n    }\n\n    public function startAction()\n    {\n        if (true === $this-&gt;request-&gt;isPost()) {\n            $email    = $this-&gt;request-&gt;getPost('email');\n            $password = $this-&gt;request-&gt;getPost('password');\n\n            $user = Users::findFirst(\n                [\n                    \"(email = :email: OR username = :email:) \" .\n                    \"AND password = :password: \" .\n                    \"AND active = 'Y'\",\n                    'bind' =&gt; [\n                        'email'    =&gt; $email,\n                        'password' =&gt; sha1($password),\n                    ]\n                ]\n            );\n\n            if (null !== $user) {\n                $this-&gt;_registerSession($user);\n\n                $this-&gt;flash-&gt;success(\n                    'Welcome ' . $user-&gt;name\n                );\n\n                return $this-&gt;dispatcher-&gt;forward(\n                    [\n                        'controller' =&gt; 'invoices',\n                        'action'     =&gt; 'index',\n                    ]\n                );\n            }\n\n            $this-&gt;flash-&gt;error(\n                'Wrong email/password'\n            );\n        }\n\n        return $this-&gt;dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'session',\n                'action'     =&gt; 'index',\n            ]\n        );\n    }\n}\n</code></pre> <p>At first inspection of the code, you will note that several public properties are accessed in the controller, such as <code>$this-&gt;flash</code>, <code>$this-&gt;request</code> or <code>$this-&gt;session</code>. Controllers in Phalcon are automatically tied to the Phalcon\\Di container and as a result, all the services registered in the container are present in each controller as properties with the same name as the name of each service. If the service is accessed for the first time, it will be automatically instantiated and returned to the caller. Additionally these services are set as shared so the same instance will be returned back, no matter how many times we access the property/service in the same request. These are services defined in the services container from earlier (<code>app/config/services.php</code>) and you can of course change this behavior when setting up these services.</p> <p>For instance, here we invoke the <code>session</code> service and then we store the user identity in the variable <code>auth</code>:</p> <pre><code>&lt;?php\n\n$this-&gt;session-&gt;set(\n    'auth',\n    [\n        'id'   =&gt; $user-&gt;id,\n        'name' =&gt; $user-&gt;name,\n    ]\n);\n</code></pre> <p>NOTE</p> <p>For more information about Di services, please check the Dependency Injection document.</p> <p>The <code>startAction</code> first checks if data has been submitted using a <code>POST</code>. If not, the user will be redirected again to the same form. We are checking if the form has been submitted via <code>POST</code> using the <code>isPost()</code> method on the request object. </p> <pre><code>&lt;?php\n\nif ($this-&gt;request-&gt;isPost()) {\n    // ...\n}\n</code></pre> <p>We then retrieve posted data from the request. These are the text boxes that are used to submit the form when the user clicks <code>Log In</code>. We use the <code>request</code> object and <code>getPost()</code> method.</p> <pre><code>&lt;?php\n\n$email    = $this-&gt;request-&gt;getPost('email');\n$password = $this-&gt;request-&gt;getPost('password');\n</code></pre> <p>Now, we have to check if we have an active user with the submitted email and password:</p> <pre><code>&lt;?php\n\n$user = Users::findFirst(\n    [\n        \"(email = :email: OR username = :email:) \" .\n        \"AND password = :password: \" .\n        \"AND active = 'Y'\",\n        'bind' =&gt; [\n            'email'    =&gt; $email,\n            'password' =&gt; sha1($password),\n        ]\n    ]\n);\n</code></pre> <p>NOTE</p> <p>Note, the use of 'bound parameters', placeholders <code>:email:</code> and <code>:password:</code> are placed where values should be, then the values are bound using the parameter <code>bind</code>. This safely replaces the values for those columns without having the risk of a SQL injection.</p> <p>When searching for the user in the database, we are not searching for the password directly using clear text. The application stores passwords as hashes, using the sha1 method. Although this methodology is adequate for a tutorial, you might want to consider using a different algorithm for a production application. The Phalcon\\Security component offers convenience methods to strengthen the algorithm used for your hashes.</p> <p>If the user is found, then we register the user in the session (log the user in) and forward them to the dashboard (<code>Invoices</code> controller, <code>index</code> action) showing a welcome message. </p> <pre><code>&lt;?php\n\nif (null !== $user) {\n    $this-&gt;_registerSession($user);\n\n    $this-&gt;flash-&gt;success(\n        'Welcome ' . $user-&gt;name\n    );\n\n    return $this-&gt;dispatcher-&gt;forward(\n        [\n            'controller' =&gt; 'invoices',\n            'action'     =&gt; 'index',\n        ]\n    );\n}\n</code></pre> <p>If the user is not found, we forward them to the login page with a <code>Wrong email/password</code> message on screen.</p> <pre><code>&lt;?php\n\nreturn $this-&gt;dispatcher-&gt;forward(\n    [\n        'controller' =&gt; 'session',\n        'action'     =&gt; 'index',\n    ]\n);\n</code></pre>"},{"location":"tutorial-invo/#backend-security","title":"Backend Security","text":"<p>The backend is a private area where only registered users have access. Therefore, it is necessary to check that only registered users have access to these controllers. If you are not logged in and try to access a private area you will see a message like the one below:</p> <p>Every time a user attempts to access any controller/action, the application verifies that the current role (stored in the session) has access to it, otherwise it displays a message as shown above and forwards the flow to the home page.</p> <p>In order to accomplish this, we need to use the Dispatcher component. When the user requests a page or URL, the application first identifies the page requested using the Route component. Once the route has been identified and matched to a valid controller and action, this information is delegated to the Dispatcher which then loads the controller and executes the action.</p> <p>Normally, the framework creates the Dispatcher automatically. In our case, we need to verify that the user is logged in before the route is dispatched. As such we need to replace the default component in the DI container and set a new one in. We do this when bootstrapping the application:</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Dispatcher;\n\n// ...\n\n$container-&gt;set(\n    'dispatcher',\n    function () {\n        // ...\n\n        $containerspatcher = new Dispatcher();\n\n        return $containerspatcher;\n    }\n);\n</code></pre> Now that the dispatcher is registered, we need to take advantage of a hook available to intercept the flow of execution and perform our verification checks. Hooks are called Events in Phalcon and in order to access or enable them, we need to register an Events Manager component in our application so that it can fire those events in our application.</p> <p>By creating an Events Manager and attaching specific code to the <code>dispatcher</code> events, we now have a lot more flexibility and can attach our code to the dispatch loop or operation. </p>"},{"location":"tutorial-invo/#events","title":"Events","text":"<p>The Events Manager allows us to attach listeners to a particular type of event. The event type that we are attaching to is <code>dispatch</code>. The code below attaches listeners to the <code>beforeExecuteRoute</code> and <code>beforeException</code> events. We utilize these events to check for 404 pages and also perform allowed access checks in our application.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Events\\Manager;\n\n$container-&gt;set(\n    'dispatcher',\n    function () {\n        $eventsManager = new Manager();\n\n        $eventsManager-&gt;attach(\n            'dispatch:beforeExecuteRoute',\n            new SecurityPlugin()\n        );\n\n        $eventsManager-&gt;attach(\n            'dispatch:beforeException',\n            new NotFoundPlugin()\n        );\n\n        $containerspatcher = new Dispatcher();\n\n        $containerspatcher-&gt;setEventsManager($eventsManager);\n\n        return $containerspatcher;\n    }\n);\n</code></pre> <p>When an event called <code>beforeExecuteRoute</code> is triggered the <code>SecurityPlugin</code> plugin will be notified:</p> <pre><code>&lt;?php\n\n$eventsManager-&gt;attach(\n    'dispatch:beforeExecuteRoute',\n    new SecurityPlugin()\n);\n</code></pre> <p>When a <code>beforeException</code> is triggered then the <code>NotFoundPlugin</code>  is notified:</p> <pre><code>&lt;?php\n\n$eventsManager-&gt;attach(\n    'dispatch:beforeException',\n    new NotFoundPlugin()\n);\n</code></pre> <p><code>SecurityPlugin</code> is a class located in the <code>plugins</code> directory (<code>app/plugins/SecurityPlugin.php</code>). This class implements the method <code>beforeExecuteRoute</code>. This is the same name as one of the events produced in the Dispatcher:</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Di\\Injectable;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Dispatcher;\n\nclass SecurityPlugin extends Injectable\n{\n    // ...\n\n    public function beforeExecuteRoute(\n        Event $event, \n        Dispatcher $containerspatcher\n    ) {\n        // ...\n    }\n}\n</code></pre> The event methods always receive the actual event as the first parameter. This is a Phalcon\\Events\\Event object which will contain information regarding the event such as its type and other related information. For this particular event, the second parameter will be the object that produced the event itself (<code>$containerspatcher</code>). It is not mandatory that plugins classes extend the class Phalcon\\Di\\Injectable, but by doing this they gain easier access to the services available in the application.</p> <p>We now have the structure to start verifying the role in the current session. We can check if the user has access to use the ACL. If the user does not have access, we will redirect them to the home screen.</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Di\\Injectable;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Dispatcher;\n\nclass SecurityPlugin extends Plugin\n{\n    // ...\n\n    public function beforeExecuteRoute(\n        Event $event, \n        Dispatcher $containerspatcher\n    ) {\n        $auth = $this-&gt;session-&gt;get('auth');\n\n        if (!$auth) {\n            $role = 'Guests';\n        } else {\n            $role = 'Users';\n        }\n\n        $controller = $containerspatcher-&gt;getControllerName();\n        $action     = $containerspatcher-&gt;getActionName();\n\n        $acl = $this-&gt;getAcl();\n\n        $allowed = $acl-&gt;isAllowed($role, $controller, $action);\n        if (true !== $allowed) {\n            $this-&gt;flash-&gt;error(\n                \"You do not have access to this module\"\n            );\n\n            $containerspatcher-&gt;forward(\n                [\n                    'controller' =&gt; 'index',\n                    'action'     =&gt; 'index',\n                ]\n            );\n\n            return false;\n        }\n    }\n}\n</code></pre> We first get the <code>auth</code> value from the <code>session</code> service. If we are logged in, then this has been already set for us during the login process. If not, we are just a guest.</p> <p>Following that we get the name of the controller and the action, and also retrieve the Access Control List (acl.md). We check if the user <code>isAllowed</code> using the combination <code>role</code> - <code>controller</code> - <code>action</code>. If yes, the method will finish processing.</p> <p>If we do not have access, then the method will return <code>false</code> stopping the execution, right after we forward the user to the home page.</p>"},{"location":"tutorial-invo/#acl","title":"ACL","text":"<p>In the above example we have obtained the ACL using the method <code>$this-&gt;getAcl()</code>. To build the ACL we need to do the following:</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Enum;\nuse Phalcon\\Acl\\Role;\nuse Phalcon\\Acl\\Adapter\\Memory as AclList;\n\n$acl = new AclList();\n\n$acl-&gt;setDefaultAction(\n    Enum::DENY\n);\n\n$roles = [\n    'users'  =&gt; new Role('Users'),\n    'guests' =&gt; new Role('Guests'),\n];\n\nforeach ($roles as $role) {\n    $acl-&gt;addRole($role);\n}\n</code></pre> First we create a new <code>Phalcon\\Acl\\Adapter\\Memory</code> object. Although the default access is <code>DENY</code> we still set it in our list by using <code>setDefaultAction()</code>. After that we need to set up our roles. For INVO we have <code>guests</code> (users that have not been logged in) and <code>users</code>. We register those roles by using <code>addRole</code> on the list.</p> <p>Now that the roles are set, we need to set the components for the list. ACL components map to the areas of our application (controller/action). Doing so we can control which role can access which component.</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Acl\\Component;\n\n// ...\n\n$privateComponents = [\n    'companies'    =&gt; [\n        'index', \n        'search', \n        'new', \n        'edit', \n        'save', \n        'create', \n        'delete',\n    ],\n    'products'     =&gt; [\n        'index', \n        'search', \n        'new', \n        'edit', \n        'save', \n        'create', \n        'delete',\n    ],\n    'producttypes' =&gt; [\n        'index', \n        'search', \n        'new', \n        'edit', \n        'save', \n        'create', \n        'delete',\n    ],\n    'invoices'     =&gt; [\n        'index', \n        'profile',\n    ],\n];\n\nforeach ($privateComponents as $componentName =&gt; $actions) {\n    $acl-&gt;addComponent(\n        new Component($componentName),\n        $actions\n    );\n}\n\n$publicComponents = [\n    'index'    =&gt; [\n        'index',\n        ],\n    'about'    =&gt; [\n        'index',\n        ],\n    'register' =&gt; [\n        'index',\n        ],\n    'errors'   =&gt; [\n        'show404', \n        'show500',\n    ],\n    'session'  =&gt; [\n        'index', \n        'register', \n        'start', \n        'end',\n    ],\n    'contact'  =&gt; [\n        'index', \n        'send',\n    ],\n];\n\nforeach ($publicComponents as $componentName =&gt; $actions) {\n    $acl-&gt;addComponent(\n        new Component($componentName),\n        $actions\n    );\n}\n</code></pre> As seen above, we first register the private areas of our application (backend) and then the public ones (frontend). The arrays created have the key as the controller name while the values are the relevant actions. We do the same thing with the public components.</p> <p>Now that roles and components are registered, we need to link the two so that the ACL is complete. The <code>Users</code> role has access to public (frontend) and private (backend) components, while <code>Guests</code> only have access to the public (frontend) components.</p> <pre><code>&lt;?php\n\nforeach ($roles as $role) {\n    foreach ($publicComponents as $resource =&gt; $actions) {\n        $acl-&gt;allow(\n            $role-&gt;getName(),\n            $resource,\n            '*'\n        );\n    }\n}\n\nforeach ($privateComponents as $resource =&gt; $actions) {\n    foreach ($actions as $action) {\n        $acl-&gt;allow(\n            'Users',\n            $resource,\n            $action\n        );\n    }\n}\n</code></pre>"},{"location":"tutorial-invo/#crud","title":"CRUD","text":"<p>A backend portion of an application is the code that provides forms and logic, allowing users to manipulate data i.e. perform CRUD operations. We will explore how INVO handles this task and also demonstrate the use of forms, validators, paginators and more.</p> <p>We have a simple CRUD (Create, Read, Update and Delete) implementation in INVO, so as to manipulate data (companies, products, types of products). For products the following files are used:</p> <p><pre><code>\u2514\u2500\u2500 invo\n    \u2514\u2500\u2500 app\n        \u251c\u2500\u2500 controllers\n        \u2502   \u2514\u2500\u2500 ProductsController.php\n        \u251c\u2500\u2500 forms\n        \u2502   \u2514\u2500\u2500 ProductsForm.php\n        \u251c\u2500\u2500 models\n        \u2502   \u2514\u2500\u2500 Products.php\n        \u2514\u2500\u2500 views\n            \u2514\u2500\u2500 products\n                \u251c\u2500\u2500 edit.volt\n                \u251c\u2500\u2500 index.volt\n                \u251c\u2500\u2500 new.volt\n                \u2514\u2500\u2500 search.volt\n</code></pre> For other areas (such as companies for instance), the relevant files (prefixed with <code>Company</code>) can be found in the same directories as shown above.</p> <p>Each controller has the following actions:</p> <pre><code>&lt;?php\n\nclass ProductsController extends ControllerBase\n{\n    public function indexAction();\n\n    public function searchAction();\n\n    public function newAction();\n\n    public function editAction();\n\n    public function createAction();\n\n    public function saveAction();\n\n    public function deleteAction($id);\n}\n</code></pre> Action Description <code>createAction</code> Creates a product based on the data entered in the <code>new</code> action <code>deleteAction</code> Deletes an existing product <code>editAction</code> Shows the view to <code>edit</code> an existing product <code>indexAction</code> The start action, it shows the <code>search</code> view <code>newAction</code> Shows the view to create a <code>new</code> product <code>saveAction</code> Updates a product based on the data entered in the <code>edit</code> action <code>searchAction</code> Execute the <code>search</code> based on the criteria sent from the <code>index</code>. Returning a paginator for the results"},{"location":"tutorial-invo/#search-form","title":"Search Form","text":"<p>Our CRUD operations start with the search form. This form shows each field that the table has (<code>products</code>), allowing the user to enter search criteria for each field. The <code>products</code> table has a relationship with the table <code>products_types</code>. In this case, we previously queried the records in the <code>product_types</code> table to offer search criteria for this field:</p> <p><pre><code>&lt;?php\n\npublic function indexAction()\n{\n    $this-&gt;persistent-&gt;searchParams = null;\n\n    $this-&gt;view-&gt;form = new ProductsForm();\n}\n</code></pre> An instance of the <code>ProductsForm</code> form (<code>app/forms/ProductsForm.php</code>) is passed to the view. This form defines the fields that are visible to the user:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Forms\\Form;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Element\\Hidden;\nuse Phalcon\\Forms\\Element\\Select;\nuse Phalcon\\Validation\\Validator\\Email;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\nuse Phalcon\\Validation\\Validator\\Numericality;\n\nclass ProductsForm extends Form\n{\n    public function initialize($entity = null, $options = [])\n    {\n        if (!isset($options['edit'])) {\n            $element = new Text('id');\n            $element-&gt;setLabel('Id');\n            $this-&gt;add($element);\n        } else {\n            $this-&gt;add(new Hidden('id'));\n        }\n\n        $name = new Text('name');\n        $name-&gt;setLabel('Name');\n        $name-&gt;setFilters(\n            [\n                'striptags',\n                'string',\n            ]\n        );\n        $name-&gt;addValidators(\n            [\n                new PresenceOf(\n                    [\n                        'message' =&gt; 'Name is required',\n                    ]\n                )\n            ]\n        );\n        $this-&gt;add($name);\n\n        $type = new Select(\n            'profilesId',\n            ProductTypes::find(),\n            [\n                'using'      =&gt; [\n                    'id',\n                    'name',\n                ],\n                'useEmpty'   =&gt; true,\n                'emptyText'  =&gt; '...',\n                'emptyValue' =&gt; '',\n            ]\n        );\n\n        $this-&gt;add($type);\n\n        $price = new Text('price');\n        $price-&gt;setLabel('Price');\n        $price-&gt;setFilters(\n            [\n                'float',\n            ]\n        );\n        $price-&gt;addValidators(\n            [\n                new PresenceOf(\n                    [\n                        'message' =&gt; 'Price is required',\n                    ]\n                ),\n                new Numericality(\n                    [\n                        'message' =&gt; 'Price is required',\n                    ]\n                ),\n            ]\n        );\n        $this-&gt;add($price);\n    }\n}\n</code></pre> <p>The form is declared using an object-oriented scheme based on the elements provided by the Phalcon\\Forms\\Form component. Each element defined follows almost the same setup:</p> <p><pre><code>&lt;?php\n\n$name = new Text('name');\n$name-&gt;setLabel('Name');\n$name-&gt;setFilters(\n    [\n        'striptags',\n        'string',\n    ]\n);\n\n$name-&gt;addValidators(\n    [\n        new PresenceOf(\n            [\n                'message' =&gt; 'Name is required',\n            ]\n        )\n    ]\n);\n\n$this-&gt;add($name);\n</code></pre> First we create the element. Then we attach a label to it, attach filters, so that we can perform sanitization of data. Following that we apply an validators on the element and finally add the element to the form.</p> <p>Other elements are also used in this form:</p> <p><pre><code>&lt;?php\n\n$this-&gt;add(\n    new Hidden('id')\n);\n\n// ...\n\n$productTypes = ProductTypes::find();\n\n$type = new Select(\n    'profilesId',\n    $productTypes,\n    [\n        'using'      =&gt; [\n            'id',\n            'name',\n        ],\n        'useEmpty'   =&gt; true,\n        'emptyText'  =&gt; '...',\n        'emptyValue' =&gt; '',\n    ]\n);\n</code></pre> In the above code snippet, we add a hidden HTML field that holds the <code>id</code> of the product if applicable. We also get all the product types by using the <code>ProductTypes::find()</code> and then use that resultset to fill the HTML <code>select</code> element by using the Phalcon\\Tag component and its <code>select()</code> method. Once the form is passed to the view, it can be rendered and presented to the user:</p> <pre><code>{% raw %}\n{{ form('products/search') }}\n\n    &lt;h2&gt;\n        Search products\n    &lt;/h2&gt;\n\n    &lt;fieldset&gt;\n\n        {% for element in form %}\n            &lt;div class='control-group'&gt;\n                {{ element.label(['class': 'control-label']) }}\n\n                &lt;div class='controls'&gt;\n                    {{ element }}\n                &lt;/div&gt;\n            &lt;/div&gt;\n        {% endfor %}\n\n\n\n        &lt;div class='control-group'&gt;\n            {{ submit_button('Search', 'class': 'btn btn-primary') }}\n        &lt;/div&gt;\n\n    &lt;/fieldset&gt;\n\n{{ endForm() }}\n{% endraw %}\n</code></pre> <p>This produces the following HTML:</p> <pre><code>&lt;form action='/invo/products/search' method='post'&gt;\n\n    &lt;h2&gt;\n        Search products\n    &lt;/h2&gt;\n\n    &lt;fieldset&gt;\n\n        &lt;div class='control-group'&gt;\n            &lt;label for='id' class='control-label'&gt;Id&lt;/label&gt;\n\n            &lt;div class='controls'&gt;\n                &lt;input type='text' id='id' name='id' /&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class='control-group'&gt;\n            &lt;label for='name' class='control-label'&gt;Name&lt;/label&gt;\n\n            &lt;div class='controls'&gt;\n                &lt;input type='text' id='name' name='name' /&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class='control-group'&gt;\n            &lt;label for='profilesId' class='control-label'&gt;\n                profilesId\n            &lt;/label&gt;\n\n            &lt;div class='controls'&gt;\n                &lt;select id='profilesId' name='profilesId'&gt;\n                    &lt;option value=''&gt;...&lt;/option&gt;\n                    &lt;option value='1'&gt;Vegetables&lt;/option&gt;\n                    &lt;option value='2'&gt;Fruits&lt;/option&gt;\n                &lt;/select&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class='control-group'&gt;\n            &lt;label for='price' class='control-label'&gt;Price&lt;/label&gt;\n\n            &lt;div class='controls'&gt;\n                &lt;input type='text' id='price' name='price' /&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class='control-group'&gt;\n            &lt;input type='submit' \n                   value='Search' \n                   class='btn btn-primary' /&gt;\n        &lt;/div&gt;\n\n    &lt;/fieldset&gt;\n\n&lt;/form&gt;\n</code></pre> <p>When the form is submitted, the <code>search</code> action is executed in the controller performing the search based on the data entered by the user.</p>"},{"location":"tutorial-invo/#search","title":"Search","text":"<p>The <code>search</code> action has two operations. When accessed using the HTTP method <code>POST</code>, it performs the search based on the data sent from the form. When it is accessed using the HTTP method <code>GET</code>, it moves the current page in the paginator. To check which HTTP method has been used, we use the Request component:</p> <pre><code>&lt;?php\n\npublic function searchAction()\n{\n    if ($this-&gt;request-&gt;isPost()) {\n        // POST\n    } else {\n        // GET\n    }\n\n    // ...\n}\n</code></pre> <p>With the help of Phalcon\\Mvc\\Model\\Criteria, we can create the search conditions based on the data types and values sent from the form:</p> <pre><code>&lt;?php\n\n$query = Criteria::fromInput(\n    $this-&gt;di,\n    'Products',\n    $this-&gt;request-&gt;getPost()\n);\n</code></pre> <p>This method verifies which values are different from '' (empty string) and <code>null</code> and takes them into account to create the search criteria:</p> <ul> <li>If the field data type is <code>text</code> or similar (<code>char</code>, <code>varchar</code>, <code>text</code>, etc.) It uses an SQL <code>like</code> operator to filter the results.</li> <li>If the data type is not <code>text</code> or similar, it will use the operator <code>=</code>.</li> </ul> <p>Additionally, <code>Criteria</code> ignores all the <code>$_POST</code> variables that do not match any field in the table. Values are automatically escaped using <code>bound parameters</code>.</p> <p>Now, we store the produced parameters in the controller's session bag:</p> <pre><code>&lt;?php\n\n$this-&gt;persistent-&gt;searchParams = $query-&gt;getParams();\n</code></pre> <p>A session bag, (<code>persistent</code> property) is a special attribute in a controller that persists data between requests using the session service. When accessed, this attribute injects a Phalcon\\Session\\Bag instance that is independent in each controller.</p> <p>Then, based on the built params we perform the query:</p> <pre><code>&lt;?php\n\n$products = Products::find($parameters);\n\nif (count($products) === 0) {\n    $this-&gt;flash-&gt;notice(\n        'The search did not found any products'\n    );\n\n    return $this-&gt;dispatcher-&gt;forward(\n        [\n            'controller' =&gt; 'products',\n            'action'     =&gt; 'index',\n        ]\n    );\n}\n</code></pre> <p>If the search does not return any product, we forward the user to the <code>index</code> action again. If the search returns results, we pass them to a paginator object so that we can navigate through chunks of resultsets:</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Paginator\\Adapter\\Model as Paginator;\n\n// ...\n\n$paginator = new Paginator(\n    [\n        'data'  =&gt; $products,\n        'limit' =&gt; 5,\n        'page'  =&gt; $numberPage,\n    ]\n);\n\n$page = $paginator-&gt;paginate();\n</code></pre> The paginator object receives the results obtained by the search. We also set a limit (results per page) as well as the page number. Finally we call <code>paginate()</code> to get the appropriate chunk of the resultset back.</p> <p>We then pass the returned page to view:</p> <pre><code>&lt;?php\n\n$this-&gt;view-&gt;page = $page;\n</code></pre> <p>In the view (<code>app/views/products/search.volt</code>), we traverse the results corresponding to the current page, showing every row in the current page to the user:</p> <pre><code>{% raw %}\n{% for product in page.items %}\n    {% if loop.first %}\n        &lt;table&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;\n                    &lt;th&gt;Id&lt;/th&gt;\n                    &lt;th&gt;Product Type&lt;/th&gt;\n                    &lt;th&gt;Name&lt;/th&gt;\n                    &lt;th&gt;Price&lt;/th&gt;\n                    &lt;th&gt;Active&lt;/th&gt;\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n    {% endif %}\n\n    &lt;tr&gt;\n        &lt;td&gt;\n            {{ product.id }}\n        &lt;/td&gt;\n\n        &lt;td&gt;\n            {{ product.getProductTypes().name }}\n        &lt;/td&gt;\n\n        &lt;td&gt;\n            {{ product.name }}\n        &lt;/td&gt;\n\n        &lt;td&gt;\n            {{ '%.2f'|format(product.price) }}\n        &lt;/td&gt;\n\n        &lt;td&gt;\n            {{ product.getActiveDetail() }}\n        &lt;/td&gt;\n\n        &lt;td width='7%'&gt;\n            {{ link_to('products/edit/' ~ product.id, 'Edit') }}\n        &lt;/td&gt;\n\n        &lt;td width='7%'&gt;\n            {{ link_to('products/delete/' ~ product.id, 'Delete') }}\n        &lt;/td&gt;\n    &lt;/tr&gt;\n\n    {% if loop.last %}\n            &lt;/tbody&gt;\n            &lt;tbody&gt;\n                &lt;tr&gt;\n                    &lt;td colspan='7'&gt;\n                        &lt;div&gt;\n                            {{ \n                                link_to(\n                                    'products/search', \n                                    'First'\n                                ) \n                            }}\n                            {{ \n                                link_to(\n                                    'products/search?page=' ~ page.previous, \n                                    'Previous'\n                                ) \n                            }}\n                            {{ \n                                link_to(\n                                    'products/search?page=' ~ page.next, \n                                    'Next'\n                                ) \n                            }}\n                            {{ \n                                link_to(\n                                    'products/search?page=' ~ page.last, \n                                    'Last'\n                                ) \n                            }}\n                            &lt;span class='help-inline'&gt;\n                                {{ page.current }} of \n                                {{ page.total_pages }}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    {% endif %}\n{% else %}\n    No products are recorded\n{% endfor %}\n{% endraw %}\n</code></pre> <p>Looking at the code above it is worth mentioning:</p> <p>The active items in the current page are traversed using a Volt's <code>for</code>. Volt provides a simpler syntax for a PHP <code>foreach</code>.</p> <pre><code>{% raw %}\n{% for product in page.items %}\n{% endraw %}\n</code></pre> <p>Which in PHP is the same as:</p> <pre><code>&lt;?php foreach ($page-&gt;items as $product) { ?&gt;\n</code></pre> <p>The whole <code>for</code> block is:</p> <pre><code>{% raw %}\n{% for product in page.items %}\n    {% if loop.first %}\n        // 1\n    {% endif %}\n\n    // 2\n\n    {% if loop.last %}\n        // 3\n    {% endif %}\n{% else %}\n    // 4\n{% endfor %}\n{% endraw %}\n</code></pre> <ul> <li><code>1</code> - Executed before the first product in the loop</li> <li><code>2</code> - Executed for every product of page.items</li> <li><code>3</code> - Executed after the last product in the loop</li> <li><code>4</code> - Executed if page.items does not have any products</li> </ul> <p>Now you can go back to the view and find out what every block is doing. Every field in <code>product</code> is printed accordingly:</p> <pre><code>{% raw %}\n&lt;tr&gt;\n    &lt;td&gt;\n        {{ product.id }}\n    &lt;/td&gt;\n\n    &lt;td&gt;\n        {{ product.productTypes.name }}\n    &lt;/td&gt;\n\n    &lt;td&gt;\n        {{ product.name }}\n    &lt;/td&gt;\n\n    &lt;td&gt;\n        {{ '%.2f'|format(product.price) }}\n    &lt;/td&gt;\n\n    &lt;td&gt;\n        {{ product.getActiveDetail() }}\n    &lt;/td&gt;\n\n    &lt;td width='7%'&gt;\n        {{ link_to('products/edit/' ~ product.id, 'Edit') }}\n    &lt;/td&gt;\n\n    &lt;td width='7%'&gt;\n        {{ link_to('products/delete/' ~ product.id, 'Delete') }}\n    &lt;/td&gt;\n&lt;/tr&gt;\n{% endraw %}\n</code></pre> <p>As we seen before using <code>product.id</code> is the same as in PHP as doing: <code>$product-&gt;id</code>, we made the same with <code>product.name</code> and so on. Other fields are rendered differently, for instance, let's focus in <code>product.productTypes.name</code>. To understand this part, we have to check the Products model (<code>app/models/Products.php</code>):</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\n/**\n * Products\n */\nclass Products extends Model\n{\n    // ...\n\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            'product_types_id',\n            'ProductTypes',\n            'id',\n            [\n                'reusable' =&gt; true,\n            ]\n        );\n    }\n\n    // ...\n}\n</code></pre> <p>A model can have a method called <code>initialize()</code>, this method is called once per request and it serves the ORM to initialize a model. In this case, <code>Products</code> is initialized by defining that this model has a one-to-many relationship to another model called <code>ProductTypes</code>.</p> <p><pre><code>&lt;?php\n\n$this-&gt;belongsTo(\n    'product_types_id',\n    'ProductTypes',\n    'id',\n    [\n        'reusable' =&gt; true,\n    ]\n);\n</code></pre> Which means, the local attribute <code>product_types_id</code> in <code>Products</code> has an one-to-many relation to the <code>ProductTypes</code> model in its attribute <code>id</code>. By defining this relationship we can access the name of the product type by using:</p> <pre><code>{% raw %}\n&lt;td&gt;{{ product.productTypes.name }}&lt;/td&gt;\n{% endraw %}\n</code></pre> <p>The field <code>price</code> is printed by its formatted using a Volt filter:</p> <pre><code>{% raw %}\n&lt;td&gt;{{ '%.2f' | format(product.price) }}&lt;/td&gt;\n{% endraw %}\n</code></pre> <p>In plain PHP, this would be:</p> <pre><code>&lt;?php echo sprintf('%.2f', $product-&gt;price) ?&gt;\n</code></pre> <p>Printing whether the product is active or not uses a helper method:</p> <pre><code>{% raw %}\n&lt;td&gt;{{ product.getActiveDetail() }}&lt;/td&gt;\n{% endraw %}\n</code></pre> <p>This method is implemented in the model.</p>"},{"location":"tutorial-invo/#createupdate","title":"Create/Update","text":"<p>When creating and updating records, we use the <code>new</code> and <code>edit</code> views. The data entered by the user is sent to the <code>create</code> and <code>save</code> actions that perform actions of creating and updating products, respectively.</p> <p>In the creation case, we get the data submitted and assign them to a new <code>Products</code> instance:</p> <p><pre><code>&lt;?php\n\npublic function createAction()\n{\n    if (true !== $this-&gt;request-&gt;isPost()) {\n        return $this-&gt;dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'products',\n                'action'     =&gt; 'index',\n            ]\n        );\n    }\n\n    $form    = new ProductsForm();\n    $product = new Products();\n\n    $product-&gt;id = $this\n        -&gt;request\n        -&gt;getPost('id', 'int')\n    ;\n\n    $product-&gt;product_types_id = $this\n        -&gt;request\n        -&gt;getPost('product_types_id', 'int')\n    ;\n\n    $product-&gt;name = $this\n        -&gt;request\n        -&gt;getPost('name', 'striptags')\n    ;\n\n    $product-&gt;price = $this\n        -&gt;request\n        -&gt;getPost('price', 'double')\n    ;\n\n    $product-&gt;active = $this\n        -&gt;request\n        -&gt;getPost('active')\n    ;\n\n    // ...\n}\n</code></pre> As seen earlier, when we were creating the form, there were some filters assigned to the relevant elements. When the data is passed to the form, these filters are invoked and they sanitize the supplied input. Although this filtering is optional, it is always a good practice. Added to this, the ORM also escapes the supplied data and performs additional casting according to the column types:</p> <pre><code>&lt;?php\n\n// ...\n\n$name = new Text('name');\n$name-&gt;setLabel('Name');\n$name-&gt;setFilters(\n    [\n        'striptags',\n        'string',\n    ]\n);\n\n$name-&gt;addValidators(\n    [\n        new PresenceOf(\n            [\n                'message' =&gt; 'Name is required',\n            ]\n        )\n    ]\n);\n\n$this-&gt;add($name);\n</code></pre> <p>Upon saving the data, we will know whether the business rules and validations implemented in the <code>ProductsForm</code> pass (<code>app/forms/ProductsForm.php</code>):</p> <pre><code>&lt;?php\n\n// ...\n\n$form = new ProductsForm();\n\n$product = new Products();\n\n$data = $this-&gt;request-&gt;getPost();\n\nif (true !== $form-&gt;isValid($data, $product)) {\n    $messages = $form-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        $this-&gt;flash-&gt;error($message-&gt;getMessage());\n    }\n\n    return $this-&gt;dispatcher-&gt;forward(\n        [\n            'controller' =&gt; 'products',\n            'action'     =&gt; 'new',\n        ]\n    );\n}\n</code></pre> <p>Calling <code>$form-&gt;isValid()</code> invokes all the validators set in the form. If the validation does not pass, the <code>$messages</code> variable will contain the relevant messages of the failed validations.</p> <p>If there are no validation errors, we can save the record:</p> <pre><code>&lt;?php\n\n// ...\n\nif ($product-&gt;save() === false) {\n    $messages = $product-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        $this-&gt;flash-&gt;error($message-&gt;getMessage());\n    }\n\n    return $this-&gt;dispatcher-&gt;forward(\n        [\n            'controller' =&gt; 'products',\n            'action'     =&gt; 'new',\n        ]\n    );\n}\n\n$form-&gt;clear();\n\n$this-&gt;flash-&gt;success(\n    'Product was created successfully'\n);\n\nreturn $this-&gt;dispatcher-&gt;forward(\n    [\n        'controller' =&gt; 'products',\n        'action'     =&gt; 'index',\n    ]\n);\n</code></pre> <p>We are checking the result of the <code>save()</code> method on the model and if errors occurred, they will be present in the <code>$messages</code> variable and the user will be sent back to the <code>products/new</code> action with error messages displayed. If everything is OK, the form is cleared and the user is redirected to the <code>products/index</code> with the relevant success message. </p> <p>In the case of updating a product, we must first get the relevant record from the database and then populate the form with the existing data:</p> <pre><code>&lt;?php\n\npublic function editAction($id)\n{\n    if (true !== $this-&gt;request-&gt;isPost()) {\n        $product = Products::findFirstById($id);\n\n        if (null !== $product) {\n            $this-&gt;flash-&gt;error(\n                'Product was not found'\n            );\n\n            return $this-&gt;dispatcher-&gt;forward(\n                [\n                    'controller' =&gt; 'products',\n                    'action'     =&gt; 'index',\n                ]\n            );\n        }\n\n        $this-&gt;view-&gt;form = new ProductsForm(\n            $product,\n            [\n                'edit' =&gt; true,\n            ]\n        );\n    }\n}\n</code></pre> <p>The data found is bound to the form by passing the model as first parameter. Because of this, the user can change any value and then sent it back to the database through to the <code>save</code> action:</p> <pre><code>&lt;?php\n\npublic function saveAction()\n{\n    if (true !== $this-&gt;request-&gt;isPost()) {\n        return $this-&gt;dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'products',\n                'action'     =&gt; 'index',\n            ]\n        );\n    }\n\n    $id      = $this-&gt;request-&gt;getPost('id', 'int');\n    $product = Products::findFirstById($id);\n\n    if (null !== $product) {\n        $this-&gt;flash-&gt;error(\n            'Product does not exist'\n        );\n\n        return $this-&gt;dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'products',\n                'action'     =&gt; 'index',\n            ]\n        );\n    }\n\n    $form = new ProductsForm();\n    $data = $this-&gt;request-&gt;getPost();\n\n    if (true !== $form-&gt;isValid($data, $product)) {\n        $messages = $form-&gt;getMessages();\n\n        foreach ($messages as $message) {\n            $this-&gt;flash-&gt;error($message-&gt;getMessage());\n        }\n\n        return $this-&gt;dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'products',\n                'action'     =&gt; 'new',\n            ]\n        );\n    }\n\n    if (false === $product-&gt;save()) {\n        $messages = $product-&gt;getMessages();\n\n        foreach ($messages as $message) {\n            $this-&gt;flash-&gt;error($message-&gt;getMessage());\n        }\n\n        return $this-&gt;dispatcher-&gt;forward(\n            [\n                'controller' =&gt; 'products',\n                'action'     =&gt; 'new',\n            ]\n        );\n    }\n\n    $form-&gt;clear();\n\n    $this-&gt;flash-&gt;success(\n        'Product was updated successfully'\n    );\n\n    return $this-&gt;dispatcher-&gt;forward(\n        [\n            'controller' =&gt; 'products',\n            'action'     =&gt; 'index',\n        ]\n    );\n}\n</code></pre>"},{"location":"tutorial-invo/#components","title":"Components","text":"<p>The UI has been create with the Bootstrap library. Some elements, such as the navigation bar changes according to the state of the application. For example, in the upper right corner, the link <code>Log in / Sign Up</code> changes to <code>Log out</code> if a user is logged into the application.</p> <p>This part of the application is implemented in the component <code>Elements</code> (<code>app/library/Elements.php</code>).</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\Injectable;\n\nclass Elements extends Injectable\n{\n    public function getMenu()\n    {\n        // ...\n    }\n\n    public function getTabs()\n    {\n        // ...\n    }\n}\n</code></pre> <p>This class extends the Phalcon\\Di\\Injectable. It is not necessary to do so but extending this component allows us to access all the application services. We are going to register this user component in the services container:</p> <pre><code>&lt;?php\n\n$container-&gt;set(\n    'elements',\n    function () {\n        return new Elements();\n    }\n);\n</code></pre> <p>Since this component is registered in the DI container, we can access it directly in the view, using a property with the same name as the one used to register the service:</p> <pre><code>{% raw %}\n&lt;div class='navbar navbar-fixed-top'&gt;\n    &lt;div class='navbar-inner'&gt;\n        &lt;div class='container'&gt;\n            &lt;a class='btn btn-navbar' \n               data-toggle='collapse' \n               data-target='.nav-collapse'&gt;\n                &lt;span class='icon-bar'&gt;&lt;/span&gt;\n                &lt;span class='icon-bar'&gt;&lt;/span&gt;\n                &lt;span class='icon-bar'&gt;&lt;/span&gt;\n            &lt;/a&gt;\n\n            &lt;a class='brand' href='#'&gt;INVO&lt;/a&gt;\n\n            {{ elements.getMenu() }}\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class='container'&gt;\n    {{ content() }}\n\n    &lt;hr&gt;\n\n    &lt;footer&gt;\n        &lt;p&gt;&amp;copy; Company {{ date('Y') }}&lt;/p&gt;\n    &lt;/footer&gt;\n&lt;/div&gt;\n{% endraw %}\n</code></pre> <p>The important part is:</p> <pre><code>{% raw %}\n{{ elements.getMenu() }}\n{% endraw %}\n</code></pre>"},{"location":"tutorial-invo/#dynamic-titles","title":"Dynamic Titles","text":"<p>When you navigate through the application, you will see that the title changes dynamically indicating where we are currently working. This is achieved in each controller (<code>initialize()</code> method):</p> <pre><code>&lt;?php\n\nclass ProductsController extends ControllerBase\n{\n    public function initialize()\n    {\n        $this-&gt;tag-&gt;setTitle(\n            'Manage your product types'\n        );\n\n        parent::initialize();\n    }\n\n    // ...\n}\n</code></pre> <p>Note, that the method <code>parent::initialize()</code> is also called, it adds more data to the title:</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\n\nclass ControllerBase extends Controller\n{\n    protected function initialize()\n    {\n        $this-&gt;tag-&gt;prependTitle('INVO | ');\n    }\n\n    // ...\n}\n</code></pre> The above code prepends the application name to the title</p> <p>Finally, the title is printed in the main view (<code>app/views/index.volt</code>):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;?php echo $this-&gt;tag-&gt;getTitle(); ?&gt;\n    &lt;/head&gt;\n\n    &lt;!-- ... --&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"tutorial-rest-advanced/","title":"Tutorial - REST","text":""},{"location":"tutorial-rest-advanced/#overview","title":"Overview","text":"<p>The <code>REST API</code> application is an application that shows how you can create a RESTful API utilizing Phalcon. In this tutorial, we will use the Micro application. We will also utilize [Phinx][phinx] for our database migrations, [JSON Web Tokens (JWT)][jwt] for authentication as well as [JSON API][jsonapi] for the structured responses.  </p>"},{"location":"tutorial-rest-advanced/#installation","title":"Installation","text":""},{"location":"tutorial-rest-advanced/#structure","title":"Structure","text":""},{"location":"tutorial-rest-advanced/#installation_1","title":"Installation","text":""},{"location":"tutorial-rest-advanced/#dependencies","title":"Dependencies","text":"<p>The application needs a minimum of PHP 7.2 and the following extensions available: - curl - json - iconv - igbinary - mbstring - memcached - opcache - pdo - pdo_mysql - phalcon - session - zip</p> <p>The remaining dependencies for the project are installed using composer.</p>"},{"location":"tutorial-rest-advanced/#providers","title":"Providers","text":"<p>Setting up the </p>"},{"location":"tutorial-rest-advanced/#controllers","title":"Controllers","text":""},{"location":"tutorial-rest-advanced/#models","title":"Models","text":""},{"location":"tutorial-rest-advanced/#routes","title":"Routes","text":"Method Description <code>GET</code> <code>/companies/</code> <code>GET</code> <code>/companies/</code> <code>POST</code> <code>/companies/</code> <code>GET</code> <code>/companies/{recordId:[0-9]+}']</code> <code>GET</code> <code>/companies/{recordId:[0-9]+}/{relationships:[a-zA-Z-,.]+}']</code> <code>GET</code> <code>/companies/{recordId:[0-9]+}/relationships/{relationships:[a-zA-Z-,.]+}'</code> <code>GET</code> <code>/individuals/</code> <code>GET</code> <code>/individuals/{recordId:[0-9]+}']</code> <code>GET</code> <code>/individuals/{recordId:[0-9]+}/{relationships:[a-zA-Z-,.]+}']</code> <code>GET</code> <code>/individuals/{recordId:[0-9]+}/relationships/{relationships:[a-zA-Z-,.]+}'</code> <code>GET</code> <code>/individual-types/</code> <code>GET</code> <code>/individual-types/{recordId:[0-9]+}']</code> <code>GET</code> <code>/individual-types/{recordId:[0-9]+}/{relationships:[a-zA-Z-,.]+}']</code> <code>GET</code> <code>/individual-types/{recordId:[0-9]+}/relationships/{relationships:[a-zA-Z-,.]+}'</code> <code>GET</code> <code>/products/</code> <code>GET</code> <code>/products/{recordId:[0-9]+}']</code> <code>GET</code> <code>/products/{recordId:[0-9]+}/{relationships:[a-zA-Z-,.]+}']</code> <code>GET</code> <code>/products/{recordId:[0-9]+}/relationships/{relationships:[a-zA-Z-,.]+}'</code> <code>GET</code> <code>/product-types/</code> <code>GET</code> <code>/product-types/{recordId:[0-9]+}']</code> <code>GET</code> <code>/product-types/{recordId:[0-9]+}/{relationships:[a-zA-Z-,.]+}']</code> <code>GET</code> <code>/product-types/{recordId:[0-9]+}/relationships/{relationships:[a-zA-Z-,.]+}'</code>"},{"location":"tutorial-rest-advanced/#middleware","title":"Middleware","text":""},{"location":"tutorial-rest-advanced/#404","title":"404","text":""},{"location":"tutorial-rest-advanced/#authentication","title":"Authentication","text":""},{"location":"tutorial-rest-advanced/#tokens","title":"Tokens","text":""},{"location":"tutorial-rest-advanced/#verification","title":"Verification","text":""},{"location":"tutorial-rest-advanced/#validation","title":"Validation","text":""},{"location":"tutorial-rest-advanced/#response","title":"Response","text":""},{"location":"tutorial-rest-advanced/#cli","title":"CLI","text":"<p>In this tutorial, we will explain how to create a simple application that provides a RESTful API using the different HTTP methods:</p> <ul> <li><code>GET</code> to retrieve and search data</li> <li><code>POST</code> to add data</li> <li><code>PUT</code> to update data</li> <li><code>DELETE</code> to delete data</li> </ul>"},{"location":"tutorial-rest-advanced/#defining-the-api","title":"Defining the API","text":"<p>The API consists of the following methods:</p> Method URL Action <code>GET</code> /api/robots Retrieves all robots <code>GET</code> /api/robots/search/Astro Searches for robots with 'Astro' in their name <code>GET</code> /api/robots/2 Retrieves robots based on primary key <code>POST</code> /api/robots Adds a new robot <code>PUT</code> /api/robots/2 Updates robots based on primary key <code>DELETE</code> /api/robots/2 Deletes robots based on primary key"},{"location":"tutorial-rest-advanced/#creating-the-application","title":"Creating the Application","text":"<p>As the application is so simple, we will not implement any full MVC environment to develop it. In this case, we will use a micro application to meet our goal.</p> <p>The following file structure is more than enough:</p> <pre><code>my-rest-api/\n    models/\n        Robots.php\n    index.php\n    .htaccess\n</code></pre> <p>First, we need a <code>.htaccess</code> file that contains all the rules to rewrite the request URIs to the <code>index.php</code> file (application entry-point):</p> <pre><code>&lt;IfModule mod_rewrite.c&gt;\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n&lt;/IfModule&gt;\n</code></pre> <p>The bulk of our code will be placed in <code>index.php</code>. The file is created as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n\n// Define the routes here\n\n$app-&gt;handle(\n    $_SERVER[\"REQUEST_URI\"]\n);\n</code></pre> <p>Now we will create the routes as we defined above:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n\n// Retrieves all robots\n$app-&gt;get(\n    '/api/robots',\n    function () {\n        // Operation to fetch all the robots\n    }\n);\n\n// Searches for robots with $name in their name\n$app-&gt;get(\n    '/api/robots/search/{name}',\n    function ($name) {\n        // Operation to fetch robot with name $name\n    }\n);\n\n// Retrieves robots based on primary key\n$app-&gt;get(\n    '/api/robots/{id:[0-9]+}',\n    function ($id) {\n        // Operation to fetch robot with id $id\n    }\n);\n\n// Adds a new robot\n$app-&gt;post(\n    '/api/robots',\n    function () {\n        // Operation to create a fresh robot\n    }\n);\n\n// Updates robots based on primary key\n$app-&gt;put(\n    '/api/robots/{id:[0-9]+}',\n    function ($id) {\n        // Operation to update a robot with id $id\n    }\n);\n\n// Deletes robots based on primary key\n$app-&gt;delete(\n    '/api/robots/{id:[0-9]+}',\n    function ($id) {\n        // Operation to delete the robot with id $id\n    }\n);\n\n$app-&gt;handle(\n    $_SERVER[\"REQUEST_URI\"]\n);\n</code></pre> <p>Each route is defined with a method with the same name as the HTTP method, as first parameter we pass a route pattern, followed by a handler. In this case, the handler is an anonymous function. The following route: <code>/api/robots/{id:[0-9]+}</code>, by example, explicitly sets that the <code>id</code> parameter must have a numeric format.</p> <p>When a defined route matches the requested URI then the application executes the corresponding handler.</p>"},{"location":"tutorial-rest-advanced/#creating-a-model","title":"Creating a Model","text":"<p>Our API provides information about <code>robots</code>, these data are stored in a database. The following model allows us to access that table in an object-oriented way. We have implemented some business rules using built-in validators and simple validations. Doing this will give us the peace of mind that saved data meet the requirements of our application. This model file should be placed in your <code>Models</code> folder.</p> <pre><code>&lt;?php\n\nnamespace Store\\Toys;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Messages\\Message;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Uniqueness;\nuse Phalcon\\Validation\\Validator\\InclusionIn;\n\nclass Robots extends Model\n{\n    public function validation()\n    {\n        $validator = new Validation();\n\n        // Type must be: droid, mechanical or virtual\n        $validator-&gt;add(\n            \"type\",\n            new InclusionIn(\n                [\n                    'message' =&gt; 'Type must be \"droid\", \"mechanical\", or \"virtual\"',\n                    'domain' =&gt; [\n                        'droid',\n                        'mechanical',\n                        'virtual',\n                    ],\n                ]\n            )\n        );\n\n        // Robot name must be unique\n        $validator-&gt;add(\n            'name',\n            new Uniqueness(\n                [\n                    'field'   =&gt; 'name',\n                    'message' =&gt; 'The robot name must be unique',\n                ]\n            )\n        );\n\n        // Year cannot be less than zero\n        if ($this-&gt;year &lt; 0) {\n            $this-&gt;appendMessage(\n                new Message('The year cannot be less than zero')\n            );\n        }\n\n        // Validate the valididator\n        return $this-&gt;validate($validator);\n    }\n}\n</code></pre> <p>Now, we must set up a connection to be used by this model and load it within our app <code>index.php</code>:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as PdoMysql;\n\n// Use Loader() to autoload our model\n$loader = new Loader();\n\n$loader-&gt;registerNamespaces(\n    [\n        'Store\\Toys' =&gt; __DIR__ . '/models/',\n    ]\n);\n\n$loader-&gt;register();\n\n$di = new FactoryDefault();\n\n// Set up the database service\n$di-&gt;set(\n    'db',\n    function () {\n        return new PdoMysql(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'asimov',\n                'password' =&gt; 'zeroth',\n                'dbname'   =&gt; 'robotics',\n            ]\n        );\n    }\n);\n\n// Create and bind the DI to the application\n$app = new Micro($di);\n</code></pre>"},{"location":"tutorial-rest-advanced/#retrieving-data","title":"Retrieving Data","text":"<p>The first <code>handler</code> that we will implement is which by method GET returns all available robots. Let's use PHQL to perform this simple query returning the results as JSON.</p> <pre><code>&lt;?php\n\n// Retrieves all robots\n$app-&gt;get(\n    '/api/robots',\n    function () use ($app) {\n        $phql = 'SELECT * FROM Store\\Toys\\Robots ORDER BY name';\n\n        $robots = $app-&gt;modelsManager-&gt;executeQuery($phql);\n\n        $data = [];\n\n        foreach ($robots as $robot) {\n            $data[] = [\n                'id'   =&gt; $robot-&gt;id,\n                'name' =&gt; $robot-&gt;name,\n            ];\n        }\n\n        echo json_encode($data);\n    }\n);\n</code></pre> <p>PHQL, allow us to write queries using a high-level, object-oriented SQL dialect that internally translates to the right SQL statements depending on the database system we are using. The clause <code>use</code> in the anonymous function allows us to pass some variables from the global to local scope easily.</p> <p>The searching by name handler would look like:</p> <pre><code>&lt;?php\n\n// Searches for robots with $name in their name\n$app-&gt;get(\n    '/api/robots/search/{name}',\n    function ($name) use ($app) {\n        $phql = 'SELECT * FROM Store\\Toys\\Robots WHERE name LIKE :name: ORDER BY name';\n\n        $robots = $app-&gt;modelsManager-&gt;executeQuery(\n            $phql,\n            [\n                'name' =&gt; '%' . $name . '%'\n            ]\n        );\n\n        $data = [];\n\n        foreach ($robots as $robot) {\n            $data[] = [\n                'id'   =&gt; $robot-&gt;id,\n                'name' =&gt; $robot-&gt;name,\n            ];\n        }\n\n        echo json_encode($data);\n    }\n);\n</code></pre> <p>Searching by the field <code>id</code> it's quite similar, in this case, we're also notifying if the robot was found or not:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n// Retrieves robots based on primary key\n$app-&gt;get(\n    '/api/robots/{id:[0-9]+}',\n    function ($id) use ($app) {\n        $phql = 'SELECT * FROM Store\\Toys\\Robots WHERE id = :id:';\n\n        $robot = $app-&gt;modelsManager-&gt;executeQuery(\n            $phql,\n            [\n                'id' =&gt; $id,\n            ]\n        )-&gt;getFirst();\n\n\n\n        // Create a response\n        $response = new Response();\n\n        if ($robot === false) {\n            $response-&gt;setJsonContent(\n                [\n                    'status' =&gt; 'NOT-FOUND'\n                ]\n            );\n        } else {\n            $response-&gt;setJsonContent(\n                [\n                    'status' =&gt; 'FOUND',\n                    'data'   =&gt; [\n                        'id'   =&gt; $robot-&gt;id,\n                        'name' =&gt; $robot-&gt;name\n                    ]\n                ]\n            );\n        }\n\n        return $response;\n    }\n);\n</code></pre>"},{"location":"tutorial-rest-advanced/#inserting-data","title":"Inserting Data","text":"<p>Taking the data as a JSON string inserted in the body of the request, we also use PHQL for insertion:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n// Adds a new robot\n$app-&gt;post(\n    '/api/robots',\n    function () use ($app) {\n        $robot = $app-&gt;request-&gt;getJsonRawBody();\n\n        $phql = 'INSERT INTO Store\\Toys\\Robots (name, type, year) VALUES (:name:, :type:, :year:)';\n\n        $status = $app-&gt;modelsManager-&gt;executeQuery(\n            $phql,\n            [\n                'name' =&gt; $robot-&gt;name,\n                'type' =&gt; $robot-&gt;type,\n                'year' =&gt; $robot-&gt;year,\n            ]\n        );\n\n        // Create a response\n        $response = new Response();\n\n        // Check if the insertion was successful\n        if ($status-&gt;success() === true) {\n            // Change the HTTP status\n            $response-&gt;setStatusCode(201, 'Created');\n\n            $robot-&gt;id = $status-&gt;getModel()-&gt;id;\n\n            $response-&gt;setJsonContent(\n                [\n                    'status' =&gt; 'OK',\n                    'data'   =&gt; $robot,\n                ]\n            );\n        } else {\n            // Change the HTTP status\n            $response-&gt;setStatusCode(409, 'Conflict');\n\n            // Send errors to the client\n            $errors = [];\n\n            foreach ($status-&gt;getMessages() as $message) {\n                $errors[] = $message-&gt;getMessage();\n            }\n\n            $response-&gt;setJsonContent(\n                [\n                    'status'   =&gt; 'ERROR',\n                    'messages' =&gt; $errors,\n                ]\n            );\n        }\n\n        return $response;\n    }\n);\n</code></pre>"},{"location":"tutorial-rest-advanced/#updating-data","title":"Updating Data","text":"<p>The data update is similar to insertion. The <code>id</code> passed as parameter indicates what robot must be updated:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n// Updates robots based on primary key\n$app-&gt;put(\n    '/api/robots/{id:[0-9]+}',\n    function ($id) use ($app) {\n        $robot = $app-&gt;request-&gt;getJsonRawBody();\n\n        $phql = 'UPDATE Store\\Toys\\Robots SET name = :name:, type = :type:, year = :year: WHERE id = :id:';\n\n        $status = $app-&gt;modelsManager-&gt;executeQuery(\n            $phql,\n            [\n                'id'   =&gt; $id,\n                'name' =&gt; $robot-&gt;name,\n                'type' =&gt; $robot-&gt;type,\n                'year' =&gt; $robot-&gt;year,\n            ]\n        );\n\n        // Create a response\n        $response = new Response();\n\n        // Check if the insertion was successful\n        if ($status-&gt;success() === true) {\n            $response-&gt;setJsonContent(\n                [\n                    'status' =&gt; 'OK'\n                ]\n            );\n        } else {\n            // Change the HTTP status\n            $response-&gt;setStatusCode(409, 'Conflict');\n\n            $errors = [];\n\n            foreach ($status-&gt;getMessages() as $message) {\n                $errors[] = $message-&gt;getMessage();\n            }\n\n            $response-&gt;setJsonContent(\n                [\n                    'status'   =&gt; 'ERROR',\n                    'messages' =&gt; $errors,\n                ]\n            );\n        }\n\n        return $response;\n    }\n);\n</code></pre>"},{"location":"tutorial-rest-advanced/#deleting-data","title":"Deleting Data","text":"<p>The data delete is similar to update. The <code>id</code> passed as parameter indicates what robot must be deleted:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n// Deletes robots based on primary key\n$app-&gt;delete(\n    '/api/robots/{id:[0-9]+}',\n    function ($id) use ($app) {\n        $phql = 'DELETE FROM Store\\Toys\\Robots WHERE id = :id:';\n\n        $status = $app-&gt;modelsManager-&gt;executeQuery(\n            $phql,\n            [\n                'id' =&gt; $id,\n            ]\n        );\n\n        // Create a response\n        $response = new Response();\n\n        if ($status-&gt;success() === true) {\n            $response-&gt;setJsonContent(\n                [\n                    'status' =&gt; 'OK'\n                ]\n            );\n        } else {\n            // Change the HTTP status\n            $response-&gt;setStatusCode(409, 'Conflict');\n\n            $errors = [];\n\n            foreach ($status-&gt;getMessages() as $message) {\n                $errors[] = $message-&gt;getMessage();\n            }\n\n            $response-&gt;setJsonContent(\n                [\n                    'status'   =&gt; 'ERROR',\n                    'messages' =&gt; $errors,\n                ]\n            );\n        }\n\n        return $response;\n    }\n);\n</code></pre>"},{"location":"tutorial-rest-advanced/#creating-database","title":"Creating database","text":"<p>Now we will create database for our application. Run SQL queries as follows: <pre><code>CREATE DATABASE `robotics`;\nCREATE TABLE `robotics`.`robots` (\n `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n `name` varchar(200) COLLATE utf8_bin NOT NULL,\n `type` varchar(200) COLLATE utf8_bin NOT NULL,\n `year` smallint(2) unsigned NOT NULL,\n PRIMARY KEY (`id`)\n)\n</code></pre></p>"},{"location":"tutorial-rest-advanced/#testing-our-application","title":"Testing our Application","text":"<p>Using curl we'll test every route in our application verifying its proper operation.</p> <p>Obtain all the robots:</p> <pre><code>curl -i -X GET https://localhost/my-rest-api/api/robots\n\nHTTP/1.1 200 OK\nDate: Tue, 21 Jul 2015 07:05:13 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 117\nContent-Type: text/html; charset=UTF-8\n\n[{\"id\":\"1\",\"name\":\"Robotina\"},{\"id\":\"2\",\"name\":\"Astro Boy\"},{\"id\":\"3\",\"name\":\"Terminator\"}]\n</code></pre> <p>Search a robot by its name:</p> <pre><code>curl -i -X GET https://localhost/my-rest-api/api/robots/search/Astro\n\nHTTP/1.1 200 OK\nDate: Tue, 21 Jul 2015 07:09:23 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 31\nContent-Type: text/html; charset=UTF-8\n\n[{\"id\":\"2\",\"name\":\"Astro Boy\"}]\n</code></pre> <p>Obtain a robot by its id:</p> <pre><code>curl -i -X GET https://localhost/my-rest-api/api/robots/3\n\nHTTP/1.1 200 OK\nDate: Tue, 21 Jul 2015 07:12:18 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 56\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"FOUND\",\"data\":{\"id\":\"3\",\"name\":\"Terminator\"}}\n</code></pre> <p>Insert a new robot:</p> <pre><code>curl -i -X POST -d '{\"name\":\"C-3PO\",\"type\":\"droid\",\"year\":1977}'\n    https://localhost/my-rest-api/api/robots\n\nHTTP/1.1 201 Created\nDate: Tue, 21 Jul 2015 07:15:09 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 75\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"OK\",\"data\":{\"name\":\"C-3PO\",\"type\":\"droid\",\"year\":1977,\"id\":\"4\"}}\n</code></pre> <p>Try to insert a new robot with the name of an existing robot:</p> <pre><code>curl -i -X POST -d '{\"name\":\"C-3PO\",\"type\":\"droid\",\"year\":1977}'\n    https://localhost/my-rest-api/api/robots\n\nHTTP/1.1 409 Conflict\nDate: Tue, 21 Jul 2015 07:18:28 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 63\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"ERROR\",\"messages\":[\"The robot name must be unique\"]}\n</code></pre> <p>Or update a robot with an unknown type:</p> <pre><code>curl -i -X PUT -d '{\"name\":\"ASIMO\",\"type\":\"humanoid\",\"year\":2000}'\n    https://localhost/my-rest-api/api/robots/4\n\nHTTP/1.1 409 Conflict\nDate: Tue, 21 Jul 2015 08:48:01 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 104\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"ERROR\",\"messages\":[\"Value of field 'type' must be part of\n    list: droid, mechanical, virtual\"]}\n</code></pre> <p>Finally, delete a robot:</p> <pre><code>curl -i -X DELETE https://localhost/my-rest-api/api/robots/4\n\nHTTP/1.1 200 OK\nDate: Tue, 21 Jul 2015 08:49:29 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 15\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"OK\"}\n</code></pre>"},{"location":"tutorial-rest/","title":"Tutorial - REST","text":""},{"location":"tutorial-rest/#overview","title":"Overview","text":"<p>In this tutorial, you will learn how to create a simple application that provides a RESTful API using different HTTP methods:</p> <ul> <li><code>GET</code> to retrieve and search data</li> <li><code>POST</code> to add data</li> <li><code>PUT</code> to update data</li> <li><code>DELETE</code> to delete data</li> </ul> <p>NOTE</p> <p>This is just a sample application. It lacks a lot of features such as authentication, authorization, sanitization of input and error management to name a few. Please use it as a building block for your application, or as a tutorial to understand how you can build a REST API with Phalcon. You can also have a look at the rest-api project. </p>"},{"location":"tutorial-rest/#methods","title":"Methods","text":"<p>The API consists of the following methods:</p> Method URL Action <code>GET</code> <code>/api/robots</code> Get all robots <code>GET</code> <code>/api/robots/search/Astro</code> Searches robots with 'Astro' in their name <code>GET</code> <code>/api/robots/2</code> Get robots based on primary key <code>POST</code> <code>/api/robots</code> Add robot <code>PUT</code> <code>/api/robots/2</code> Update robot based on primary key <code>DELETE</code> <code>/api/robots/2</code> Delete robot based on primary key"},{"location":"tutorial-rest/#application","title":"Application","text":"<p>As the application is simple, we will not implement any full MVC environment to develop it. In this case, we will use a micro application for our needs. The structure of the application is as follows:</p> <pre><code>my-rest-api/\n    models/\n        Robots.php\n    index.php\n    .htaccess\n</code></pre> <p>First, we need a <code>.htaccess</code> file that contains all the rules to rewrite the request URIs to the <code>index.php</code> file (application entry-point):</p> <pre><code>&lt;IfModule mod_rewrite.c&gt;\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n&lt;/IfModule&gt;\n</code></pre> <p>The bulk of our code will be placed in <code>index.php</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n\n$app-&gt;handle(\n    $_SERVER[\"REQUEST_URI\"]\n);\n</code></pre> <p>Now we need to create the routes, so that the application can understand what to do when end users interact with our application. The <code>index.php</code> file changes to:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Micro;\n\n$app = new Micro();\n\n$app-&gt;get(\n    '/api/robots',\n    function () {\n    }\n);\n\n$app-&gt;get(\n    '/api/robots/search/{name}',\n    function ($name) {\n    }\n);\n\n$app-&gt;get(\n    '/api/robots/{id:[0-9]+}',\n    function ($id) {\n    }\n);\n\n$app-&gt;post(\n    '/api/robots',\n    function () {\n    }\n);\n\n$app-&gt;put(\n    '/api/robots/{id:[0-9]+}',\n    function ($id) {\n    }\n);\n\n$app-&gt;delete(\n    '/api/robots/{id:[0-9]+}',\n    function ($id) {\n    }\n);\n\n$app-&gt;handle(\n    $_SERVER[\"REQUEST_URI\"]\n);\n</code></pre> <p>As we add the routes, we use the actual HTTP methods as the names of the methods called in the application object. This allows us to easily define listening points for the application based on those HTTP methods.</p> <p>The first parameter of each method call is the route and the second is the handler i.e. what do we do when the user calls that route. In our example we have anonymous functions defined for each handler. For the following route: </p> <pre><code>/api/robots/{id:[0-9]+}\n</code></pre> <p>we explicitly set the <code>id</code> parameter to be a number. When a defined route matches the requested URI, then the corresponding handler (anonymous function) will be executed.</p>"},{"location":"tutorial-rest/#models","title":"Models","text":"<p>For this application we store and manipulate <code>Robots</code> in the database. To access the table we need a model. The class below, allows us to access each record of the table in an object oriented manner. We have also implemented business rules, using built-in validators. By doing so, we have high confidence that the data saved will meet the requirements of our application. This model file needs to be created in the <code>my-rest-api/models</code> directory.</p> <p><pre><code>&lt;?php\n\nnamespace MyApp\\Models;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Messages\\Message;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Uniqueness;\nuse Phalcon\\Validation\\Validator\\InclusionIn;\n\nclass Robots extends Model\n{\n    public function validation()\n    {\n        $validator = new Validation();\n\n        $validator-&gt;add(\n            \"type\",\n            new InclusionIn(\n                [\n                    'message' =&gt; 'Type must be \"droid\", \"mechanical\", or \"virtual\"',\n                    'domain' =&gt; [\n                        'droid',\n                        'mechanical',\n                        'virtual',\n                    ],\n                ]\n            )\n        );\n\n        $validator-&gt;add(\n            'name',\n            new Uniqueness(\n                [\n                    'field'   =&gt; 'name',\n                    'message' =&gt; 'The robot name must be unique',\n                ]\n            )\n        );\n\n        if ($this-&gt;year &lt; 0) {\n            $this-&gt;appendMessage(\n                new Message('The year cannot be less than zero')\n            );\n        }\n\n        // Validate the validator\n        return $this-&gt;validate($validator);\n    }\n}\n</code></pre> We attach three validators to the model. The first one checks the type of the robot. It must be <code>droid</code>, <code>mechanical</code> or <code>virtual</code>. Any other value will make the validator return <code>false</code> and the operation (insert/update) will fail. The second validator checks the uniqueness of the name for our robot. The last validator checks the <code>year</code> field to be a positive number.</p>"},{"location":"tutorial-rest/#database","title":"Database","text":"<p>We need to connect our application to the database. For this example we are going to use the popular MariaDB or similar variants such as MySQL, Aurora etc. In addition to the database setup, we are going to set up the autoloader, so that our application is aware of where to search for files required. </p> <p>These changes need to be made in the <code>index.php</code> file. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Loader;\nuse Phalcon\\Mvc\\Micro;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as PdoMysql;\n\n$loader = new Loader();\n$loader-&gt;registerNamespaces(\n    [\n        'MyApp\\Models' =&gt; __DIR__ . '/models/',\n    ]\n);\n$loader-&gt;register();\n\n$container = new FactoryDefault();\n$container-&gt;set(\n    'db',\n    function () {\n        return new PdoMysql(\n            [\n                'host'     =&gt; 'localhost',\n                'username' =&gt; 'asimov',\n                'password' =&gt; 'zeroth',\n                'dbname'   =&gt; 'robotics',\n            ]\n        );\n    }\n);\n\n$app = new Micro($container);\n</code></pre>"},{"location":"tutorial-rest/#operations","title":"Operations","text":""},{"location":"tutorial-rest/#get","title":"Get","text":"<p>The first <code>handler</code> that we will implement is the one that retrieves data from the database, when the request is made using the <code>GET</code> HTTP method. The endpoint will return all the records from the database using a PHQL query and returning the results in JSON.</p> <p>The handler for <code>get()</code> and <code>/api/robots</code> becomes: </p> <pre><code>&lt;?php\n\n$app-&gt;get(\n    '/api/robots',\n    function () use ($app) {\n        $phql = 'SELECT id, name '\n              . 'FROM MyApp\\Models\\Robots '\n              . 'ORDER BY name'\n        ;\n\n        $robots = $app\n            -&gt;modelsManager\n            -&gt;executeQuery($phql)\n        ;\n\n        $data = [];\n\n        foreach ($robots as $robot) {\n            $data[] = [\n                'id'   =&gt; $robot-&gt;id,\n                'name' =&gt; $robot-&gt;name,\n            ];\n        }\n\n        echo json_encode($data);\n    }\n);\n</code></pre> <p>PHQL, allows us to write queries using a high level, object oriented SQL dialect, that internally translates your query to the correct SQL statements depending on the database system used. The <code>use</code> statement in the anonymous function offers object injection from the local scope to the anonymous function.</p>"},{"location":"tutorial-rest/#get-text","title":"Get - Text","text":"<p>We can get robots using their name or part of their name. This search feature will also be a <code>get()</code> as far as HTTP method is concerned and it will tie to the <code>/api/robots/search/{name}</code> endpoint. The implementation is similar to the one above. We just need to change the query slightly.</p> <pre><code>&lt;?php\n\n// Searches for robots with $name in their name\n$app-&gt;get(\n    '/api/robots/search/{name}',\n    function ($name) use ($app) {\n        $phql = 'SELECT * '\n              . 'FROM MyApp\\Models\\Robots '\n              . 'WHERE name '\n              . 'LIKE :name: '\n              . 'ORDER BY name'\n        ;\n\n        $robots = $app\n            -&gt;modelsManager\n            -&gt;executeQuery(\n                $phql,\n                [\n                    'name' =&gt; '%' . $name . '%'\n                ]\n            )\n        ;\n\n        $data = [];\n\n        foreach ($robots as $robot) {\n            $data[] = [\n                'id'   =&gt; $robot-&gt;id,\n                'name' =&gt; $robot-&gt;name,\n            ];\n        }\n\n        echo json_encode($data);\n    }\n);\n</code></pre>"},{"location":"tutorial-rest/#get-id","title":"Get - <code>id</code>","text":"<p>To get a robot by using their <code>id</code> is similar to the above operations. We will just need to adjust the query that we run against the database. The HTTP method used will also be <code>get()</code> and the endpoint will be <code>/api/robots/{id:[0-9]+}</code>. For this handler, we are also reporting back if a robot has not been found.</p> <p>The <code>index.php</code> changes again:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n$app-&gt;get(\n    '/api/robots/{id:[0-9]+}',\n    function ($id) use ($app) {\n        $phql = 'SELECT * '\n              . 'FROM MyApp\\Models\\Robots '\n              . 'WHERE id = :id:'\n        ;\n\n        $robot = $app\n            -&gt;modelsManager\n            -&gt;executeQuery(\n                $phql,\n                [\n                    'id' =&gt; $id,\n                ]\n            )\n            -&gt;getFirst()\n        ;\n\n        $response = new Response();\n        if ($robot === false) {\n            $response-&gt;setJsonContent(\n                [\n                    'status' =&gt; 'NOT-FOUND'\n                ]\n            );\n        } else {\n            $response-&gt;setJsonContent(\n                [\n                    'status' =&gt; 'FOUND',\n                    'data'   =&gt; [\n                        'id'   =&gt; $robot-&gt;id,\n                        'name' =&gt; $robot-&gt;name\n                    ]\n                ]\n            );\n        }\n\n        return $response;\n    }\n);\n</code></pre>"},{"location":"tutorial-rest/#insert","title":"Insert","text":"<p>Our design allows users to submit data so that we can insert them in the database. The HTTP method used is <code>post()</code> to the <code>/api/robots</code> endpoint. We expect the data to be submitted as a JSON string.</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n$app-&gt;post(\n    '/api/robots',\n    function () use ($app) {\n        $robot = $app-&gt;request-&gt;getJsonRawBody();\n        $phql  = 'INSERT INTO MyApp\\ModelsRobots '\n               . '(name, type, year) '\n               . 'VALUES '\n               . '(:name:, :type:, :year:)'\n        ;\n\n        $status = $app\n            -&gt;modelsManager\n            -&gt;executeQuery(\n                $phql,\n                [\n                    'name' =&gt; $robot-&gt;name,\n                    'type' =&gt; $robot-&gt;type,\n                    'year' =&gt; $robot-&gt;year,\n                ]\n            )\n        ;\n\n        $response = new Response();\n\n        if ($status-&gt;success() === true) {\n            $response-&gt;setStatusCode(201, 'Created');\n\n            $robot-&gt;id = $status-&gt;getModel()-&gt;id;\n\n            $response-&gt;setJsonContent(\n                [\n                    'status' =&gt; 'OK',\n                    'data'   =&gt; $robot,\n                ]\n            );\n        } else {\n            $response-&gt;setStatusCode(409, 'Conflict');\n\n            $errors = [];\n            foreach ($status-&gt;getMessages() as $message) {\n                $errors[] = $message-&gt;getMessage();\n            }\n\n            $response-&gt;setJsonContent(\n                [\n                    'status'   =&gt; 'ERROR',\n                    'messages' =&gt; $errors,\n                ]\n            );\n        }\n\n        return $response;\n    }\n);\n</code></pre> After we run the query against our database, using PHQL, we create a brand new <code>Response</code> object. If the query was executed correctly, we manipulate the response to have a status code of <code>201</code> and text <code>Created</code>. We finally update the <code>id</code> of the recently created record, and send the robot back with the response.</p> <p>If something is wrong, we change the response status code to <code>409</code> with the text <code>Conflict</code> and collect all the errors that have been produced of the database operation. We then send those error messages back with the response. </p>"},{"location":"tutorial-rest/#update","title":"Update","text":"<p>Updating data is similar to inserting. For this operation we are using the <code>put()</code> HTTP method and the endpoint <code>/api/robots/{id:[0-9]+}</code>. The passed <code>id</code> parameter in the URL is the id of the robot to be updated. The data submitted is in JSON format. </p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n$app-&gt;put(\n    '/api/robots/{id:[0-9]+}',\n    function ($id) use ($app) {\n        $robot = $app-&gt;request-&gt;getJsonRawBody();\n        $phql  = 'UPDATE MyApp\\Models\\Robots '\n               . 'SET name = :name:, type = :type:, year = :year: '\n               . 'WHERE id = :id:';\n\n        $status = $app\n            -&gt;modelsManager\n            -&gt;executeQuery(\n                $phql,\n                [\n                    'id'   =&gt; $id,\n                    'name' =&gt; $robot-&gt;name,\n                    'type' =&gt; $robot-&gt;type,\n                    'year' =&gt; $robot-&gt;year,\n                ]\n            )\n        ;\n\n        $response = new Response();\n\n        if ($status-&gt;success() === true) {\n            $response-&gt;setJsonContent(\n                [\n                    'status' =&gt; 'OK'\n                ]\n            );\n        } else {\n            $response-&gt;setStatusCode(409, 'Conflict');\n\n            $errors = [];\n            foreach ($status-&gt;getMessages() as $message) {\n                $errors[] = $message-&gt;getMessage();\n            }\n\n            $response-&gt;setJsonContent(\n                [\n                    'status'   =&gt; 'ERROR',\n                    'messages' =&gt; $errors,\n                ]\n            );\n        }\n\n        return $response;\n    }\n);\n</code></pre> The operation is very similar to the one we use when inserting data. If the update operation is successful, we send back a JSON payload with <code>OK</code>. </p> <p>If something is wrong, we change the response status code to <code>409</code> with the text <code>Conflict</code> and collect all the errors that have been produced of the database operation. We then send those error messages back with the response. </p>"},{"location":"tutorial-rest/#delete","title":"Delete","text":"<p>Delete is nearly identical to the <code>update</code> process.  For this operation we are using the <code>delete()</code> HTTP method and the endpoint <code>/api/robots/{id:[0-9]+}</code>. The passed <code>id</code> parameter in the URL is the id of the robot to be deleted. </p> <p>The <code>index.php</code> changes again:</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\n\n// Deletes robots based on primary key\n$app-&gt;delete(\n    '/api/robots/{id:[0-9]+}',\n    function ($id) use ($app) {\n        $phql = 'DELETE '\n              . 'FROM MyApp\\Models\\Robots '\n              . 'WHERE id = :id:';\n\n        $status = $app\n            -&gt;modelsManager\n            -&gt;executeQuery(\n                $phql,\n                [\n                    'id' =&gt; $id,\n                ]\n            )\n        ;\n\n        $response = new Response();\n\n        if ($status-&gt;success() === true) {\n            $response-&gt;setJsonContent(\n                [\n                    'status' =&gt; 'OK'\n                ]\n            );\n        } else {\n            $response-&gt;setStatusCode(409, 'Conflict');\n\n            $errors = [];\n            foreach ($status-&gt;getMessages() as $message) {\n                $errors[] = $message-&gt;getMessage();\n            }\n\n            $response-&gt;setJsonContent(\n                [\n                    'status'   =&gt; 'ERROR',\n                    'messages' =&gt; $errors,\n                ]\n            );\n        }\n\n        return $response;\n    }\n);\n</code></pre> If the delete operation is successful, we send back a JSON payload with <code>OK</code>. </p> <p>If something is wrong, we change the response status code to <code>409</code> with the text <code>Conflict</code> and collect all the errors that have been produced of the database operation. We then send those error messages back with the response. </p>"},{"location":"tutorial-rest/#schema","title":"Schema","text":"<p>In order to create the table in our database, we need to use the following SQL queries:</p> <pre><code>create database `robotics`;\n\ncreate table `robotics`.`robots` (\n `id`    int(10)      unsigned         not null auto_increment,\n `name`  varchar(200) collate utf8_bin not null,\n `type`  varchar(20)  collate utf8_bin not null,\n `year`  smallint(4)  unsigned         not null,\n PRIMARY KEY (`id`)\n)\n</code></pre>"},{"location":"tutorial-rest/#run","title":"Run","text":"<p>You can of course set up your web server to run your application. For setup instructions you can check the webserver setup document. If you want to use the built-in PHP server, you will need to create a file called <code>.htrouter</code> as follows: </p> <pre><code>&lt;?php\n\n$uri = urldecode(\n    parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH)\n);\n\nif ($uri !== '/' &amp;&amp; file_exists(__DIR__ . $uri)) {\n    return false;\n}\n\n$_GET['_url'] = $_SERVER['REQUEST_URI'];\n\nrequire_once __DIR__ . '/index.php';\n</code></pre> <p>and then run the following command:</p> <pre><code>$(which php) -S localhost:8000 -t / .htrouter.php\n</code></pre>"},{"location":"tutorial-rest/#tests","title":"Tests","text":"<p>There are numerous testing suites that you can use to test this application. We will use curl on every route, to verify proper operation.</p> <p>Get all the robots:</p> <pre><code>curl -i -X GET https://localhost/my-rest-api/api/robots\n\nHTTP/1.1 200 OK\nDate: Wed, 25 Dec 2019 01:02:03 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 117\nContent-Type: text/html; charset=UTF-8\n\n[{\"id\":\"1\",\"name\":\"Robotina\"},{\"id\":\"2\",\"name\":\"Astro Boy\"},{\"id\":\"3\",\"name\":\"Terminator\"}]\n</code></pre> <p>Search a robot by its name:</p> <pre><code>curl -i -X GET https://localhost/my-rest-api/api/robots/search/Astro\n\nHTTP/1.1 200 OK\nDate: Wed, 25 Dec 2019 01:02:03 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 31\nContent-Type: text/html; charset=UTF-8\n\n[{\"id\":\"2\",\"name\":\"Astro Boy\"}]\n</code></pre> <p>Get a robot by its id:</p> <pre><code>curl -i -X GET https://localhost/my-rest-api/api/robots/3\n\nHTTP/1.1 200 OK\nDate: Wed, 25 Dec 2019 01:02:03 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 56\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"FOUND\",\"data\":{\"id\":\"3\",\"name\":\"Terminator\"}}\n</code></pre> <p>Insert a new robot:</p> <pre><code>curl -i -X POST -d '{\"name\":\"C-3PO\",\"type\":\"droid\",\"year\":1977}' \\\n    https://localhost/my-rest-api/api/robots\n\nHTTP/1.1 201 Created\nDate: Wed, 25 Dec 2019 01:02:03 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 75\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"OK\",\"data\":{\"name\":\"C-3PO\",\"type\":\"droid\",\"year\":1977,\"id\":\"4\"}}\n</code></pre> <p>Try to insert a new robot with the name of an existing robot:</p> <pre><code>curl -i -X POST -d '{\"name\":\"C-3PO\",\"type\":\"droid\",\"year\":1977}' \\\n    https://localhost/my-rest-api/api/robots\n\nHTTP/1.1 409 Conflict\nDate: Wed, 25 Dec 2019 01:02:03 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 63\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"ERROR\",\"messages\":[\"The robot name must be unique\"]}\n</code></pre> <p>Update a robot with an unknown type:</p> <pre><code>curl -i -X PUT -d '{\"name\":\"ASIMO\",\"type\":\"humanoid\",\"year\":2000}' \\\n    https://localhost/my-rest-api/api/robots/4\n\nHTTP/1.1 409 Conflict\nDate: Wed, 25 Dec 2019 01:02:03 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 104\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"ERROR\",\"messages\":[\"Value of field 'type' must be part of\n    list: droid, mechanical, virtual\"]}\n</code></pre> <p>Delete a robot:</p> <pre><code>curl -i -X DELETE https://localhost/my-rest-api/api/robots/4\n\nHTTP/1.1 200 OK\nDate: Wed, 25 Dec 2019 01:02:03 GMT\nServer: Apache/2.2.22 (Unix) DAV/2\nContent-Length: 15\nContent-Type: text/html; charset=UTF-8\n\n{\"status\":\"OK\"}\n</code></pre>"},{"location":"tutorial-vokuro/","title":"Tutorial - V\u00f6kur\u00f3","text":""},{"location":"tutorial-vokuro/#vokuro","title":"V\u00f6kur\u00f3","text":"<p>V\u00f6kur\u00f3 is a sample application, showcasing a typical web application written in Phalcon. This application focuses on: - User Login (security.md) - User Signup (security.md) - User Permissions - User management</p> <p>NOTE</p> <p>You can use V\u00f6kur\u00f3 as a starting point for your application and enhance it further to meet your needs. By no means this is a perfect application and it does not fit all needs.</p> <p>NOTE</p> <p>This tutorial assumes that you are familiar with the concepts of the Model View Controller design pattern. (see References at the end of this tutorial)</p> <p>NOTE</p> <p>Note the code below has been formatted to increase readability</p>"},{"location":"tutorial-vokuro/#installation","title":"Installation","text":""},{"location":"tutorial-vokuro/#downloading","title":"Downloading","text":"<p>In order to install the application, you can either clone or download it from GitHub. You can visit the GitHub page, download the application and then unzip it to a directory on your machine. Alternatively you can use <code>git clone</code>:</p> <pre><code>git clone https://github.com/phalcon/vokuro\n</code></pre>"},{"location":"tutorial-vokuro/#extensions","title":"Extensions","text":"<p>There are some prerequisites for the V\u00f6kur\u00f3 to run. You will need to have PHP &gt;= 7.2 installed on your machine and the following extensions: - ctype - curl - dom - json - iconv - mbstring - memcached - opcache - openssl - pdo - pdo_mysql - psr - session - simplexml - xml - xmlwriter</p> <p>Phalcon needs to be installed. Head over to the installation page if you need help with installing Phalcon. Note that Phalcon v4 requires the PSR extension to be installed and loaded before Phalcon. To install PSR you can check the php-psr GitHub page. </p> <p>Finally, you will also need to ensure that you have updated the composer packages (see section below).</p>"},{"location":"tutorial-vokuro/#run","title":"Run","text":"<p>If all the above requirements are satisfied, you can run the application using PHP's built-in web server by issuing the following command on a terminal:</p> <pre><code>php -S localhost:8080 -t public/ .htrouter.php\n</code></pre> <p>The above command will start serving the site for <code>localhost</code> at the port <code>8080</code>. You can change those settings to suit your needs. Alternatively you can set up your site in Apache or nginX using a virtual host. Please consult the relevant documentation on how to set up a virtual host for these web servers.</p>"},{"location":"tutorial-vokuro/#docker","title":"Docker","text":"<p>In the <code>resources</code> folder you will find a <code>Dockerfile</code> which allows you to quickly set up the environment and run the application. To use the <code>Dockerfile</code> we need to decide the name of our dockerized application. For the purposes of this tutorial, we will use <code>phalcon-tutorial-vokuro</code>.</p> <p>From the root of the application we need to compile the project (you only need to do this once):</p> <pre><code>$ docker build -t phalcon-tutorial-vokuro -f docker/Dockerfile .\n</code></pre> <p>and then run it</p> <pre><code>$ docker run -it --rm phalcon-tutorial-vokuro bash\n</code></pre> <p>This will enter us in the dockerized environment. To check the PHP version:</p> <pre><code>root@c7b43060b115:/code $ php -v\n\nPHP 7.3.9 (cli) (built: Sep 12 2019 10:08:33) ( NTS )\nCopyright (c) 1997-2018 The PHP Group\nZend Engine v3.3.9, Copyright (c) 1998-2018 Zend Technologies\n    with Zend OPcache v7.3.9, Copyright (c) 1999-2018, by Zend Technologies\n</code></pre> <p>and Phalcon:</p> <pre><code>root@c7b43060b115:/code $ php -r 'echo Phalcon\\Version::get();'\n\n4.0.0\n</code></pre> <p>You now have a dockerized environment with all the necessary components to run V\u00f6kur\u00f3.</p>"},{"location":"tutorial-vokuro/#structure","title":"Structure","text":"<p>Looking at the structure of the application we have the following:</p> <pre><code>vokuro/\n    .ci\n    configs\n    db\n        migrations\n        seeds\n    public\n    resources\n    src\n        Controllers\n        Forms\n        Models\n        Phalcon\n        Plugins\n        Providers\n    tests\n    themes\n        vokuro\n    var\n        cache\n            acl\n            metaData\n            session\n            volt\n        logs\n    vendor\n</code></pre> Directory Description <code>.ci</code> Files necessary for setting services for the CI <code>configs</code> Configuration files <code>db</code> Holds the migrations for the database <code>public</code> Entry point for the application, css, js, images <code>resources</code> Docker/nanobox files for setting the application <code>src</code> Where the application lives (controllers, forms etc.) <code>src/Controllers</code> Controllers <code>src/Forms</code> Forms <code>src/Models</code> Database Models <code>src/Plugins</code> Plugins <code>src/Providers</code> Providers: setting services in the DI container <code>tests</code> Tests <code>themes</code> Themes/views for easy customization <code>themes/vokuro</code> Default theme for the application <code>var</code> Various supporting files <code>var/cache</code> Cache files <code>var/logs</code> Logs <code>vendor</code> Vendor/composer based libraries"},{"location":"tutorial-vokuro/#configuration","title":"Configuration","text":""},{"location":"tutorial-vokuro/#env","title":"<code>.env</code>","text":"<p>V\u00f6kur\u00f3 uses the popular Dotenv library by Vance Lucas. The library utilizes a <code>.env</code> file located in your root folder, which holds configuration parameters such as the database server host, username, password etc. There is a <code>.env.example</code> file that comes with V\u00f6kur\u00f3 that you can copy and rename to <code>.env</code> and then edit it to match your environment. You need to do this first so that your application can run properly.</p> <p>The available options are:</p> Option Description <code>APP_CRYPT_SALT</code> Random and long string that is used by the Phalcon\\Crypt component to produce passwords and any additional security features <code>APP_BASE_URI</code> Usually <code>/</code> if your web server points directly to the V\u00f6kur\u00f3 directory. If you have installed V\u00f6kur\u00f3 in a sub directory, you can adjust the base URI <code>APP_PUBLIC_URL</code> The public URL of the application. This is used for the emails. <code>DB_ADAPTER</code> The database adapter. The available adapters are: <code>mysql</code>, <code>pgsql</code>, <code>sqlite</code>. Please ensure that the relevant extensions for the database are installed in your system. <code>DB_HOST</code> The database host <code>DB_PORT</code> The database port <code>DB_USERNAME</code> The database username <code>DB_PASSWORD</code> The database password <code>DB_NAME</code> The database name <code>MAIL_FROM_NAME</code> The FROM name when sending emails <code>MAIL_FROM_EMAIL</code> The FROM email when sending emails <code>MAIL_SMTP_SERVER</code> The SMTP server <code>MAIL_SMTP_PORT</code> The SMTP port <code>MAIL_SMTP_SECURITY</code> The SMTP security (e.g. <code>tls</code>) <code>MAIL_SMTP_USERNAME</code> The SMTP username <code>MAIL_SMTP_PASSWORD</code> The SMTP password <code>CODECEPTION_URL</code> The Codeception server for tests. If you run the tests locally this should be <code>127.0.0.1</code> <code>CODECEPTION_PORT</code> The Codeception port <p>Once the configuration file is in place, visiting the IP address will present a screen similar to this:</p> <p></p>"},{"location":"tutorial-vokuro/#database","title":"<code>Database</code>","text":"<p>You also need to initialize the database. V\u00f6kur\u00f3 uses the popular library Phinx by Rob Morgan (now the Cake Foundation). The library uses its own configuration file (<code>phinx.php</code>), but for V\u00f6kur\u00f3 you don't need to adjust any settings since <code>phinx.php</code> reads the <code>.env</code> file to retrieve the configuration settings. This allows you to set your configuration parameters in one place.</p> <p>We will now need to run the migrations. To check the status of our database:</p> <pre><code>/app $ ./vendor/bin/phinx status\n</code></pre> <p>You will see the following screen:</p> <p></p> <p>To initialize the database we need to run the migrations:</p> <pre><code>/app $ ./vendor/bin/phinx migrate\n</code></pre> <p>The screen will show the operation:</p> <p></p> <p>And the <code>status</code> command will now show all green:</p> <p></p>"},{"location":"tutorial-vokuro/#config","title":"Config","text":"<p>acl.php</p> <p>Looking at the <code>config/</code> folder, you will notice four files. There is no need for you to change these files to start the application but if you wish to customize it, this is the place to visit. The <code>acl.php</code> file returns an array of routes that controls which routes are visible to only logged in users.</p> <p>The current setup will require a user to be logged in, if they visit these routes:</p> <ul> <li><code>users/index</code></li> <li><code>users/search</code></li> <li><code>users/edit</code></li> <li><code>users/create</code></li> <li><code>users/delete</code></li> <li><code>users/changePassword</code></li> <li><code>profiles/index</code></li> <li><code>profiles/search</code></li> <li><code>profiles/edit</code></li> <li><code>profiles/create</code></li> <li><code>profiles/delete</code></li> <li><code>permissions/index</code></li> </ul> <p>If you use V\u00f6kur\u00f3 as a starting point for your own application, you will need to modify this file to add or remove routes so as to ensure that your protected routes are behind the login mechanism. </p> <p>NOTE</p> <p>Keeping the private routes in an array is efficient and easy to maintain for a small to medium application. Once your application starts growing, you might need to consider a different technique to keep your private routes such as the database with a caching mechanism.</p> <p>config.php</p> <p>This file holds all configuration parameters that V\u00f6kur\u00f3 needs. Usually you will not need to change this file, since the elements of the array are set by the <code>.env</code> file and Dotenv. However, you might want to change the location of your logs or other paths, should you decide to change the directory structure.</p> <p>One of the elements you might want to consider when working with V\u00f6kur\u00f3 on your local machine is the <code>useMail</code> and set it to <code>false</code>. This will instruct V\u00f6kur\u00f3 not to try to connect to a mail server and send an email when a user registers on the site. </p> <p>providers.php</p> <p>This file contains all the providers that V\u00f6kur\u00f3 needs. This is a list of classes in the application, that registers the particular class in the DI container. If you need to register new components to your DI container, you can add them to the array of this file.</p> <p>routes.php</p> <p>This file contains the routes that V\u00f6kur\u00f3 understands. The router already registers the default routes, so any routes defined in <code>routes.php</code> are specific ones. You can add any non standard routes you need, when customizing V\u00f6kur\u00f3, in this file. As a reminder, the default routes are:</p> <pre><code>/:controller/:action/:parameters\n</code></pre>"},{"location":"tutorial-vokuro/#providers","title":"Providers","text":"<p>As mentioned above, V\u00f6kur\u00f3 uses classes called Providers in order to register services in the DI container. This is just one way to register services in the DI container, nothing stops you from putting all these registrations in a single file.</p> <p>For V\u00f6kur\u00f3 we decided to use one file per service as well as a <code>providers.php</code> (see above) as the registration configuration array for these services. This allows us to have much smaller chunks of code, organized in a separate file per service, as well as an array that allows us to register or unregister/disable a service without removing files. All we need to do is change the <code>providers.php</code> array.</p> <p>The provider classes are located in <code>src/Providers</code>. Each of the provider classes implements the Phalcon\\Di\\ServiceProviderInterface interface. For more information, see the bootstrapping section below.</p>"},{"location":"tutorial-vokuro/#composer","title":"Composer","text":"<p>V\u00f6kur\u00f3 uses composer to download and install supplemental PHP libraries. The libraries used are:</p> <ul> <li>Dotenv</li> <li>Phinx</li> <li>Swift Mailer</li> </ul> <p>Looking at <code>composer.json</code> the required packages are:</p> <pre><code>\"require\": {\n    \"php\": \"&gt;=7.2\",\n    \"ext-openssl\": \"*\",\n    \"ext-phalcon\": \"~4.0.0-beta.2\",\n    \"robmorgan/phinx\": \"^0.11.1\",\n    \"swiftmailer/swiftmailer\": \"^5.4\",\n    \"vlucas/phpdotenv\": \"^3.4\"\n}\n</code></pre> <p>If this is a fresh installation you can run </p> <pre><code>composer install\n</code></pre> <p>or if you want to upgrade the existing installations of the above packages:</p> <pre><code>composer update\n</code></pre> <p>For more information about composer, you can visit their documentation page.</p>"},{"location":"tutorial-vokuro/#bootstrapping","title":"Bootstrapping","text":""},{"location":"tutorial-vokuro/#entry","title":"Entry","text":"<p>The entry point of our application is <code>public/index.php</code>. This file contains the necessary code that bootstraps the application and runs it. It also serves as a single point of entry to our application, making things much easier for us when we want to trap errors, protect files etc.</p> <p>Let's look at the code:</p> <pre><code>&lt;?php\n\nuse Vokuro\\Application as VokuroApplication;\n\nerror_reporting(E_ALL);\n$rootPath = dirname(__DIR__);\n\ntry {\n    require_once $rootPath . '/vendor/autoload.php';\n\n    /**\n     * Load .env configurations\n     */\n    Dotenv\\Dotenv::create($rootPath)-&gt;load();\n\n    /**\n     * Run V\u00f6kur\u00f3!\n     */\n    echo (new VokuroApplication($rootPath))-&gt;run();\n} catch (Exception $e) {\n    echo $e-&gt;getMessage(), '&lt;br&gt;';\n    echo nl2br(htmlentities($e-&gt;getTraceAsString()));\n}\n</code></pre> <p>First of all we ensure that we have full error reporting. You can of course change this if you wish, or rework the code where error reporting is controlled by an entry in your <code>.env</code> file.</p> <p>A <code>try</code>/<code>catch</code> block wraps all operations. This ensures that all errors are caught and displayed on screen.</p> <p>NOTE</p> <p>You will need to rework the code to enhance security. Currently, if an error happens with the database, the <code>catch</code> code will echo on screen the database credentials with the exception. This code is intended as a tutorial not a full scale production application</p> <p>We ensure that we have access to all the supporting libraries by loading composer's autoloader. In the <code>composer.json</code> we have also defined the <code>autoload</code> entry, directing the autoloader to load any <code>Vokuro</code> namespaced classes from the <code>src</code> folder.</p> <pre><code>\"autoload\": {\n    \"psr-4\": {\n        \"Vokuro\\\\\": \"app/\"\n    },\n    \"files\": [\n        \"app/Helpers.php\"\n    ]\n}\n</code></pre> <p>Then we load the environment variables as defined in our <code>.env</code> file by calling the </p> <pre><code>Dotenv\\Dotenv::create($rootPath)-&gt;load();\n</code></pre> <p>Finally, we run our application.</p>"},{"location":"tutorial-vokuro/#application","title":"Application","text":"<p>All the application logic is wrapped in the <code>Vokuro\\Application</code> class. Let's see how this is done:</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nnamespace Vokuro;\n\nuse Exception;\nuse Phalcon\\Application\\AbstractApplication;\nuse Phalcon\\Di\\DiInterface;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Di\\ServiceProviderInterface;\nuse Phalcon\\Mvc\\Application as MvcApplication;\n\n/**\n * V\u00f6kur\u00f3 Application\n */\nclass Application\n{\n    const APPLICATION_PROVIDER = 'bootstrap';\n\n    /**\n     * @var AbstractApplication\n     */\n    protected $app;\n\n    /**\n     * @var DiInterface\n     */\n    protected $di;\n\n    /**\n     * Project root path\n     *\n     * @var string\n     */\n    protected $rootPath;\n\n    /**\n     * @param string $rootPath\n     *\n     * @throws Exception\n     */\n    public function __construct(string $rootPath)\n    {\n        $this-&gt;di       = new FactoryDefault();\n        $this-&gt;app      = $this-&gt;createApplication();\n        $this-&gt;rootPath = $rootPath;\n\n        $this-&gt;di-&gt;setShared(self::APPLICATION_PROVIDER, $this);\n\n        $this-&gt;initializeProviders();\n    }\n\n    /**\n     * Run V\u00f6kur\u00f3 Application\n     *\n     * @return string\n     * @throws Exception\n     */\n    public function run(): string\n    {\n        return (string) $this\n            -&gt;app\n            -&gt;handle($_SERVER['REQUEST_URI'])\n            -&gt;getContent()\n        ;\n    }\n\n    /**\n     * Get Project root path\n     *\n     * @return string\n     */\n    public function getRootPath(): string\n    {\n        return $this-&gt;rootPath;\n    }\n\n    /**\n     * @return AbstractApplication\n     */\n    protected function createApplication(): AbstractApplication\n    {\n        return new MvcApplication($this-&gt;di);\n    }\n\n    /**\n     * @throws Exception\n     */\n    protected function initializeProviders(): void\n    {\n        $filename = $this-&gt;rootPath \n                 . '/configs/providers.php';\n        if (!file_exists($filename) || !is_readable($filename)) {\n            throw new Exception(\n                'File providers.php does not exist or is not readable.'\n            );\n        }\n\n        $providers = include_once $filename;\n        foreach ($providers as $providerClass) {\n            /** @var ServiceProviderInterface $provider */\n            $provider = new $providerClass;\n            $provider-&gt;register($this-&gt;di);\n        }\n    }\n}\n</code></pre> <p>The constructor of the class first creates a new DI container and store it in a local property. We are using the Phalcon\\Di\\FactoryDefault one, which has a lot of services already registered for us. </p> <p>We then create a new Phalcon\\Mvc\\Application and store it in a property also. We also store the root path because it is useful throughout the application.</p> <p>We then register this class (the <code>Vokuro\\Application</code>) in the Di container using the name <code>bootstrap</code>. This allows us to have access to this class from any part of our application through the Di container.</p> <p>The last thing we do is to register all the providers. Although the Phalcon\\Di\\FactoryDefault object has a lot of services already registered for us, we still need to register providers that suit the needs of our application. As mentioned above, each provider class implements the Phalcon\\Di\\ServiceProviderInterface interface, so we can load each class and call the <code>register()</code> method with the Di container to register each service. We therefore first load the configuration array <code>config/providers.php</code> and then loop through the entries and register each provider in turn.</p> <p>The available providers are:</p> Provider Description <code>AclProvider</code> Permissions <code>AuthProvider</code> Authentication <code>ConfigProvider</code> Configuration values <code>CryptProvider</code> Encryption <code>DbProvider</code> Database access <code>DispatcherProvider</code> Dispatcher - what controller to call for what URL <code>FlashProvider</code> Flash messages for feedback to the user <code>LoggerProvider</code> Logger for errors and other information <code>MailProvider</code> Mail support <code>ModelsMetadataProvider</code> Metadata for models <code>RouterProvider</code> Routes <code>SecurityProvider</code> Security <code>SessionBagProvider</code> Session data <code>SessionProvider</code> Session data <code>UrlProvider</code> URL handling <code>ViewProvider</code> Views and view engine <p><code>run()</code> will now handle the <code>REQUEST_URI</code>, handle it and return the content back. Internally the application will calculate the route based on the request, and dispatch the relevant controller and view before returning the result of this operation back to the user as a response.</p>"},{"location":"tutorial-vokuro/#database_1","title":"Database","text":"<p>As mentioned above, V\u00f6kur\u00f3 can be installed with MariaDB/MySQL/Aurora, PostgreSql or SQLite as the database store. For the purposes of this tutorial, we are using MariaDB. The tables that the application uses are:</p> Table Description <code>email_confirmations</code> Email confirmations for registration <code>failed_logins</code> Failed login attempts <code>password_changes</code> When a password was changed and by whom <code>permissions</code> Permission matrix <code>phinxlog</code> Phinx migration table <code>profiles</code> Profile for each user <code>remember_tokens</code> Remember Me functionality tokens <code>reset_passwords</code> Reset password tokens table <code>success_logins</code> Successful login attempts <code>users</code> Users"},{"location":"tutorial-vokuro/#models","title":"Models","text":"<p>Following the Model-View-Controller pattern, V\u00f6kur\u00f3 has one model per database table (excluding the <code>phinxlog</code>). The models allow us to interact with the database tables in an easy object oriented manner. The models are located in the <code>/src/Models</code> directory, and each model defines the relevant fields, source table as well as any relationships between the model and others. Some models also implement validation rules to ensure that data is stored properly in the database.</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nnamespace Vokuro\\Models;\n\nuse Phalcon\\Mvc\\Model;\n\n/**\n * SuccessLogins\n *\n * This model registers successfully logins registered users have made\n */\nclass SuccessLogins extends Model\n{\n    /**\n     * @var integer\n     */\n    public $id;\n\n    /**\n     * @var integer\n     */\n    public $usersId;\n\n    /**\n     * @var string\n     */\n    public $ipAddress;\n\n    /**\n     * @var string\n     */\n    public $userAgent;\n\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            'usersId', \n            Users::class, \n            'id', \n            [\n                'alias' =&gt; 'user',\n            ]\n        );\n    }\n}\n</code></pre> <p>In the model above, we have defined all the fields of the table as public properties for easy access:</p> <pre><code>echo $successLogin-&gt;ipAddress;\n</code></pre> <p>NOTE</p> <p>If you notice, the property names map exactly the case (upper/lower) of the field names in the relevant table.</p> <p>In the <code>initialize()</code> method, we also define a relationship between this model and the <code>Users</code> model. We assign the fields (local/remote) as well as an <code>alias</code> for this relationship. We can therefore access the user related to a record of this model as follows:</p> <pre><code>echo $successLogin-&gt;user-&gt;name;\n</code></pre> <p>NOTE</p> <p>Feel free to open each model file and identify the relationships between the models. Check our documentation for the difference between various types of relationships</p>"},{"location":"tutorial-vokuro/#controllers","title":"Controllers","text":"<p>Again following the Model-View-Controller pattern, V\u00f6kur\u00f3 has one controller to handle a specific parent route. This means that the <code>AboutController</code> handles the <code>/about</code> route. All controllers are located in the <code>/src/Cotnrollers</code> directory. </p> <p>The default controller is <code>IndexController</code>. All controller classes have the suffix <code>Controller</code>. Each controller has methods suffixed with <code>Action</code> and the default action is <code>indexAction</code>. Therefore if you visit the site with just the URL, the <code>IndexController</code> will be called and the <code>indexAction</code> will be executed.</p> <p>After that, unless you have registered specific routes, the default routes (automatically registered) will try to match:</p> <pre><code>/profiles/search\n</code></pre> <p>to</p> <pre><code>/src/Controllers/ProfilesController.php -&gt; searchAction\n</code></pre> <p>The available controllers, actions and routes for V\u00f6kur\u00f3 are:</p> Controller Action Route Description <code>About</code> <code>index</code> <code>/about</code> Shows the <code>about</code> page <code>Index</code> <code>index</code> <code>/</code> Default action - home page <code>Permissions</code> <code>index</code> <code>/permissions</code> View/change permissions for a profile level <code>Privacy</code> <code>index</code> <code>/privacy</code> View the privacy page <code>Profiles</code> <code>index</code> <code>/profiles</code> View profiles default page <code>Profiles</code> <code>create</code> <code>/profiles/create</code> Create profile <code>Profiles</code> <code>delete</code> <code>/profiles/delete</code> Delete profile <code>Profiles</code> <code>edit</code> <code>/profiles/edit</code> Edit profile <code>Profiles</code> <code>search</code> <code>/profiles/search</code> Search profiles <code>Session</code> <code>index</code> <code>/session</code> Session default action <code>Session</code> <code>forgotPassword</code> <code>/session/forgotPassword</code> Forget password <code>Session</code> <code>login</code> <code>/session/login</code> Login <code>Session</code> <code>logout</code> <code>/session/logout</code> Logout <code>Session</code> <code>signup</code> <code>/session/signup</code> Signup <code>Terms</code> <code>index</code> <code>/terms</code> View the terms page <code>UserControl</code> <code>confirmEmail</code> <code>/confirm</code> Confirm email <code>UserControl</code> <code>resetPassword</code> <code>/reset-password</code> Reset password <code>Users</code> <code>index</code> <code>/users</code> Users default screen <code>Users</code> <code>changePassword</code> <code>/users/changePassword</code> Change user password <code>Users</code> <code>create</code> <code>/users/create</code> Create user <code>Users</code> <code>delete</code> <code>/users/delete</code> Delete user <code>Users</code> <code>edit</code> <code>/users/edit</code> Edit user"},{"location":"tutorial-vokuro/#views","title":"Views","text":"<p>The last element of the Model-View-Controller pattern is the views. V\u00f6kur\u00f3 uses Volt as the view engine for its views.</p> <p>NOTE</p> <p>Generally, one would expect to see a <code>views</code> folder under the <code>/src</code> folder. V\u00f6kur\u00f3 uses a slightly different approach, storing all the view files under <code>/themes/vokuro</code>. </p> <p>The views directory contains directories that map to each controller. Inside each of those directories, <code>.volt</code> files are mapped to each action. So for example the route:</p> <pre><code>/profiles/create\n</code></pre> <p>maps to:</p> <pre><code>ProfilesController -&gt; createAction\n</code></pre> <p>and the view is located:</p> <pre><code>/themes/vokuro/profiles/create.volt\n</code></pre> <p>The available views are:</p> Controller Action View Description <code>About</code> <code>index</code> <code>/about/index.volt</code> Shows the <code>about</code> page <code>Index</code> <code>index</code> <code>/index/index.volt</code> Default action - home page <code>Permissions</code> <code>index</code> <code>/permissions/index.volt</code> View/change permissions for a profile level <code>Privacy</code> <code>index</code> <code>/privacy/index.volt</code> View the privacy page <code>Profiles</code> <code>index</code> <code>/profiles/index.volt</code> View profiles default page <code>Profiles</code> <code>create</code> <code>/profiles/create.volt</code> Create profile <code>Profiles</code> <code>delete</code> <code>/profiles/delete.volt</code> Delete profile <code>Profiles</code> <code>edit</code> <code>/profiles/edit.volt</code> Edit profile <code>Profiles</code> <code>search</code> <code>/profiles/search.volt</code> Search profiles <code>Session</code> <code>index</code> <code>/session/index.volt</code> Session default action <code>Session</code> <code>forgotPassword</code> <code>/session/forgotPassword.volt</code> Forget password <code>Session</code> <code>login</code> <code>/session/login.volt</code> Login <code>Session</code> <code>logout</code> <code>/session/logout.volt</code> Logout <code>Session</code> <code>signup</code> <code>/session/signup.volt</code> Signup <code>Terms</code> <code>index</code> <code>/terms/index.volt</code> View the terms page <code>Users</code> <code>index</code> <code>/users/index.volt</code> Users default screen <code>Users</code> <code>changePassword</code> <code>/users/changePassword.volt</code> Change user password <code>Users</code> <code>create</code> <code>/users/create.volt</code> Create user <code>Users</code> <code>delete</code> <code>/users/delete.volt</code> Delete user <code>Users</code> <code>edit</code> <code>/users/edit.volt</code> Edit user <p>The <code>/index.volt</code> file contains the main layout of the page, including stylesheets, javascript references etc. The <code>/layouts</code> directory contains different layouts that are used in the application, for instance a <code>public</code> one if the user is not logged in, and a <code>private</code> one for logged in users. The individual views are injected into the layouts and construct the final page.</p>"},{"location":"tutorial-vokuro/#components","title":"Components","text":"<p>There are several components that we use in V\u00f6kur\u00f3, offering functionality throughout the application. All these components are located in the <code>/src/Plugins</code> directory.</p>"},{"location":"tutorial-vokuro/#acl","title":"Acl","text":"<p><code>Vokuro\\Plugins\\Acl\\Acl</code> is a component that implements an Access Control List for our application. The ACL controls which user has access to which resources. You can read more about ACL in our dedicated page.</p> <p>In this component, We define the resources that are considered private. These are held in an internal array with controller as the key and action as the value, and identify which controller/actions require authentication. It also holds human readable descriptions for actions used throughout the application.</p> <p>The component exposes the following methods:</p> Method Returns Description <code>getActionDescription($action)</code> <code>string</code> Returns the action description according to its simplified name <code>getAcl()</code> <code>ACL object</code> Returns the ACL list <code>getPermissions(Profiles $profile)</code> <code>array</code> Returns the permissions assigned to a profile <code>getResources()</code> <code>array</code> Returns all the resources and their actions available <code>isAllowed($profile, $controller, $action)</code> <code>bool</code> Checks if the current profile is allowed to access a resource <code>isPrivate($controllerName)</code> <code>bool</code> Checks if a controller is private or not <code>rebuild()</code> <code>ACL object</code> Rebuilds the access list into a file"},{"location":"tutorial-vokuro/#auth","title":"Auth","text":"<p><code>Vokuro\\Plugins\\Auth\\Auth</code> is a component that manages authentication and offers identity management in V\u00f6kur\u00f3. </p> <p>The component exposes the following methods:</p> Method Description <code>check($credentials)</code> Checks the user credentials <code>saveSuccessLogin($user)</code> Creates the remember me environment settings the related cookies and generating tokens <code>registerUserThrottling($userId)</code> Implements login throttling. Reduces the effectiveness of brute force attacks <code>createRememberEnvironment(Users $user)</code> Creates the remember me environment settings the related cookies and generating tokens <code>hasRememberMe(): bool</code> Check if the session has a remember me cookie <code>loginWithRememberMe(): Response</code> Logs in using the information in the cookies <code>checkUserFlags(Users $user)</code> Checks if the user is banned/inactive/suspended <code>getIdentity(): array / null</code> Returns the current identity <code>getName(): string</code> Returns the name of the user <code>remove()</code> Removes the user identity information from session <code>authUserById($id)</code> Authenticates the user by his/her id <code>getUser(): Users</code> Get the entity related to user in the active identity <code>findFirstByToken($token): int / null</code> Returns the current token user <code>deleteToken(int $userId)</code> Delete the current user token in session"},{"location":"tutorial-vokuro/#mail","title":"Mail","text":"<p><code>Vokuro\\Plugins\\Mail\\Mail</code> is a wrapper to Swift Mailer. It exposes two methods <code>send()</code> and <code>getTemplate()</code> which allow you to get a template from the views and populate it with data. The resulting HTML can then be used in the <code>send()</code> method along with the recipient and other parameters to send the email message. </p> <p>NOTE</p> <p>Note that this component is used only if <code>useMail</code> is enabled in your <code>.env</code> file. You will also need to ensure that the SMTP server and credentials are valid.</p>"},{"location":"tutorial-vokuro/#sign-up","title":"Sign Up","text":""},{"location":"tutorial-vokuro/#controller","title":"Controller","text":"<p>In order to access all the areas of V\u00f6kur\u00f3 you need to have an account. V\u00f6kur\u00f3 allows you to sign up to the site by clicking the <code>Create an Account</code> button. </p> <p>What this will do is navigate you to the <code>/session/signup</code> URL, which in turn will call the <code>SessionController</code> and <code>signupAction</code>. Let's have a look what is going on in the <code>signupAction</code>:</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nnamespace Vokuro\\Controllers;\n\nuse Phalcon\\Flash\\Direct;\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Security;\nuse Phalcon\\Mvc\\View;\nuse Vokuro\\Forms\\SignUpForm;\nuse Vokuro\\Models\\Users;\n\n/**\n * @property Dispatcher $dispatcher\n * @property Direct     $flash\n * @property Request    $request\n * @property Security   $security\n * @property View       $view\n */\nclass SessionController extends ControllerBase\n{\n    /**\n     * Allow a user to signup to the system\n     */\n    public function signupAction()\n    {\n        $form = new SignUpForm();\n\n        // ....\n\n        $this-&gt;view-&gt;setVar('form', $form);\n    }\n}\n</code></pre> <p>The workflow of the application is:</p> <ul> <li>Visit <code>/session/signup</code><ul> <li>Create form, send form to the view, render the form</li> </ul> </li> <li>Submit data (not post)<ul> <li>Form shows again, nothing else happens</li> </ul> </li> <li>Submit data (post)<ul> <li>Errors<ul> <li>Form validators have errors, send the form to    the view, render the form (errors will show)</li> </ul> </li> <li>No errors<ul> <li>Data is sanitized</li> <li>New Model created</li> <li>Data saved in the database<ul> <li>Error<ul> <li>Show message on screen and refresh the form</li> </ul> </li> <li>Success<ul> <li>Record saved</li> <li>Show confirmation on screen</li> <li>Send email (if applicable)</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"tutorial-vokuro/#form","title":"Form","text":"<p>In order to have validation for user supplied data, we are utilizing the Phalcon\\Forms\\Form and Phalcon\\Validation* classes. These classes allow us to create HTML elements and attach validators to them. The form is then passed to the view, where the actual HTML elements are rendered on the screen. </p> <p>When the user submits information, we send the posted data back to the form and the relevant validators validate the input and return any potential error messages. </p> <p>NOTE</p> <p>All the forms for V\u00f6kur\u00f3 are located in <code>/src/Forms</code></p> <p>First we create a <code>SignUpForm</code> object. In that object we define all the HTML elements we need with their respective validators:</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nnamespace Vokuro\\Forms;\n\nuse Phalcon\\Forms\\Element\\Check;\nuse Phalcon\\Forms\\Element\\Hidden;\nuse Phalcon\\Forms\\Element\\Password;\nuse Phalcon\\Forms\\Element\\Submit;\nuse Phalcon\\Forms\\Element\\Text;\nuse Phalcon\\Forms\\Form;\nuse Phalcon\\Validation\\Validator\\Confirmation;\nuse Phalcon\\Validation\\Validator\\Email;\nuse Phalcon\\Validation\\Validator\\Identical;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\nuse Phalcon\\Validation\\Validator\\StringLength;\n\nclass SignUpForm extends Form\n{\n    /**\n     * @param string|null $entity\n     * @param array       $options\n     */\n    public function initialize(\n        string $entity = null, \n        array $options = []\n    ) {\n        $name = new Text('name');\n        $name-&gt;setLabel('Name');\n        $name-&gt;addValidators(\n            [\n                new PresenceOf(\n                    [\n                        'message' =&gt; 'The name is required',\n                    ]\n                ),\n            ]\n        );\n\n        $this-&gt;add($name);\n\n        // Email\n        $email = new Text('email');\n        $email-&gt;setLabel('E-Mail');\n        $email-&gt;addValidators(\n            [\n                new PresenceOf(\n                    [\n                        'message' =&gt; 'The e-mail is required',\n                    ]\n                ),\n                new Email(\n                    [\n                        'message' =&gt; 'The e-mail is not valid',\n                    ]\n                ),\n            ]\n        );\n\n        $this-&gt;add($email);\n\n        // Password\n        $password = new Password('password');\n        $password-&gt;setLabel('Password');\n        $password-&gt;addValidators(\n            [\n                new PresenceOf(\n                    [\n                        'message' =&gt; 'The password is required',\n                    ]\n                ),\n                new StringLength(\n                    [\n                        'min'            =&gt; 8,\n                        'messageMinimum' =&gt; 'Password is too short. ' .\n                                            'Minimum 8 characters',\n                    ]\n                ),\n                new Confirmation(\n                    [\n                        'message' =&gt; \"Password doesn't match \" .\n                                     \"confirmation\",\n                        'with'    =&gt; 'confirmPassword',\n                    ]\n                ),\n            ]\n        );\n\n        $this-&gt;add($password);\n\n        // Confirm Password\n        $confirmPassword = new Password('confirmPassword');\n        $confirmPassword-&gt;setLabel('Confirm Password');\n        $confirmPassword-&gt;addValidators(\n            [\n                new PresenceOf(\n                    [\n                        'message' =&gt; 'The confirmation password ' .\n                                     'is required',\n                    ]\n                ),\n            ]\n        );\n\n        $this-&gt;add($confirmPassword);\n\n        // Remember\n        $terms = new Check(\n            'terms', \n            [\n                'value' =&gt; 'yes',\n            ]\n        );\n\n        $terms-&gt;setLabel('Accept terms and conditions');\n        $terms-&gt;addValidator(\n            new Identical(\n                [\n                    'value'   =&gt; 'yes',\n                    'message' =&gt; 'Terms and conditions must be ' .\n                                 'accepted',\n                ]\n            )\n        );\n\n        $this-&gt;add($terms);\n\n        // CSRF\n        $csrf = new Hidden('csrf');\n        $csrf-&gt;addValidator(\n            new Identical(\n                [\n                    'value'   =&gt; $this-&gt;security-&gt;getRequestToken(),\n                    'message' =&gt; 'CSRF validation failed',\n                ]\n            )\n        );\n        $csrf-&gt;clear();\n\n        $this-&gt;add($csrf);\n\n        // Sign Up\n        $this-&gt;add(\n            new Submit(\n                'Sign Up', \n                [\n                    'class' =&gt; 'btn btn-success',\n                ]\n            )\n        );\n    }\n\n    /**\n     * Prints messages for a specific element\n     *\n     * @param string $name\n     *\n     * @return string\n     */\n    public function messages(string $name)\n    {\n        if ($this-&gt;hasMessagesFor($name)) {\n            foreach ($this-&gt;getMessagesFor($name) as $message) {\n                return $message;\n            }\n        }\n\n        return '';\n    }\n}\n</code></pre> <p>In the <code>initialize</code> method we are setting up all the HTML elements we need. These elements are:</p> Element Type Description <code>name</code> <code>Text</code> The name of the user <code>email</code> <code>Text</code> The email for the account <code>password</code> <code>Password</code> The password for the account <code>confirmPassword</code> <code>Password</code> Password confirmation <code>terms</code> <code>Check</code> Accept the terms checkbox <code>csrf</code> <code>Hidden</code> CSRF protection element <code>Sign Up</code> <code>Submit</code> Submit button <p>Adding elements is pretty straight forward:</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\n// Email\n$email = new Text('email');\n$email-&gt;setLabel('E-Mail');\n$email-&gt;addValidators(\n    [\n        new PresenceOf(\n            [\n                'message' =&gt; 'The e-mail is required',\n            ]\n        ),\n        new Email(\n            [\n                'message' =&gt; 'The e-mail is not valid',\n            ]\n        ),\n    ]\n);\n\n$this-&gt;add($email);\n</code></pre> <p>First we create a <code>Text</code> object and set its name to <code>email</code>. We also set the label of the element to <code>E-Mail</code>. After that we attach various validators on the element. These will be invoked after the user submits data, and that data is passed in the form.</p> <p>As we see above, we attach the <code>PresenceOf</code> validator on the <code>email</code> element with a message <code>The e-mail is required</code>. The validator will check if the user has submitted data when they clicked the submit button and will produce the message if the validator fails. The validator checks the passed array (usually <code>$_POST</code>) and for this particular element it will check <code>$_POST['email']</code>.</p> <p>We also attach the <code>Email</code> validator, which is responsible for checking for a valid email address. As you can see the validators belong in an array, so you can easily attach as many validators as you need on any particular element.</p> <p>The last thing we do is to add the element in the form.</p> <p>You will notice that the <code>terms</code> element does not have any validators attached to it, so our form will not check the contents of the element.</p> <p>Special attention to the <code>password</code> and <code>confirmPassword</code> elements. You will notice that both elements are of type <code>Password</code>. The idea is that you need to type your password twice, and the passwords need to match in order to avoid errors.</p> <p>The <code>password</code> field has two validators for content: <code>PresenceOf</code> i.e. it is required and <code>StringLength</code>: we need the password to be more than 8 characters. We also attach a third validator called <code>Confirmation</code>. This special validator ties the <code>password</code> element with the <code>confirmPassword</code> element. When it is triggered to validate it will check the contents of both elements and if they are not identical, the error message will appear i.e. the validation will fail.</p>"},{"location":"tutorial-vokuro/#view","title":"View","text":"<p>Now that we have everything set up in our form, we pass the form to the view:</p> <pre><code>$this-&gt;view-&gt;setVar('form', $form);\n</code></pre> <p>Our view now needs to render the elements:</p> <pre><code>{% raw %}\n{# ... #}\n{% \n    set isEmailValidClass = form.messages('email') ? \n        'form-control is-invalid' : \n        'form-control' \n%}\n{# ... #}\n\n&lt;h1 class=\"mt-3\"&gt;Sign Up&lt;/h1&gt;\n\n&lt;form method=\"post\"&gt;\n    {# ... #}\n\n    &lt;div class=\"form-group row\"&gt;\n        {{ \n            form.label(\n                'email', \n                [\n                    'class': 'col-sm-2 col-form-label'\n                ]\n            ) \n        }}\n        &lt;div class=\"col-sm-10\"&gt;\n            {{ \n                form.render(\n                    'email', \n                    [\n                        'class': isEmailValidClass, \n                        'placeholder': 'Email'\n                    ]\n                ) \n            }}\n            &lt;div class=\"invalid-feedback\"&gt;\n                {{ form.messages('email') }}\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    {# ... #}\n    &lt;div class=\"form-group row\"&gt;\n        &lt;div class=\"col-sm-10\"&gt;\n            {{ \n                form.render(\n                    'csrf', \n                    [\n                        'value': security.getToken()\n                    ]\n                ) \n            }}\n            {{ form.messages('csrf') }}\n\n            {{ form.render('Sign Up') }}\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/form&gt;\n\n&lt;hr&gt;\n\n{{ link_to('session/login', \"&amp;larr; Back to Login\") }}\n{% endraw %}\n</code></pre> <p>The variable that we set in our view for our <code>SignUpForm</code> object is called <code>form</code>. We therefore use it directly and call the methods of it. The syntax in Volt is slightly different. In PHP we would use <code>$form-&gt;render()</code> whereas in Volt we will use <code>form.render()</code>.</p> <p>The view contains a conditional at the top, checking whether there have been any errors in our form, and if there were, it attaches the <code>is-invalid</code> CSS class to the element. This class puts a nice red border by the element, highlighting the error and showing the message.</p> <p>After that we have regular HTML tags with the relevant styling. In order to display the HTML code of each element we need to call <code>render()</code> on the <code>form</code> with the relevant element name. Also note that we also call <code>form.label()</code> with the same element name, so that we can create respective <code>&lt;label&gt;</code> tags.</p> <p>At the end of the view we render the <code>CSRF</code> hidden field as well as the submit button <code>Sign Up</code>.</p>"},{"location":"tutorial-vokuro/#post","title":"Post","text":"<p>As mentioned above, once the user fills the form and clicks the <code>Sign Up</code> button, the form will self post i.e. it will post the data on the same controller and action (in our case <code>/session/signup</code>). The action now needs to process this posted data:</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nnamespace Vokuro\\Controllers;\n\nuse Phalcon\\Flash\\Direct;\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Mvc\\Dispatcher;\nuse Phalcon\\Security;\nuse Phalcon\\Mvc\\View;\nuse Vokuro\\Forms\\SignUpForm;\nuse Vokuro\\Models\\Users;\n\n/**\n * @property Dispatcher $dispatcher\n * @property Direct     $flash\n * @property Request    $request\n * @property Security   $security\n * @property View       $view\n */\nclass SessionController extends ControllerBase\n{\n    /**\n     * Allow a user to signup to the system\n     */\n    public function signupAction()\n    {\n        $form = new SignUpForm();\n\n        if (true === $this-&gt;request-&gt;isPost()) {\n            if (false !== $form-&gt;isValid($this-&gt;request-&gt;getPost())) {\n                $name     = $this\n                    -&gt;request\n                    -&gt;getPost('name', 'striptags')\n                ;\n                $email    = $this\n                    -&gt;request\n                    -&gt;getPost('email')\n                ;\n                $password = $this\n                    -&gt;request\n                    -&gt;getPost('password')\n                ;\n                $password = $this\n                    -&gt;security\n                    -&gt;hash($password)\n                ;\n\n                $user = new Users(\n                    [\n                        'name'       =&gt; $name,\n                        'email'      =&gt; $email,\n                        'password'   =&gt; $password,\n                        'profilesId' =&gt; 2,\n                    ]\n                );\n\n                if ($user-&gt;save()) {\n                    return $this-&gt;dispatcher-&gt;forward([\n                        'controller' =&gt; 'index',\n                        'action'     =&gt; 'index',\n                    ]);\n                }\n\n                foreach ($user-&gt;getMessages() as $message) {\n                    $this-&gt;flash-&gt;error((string) $message);\n                }\n            }\n        }\n\n        $this-&gt;view-&gt;setVar('form', $form);\n    }\n}\n</code></pre> <p>If the user has submitted data, the following line will evaluate and we will be executing code inside the <code>if</code> statement:</p> <pre><code>if (true === $this-&gt;request-&gt;isPost()) {\n</code></pre> <p>Here we are checking the request that came from the user, if it is a <code>POST</code>. Now that it is, we need to use the form validators and check if we have any errors. The Phalcon\\Http\\Request object, allows us to get that data easily by using:</p> <pre><code>$this-&gt;request-&gt;getPost()\n</code></pre> <p>We now need to pass this posted data in the form and call <code>isValid</code>. This will fire all the validators for each element and if any of them fail, the form will populate the internal messages collection and return <code>false</code></p> <pre><code>if (false !== $form-&gt;isValid($this-&gt;request-&gt;getPost())) {\n</code></pre> <p>If everything is fine, we use again the Phalcon\\Http\\Request object to retrieve the submitted data but also sanitize them. The following example strips the tags from the submitted <code>name</code> string:</p> <pre><code>$name     = $this\n    -&gt;request\n    -&gt;getPost('name', 'striptags')\n;\n</code></pre> <p>Note that we never store clear text passwords. Instead we use the Phalcon\\Security component and call <code>hash</code> on it, to transform the supplied password to a one way hash and store that instead. This way, if someone compromises our database, at least they have no access to clear text passwords.</p> <pre><code>$password = $this\n    -&gt;security\n    -&gt;hash($password)\n;\n</code></pre> <p>We now need to store the supplied data in the database. We do that by creating a new <code>Users</code> model, pass the sanitized data into it and then call <code>save</code>:</p> <pre><code>$user = new Users(\n    [\n        'name'       =&gt; $name,\n        'email'      =&gt; $email,\n        'password'   =&gt; $password,\n        'profilesId' =&gt; 2,\n    ]\n);\n\nif ($user-&gt;save()) {\n    return $this\n        -&gt;dispatcher\n        -&gt;forward(\n            [\n                'controller' =&gt; 'index',\n                'action'     =&gt; 'index',\n            ]\n        );\n}\n</code></pre> <p>If the <code>$user-&gt;save()</code> returns <code>true</code>, the user will be forwarded to the home page (<code>index/index</code>) and a success message will appear on screen. </p>"},{"location":"tutorial-vokuro/#model","title":"Model","text":"<p>Relationships</p> <p>Now we need to check the <code>Users</code> model, since there is some logic we have applied there, in particular the <code>afterSave</code> and <code>beforeValidationOnCreate</code> events. </p> <p>The core method, the setup if you like happens in the <code>initialize</code> method. That is the spot where we set all the relationships for the model. For the <code>Users</code> class we have several relationships defined. Why relationships you might ask? Phalcon offers an easy way to retrieve related data to a particular model. </p> <p>If for instance we want to check all the successful logins for a particular user, we can do so with the following code snippet:</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nuse Vokuro\\Models\\SuccessLogins;\nuse Vokuro\\Models\\Users;\n\n$user = Users::findFirst(\n    [\n        'conditions' =&gt; 'id = :id:',\n        'bind'       =&gt; [\n            'id' =&gt; 7,\n        ] \n    ]\n);\n\n$logins = SuccessLogin::find(\n    [\n        'conditions' =&gt; 'userId = :userId:',\n        'bind'       =&gt; [\n            'userId' =&gt; 7,\n        ] \n    ]\n);\n</code></pre> <p>The above code gets the user with id <code>7</code> and then gets all the successful logins from the relevant table for that user.</p> <p>Using relationships we can let Phalcon do all the heavy lifting for us. So the code above becomes:</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nuse Vokuro\\Models\\SuccessLogins;\nuse Vokuro\\Models\\Users;\n\n$user = Users::findFirst(\n    [\n        'conditions' =&gt; 'id = :id:',\n        'bind'       =&gt; [\n            'id' =&gt; 7,\n        ] \n    ]\n);\n\n$logins = $user-&gt;successLogins;\n\n$logins = $user-&gt;getRelated('successLogins');\n</code></pre> <p>The last two lines do exactly the same thing. It is a matter of preference which syntax you want to use. Phalcon will query the related table, filtering the related table with the id of the user.</p> <p>For our <code>Users</code> table we define the following relationships:</p> Name Source field Target field Model <code>passwordChanges</code> <code>id</code> <code>usersId</code> <code>PasswordChanges</code> <code>profile</code> <code>profileId</code> <code>id</code> <code>Profiles</code> <code>resetPasswords</code> <code>id</code> <code>usersId</code> <code>ResetPasswords</code> <code>successLogins</code> <code>id</code> <code>usersId</code> <code>SuccessLogins</code> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nnamespace Vokuro\\Models;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Uniqueness;\n\n/**\n * All the users registered in the application\n */\nclass Users extends Model\n{\n    // ...\n\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            'profilesId', \n            Profiles::class, \n            'id', \n            [\n                'alias'    =&gt; 'profile',\n                'reusable' =&gt; true,\n            ]\n        );\n\n        $this-&gt;hasMany(\n            'id', \n            SuccessLogins::class, \n            'usersId', \n            [\n                'alias'      =&gt; 'successLogins',\n                'foreignKey' =&gt; [\n                    'message' =&gt; 'User cannot be deleted because ' .\n                                 'he/she has activity in the system',\n                ],\n            ]\n        );\n\n        $this-&gt;hasMany(\n            'id', \n            PasswordChanges::class, \n            'usersId', \n            [\n                'alias'      =&gt; 'passwordChanges',\n                'foreignKey' =&gt; [\n                    'message' =&gt; 'User cannot be deleted because ' .\n                                 'he/she has activity in the system',\n                ],\n            ]\n        );\n\n        $this-&gt;hasMany(\n            'id', \n            ResetPasswords::class, \n            'usersId', [\n            'alias'      =&gt; 'resetPasswords',\n            'foreignKey' =&gt; [\n                'message' =&gt; 'User cannot be deleted because ' .\n                             'he/she has activity in the system',\n            ],\n        ]);\n    }\n\n    // ...\n}\n</code></pre> <p>As you can see in the defined relationships, we have a <code>belongsTo</code> and three <code>hasMany</code>. All relationships have an alias so that we can access them easier. The <code>belongsTo</code> relationship also has the <code>reusable</code> flag set to on. This means that if the relationship is called more than once in the same request, Phalcon would perform the database query only the first time and cache the resultset. Any subsequent calls will use the cached resultset. </p> <p>Also notable is that we define specific messages for foreign keys. If the particular relationship is violated, the defined message will be raised. </p> <p>Events</p> <p>Phalcon\\Mvc\\Model is designed to fire specific events. These event methods can be located either in a listener or in the same model. </p> <p>For the <code>Users</code> model, we attach code to the <code>afterSave</code> and <code>beforeValidationOnCreate</code> events. </p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nnamespace Vokuro\\Models;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Uniqueness;\n\n/**\n * All the users registered in the application\n */\nclass Users extends Model\n{\n    public function beforeValidationOnCreate()\n    {\n        if (true === empty($this-&gt;password)) {\n            $tempPassword = preg_replace(\n                '/[^a-zA-Z0-9]/', \n                '', \n                base64_encode(openssl_random_pseudo_bytes(12))\n            );\n\n            $this-&gt;mustChangePassword = 'Y';\n\n            $this-&gt;password = $this-&gt;getDI()\n                                   -&gt;getSecurity()\n                                   -&gt;hash($tempPassword)\n            ;\n        } else {\n            $this-&gt;mustChangePassword = 'N';\n        }\n\n        if ($this-&gt;getDI()-&gt;get('config')-&gt;useMail) {\n            $this-&gt;active = 'N';\n        } else {\n            $this-&gt;active = 'Y';\n        }\n\n        $this-&gt;suspended = 'N';\n\n        $this-&gt;banned = 'N';\n    }\n}\n</code></pre> <p>The <code>beforeValidationOnCreate</code> will fire every time we have a new record (<code>Create</code>), before any validations occur. We check if we have a defined password and if not, we will generate a random string, then hash that string using Phalcon\\Security and storing it in the <code>password</code> property. We also set the flag to change the password.</p> <p>If the password is not empty, we just set the <code>mustChangePassword</code> field to <code>N</code>. Finally, we set some defaults on whether the user is <code>active</code>, <code>suspended</code> or <code>banned</code>. This ensures that our record is ready before it is inserted in the database.</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nnamespace Vokuro\\Models;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Uniqueness;\n\n/**\n * All the users registered in the application\n */\nclass Users extends Model\n{\n    public function afterSave()\n    {\n        if ($this-&gt;getDI()-&gt;get('config')-&gt;useMail) {\n            if ($this-&gt;active == 'N') {\n                $emailConfirmation          = new EmailConfirmations();\n                $emailConfirmation-&gt;usersId = $this-&gt;id;\n\n                if ($emailConfirmation-&gt;save()) {\n                    $this-&gt;getDI()\n                         -&gt;getFlash()\n                         -&gt;notice(\n                            'A confirmation mail has ' .\n                            'been sent to ' . $this-&gt;email\n                        )\n                    ;\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>The <code>afterSave</code> event fires right after a record is saved in the database. In this event we check if emails have been enabled (see <code>.env</code> file <code>useMail</code> setting), and if active we create a new record in the <code>EmailConfirmations</code> table and then save the record. Once everything is done, a notice will appear on screen. </p> <p>NOTE</p> <p>Note that the <code>EmailConfirmations</code> model also has an <code>afterCreate</code> event, which is responsible for actually sending the email to the user.</p> <p>Validation</p> <p>The model also has the <code>validate</code> method which allows us to attach a validator to any number of fields in our model. For the <code>Users</code> table, we need the <code>email</code> to be unique. As such, we attach the <code>Uniqueness</code> validator to it. The validator will fire right before any save operation is performed on the model and the message will be returned back if the validation fails.</p> <pre><code>&lt;?php\ndeclare(strict_types=1);\n\nnamespace Vokuro\\Models;\n\nuse Phalcon\\Mvc\\Model;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Uniqueness;\n\n/**\n * All the users registered in the application\n */\nclass Users extends Model\n{\n    public function validation()\n    {\n        $validator = new Validation();\n\n        $validator-&gt;add(\n            'email', \n            new Uniqueness(\n                [\n                    \"message\" =&gt; \"The email is already registered\",\n                ]\n            )\n        );\n\n        return $this-&gt;validate($validator);\n    }\n}\n</code></pre>"},{"location":"tutorial-vokuro/#conclusion","title":"Conclusion","text":"<p>V\u00f6kur\u00f3 is a sample application that we use to demonstrate some of the features that Phalcon offers. It is definitely not a solution that will fit all needs. However you can use it as a starting point to develop your application.</p>"},{"location":"tutorial-vokuro/#references","title":"References","text":"<ul> <li>Access Control Lists definition</li> <li>Composer </li> <li>DotEnv - Vance Lucas</li> <li>Model-View-Controller definition</li> <li>[Nanobox Guides][nanobox-guides]</li> <li>Phinx - Cake PHP</li> <li>PSR Extension</li> <li>Swift Mailer</li> <li>Phalcon ACL</li> <li>Phalcon Forms</li> <li>Phalcon HTTP Response</li> <li>Phalcon Security</li> <li>V\u00f6kur\u00f3 - GitHub Repository</li> </ul>"},{"location":"unit-testing/","title":"Unit Testing","text":""},{"location":"unit-testing/#overview","title":"Overview","text":"<p>Writing proper tests can assist in writing better software. If you set up proper test cases you can eliminate most functional bugs and better maintain your software.</p>"},{"location":"unit-testing/#integrating-phpunit-with-phalcon","title":"Integrating PHPUnit with Phalcon","text":"<pre><code>composer require --dev phpunit/phpunit:^9.0\n</code></pre> <p>or by manually adding it to <code>composer.json</code>:</p> <pre><code>{\n    \"require-dev\": {\n        \"phpunit/phpunit\": \"^9.0\"\n    }\n}\n</code></pre> <p>Once PHPUnit is installed, create a directory called <code>tests</code> in project root directory with a subdirectory called <code>Unit</code>:</p> <pre><code>app/\nsrc/\npublic/\ntests/Unit/\n</code></pre>"},{"location":"unit-testing/#configure-test-namespace","title":"Configure Test Namespace","text":"<p>In order to autoload our test directory, we must add our test namespace to composer. Add the below to composer and modify it to fit your needs.</p> <pre><code>{\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Tests\\\\\": \"tests\"\n        }\n    }\n}\n</code></pre> <p>Now, create a <code>phpunit.xml</code> file as follows:</p>"},{"location":"unit-testing/#the-phpunitxml-file","title":"The <code>phpunit.xml</code> file","text":"<p>Modify the <code>phpunit.xml</code> below to fit your needs and save it in your project root directory. This will run any tests under the <code>tests/Unit</code> directory.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n&lt;phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         verbose=\"true\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"&gt;\n\n    &lt;testsuite name=\"Phalcon - Unit Test\"&gt;\n        &lt;directory&gt;./tests/Unit&lt;/directory&gt;\n    &lt;/testsuite&gt;\n&lt;/phpunit&gt;\n</code></pre>"},{"location":"unit-testing/#phalcon-incubator-test","title":"Phalcon Incubator Test","text":"<p>Phalcon provides a test library that provides few abstract classes you can use to bootstrap the Unit Tests themselves. These files exist in Phalcon Incubator Test repository.</p> <p>You can use the Incubator test library by adding it as a dependency:</p> <pre><code>composer require --dev phalcon/incubator-test:^v1.0.0-alpha.1\n</code></pre> <p>or by manually adding it to <code>composer.json</code>:</p> <pre><code>{\n    \"require-dev\": {\n        \"phalcon/incubator-test\": \"^v1.0.0-alpha.1\"\n    }\n}\n</code></pre>"},{"location":"unit-testing/#creating-a-unit-test","title":"Creating a Unit Test","text":"<p>It is always wise to autoload your classes using namespaces. The configuration below assumes that you are using PSR-4 to autoload your project classes via a composer configuration. Doing so, the autoloader will make sure the proper files are loaded so all you need to do is create the files and phpunit will run the tests for you.</p> <p>This example does not contain a config file, as most cases you should be mocking your dependencies. If you happen to need one, you can add to the <code>DI</code> in the <code>AbstractUnitTest</code>.</p>"},{"location":"unit-testing/#abstract-unit-test","title":"Abstract Unit Test","text":"<p>First create a base Unit Test called <code>AbstractUnitTest.php</code> in your <code>tests/Unit</code> directory:</p> <pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace Tests\\Unit;\n\nuse Phalcon\\Di;\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Incubator\\Test\\PHPUnit\\UnitTestCase;\nuse PHPUnit\\Framework\\IncompleteTestError;\n\nabstract class AbstractUnitTest extends UnitTestCase\n{\n    private bool $loaded = false;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $di = new FactoryDefault();\n\n        Di::reset();\n        Di::setDefault($di);\n\n        $this-&gt;loaded = true;\n    }\n\n    public function __destruct()\n    {\n        if (!$this-&gt;loaded) {\n            throw new IncompleteTestError(\n                \"Please run parent::setUp().\"\n            );\n        }\n    }\n}\n</code></pre>"},{"location":"unit-testing/#your-first-test","title":"Your First Test","text":"<p>Create the test below and save it in your <code>tests/Unit</code> directory.  </p> <pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\nnamespace Tests\\Unit;\n\nclass UnitTest extends AbstractUnitTest\n{\n    public function testTestCase(): void\n    {\n        $this-&gt;assertEquals(\n            \"roman\",\n            \"roman\",\n            \"This will pass\"\n        );\n\n        $this-&gt;assertEquals(\n            \"hope\",\n            \"ava\",\n            \"This will fail\"\n        );\n    }\n}\n</code></pre> <p>If you need to overload the <code>setUp</code> method, it is important you call the parent or Phalcon will not properly initialize. <pre><code>    protected function setUp(): void\n    {\n        parent::setUp();\n\n        //some setup mocks\n    }\n\n````\n\n### Running Unit Tests\n\nWhen you execute `vendor/bin/phpunit` in your command-line, you will get the following output:\n\n```bash\n$ phpunit\nPHPUnit 9.1.4 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 7.4.5 with Xdebug 2.9.5\nConfiguration: /var/www//phpunit.xml\n\n\nTime: 3 ms, Memory: 3.25Mb\n\nThere was 1 failure:\n\n1) Test\\Unit\\UnitTest::testTestCase\nThis will fail\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'hope'\n+'ava'\n\n/var/www/tests/Unit/UnitTest.php:25\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1.\n</code></pre></p>"},{"location":"unit-testing/#resources","title":"Resources","text":"<ul> <li>PHPUnit Documentation</li> <li>Getting Started with TDD in PHP</li> <li>Writing Great Unit Tests</li> <li>What Is Mocking In PHP Unit Testing</li> </ul>"},{"location":"upgrade/","title":"Upgrade Guide","text":""},{"location":"upgrade/#upgrading-to-v4","title":"Upgrading to V4","text":"<p>So you have decided to upgrade to v4! Congratulations!!</p> <p>Phalcon v4 contains a lot of changes to components, including changes to interfaces, strict types, removal of components and additions of new ones. This document is an effort to help you upgrade your existing Phalcon application to v4. We will outline the areas that you need to pay attention to and make necessary alterations so that your code can run as smoothly as it has been with v3. Although the changes are significant, it is more of a methodical task than a daunting one.</p>"},{"location":"upgrade/#requirements","title":"Requirements","text":""},{"location":"upgrade/#php-72","title":"PHP 7.2","text":"<p>Phalcon v4 supports only PHP 7.2 and above. PHP 7.1 was released 2 years ago and its active support has lapsed, so we decided to follow actively supported PHP versions.</p> <p></p>"},{"location":"upgrade/#psr","title":"PSR","text":"<p>Phalcon requires the PSR extension. The extension can be downloaded and compiled from this GitHub repository. Installation instructions are available in the <code>README</code> of the repository. Once the extension has been compiled and is available in your system, you will need to load it to your <code>php.ini</code>. You will need to add this line:</p> <pre><code>extension=psr.so\n</code></pre> <p>before</p> <pre><code>extension=phalcon.so\n</code></pre> <p>Alternatively some distributions add a number prefix on <code>ini</code> files. If that is the case, choose a high number for Phalcon (e.g. <code>50-phalcon.ini</code>).</p>"},{"location":"upgrade/#installation","title":"Installation","text":"<p>Download the latest <code>zephir.phar</code> from here. Add it to a folder that can be accessed by your system.</p> <p>Clone the repository</p> <pre><code>git clone https://github.com/phalcon/cphalcon\n</code></pre> <p>Compile Phalcon</p> <pre><code>cd cphalcon/\ngit checkout tags/v4.0.0 ./\nzephir fullclean\nzephir build\n</code></pre> <p>Check the module</p> <pre><code>php -m | grep phalcon\n</code></pre>"},{"location":"upgrade/#general-notes","title":"General Notes","text":""},{"location":"upgrade/#applications","title":"Applications","text":"<ul> <li>The <code>Phalcon\\Mvc\\Application</code>, <code>Phalcon\\Mvc\\Micro</code> and <code>Phalcon\\Mvc\\Router</code> now must have a URI to process</li> </ul>"},{"location":"upgrade/#exceptions","title":"Exceptions","text":"<ul> <li>Changed catch <code>Exception</code> to <code>Throwable</code></li> </ul>"},{"location":"upgrade/#components","title":"Components","text":""},{"location":"upgrade/#acl","title":"ACL","text":"<p>The ACL component has had some methods and components renamed. The functionality remains the same as in previous versions.</p>"},{"location":"upgrade/#overview","title":"Overview","text":"<p>The components needed for the ACL to work have been renamed. In particular <code>Resource</code> has been renamed to <code>Component</code> in all relevant interfaces, classes and methods that this component uses.</p> <ul> <li>Added <code>Phalcon\\Acl\\Adapter\\AbstractAdapter</code></li> <li> <p>Added <code>Acl\\Enum</code></p> </li> <li> <p>Removed <code>Phalcon\\Acl</code></p> </li> <li> <p>Removed <code>Phalcon\\Acl\\Adapter</code></p> </li> <li> <p>Renamed <code>Phalcon\\Acl\\Resource</code> to <code>Phalcon\\Acl\\Component</code></p> </li> <li>Renamed <code>Phalcon\\Acl\\ResourceInterface</code> to <code>Phalcon\\Acl\\ComponentInterface</code></li> <li>Renamed <code>Phalcon\\Acl\\ResourceAware</code> to <code>Phalcon\\Acl\\ComponentAware</code></li> <li>Renamed <code>Phalcon\\Acl\\AdapterInterface::isResource</code> to <code>Phalcon\\Acl\\AdapterInterface::isComponent</code></li> <li>Renamed <code>Phalcon\\Acl\\AdapterInterface::addResource</code> to <code>Phalcon\\Acl\\AdapterInterface::addComponent</code></li> <li>Renamed <code>Phalcon\\Acl\\AdapterInterface::addResourceAccess</code> to <code>Phalcon\\Acl\\AdapterInterface::addComponentAccess</code></li> <li>Renamed <code>Phalcon\\Acl\\AdapterInterface::dropResourceAccess</code> to <code>Phalcon\\Acl\\AdapterInterface::dropComponentAccess</code></li> <li>Renamed <code>Phalcon\\Acl\\AdapterInterface::getActiveResource</code> to <code>Phalcon\\Acl\\AdapterInterface::getActiveComponent</code></li> <li>Renamed <code>Phalcon\\Acl\\AdapterInterface::getResources</code> to <code>Phalcon\\Acl\\AdapterInterface::getComponents</code></li> <li>Renamed <code>Phalcon\\Acl\\Adapter::getActiveResource</code> to <code>Phalcon\\Acl\\AdapterInterface::getActiveComponent</code></li> <li>Renamed <code>Phalcon\\Acl\\Adapter\\Memory::isResource</code> to <code>Phalcon\\Acl\\Adapter\\Memory::isComponent</code></li> <li>Renamed <code>Phalcon\\Acl\\Adapter\\Memory::addResource</code> to <code>Phalcon\\Acl\\Adapter\\Memory::addComponent</code></li> <li>Renamed <code>Phalcon\\Acl\\Adapter\\Memory::addResourceAccess</code> to <code>Phalcon\\Acl\\Adapter\\Memory::addComponentAccess</code></li> <li>Renamed <code>Phalcon\\Acl\\Adapter\\Memory::dropResourceAccess</code> to <code>Phalcon\\Acl\\Adapter\\Memory::dropComponentAccess</code></li> <li>Renamed <code>Phalcon\\Acl\\Adapter\\Memory::getResources</code> to <code>Phalcon\\Acl\\Adapter\\Memory::getComponents</code></li> </ul>"},{"location":"upgrade/#acladaptermemory","title":"Acl\\Adapter\\Memory","text":"<ul> <li>Added <code>getActiveKey</code>, <code>activeFunctionCustomArgumentsCount</code> and <code>getActiveFunction</code> to get latest key, number of custom arguments, and function used to acquire access</li> <li>Added <code>addOpertion</code> support multiple inherited</li> </ul>"},{"location":"upgrade/#aclenum-constants","title":"Acl\\Enum (Constants)","text":"<p>Example: <pre><code>use Phalcon\\Acl\\Enum;\n\necho Enum::ALLOW; //prints 1\necho Enum::DENY;  //prints 0\n</code></pre></p>"},{"location":"upgrade/#assets","title":"Assets","text":"<p>CSS and JS filters have been removed from the Assets component. Due to license limitations, the CSS and JS minifiers (filters) have been removed for v4. In future versions with the help of the community we can introduce these filters again. You can always implement your own using the supplied <code>Phalcon\\Assets\\FilterInterface</code>.  </p> <ul> <li>Removed <code>Phalcon\\Assets\\Filters\\CssMin</code></li> <li>Removed <code>Phalcon\\Assets\\Filters\\JsMin</code></li> <li>Renamed <code>Phalcon\\Assets\\Resource</code> to <code>Phalcon\\Assets\\Asset</code></li> <li>Renamed <code>Phalcon\\Assets\\ResourceInterface</code> to <code>Phalcon\\Assets\\AssetInterface</code></li> <li>Renamed <code>Phalcon\\Assets\\Manager::addResource</code> to <code>Phalcon\\Assets\\Manager::addAsset</code></li> <li>Renamed <code>Phalcon\\Assets\\Manager::addResourceByType</code> to <code>Phalcon\\Assets\\Manager::addAssetByType</code></li> <li>Renamed <code>Phalcon\\Assets\\Manager::collectionResourcesByType</code> to <code>Phalcon\\Assets\\Manager::collectionAssetsByType</code></li> </ul>"},{"location":"upgrade/#cache","title":"Cache","text":"<p><code>xcache</code>, <code>apc</code> and <code>memcache</code> adapters have been deprecated and removed. The first two are not supported for PHP 7.2+. <code>apc</code> has been replaced with <code>apcu</code> and <code>memcache</code> can be replaced with the <code>libmemcached</code> one.</p> <ul> <li>Removed <code>Phalcon\\Annotations\\Adapter\\Apc</code></li> <li>Removed <code>Phalcon\\Annotations\\Adapter\\Xcache</code></li> <li>Removed <code>Phalcon\\Cache\\Backend\\Apc</code></li> <li>Removed <code>Phalcon\\Cache\\Backend\\Memcache</code></li> <li>Removed <code>Phalcon\\Cache\\Backend\\Xcache</code></li> <li>Removed <code>Phalcon\\Mvc\\Model\\Metadata\\Apc</code></li> <li>Removed <code>Phalcon\\Mvc\\Model\\Metadata\\Memcache</code></li> <li>Removed <code>Phalcon\\Mvc\\Model\\Metadata\\Xcache</code></li> </ul> <p>The <code>Cache</code> component has been rewritten to comply with PSR-16. This allows you to use the Phalcon\\Cache to any application that utilizes a PSR-16 cache, not just Phalcon based ones.</p> <p>In v3, the cache was split into two components, the Frontend and the Backend. This did create a bit of confusion, but it was functional. In order to create a cache component you had to create the Frontend first and then inject that to the relevant Backend (which acted as an adapter also).</p> <p>For v4, we rewrote the component completely. We first created a <code>Storage</code> class which is the basis of the Cache classes. We created Serializer classes whose sole responsibility is to serialize and unserialize the data before they are saved in the cache adapter and after they are retrieved. These classes are injected (based on the developer's choice) to an Adapter object which connects to a backend (<code>Memcached</code>, <code>Redis</code> etc.), while abiding by a common adapter interface.</p> <p>The Cache class implements PSR-16 and accepts an adapter in its constructor, which in turn is doing all the heavy lifting with connecting to the back end and manipulating data. </p> <p>For a more detailed explanation on how the new Cache component works, please visit the relevant page in our documentation. </p>"},{"location":"upgrade/#creating-a-cache","title":"Creating a Cache","text":"<pre><code>&lt;?php\n\nuse Phalcon\\Cache;\nuse Phalcon\\Cache\\AdapterFactory;\nuse Phalcon\\Storage\\Serializer\\SerializerFactory;\n\n$serializerFactory = new SerializerFactory();\n$adapterFactory    = new AdapterFactory($serializerFactory);\n\n$options = [\n    'defaultSerializer' =&gt; 'Json',\n    'lifetime'          =&gt; 7200\n];\n\n$adapter = $adapterFactory-&gt;newInstance('apcu', $options);\n\n$cache = new Cache($adapter);\n</code></pre> <p>Registering it in the DI</p> <pre><code>&lt;?php\n\nuse Phalcon\\Cache;\nuse Phalcon\\Cache\\AdapterFactory;\nuse Phalcon\\Storage\\Serializer\\SerializerFactory;\n\n$container = new Di();\n\n$container-&gt;set(\n    'cache',\n    function () {\n        $options = [\n            'defaultSerializer' =&gt; 'Json',\n            'lifetime'          =&gt; 7200\n        ];\n\n        $adapter = (new AdapterFactory(new SerializerFactory()))\n                    -&gt;newInstance('apcu', $options); \n\n        return new Cache($adapter);\n    }\n);\n</code></pre>"},{"location":"upgrade/#cli","title":"CLI","text":""},{"location":"upgrade/#parameters","title":"Parameters","text":"<p>Parameters now behave the same way as MVC controllers. Whilst previously they all existed in the <code>$params</code> property, you can now name them appropriately:</p> <pre><code>use Phalcon\\Cli\\Task;\n\nclass MainTask extends Task\n{\n    public function testAction(string $yourName, string $myName)\n    {\n        echo sprintf(\n            'Hello %s!' . PHP_EOL,\n            $yourName\n        );\n\n        echo sprintf(\n            'Best regards, %s' . PHP_EOL,\n            $myName\n        );\n    }\n}\n</code></pre>"},{"location":"upgrade/#cliconsole","title":"Cli\\Console","text":"<ul> <li>Removed <code>Phalcon\\Cli\\Console::addModules</code> in favor of <code>Phalcon\\Cli\\Console::registerModules</code></li> </ul>"},{"location":"upgrade/#clirouterrouteinterface","title":"Cli\\Router\\RouteInterface","text":"<ul> <li>Added <code>delimiter</code>, <code>getDelimiter</code></li> </ul>"},{"location":"upgrade/#clidispatcher","title":"Cli\\Dispatcher","text":"<ul> <li>Added <code>getTaskSuffix()</code>, <code>setTaskSuffix()</code></li> </ul>"},{"location":"upgrade/#clidispatcherinterface","title":"Cli\\DispatcherInterface","text":"<ul> <li>Added <code>setOptions</code>, <code>getOptions</code></li> </ul>"},{"location":"upgrade/#container","title":"Container","text":"<ul> <li>Added <code>Phalcon\\Container</code>, a proxy container class to the <code>Phalcon\\DI</code> implementing PSR-11</li> </ul>"},{"location":"upgrade/#debug","title":"Debug","text":"<ul> <li>Removed <code>Phalcon\\Debug::getMajorVersion</code></li> </ul>"},{"location":"upgrade/#db","title":"Db","text":"<ul> <li>Added global setting <code>orm.case_insensitive_column_map</code> to attempt to find value in the column map case-insensitively. Can be also enabled by setting <code>caseInsensitiveColumnMap</code> key in <code>\\Phalcon\\Mvc\\Model::setup()</code></li> <li>Removed <code>Phalcon\\Db</code> namespace. Replaced by <code>Phalcon\\Db\\AbstractDb</code> for necessary methods and <code>Phalcon\\Db\\Enum</code> for constants, i.e.:</li> </ul> <pre><code>use Phalcon\\Db\\Enum;\n\necho Enum::FETCH_ASSOC;\n</code></pre>"},{"location":"upgrade/#dbadapterinterface","title":"Db\\AdapterInterface","text":"<ul> <li>Added <code>fetchColumn</code>, <code>insertAsDict</code>, <code>updateAsDict</code></li> </ul>"},{"location":"upgrade/#dbadapterpdo","title":"Db\\Adapter\\Pdo","text":"<ul> <li>Added more column types for the Mysql adapter. The adapters support<ul> <li><code>TYPE_BIGINTEGER</code></li> <li><code>TYPE_BIT</code></li> <li><code>TYPE_BLOB</code></li> <li><code>TYPE_BOOLEAN</code></li> <li><code>TYPE_CHAR</code></li> <li><code>TYPE_DATE</code></li> <li><code>TYPE_DATETIME</code></li> <li><code>TYPE_DECIMAL</code></li> <li><code>TYPE_DOUBLE</code></li> <li><code>TYPE_ENUM</code></li> <li><code>TYPE_FLOAT</code></li> <li><code>TYPE_INTEGER</code></li> <li><code>TYPE_JSON</code></li> <li><code>TYPE_JSONB</code></li> <li><code>TYPE_LONGBLOB</code></li> <li><code>TYPE_LONGTEXT</code></li> <li><code>TYPE_MEDIUMBLOB</code></li> <li><code>TYPE_MEDIUMINTEGER</code></li> <li><code>TYPE_MEDIUMTEXT</code></li> <li><code>TYPE_SMALLINTEGER</code></li> <li><code>TYPE_TEXT</code></li> <li><code>TYPE_TIME</code></li> <li><code>TYPE_TIMESTAMP</code></li> <li><code>TYPE_TINYBLOB</code></li> <li><code>TYPE_TINYINTEGER</code></li> <li><code>TYPE_TINYTEXT</code></li> <li><code>TYPE_VARCHAR</code> Some adapters do not support certain types. For instance <code>JSON</code> is not supported for <code>Sqlite</code>. It will be automatically changed to <code>VARCHAR</code>.</li> </ul> </li> </ul>"},{"location":"upgrade/#dbdialectinterface","title":"Db\\DialectInterface","text":"<ul> <li>Added <code>registerCustomFunction</code>, <code>getCustomFunctions</code>, <code>getSqlExpression</code></li> </ul>"},{"location":"upgrade/#dbdialectpostgresql","title":"Db\\Dialect\\Postgresql","text":"<ul> <li>Changed <code>addPrimaryKey</code> to make primary key constraints names unique by prefixing them with the table name.</li> </ul>"},{"location":"upgrade/#di","title":"DI","text":""},{"location":"upgrade/#diserviceinterface","title":"Di\\ServiceInterface","text":"<ul> <li>Added <code>getParameter</code>, <code>isResolved</code></li> </ul>"},{"location":"upgrade/#diservice","title":"Di\\Service","text":"<ul> <li>Changed <code>Phalcon\\Di\\Service</code> constructor to no longer takes the name of the service.</li> </ul>"},{"location":"upgrade/#dispatcher","title":"Dispatcher","text":"<ul> <li>Removed <code>Phalcon\\Dispatcher::setModelBinding()</code> in favor of <code>Phalcon\\Dispatcher::setModelBinder()</code></li> <li>Added <code>getHandlerSuffix()</code>, <code>setHandlerSuffix()</code></li> </ul>"},{"location":"upgrade/#events","title":"Events","text":""},{"location":"upgrade/#eventsmanagerinterface","title":"Events\\ManagerInterface","text":"<ul> <li>Added <code>hasListeners</code></li> </ul>"},{"location":"upgrade/#flash","title":"Flash","text":"<ul> <li>Added ability to set a custom template for the Flash Messenger.</li> <li>Constructor no longer accepts an array for the CSS classes. You will need to use <code>setCssClasses()</code> to set your custom CSS classes for the component</li> <li>The constructor now accepts an optional <code>Phalcon\\Escaper</code> object, as well as a <code>Phalcon\\Session\\Manager</code> object (in the case of <code>Phalcon\\Flash\\Session</code>), in case you do not wish to use the DI and set it yourself.</li> </ul>"},{"location":"upgrade/#filter","title":"Filter","text":"<p>The <code>Filter</code> component has been rewritten, utilizing a service locator. Each sanitizer is now enclosed on its own class and lazy loaded to provide maximum performance and the lowest resource usage as possible.</p>"},{"location":"upgrade/#overview_1","title":"Overview","text":"<p>The <code>Phalcon\\Filter</code> class has been rewritten to act as a service locator for different sanitizers. This object allows you to sanitize input as before using the <code>sanitize()</code> method.</p> <p>The values sanitized are automatically cast to the relevant types. This is the default behavior for the <code>int</code>, <code>bool</code> and <code>float</code> filters.</p> <p>When instantiating the filter object, it does not know about any sanitizers. You have two options:</p>"},{"location":"upgrade/#load-all-the-default-sanitizers","title":"Load All the Default Sanitizers","text":"<p>You can load all the Phalcon supplied sanitizers by utilizing the Phalcon\\Filter\\FilterFactory component.</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Filter\\FilterFactory;\n\n$factory = new FilterFactory();\n$locator = $factory-&gt;newInstance();\n</code></pre> Calling<code>newInstance()</code> will return a Phalcon\\Filter object with all the sanitizers registered. The sanitizers are lazy loaded so they are instantiated only when called from the locator.</p>"},{"location":"upgrade/#load-only-sanitizers-you-want","title":"Load Only Sanitizers You Want","text":"<p>You can instantiate the Phalcon\\Filter component and either use the <code>set()</code> method to set all the sanitizers you need, or pass an array in the constructor with the sanitizers you want to register.</p>"},{"location":"upgrade/#using-the-factorydefault","title":"Using the <code>FactoryDefault</code>","text":"<p>If you use the Phalcon\\Di\\FactoryDefault container, then the Phalcon\\Filter is automatically loaded in the container. You can then continue to use the service in your controllers or components as you did before. The name of the service in the Di is <code>filter</code>, just as before.</p> <p>Also components that utilize the filter service, such as the Request object, transparently use the new filter locator. No additional changes required for those components.</p>"},{"location":"upgrade/#using-a-custom-di","title":"Using a Custom <code>Di</code>","text":"<p>If you have set up all the services in the Phalcon\\Di yourself and need the filter service, you will need to change its registration as follows:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Filter\\FilterFactory;\n\n$container = new Di();\n\n$container-&gt;set(\n    'filter',\n    function () {\n        $factory = new FilterFactory();\n        return $factory-&gt;newInstance();\n    }\n);\n</code></pre> <p>NOTE</p> <p>Note that even if you register the filter service manually, the name of the service must be filter so that other components can use it</p>"},{"location":"upgrade/#constants","title":"Constants","text":"<p>The constants that the v3 <code>Phalcon\\Filter</code> have somewhat changed. </p>"},{"location":"upgrade/#removed","title":"Removed","text":"<ul> <li><code>FILTER_INT_CAST</code> (<code>int!</code>)</li> <li><code>FILTER_FLOAT_CAST</code> (<code>float!</code>)</li> </ul> <p>By default the service sanitizers cast the value to the appropriate type so these are obsolete</p> <ul> <li><code>FILTER_APHANUM</code> has been removed - replaced by <code>FILTER_ALNUM</code></li> </ul>"},{"location":"upgrade/#changed","title":"Changed","text":"<ul> <li><code>FILTER_SPECIAL_CHARS</code> has changed been removed - replaced by <code>FILTER_SPECIAL</code></li> <li><code>FILTER_ALNUM</code> - replaced <code>FILTER_ALPHANUM</code></li> <li><code>FILTER_ALPHA</code> - sanitize only alpha characters</li> <li><code>FILTER_BOOL</code> - sanitize boolean including \"yes\", \"no\", etc.</li> <li><code>FILTER_LOWERFIRST</code> - sanitze using <code>lcfirst</code></li> <li><code>FILTER_REGEX</code> - sanitize based on a pattern (<code>preg_replace</code>)</li> <li><code>FILTER_REMOVE</code> - sanitize by removing characters (<code>str_replace</code>)</li> <li><code>FILTER_REPLACE</code> - sanitize by replacing characters (<code>str_replace</code>)</li> <li><code>FILTER_SPECIAL</code> - replaced <code>FILTER_SPECIAL_CHARS</code></li> <li><code>FILTER_SPECIALFULL</code> - sanitize special chars (<code>filter_var</code>)</li> <li><code>FILTER_UPPERFIRST</code> - sanitize using <code>ucfirst</code></li> <li><code>FILTER_UPPERWORDS</code> - sanitize using <code>ucwords</code></li> </ul>"},{"location":"upgrade/#forms","title":"Forms","text":""},{"location":"upgrade/#formsform","title":"Forms\\Form","text":"<ul> <li><code>Phalcon\\Forms\\Form::clear</code> will no longer call <code>Phalcon\\Forms\\Element::clear</code>, instead it will clear/set default value itself, and <code>Phalcon\\Forms\\Element::clear</code> will now call <code>Phalcon\\Forms\\Form::clear</code> if it\u2019s assigned to the form, otherwise it will just clear itself.</li> <li><code>Phalcon\\Forms\\Form::getValue</code> will now also try to get the value by calling <code>Tag::getValue</code> or element\u2019s <code>getDefault</code> method before returning <code>null</code>, and <code>Phalcon\\Forms\\Element::getValue</code> calls <code>Tag::getDefault</code> only if it\u2019s not added to the form.</li> </ul>"},{"location":"upgrade/#html","title":"Html","text":""},{"location":"upgrade/#htmlbreadcrumbs","title":"Html\\Breadcrumbs","text":"<ul> <li>Added <code>Phalcon\\Html\\Breadcrumbs</code>, a component that creates HTML code for breadcrumbs.</li> </ul>"},{"location":"upgrade/#htmltag","title":"Html\\Tag","text":"<ul> <li>Added <code>Phalcon\\Html\\Tag</code>, a component that creates HTML elements. It will replace <code>Phalcon\\Tag</code> in a future version. This component does not use static method calls.</li> </ul>"},{"location":"upgrade/#httprequestinterface","title":"Http\\RequestInterface","text":"<ul> <li>Removed <code>isSecureRequest</code> in favor of <code>isSecure</code></li> <li>Removed <code>isSoapRequested</code> in favor of <code>isSoap</code></li> </ul>"},{"location":"upgrade/#httpresponse","title":"Http\\Response","text":"<ul> <li>Added <code>hasHeader()</code> method to <code>Phalcon\\Http\\Response</code> to provide the ability to check if a header exists.</li> <li>Added <code>Phalcon\\Http\\Response\\Cookies::getCookies</code></li> <li>Changed <code>setHeaders</code> now merges the headers with any pre-existing ones in the internal collection</li> <li>Added two new events <code>response::beforeSendHeaders</code> and <code>response::afterSendHeaders</code></li> </ul>"},{"location":"upgrade/#image","title":"Image","text":"<ul> <li>Added <code>Phalcon\\Image\\Enum</code></li> <li>Renamed <code>Phalcon\\Image\\Adapter</code> to <code>Phalcon\\Image\\Adapter\\AbstractAdapter</code></li> <li>Renamed <code>Phalcon\\Image\\Factory</code> to <code>Phalcon\\Image\\ImageFactory</code></li> <li>Removed <code>Phalcon\\Image</code></li> </ul>"},{"location":"upgrade/#imageenum-constants","title":"Image\\Enum (Constants)","text":"<p>Example: <pre><code>&lt;?php\n\nuse Phalcon\\Image\\Enum;\n\n// Resizing constraints\necho Enum::AUTO;    // prints 4\necho Enum::HEIGHT;  // prints  3\necho Enum::INVERSE; // prints  5\necho Enum::NONE;   // prints  1\necho Enum::PRECISE; // prints  6\necho Enum::TENSILE; // prints  7\necho Enum::WIDTH;   // prints  2\n\n// Flipping directions\necho Enum::HORIZONTAL; // prints  11\necho Enum::VERTICAL;   // prints  12\n</code></pre></p>"},{"location":"upgrade/#logger","title":"Logger","text":"<p>The <code>Logger</code> component has been rewritten to comply with PSR-3. This allows you to use the Phalcon\\Logger to any application that utilizes a PSR-3 logger, not just Phalcon based ones.</p> <p>In v3, the logger was incorporating the adapter in the same component. So in essence when creating a logger object, the developer was creating an adapter (file, stream etc.) with logger functionality.</p> <p>For v4, we rewrote the component to implement only the logging functionality and to accept one or more adapters that would be responsible for doing the work of logging. This immediately offers compatibility with PSR-3 and separates the responsibilities of the component. It also offers an easy way to attach more than one adapter to the logging component so that logging to multiple adapters can be achieved. By using this implementation we have reduced the code necessary for this component and removed the old <code>Logger\\Multiple</code> component.</p>"},{"location":"upgrade/#creating-a-logger-component","title":"Creating a Logger Component","text":"<pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\n\n$adapter = new Stream('/logs/application.log');\n$logger  = new Logger(\n    'messages',\n    [\n        'main' =&gt; $adapter,\n    ]\n);\n\n$logger-&gt;error('Something went wrong');\n</code></pre> <p>Registering it in the DI</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di;\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\n\n$container = new Di();\n\n$container-&gt;set(\n    'logger',\n    function () {\n        $adapter = new Stream('/logs/application.log');\n        $logger  = new Logger(\n            'messages',\n            [\n                'main' =&gt; $adapter,\n            ]\n        );\n\n        return $logger;\n    }\n);\n</code></pre>"},{"location":"upgrade/#multiple-loggers","title":"Multiple Loggers","text":"<p>The <code>Phalcon\\Logger\\Multiple</code> component has been removed. You can achieve the same functionality using the logger component and registering more than one adapter:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\n\n$adapter1 = new Stream('/logs/first-log.log');\n$adapter2 = new Stream('/remote/second-log.log');\n$adapter3 = new Stream('/manager/third-log.log');\n\n$logger = new Logger(\n    'messages',\n    [\n        'local'   =&gt; $adapter1,\n        'remote'  =&gt; $adapter2,\n        'manager' =&gt; $adapter3,\n    ]\n);\n\n// Log to all adapters\n$logger-&gt;error('Something went wrong');\n</code></pre>"},{"location":"upgrade/#messages","title":"Messages","text":"<ul> <li><code>Phalcon\\Messages\\Message</code> and its collection <code>Phalcon\\Messages\\Messages</code> are new components that handle messages for models and validation. In the past we had two components, one for validation and one for models. We have merged these two, so you should be getting back a <code>MessageInterface[]</code> back when calling <code>save</code> on a model or when retrieving validation messages.<ul> <li>Changed <code>Phalcon\\Mvc\\Model</code> to use the <code>Phalcon\\Messages\\Message</code> object for its messages</li> <li>Changed <code>Phalcon\\Validation\\*</code> to use the <code>Phalcon\\Messages\\Message</code> object for its messages</li> </ul> </li> </ul>"},{"location":"upgrade/#transactions","title":"Transactions","text":"<p>Removed in version 4.0:</p> <ul> <li>Removed <code>$logger-&gt;begin()</code></li> <li>Removed <code>$logger-&gt;commit()</code></li> </ul>"},{"location":"upgrade/#log-level","title":"Log Level","text":"<ul> <li>Removed <code>$logger-&gt;setLogLevel()</code></li> </ul>"},{"location":"upgrade/#models","title":"Models","text":"<ul> <li>You can no longer assign data to models while saving them</li> </ul>"},{"location":"upgrade/#initialization","title":"Initialization","text":"<p>The <code>getSource()</code> method has been marked as <code>final</code>. As such you can no longer override this method in your model to set the corresponding table/source of the RDBMS. Instead, you can now use the <code>initialize()</code> method and <code>setSource()</code> to set the source of your model.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Model;\n\nclass Users\n{\n    public function initialize()\n    {\n        $this-&gt;setSource('Users');\n        // ....\n    }\n}\n</code></pre>"},{"location":"upgrade/#save","title":"Save","text":"<p>The <code>save()</code> method no longer accepts parameters to set data. You can use <code>assign</code> instead.</p>"},{"location":"upgrade/#criteria","title":"Criteria","text":"<p>The second parameter of <code>Criteria::limit()</code> ('offset') must now be an integer or null. Previously there was no type requirement.</p> <pre><code>$criteria-&gt;limit(10);\n\n$criteria-&gt;limit(10, 5);\n\n$criteria-&gt;limit(10, null);\n</code></pre>"},{"location":"upgrade/#mvc","title":"MVC","text":""},{"location":"upgrade/#mvccollection","title":"Mvc\\Collection","text":"<ul> <li>Removed <code>Phalcon\\Mvc\\Collection::validationHasFailed</code></li> <li>Removed calling <code>Phalcon\\Mvc\\Collection::validate</code> with object of type <code>Phalcon\\Mvc\\Model\\ValidatorInterface</code></li> </ul>"},{"location":"upgrade/#mvcmicrolazyloader","title":"Mvc\\Micro\\Lazyloader","text":"<ul> <li>Removed <code>__call</code> in favor of <code>callMethod</code></li> </ul>"},{"location":"upgrade/#mvcmodel","title":"Mvc\\Model","text":"<ul> <li>Removed <code>Phalcon\\Model::reset</code></li> <li>Added <code>isRelationshipLoaded</code> to check if relationship is loaded</li> <li>Changed <code>Phalcon\\Model::assign</code> parameters order to <code>$data</code>, <code>$whiteList</code>, <code>$dataColumnMap</code></li> <li>Changed <code>Phalcon\\Model::findFirst</code> to return <code>null</code> instead of <code>false</code> if no record was found</li> <li>Changed <code>Phalcon\\Model::getRelated()</code> to return <code>null</code> for one to one relationships if no record was found</li> </ul>"},{"location":"upgrade/#mvcmodelcriteria","title":"Mvc\\Model\\Criteria","text":"<ul> <li>Removed <code>addWhere</code></li> <li>Removed <code>order</code></li> <li>Removed <code>order</code> in favor of <code>orderBy</code></li> </ul>"},{"location":"upgrade/#mvcmodelcriteriainterface","title":"Mvc\\Model\\CriteriaInterface","text":"<ul> <li>Added <code>distinct</code>, <code>leftJoin</code>, <code>innerJoin</code>, <code>rightJoin</code>, <code>groupBy</code>, <code>having</code>, <code>cache</code>, <code>getColumns</code>, <code>getGroupBy</code>, <code>getHaving</code></li> </ul>"},{"location":"upgrade/#mvcmodelmanager","title":"Mvc\\Model\\Manager","text":"<ul> <li><code>Load</code> no longer reuses already initialized models</li> <li>Removed <code>Phalcon\\Model\\Manager::registerNamespaceAlias()</code></li> <li>Removed <code>Phalcon\\Model\\Manager::getNamespaceAlias()</code></li> <li>Removed <code>Phalcon\\Model\\Manager::getNamespaceAliases()</code></li> <li>The signature of <code>Phalcon\\Mvc\\Model\\Manager::getRelationRecords()</code> has changed</li> <li>The signature of <code>Phalcon\\Mvc\\Model\\Manager::getBelongsToRecords()</code> has changed</li> <li>The signature of <code>Phalcon\\Mvc\\Model\\Manager::getHasOneRecords()</code> has changed</li> <li>The signature of <code>Phalcon\\Mvc\\Model\\Manager::getHasManyRecords()</code> has changed</li> </ul>"},{"location":"upgrade/#mvcmodelmanagerinterface","title":"Mvc\\Model\\ManagerInterface","text":"<ul> <li>Added <code>isVisibleModelProperty</code>, <code>keepSnapshots</code>, <code>isKeepingSnapshots</code>, <code>useDynamicUpdate</code>, <code>isUsingDynamicUpdate</code>, <code>addHasManyToMany</code>, <code>existsHasManyToMany</code>, <code>getRelationRecords</code>, <code>getHasManyToMany</code></li> <li>Removed <code>Phalcon\\Model\\ManagerInterface::getNamespaceAlias()</code></li> <li>Removed <code>Phalcon\\Model\\ManagerInterface::registerNamespaceAlias()</code></li> </ul>"},{"location":"upgrade/#mvcmodelmessageinterface","title":"Mvc\\Model\\MessageInterface","text":"<ul> <li>Added <code>setModel</code>, <code>getModel</code>, <code>setCode</code>, <code>getCode</code></li> </ul>"},{"location":"upgrade/#mvcmodelqueryinterface","title":"Mvc\\Model\\QueryInterface","text":"<ul> <li>Added <code>getSingleResult</code>, <code>setBindParams</code>, <code>getBindParams</code>, <code>setBindTypes</code>, <code>setSharedLock</code>, <code>getBindTypes</code>, <code>getSql</code></li> </ul>"},{"location":"upgrade/#mvcmodelquerybuilderinterface","title":"Mvc\\Model\\Query\\BuilderInterface","text":"<ul> <li>Added <code>offset</code></li> </ul>"},{"location":"upgrade/#mvcmodelquerybuilder","title":"Mvc\\Model\\Query\\Builder","text":"<ul> <li>Added bind support. The Query Builder has the same methods as <code>Phalcon\\Mvc\\Model\\Query</code>; <code>getBindParams</code>, <code>setBindParams</code>, <code>getBindTypes</code> and <code>setBindTypes</code>.</li> <li>Changed <code>addFrom</code> to remove third parameter <code>$with</code></li> </ul>"},{"location":"upgrade/#mvcmodelquerybuilderinterface_1","title":"Mvc\\Model\\Query\\BuilderInterface","text":"<ul> <li>Added <code>distinct</code>, <code>getDistinct</code>, <code>forUpdate</code>, <code>offset</code>, <code>getOffset</code></li> </ul>"},{"location":"upgrade/#mvcmodelrelationinterface","title":"Mvc\\Model\\RelationInterface","text":"<ul> <li>Added <code>getParams</code></li> </ul>"},{"location":"upgrade/#mvcmodelresultsetinterface","title":"Mvc\\Model\\ResultsetInterface","text":"<ul> <li>Added <code>setHydrateMode</code>, <code>getHydrateMode</code>, <code>getMessages</code>, <code>update</code>, <code>delete</code>, <code>filter</code></li> </ul>"},{"location":"upgrade/#mvcmodeltransactionmanagerinterface","title":"Mvc\\Model\\Transaction\\ManagerInterface","text":"<ul> <li>Added <code>setDbService</code>, <code>getDbService</code>, <code>setRollbackPendent</code>, <code>getRollbackPendent</code></li> </ul>"},{"location":"upgrade/#mvcmodelvalidator","title":"Mvc\\Model\\Validator*","text":"<ul> <li>Removed <code>Phalcon\\Mvc\\Model\\Validator\\*</code> in favor of <code>Phalcon\\Validation\\Validator\\*</code></li> </ul>"},{"location":"upgrade/#mvcmodelinterface","title":"Mvc\\ModelInterface","text":"<ul> <li>Added <code>getModelsMetaData</code></li> </ul>"},{"location":"upgrade/#mvcrouter","title":"Mvc\\Router","text":"<ul> <li>Removed <code>getRewriteUri()</code>. The URI needs to be passed in the <code>handle</code> method of the application object.</li> </ul>"},{"location":"upgrade/#mvcrouterinterface","title":"Mvc\\RouterInterface","text":"<ul> <li>Added <code>attach</code></li> </ul>"},{"location":"upgrade/#mvcrouterrouteinterface","title":"Mvc\\Router\\RouteInterface","text":"<ul> <li>Added <code>convert</code> so that calling <code>add</code> will return an instance that has <code>convert</code> method</li> </ul>"},{"location":"upgrade/#mvcrouterrouteinterface_1","title":"Mvc\\Router\\RouteInterface","text":"<ul> <li>Added response handler to <code>Phalcon\\Mvc\\Micro</code>, <code>Phalcon\\Mvc\\Micro::setResponseHandler</code>, to allow use of a custom response handler.</li> </ul>"},{"location":"upgrade/#mvcuser","title":"Mvc\\User","text":"<ul> <li>Removed <code>Phalcon\\Mvc\\User\\Component</code> - use <code>Phalcon\\Di\\Injectable</code> instead</li> <li>Removed <code>Phalcon\\Mvc\\User\\Module</code> - use <code>Phalcon\\Di\\Injectable</code> instead</li> <li>Removed <code>Phalcon\\Mvc\\User\\Plugin</code> - use <code>Phalcon\\Di\\Injectable</code> instead</li> </ul>"},{"location":"upgrade/#mvcviewenginevolt","title":"Mvc\\View\\Engine\\Volt","text":"<p>The options for Volt have changed (the key names). Using the old syntax will produce a deprecation warning. The new options are:</p> <ul> <li><code>always</code> - Always compile</li> <li><code>extension</code> - Extension of files</li> <li><code>separator</code> - Separator (used for the folders/routes)</li> <li><code>stat</code> - Stat each file before trying to use it</li> <li><code>path</code> - The path of the files</li> <li><code>prefix</code> - The prefix of the files</li> </ul>"},{"location":"upgrade/#paginator","title":"Paginator","text":"<ul> <li><code>getPaginate</code> now becomes <code>paginate</code></li> <li><code>$before</code> is removed and replaced with <code>$previous</code></li> <li><code>$total_pages</code> is removed since it contained the same information as <code>$last</code></li> <li>Added <code>Phalcon\\Paginator\\RepositoryInterface</code> for repository the current state of <code>paginator</code> and also optional sets the aliases for properties repository</li> </ul>"},{"location":"upgrade/#router","title":"Router","text":"<ul> <li>Removed <code>getRewriteUri()</code>. The URI needs to be passed in the <code>handle</code> method of the application object.</li> <li>You can add <code>CONNECT</code>, <code>PURGE</code>, <code>TRACE</code> routes to the Router Group. They function the same as they do in the normal Router:</li> </ul> <pre><code>use Phalcon\\Mvc\\Router\\Group;\n\n$group = new Group();\n\n$group-&gt;addConnect(\n    '/api',\n    [\n        'controller' =&gt; 'api',\n        'action'     =&gt; 'connect',\n    ]\n);\n\n$group-&gt;addPurge(\n    '/api',\n    [\n        'controller' =&gt; 'api',\n        'action'     =&gt; 'purge',\n    ]\n);\n\n$group-&gt;addTrace(\n    '/api',\n    [\n        'controller' =&gt; 'api',\n        'action'     =&gt; 'trace',\n    ]\n);\n</code></pre>"},{"location":"upgrade/#security","title":"Security","text":"<ul> <li>Removed <code>hasLibreSsl</code></li> <li>Removed <code>getSslVersionNumber</code></li> <li>Added <code>setPadding</code></li> <li>Added a retainer for the current token to be used during the checks, so when <code>getToken</code> is called the token used for checks does not change</li> </ul>"},{"location":"upgrade/#request","title":"Request","text":""},{"location":"upgrade/#httprequest","title":"Http\\Request","text":"<ul> <li>Added <code>numFiles</code> returning <code>long</code> - the number of files present in the request</li> <li>Changed <code>hasFiles</code> to return <code>bool</code> - if the request has files or not</li> </ul>"},{"location":"upgrade/#httprequestinterface_1","title":"Http\\RequestInterface","text":"<ul> <li>Added <code>numFiles</code> returning <code>int</code> - the number of files present in the request</li> <li>Changed <code>hasFiles</code> to return <code>bool</code> - if the request has files or not</li> </ul>"},{"location":"upgrade/#session","title":"Session","text":"<p><code>Session</code> and <code>Session\\Bag</code> no longer get loaded by default in <code>Phalcon\\DI\\FactoryDefault</code>. <code>Session</code> was refactored.</p> <ul> <li>Added <code>Phalcon\\Session\\Adapter\\AbstractAdapter</code></li> <li>Added <code>Phalcon\\Session\\Adapter\\Noop</code></li> <li>Added <code>Phalcon\\Session\\Adapter\\Stream</code></li> <li>Added <code>Phalcon\\Session\\Manager</code></li> <li>Added <code>Phalcon\\Session\\ManagerInterface</code></li> <li>Removed <code>Phalcon\\Session\\Adapter</code> - replaced by <code>Phalcon\\Session\\Adapter\\AbstractAdapter</code></li> <li>Removed <code>Phalcon\\Session\\AdapterInterface</code> - replaced by native <code>SessionHandlerInterface</code></li> <li>Removed <code>Phalcon\\Session\\Adapter\\Files</code> - replaced by <code>Phalcon\\Session\\Adapter\\Stream</code></li> <li>Removed <code>Phalcon\\Session\\Adapter\\Memcache</code></li> <li>Removed <code>Phalcon\\Session\\BagInterface</code></li> <li>Removed <code>Phalcon\\Session\\Factory</code></li> </ul>"},{"location":"upgrade/#sessionadapter","title":"Session\\Adapter","text":"<p>Each adapter implements PHP's <code>SessionHandlerInterface</code>. Available adapters are:</p> <ul> <li><code>Phalcon\\Session\\Adapter\\AbstractAdapter</code></li> <li><code>Phalcon\\Session\\Adapter\\Libmemcached</code></li> <li><code>Phalcon\\Session\\Adapter\\Noop</code></li> <li><code>Phalcon\\Session\\Adapter\\Redis</code></li> <li><code>Phalcon\\Session\\Adapter\\Stream</code></li> </ul>"},{"location":"upgrade/#sessionmanager","title":"Session\\Manager","text":"<ul> <li>Now is the single component that offers session manipulation by using adapters (see above). Each adapter implements PHP's <code>SessionHandlerInterface</code></li> <li>Developers can add any adapter that implements <code>SessionHandlerInterface</code></li> </ul>"},{"location":"upgrade/#tag","title":"Tag","text":"<ul> <li>Added <code>renderTitle()</code> that renders the title enclosed in <code>&lt;title&gt;</code> tags.</li> <li>Changed <code>getTitle</code>. It returns only the text. It accepts <code>prepend</code>, <code>append</code> booleans to prepend or append the relevant text to the title.</li> <li>Changed <code>textArea</code> to use <code>htmlspecialchars</code> to prevent XSS injection.</li> </ul>"},{"location":"upgrade/#text","title":"Text","text":"<p>The <code>Phalcon\\Text</code> component has been removed in favor of the <code>Phalcon\\Helper\\Str</code>. The functionality offered by <code>Phalcon\\Text</code> in v3 is replicated and enhanced in the new class: <code>Phalcon\\Helper\\Str</code>.</p>"},{"location":"upgrade/#validation","title":"Validation","text":""},{"location":"upgrade/#validationmessage","title":"Validation\\Message","text":"<ul> <li>Removed <code>Phalcon\\Validation\\Message</code> and <code>Phalcon\\Mvc\\Model\\Message</code> in favor of <code>Phalcon\\Messages\\Message</code></li> <li>Removed <code>Phalcon\\Validation\\MessageInterface</code> and <code>Phalcon\\Mvc\\Model\\MessageInterface</code> in favor of <code>Phalcon\\Messages\\MessageInterface</code></li> <li>Removed <code>Phalcon\\Validation\\Message\\Group</code> in favor of <code>Phalcon\\Messages\\Messages</code></li> <li>Validator messages have been moved inside each validator</li> </ul>"},{"location":"upgrade/#validationvalidator","title":"Validation\\Validator","text":"<ul> <li>Removed <code>isSetOption</code></li> </ul>"},{"location":"upgrade/#validationvalidatorip","title":"Validation\\Validator\\Ip","text":"<ul> <li>Added <code>Phalcon\\Validation\\Validator\\Ip</code>, class used to validate ip address fields. It allows to validate a field selecting IPv4 or IPv6, allowing private or reserved ranges and empty values if necessary.</li> </ul>"},{"location":"upgrade/#views","title":"Views","text":"<p>View caching along with the <code>viewCache</code> service have been removed from the framework because they were incompatible with the new Cache component. Developers can easily utilize a view cache from external services such as Varnish, Cloudflare etc. Additionally, developers can cache fragments by either using the <code>Phalcon\\Mvc\\View\\Simple::render()</code> or the <code>Phalcon\\Mvc\\View::toString()</code>. Those two methods return the produced HTML that can be cached in the cache backend of your choice. </p>"},{"location":"upgrade/#url","title":"Url","text":"<p>The <code>Phalcon\\Mvc\\Url</code> component has been renamed to <code>Phalcon\\Url</code>. The functionality remains the same.  </p>"},{"location":"upgrade/#cheat-sheet","title":"Cheat Sheet","text":""},{"location":"upgrade/#acl_1","title":"Acl","text":"3.4.x State 4.0.x Phalcon\\Acl Removed Phalcon\\Acl\\Adapter Renamed to Phalcon\\Acl\\Adapter\\AbstractAdapter Phalcon\\Acl\\Resource Renamed to Phalcon\\Acl\\Component New Phalcon\\Acl\\Enum"},{"location":"upgrade/#annotations","title":"Annotations","text":"3.4.x State 4.0.x Phalcon\\Annotations\\Adapter Renamed to Phalcon\\Annotations\\Adapter\\AbstractAdapter Phalcon\\Annotations\\Adapter\\Apc Removed Phalcon\\Annotations\\Adapter\\Files Renamed to Phalcon\\Annotations\\Adapter\\Stream Phalcon\\Annotations\\Adapter\\Xcache Removed Phalcon\\Annotations\\Factory Renamed to Phalcon\\Annotations\\AnnotationsFactory"},{"location":"upgrade/#application","title":"Application","text":"3.4.x State 4.0.x Phalcon\\Application Renamed to Phalcon\\Application\\AbstractApplication"},{"location":"upgrade/#assets_1","title":"Assets","text":"3.4.x State 4.0.x Phalcon\\Assets\\Resource Renamed to Phalcon\\Assets\\Asset Phalcon\\Assets\\Resource\\Css Renamed to Phalcon\\Assets\\Asset\\Css Phalcon\\Assets\\Resource\\Js Renamed to Phalcon\\Assets\\Asset\\Js"},{"location":"upgrade/#cache_1","title":"Cache","text":"3.4.x State 4.0.x Phalcon\\Cache\\Backend\\Apc Removed Phalcon\\Cache\\Backend Renamed to Phalcon\\Cache Phalcon\\Cache\\Backend\\Factory Renamed to Phalcon\\Cache\\AdapterFactory Phalcon\\Cache\\Backend\\Apcu Renamed to Phalcon\\Cache\\Adapter\\Apcu Phalcon\\Cache\\Backend\\File Renamed to Phalcon\\Cache\\Adapter\\Stream Phalcon\\Cache\\Backend\\Libmemcached Renamed to Phalcon\\Cache\\Adapter\\Libmemcached Phalcon\\Cache\\Backend\\Memcache Removed Phalcon\\Cache\\Backend\\Memory Renamed to Phalcon\\Cache\\Adapter\\Memory Phalcon\\Cache\\Backend\\Mongo Removed Phalcon\\Cache\\Backend\\Redis Renamed to Phalcon\\Cache\\Adapter\\Redis New Phalcon\\Cache\\CacheFactory Phalcon\\Cache\\Backend\\Xcache Removed Phalcon\\Cache\\Exception Renamed to Phalcon\\Cache\\Exception\\Exception New Phalcon\\Cache\\Exception\\InvalidArgumentException Phalcon\\Cache\\Frontend\\Base64 Removed Phalcon\\Cache\\Frontend\\Data Removed Phalcon\\Cache\\Frontend\\Factory Removed Phalcon\\Cache\\Frontend\\Igbinary Removed Phalcon\\Cache\\Frontend\\Json Removed Phalcon\\Cache\\Frontend\\Msgpack Removed Phalcon\\Cache\\Frontend\\None Removed Phalcon\\Cache\\Frontend\\Output Removed Phalcon\\Cache\\Multiple Removed"},{"location":"upgrade/#collection","title":"Collection","text":"3.4.x State 4.0.x New Phalcon\\Collection New Phalcon\\Collection\\Exception New Phalcon\\Collection\\ReadOnly"},{"location":"upgrade/#config","title":"Config","text":"3.4.x State 4.0.x Phalcon\\Config\\Factory Renamed to Phalcon\\Config\\ConfigFactory"},{"location":"upgrade/#container_1","title":"Container","text":"3.4.x State 4.0.x New Phalcon\\Container"},{"location":"upgrade/#db_1","title":"Db","text":"3.4.x State 4.0.x Phalcon\\Db Renamed to Phalcon\\Db\\AbstractDb Phalcon\\Db\\Adapter Renamed to Phalcon\\Db\\Adapter\\AbstractAdapter Phalcon\\Db\\Adapter\\Pdo Renamed to Phalcon\\Db\\Adapter\\Pdo\\AbstractPdo Phalcon\\Db\\Adapter\\Pdo\\Factory Renamed to Phalcon\\Db\\Adapter\\PdoFactory New Phalcon\\Db\\Enum"},{"location":"upgrade/#dispatcher_1","title":"Dispatcher","text":"3.4.x State 4.0.x Phalcon\\Dispatcher Renamed to Phalcon\\Dispatcher\\AbstractDispatcher New Phalcon\\Dispatcher\\Exception"},{"location":"upgrade/#di_1","title":"Di","text":"3.4.x State 4.0.x New Phalcon\\Di\\AbstractInjectionAware New Phalcon\\Di\\Exception\\ServiceResolutionException"},{"location":"upgrade/#domain","title":"Domain","text":"3.4.x State 4.0.x New Phalcon\\Domain\\Payload\\Payload New Phalcon\\Domain\\Payload\\PayloadFactory New Phalcon\\Domain\\Payload\\Status"},{"location":"upgrade/#factory","title":"Factory","text":"3.4.x State 4.0.x Phalcon\\Factory Renamed to Phalcon\\Factory\\AbstractFactory"},{"location":"upgrade/#filter_1","title":"Filter","text":"3.4.x State 4.0.x New Phalcon\\Filter\\FilterFactory New Phalcon\\Filter\\Sanitize\\AbsInt New Phalcon\\Filter\\Sanitize\\Alnum New Phalcon\\Filter\\Sanitize\\Alpha New Phalcon\\Filter\\Sanitize\\BoolVal New Phalcon\\Filter\\Sanitize\\Email New Phalcon\\Filter\\Sanitize\\FloatVal New Phalcon\\Filter\\Sanitize\\IntVal New Phalcon\\Filter\\Sanitize\\Lower New Phalcon\\Filter\\Sanitize\\LowerFirst New Phalcon\\Filter\\Sanitize\\Regex New Phalcon\\Filter\\Sanitize\\Remove New Phalcon\\Filter\\Sanitize\\Replace New Phalcon\\Filter\\Sanitize\\Special New Phalcon\\Filter\\Sanitize\\SpecialFull New Phalcon\\Filter\\Sanitize\\StringVal New Phalcon\\Filter\\Sanitize\\Striptags New Phalcon\\Filter\\Sanitize\\Trim New Phalcon\\Filter\\Sanitize\\Upper New Phalcon\\Filter\\Sanitize\\UpperFirst New Phalcon\\Filter\\Sanitize\\UpperWords New Phalcon\\Filter\\Sanitize\\Url"},{"location":"upgrade/#flash_1","title":"Flash","text":"3.4.x State 4.0.x Phalcon\\Flash Renamed to Phalcon\\Flash\\AbstractFlash"},{"location":"upgrade/#forms_1","title":"Forms","text":"3.4.x State 4.0.x Phalcon\\Forms\\Element Renamed to Phalcon\\Forms\\Element\\AbstractElement"},{"location":"upgrade/#helper","title":"Helper","text":"3.4.x State 4.0.x New Phalcon\\Helper\\Arr New Phalcon\\Helper\\Exception New Phalcon\\Helper\\Fs New Phalcon\\Helper\\Json New Phalcon\\Helper\\Number New Phalcon\\Helper\\Str"},{"location":"upgrade/#html_1","title":"Html","text":"3.4.x State 4.0.x New Phalcon\\Html\\Attributes New Phalcon\\Html\\Breadcrumbs New Phalcon\\Html\\Exception New Phalcon\\Html\\Helper\\AbstractHelper New Phalcon\\Html\\Helper\\Anchor New Phalcon\\Html\\Helper\\AnchorRaw New Phalcon\\Html\\Helper\\Body New Phalcon\\Html\\Helper\\Button New Phalcon\\Html\\Helper\\Close New Phalcon\\Html\\Helper\\Element New Phalcon\\Html\\Helper\\ElementRaw New Phalcon\\Html\\Helper\\Form New Phalcon\\Html\\Helper\\Img New Phalcon\\Html\\Helper\\Label New Phalcon\\Html\\Helper\\TextArea New Phalcon\\Html\\Link\\EvolvableLink New Phalcon\\Html\\Link\\EvolvableLinkProvider New Phalcon\\Html\\Link\\Link New Phalcon\\Html\\Link\\LinkProvider New Phalcon\\Html\\Link\\Serializer\\Header New Phalcon\\Html\\TagFactory"},{"location":"upgrade/#http","title":"Http","text":"3.4.x State 4.0.x New Phalcon\\Http\\Message\\AbstractCommon New Phalcon\\Http\\Message\\AbstractMessage New Phalcon\\Http\\Message\\AbstractRequest New Phalcon\\Http\\Message\\Exception\\InvalidArgumentException New Phalcon\\Http\\Message\\Request New Phalcon\\Http\\Message\\RequestFactory New Phalcon\\Http\\Message\\Response New Phalcon\\Http\\Message\\ResponseFactory New Phalcon\\Http\\Message\\ServerRequest New Phalcon\\Http\\Message\\ServerRequestFactory New Phalcon\\Http\\Message\\Stream New Phalcon\\Http\\Message\\StreamFactory New Phalcon\\Http\\Message\\Stream\\Input New Phalcon\\Http\\Message\\Stream\\Memory New Phalcon\\Http\\Message\\Stream\\Temp New Phalcon\\Http\\Message\\UploadedFile New Phalcon\\Http\\Message\\UploadedFileFactory New Phalcon\\Http\\Message\\Uri New Phalcon\\Http\\Message\\UriFactory New Phalcon\\Http\\Server\\AbstractMiddleware New Phalcon\\Http\\Server\\AbstractRequestHandler"},{"location":"upgrade/#image_1","title":"Image","text":"3.4.x State 4.0.x Phalcon\\Image Removed Phalcon\\Image\\Adapter Renamed to Phalcon\\Image\\Adapter\\AbstractAdapter New Phalcon\\Image\\Enum Phalcon\\Image\\Factory Renamed to Phalcon\\Image\\ImageFactory"},{"location":"upgrade/#logger_1","title":"Logger","text":"3.4.x State 4.0.x New Phalcon\\Logger\\AdapterFactory Phalcon\\Logger\\Adapter Renamed to Phalcon\\Logger\\Adapter\\AbstractAdapter Phalcon\\Logger\\Adapter\\Blackhole Renamed to Phalcon\\Logger\\Adapter\\Noop Phalcon\\Logger\\Adapter\\File Renamed to Phalcon\\Logger\\Adapter\\Stream Phalcon\\Logger\\Adapter\\Firephp Removed Phalcon\\Logger\\Factory Renamed to Phalcon\\Logger\\LoggerFactory Phalcon\\Logger\\Formatter Renamed to Phalcon\\Logger\\Formatter\\AbstractFormatter Phalcon\\Logger\\Formatter\\Firephp Removed Phalcon\\Logger\\Formatter\\Syslog Removed Phalcon\\Logger\\Multiple Removed"},{"location":"upgrade/#message-new-in-v4-formerly-phalconvalidationmessage-in-34","title":"Message (new in V4, Formerly Phalcon\\Validation\\Message in 3.4)","text":"3.4.x State 4.0.x New Phalcon\\Messages\\Exception New Phalcon\\Messages\\Message New Phalcon\\Messages\\Messages"},{"location":"upgrade/#mvc_1","title":"Mvc","text":"3.4.x State 4.0.x Phalcon\\Mvc\\Collection Renamed to Phalcon\\Collection Phalcon\\Mvc\\Collection\\Behavior Removed Phalcon\\Mvc\\Collection\\Behavior\\SoftDelete Removed Phalcon\\Mvc\\Collection\\Behavior\\Timestampable Removed Phalcon\\Mvc\\Collection\\Document Removed Phalcon\\Mvc\\Collection\\Exception Renamed to Phalcon\\Collection\\Exception Phalcon\\Mvc\\Collection\\Manager Removed New Phalcon\\Collection\\ReadOnly Phalcon\\Mvc\\Model\\Message Renamed to Phalcon\\Messages\\Message Phalcon\\Mvc\\Model\\MetaData\\Apc Removed Phalcon\\Mvc\\Model\\MetaData\\Files Renamed to Phalcon\\Mvc\\Model\\MetaData\\Stream Phalcon\\Mvc\\Model\\MetaData\\Memcache Removed Phalcon\\Mvc\\Model\\MetaData\\Session Removed Phalcon\\Mvc\\Model\\MetaData\\Xcache Removed Phalcon\\Mvc\\Model\\Validator Renamed to Phalcon\\Validation\\Validator Phalcon\\Mvc\\Model\\Validator\\Email Renamed to Phalcon\\Validation\\Validator\\Email Phalcon\\Mvc\\Model\\Validator\\Exclusionin Renamed to Phalcon\\Validation\\Validator\\ExclusionIn Phalcon\\Mvc\\Model\\Validator\\Inclusionin Renamed to Phalcon\\Validation\\Validator\\InclusionIn Phalcon\\Mvc\\Model\\Validator\\Ip Renamed to Phalcon\\Validation\\Validator\\Ip Phalcon\\Mvc\\Model\\Validator\\Numericality Renamed to Phalcon\\Validation\\Validator\\Numericality Phalcon\\Mvc\\Model\\Validator\\PresenceOf Renamed to Phalcon\\Validation\\Validator\\PresenceOf Phalcon\\Mvc\\Model\\Validator\\Regex Renamed to Phalcon\\Validation\\Validator\\Regex Phalcon\\Mvc\\Model\\Validator\\StringLength Renamed to Phalcon\\Validation\\Validator\\StringLength Phalcon\\Mvc\\Model\\Validator\\Uniqueness Renamed to Phalcon\\Validation\\Validator\\Uniqueness Phalcon\\Mvc\\Model\\Validator\\Url Renamed to Phalcon\\Validation\\Validator\\Url Phalcon\\Mvc\\Url Renamed to Phalcon\\Url Phalcon\\Mvc\\Url\\Exception Renamed to Phalcon\\Url\\Exception Phalcon\\Mvc\\User\\Component Renamed to Phalcon\\Di\\Injectable Phalcon\\Mvc\\User\\Module Renamed to Phalcon\\Di\\Injectable Phalcon\\Mvc\\User\\Plugin Renamed to Phalcon\\Di\\Injectable Phalcon\\Mvc\\View\\Engine Renamed to Phalcon\\Mvc\\View\\Engine\\AbstractEngine"},{"location":"upgrade/#paginator_1","title":"Paginator","text":"3.4.x State 4.0.x Phalcon\\Paginator\\Adapter Renamed to Phalcon\\Paginator\\Adapter\\AbstractAdapter Phalcon\\Paginator\\Factory Renamed to Phalcon\\Paginator\\PaginatorFactory New Phalcon\\Paginator\\Repository"},{"location":"upgrade/#queue","title":"Queue","text":"3.4.x State 4.0.x Phalcon\\Queue\\Beanstalk Removed Phalcon\\Queue\\Beanstalk\\Exception Removed Phalcon\\Queue\\Beanstalk\\Job Removed"},{"location":"upgrade/#session_1","title":"Session","text":"3.4.x State 4.0.x Phalcon\\Session\\Adapter Renamed to Phalcon\\Session\\Adapter\\AbstractAdapter Phalcon\\Session\\Adapter\\Files Renamed to Phalcon\\Session\\Adapter\\Stream New Phalcon\\Session\\Adapter\\Noop Phalcon\\Session\\Adapter\\Memcache Removed Phalcon\\Session\\Factory Renamed to Phalcon\\Session\\Manager"},{"location":"upgrade/#storage","title":"Storage","text":"3.4.x State 4.0.x New Phalcon\\Storage\\AdapterFactory New Phalcon\\Storage\\Adapter\\AbstractAdapter New Phalcon\\Storage\\Adapter\\Apcu New Phalcon\\Storage\\Adapter\\Libmemcached New Phalcon\\Storage\\Adapter\\Memory New Phalcon\\Storage\\Adapter\\Redis New Phalcon\\Storage\\Adapter\\Stream New Phalcon\\Storage\\Exception New Phalcon\\Storage\\SerializerFactory New Phalcon\\Storage\\Serializer\\AbstractSerializer New Phalcon\\Storage\\Serializer\\Base64 New Phalcon\\Storage\\Serializer\\Igbinary New Phalcon\\Storage\\Serializer\\Json New Phalcon\\Storage\\Serializer\\Msgpack New Phalcon\\Storage\\Serializer\\None New Phalcon\\Storage\\Serializer\\Php"},{"location":"upgrade/#translate","title":"Translate","text":"3.4.x State 4.0.x Phalcon\\Translate Removed Phalcon\\Translate\\Adapter Renamed to Phalcon\\Translate\\Adapter\\AbstractAdapter New Phalcon\\Translate\\InterpolatorFactory Phalcon\\Translate\\Factory Renamed to Phalcon\\Translate\\TranslateFactory"},{"location":"upgrade/#url_1","title":"Url","text":"3.4.x State 4.0.x New Phalcon\\Url New Phalcon\\Url\\Exception"},{"location":"upgrade/#validation_1","title":"Validation","text":"3.4.x State 4.0.x Phalcon\\Validation\\CombinedFieldsValidator Renamed to Phalcon\\Validation\\AbstractCombinedFieldsValidator Phalcon\\Validation\\Message Renamed to Phalcon\\Messages\\Message Phalcon\\Validation\\Message\\Group Renamed to Phalcon\\Messages\\Messages Phalcon\\Validation\\Validator Renamed to Phalcon\\Validation\\AbstractValidator New Phalcon\\Validation\\AbstractValidatorComposite New Phalcon\\Validation\\Exception New Phalcon\\Validation\\ValidatorFactory New Phalcon\\Validation\\Validator\\File\\AbstractFile New Phalcon\\Validation\\Validator\\File\\MimeType New Phalcon\\Validation\\Validator\\File\\Resolution\\Equal New Phalcon\\Validation\\Validator\\File\\Resolution\\Max New Phalcon\\Validation\\Validator\\File\\Resolution\\Min New Phalcon\\Validation\\Validator\\File\\Size\\Equal New Phalcon\\Validation\\Validator\\File\\Size\\Max New Phalcon\\Validation\\Validator\\File\\Size\\Min New Phalcon\\Validation\\Validator\\StringLength\\Max New Phalcon\\Validation\\Validator\\StringLength\\Min"},{"location":"url/","title":"Url Component","text":""},{"location":"url/#overview","title":"Overview","text":"<p>Phalcon\\Url is the component responsible of generate URLs in a Phalcon application. It can also be used to construct URLs based on routes.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Url;\n\n$url = new Url();\n\n$url-&gt;setBaseUri(\"/portal/\");\necho $url-&gt;get(\"invoices/edit/1\"); // /portal/invoices/edit/1 \n\necho $url-&gt;get(\n    [\n        \"for\"   =&gt; \"invoices-edit\", // route name\n        \"title\" =&gt; \"Edit Invoice\",  // title\n        \"id\"    =&gt; 1,               // route parameter\n    ]                             \n);\n</code></pre>"},{"location":"url/#generation","title":"Generation","text":"<p>The Phalcon\\Url component can generate URLs that are static as well as dynamic ones. Dynamic URLs can be generated also based on parameters or routes of your application, as defined using the [Router][routing] component.</p>"},{"location":"url/#static-urls","title":"Static URLs","text":"<p>Static URLs are the ones that refer to static resources. Those can be images, CSS/JS assets, videos etc. The Phalcon\\Url component offers an easy way to generate those URLs. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Url;\n\n$url = new Url();\n\necho $url-&gt;getStatic(\"img/logo.png\");\n</code></pre> <p>Along with <code>getStatic()</code>, the component also offers the getter <code>getStaticBaseUri()</code> and setter <code>setStaticBaseUri()</code> methods, which allow you to set a prefix for all of your static URLs. This functionality can be especially helpful when you need to set up a CDN or a different location on where your assets are stored. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Url;\n\n$url = new Url();\n\n$this-&gt;setStaticBaseUri('https://assets.phalcon.io/');\n\necho $url-&gt;getStaticBaseUri(); // https://assets.phalcon.io/\n</code></pre> <p>and when in need to use a CDN for your production environment:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Url;\n\n$url = new Url();\n\nif ($environment === 'production') {\n    $this-&gt;setStaticBaseUri('https://assets.phalcon.io/');\n}\n\necho $url-&gt;getStatic('img/logo.png'); // https://assets.phalcon.io/img/logo.png\n</code></pre> <p>The above code will prefix all the static assets with <code>https://assets.phalcon.io</code>, ensuring that assets in your production environment use the CDN URL, while local development loads them directly from your machine.</p> <p>NOTE</p> <p>The trailing slash in the <code>setStaticBaseUrl()</code> parameter is optional. If it is not specified, it will automatically be appended to the passed parameter</p> <p>Finally, depending on the routes you have specified, you can retrieve a static resource which is defined in a named route by passing an array to <code>getStatic()</code> and using <code>for</code> keyword as a key and the name of the route as a value.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Url;\n\n$url = new Url();\n\necho $url-&gt;getStatic(\n    [\n        'for' =&gt; 'logo-cdn',\n    ]\n);\n</code></pre>"},{"location":"url/#dynamic-urls","title":"Dynamic URLs","text":"<p>Dynamic URLs are URLs that are generated dynamically i.e. based on the routes or URLs of your application. The Phalcon\\Url component offers an easy way to generate those URLs. </p> <p>Depending of which directory of your document root your application is installed, it may have a base URI or not. For example, if your document root is <code>/var/www/htdocs</code> and your application is installed in <code>/var/www/htdocs/app</code> then your baseUri will be <code>/app/</code>. If you are using a VirtualHost or your application is installed on the document root, then your base URI is <code>/</code>. </p> <p>If you are unsure and want to find out what your base URI is, you can execute the following code in your application's folder:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Url;\n\n$url = new Url();\n\necho $url-&gt;getBaseUri();\n</code></pre> <p>By default, Phalcon will try to detect your base URI. It is recommended that you specify the base URI yourself,m because it increases performance slightly.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Url;\n\n$url = new Url();\n\necho $url-&gt;get(\"/portal/invoices/edit/1\");\n</code></pre> <p>Along with <code>get()</code>, the component also offers the getter <code>getBaseUri()</code> and setter <code>setBaseUri()</code> methods, which allow you to set a prefix for all of your URLs. This functionality can be especially helpful when you need to set up a <code>prefix</code> for your URLs i.e. if you are working with modules that have a specific prefix for all routes. </p> <pre><code>&lt;?php\n\nuse Phalcon\\Url;\n\n$url = new Url();\n\n$this-&gt;setBaseUri('/portal/');\n\necho $url-&gt;getBaseUri(); // /portal/\n\necho $url-&gt;get('invoices/edit/1'); // /portal/invoices/edit/1\n</code></pre> <p>The above code will prefix all the URLs with <code>/portal/</code>, allowing you to group URLs easier. For instance if you have the <code>InvoicesController</code> and you want the URLs to be prefixed with <code>/portal/</code>, you can use <code>setBaseUri()</code> in the <code>initialize()</code> method: </p> <pre><code>&lt;?php\n\nuse Phalcon\\Url;\nuse Phalcon\\Mvc\\Controller\n\n/**\n * @property Url $url\n */\nclass InvoicesController extends Controller\n{\n    public function initialize()\n    {\n        $this-&gt;url-&gt;setBaseUri('/portal/');\n    }\n}\n</code></pre> <p>And now we can generate any URL using <code>get()</code> in subsequent actions, that will be prefixed with <code>/portal/</code></p> <p>NOTE</p> <p>The trailing slash in the <code>setBaseUrl()</code> parameter is optional. If it is not specified, it will automatically be appended to the passed parameter</p>"},{"location":"url/#routing","title":"Routing","text":"<p>If you are using the Router with its default behavior, your application is able to match routes based on the following pattern: </p> <p>Pattern</p> <p>/:controller/:action/:params</p> <p>Therefore, it is easy to create routes that satisfy that pattern (or any other pattern defined in the router) passing a string to the method <code>get()</code>:</p> <pre><code>&lt;?php echo $url-&gt;get('products/save'); ?&gt;\n</code></pre> <p>Note that is not necessary to prepend the base URI. If you have named routes you can easily define it dynamically. For instance for the following route:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n$router\n    -&gt;add(\n        '/portal/invoices/edit/{id}',\n        [\n            'module'     =&gt; 'portal',\n            'controller' =&gt; 'invoices',\n            'action'     =&gt; 'edit',\n        ]\n    )\n    -&gt;setName('invoices-edit');\n</code></pre> <p>You can now generate a URL which is defined in the <code>invoice-edit</code> named route, by passing an array to <code>get()</code> and using <code>for</code> keyword as a key and the name of the route as a value.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Url;\n\n$url = new Url();\n\necho $url-&gt;get(\n    [\n        'for' =&gt; 'invoices-edit',\n        'id'  =&gt; 1,\n    ]\n);\n</code></pre> <p>The above will produce <code>/portal/invoices/edit/1</code>.</p>"},{"location":"url/#mod_rewrite","title":"mod_rewrite","text":"<p>Developers that are utilizing <code>mod_rewrite</code> in their Apache installations, Phalcon\\Url offers the necessary functionality to replace <code>mod_rewrite</code>. This is especially useful if the target system does not have the module installed or you cannot install it yourself.  </p> <p>The following example shows you how to replace <code>mod_rewrite</code> with Phalcon\\Url:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Url;\n\n$url = new Url();\n\n$url-&gt;setBaseUri('/app/public/index.php?_url=/'); // $_GET['_url']\n\necho $url-&gt;get('products/save'); // /app/public/index.php?_url=/portal/invoices/save\n</code></pre> <p>You can also use <code>$_SERVER['REQUEST_URI']</code>. This requires a bit more work, since we need to utilize the Router component to populate the <code>$_SERVER['REQUEST_URI']</code>. Our routes setup needs to change to:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n// ... Define routes\n\n$uri = str_replace($_SERVER['SCRIPT_NAME'], '', $_SERVER['REQUEST_URI']);\n\n$router-&gt;handle($uri);\n</code></pre> <p>and now the application can process the URI as expected:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Url;\n\n$url = new Url();\n\n$url-&gt;setBaseUri('/app/public/index.php'); // $_SERVER['REQUEST_URI']\n\necho $url-&gt;get('products/save'); // /app/public/index.php/portal/invoices/save\n</code></pre> <p>NOTE</p> <p>If you can, avoid replacing <code>mod_rewrite</code> with the code above. Having the necessary route matching mechanism handled by the web server is much faster than handling things in your own application.</p>"},{"location":"url/#viewvolt","title":"View/Volt","text":"<p>The function <code>url</code> is available in volt to generate URLs using this component:</p> <pre><code>{% raw %}\n&lt;a href='{{ url('invoices/edit/1') }}'&gt;Edit&lt;/a&gt;\n{% endraw %}\n</code></pre> <p>Generate static routes:</p> <pre><code>{% raw %}\n&lt;link rel='stylesheet' href='{{ static_url('css/style.css') }}' type='text/css' /&gt;\n{% endraw %}\n</code></pre>"},{"location":"url/#path","title":"Path","text":"<p>Although a <code>path</code> is not really a URL, the Phalcon\\Url offers methods that allow you to create paths for your application, the same way as URLs.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Url;\n\n$url = new Url();\n\necho $url-&gt;path(\"/data/app/storage/\");\n</code></pre> <p>Along with <code>path()</code>, the component also offers the getter <code>getBasePath()</code> and setter <code>setBasePath()</code> methods, which allow you to set a prefix for all of your paths.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Url;\n\n$url = new Url();\n\n$this-&gt;setBasePath('/data/app/');\n\necho $url-&gt;getBasePath(); // /data/app/\n\necho $url-&gt;path('storage/config.php'); // /data/app/storage/config.php\n</code></pre> <p>The above code will prefix all the paths with <code>/data/app/</code>.</p> <p>NOTE</p> <p>The trailing slash in the <code>setBasePath()</code> parameter is optional. If it is not specified, it will automatically be appended to the passed parameter</p>"},{"location":"url/#exceptions","title":"Exceptions","text":"<p>Any exceptions thrown in the Phalcon\\Url component will be of type Phalcon\\Url\\Exception. You can use this exception to selectively catch exceptions thrown only from this component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Url\\Exception;\nuse Phalcon\\Mvc\\Controller;\n\nclass IndexController extends Controller\n{\n    public function index()\n    {\n        try {\n            // Get some configuration values\n            $this-&gt;url-&gt;get('/portal/invoices/list');\n        } catch (Exception $ex) {\n            echo $ex-&gt;getMessage();\n        }\n    }\n}\n</code></pre>"},{"location":"url/#custom","title":"Custom","text":"<p>The [Phalcon\\UrlInterface][url-interface] is available if you wish to implement your own <code>Url</code> component. Implementing this interface will ensure that your custom component will work with the Phalcon.</p>"},{"location":"url/#dependency-injection","title":"Dependency Injection","text":"<p>If you use the Phalcon\\Di\\FactoryDefault container, the Phalcon\\Url is already registered for you. However you might want to override the default registration in order to set your own <code>setBaseUri()</code>. Alternatively if you are not using the Phalcon\\Di\\FactoryDefault and instead are using the Phalcon\\Di the registration is the same. By doing so, you will be able to access your configuration object from controllers, models, views and any component that implements <code>Injectable</code>.</p> <p>An example of the registration of the service as well as accessing it is below:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Url;\n\n// Create a container\n$container = new FactoryDefault();\n\n$container-&gt;set(\n    'url',\n    function () {\n        $url = new Url();\n\n        $url-&gt;setBaseUri('/portal/');\n\n        return $url;\n    },\n    true\n);\n</code></pre> <p>The component is now available in your controllers using the <code>url</code> key</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Url;\n\n/**\n * @property Url $url\n */\nclass MyController extends Controller\n{\n    private function getUrl(): string\n    {\n        return $this-&gt;url-&gt;get('/portal/invoices/link');\n    }\n}\n</code></pre> <p>Also in your views (Volt syntax) the <code>url</code> helper method offers the same functionality:</p> <pre><code>{% raw %}{{ url('/portal/invoices/link') }}{% endraw %}\n</code></pre> <p>You can of course access the object the same way as any registered service in the Di container:</p> <pre><code>{% raw %}{{ url.get('/portal/invoices/link') }}{% endraw %}\n</code></pre>"},{"location":"use-case/","title":"Use Case","text":"<p>Throughout this documentation we are going to assume that we are building an accounting application. </p>"},{"location":"use-case/#requirements","title":"Requirements","text":"<ul> <li>MVC application using Phalcon\\Mvc\\Application</li> <li>Store data in a database (MariaDB/MySQL)</li> <li>Offer a UI for users to work<ul> <li>Login page</li> <li>Administration area<ul> <li>Cache management</li> <li>Permissions</li> <li>Products CRUD</li> <li>Users CRUD</li> </ul> </li> <li>Accounting department area<ul> <li>Invoices</li> <li>Customers</li> <li>Payments</li> </ul> </li> <li>Customer portal area<ul> <li>Invoices (view)</li> <li>Payment</li> <li>Reports</li> </ul> </li> </ul> </li> </ul>"},{"location":"use-case/#groups-user-roles","title":"Groups - User Roles","text":"Group Description Guests Users that are not logged in, visitors to the site Customers Users that have purchased products Accounting Users of the accounting department Managers Accounting department managers Administrators Full access to the whole application"},{"location":"use-case/#endpoints","title":"Endpoints","text":"Endpoint Description <code>/login</code> Path <code>/session/login</code>. Presents the login screen <code>/logout</code> Path <code>/session/logout</code>. Logs user out, redirects to <code>/login</code> <code>/portal/invoices/list</code> List invoices for the currently logged in customer <code>/portal/invoices/view/{0-9}</code> View invoice for the currently logged in customer <code>/portal/invoices/pay/{0-9}</code> Pay invoice (payment gateway) <code>/portal/reports/list</code> List available reports for the logged in customer <code>/portal/reports/view/{0-9}</code> View report for this customer <code>/accounting/invoices/add</code> Add new invoice <code>/accounting/invoices/edit/{0-9}</code> Edit an invoice <code>/accounting/invoices/view/{0-9}</code> View an invoice <code>/accounting/invoices/list</code> List all invoices <code>/accounting/invoices/void/{0-9}</code> Void an invoice <code>/admin/cache/view</code> View all cache items <code>/admin/cache/delete/{0-9}</code> Delete a cache item <code>/admin/cache/void</code> Void the whole cache <code>/admin/permissions/list</code> Show the current permissions <code>/admin/permissions/add</code> Add a new permission <code>/admin/permissions/edit/{0-9}</code> Edit a permission <code>/admin/products/list</code> List all products <code>/admin/products/add</code> Add a product <code>/admin/products/edit/{0-9}</code> Edit a product <code>/admin/products/delete/{0-9}</code> Delete a product <code>/admin/products/view/{0-9}</code> View a product <code>/admin/users/list</code> List all users <code>/admin/users/add</code> Add a user <code>/admin/users/edit/{0-9}</code> Edit a user <code>/admin/users/delete/{0-9}</code> Delete a user <code>/admin/users/view/{0-9}</code> View a user"},{"location":"validation/","title":"Validation Component","text":""},{"location":"validation/#overview","title":"Overview","text":"<p>Phalcon\\Validation is an independent validation component that validates an arbitrary set of data. This component can be used to implement validation rules on data objects that do not belong to a model or collection.</p> <p>The following example shows its basic usage:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Email;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\n\n$validation = new Validation();\n\n$validation-&gt;add(\n    'name',\n    new PresenceOf(\n        [\n            'message' =&gt; 'The name is required',\n        ]\n    )\n);\n\n$validation-&gt;add(\n    'email',\n    new PresenceOf(\n        [\n            'message' =&gt; 'The e-mail is required',\n        ]\n    )\n);\n\n$validation-&gt;add(\n    'email',\n    new Email(\n        [\n            'message' =&gt; 'The e-mail is not valid',\n        ]\n    )\n);\n\n$messages = $validation-&gt;validate($_POST);\n\nif (count($messages)) {\n    foreach ($messages as $message) {\n        echo $message, '&lt;br&gt;';\n    }\n}\n</code></pre> <p>The loosely-coupled design of this component allows you to create your own validators along with the ones provided by the framework.</p>"},{"location":"validation/#methods","title":"Methods","text":"<pre><code>public function __construct(\n    array $validators = []\n)\n</code></pre> <p><pre><code>public function add(\n    mixed $field, \n    ValidatorInterface $validator\n): ValidationInterface\n</code></pre> Adds a validator to a field</p> <p><pre><code>public function appendMessage(\n    MessageInterface $message\n): ValidationInterface\n</code></pre> Appends a message to the messages list</p> <p><pre><code>public function bind(\n    object $entity, \n    array | object $$data\n): ValidationInterface\n</code></pre> Assigns the data to an entity. The entity is used to obtain the validation values</p> <p><pre><code>public function getEntity(): object\n</code></pre> Returns the bound entity</p> <p><pre><code>public function getFilters(\n    string $field = null\n): mixed | null\n</code></pre> Returns all the filters or a specific one</p> <p><pre><code>public function getLabel(\n    string $field\n): string\n</code></pre> Get label for field</p> <p><pre><code>public function getMessages(): Messages\n</code></pre> Returns the registered validators</p> <p><pre><code>public function getValidators(): array\n</code></pre> Returns the validators added to the validation</p> <p><pre><code>public function getValue(\n    string $field\n): mixed | null\n</code></pre> Gets a value to validate in the array/object data source</p> <p><pre><code>public function rule(\n    mixed $field, \n    ValidatorInterface $validator\n): ValidationInterface\n</code></pre> Alias of <code>add</code> method</p> <p><pre><code>public function rules(\n    mixed $field, \n    array $validators\n): ValidationInterface\n</code></pre> Adds the validators to a field</p> <p><pre><code>public function setEntity(\n    object $entity\n): void\n</code></pre> Sets the bound entity</p> <p><pre><code>public function setFilters(\n    string $field, \n    array | string $filters\n): ValidationInterface\n</code></pre> Adds filters to the field</p> <p><pre><code>public function setLabels(\n    array $labels\n): void\n</code></pre> Adds labels for fields</p> <p><pre><code>public function validate(\n    array | object $data = null, \n    object $entity = null\n): Messages\n</code></pre> Validate a set of data according to a set of rules</p>"},{"location":"validation/#activation","title":"Activation","text":"<p>Validation chains can be initialized in a direct manner by just adding validators to the Phalcon\\Validation object. You can put your validations in a separate file for better code reuse and organization.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Email;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\n\nclass MyValidation extends Validation\n{\n    public function initialize()\n    {\n        $this-&gt;add(\n            'name',\n            new PresenceOf(\n                [\n                    'message' =&gt; 'The name is required',\n                ]\n            )\n        );\n\n        $this-&gt;add(\n            'email',\n            new PresenceOf(\n                [\n                    'message' =&gt; 'The e-mail is required',\n                ]\n            )\n        );\n\n        $this-&gt;add(\n            'email',\n            new Email(\n                [\n                    'message' =&gt; 'The e-mail is not valid',\n                ]\n            )\n        );\n    }\n}\n</code></pre> <p>Then initialize and use your own validator:</p> <pre><code>&lt;?php\n\n$validation = new MyValidation();\n\n$messages = $validation-&gt;validate($_POST);\n\nif (count($messages)) {\n    foreach ($messages as $message) {\n        echo $message, '&lt;br&gt;';\n    }\n}\n</code></pre>"},{"location":"validation/#validators","title":"Validators","text":"<p>Phalcon offers a set of built-in validators for this component:</p> Class Validates Phalcon\\Validation\\Validator\\Alnum Alphanumeric character(s) Phalcon\\Validation\\Validator\\Alpha Alphabet character(s). Phalcon\\Validation\\Validator\\Between Between two values Phalcon\\Validation\\Validator\\Callback Callback function Phalcon\\Validation\\Validator\\Confirmation Identical field values Phalcon\\Validation\\Validator\\CreditCard Credit card number Phalcon\\Validation\\Validator\\Date Date. Phalcon\\Validation\\Validator\\Digit Numeric character(s). Phalcon\\Validation\\Validator\\Email Email Phalcon\\Validation\\Validator\\ExclusionIn Not within value set Phalcon\\Validation\\Validator\\File File Phalcon\\Validation\\Validator\\File\\MimeType Mimetype File Phalcon\\Validation\\Validator\\File\\Resolution\\Equal Equal resolution of File Phalcon\\Validation\\Validator\\File\\Resolution\\Max Maximum resolution of File Phalcon\\Validation\\Validator\\File\\Resolution\\Min Minimum resolution of File Phalcon\\Validation\\Validator\\File\\Size\\Equal Equal File Size Phalcon\\Validation\\Validator\\File\\Size\\Max Maximum File Size Phalcon\\Validation\\Validator\\File\\Size\\Min Minimum File Size Phalcon\\Validation\\Validator\\Identical Equal specific value Phalcon\\Validation\\Validator\\InclusionIn Within value set Phalcon\\Validation\\Validator\\Ip IP Phalcon\\Validation\\Validator\\Numericality Numeric Value Phalcon\\Validation\\Validator\\PresenceOf Not <code>null</code> or empty Phalcon\\Validation\\Validator\\Regex Regex Phalcon\\Validation\\Validator\\StringLength Length Phalcon\\Validation\\Validator\\StringLength\\Max Maximum Length Phalcon\\Validation\\Validator\\StringLength\\Min Minimum Length Phalcon\\Validation\\Validator\\Uniqueness Unique in Model Phalcon\\Validation\\Validator\\Url URL"},{"location":"validation/#alnum","title":"Alnum","text":"<p>Check for alphanumeric character(s)</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Alnum;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"username\",\n    new Alnum(\n        [\n            \"message\" =&gt; \":field must contain only alphanumeric characters\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"username\",\n        \"name\",\n    ],\n    new Alnum(\n        [\n            \"message\" =&gt; [\n                \"username\" =&gt; \"username must contain only alphanumeric characters\",\n                \"name\"     =&gt; \"name must contain only alphanumeric characters\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#alpha","title":"Alpha","text":"<p>Check for alphabetic character(s)</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Alpha;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"username\",\n    new Alpha(\n        [\n            \"message\" =&gt; \":field must contain only letters\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"username\",\n        \"name\",\n    ],\n    new Alpha(\n        [\n            \"message\" =&gt; [\n                \"username\" =&gt; \"username must contain only letters\",\n                \"name\"     =&gt; \"name must contain only letters\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#between","title":"Between","text":"<p>Validates that a value is between an inclusive range of two values. The validation passes if for a value <code>L</code>, minimum is less or equal than <code>L</code> and <code>L</code> is less or equal than the maximum. The boundaries are included in this validation. The formula is:</p> <pre><code>minimum &lt;= value &lt;= maximum\n</code></pre> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Between;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"price\",\n    new Between(\n        [\n            \"minimum\" =&gt; 0,\n            \"maximum\" =&gt; 100,\n            \"message\" =&gt; \"The price must be between 0 and 100\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"price\",\n        \"amount\",\n    ],\n    new Between(\n        [\n            \"minimum\" =&gt; [\n                \"price\"  =&gt; 0,\n                \"amount\" =&gt; 0,\n            ],\n            \"maximum\" =&gt; [\n                \"price\"  =&gt; 100,\n                \"amount\" =&gt; 50,\n            ],\n            \"message\" =&gt; [\n                \"price\"  =&gt; \"The price must be between 0 and 100\",\n                \"amount\" =&gt; \"The amount must be between 0 and 50\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#callback","title":"Callback","text":"<p>By using Phalcon\\Validation\\Validator\\Callback you can execute custom function which must return boolean or new validator class which will be used to validate the same field. By returning <code>true</code> validation will be successful, returning <code>false</code> will mean validation failed. When executing this validator Phalcon will pass data depending what it is - if it's an entity (i.e. a model, a <code>stdClass</code> etc.) then entity will be passed, otherwise data (i.e an array like <code>$_POST</code>). There is example:</p> <pre><code>&lt;?php\n\nuse \\Phalcon\\Validation;\nuse \\Phalcon\\Validation\\Validator\\Callback;\nuse \\Phalcon\\Validation\\Validator\\PresenceOf;\n\n$validation = new Validation();\n$validation-&gt;add(\n    'amount',\n    new Callback(\n        [\n            'callback' =&gt; function ($data) {\n                return $data['amount'] % 2 == 0;\n            },\n            'message'  =&gt; 'Only even number of products are accepted'\n        ]\n    )\n);\n$validation-&gt;add(\n    'amount',\n    new Callback(\n        [\n            'callback' =&gt; function ($data) {\n                if ($data['amount'] % 2 == 0) {\n                    return $data['amount'] != 2;\n                }\n\n                return true;\n            },\n            'message' =&gt; \"You cannot buy 2 products\"\n        ]\n    )\n);\n$validation-&gt;add(\n    'description',\n    new Callback(\n        [\n            'callback' =&gt; function ($data) {\n                if ($data['amount'] &gt;= 10) {\n                    return new PresenceOf(\n                        [\n                            'message' =&gt; 'You must write why you need so big amount.'\n                        ]\n                    );\n                }\n\n                return true;\n            }\n        ]\n    )\n);\n\n// Validator #1\n$messages = $validation-&gt;validate(['amount' =&gt; 1]);\n// Validator #2\n$messages = $validation-&gt;validate(['amount' =&gt; 2]);\n// Validator #3\n$messages = $validation-&gt;validate(['amount' =&gt; 10]);\n</code></pre> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Callback;\nuse Phalcon\\Validation\\Validator\\Numericality;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    [\"user\", \"admin\"],\n    new Callback(\n        [\n            \"message\" =&gt; \"User cannot belong to two groups\",\n            \"callback\" =&gt; function($data) {\n                if (!empty($data-&gt;getUser()) &amp;&amp; \n                    !empty($data-&gt;getAdmin())) {\n                    return false;\n                }\n\n                return true;\n            }\n        ]\n    )\n);\n\n$validator-&gt;add(\n    \"amount\",\n    new Callback(\n        [\n            \"callback\" =&gt; function($data) {\n                if (!empty($data-&gt;getProduct())) {\n                    return new Numericality(\n                        [\n                            \"message\" =&gt; \"Amount must be a number.\"\n                        ]\n                    );\n                }\n            }\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#confirmation","title":"Confirmation","text":"<p>Checks that two values have the same value</p> <pre><code>&lt;?php \n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Confirmation;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"password\",\n    new Confirmation(\n        [\n            \"message\" =&gt; \"Password doesn't match confirmation\",\n            \"with\"    =&gt; \"confirmPassword\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"password\",\n        \"email\",\n    ],\n    new Confirmation(\n        [\n            \"message\" =&gt; [\n                \"password\" =&gt; \"Password doesn't match confirmation\",\n                \"email\"    =&gt; \"Email doesn't match confirmation\",\n            ],\n            \"with\" =&gt; [\n                \"password\" =&gt; \"confirmPassword\",\n                \"email\"    =&gt; \"confirmEmail\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#creditcard","title":"CreditCard","text":"<p>Checks if a value has a valid credit card number</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\CreditCard;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"creditCard\",\n    new CreditCard(\n        [\n            \"message\" =&gt; \"The credit card number is not valid\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"creditCard\",\n        \"secondCreditCard\",\n    ],\n    new CreditCard(\n        [\n            \"message\" =&gt; [\n                \"creditCard\"       =&gt; \"The credit card number is not valid\",\n                \"secondCreditCard\" =&gt; \"The second credit card number is not valid\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#date","title":"Date","text":"<p>Checks if a value is a valid date</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Date as DateValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"date\",\n    new DateValidator(\n        [\n            \"format\"  =&gt; \"d-m-Y\",\n            \"message\" =&gt; \"The date is invalid\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"date\",\n        \"anotherDate\",\n    ],\n    new DateValidator(\n        [\n            \"format\" =&gt; [\n                \"date\"        =&gt; \"d-m-Y\",\n                \"anotherDate\" =&gt; \"Y-m-d\",\n            ],\n            \"message\" =&gt; [\n                \"date\"        =&gt; \"The date is invalid\",\n                \"anotherDate\" =&gt; \"The another date is invalid\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#digit","title":"Digit","text":"<p>Check for numeric character(s)</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Digit;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"height\",\n    new Digit(\n        [\n            \"message\" =&gt; \":field must be numeric\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"height\",\n        \"width\",\n    ],\n    new Digit(\n        [\n            \"message\" =&gt; [\n                \"height\" =&gt; \"height must be numeric\",\n                \"width\"  =&gt; \"width must be numeric\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#email","title":"Email","text":"<p>Checks if a value has a correct e-mail format</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Email;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"email\",\n    new Email(\n        [\n            \"message\" =&gt; \"The e-mail is not valid\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"email\",\n        \"anotherEmail\",\n    ],\n    new Email(\n        [\n            \"message\" =&gt; [\n                \"email\"        =&gt; \"The e-mail is not valid\",\n                \"anotherEmail\" =&gt; \"The another e-mail is not valid\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#exclusionin","title":"ExclusionIn","text":"<p>Check if a value is not included into a list of values</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\ExclusionIn;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"status\",\n    new ExclusionIn(\n        [\n            \"message\" =&gt; \"The status must not be A or B\",\n            \"domain\"  =&gt; [\n                \"A\",\n                \"B\",\n            ],\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"status\",\n        \"type\",\n    ],\n    new ExclusionIn(\n        [\n            \"message\" =&gt; [\n                \"status\" =&gt; \"The status must not be A or B\",\n                \"type\"   =&gt; \"The type must not be 1 or \"\n            ],\n            \"domain\" =&gt; [\n                \"status\" =&gt; [\n                    \"A\",\n                    \"B\",\n                ],\n                \"type\"   =&gt; [1, 2],\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#file","title":"File","text":"<p>Checks if a value has a correct file</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\File;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"file\",\n    new File(\n        [\n            \"maxSize\"              =&gt; \"2M\",\n            \"messageSize\"          =&gt; \":field exceeds the max size (:size)\",\n            \"allowedTypes\"         =&gt; [\n                \"image/jpeg\",\n                \"image/png\",\n            ],\n            \"messageType\"          =&gt; \"Allowed file types are :types\",\n            \"maxResolution\"        =&gt; \"800x600\",\n            \"messageMaxResolution\" =&gt; \"Max resolution of :field is :resolution\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"file\",\n        \"anotherFile\",\n    ],\n    new File(\n        [\n            \"maxSize\" =&gt; [\n                \"file\"        =&gt; \"2M\",\n                \"anotherFile\" =&gt; \"4M\",\n            ],\n            \"messageSize\" =&gt; [\n                \"file\"        =&gt; \"file exceeds the max size 2M\",\n                \"anotherFile\" =&gt; \"anotherFile exceeds the max size 4M\",\n            \"allowedTypes\" =&gt; [\n                \"file\"        =&gt; [\n                    \"image/jpeg\",\n                    \"image/png\",\n                ],\n                \"anotherFile\" =&gt; [\n                    \"image/gif\",\n                    \"image/bmp\",\n                ],\n            ],\n            \"messageType\" =&gt; [\n                \"file\"        =&gt; \"Allowed file types are image/jpeg and image/png\",\n                \"anotherFile\" =&gt; \"Allowed file types are image/gif and image/bmp\",\n            ],\n            \"maxResolution\" =&gt; [\n                \"file\"        =&gt; \"800x600\",\n                \"anotherFile\" =&gt; \"1024x768\",\n            ],\n            \"messageMaxResolution\" =&gt; [\n                \"file\"        =&gt; \"Max resolution of file is 800x600\",\n                \"anotherFile\" =&gt; \"Max resolution of file is 1024x768\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#file-mimetype","title":"File MimeType","text":"<p>Checks if a value has a correct file mime type</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\File\\MimeType;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"file\",\n    new MimeType(\n        [\n            \"types\" =&gt; [\n                \"image/jpeg\",\n                \"image/png\",\n            ],\n            \"message\" =&gt; \"Allowed file types are :types\"\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"file\",\n        \"anotherFile\",\n    ],\n    new MimeType(\n        [\n            \"types\" =&gt; [\n                \"file\"        =&gt; [\n                    \"image/jpeg\",\n                    \"image/png\",\n                ],\n                \"anotherFile\" =&gt; [\n                    \"image/gif\",\n                    \"image/bmp\",\n                ],\n            ],\n            \"message\" =&gt; [\n                \"file\"        =&gt; \"Allowed file types are image/jpeg and image/png\",\n                \"anotherFile\" =&gt; \"Allowed file types are image/gif and image/bmp\",\n            ]\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#file-resolution-equal","title":"File Resolution Equal","text":"<p>Checks if a file has the right resolution</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\File\\Resolution\\Equal;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"file\",\n    new Equal(\n        [\n            \"resolution\" =&gt; \"800x600\",\n            \"message\"    =&gt; \"The resolution of the field :field has to be equal :resolution\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"file\",\n        \"anotherFile\",\n    ],\n    new Equal(\n        [\n            \"resolution\" =&gt; [\n                \"file\"        =&gt; \"800x600\",\n                \"anotherFile\" =&gt; \"1024x768\",\n            ],\n            \"message\" =&gt; [\n                \"file\"        =&gt; \"Equal resolution of file has to be 800x600\",\n                \"anotherFile\" =&gt; \"Equal resolution of file has to be 1024x768\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#file-resolution-max","title":"File Resolution Max","text":"<p>Checks if a file has the right resolution</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\File\\Resolution\\Max;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"file\",\n    new Max(\n        [\n            \"resolution\"      =&gt; \"800x600\",\n            \"message\"  =&gt; \"Max resolution of :field is :resolution\",\n            \"included\" =&gt; true,\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"file\",\n        \"anotherFile\",\n    ],\n    new Max(\n        [\n            \"resolution\" =&gt; [\n                \"file\"        =&gt; \"800x600\",\n                \"anotherFile\" =&gt; \"1024x768\",\n            ],\n            \"included\" =&gt; [\n                \"file\"        =&gt; false,\n                \"anotherFile\" =&gt; true,\n            ],\n            \"message\" =&gt; [\n                \"file\"        =&gt; \"Max resolution of file is 800x600\",\n                \"anotherFile\" =&gt; \"Max resolution of file is 1024x768\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#file-resolution-min","title":"File Resolution Min","text":"<p>Checks if a file has the right resolution</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\File\\Resolution\\Min;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"file\",\n    new Min(\n        [\n            \"resolution\" =&gt; \"800x600\",\n            \"message\"    =&gt; \"Min resolution of :field is :resolution\",\n            \"included\"   =&gt; true,\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"file\",\n        \"anotherFile\",\n    ],\n    new Min(\n        [\n            \"resolution\" =&gt; [\n                \"file\"        =&gt; \"800x600\",\n                \"anotherFile\" =&gt; \"1024x768\",\n            ],\n            \"included\" =&gt; [\n                \"file\"        =&gt; false,\n                \"anotherFile\" =&gt; true,\n            ],\n            \"message\" =&gt; [\n                \"file\"        =&gt; \"Min resolution of file is 800x600\",\n                \"anotherFile\" =&gt; \"Min resolution of file is 1024x768\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#file-size-equal","title":"File Size Equal","text":"<p>Checks if a value has a correct file</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\File\\Size\\Equal;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"file\",\n    new Equal(\n        [\n            \"size\"     =&gt; \"2M\",\n            \"included\" =&gt; true,\n            \"message\"  =&gt; \":field exceeds the size (:size)\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"file\",\n        \"anotherFile\",\n    ],\n    new Equal(\n        [\n            \"size\" =&gt; [\n                \"file\"        =&gt; \"2M\",\n                \"anotherFile\" =&gt; \"4M\",\n            ],\n            \"included\" =&gt; [\n                \"file\"        =&gt; false,\n                \"anotherFile\" =&gt; true,\n            ],\n            \"message\" =&gt; [\n                \"file\"        =&gt; \"file does not have the correct size\",\n                \"anotherFile\" =&gt; \"anotherFile wrong size (4MB)\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#file-size-max","title":"File Size Max","text":"<p>Checks if a value has a correct file</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\File\\Size\\Max;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"file\",\n    new Max(\n        [\n            \"size\"     =&gt; \"2M\",\n            \"included\" =&gt; true,\n            \"message\"  =&gt; \":field exceeds the max size (:size)\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"file\",\n        \"anotherFile\",\n    ],\n    new Max(\n        [\n            \"size\" =&gt; [\n                \"file\"        =&gt; \"2M\",\n                \"anotherFile\" =&gt; \"4M\",\n            ],\n            \"included\" =&gt; [\n                \"file\"        =&gt; false,\n                \"anotherFile\" =&gt; true,\n            ],\n            \"message\" =&gt; [\n                \"file\"        =&gt; \"file exceeds the max size 2M\",\n                \"anotherFile\" =&gt; \"anotherFile exceeds the max size 4M\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#file-size-min","title":"File Size Min","text":"<p>Checks if a value has a correct file</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\File\\Size\\Min;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"file\",\n    new Min(\n        [\n            \"size\"     =&gt; \"2M\",\n            \"included\" =&gt; true,\n            \"message\"  =&gt; \":field exceeds the min size (:size)\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"file\",\n        \"anotherFile\",\n    ],\n    new Min(\n        [\n            \"size\" =&gt; [\n                \"file\"        =&gt; \"2M\",\n                \"anotherFile\" =&gt; \"4M\",\n            ],\n            \"included\" =&gt; [\n                \"file\"        =&gt; false,\n                \"anotherFile\" =&gt; true,\n            ],\n            \"message\" =&gt; [\n                \"file\"        =&gt; \"file exceeds the min size 2M\",\n                \"anotherFile\" =&gt; \"anotherFile exceeds the min size 4M\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#identical","title":"Identical","text":"<p>Checks if a value is identical to other</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Identical;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"terms\",\n    new Identical(\n        [\n            \"accepted\" =&gt; \"yes\",\n            \"message\" =&gt; \"Terms and conditions must be accepted\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"terms\",\n        \"anotherTerms\",\n    ],\n    new Identical(\n        [\n            \"accepted\" =&gt; [\n                \"terms\"        =&gt; \"yes\",\n                \"anotherTerms\" =&gt; \"yes\",\n            ],\n            \"message\" =&gt; [\n                \"terms\"        =&gt; \"Terms and conditions must be accepted\",\n                \"anotherTerms\" =&gt; \"Another terms  must be accepted\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#inclusionin","title":"InclusionIn","text":"<p>Check if a value is included into a list of values</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\InclusionIn;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"status\",\n    new InclusionIn(\n        [\n            \"message\" =&gt; \"The status must be A or B\",\n            \"domain\"  =&gt; [\"A\", \"B\"],\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"status\",\n        \"type\",\n    ],\n    new InclusionIn(\n        [\n            \"message\" =&gt; [\n                \"status\" =&gt; \"The status must be A or B\",\n                \"type\"   =&gt; \"The status must be 1 or 2\",\n            ],\n            \"domain\" =&gt; [\n                \"status\" =&gt; [\"A\", \"B\"],\n                \"type\"   =&gt; [1, 2],\n            ]\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#ip","title":"Ip","text":"<p>Check for IP addresses</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Ip;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"ip_address\",\n    new Ip(\n        [\n            \"message\"       =&gt; \":field must contain only ip addresses\",\n            // v6 and v4. The same if not specified\n            \"version\"       =&gt; IP::VERSION_4 | Ip::VERSION_6, \n            // False if not specified. Ignored for v6\n            \"allowReserved\" =&gt; false,\n            // False if not specified\n            \"allowPrivate\"  =&gt; false,\n            \"allowEmpty\"    =&gt; false,\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"source_address\",\n        \"destination_address\",\n    ],\n    new Ip(\n        [\n            \"message\" =&gt; [\n                \"source_address\"      =&gt; \"source_address must be a valid IP address\",\n                \"destination_address\" =&gt; \"destination_address must be a valid IP address\",\n            ],\n            \"version\" =&gt; [\n                 \"source_address\"      =&gt; Ip::VERSION_4 | Ip::VERSION_6,\n                 \"destination_address\" =&gt; Ip::VERSION_4,\n            ],\n            \"allowReserved\" =&gt; [\n                 \"source_address\"      =&gt; false,\n                 \"destination_address\" =&gt; true,\n            ],\n            \"allowPrivate\" =&gt; [\n                 \"source_address\"      =&gt; false,\n                 \"destination_address\" =&gt; true,\n            ],\n            \"allowEmpty\" =&gt; [\n                 \"source_address\"      =&gt; false,\n                 \"destination_address\" =&gt; true,\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#numericality","title":"Numericality","text":"<p>Check for a valid numeric value</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Numericality;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"price\",\n    new Numericality(\n        [\n            \"message\" =&gt; \":field is not numeric\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"price\",\n        \"amount\",\n    ],\n    new Numericality(\n        [\n            \"message\" =&gt; [\n                \"price\"  =&gt; \"price is not numeric\",\n                \"amount\" =&gt; \"amount is not numeric\",\n            ]\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#presenceof","title":"PresenceOf","text":"<pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\n\n$validation = new Validation();\n\n$validation-&gt;add(\n    'name',\n    new PresenceOf(\n        [\n            'message' =&gt; 'The name is required',\n        ]\n    )\n);\n);\n</code></pre>"},{"location":"validation/#regex","title":"Regex","text":"<p>Validates a field based on a regex pattern.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Regex;\n\n$validation = new Validation();\n\n$validation-&gt;add(\n    'telephone',\n    new Regex(\n        [\n            'message' =&gt; 'The telephone is required',\n            'pattern' =&gt; '/\\+1 [0-9]+/',\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#stringlength","title":"StringLength","text":"<p>Validates that a string has the specified maximum and minimum constraints. The validation passes if for a string length <code>L</code>, minimum is less or equal than <code>L</code> and <code>L</code> is less or equal than the maximum. The boundaries are included in this validation. The formula is:</p> <pre><code>minimum &lt;= string length &lt;= maximum\n</code></pre> <p>This validator works like a container.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\StringLength;\n\n$validator = new Validation();\n\n$validation-&gt;add(\n    \"name_last\",\n    new StringLength(\n        [\n            \"max\"             =&gt; 50,\n            \"min\"             =&gt; 2,\n            \"messageMaximum\"  =&gt; \"Name too long\",\n            \"messageMinimum\"  =&gt; \"Only initials please\",\n            \"includedMaximum\" =&gt; true,\n            \"includedMinimum\" =&gt; false,\n        ]\n    )\n);\n\n$validation-&gt;add(\n    [\n        \"name_last\",\n        \"name_first\",\n    ],\n    new StringLength(\n        [\n            \"max\" =&gt; [\n                \"name_last\"  =&gt; 50,\n                \"name_first\" =&gt; 40,\n            ],\n            \"min\" =&gt; [\n                \"name_last\"  =&gt; 2,\n                \"name_first\" =&gt; 4,\n            ],\n            \"messageMaximum\" =&gt; [\n                \"name_last\"  =&gt; \"Last name too short\",\n                \"name_first\" =&gt; \"First name too short\",\n            ],\n            \"messageMinimum\" =&gt; [\n                \"name_last\"  =&gt; \"Last name too long\",\n                \"name_first\" =&gt; \"First name too long\",\n            ],\n            \"includedMaximum\" =&gt; [\n                \"name_last\"  =&gt; false,\n                \"name_first\" =&gt; true,\n            ],\n            \"includedMinimum\" =&gt; [\n                \"name_last\"  =&gt; false,\n                \"name_first\" =&gt; true,\n            ]\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#stringlength-max","title":"StringLength Max","text":"<p>Validates that a string has the specified maximum constraints. The validation passes if for a string length <code>L</code> it is less or equal than the maximum. The formula is:</p> <pre><code>string length &lt;= maximum\n</code></pre> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\StringLength\\Max;\n\n$validator = new Validation();\n\n$validation-&gt;add(\n    \"name_last\",\n    new Max(\n        [\n            \"max\"      =&gt; 50,\n            \"message\"  =&gt; \"Last name too long\",\n            \"included\" =&gt; true\n        ]\n    )\n);\n\n$validation-&gt;add(\n    [\n        \"name_last\",\n        \"name_first\",\n    ],\n    new Max(\n        [\n            \"max\" =&gt; [\n                \"name_last\"  =&gt; 50,\n                \"name_first\" =&gt; 40,\n            ],\n            \"message\" =&gt; [\n                \"name_last\"  =&gt; \"Last name too long\",\n                \"name_first\" =&gt; \"First name too long\",\n            ],\n            \"included\" =&gt; [\n                \"name_last\"  =&gt; false,\n                \"name_first\" =&gt; true,\n            ]\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#stringlength-min","title":"StringLength Min","text":"<p>Validates that a string has the specified minimum constraints. The validation passes if for a string length <code>L</code> it is more or equal than the minimum. The formula is:</p> <pre><code>minimum &lt;= string length \n</code></pre> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\StringLength\\Min;\n\n$validator = new Validation();\n\n$validation-&gt;add(\n    \"name_last\",\n    new Min(\n        [\n            \"min\"     =&gt; 2,\n            \"message\" =&gt; \"Only initials please\",\n            \"included\" =&gt; true\n        ]\n    )\n);\n\n$validation-&gt;add(\n    [\n        \"name_last\",\n        \"name_first\",\n    ],\n    new Min(\n        [\n            \"min\" =&gt; [\n                \"name_last\"  =&gt; 2,\n                \"name_first\" =&gt; 4,\n            ],\n            \"message\" =&gt; [\n                \"name_last\"  =&gt; \"Last name too short\",\n                \"name_first\" =&gt; \"First name too short\",\n            ],\n            \"included\" =&gt; [\n                \"name_last\"  =&gt; false,\n                \"name_first\" =&gt; true,\n            ]\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#uniqueness","title":"Uniqueness","text":"<p>Check that a field is unique in the related table</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Customers;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Uniqueness;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"cst_email\",\n    new Uniqueness(\n        [\n            \"model\"   =&gt; new Customers(),\n            \"message\" =&gt; \":field must be unique\",\n        ]\n    )\n);\n</code></pre> <p>Different attribute from the field:</p> <pre><code>&lt;?php\n\n$validator-&gt;add(\n    \"cst_email\",\n    new Uniqueness(\n        [\n            \"model\"     =&gt; new Invoices(),\n            \"attribute\" =&gt; \"nick\",\n        ]\n    )\n);\n</code></pre> <p>In the model:</p> <pre><code>&lt;?php\n\n$validator-&gt;add(\n    \"cst_email\",\n    new Uniqueness()\n);\n</code></pre> <p>Combination of fields in model:</p> <pre><code>&lt;?php\n\n$validator-&gt;add(\n    [\n        \"cst_name_last\",\n        \"cst_name_first\",\n    ],\n    new Uniqueness()\n);\n</code></pre> <p>It is possible to convert values before validation. This is useful in situations where values need to be converted for the database lookup:</p> <pre><code>&lt;?php\n\n$validator-&gt;add(\n    \"cst_email\",\n    new Uniqueness(\n        [\n            \"convert\" =&gt; function (array $values) {\n                $values[\"cst_email\"] = trim($values[\"cst_email\"]);\n\n                return $values;\n            }\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#using-except-for-fields-sql-operation-value-not-in-except","title":"Using except for fields (SQL operation \"value NOT IN (except)\")","text":"<p>Single field <pre><code>&lt;?php\n\n$validator-&gt;add(\n    \"cst_email\",\n    new Uniqueness(\n        [\n            \"except\" =&gt; \"name@email.com\"\n        ]\n    )\n);\n</code></pre> Multiple fields with keys (each except will be applied to value it defined by key) <pre><code>&lt;?php\n\n$validator-&gt;add(\n    [\"cst_email\", \"cst_phone\"],\n    new Uniqueness(\n        [\n            \"except\" =&gt; [\n                \"cst_email\" =&gt; \"name@email.com\",\n                \"cst_phone\" =&gt; \"82918304-3843\",\n            ]\n        ]\n    )\n);\n</code></pre> Multiple fields without keys (each except will be applied to all values recursively) <pre><code>&lt;?php\n\n$validator-&gt;add(\n    [\"cst_email\", \"cmp_email\"],\n    new Uniqueness(\n        [\n            \"except\" =&gt; [\n                \"name@email.com\",\n                \"company@email.com\",\n            ],\n        ]\n    )\n);\n</code></pre> Multiple fields with single except (except will be applied to all values recursively) <pre><code>&lt;?php\n\n$validator-&gt;add(\n    [\"cst_email\", \"cmp_email\"],\n    new Uniqueness(\n        [\n            \"except\" =&gt; \"name@email.com\",\n        ]\n    )\n);\n</code></pre></p>"},{"location":"validation/#url","title":"Url","text":"<p>Checks if a value has a url format</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Url;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"url\",\n    new Url(\n        [\n            \"message\" =&gt; \":field must be a url\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"url\",\n        \"homepage\",\n    ],\n    new Url(\n        [\n            \"message\" =&gt; [\n                \"url\"      =&gt; \"url must be a url\",\n                \"homepage\" =&gt; \"homepage must be a url\",\n            ]\n        ]\n    )\n);\n</code></pre> <p>You can also pass the <code>flags</code> option in the array, defining <code>FILTER_FLAG_PATH_REQUIRED</code> or <code>FILTER_FLAG_QUERY_REQUIRED</code> if necessary.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Url;\n\n$validation = new Validation();\n\n$validation-&gt;add(\n    'url',\n    new Url(\n        [\n            'options' =&gt; FILTER_FLAG_PATH_REQUIRED\n        ]\n    )\n);\n\n$messages = $validation-&gt;validate(\n    [\n        'url' =&gt; 'phalcon.io',\n    ]\n);\n\n$validation-&gt;add(\n    'url',\n    new Url(\n        [\n            'options' =&gt; FILTER_FLAG_QUERY_REQUIRED\n        ]\n    )\n);\n\n$messages = $validation-&gt;validate(\n    [\n        'url' =&gt; 'https://',\n    ]\n);\n\n$validation-&gt;add(\n    'url',\n    new Url(\n        [\n            'options' =&gt; [\n                'flags' =&gt; [\n                    FILTER_FLAG_PATH_REQUIRED,\n                    FILTER_FLAG_QUERY_REQUIRED,\n                ],\n            ],\n        ]\n    )\n);\n\n$messages = $validation-&gt;validate(\n    [\n        'url' =&gt; 'phalcon',\n    ]\n);\n</code></pre>"},{"location":"validation/#custom-validators","title":"Custom Validators","text":"<p>You can create your own validators by implementing the Phalcon\\Validation\\ValidatorInterface or Phalcon\\Validation\\Validator\\CompositeInterface. You can also extend the Phalcon\\Validation\\AbstractCombinedFieldsValidator, Phalcon\\Validation\\AbstractValidator or Phalcon\\Validation\\AbstractValidatorComposite.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Messages\\Message;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\AbstractValidator;\n\nclass IpValidator extends AbstractValidator\n{\n    /**\n     * Executes the validation\n     *\n     * @param Validation $validator\n     * @param string     $attribute\n     *\n     * @return boolean\n     */\n    public function validate(Validation $validator, $attribute)\n    {\n        $value = $validator-&gt;getValue($attribute);\n\n        if (!filter_var($value, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 | FILTER_FLAG_IPV6)) {\n            $message = $this-&gt;getOption('message');\n\n            if (!$message) {\n                $message = 'The IP is not valid';\n            }\n\n            $validator-&gt;appendMessage(\n                $this-&gt;messageFactory($message, $attribute, 'Ip')\n            );\n\n            return false;\n        }\n\n        return true;\n    }\n}\n</code></pre> <p>It is important that validators return a valid <code>boolean</code> value indicating if the validation was successful or not.</p>"},{"location":"validation/#messages","title":"Messages","text":"<p>Phalcon\\Validation utilizes the Phalcon\\Messages\\Messages collection, providing a flexible way to output or store the validation messages generated during the validation processes.</p> <p>Each message consists of an instance of the class Phalcon\\Messages\\Message. The set of messages generated can be retrieved with the <code>getMessages()</code> method. Each message provides extended information such as the field that generated the message or the message type:</p> <pre><code>&lt;?php\n\n$messages = $validation-&gt;validate();\n\nif (count($messages)) {\n    foreach ($messages as $message) {\n        echo 'Message: ', $message-&gt;getMessage(), \"\\n\";\n        echo 'Field: ', $message-&gt;getField(), \"\\n\";\n        echo 'Type: ', $message-&gt;getType(), \"\\n\";\n    }\n}\n</code></pre> <p>You can pass a <code>message</code> parameter to change/translate the default message in each validator. You can also use the placeholder <code>:field</code> in the message to be replaced by the label of the field:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation\\Validator\\Email;\n\n$validation-&gt;add(\n    'email',\n    new Email(\n        [\n            'message' =&gt; 'The e-mail is not valid',\n        ]\n    )\n);\n</code></pre> <p>By default, the <code>getMessages()</code> method returns all the messages generated during validation. You can filter messages for a specific field using the <code>filter()</code> method:</p> <pre><code>&lt;?php\n\n$messages = $validation-&gt;validate();\n\nif (count($messages)) {\n    $filteredMessages = $messages-&gt;filter('name');\n\n    foreach ($filteredMessages as $message) {\n        echo $message;\n    }\n}\n</code></pre>"},{"location":"validation/#filtering-of-data","title":"Filtering of Data","text":"<p>Data can be filtered prior to the validation ensuring that malicious or incorrect data is not validated.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\n\n$validation = new Validation();\n\n$validation-&gt;add(\n    'name',\n    new PresenceOf(\n        [\n            'message' =&gt; 'The name is required',\n        ]\n    )\n);\n\n$validation-&gt;add(\n    'email',\n    new PresenceOf(\n        [\n            'message' =&gt; 'The email is required',\n        ]\n    )\n);\n\n$validation-&gt;setFilters('name', 'trim');\n$validation-&gt;setFilters('email', 'trim');\n</code></pre> <p>Filtering and sanitizing is performed using the filter component. You can add more filters to this component or use the built-in ones.</p>"},{"location":"validation/#events","title":"Events","text":"<p>When validations are organized in classes, you can implement the <code>beforeValidation()</code> and <code>afterValidation()</code> methods to perform additional checks, filters, clean-up, etc. If the <code>beforeValidation()</code> method returns false the validation is automatically cancelled:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Request;\nuse Phalcon\\Messages\\Message;\nuse Phalcon\\Validation;\n\n/**\n * @property Request $request\n */\nclass LoginValidation extends Validation\n{\n    public function initialize()\n    {\n        // ...\n    }\n\n    public function beforeValidation($data, $entity, $messages)\n    {\n        if ($this-&gt;request-&gt;getHttpHost() !== 'admin.mydomain.com') {\n            $messages-&gt;appendMessage(\n                new Message(\n                    'Only users can log on in the admin domain'\n                )\n            );\n\n            return false;\n        }\n\n        return true;\n    }\n\n    public function afterValidation($data, $entity, $messages)\n    {\n        // ... Add additional messages or perform more validations\n    }\n}\n</code></pre>"},{"location":"validation/#cancelling-validations","title":"Cancelling Validations","text":"<p>By default all validators assigned to a field are tested regardless if one of them have failed or not. You can change this behavior by telling the validation component which validator may stop the validation:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Regex;\nuse Phalcon\\Validation\\Validator\\PresenceOf;\n\n$validation = new Validation();\n\n$validation-&gt;add(\n    'telephone',\n    new PresenceOf(\n        [\n            'message'      =&gt; 'The telephone is required',\n            'cancelOnFail' =&gt; true,\n        ]\n    )\n);\n\n$validation-&gt;add(\n    'telephone',\n    new Regex(\n        [\n            'message' =&gt; 'The telephone is required',\n            'pattern' =&gt; '/\\+44 [0-9]+/',\n        ]\n    )\n);\n\n$validation-&gt;add(\n    'telephone',\n    new StringLength(\n        [\n            'messageMinimum' =&gt; 'The telephone is too short',\n            'min'            =&gt; 2,\n        ]\n    )\n);\n</code></pre> <p>The first validator has the option <code>cancelOnFail</code> with a value of <code>true</code>, therefore if that validator fails the remaining validators in the chain are not executed.</p> <p>If you are creating custom validators you can dynamically stop the validation chain by setting the <code>cancelOnFail</code> option:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Message;\nuse Phalcon\\Validation\\Validator;\n\nclass MyValidator extends Validator\n{\n    public function validate(Validation $validator, $attribute)\n    {\n        // If the attribute value is name we must stop the chain\n        if ($attribute === 'name') {\n            $validator-&gt;setOption('cancelOnFail', true);\n        }\n\n        // ...\n    }\n}\n</code></pre>"},{"location":"validation/#empty-values","title":"Empty Values","text":"<p>You can pass the option <code>allowEmpty</code> to any of the built-in validators to ignore empty values.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Regex;\n\n$validation = new Validation();\n\n$validation-&gt;add(\n    'telephone',\n    new Regex(\n        [\n            'message'    =&gt; 'The telephone is required',\n            'pattern'    =&gt; '/\\+1 [0-9]+/',\n            'allowEmpty' =&gt; true,\n        ]\n    )\n);\n</code></pre>"},{"location":"validation/#recursive-validation","title":"Recursive Validation","text":"<p>You can also run Validation instances within another via the <code>afterValidation()</code> method. In this example, validating the <code>CompanyValidation</code> instance will also check the <code>PhoneValidation</code> instance:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\n\nclass CompanyValidation extends Validation\n{\n    /**\n     * @var PhoneValidation\n     */\n    protected $phoneValidation;\n\n    public function initialize()\n    {\n        $this-&gt;phoneValidation = new PhoneValidation();\n    }\n\n    public function afterValidation($data, $entity, $messages)\n    {\n        $phoneValidationMessages = $this-&gt;phoneValidation-&gt;validate(\n            $data['phone']\n        );\n\n        $messages-&gt;appendMessages(\n            $phoneValidationMessages\n        );\n    }\n}\n</code></pre>"},{"location":"validation/#exceptions","title":"Exceptions","text":"<p>Any exceptions thrown in the <code>Phalcon\\Validator</code> namespace will be of type Phalcon\\Validation\\Exception or Phalcon\\Validation\\Validator\\Exception. You can use this exception to selectively catch exceptions thrown only from this component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Exception;\nuse Phalcon\\Validation\\Validator\\InclusionIn;\n\ntry {\n    $validator = new Validation();\n\n    $validator-&gt;add(\n        \"status\",\n        new InclusionIn(\n            [\n                \"message\" =&gt; \"The status must be A or B\",\n                \"domain\"  =&gt; false,\n            ]\n        )\n    );\n} catch (Exception $ex) {\n    echo $ex-&gt;getMessage();\n}\n</code></pre>"},{"location":"views/","title":"Views","text":""},{"location":"views/#overview","title":"Overview","text":"<p>Views represent the user interface of your application. Views are often HTML files with embedded PHP code that perform tasks related solely to the presentation of the data. Views format the content that you need to send back to the user/web browser that initiated the request.</p> <p>Phalcon\\Mvc\\View and Phalcon\\Mvc\\View\\Simple are responsible for the managing the view layer of your MVC application.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property View $view\n */\nclass InvoicesController extends Controller\n{\n    public function viewAction($invoiceId)\n    {\n        $this-&gt;view-&gt;invoiceId = $invoiceId;\n    }\n}\n</code></pre>"},{"location":"views/#constants","title":"Constants","text":"<p>There are several constants that control the behavior of the rendering process once set in the view</p> Constant Description <code>LEVEL_ACTION_VIEW</code> Render Level: To the action view <code>LEVEL_BEFORE_TEMPLATE</code> Render Level: To the templates \"before\" <code>LEVEL_LAYOUT</code> Render Level: To the controller layout <code>LEVEL_MAIN_LAYOUT</code> Render Level: To the main layout <code>LEVEL_NO_RENDER</code> Render Level: No render any view <code>LEVEL_AFTER_TEMPLATE</code> Render Level: Render to the templates \"after\""},{"location":"views/#methods","title":"Methods","text":"<p><pre><code>public function __construct(array options = [])\n</code></pre> Phalcon\\Mvc\\View constructor</p> <p><pre><code>public function __get(string $key): mixed | null\n</code></pre> Magic method to retrieve a variable passed to the view</p> <pre><code>echo $this-&gt;view-&gt;invoices;\n</code></pre> <p><pre><code>public function __isset(string $key): bool\n</code></pre> Magic method to retrieve if a variable is set in the view</p> <pre><code>echo isset($this-&gt;view-&gt;invoices);\n</code></pre> <p><pre><code>public function __set(string $key, var value)\n</code></pre> Magic method to pass variables to the views</p> <pre><code>$this-&gt;view-&gt;invoices = $invoices;\n</code></pre> <p><pre><code>public function cleanTemplateAfter(): View\n</code></pre> Resets any template before layouts</p> <p><pre><code>public function cleanTemplateBefore(): View\n</code></pre> Resets any \"template before\" layouts</p> <p><pre><code>public function disableLevel(mixed $level): ViewInterface\n</code></pre> Disables a specific level of rendering</p> <p><pre><code>$this-&gt;view-&gt;disableLevel(\n    View::LEVEL_ACTION_VIEW\n);\n</code></pre> Render all levels except ACTION level</p> <p><pre><code>public function disable(): View\n</code></pre> Disables the auto-rendering process</p> <p><pre><code>public function enable(): View\n</code></pre> Enables the auto-rendering process</p> <p><pre><code>public function exists(string $view): bool\n</code></pre> Checks whether view exists</p> <p><pre><code>public function finish(): View\n</code></pre> Finishes the render process by stopping the output buffering</p> <p><pre><code>public function getActionName(): string\n</code></pre> Gets the name of the action rendered</p> <p><pre><code>public function getActiveRenderPath(): string | array\n</code></pre> Returns the path (or paths) of the views that are currently rendered</p> <p><pre><code>public function getBasePath(): string\n</code></pre> Gets base path</p> <p><pre><code>public function getContent(): string\n</code></pre> Returns output from another view stage</p> <p><pre><code>public function getControllerName(): string\n</code></pre> Gets the name of the controller rendered</p> <p><pre><code>public function getLayout(): string\n</code></pre> Returns the name of the main view</p> <p><pre><code>public function getLayoutsDir(): string\n</code></pre> Gets the current layouts sub-directory</p> <p><pre><code>public function getMainView(): string\n</code></pre> Returns the name of the main view</p> <p><pre><code>public function getParamsToView(): array\n</code></pre> Returns parameters to views</p> <p><pre><code>public function getPartial(\n    string $partialPath, \n    mixed $params = null\n): string\n</code></pre> Renders a partial view</p> <p><pre><code>echo $this-&gt;getPartial(\"shared/footer\");\n</code></pre> Retrieve the contents of a partial</p> <p><pre><code>echo $this-&gt;getPartial(\n    \"shared/footer\",\n    [\n        \"content\" =&gt; $html,\n    ]\n);\n</code></pre> Retrieve the contents of a partial with arguments</p> <p><pre><code>public function getPartialsDir(): string\n</code></pre> Gets the current partials sub-directory</p> <p><pre><code>public function getRender(\n    string $controllerName, \n    string $actionName, \n    array $params = [], \n    mixed configCallback = null\n): string\n</code></pre> Perform the automatic rendering returning the output as a string</p> <pre><code>$template = $this-&gt;view-&gt;getRender(\n    \"invoices\",\n    \"show\",\n    [\n        \"invoices\" =&gt; $invoices,\n    ]\n);\n</code></pre> <p><pre><code>public function getVar(string $key)\n</code></pre> Returns a parameter previously set in the view</p> <p><pre><code>public function getViewsDir(): string | array\n</code></pre> Gets views directory</p> <p><pre><code>protected function getViewsDirs(): array\n</code></pre> Gets views directories</p> <p><pre><code>public function isDisabled(): bool\n</code></pre> Whether automatic rendering is enabled</p> <p><pre><code>public function partial(\n    string $partialPath, \n    mixed $params = null\n)\n</code></pre> Renders a partial view</p> <p><pre><code>$this-&gt;partial(\"shared/footer\");\n</code></pre> Show a partial inside another view</p> <p><pre><code>$this-&gt;partial(\n    \"shared/footer\",\n    [\n        \"content\" =&gt; $html,\n    ]\n);\n</code></pre> Show a partial inside another view with parameters</p> <p><pre><code>public function pick(var renderView): View\n</code></pre> Choose a different view to render instead of last-controller/last-action</p> <pre><code>use Phalcon\\Mvc\\Controller;\n\nclass ProductsController extends Controller\n{\n    public function saveAction()\n    {\n        // ...\n\n        $this-&gt;view-&gt;pick(\"invoices/list\");\n    }\n}\n</code></pre> <p><pre><code>public function registerEngines(\n    array $engines\n): View\n</code></pre> Register templating engines</p> <pre><code>$this-&gt;view-&gt;registerEngines(\n    [\n        \".phtml\" =&gt; \\Phalcon\\Mvc\\View\\Engine\\Php::class,\n        \".volt\"  =&gt; \\Phalcon\\Mvc\\View\\Engine\\Volt::class,\n        \".mhtml\" =&gt; \\MyCustomEngine::class,\n    ]\n);\n</code></pre> <p><pre><code>public function render(\n    string $controllerName,\n    string $actionName,\n    array $params = []\n): View | bool\n</code></pre> Executes render process from dispatching data</p> <p><pre><code>$view\n    -&gt;start()\n    -&gt;render(\"posts\", \"recent\")\n    -&gt;finish()\n;\n</code></pre> Shows recent posts view (app/views/posts/recent.phtml)</p> <p><pre><code>public function reset(): View\n</code></pre> Resets the view component to its factory default values</p> <p><pre><code>public function setBasePath(\n    string $basePath\n): View\n</code></pre> Sets base path. Depending of your platform, always add a trailing slash or backslash</p> <pre><code>$view-&gt;setBasePath(__DIR__ . \"/\");\n</code></pre> <p><pre><code>public function setContent(\n    string $content\n): View\n</code></pre> Externally sets the view content</p> <pre><code>$this-&gt;view-&gt;setContent(\n    \"&lt;h1&gt;hello&lt;/h1&gt;\"\n);\n</code></pre> <p><pre><code>public function setLayout(\n    string $layout\n): View\n</code></pre> Change the layout to be used instead of using the name of the latest controller name</p> <pre><code>$this-&gt;view-&gt;setLayout(\"main\");\n</code></pre> <p><pre><code>public function setLayoutsDir(\n    string $layoutsDir\n): View\n</code></pre> Sets the layouts subdirectory. It must be a directory under the views directory. Depending of your platform, always add a trailing slash or backslash</p> <pre><code>$view-&gt;setLayoutsDir(\n    \"../common/layouts/\"\n);\n</code></pre> <p><pre><code>public function setMainView(\n    string viewPath\n): View\n</code></pre> Sets default view name. Must be a file without extension in the views directory</p> <p><pre><code>$this-&gt;view-&gt;setMainView(\"base\");\n</code></pre> Renders as main view views-dir/base.phtml</p> <p><pre><code>public function setPartialsDir(\n    string $partialsDir\n): View\n</code></pre> Sets a partials sub-directory. Must be a directory under the views directory. Depending of your platform, always add a trailing slash or backslash</p> <pre><code>$view-&gt;setPartialsDir(\n    \"../common/partials/\"\n);\n</code></pre> <p><pre><code>public function setParamToView(\n    string $key, \n    mixed $value\n): View\n</code></pre> Adds parameters to views (alias of setVar)</p> <pre><code>$this\n    -&gt;view\n    -&gt;setParamToView(\"invoices\", $invoices)\n;\n</code></pre> <p><pre><code>public function setRenderLevel(\n    int $level\n): ViewInterface\n</code></pre> Sets the render level for the view</p> <p><pre><code>$this-&gt;view-&gt;setRenderLevel(\n    View::LEVEL_LAYOUT\n);\n</code></pre> Render the view related to the controller only</p> <p><pre><code>public function setTemplateAfter(\n    mixed $templateAfter\n): View\n</code></pre> Sets a \"template after\" controller layout</p> <p><pre><code>public function setTemplateBefore(\n    mixed $templateBefore\n): View\n</code></pre> Sets a template before the controller layout</p> <p><pre><code>public function setVar(\n    string $key, \n    mixed $value\n): View\n</code></pre> Set a single view parameter</p> <pre><code>$this\n    -&gt;view\n    -&gt;setVar(\"invoices\", $invoices)\n;\n</code></pre> <p><pre><code>public function setVars(\n    array $params, \n    bool $merge = true\n): View\n</code></pre> Set all the render params</p> <pre><code>$this-&gt;view-&gt;setVars(\n    [\n        \"invoices\" =&gt; $invoices,\n    ]\n);\n</code></pre> <p><pre><code>public function setViewsDir(\n    mixed $viewsDir\n): View\n</code></pre> Sets the views directory. Depending of your platform, always add a trailing slash or backslash</p> <p><pre><code>public function start(): View\n</code></pre> Starts rendering process enabling the output buffering</p> <p><pre><code>public function toString(\n    string $controllerName,\n    string $actionName,\n    array params = []\n): string\n</code></pre> Renders the view and returns it as a string</p>"},{"location":"views/#activation","title":"Activation","text":"<p>You must register the view component in your DI container to enable views in your application. </p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Mvc\\View;\n\n$container = new FactoryDefault();\n\n$container-&gt;set(\n    'view',\n    function () {\n        $view = new View();\n\n        $view-&gt;setViewsDir('../app/views/');\n\n        return $view;\n    }\n);\n</code></pre> If no engine is defined, the Phalcon\\Mvc\\View\\Engine\\Php will be automatically registered for you. These are files that contain both PHP and HTML code and have the extension <code>.phtml</code>. For more information regarding the Volt template engine, please check the relevant document.</p>"},{"location":"views/#views-in-controllers","title":"Views in Controllers","text":"<p>Phalcon automatically passes the execution to the view component as soon as a particular controller has completed its cycle. The view component will look in the views folder for a folder named as the same name of the last controller executed and then for a file named as the last action executed. For instance, if a request is made to the URL https://dev.phalcon.ld/admin/invoices/view/12345, Phalcon will parse the URL as follows:</p> Server Address <code>127.0.0.1</code> Phalcon Directory <code>admin</code> Controller <code>invoices</code> Action <code>view</code> Parameter <code>12345</code> <p>The dispatcher will look for a <code>InvoicesController</code> and its action <code>viewAction</code>. A simple controller file for this example:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property View $view\n */\nclass InvoicesController extends Controller\n{\n    public function viewAction($invoiceId)\n    {\n        $this-&gt;view-&gt;setVar('invoiceId', $invoiceId);\n    }\n}\n</code></pre> <p>The <code>setVar()</code> method allows us to create view variables on demand so that they can be used in the view template. The example above demonstrates how to pass the <code>$invoiceId</code> parameter to the respective view template.</p>"},{"location":"views/#hierarchical-rendering","title":"Hierarchical Rendering","text":"<p>Phalcon\\Mvc\\View is the default component for rendering views in Phalcon and supports a hierarchy of files. This hierarchy allows for common layout points (commonly used views), as well as controller named folders defining respective view templates.</p> <p>The default rendering engine for the view component is PHP. As a result all view related files need to have the <code>.phtml</code> extension. For the above example:</p> <p><pre><code>https://dev.phalcon.ld/admin/invoices/view/12345\n</code></pre> Assuming that the views directory is <code>app/views</code>, the view component will find automatically the following 3 view files:</p> Name File Description Action View app/views/invoices/view.phtml Action related view. It only will be rendered when the <code>view</code> action is executed. Controller Layout app/views/layouts/invoices.phtml Controller related view. It will be rendered for every action executed in the <code>InvoicesController</code>. Main Layout app/views/index.phtml Application related view. It shows on every controller/action of the application <p>You are not required to implement all of the files mentioned above. Phalcon\\Mvc\\View will simply move to the next view level in the hierarchy of files. If all three view files are implemented, they will be processed as follows:</p> <pre><code>&lt;!-- app/views/invoices/view.phtml --&gt;\n\n&lt;h3&gt;View Name: \"view\"&lt;/h3&gt;\n\n&lt;p&gt;I have received the parameter &lt;?php echo $invoiceId; ?&gt;&lt;/p&gt;\n</code></pre> <pre><code>&lt;!-- app/views/layouts/invoices.phtml --&gt;\n\n&lt;h2&gt;Controller view: \"invoices\"&lt;/h2&gt;\n\n&lt;?php echo $this-&gt;getContent(); ?&gt;\n</code></pre> <pre><code>&lt;!-- app/views/index.phtml --&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Example&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Main layout!&lt;/h1&gt;\n\n        &lt;?php echo $this-&gt;getContent(); ?&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>NOTE</p> <p>The call to <code>$this-&gt;getContent()</code> instructs Phalcon\\Mvc\\View on where to inject the contents of the previous view executed in the hierarchy.</p> <p>For the example above, the output will be:</p> <p></p> <p>The generated HTML will be:</p> <pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Example&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Main layout!&lt;/h1&gt;\n\n        &lt;!-- app/views/layouts/invoices.phtml --&gt;\n\n        &lt;h2&gt;Controller view: \"invoices\"&lt;/h2&gt;\n\n        &lt;!-- app/views/invoices/view.phtml --&gt;\n\n        &lt;h3&gt;View Name: \"view\"&lt;/h3&gt;\n\n        &lt;p&gt;I have received the parameter 12345&lt;/p&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"views/#templates","title":"Templates","text":"<p>Templates are views that can be used to share common view code. They act as controller layouts, so you need to place them in the layouts directory.</p> <p>Templates can be rendered before the layout (using <code>$this-&gt;view-&gt;setTemplateBefore()</code>) or they can be rendered after the layout (using <code>this-&gt;view-&gt;setTemplateAfter()</code>). In the following example the template (<code>layouts/common.phtml</code>) is rendered after the main layout (<code>layouts/posts.phtml</code>):</p> <pre><code>&lt;?php\n\nuse Phalcon\\Flash\\Direct;\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property Direct $flash\n * @property View   $view\n */\nclass InvoicesController extends Controller\n{\n    public function initialize()\n    {\n        $this-&gt;view-&gt;setTemplateAfter('common');\n    }\n\n    public function lastAction()\n    {\n        $this-&gt;flash-&gt;notice(\n            'These are the latest invoices'\n        );\n    }\n}\n</code></pre> <pre><code>&lt;!-- app/views/index.phtml --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Invoices&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;?php echo $this-&gt;getContent(); ?&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>&lt;!-- app/views/layouts/common.phtml --&gt;\n\n&lt;ul class='menu'&gt;\n    &lt;li&gt;&lt;a href='/'&gt;Home&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href='/list'&gt;List&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href='/support'&gt;Support&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;div class='content'&gt;\n    &lt;?php echo $this-&gt;getContent(); ?&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>&lt;!-- app/views/layouts/invoices.phtml --&gt;\n\n&lt;h1&gt;Invoices&lt;/h1&gt;\n\n&lt;?php echo $this-&gt;getContent(); ?&gt;\n</code></pre> <pre><code>&lt;!-- app/views/invoices/last.phtml --&gt;\n\n&lt;article&gt;\n    &lt;h2&gt;This is a title&lt;/h2&gt;\n    &lt;p&gt;This is Invoice One&lt;/p&gt;\n&lt;/article&gt;\n\n&lt;article&gt;\n    &lt;h2&gt;Another title&lt;/h2&gt;\n    &lt;p&gt;This is Invoice Two&lt;/p&gt;\n&lt;/article&gt;\n</code></pre> <p>The final output will be the following:</p> <pre><code>&lt;!-- app/views/index.phtml --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Invoices&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;!-- app/views/layouts/common.phtml --&gt;\n\n        &lt;ul class='menu'&gt;\n            &lt;li&gt;&lt;a href='/'&gt;Home&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href='/list'&gt;List&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href='/support'&gt;Support&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n\n        &lt;div class='content'&gt;\n\n            &lt;!-- app/views/layouts/invoices.phtml --&gt;\n\n            &lt;h1&gt;Invoices&lt;/h1&gt;\n\n            &lt;!-- app/views/invoices/last.phtml --&gt;\n\n            &lt;article&gt;\n                &lt;h2&gt;This is a title&lt;/h2&gt;\n                &lt;p&gt;This is Invoice One&lt;/p&gt;\n            &lt;/article&gt;\n\n            &lt;article&gt;\n                &lt;h2&gt;Another title&lt;/h2&gt;\n                &lt;p&gt;This is Invoice Two&lt;/p&gt;\n            &lt;/article&gt;\n\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>If we had used <code>$this-&gt;view-&gt;setTemplateBefore('common')</code>, this would be the final output:</p> <pre><code>&lt;!-- app/views/index.phtml --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Blog's title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;!-- app/views/layouts/invoices.phtml --&gt;\n\n        &lt;h1&gt;Blog Title&lt;/h1&gt;\n\n        &lt;!-- app/views/layouts/common.phtml --&gt;\n\n        &lt;ul class='menu'&gt;\n            &lt;li&gt;&lt;a href='/'&gt;Home&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href='/articles'&gt;Articles&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href='/contact'&gt;Contact us&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n\n        &lt;div class='content'&gt;\n\n            &lt;!-- app/views/invoices/last.phtml --&gt;\n\n            &lt;article&gt;\n                &lt;h2&gt;This is a title&lt;/h2&gt;\n                &lt;p&gt;This is the post content&lt;/p&gt;\n            &lt;/article&gt;\n\n            &lt;article&gt;\n                &lt;h2&gt;This is another title&lt;/h2&gt;\n                &lt;p&gt;This is another post content&lt;/p&gt;\n            &lt;/article&gt;\n\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"views/#render-levels","title":"Render Levels","text":"<p>As seen above, Phalcon\\Mvc\\View supports a view hierarchy. You might need to control the level of rendering produced by the view component. The method <code>Phalcon\\Mvc\\View::setRenderLevel()</code> offers this functionality.</p> <p>This method can be invoked from the controller or from a superior view layer to interfere with the rendering process.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property View   $view\n */\nclass InvoicesController extends Controller\n{\n    public function findAction()\n    {\n        $this-&gt;view-&gt;setRenderLevel(\n            View::LEVEL_NO_RENDER\n        );\n\n        // ...\n    }\n\n    public function viewAction($invoiceId)\n    {\n        $this-&gt;view-&gt;setRenderLevel(\n            View::LEVEL_ACTION_VIEW\n        );\n    }\n}\n</code></pre> <p>The available render levels are:</p> Class Constant Description Order <code>LEVEL_NO_RENDER</code> Indicates to avoid generating any kind of presentation. <code>LEVEL_ACTION_VIEW</code> Generates the presentation to the view associated to the action. 1 <code>LEVEL_BEFORE_TEMPLATE</code> Generates presentation templates prior to the controller layout. 2 <code>LEVEL_LAYOUT</code> Generates the presentation to the controller layout. 3 <code>LEVEL_AFTER_TEMPLATE</code> Generates the presentation to the templates after the controller layout. 4 <code>LEVEL_MAIN_LAYOUT</code> Generates the presentation to the main layout. File views/index.phtml 5"},{"location":"views/#disabling-render-levels","title":"Disabling Render Levels","text":"<p>You can permanently or temporarily disable render levels. A level could be permanently disabled if it isn't used at all in the whole application:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\n\n$container-&gt;set(\n    'view',\n    function () {\n        $view = new View();\n\n        // Disable several levels\n        $view-&gt;disableLevel(\n            [\n                View::LEVEL_LAYOUT      =&gt; true,\n                View::LEVEL_MAIN_LAYOUT =&gt; true,\n            ]\n        );\n\n        return $view;\n    },\n    true\n);\n</code></pre> <p>Or disable temporarily in some part of the application:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property View   $view\n */\nclass InvoicesController extends Controller\n{\n    public function findAction()\n    {\n        $this-&gt;view-&gt;disableLevel(\n            View::LEVEL_MAIN_LAYOUT\n        );\n    }\n}\n</code></pre>"},{"location":"views/#disabling-the-view","title":"Disabling the View","text":"<p>If your controller does not produce any output for the view (or not even have one) you may disable the view component avoiding unnecessary processing:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property View   $view\n */\nclass InvoicesController extends Controller\n{\n    public function processAction()\n    {\n        $this-&gt;view-&gt;disable();\n    }\n}\n</code></pre> <p>Alternatively, you can return <code>false</code> to produce the same effect:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property View   $view\n */\nclass InvoicesController extends Controller\n{\n    public function processAction()\n    {\n        return false;\n    }\n}\n</code></pre> <p>You can return a <code>response</code> object to avoid disable the view manually:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property Response $response\n * @property View     $view\n */\nclass InvoicesController extends Controller\n{\n    public function processAction()\n    {\n        return $this\n            -&gt;response\n            -&gt;redirect('index/index')\n        ;\n    }\n}\n</code></pre>"},{"location":"views/#simple-rendering","title":"Simple Rendering","text":"<p>Phalcon\\Mvc\\View\\Simple is an alternative component to Phalcon\\Mvc\\View. It keeps most of the philosophy of Phalcon\\Mvc\\View but lacks of a hierarchy of files which is, in fact, the main feature of its counterpart.</p> <p>This component allows you to have control of when a view is rendered and its location. In addition, this component can leverage of view inheritance available in template engines such as Volt and others.</p> <p>The default component must be replaced in the service container:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View\\Simple;\n\n$container-&gt;set(\n    'view',\n    function () {\n        $view = new Simple();\n\n        $view-&gt;setViewsDir('../app/views/');\n\n        return $view;\n    },\n    true\n);\n</code></pre> <p>Automatic rendering must be disabled in Phalcon\\Mvc\\Application (if needed):</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;;\nuse Phalcon\\Mvc\\Application;\n\ntry {\n    $container   = new FactoryDefault();\n    $application = new Application($container);\n\n    $application-&gt;useImplicitView(false);\n\n    $response = $application-&gt;handle(\n        $_SERVER[\"REQUEST_URI\"]\n    );\n\n    $response-&gt;send();\n} catch (Exception $e) {\n    echo $e-&gt;getMessage();\n}\n</code></pre> <p>To render a view it is necessary to call the render method explicitly indicating the relative path to the view you want to display:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Http\\Response;\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property Response $response\n * @property View     $view\n */\nclass InvoicesController extends Controller\n{\n\n    public function indexAction()\n    {\n        // 'views-dir/index.phtml'\n        echo $this-&gt;view-&gt;render('index');\n\n        // 'views-dir/posts/show.phtml'\n        echo $this-&gt;view-&gt;render('posts/show');\n\n        // 'views-dir/index.phtml' passing variables\n        echo $this-&gt;view-&gt;render(\n            'index',\n            [\n                'posts' =&gt; Invoices::find(),\n            ]\n        );\n\n        // 'views-dir/invoices/view.phtml' passing variables\n        echo $this-&gt;view-&gt;render(\n            'invoices/view',\n            [\n                'posts' =&gt; Invoices::find(),\n            ]\n        );\n    }\n}\n</code></pre> <p>This is different to the <code>render</code> that Phalcon\\Mvc\\View implements, which uses controllers and actions as parameters:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\View\\Simple;\n\n$params = [\n    'invoices' =&gt; Invoices::find(),\n];\n\n// Phalcon\\Mvc\\View\n$view = new View();\necho $view-&gt;render('invoices', 'view', $params);\n\n// Phalcon\\Mvc\\View\\Simple\n$simpleView = new Simple();\necho $simpleView-&gt;render('invoices/view', $params);\n</code></pre>"},{"location":"views/#picking-views","title":"Picking Views","text":"<p>As mentioned above, when Phalcon\\Mvc\\View is managed by Phalcon\\Mvc\\Application, the view rendered is the one related with the last controller and action executed. You could override this by using the <code>pick()</code> method:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property Response $response\n * @property View     $view\n */\nclass InvoicesController extends Controller\n{\n    public function listAction()\n    {\n        // Pick 'views-dir/invoices/search' as view to render\n        $this-&gt;view-&gt;pick('invoices/search');\n\n        // Pick 'views-dir/invoices/list' as view to render\n        $this-&gt;view-&gt;pick(\n            [\n                'invoices',\n            ]\n        );\n\n        // Pick 'views-dir/invoices/search' as view to render\n        $this-&gt;view-&gt;pick(\n            [\n                1 =&gt; 'search',\n            ]\n        );\n    }\n}\n</code></pre>"},{"location":"views/#partials","title":"Partials","text":"<p>Partial templates are another way of breaking the rendering process into simpler more manageable chunks that can be reused by different parts of the application. With a partial, you can move the code for rendering a particular piece of a response to its own file.</p> <p>One way to use partials is to treat them as HTML fragments that can be injected wherever needed with any necessary parameters:</p> <pre><code>&lt;div class='top'&gt;\n    &lt;?php $this-&gt;partial('shared/ad_banner'); ?&gt;\n&lt;/div&gt;\n\n&lt;div class='content'&gt;\n    &lt;h1&gt;Invoices&lt;/h1&gt;\n\n    &lt;p&gt;Check out our specials!&lt;/p&gt;\n    ...\n&lt;/div&gt;\n\n&lt;div class='footer'&gt;\n    &lt;?php $this-&gt;partial('shared/footer'); ?&gt;\n&lt;/div&gt;\n</code></pre> <p>The <code>partial()</code> method does accept a second parameter as an array of variables/parameters that only will exists in the scope of the partial:</p> <pre><code>&lt;?php \n    $this-&gt;partial(\n        'shared/ad_banner', \n        [\n            'id'   =&gt; $site-&gt;id, \n            'size' =&gt; 'big'\n        ]\n    ); \n?&gt;\n</code></pre>"},{"location":"views/#values","title":"Values","text":"<p>Phalcon\\Mvc\\View is available in each controller using the view variable (<code>$this-&gt;view</code>). You can use that object to set variables directly to the view from a controller action by using the <code>setVar()</code> method.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property View $view\n */\nclass InvoicesController extends Controller\n{\n    public function viewAction($invoiceId)\n    {\n        $invoice = Invoices::findFirst(\n            [\n                'conditions' =&gt; 'inv_id = :id:',\n                'bind'       =&gt; [\n                    'id' =&gt; abs(intval($invoiceId)),\n                ]\n            ]\n        );\n        $customer = $invoice-&gt;getRelated('customer');\n\n        $this-&gt;view-&gt;setVar('invoice', $invoice);\n\n        $this-&gt;view-&gt;customerId = $customer-&gt;cst_id;\n\n        $this-&gt;view-&gt;setVars(\n            [\n                'name_first' =&gt; $customer-&gt;name_first,\n                'name_last'  =&gt; $customer-&gt;name_last,\n            ]\n        );\n    }\n}\n</code></pre> <p>A variable with the name of the first parameter of <code>setVar()</code> will be created in the view, ready to be used. The variable can be of any type, from a simple <code>string</code>, <code>integer</code> etc. variable to a more complex structure such as <code>array</code>, collection etc.</p> <pre><code>&lt;h1&gt;\n    Invoices [Customer #{{ customerId }}]\n&lt;/h1&gt;\n\n&lt;div class='invoice'&gt;\n&lt;?php\n\n    foreach ($invoices as $invoice) {\n        echo '&lt;h2&gt;', $invoice-&gt;inv_title, '&lt;/h2&gt;';\n    }\n\n?&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"views/#template-engines","title":"Template Engines","text":"<p>Template Engines help designers to create views without the use of a complicated syntax. Phalcon includes a powerful and fast templating engine called Volt that help with view development while not sacrificing processing speed. </p>"},{"location":"views/#php","title":"PHP","text":"<p>The Phalcon\\Mvc\\View\\Engine\\Php is the default template engine, if none has been specified.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\n\n$container-&gt;set(\n    'view',\n    function () {\n        $view = new View();\n\n        $view-&gt;setViewsDir('../app/views/');\n\n        return $view;\n    },\n    true\n);\n</code></pre>"},{"location":"views/#volt","title":"Volt","text":"<p>You might want to use Volt as your template engine. To set it up you need to register the engine and pass it to the view component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Di\\DiInterface;\nuse Phalcon\\Mvc\\ViewBaseInterface;\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\View\\Engine\\Volt;\n\n$container = new FactoryDefault();\n\n$container-&gt;setShared(\n    'voltService',\n    function (ViewBaseInterface $view) {\n        $volt = new Volt($view, $this);\n        $volt-&gt;setOptions(\n            [\n                'always'    =&gt; true,\n                'extension' =&gt; '.php',\n                'separator' =&gt; '_',\n                'stat'      =&gt; true,\n                'path'      =&gt; appPath('storage/cache/volt/'),\n                'prefix'    =&gt; '-prefix-',\n            ]\n        );\n\n        return $volt;\n    }\n);\n\n$container-&gt;set(\n    'view',\n    function () {\n        $view = new View();\n\n        $view-&gt;setViewsDir('../app/views/');\n\n        $view-&gt;registerEngines(\n            [\n                '.volt' =&gt; 'voltService',\n            ]\n        );\n\n        return $view;\n    }\n);\n</code></pre>"},{"location":"views/#mustachetwigsmarty","title":"Mustache/Twig/Smarty","text":"<p>If you like to use Mustache, Twig or Smarty as your template engine, you can visit our incubator repository for examples on how to activate these engines in your application</p>"},{"location":"views/#custom","title":"Custom","text":"<p>When using an external template engine, Phalcon\\Mvc\\View provides exactly the same view hierarchy and it is still possible to access the API inside these templates. If you want to create your own template engine, you can leverage the API to perform the operations you need. </p> <p>A template engine adapter is a class that acts as bridge between Phalcon\\Mvc\\View and the template engine itself. Usually it only needs two methods implemented: <code>__construct()</code> and <code>render()</code>. The first one receives the Phalcon\\Mvc\\View instance that creates the engine adapter and the DI container used by the application.</p> <p>The method <code>render()</code> accepts an absolute path to the view file and the view parameters set using <code>$this-&gt;view-&gt;setVar()</code>. You could read or require it when it's necessary.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\DiInterface;\nuse Phalcon\\Mvc\\View\\Engine\\AbstractEngine;\nuse Phalcon\\Mvc\\View;\n\nclass CustomEngine extends AbstractEngine\n{\n    /**\n     * @param View        $view\n     * @param DiInterface $container\n     */\n    public function __construct($view, DiInterface $container)\n    {\n        parent::__construct($view, $container);\n    }\n\n    /**\n     * @param string $path\n     * @param array $params\n     */\n    public function render(string $path, $params)\n    {\n        // Access view\n        $view = $this-&gt;view;\n\n        // Options\n        $options = $this-&gt;options;\n\n        // Render the view\n        // ...\n    }\n}\n</code></pre> <p>You can now replace the template engine with your own in the view setup part of your code. You can always use more than one engine at a time. To achieve this you need to call <code>Phalcon\\Mvc\\View::registerEngines()</code> which accepts an array with setup instructions on which engines are registered. The key of each engine is the extension of the files you need to process. You cannot register two engines with the same key.</p> <p>The order that the template engines are defined with <code>Phalcon\\Mvc\\View::registerEngines()</code> defines the priority of execution. If Phalcon\\Mvc\\View finds two views with the same name but different extensions, it will only render the first one.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\View\\Engine\\Php;\n\n$container-&gt;set(\n    'view',\n    function () {\n        $view = new View();\n\n        $view-&gt;setViewsDir('../app/views/');\n\n        $view-&gt;registerEngines(\n            [\n                '.my-html' =&gt; \\CustomEngine::class,\n            ]\n        );\n\n        $view-&gt;registerEngines(\n            [\n                '.my-html' =&gt; \\CustomEngine::class,\n                '.phtml'   =&gt; Php::class,\n            ]\n        );\n\n        return $view;\n    },\n    true\n);\n</code></pre>"},{"location":"views/#dependency-injection","title":"Dependency Injection","text":"<p>Since our view is registered in our Dependency Injection container, the services available in the container are also available in the view. Each service is available by a property with the same name as the defined service.</p> <pre><code>&lt;script type='text/javascript'&gt;\n\n$.ajax({\n    url: '&lt;?php echo $this-&gt;url-&gt;get('invoices/get'); ?&gt;'\n})\n.done(function () {\n    alert('Done!');\n});\n\n&lt;/script&gt;\n</code></pre> <p>In the example above, we are utilizing the Phalcon\\Url component in our javascript code, to correctly set up the URL in our application. The service is available in the view by accessing <code>$this-&gt;url</code>.</p>"},{"location":"views/#stand-alone","title":"Stand Alone","text":"<p>You can also use the view as a glue component in your application. You will only need to have the proper setup and then use the view to return processed results back.</p>"},{"location":"views/#hierarchical-rendering_1","title":"Hierarchical Rendering","text":"<p>Once you set up the view with the options that are necessary for your application, you can pass variables to it, as seen above, then call <code>start()</code>, <code>render()</code> and <code>finish()</code>. This will allow the view to compile the data and prepare it for you. You can print the content produced by calling <code>getContent()</code>.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\n\n$view = new View();\n\n$view-&gt;setViewsDir('../app/views/');\n\n//...\n\n$view-&gt;setVar('invoices', $invoices);\n$view-&gt;setVar('isAdmin', true);\n\n$view-&gt;start();\n$view-&gt;render('invoices', 'list');\n$view-&gt;finish();\n\necho $view-&gt;getContent();\n</code></pre> <p>Or using a shorter syntax:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\n\n$view = new View();\n\necho $view-&gt;getRender(\n    'invoices',\n    'list',\n    [\n        'invoices' =&gt; $invoices,\n        'isAdmin'  =&gt; true,\n    ],\n    function ($view) {\n        $view-&gt;setViewsDir('../app/views/');\n\n        $view-&gt;setRenderLevel(\n            View::LEVEL_LAYOUT\n        );\n    }\n);\n</code></pre>"},{"location":"views/#simple-rendering_1","title":"Simple Rendering","text":"<p>You can also use the much smaller Phalcon\\Mvc\\View\\Simple as a stand alone component. This component is extremely useful when you want to render a template that is not always tied to your application structure. An example is rendering HTML code required by emails.</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View\\Simple;\n\n$view = new Simple();\n\n$view-&gt;setViewsDir('../app/views/');\n\necho $view-&gt;render('templates/welcome');\n\necho $view-&gt;render(\n    'templates/welcome',\n    [\n        'email'   =&gt; $email,\n        'content' =&gt; $content,\n    ]\n);\n</code></pre> In the above example, we set up the engine and then echo a rendered template on screen (<code>templates/welcome</code>). We can also send parameters to the template by issuing an array as the second parameter. The keys are the names of the variables.</p>"},{"location":"views/#events","title":"Events","text":"<p>Phalcon\\Mvc\\View and Phalcon\\Mvc\\View\\Simple are able to send events to an Events Manager if it is present. Events are triggered using the type <code>view</code>. If an event returns <code>false</code> it can stop the active operation. The following events are supported:</p> Event Name Triggered Can stop <code>afterRender</code> After completing the render process No <code>afterRenderView</code> After rendering an existing view No <code>beforeRender</code> Before starting the render process Yes <code>beforeRenderView</code> Before rendering an existing view Yes <code>notFoundView</code> When a view was not found No <p>The following example demonstrates how to attach listeners to this component:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager;\nuse Phalcon\\Mvc\\View;\n\n$container = new FactoryDefault();\n$container-&gt;set(\n    'view',\n    function () {\n        $manager = new Manager();\n\n        $manager-&gt;attach(\n            'view',\n            function (Event $event, $view) {\n                echo $event-&gt;getType(), ' - ', \n                     $view-&gt;getActiveRenderPath(), PHP_EOL;\n            }\n        );\n\n        $view = new View();\n\n        $view-&gt;setViewsDir('../app/views/');\n\n        $view-&gt;setEventsManager($manager);\n\n        return $view;\n    },\n    true\n);\n</code></pre> <p>The following example demonstrates how you can create a plugin that tidies up your HTML produced by the render process using Tidy.</p> <p><pre><code>&lt;?php\n\nuse Phalcon\\Events\\Event;\n\nclass TidyPlugin\n{\n    public function afterRender(Event $event, $view)\n    {\n        $tidyConfig = [\n            'clean'          =&gt; true,\n            'output-xhtml'   =&gt; true,\n            'show-body-only' =&gt; true,\n            'wrap'           =&gt; 0,\n        ];\n\n        $tidy = tidy_parse_string(\n            $view-&gt;getContent(),\n            $tidyConfig,\n            'UTF8'\n        );\n\n        $tidy-&gt;cleanRepair();\n\n        $view-&gt;setContent(\n            (string) $tidy\n        );\n    }\n}\n</code></pre> and we can now attach it to our events manager:</p> <pre><code>&lt;?php\n\n$manager-&gt;attach(\n    'view:afterRender',\n    new TidyPlugin()\n);\n</code></pre>"},{"location":"views/#exceptions","title":"Exceptions","text":"<p>Any exceptions thrown in the view components (Phalcon\\Mvc\\View or Phalcon\\Mvc\\View\\Simple) will be of type Phalcon\\Mvc\\Exception or Phalcon\\View\\Engine\\Volt\\Exception if you are using Volt. You can use this exception to selectively catch exceptions thrown only from this component.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\View\\Exception;\n\ntry {\n\n    $view = new View();\n\n    echo $view-&gt;getRender(\n        'unknown-view',\n        'list',\n        [\n            'invoices' =&gt; $invoices,\n            'isAdmin'  =&gt; true,\n        ],\n        function ($view) {\n            $view-&gt;setViewsDir('../app/views/');\n\n            $view-&gt;setRenderLevel(\n                View::LEVEL_LAYOUT\n            );\n        }\n    );\n} catch (Exception $ex) {\n    echo $ex-&gt;getMessage();\n}\n</code></pre>"},{"location":"volt/","title":"Volt: Template Engine","text":""},{"location":"volt/#overview","title":"Overview","text":"<p>Volt is an ultra-fast and designer friendly templating engine written in C for PHP. It offers a set of helpers to write views easily. Volt is highly integrated with other components of Phalcon, but can be used as a stand-alone component in your application.</p> <p></p> <p>Volt is inspired by Jinja, originally created by Armin Ronacher. </p> <p>Many developers will be in familiar territory, using the same syntax they have been using with similar template engines. Volt's syntax and features have been enhanced with more elements and of course with the performance that developers have been accustomed to, while working with Phalcon.</p>"},{"location":"volt/#syntax","title":"Syntax","text":"<p>Volt views are compiled to pure PHP code, so basically they save the effort of writing PHP code manually:</p> <pre><code>{% raw %}\n{% for invoice in invoices %}\n&lt;div class='row'&gt;\n    &lt;div&gt;\n        ID: {{ invoice.titleinv_id }}\n    &lt;/div&gt;\n    &lt;div&gt;\n        {%- if 1 === invoice.titleinv_status_flag -%}\n        Paid\n        {%- else -%}\n        Unpaid\n        {%- endif -%}\n    &lt;/div&gt;\n    &lt;div&gt;\n        {{ invoice.titleinv_description }}\n    &lt;/div&gt;\n    &lt;div&gt;\n        {{ invoice.titleinv_total }}\n    &lt;/div&gt;\n&lt;/div&gt;\n{% endfor %}{% endraw %}\n</code></pre> <p>compared to:</p> <pre><code>&lt;?php foreach ($invoices as $invoice) { ?&gt;\n&lt;div class='row'&gt;\n    &lt;div&gt;\n        ID: &lt;?php echo $invoice-&gt;inv_id; ?&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n        &lt;?php if (1 === $invoice-&gt;inv_status_flag) { ?&gt;\n        Paid\n        &lt;?php } else { ?&gt;\n        Unpaid\n        &lt;?php } ?&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n        &lt;?php echo $invoice-&gt;inv_description; ?&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n        &lt;?php echo $invoice-&gt;total; ?&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;?php } ?&gt;\n</code></pre>"},{"location":"volt/#constructor","title":"Constructor","text":"<pre><code>public function __construct(\n    ViewBaseInterface $view, \n    DiInterface $container = null\n)\n</code></pre> <p>The constructor accepts a Phalcon\\Mvc\\View or any component that implements the <code>ViewBaseInterface</code>, and a DI container.</p>"},{"location":"volt/#methods","title":"Methods","text":"<p>There are several methods available in Volt. In most cases, only a handful of them are used in modern day applications. </p> <pre><code>callMacro(string $name, array $arguments = []): mixed\n</code></pre> <p>Checks if a macro is defined and calls it</p> <pre><code>convertEncoding(string $text, string $from, string $to): string\n</code></pre> <p>Performs a string conversion</p> <pre><code>getCompiler(): Compiler\n</code></pre> <p>Returns the Volt's compiler</p> <pre><code>getContent(): string\n</code></pre> <p>Returns cached output on another view stage</p> <pre><code>getOptions(): array\n</code></pre> <p>Return Volt's options</p> <pre><code>getView(): ViewBaseInterface\n</code></pre> <p>Returns the view component related to the adapter</p> <pre><code>isIncluded(mixed $needle, mixed $haystack): bool\n</code></pre> <p>Checks if the needle is included in the haystack</p> <pre><code>length(mixed $item): int\n</code></pre> <p>Length filter. If an array/object is passed a count is performed otherwise a strlen/mb_strlen</p> <pre><code>partial(string $partialPath, mixed $params = null): string\n</code></pre> <p>Renders a partial inside another view</p> <pre><code>render(string $templatePath, mixed $params, bool $mustClean = false)\n</code></pre> <p>Renders a view using the template engine</p> <pre><code>setOptions(array $options)\n</code></pre> <p>Set Volt's options</p> <pre><code>slice(mixed $value, int $start = 0, mixed $end = null)\n</code></pre> <p>Extracts a slice from a string/array/traversable object value </p> <pre><code>sort(array $value): array\n</code></pre> <p>Sorts an array</p>"},{"location":"volt/#activation","title":"Activation","text":"<p>As with other templating engines, you may register Volt in the view component, using a new extension or reusing the standard <code>.phtml</code>:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Di\\DiInterface;\nuse Phalcon\\Mvc\\ViewBaseInterface;\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\View\\Engine\\Volt;\n\n$container = new FactoryDefault();\n\n$container-&gt;setShared(\n    'voltService',\n    function (ViewBaseInterface $view) use ($container) {\n        $volt = new Volt($view, $container);\n        $volt-&gt;setOptions(\n            [\n                'always'    =&gt; true,\n                'extension' =&gt; '.php',\n                'separator' =&gt; '_',\n                'stat'      =&gt; true,\n                'path'      =&gt; appPath('storage/cache/volt/'),\n                'prefix'    =&gt; '-prefix-',\n            ]\n        );\n\n        return $volt;\n    }\n);\n\n$container-&gt;set(\n    'view',\n    function () {\n        $view = new View();\n\n        $view-&gt;setViewsDir('../app/views/');\n\n        $view-&gt;registerEngines(\n            [\n                '.volt' =&gt; 'voltService',\n            ]\n        );\n\n        return $view;\n    }\n);\n</code></pre> <p>To use the standard <code>.phtml</code> extension:</p> <pre><code>&lt;?php\n\n$view-&gt;registerEngines(\n    [\n        '.phtml' =&gt; 'voltService',\n    ]\n);\n</code></pre> <p>You don't have to specify the Volt Service in the DI; you can also use the Volt engine with the default settings:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View\\Engine\\Volt;\n\n\n$view-&gt;registerEngines(\n    [\n        '.volt' =&gt; Volt::class,\n    ]\n);\n</code></pre> <p>If you do not want to reuse Volt as a service, you can pass an anonymous function to register the engine instead of a service name:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Di\\FactoryDefault;\nuse Phalcon\\Di\\DiInterface;\nuse Phalcon\\Mvc\\ViewBaseInterface;\nuse Phalcon\\Mvc\\View;\nuse Phalcon\\Mvc\\View\\Engine\\Volt;\n\n$container = new FactoryDefault();\n\n$container-&gt;set(\n    'view',\n    function () {\n        $view = new View();\n\n        $view-&gt;setViewsDir('../app/views/');\n        $view-&gt;registerEngines(\n            [\n                '.volt' =&gt; function (ViewBaseInterface $view) {\n                    $volt = new Volt($view, $this);\n\n                    $volt-&gt;setOptions(\n                        [\n                            'always'    =&gt; true,\n                            'extension' =&gt; '.php',\n                            'separator' =&gt; '_',\n                            'stat'      =&gt; true,\n                            'path'      =&gt; appPath('storage/cache/volt/'),\n                            'prefix'    =&gt; '-prefix-',\n                        ]\n                    );\n\n                    return $volt;\n                }\n            ]\n        );\n\n        return $view;\n    }\n);\n</code></pre> <p>The following options are available in Volt:</p> Option Default Description <code>autoescape</code> <code>false</code> Enables autoescape HTML globally <code>always</code> <code>false</code> Whether templates must be compiled in each request or when they change <code>extension</code> <code>.php</code> An additional extension appended to the compiled PHP file <code>path</code> <code>./</code> A writeable path where the compiled PHP templates will be placed <code>separator</code> <code>%%</code> Replace directory separators <code>/</code> and <code>\\</code> with this separator in order to create a single file in the compiled directory <code>prefix</code> <code>null</code> Prepend a prefix to the templates in the compilation path <code>stat</code> <code>true</code> Whether Phalcon must check if there are differences between the template file and its compiled path <p>The compilation path is generated according to the options above. You however, have total freedom in defining the compilation path as an anonymous function, including the logic used to generate it. The anonymous function receives the relative path to the template in the predefined views directory.</p> <p>Appending extensions</p> <p>Append the <code>.php</code> extension to the template path, leaving the compiled templates in the same directory:</p> <pre><code>&lt;?php\n\n$volt-&gt;setOptions(\n    [\n        'path' =&gt; function ($templatePath) {\n            return $templatePath . '.php';\n        }\n    ]\n);\n</code></pre> <p>Different directories</p> <p>The following example will create the same structure in a different directory</p> <pre><code>&lt;?php\n\n$volt-&gt;setOptions(\n    [\n        'path' =&gt; function (string $templatePath) {\n            $dirName = dirname($templatePath);\n\n            if (true !== is_dir('cache/' . $dirName)) {\n                mkdir(\n                    'cache/' . $dirName,\n                    0777,\n                    true\n                );\n            }\n\n            return 'cache/' . $dirName . '/' . $templatePath . '.php';\n        }\n    ]\n);\n</code></pre>"},{"location":"volt/#usage","title":"Usage","text":"<p>Volt uses specific delimiters for its syntax. <code>{%- raw -%}{% ... %}{% endraw %}</code> is used to execute statements such as for-loops or assign values and <code>{%- raw -%}{{ ... }}{% endraw %}</code> prints the result of an expression to the template. The view files can also contain PHP and HTML should you choose to.</p> <p>Below is a sample template that illustrates a few basics:</p> <pre><code>{%- raw -%}\n{# app/views/posts/show.phtml #}\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;{{ title }} - An example blog&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        {% if true === showNavigation %}\n        &lt;ul id='navigation'&gt;\n            {% for item in menu %}\n                &lt;li&gt;\n                    &lt;a href='{{ item.href }}'&gt;\n                        {{ item.caption }}\n                    &lt;/a&gt;\n                &lt;/li&gt;\n            {% endfor %}\n        &lt;/ul&gt;\n        {% endif %}\n\n        &lt;h1&gt;{{ post.title }}&lt;/h1&gt;\n\n        &lt;div class='content'&gt;\n            {{ post.content }}\n        &lt;/div&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n{% endraw %}\n</code></pre> <p>Using Phalcon\\Mvc\\View you can pass variables from the controller to the views. In the above example, four variables were passed to the view: <code>showNavigation</code>, <code>menu</code>, <code>title</code> and <code>post</code>:</p> <pre><code>&lt;?php\n\nuse MyApp\\Models\\Menu;\nuse MyApp\\Models\\Post;\nuse Phalcon\\Mvc\\Controller;\nuse Phalcon\\Mvc\\View;\n\n/**\n * @property View $view\n */\nclass PostsController extends Controller\n{\n    public function showAction()\n    {\n        $post = Post::findFirst();\n        $menu = Menu::findFirst();\n\n        $this-&gt;view-&gt;showNavigation = true;\n        $this-&gt;view-&gt;menu           = $menu;\n        $this-&gt;view-&gt;title          = $post-&gt;title;\n        $this-&gt;view-&gt;post           = $post;\n\n        // Or...\n\n        $this-&gt;view-&gt;setVar('showNavigation', true);\n        $this-&gt;view-&gt;setVar('menu',           $menu);\n        $this-&gt;view-&gt;setVar('title',          $post-&gt;title);\n        $this-&gt;view-&gt;setVar('post',           $post);\n    }\n}\n</code></pre> <p>NOTE</p> <p>The placeholders for Volt <code>{% raw %}{{{% endraw %}</code>, <code>{% raw %}}}{% endraw %}</code>, <code>{% raw %}{%{% endraw %}</code> and <code>{% raw %}%}{% endraw %}</code> cannot be changed or set. </p>"},{"location":"volt/#vuejs","title":"Vue.js","text":"<p>If you are using Vue you will need to change the interpolators in Vue itself:</p> <pre><code>new Vue(\n    {\n        el: '#app',\n        data: data,\n        delimiters: [\"&lt;%\",\"%&gt;\"]\n    }\n);\n</code></pre>"},{"location":"volt/#angular","title":"Angular","text":"<p>If you are using Angular you can set the interpolators as follows:</p> <pre><code>  var myApp = angular.module('myApp', []);\n\n  myApp.config(\n    function ($interpolateProvider) {\n        $interpolateProvider.startSymbol('&lt;%');\n        $interpolateProvider.endSymbol('%&gt;');\n    }\n);\n</code></pre>"},{"location":"volt/#variables","title":"Variables","text":"<p>Object variables may have attributes which can be accessed using the syntax: <code>foo.bar</code>. If you are passing arrays, you have to use the square bracket syntax: <code>foo['bar']</code></p> <pre><code>{%- raw -%}\n{{ post.title }} {# for $post-&gt;title #}\n{{ post['title'] }} {# for $post['title'] #}\n{% endraw %}\n</code></pre>"},{"location":"volt/#filters","title":"Filters","text":"<p>Variables can be formatted or modified using filters. The pipe operator <code>|</code> is used to apply filters to variables:</p> <pre><code>{%- raw -%}\n{{ post.title | e }}\n{{ post.content | striptags }}\n{{ name | capitalize | trim }}\n{% endraw %}\n</code></pre> <p>The available built-in filters are:</p> Filter Description <code>abs</code> Applies the <code>abs</code> PHP function to a value. <code>capitalize</code> Capitalizes a string by applying the <code>ucwords</code> PHP function to the value <code>convert_encoding</code> Converts a string from one charset to another <code>default</code> Sets a default value in case the evaluated expression is empty, not set or evaluates to falsy value <code>e</code> Applies <code>Phalcon\\Escaper-&gt;escapeHtml()</code> to the value <code>escape</code> Applies <code>Phalcon\\Escaper-&gt;escapeHtml()</code> to the value <code>escape_attr</code> Applies <code>Phalcon\\Escaper-&gt;escapeHtmlAttr()</code> to the value <code>escape_css</code> Applies <code>Phalcon\\Escaper-&gt;escapeCss()</code> to the value <code>escape_js</code> Applies <code>Phalcon\\Escaper-&gt;escapeJs()</code> to the value <code>format</code> Formats a string using <code>sprintf</code> <code>json_encode</code> Converts a value into its JSON representation <code>json_decode</code> Converts a value from its JSON representation to a PHP representation <code>join</code> Joins the array parts using a separator <code>join</code> <code>keys</code> Returns the array keys using <code>array_keys</code> <code>left_trim</code> Applies the <code>ltrim</code> PHP function to the value. Removing extra spaces <code>length</code> Counts the string length or how many items are in an array or object, equivalent of <code>count</code> <code>lower</code> Change the case of a string to lowercase <code>nl2br</code> Changes newlines <code>\\n</code> by line breaks (<code>&lt;br /&gt;</code>). Uses the PHP function <code>nl2br</code> <code>right_trim</code> Applies the <code>rtrim</code> PHP function to the value. Removing extra spaces <code>slashes</code> Applies the <code>addslashes</code> PHP function to the value. <code>slice</code> Slices strings, arrays or traversable objects <code>sort</code> Sorts an array using the PHP function <code>asort</code> <code>stripslashes</code> Applies the <code>stripslashes</code> PHP function to the value. Removing escaped quotes <code>striptags</code> Applies the <code>striptags</code> PHP function to the value. Removing HTML tags <code>trim</code> Applies the <code>trim</code> PHP function to the value. Removing extra spaces <code>upper</code> Applies the <code>strtoupper</code> PHP function to the value. <code>url_encode</code> Applies the <code>urlencode</code> PHP function to the value <p>Examples</p> <pre><code>{%- raw -%}\n{# e or escape filter #}\n{{ '&lt;h1&gt;Hello&lt;h1&gt;'|e }}\n{{ '&lt;h1&gt;Hello&lt;h1&gt;'|escape }}\n\n{# trim filter #}\n{{ '   hello   '|trim }}\n\n{# striptags filter #}\n{{ '&lt;h1&gt;Hello&lt;h1&gt;'|striptags }}\n\n{# slashes filter #}\n{{ ''this is a string''|slashes }}\n\n{# stripslashes filter #}\n{{ '\\'this is a string\\''|stripslashes }}\n\n{# capitalize filter #}\n{{ 'hello'|capitalize }}\n\n{# lower filter #}\n{{ 'HELLO'|lower }}\n\n{# upper filter #}\n{{ 'hello'|upper }}\n\n{# length filter #}\n{{ 'invoices'|length }}\n{{ [1, 2, 3]|length }}\n\n{# nl2br filter #}\n{{ 'some\\ntext'|nl2br }}\n\n{# sort filter #}\n{% set sorted = [3, 1, 2]|sort %}\n\n{# keys filter #}\n{% set keys = ['first': 1, 'second': 2, 'third': 3]|keys %}\n\n{# join filter #}\n{% set joined = 'a'..'z'|join(',') %}\n\n{# format filter #}\n{{ 'My real name is %s'|format(name) }}\n\n{# json_encode filter #}\n{% set encoded = invoices|json_encode %}\n\n{# json_decode filter #}\n{% set decoded = '{'one':1,'two':2,'three':3}'|json_decode %}\n\n{# url_encode filter #}\n{{ post.permanent_link|url_encode }}\n\n{# convert_encoding filter #}\n{{ 'd\u00e9sol\u00e9'|convert_encoding('utf8', 'latin1') }}\n{% endraw %}\n</code></pre>"},{"location":"volt/#comments","title":"Comments","text":"<p>Comments may also be added to a template using the <code>{%- raw -%}{# ... #}{% endraw %}</code> delimiters. All text inside them is just ignored in the final output:</p> <pre><code>{%- raw -%}\n{# note: this is a comment\n    {% set price = 100; %}\n#}\n{% endraw %}\n</code></pre>"},{"location":"volt/#control-structures","title":"Control Structures","text":"<p>Volt provides a set of basic but powerful control structures for use in templates:</p>"},{"location":"volt/#for","title":"For","text":"<p>Loop over each item in a sequence. The following example shows how to traverse a set of <code>invoices</code> and print each title:</p> <pre><code>{%- raw -%}\n&lt;h1&gt;Invoices&lt;/h1&gt;\n&lt;ul&gt;\n    {% for invoice in invoices %}\n    &lt;li&gt;\n        {{ invoice.inv_title | e }}\n    &lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n{% endraw %}\n</code></pre> <p>for-loops can also be nested:</p> <pre><code>{%- raw -%}\n&lt;h1&gt;Invoices&lt;/h1&gt;\n{% for invoice in invoices %}\n    {% for product in invoice.products %}\nProduct: {{ product.prd_title|e }} {{ product.prd_price|e }} USD &lt;br /&gt;\n    {% endfor %}\n{% endfor %}\n{% endraw %}\n</code></pre> <p>You can get the element <code>keys</code> as in the PHP counterpart using the following syntax:</p> <pre><code>{%- raw -%}\n{% set numbers = ['one': 1, 'two': 2, 'three': 3] %}\n\n{% for name, value in numbers %}\n    Name: {{ name }} Value: {{ value }} &lt;br /&gt;\n{% endfor %}\n{% endraw %}\n</code></pre> <p>An <code>if</code> evaluation can be optionally set:</p> <pre><code>{%- raw -%}\n{% set numbers = ['one': 1, 'two': 2, 'three': 3] %}\n\n{% for value in numbers if value &lt; 2 %}\n    Value: {{ value }} &lt;br /&gt;\n{% endfor %}\n\n{% for name, value in numbers if name !== 'two' %}\n    Name: {{ name }} Value: {{ value }} &lt;br /&gt;\n{% endfor %}\n{% endraw %}\n</code></pre> <p>If an <code>else</code> is defined inside the <code>for</code>, it will be executed if the expression in the iterator result in zero iterations:</p> <pre><code>{%- raw -%}\n&lt;h1&gt;Invoices&lt;/h1&gt;\n{% for invoice in invoices %}\n    Invoice: {{ invoice.inv_number | e }} - {{ invoice.inv_title | e }} &lt;br /&gt;\n{% else %}\n    There are no invoices to show\n{% endfor %}\n{% endraw %}\n</code></pre> <p>Alternative syntax:</p> <pre><code>{%- raw -%}\n&lt;h1&gt;Invoices&lt;/h1&gt;\n{% for invoice in invoices %}\n    Invoice: {{ invoice.inv_number | e }} - {{ invoice.inv_title | e }} &lt;br /&gt;\n{% elsefor %}\n    There are no invoices to show\n{% endfor %}\n{% endraw %}\n</code></pre>"},{"location":"volt/#loops","title":"Loops","text":"<p>The <code>break</code> and <code>continue</code> statements can be used to exit from a loop or force an iteration in the current block:</p> <pre><code>{%- raw -%}\n{# skip the even invoices #}\n{% for index, invoice in invoices %}\n    {% if index is even %}\n        {% continue %}\n    {% endif %}\n    ...\n{% endfor %}\n{% endraw %}\n</code></pre> <pre><code>{%- raw -%}\n{# exit the foreach on the first even invoice #}\n{% for index, invoice in invoices %}\n    {% if index is even %}\n        {% break %}\n    {% endif %}\n    ...\n{% endfor %}\n{% endraw %}\n</code></pre>"},{"location":"volt/#if","title":"If","text":"<p>As PHP, an <code>if</code> statement checks if an expression is evaluated as true or false:</p> <pre><code>{%- raw -%}\n&lt;h1&gt;Paid Invoices&lt;/h1&gt;\n&lt;ul&gt;\n    {% for invoice in invoices %}\n        {% if invoice.inv_paid_flag === 1 %}\n            &lt;li&gt;{{ invoice.inv_title | e }}&lt;/li&gt;\n        {% endif %}\n    {% endfor %}\n&lt;/ul&gt;{% endraw %}\n</code></pre> <p>The else clause is also supported:</p> <pre><code>{%- raw -%}\n&lt;h1&gt;Invoices&lt;/h1&gt;\n&lt;ul&gt;\n    {% for invoice in invoices %}\n        {% if invoice.inv_paid_flag === 1 %}\n            &lt;li&gt;{{ invoice.inv_title | e }}&lt;/li&gt;\n        {% else %}\n            &lt;li&gt;{{ invoice.inv_title | e }} [NOT PAID]&lt;/li&gt;\n        {% endif %}\n    {% endfor %}\n&lt;/ul&gt;{% endraw %}\n</code></pre> <p>The <code>elseif</code> control flow structure can be used together with if to emulate a <code>switch</code> block:</p> <pre><code>{%- raw -%}\n{% if invoice.inv_paid_flag === constant('MyApp\\Constants\\Status::PAID') %}\n    Invoice is paid\n{% elseif invoice.inv_paid_flag === 2 %}\n    Invoice is not paid\n{% else %}\n    Invoice is paid status is not defined\n{% endif %}\n{% endraw %}\n</code></pre>"},{"location":"volt/#switch","title":"Switch","text":"<p>An alternative to the <code>if</code> statement is <code>switch</code>, allowing you to create logical execution paths in your application:</p> <pre><code>{%- raw -%}\n{% switch foo %}\n    {% case 0 %}\n    {% case 1 %}\n    {% case 2 %}\n        \"foo\" is less than 3 but not negative\n        {% break %}\n    {% case 3 %}\n        \"foo\" is 3\n        {% break %}\n    {% default %}\n        \"foo\" is {{ foo }}\n{% endswitch %}\n{% endraw %}\n</code></pre> <p>The <code>switch</code> statement executes statement by statement, therefore the <code>break</code> statement is necessary in some cases. Any output (including whitespace) between a switch statement and the first <code>case</code> will result in a syntax error. Empty lines and whitespaces can therefore be cleared to reduce the number of errors see here.</p> <p><code>case</code> without <code>switch</code> <pre><code>{%- raw -%}\n{% case EXPRESSION %}\n{% endraw %}\n</code></pre></p> <p>Will throw <code>Fatal error: Uncaught Phalcon\\Mvc\\View\\Exception: Unexpected CASE</code>.</p> <p><code>switch</code> without <code>endswitch</code> <pre><code>{%- raw -%}\n{% switch EXPRESSION %}\n{% endraw %}\n</code></pre></p> <p>Will throw <code>Fatal error: Uncaught Phalcon\\Mvc\\View\\Exception: Syntax error, unexpected EOF in ..., there is a 'switch' block without 'endswitch'</code>.</p> <p><code>default</code> without <code>switch</code> <pre><code>{%- raw -%}\n{% default %}\n{% endraw %}\n</code></pre> Will not throw an error because <code>default</code> is a reserved word for filters like <code>{%- raw -%}{{ EXPRESSION | default(VALUE) }}{% endraw %}</code> but in this case the expression will only output an empty char <code>''</code> .</p> <p>nested <code>switch</code> <pre><code>{%- raw -%}\n{% switch EXPRESSION %}\n  {% switch EXPRESSION %}\n  {% endswitch %}\n{% endswitch %}\n{% endraw %}\n</code></pre></p> <p>Will throw <code>Fatal error: Uncaught Phalcon\\Mvc\\View\\Exception: A nested switch detected. There is no nested switch-case statements support in ... on line ...</code></p> <p>a <code>switch</code> without an expression <pre><code>{%- raw -%}\n{% switch %}\n  {% case EXPRESSION %}\n      {% break %}\n{% endswitch %}\n{% endraw %}\n</code></pre></p> <p>Will throw <code>Fatal error: Uncaught Phalcon\\Mvc\\View\\Exception: Syntax error, unexpected token {%- raw -%}%}{% endraw %} in ... on line ...</code></p>"},{"location":"volt/#loop-context","title":"Loop Context","text":"<p>A special variable is available inside <code>for</code> loops providing you information about</p> Variable Description <code>loop.first</code> True if in the first iteration. <code>loop.index</code> The current iteration of the loop. (1 indexed) <code>loop.index0</code> The current iteration of the loop. (0 indexed) <code>loop.length</code> The number of items to iterate <code>loop.last</code> True if in the last iteration. <code>loop.revindex</code> The number of iterations from the end of the loop (1 indexed) <code>loop.revindex0</code> The number of iterations from the end of the loop (0 indexed) <p>Example: </p> <pre><code>{%- raw -%}\n{% for invoice in invoices %}\n    {% if loop.first %}\n        &lt;table&gt;\n            &lt;tr&gt;\n                &lt;th&gt;#&lt;/th&gt;\n                &lt;th&gt;Id&lt;/th&gt;\n                &lt;th&gt;Title&lt;/th&gt;\n            &lt;/tr&gt;\n    {% endif %}\n            &lt;tr&gt;\n                &lt;td&gt;{{ loop.index }}&lt;/td&gt;\n                &lt;td&gt;{{ invoice.inv_id }}&lt;/td&gt;\n                &lt;td&gt;{{ invoice.inv_title }}&lt;/td&gt;\n            &lt;/tr&gt;\n    {% if loop.last %}\n        &lt;/table&gt;\n    {% endif %}\n{% endfor %}\n{% endraw %}\n</code></pre>"},{"location":"volt/#assignments","title":"Assignments","text":"<p>Variables may be changed in a template using the instruction <code>set</code>:</p> <pre><code>{%- raw -%}\n{% set fruits = ['Apple', 'Banana', 'Orange'] %}\n\n{% set title = invoice.inv_title %}\n{% endraw %}\n</code></pre> <p>Multiple assignments are allowed in the same instruction:</p> <pre><code>{%- raw -%}\n{% set fruits = ['Apple', 'Banana', 'Orange'], name = invoice.inv_title, active = true %}\n{% endraw %}\n</code></pre> <p>Additionally, you can use compound assignment operators:</p> <pre><code>{%- raw -%}\n{% set price += 100.00 %}\n\n{% set age *= 5 %}\n{% endraw %}\n</code></pre> <p>The following operators are available:</p> Operator Description <code>=</code> Standard Assignment <code>+=</code> Addition assignment <code>-=</code> Subtraction assignment <code>\\*=</code> Multiplication assignment <code>/=</code> Division assignment"},{"location":"volt/#expressions","title":"Expressions","text":"<p>Volt provides a basic set of expression support, including literals and common operators. A expression can be evaluated and printed using the <code>{%- raw -%}{{{% endraw %}</code> and <code>{%- raw -%}}}{% endraw %}</code> delimiters:</p> <pre><code>{%- raw -%}\n{{ (1 + 1) * 2 }}\n{% endraw %}\n</code></pre> <p>If an expression needs to be evaluated without be printed the <code>do</code> statement can be used:</p> <pre><code>{%- raw -%}\n{% do (1 + 1) * 2 %}\n{% endraw %}\n</code></pre>"},{"location":"volt/#literals","title":"Literals","text":"<p>The following literals are supported:</p> Filter Description <code>'this is a string'</code> Text between double quotes or single quotes are handled as strings <code>100.25</code> Numbers with a decimal part are handled as doubles/floats <code>100</code> Numbers without a decimal part are handled as integers <code>false</code> Constant <code>false</code> is the boolean <code>false</code> value <code>true</code> Constant <code>true</code> is the boolean <code>true</code> value <code>null</code> Constant <code>null</code> is the <code>null</code> value"},{"location":"volt/#arrays","title":"Arrays","text":"<p>You can create arrays by enclosing a list of values in square brackets:</p> <pre><code>{%- raw -%}\n{# Simple array #}\n{{ ['Apple', 'Banana', 'Orange'] }}\n\n{# Other simple array #}\n{{ ['Apple', 1, 2.5, false, null] }}\n\n{# Multi-Dimensional array #}\n{{ [[1, 2], [3, 4], [5, 6]] }}\n\n{# Hash-style array #}\n{{ ['first': 1, 'second': 4/2, 'third': '3'] }}\n{% endraw %}\n</code></pre> <p>Curly braces also can be used to define arrays or hashes:</p> <pre><code>{%- raw -%}\n{% set myArray = {'Apple', 'Banana', 'Orange'} %}\n{% set myHash  = {'first': 1, 'second': 4/2, 'third': '3'} %}\n{% endraw %}\n</code></pre>"},{"location":"volt/#math","title":"Math","text":"<p>You may make calculations in templates using the following operators:</p> Operator Description <code>+</code> Perform an adding operation. <code>{%- raw -%}{{ 2 + 3 }}{% endraw %}</code> returns 5 <code>-</code> Perform a subtraction operation <code>{%- raw -%}{{ 2 - 3 }}{% endraw %}</code> returns -1 <code>*</code> Perform a multiplication operation <code>{%- raw -%}{{ 2 * 3 }}{% endraw %}</code> returns 6 <code>/</code> Perform a division operation <code>{%- raw -%}{{ 10 / 2 }}{% endraw %}</code> returns 5 <code>%</code> Calculate the remainder of an integer division <code>{%- raw -%}{{ 10 % 3 }}{% endraw %}</code> returns 1"},{"location":"volt/#comparisons","title":"Comparisons","text":"<p>The following comparison operators are available:</p> Operator Description <code>==</code> Check whether both operands are equal <code>!=</code> Check whether both operands aren't equal <code>&lt;&gt;</code> Check whether both operands aren't equal <code>&gt;</code> Check whether left operand is greater than right operand <code>&lt;</code> Check whether left operand is less than right operand <code>&lt;=</code> Check whether left operand is less or equal than right operand <code>&gt;=</code> Check whether left operand is greater or equal than right operand <code>===</code> Check whether both operands are identical <code>!==</code> Check whether both operands aren't identical"},{"location":"volt/#logic","title":"Logic","text":"<p>Logic operators are useful in the <code>if</code> expression evaluation to combine multiple tests:</p> Operator Description <code>or</code> Return true if the left or right operand is evaluated as true <code>and</code> Return true if both left and right operands are evaluated as true <code>not</code> Negates an expression <code>( expr )</code> Parenthesis groups expressions"},{"location":"volt/#other-operators","title":"Other Operators","text":"<p>Additional operators seen the following operators are available:</p> Operator Description <code>~</code> Concatenates both operands <code>{%- raw -%}{{ 'hello ' ~ 'world' }}{% endraw %}</code> <code>|</code> Applies a filter in the right operand to the left <code>{%- raw -%}{{ 'hello'|uppercase }}{% endraw %}</code> <code>..</code> Creates a range <code>{%- raw -%}{{ 'a'..'z' }}{% endraw %}</code> <code>{%- raw -%}{{ 1..10 }}{% endraw %}</code> <code>is</code> Same as == (equals), also performs tests <code>in</code> To check if an expression is contained into other expressions <code>if 'a' in 'abc'</code> <code>is not</code> Same as != (not equals) <code>'a' ? 'b' : 'c'</code> Ternary operator. The same as the PHP ternary operator <code>++</code> Increments a value <code>--</code> Decrements a value <p>The following example shows how to use operators:</p> <pre><code>{%- raw -%}\n{% set fruits = ['Apple', 'Banana', 'Orange', 'Kiwi'] %}\n\n{% for index in 0..fruits | length %}\n    {% if invoices[index] is defined %}\n        {{ 'Name: ' ~ invoices[index] }}\n    {% endif %}\n{% endfor %}\n{% endraw %}\n</code></pre>"},{"location":"volt/#tests","title":"Tests","text":"<p>Tests can be used to test if a variable has a valid expected value. The operator <code>is</code> is used to perform the tests:</p> <pre><code>{%- raw -%}\n{% set invoices = ['1': 'Apple', '2': 'Banana', '3': 'Orange'] %}\n\n{% for position, name in invoices %}\n    {% if position is odd %}\n        {{ name }}\n    {% endif %}\n{% endfor %}\n{% endraw %}\n</code></pre> <p>The following built-in tests are available in Volt:</p> Test Description <code>defined</code> Checks if a variable is defined (<code>isset()</code>) <code>divisibleby</code> Checks if a value is divisible by other value <code>empty</code> Checks if a variable is empty <code>even</code> Checks if a numeric value is even <code>iterable</code> Checks if a value is iterable. Can be traversed by a 'for' statement <code>numeric</code> Checks if value is numeric <code>odd</code> Checks if a numeric value is odd <code>sameas</code> Checks if a value is identical to other value <code>scalar</code> Checks if value is scalar (not an array or object) <code>type</code> Checks if a value is of the specified type <p>More examples:</p> <pre><code>{%- raw -%}\n{% if invoice is defined %}\n    The invoice variable is defined\n{% endif %}\n\n{% if invoice is empty %}\n    The invoice is null or is not defined\n{% endif %}\n\n{% for key, name in [1: 'Apple', 2: 'Banana', 3: 'Orange'] %}\n    {% if key is even %}\n        {{ name }}\n    {% endif %}\n{% endfor %}\n\n{% for key, name in [1: 'Apple', 2: 'Banana', 3: 'Orange'] %}\n    {% if key is odd %}\n        {{ name }}\n    {% endif %}\n{% endfor %}\n\n{% for key, name in [1: 'Apple', 2: 'Banana', 'third': 'Orange'] %}\n    {% if key is numeric %}\n        {{ name }}\n    {% endif %}\n{% endfor %}\n\n{% set invoices = [1: 'Apple', 2: 'Banana'] %}\n{% if invoices is iterable %}\n    {% for invoice in invoices %}\n        ...\n    {% endfor %}\n{% endif %}\n\n{% set world = 'hello' %}\n{% if world is sameas('hello') %}\n    {{ 'it's hello' }}\n{% endif %}\n\n{% set external = false %}\n{% if external is type('boolean') %}\n    {{ 'external is false or true' }}\n{% endif %}\n{% endraw %}\n</code></pre>"},{"location":"volt/#macros","title":"Macros","text":"<p>Macros can be used to reuse logic in a template, they act as PHP functions, can receive parameters and return values:</p> <pre><code>{%- raw -%}\n{# Macro 'display a list of links to related topics' #}\n{%- macro related_bar(related_links) %}\n    &lt;ul&gt;\n        {%- for link in related_links %}\n        &lt;li&gt;\n            &lt;a href='{{ url(link.url) }}' \n               title='{{ link.title|striptags }}'&gt;\n                {{ link.text }}\n            &lt;/a&gt;\n        &lt;/li&gt;\n        {%- endfor %}\n    &lt;/ul&gt;\n{%- endmacro %}\n\n{# Print related links #}\n{{ related_bar(links) }}\n\n&lt;div&gt;This is the content&lt;/div&gt;\n\n{# Print related links again #}\n{{ related_bar(links) }}\n{% endraw %}\n</code></pre> <p>When calling macros, parameters can be passed by name:</p> <pre><code>{%- raw -%}\n{%- macro error_messages(message, field, type) %}\n    &lt;div&gt;\n        &lt;span class='error-type'&gt;{{ type }}&lt;/span&gt;\n        &lt;span class='error-field'&gt;{{ field }}&lt;/span&gt;\n        &lt;span class='error-message'&gt;{{ message }}&lt;/span&gt;\n    &lt;/div&gt;\n{%- endmacro %}\n\n{# Call the macro #}\n{{ \n    error_messages(\n        'type': 'Invalid', \n        'message': 'The name not invalid', \n        'field': 'name'\n    ) \n}}\n{% endraw %}\n</code></pre> <p>Macros can return values:</p> <pre><code>{%- raw -%}\n{%- macro my_input(name, class) %}\n    {% return text_field(name, 'class': class) %}\n{%- endmacro %}\n\n{# Call the macro #}\n{{ '&lt;p&gt;' ~ my_input('name', 'input-text') ~ '&lt;/p&gt;' }}\n{% endraw %}\n</code></pre> <p>And receive optional parameters:</p> <pre><code>{%- raw -%}\n{%- macro my_input(name, class='input-text') %}\n    {% return text_field(name, 'class': class) %}\n{%- endmacro %}\n\n{# Call the macro #}\n{{ '&lt;p&gt;' ~ my_input('name') ~ '&lt;/p&gt;' }}\n{{ '&lt;p&gt;' ~ my_input('name', 'input-text') ~ '&lt;/p&gt;' }}\n{% endraw %}\n</code></pre>"},{"location":"volt/#tag-helpers","title":"Tag Helpers","text":"<p>Volt is highly integrated with Phalcon\\Tag, so it's easy to use the helpers provided by that component in a Volt template:</p> <pre><code>{%- raw -%}\n{{ javascript_include('js/jquery.js') }}\n\n{{ form('products/save', 'method': 'post') }}\n\n    &lt;label for='name'&gt;Name&lt;/label&gt;\n    {{ text_field('name', 'size': 32) }}\n\n    &lt;label for='type'&gt;Type&lt;/label&gt;\n    {{ select({'type', productTypes, 'using': ['id', 'name']}) }}\n\n    &lt;label for='type'&gt;Section&lt;/label&gt;\n    {{ \n        select(\n            [\n                'type', \n                productSections, \n                'using': ['id', 'name'], \n                'useEmpty': true, \n                'emptyText': '...', \n                'emptyValue': '', \n                'class': 'form-control'\n            ]\n        ) \n    }}\n\n    {{ submit_button('Send') }}\n\n{{ end_form() }}\n{% endraw %}\n</code></pre> <p>The following PHP is generated:</p> <pre><code>&lt;?php echo Phalcon\\Tag::javascriptInclude('js/jquery.js') ?&gt;\n\n&lt;?php echo Phalcon\\Tag::form(['products/save', 'method' =&gt; 'post']); ?&gt;\n\n    &lt;label for='name'&gt;Name&lt;/label&gt;\n    &lt;?php echo Phalcon\\Tag::textField(['name', 'size' =&gt; 32]); ?&gt;\n\n    &lt;label for='type'&gt;Type&lt;/label&gt;\n    &lt;?php echo Phalcon\\Tag::select(['type', $productTypes, 'using' =&gt; ['id', 'name']]); ?&gt;\n\n    &lt;label for='type'&gt;Section&lt;/label&gt;\n    &lt;?php echo Phalcon\\Tag::select(['type', $productSections, 'using' =&gt; ['id', 'name'], 'useEmpty' =&gt; true, 'emptyText' =&gt; '...', 'emptyValue' =&gt; '', 'class' =&gt; 'form-control']); ?&gt;\n\n    &lt;?php echo Phalcon\\Tag::submitButton('Send'); ?&gt;\n\n{%- raw -%}\n{{ end_form() }}\n{% endraw %}\n</code></pre> <p>To call a Phalcon\\Tag helper, you only need to call an uncamelized version of the method:</p> Method Volt function <code>Phalcon\\Tag::checkField</code> <code>check_field</code> <code>Phalcon\\Tag::dateField</code> <code>date_field</code> <code>Phalcon\\Tag::emailField</code> <code>email_field</code> <code>Phalcon\\Tag::endForm</code> <code>end_form</code> <code>Phalcon\\Tag::fileField</code> <code>file_field</code> <code>Phalcon\\Tag::form</code> <code>form</code> <code>Phalcon\\Tag::friendlyTitle</code> <code>friendly_title</code> <code>Phalcon\\Tag::getTitle</code> <code>get_title</code> <code>Phalcon\\Tag::hiddenField</code> <code>hidden_field</code> <code>Phalcon\\Tag::image</code> <code>image</code> <code>Phalcon\\Tag::javascriptInclude</code> <code>javascript_include</code> <code>Phalcon\\Tag::linkTo</code> <code>link_to</code> <code>Phalcon\\Tag::numericField</code> <code>numeric_field</code> <code>Phalcon\\Tag::passwordField</code> <code>password_field</code> <code>Phalcon\\Tag::radioField</code> <code>radio_field</code> <code>Phalcon\\Tag::select</code> <code>select</code> <code>Phalcon\\Tag::selectStatic</code> <code>select_static</code> <code>Phalcon\\Tag::stylesheetLink</code> <code>stylesheet_link</code> <code>Phalcon\\Tag::submitButton</code> <code>submit_button</code> <code>Phalcon\\Tag::textArea</code> <code>text_area</code> <code>Phalcon\\Tag::textField</code> <code>text_field</code>"},{"location":"volt/#functions","title":"Functions","text":"<p>The following built-in functions are available in Volt:</p> Name Description <code>constant</code> Reads a PHP constant <code>content</code> Includes the content produced in a previous rendering stage <code>date</code> Calls the PHP function with the same name <code>dump</code> Calls the PHP function <code>var_dump()</code> <code>get_content</code> Same as <code>content</code> <code>partial</code> Dynamically loads a partial view in the current template <code>static_url</code> Generate a static url using the <code>url</code> service <code>super</code> Render the contents of the parent block <code>time</code> Calls the PHP function with the same name <code>url</code> Generate a URL using the <code>url</code> service <code>version</code> Returns the current version of the framework <code>version_id</code> Returns the current version id of the framework"},{"location":"volt/#view","title":"View","text":"<p>Also, Volt is integrated with Phalcon\\Mvc\\View, you can play with the view hierarchy and include partials as well:</p> <pre><code>{%- raw -%}\n{{ content() }}\n\n&lt;div id='footer'&gt;\n    {{ partial('partials/footer') }}\n    {{ partial('partials/footer', ['links': links]) }}\n&lt;/div&gt;\n{% endraw %}\n</code></pre> <p>A partial is included in runtime, Volt also provides <code>include</code>, this compiles the content of a view and returns its contents as part of the view which was included:</p> <pre><code>{%- raw -%}\n&lt;div id='footer'&gt;\n    {% include 'partials/footer' %}\n    {% include 'partials/footer' with ['links': links] %}\n&lt;/div&gt;\n{% endraw %}\n</code></pre>"},{"location":"volt/#include","title":"Include","text":"<p><code>include</code> has a special behavior that will help us improve performance a bit when using Volt, if you specify the extension when including the file and it exists when the template is compiled, Volt can inline the contents of the template in the parent template where it's included. Templates aren't inlined if the <code>include</code> have variables passed with <code>with</code>:</p> <pre><code>{%- raw -%}\n&lt;div id='footer'&gt;\n    {% include 'partials/footer.volt' %}\n&lt;/div&gt;\n{% endraw %}\n</code></pre>"},{"location":"volt/#partial-vs-include","title":"Partial Vs Include","text":"<p>Keep the following points in mind when choosing to use the <code>partial</code> function or <code>include</code>:</p> Type Description <code>partial</code> allows you to include templates made in Volt and in other template engines. As well allows you to pass an expression like a variable allowing to include the content of other view dynamically. It's better if the content that you have to include changes frequently <code>includes</code> copies the compiled content into the view which improves the performance. Only allows to include templates made with Volt. Requires an existing template at compile time"},{"location":"volt/#inheritance","title":"Inheritance","text":"<p>With template inheritance you can create base templates that can be extended by others templates allowing to reuse code. A base template define blocks than can be overridden by a child template. Let's pretend that we have the following base template:</p> <pre><code>{%- raw -%}\n{# templates/base.volt #}\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        {% block head %}\n            &lt;link rel='stylesheet' href='style.css' /&gt;\n        {% endblock %}\n\n        &lt;title&gt;{% block title %}{% endblock %} - My Webpage&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id='content'&gt;{% block content %}{% endblock %}&lt;/div&gt;\n\n        &lt;div id='footer'&gt;\n            {% block footer %}\n                &amp;copy; Copyright 2012-present. \n                All rights reserved.\n            {% endblock %}\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n{% endraw %}\n</code></pre> <p>From other template we could extend the base template replacing the blocks:</p> <pre><code>{%- raw -%}\n{% extends 'templates/base.volt' %}\n\n{% block title %}Index{% endblock %}\n\n{% block head %}&lt;style type='text/css'&gt;.important { color: #336699; }&lt;/style&gt;{% endblock %}\n\n{% block content %}\n    &lt;h1&gt;Index&lt;/h1&gt;\n    &lt;p class='important'&gt;Welcome on my awesome homepage.&lt;/p&gt;\n{% endblock %}\n{% endraw %}\n</code></pre> <p>Not all blocks must be replaced at a child template, only those that are needed. The final output produced will be the following:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;style type='text/css'&gt;.important { color: #336699; }&lt;/style&gt;\n\n        &lt;title&gt;Index - My Webpage&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;div id='content'&gt;\n            &lt;h1&gt;Index&lt;/h1&gt;\n            &lt;p class='important'&gt;Welcome on my awesome homepage.&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;div id='footer'&gt;\n            &amp;copy; Copyright 2012-present. \n            All rights reserved.\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"volt/#multiple-inheritance","title":"Multiple Inheritance","text":"<p>Extended templates can extend other templates. The following example illustrates this:</p> <pre><code>{%- raw -%}\n{# main.volt #}\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Title&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        {% block content %}{% endblock %}\n    &lt;/body&gt;\n&lt;/html&gt;\n{% endraw %}\n</code></pre> <p>Template <code>layout.volt</code> extends <code>main.volt</code></p> <pre><code>{%- raw -%}\n{# layout.volt #}\n{% extends 'main.volt' %}\n\n{% block content %}\n\n    &lt;h1&gt;Table of contents&lt;/h1&gt;\n\n{% endblock %}\n{% endraw %}\n</code></pre> <p>Finally a view that extends <code>layout.volt</code>:</p> <pre><code>{%- raw -%}\n{# index.volt #}\n{% extends 'layout.volt' %}\n\n{% block content %}\n\n    {{ super() }}\n\n    &lt;ul&gt;\n        &lt;li&gt;Some option&lt;/li&gt;\n        &lt;li&gt;Some other option&lt;/li&gt;\n    &lt;/ul&gt;\n\n{% endblock %}\n{% endraw %}\n</code></pre> <p>Rendering <code>index.volt</code> produces:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Title&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        &lt;h1&gt;Table of contents&lt;/h1&gt;\n\n        &lt;ul&gt;\n            &lt;li&gt;Some option&lt;/li&gt;\n            &lt;li&gt;Some other option&lt;/li&gt;\n        &lt;/ul&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Note the call to the function <code>super()</code>. With that function it is possible to render the contents of the parent block. As partials, the path set to <code>extends</code> is a relative path under the current views directory (i.e. <code>app/views/</code>).</p> <p>NOTE</p> <p>By default, and for performance reasons, Volt only checks for changes in the children templates to know when to re-compile to plain PHP again, so it is recommended initialize Volt with the option <code>'always' =&gt; true</code>. Thus, the templates are compiled always taking into account changes in the parent templates.</p>"},{"location":"volt/#autoescape-mode","title":"Autoescape Mode","text":"<p>You can enable auto-escaping of all variables printed in a block using the autoescape mode:</p> <pre><code>{%- raw -%}\nManually escaped: {{ invoice.inv_title|e }}\n\n{% autoescape true %}\n    Autoescaped: {{ invoice.inv_title }}\n    {% autoescape false %}\n        No Autoescaped: {{ invoice.inv_title }}\n    {% endautoescape %}\n{% endautoescape %}\n{% endraw %}\n</code></pre>"},{"location":"volt/#extending-volt","title":"Extending Volt","text":"<p>Unlike other template engines, Volt itself is not required to run the compiled templates. Once the templates are compiled there is no dependence on Volt. With performance independence in mind, Volt only acts as a compiler for PHP templates.</p> <p>The Volt compiler allow you to extend it adding more functions, tests or filters to the existing ones.</p>"},{"location":"volt/#functions_1","title":"Functions","text":"<p>Functions act as normal PHP functions, a valid string name is required as function name. Functions can be added using two options, returning a simple string or using an anonymous function. Whichever option you use, you must return a valid PHP string expression.</p> <p>The following example binds the function name <code>shuffle</code> in Volt to the PHP function <code>str_shuffle</code>: <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View\\Engine\\Volt;\n\n$volt = new Volt($view, $container);\n\n$compiler = $volt-&gt;getCompiler();\n\n$compiler-&gt;addFunction('shuffle', 'str_shuffle');\n</code></pre></p> <p>and in Volt:</p> <pre><code>{% raw %}{{ shuffle('abcdefg') }}{% endraw %}\n</code></pre> <p>The example below registers the function with an anonymous function. Here we use <code>$resolvedArgs</code> to pass the arguments exactly when calling the method from the view:</p> <pre><code>&lt;?php\n\n$compiler-&gt;addFunction(\n    'widget',\n    function ($resolvedArgs, $exprArgs) {\n        return 'MyLibrary\\Widgets::get(' . $resolvedArgs . ')';\n    }\n);\n</code></pre> <p>and in Volt:</p> <pre><code>{% raw %}{{ widget('param1', 'param2') }}{% endraw %}\n</code></pre> <p>You can also treat the arguments independently and also check for unresolved parameters. In the example below, we retrieve the first parameter and then check for the existence of a second parameter. If present, we store it, otherwise we use the default <code>10</code>. Finally we call the <code>str_repeat</code> PHP method on the first and second parameter.</p> <pre><code>&lt;?php\n\n$compiler-&gt;addFunction(\n    'repeat',\n    function ($resolvedArgs, $exprArgs) use ($compiler) {\n        $firstArgument = $compiler-&gt;expression($exprArgs[0]['expr']);\n\n        if (isset($exprArgs[1])) {\n            $secondArgument = $compiler-&gt;expression($exprArgs[1]['expr']);\n        } else {\n            $secondArgument = '10';\n        }\n\n        return 'str_repeat(' . $firstArgument . ', ' . $secondArgument . ')';\n    }\n);\n</code></pre> <p>and in Volt:</p> <pre><code>{% raw %}{{ repeat('Apples', 'Oranges') }}{% endraw %}\n</code></pre> <p>You can also check the availability of functions in your system and call them if present. In the following example we will call <code>mb_stripos</code> if the <code>mbstring</code> extension is present. If present, then <code>mb_stripos</code> will be called, otherwise <code>stripos</code>:</p> <pre><code>&lt;?php\n\n$compiler-&gt;addFunction(\n    'contains_text',\n    function ($resolvedArgs, $exprArgs) {\n        if (true === function_exists('mb_stripos')) {\n            return 'mb_stripos(' . $resolvedArgs . ')';\n        } else {\n            return 'stripos(' . $resolvedArgs . ')';\n        }\n    }\n);\n</code></pre> <p>You can also override built-in functions by using the same name in the defined function. In the example below, we replace the built-in Volt function <code>dump()</code> with PHP's <code>print_r</code>.</p> <pre><code>&lt;?php\n\n$compiler-&gt;addFunction('dump', 'print_r');\n</code></pre>"},{"location":"volt/#filters_1","title":"Filters","text":"<p>A filter has the following form in a template: <code>leftExpr|name(optional-args)</code>. Adding new filters is similar as with the functions.</p> <p>Add a new filter called <code>hash</code> using the <code>sha1</code> method:</p> <pre><code>&lt;?php\n\n$compiler-&gt;addFilter('hash', 'sha1');\n</code></pre> <p>Add a new filter called <code>int</code>:</p> <pre><code>&lt;?php\n\n$compiler-&gt;addFilter(\n    'int',\n    function ($resolvedArgs, $exprArgs) {\n        return 'intval(' . $resolvedArgs . ')';\n    }\n);\n</code></pre> <p>Built-in filters can be overridden adding a function with the same name. The example below will replace the built-in <code>capitalize</code> filter with PHP's lcfirst function:</p> <pre><code>&lt;?php\n\n$compiler-&gt;addFilter('capitalize', 'lcfirst');\n</code></pre>"},{"location":"volt/#extensions","title":"Extensions","text":"<p>With extensions the developer has more flexibility to extend the template engine, and override the compilation of instructions, change the behavior of an expression or operator, add functions/filters, and more.</p> <p>An extension is a class that implements the events triggered by Volt as a method of itself. For example, the class below allows to use any PHP function in Volt:</p> <pre><code>&lt;?php\n\nnamespace MyApp\\View\\Extensions;\n\nclass PhpFunctionExtension\n{\n    public function compileFunction(string $name, string $arguments)\n    {\n        if (true === function_exists($name)) {\n            return $name . '('. $arguments . ')';\n        }\n    }\n}\n</code></pre> <p>The above class implements the method <code>compileFunction</code> which is invoked before any attempt to compile a function call in any template. The purpose of the extension is to verify if a function to be compiled is a PHP function allowing to call the PHP function from the template. Events in extensions must return valid PHP code, which will be used as result of the compilation instead of code generated by Volt. If an event does not return a string the compilation is done using the default behavior provided by the engine.</p> <p>Volt extensions must be in registered in the compiler making them available in compile time:</p> <pre><code>&lt;?php\n\nuse MyApp\\View\\Extensions\\PhpFunctionExtension;\n\n$compiler-&gt;addExtension(\n    new PhpFunctionExtension()\n);\n</code></pre>"},{"location":"volt/#compiler","title":"Compiler","text":"<p>The Volt compiler depends on the Volt parser. The parser parses the Volt templates and creates an Intermediate Representation (IR) from it. The compiler uses that representation and produces the compiled PHP code.</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler;\n\n$compiler = new Compiler();\n\n$compiler-&gt;compile(\"views/partials/header.volt\");\n\nrequire $compiler-&gt;getCompiledTemplatePath();\n</code></pre> <p>The Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler offers a number of methods that can be extended to suit your application needs.</p> <p><pre><code>public function __construct(ViewBaseInterface $view = null)\n</code></pre> Constructor</p> <p><pre><code>public function addExtension(mixed $extension): Compiler\n</code></pre> Registers an extension </p> <p><pre><code>public function addFilter(\n    string $name, \n    mixed definition\n): Compiler\n</code></pre> Register a new filter</p> <p><pre><code>public function addFunction(\n    string $name, \n    mixed $definition\n): Compiler\n</code></pre> Register a new function</p> <p><pre><code>public function attributeReader(array $expr): string\n</code></pre> Resolves attribute reading</p> <p><pre><code>public function compile(\n    string $templatePath, \n    bool $extendsMode = false\n)\n</code></pre> Compiles a template into a file applying the compiler options. This method does not return the compiled path if the template was not compiled</p> <pre><code>$compiler-&gt;compile(\"views/layouts/main.volt\");\n\nrequire $compiler-&gt;getCompiledTemplatePath();\n</code></pre> <p><pre><code>public function compileAutoEscape(\n    array $statement, \n    bool $extendsMode\n): string\n</code></pre> Compiles a \"autoescape\" statement returning PHP code</p> <p><pre><code>/**\n * @deprecated Will be removed in 5.0\n */\npublic function compileCache(\n    array $statement, \n    bool $extendsMode = false\n): string\n</code></pre> (DEPRECATED) Compiles a <code>cache</code> statement returning PHP code</p> <p><pre><code>public function compileCall(array $statement, bool $extendsMode)\n</code></pre> Compiles calls to macros</p> <p><pre><code>public function compileCase(\n    array $statement, \n    bool $caseClause = true\n): string\n</code></pre> Compiles a <code>case</code>/<code>default</code> clause returning PHP code</p> <p><pre><code>public function compileDo(array $statement): string\n</code></pre> Compiles a <code>do</code> statement returning PHP code</p> <p><pre><code>public function compileEcho(array $statement): string\n</code></pre> Compiles a {% raw %}<code>{{</code> <code>}}</code> statement returning PHP code</p> <p><pre><code>public function compileElseIf(array $statement): string\n</code></pre> Compiles a <code>elseif</code> statement returning PHP code</p> <p><pre><code>public function compileFile(\n    string $path, \n    string $compiledPath, \n    bool $extendsMode = false\n): string | array\n</code></pre> Compiles a template into a file also creating the destination path</p> <pre><code>$compiler-&gt;compileFile(\n    \"views/layouts/main.volt\",\n    \"views/layouts/main.volt.php\"\n);\n</code></pre> <p><pre><code>public function compileForeach(\n    array $statement, \n    bool $extendsMode = false\n): string\n</code></pre> Compiles a <code>foreach</code> statement returning PHP code</p> <p><pre><code>public function compileForElse(): string\n</code></pre> Compiles a <code>forelse</code> statement returning PHP code</p> <p><pre><code>public function compileIf(\n    array $statement, \n    bool $extendsMode = false\n): string\n</code></pre> Compiles a <code>if</code> statement returning PHP code</p> <p><pre><code>public function compileInclude(array $statement): string\n</code></pre> Compiles a <code>include</code> statement returning PHP code</p> <p><pre><code>public function compileMacro(\n    array $statement, \n    bool $extendsMode\n): string\n</code></pre> Compiles a macro</p> <p><pre><code>public function compileReturn(array $statement): string\n</code></pre> Compiles a <code>return</code> statement returning PHP code</p> <p><pre><code>public function compileSet(array $statement): string\n</code></pre> Compiles a setter statement (assignment of value to variable) returning PHP code</p> <p><pre><code>public function compileString(\n    string $viewCode, \n    bool $extendsMode = false\n): string\n</code></pre> Compiles a template into a string</p> <pre><code>echo $compiler-&gt;compileString({% raw %}'{{ \"hello world\" }}'{% endraw %});\n</code></pre> <p><pre><code>public function compileSwitch(\n    array $statement, \n    bool $extendsMode = false\n): string\n</code></pre> Compiles a <code>switch</code> statement returning PHP code</p> <p><pre><code>final public function expression(array $expr): string\n</code></pre> Resolves an expression node in an AST volt tree</p> <pre><code>final public function fireExtensionEvent(\n    string $name, \n    array $arguments = null\n)\n</code></pre> <p><pre><code>public function functionCall(array $expr): string\n</code></pre> Resolves function intermediate code into PHP function calls</p> <p><pre><code>public function getCompiledTemplatePath(): string\n</code></pre> Returns the path to the last compiled template</p> <p><pre><code>public function getExtensions(): array\n</code></pre> Returns the registered extensions </p> <p><pre><code>public function getFilters(): array\n</code></pre> Returns the registered user filters</p> <p><pre><code>public function getFunctions(): array\n</code></pre> Returns the registered user functions</p> <p><pre><code>public function getOption(string $option): string\n</code></pre> Returns an option of the compiler</p> <p><pre><code>public function getOptions(): array\n</code></pre> Returns the compiler options</p> <p><pre><code>public function getTemplatePath(): string\n</code></pre> Returns the path that is currently being compiled</p> <p><pre><code>public function getUniquePrefix(): string\n</code></pre> Return a unique prefix to be used as prefix for compiled variables and contexts</p> <p><pre><code>public function parse(string $viewCode): array\n</code></pre> Parses a Volt template returning its intermediate representation</p> <pre><code>print_r(\n    $compiler-&gt;parse(\"{% raw %}{{ 3 + 2 }}{% endraw %}\")\n);\n</code></pre> <p><pre><code>public function resolveTest(array $test, string $left): string\n</code></pre> Resolves filter intermediate code into a valid PHP expression</p> <p><pre><code>public function setOption(string $option, mixed $value)\n</code></pre> Sets a single compiler option</p> <p><pre><code>public function setOptions(array $options)\n</code></pre> Sets the compiler options</p> <p><pre><code>public function setUniquePrefix(string $prefix): Compiler\n</code></pre> Set a unique prefix to be used as prefix for compiled variables</p>"},{"location":"volt/#events","title":"Events","text":"<p>The following compilation events are available to be implemented in extensions:</p> Event/Method Description <code>compileFunction</code> Triggered before trying to compile any function call in a template <code>compileFilter</code> Triggered before trying to compile any filter call in a template <code>resolveExpression</code> Triggered before trying to compile any expression. This allows the developer to override operators <code>compileStatement</code> Triggered before trying to compile any statement. This allows the developer to override any statement"},{"location":"volt/#services","title":"Services","text":"<p>If a service container (di.md) is available for Volt. Any registered service in the DI container is available in volt, with a variable having the same name as the one that the service is registered with. In the example below we use the <code>flash</code> service as well as the <code>security</code> one:</p> <pre><code>{%- raw -%}\n&lt;div id='messages'&gt;{{ flash.output() }}&lt;/div&gt;\n&lt;input type='hidden' name='token' value='{{ security.getToken() }}'&gt;\n{% endraw %}\n</code></pre>"},{"location":"volt/#stand-alone","title":"Stand-alone","text":"<p>You can use Volt as a stand along component in any application. </p> <p>Register the compiler and set some options:</p> <pre><code>&lt;?php\n\nuse Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler as VoltCompiler;\n\n$compiler = new VoltCompiler();\n$compiler-&gt;setOptions(\n    [\n        // ...\n    ]\n);\n</code></pre> <p>Compilation of templates or strings:</p> <pre><code>&lt;?php\n\necho $compiler-&gt;compileString(\n    \"{{ 'hello' }}\"\n);\n\n$compiler-&gt;compileFile(\n    'layouts/main.volt',\n    'cache/layouts/main.volt.php'\n);\n\n$compiler-&gt;compile(\n    'layouts/main.volt'\n);\n</code></pre> <p>You can finally include the compiled template if needed:</p> <pre><code>&lt;?php\n\nrequire $compiler-&gt;getCompiledTemplatePath();\n</code></pre>"},{"location":"volt/#compiling","title":"Compiling","text":"<p>Every time you deploy your application to production, you will need to delete the pre-compiled <code>.volt</code> files, so that any changes you made in your templates are displayed to your users. A very easy way to do this is to clean the <code>volt/</code> folder using a CLI script or manually delete all files.</p> <p>If we assume that your <code>volt</code> path is located at: <code>/app/storage/cache/volt/</code> then the following script will allow you to clear that folder anytime you run it, usually after a deployment. </p> <pre><code>&lt;?php\n\nuse RecursiveDirectoryIterator;\nuse RecursiveIteratorIterator;\nuse function in_array;\nuse function substr;\n\n$fileList    = [];\n$whitelist   = ['.', '..', '.gitignore'];\n$path        = appPath('storage/cache');\n$dirIterator = new RecursiveDirectoryIterator($path);\n$iterator    = new RecursiveIteratorIterator(\n    $dirIterator,\n    RecursiveIteratorIterator::CHILD_FIRST\n);\n\nforeach ($iterator as $file) {\n    if (true !== $file-&gt;isDir() &amp;&amp; \n        true !== in_array($file-&gt;getFilename(), $whitelist)) {\n        $fileList[] = $file-&gt;getPathname();\n    }\n}\n\necho sprintf('Found %s files', count($fileList)) . PHP_EOL;\nforeach ($fileList as $file) {\n    echo '.';\n    unlink($file);\n}\n\necho PHP_EOL . 'Folder cleared' . PHP_EOL;\n</code></pre> <p>In the example above, we use PHP's RecursiveDirectoryIterator and RecursiveIteratorIterator to iterate through a folder recursively and create a list of files in the <code>$fileList</code> array. After that, we iterate through that array and unlink each file in turn.</p> <p>As mentioned above, based on the options provided during setup, Volt can check whether the compiled files exist and generate them accordingly. Additionally, Volt can check if the files have been changed and if yes, generate them.</p> <p>These checks are performed when the <code>always</code> and <code>stat</code> options are set to <code>true</code>. For any project, checking the file system multiple times per request (one time per Volt file), is consuming resources. Additionally, you need to ensure that the folder used by Volt to compile the templates is writeable by your web server.</p> <p>You can create a script or a CLI task (using the CLI Application) to compile and save all the Volt files when you deploy code. This way, you will be able to instruct Volt not to compile or stat each file in turn, increasing performance. Additionally, since these files are compiled during the deployment process, the volt folder will not need to be writeable, increasing security. Since the compiled Volt templates are phtml fragments, not allowing the web server to generate executable code is always a good idea.</p> <p>Remember this script will be executed at the command line, but in order to compile our templates we will need to bootstrap our web application. In the example below, we will need to get the DI container that has all the services registered for our web application. Then we can use the Volt compiler to compile all the templates to the relevant folder.</p> <p>In the example below, we assume that we have a <code>Bootstrap\\Web</code> class that is responsible for setting up all of our services for the Web application. The class returns the DI container using <code>getContainer()</code>. Your implementation might vary.</p> <pre><code>&lt;?php\n\nuse MyApp\\Library\\Bootstrap\\Web;\nuse RecursiveDirectoryIterator;\nuse RecursiveIteratorIterator;\nuse function in_array;\nuse function substr;\n\nif (php_sapi_name() !== \"cli\") {\n    throw new Exception(\n        'You need to run this script from the command line'\n    );\n}\n\n$bootstrap = new Web();\n$container = $bootstrap-&gt;getContainer();\n$view      = $container-&gt;getShared('view'); \n$viewPath  = $view-&gt;getViewsDir();\n$volt      = $container-&gt;getShared('volt');\n\n$fileList    = [];\n$whitelist   = ['.', '..', '.gitignore'];\n$path        = $viewPath;\n$dirIterator = new RecursiveDirectoryIterator($path);\n$iterator    = new RecursiveIteratorIterator(\n    $dirIterator,\n    RecursiveIteratorIterator::CHILD_FIRST\n);\n\nforeach ($iterator as $file) {\n    if (true !== $file-&gt;isDir() &amp;&amp; \n        true !== in_array($file-&gt;getFilename(), $whitelist)) {\n        $fileList[] = $file-&gt;getPathname();\n    }\n}\n\necho sprintf('Found %s files', count($fileList)) . PHP_EOL;\nforeach ($fileList as $file) {\n    echo '.';\n    $volt-&gt;getCompiler()-&gt;compile($file);\n}\n\necho PHP_EOL . 'Templates compiled' . PHP_EOL;\n</code></pre>"},{"location":"volt/#external-resources","title":"External Resources","text":"<ul> <li>A bundle for Sublime/Textmate is available here</li> <li>Phosphorum, the Phalcon's forum, also uses Volt, GitHub</li> <li>V\u00f6kur\u00f3, is another sample application that uses Volt, GitHub</li> </ul>"},{"location":"webserver-setup/","title":"Webserver Setup","text":""},{"location":"webserver-setup/#overview","title":"Overview","text":"<p>In order for the routing for a Phalcon application to work, you will need to set up your web server in a way that it will process redirects properly. Below are instructions for popular web servers:</p>"},{"location":"webserver-setup/#php-built-in","title":"PHP Built-in","text":"<p>The PHP built-in web server is not recommended for production applications. You can use it though very easily for development purposes. The syntax is:</p> <pre><code>$(which php) -S &lt;host&gt;:&lt;port&gt; -t &lt;directory&gt; &lt;setup file&gt;\n</code></pre> <p>If your application has its entry point in <code>/public/index.php</code> or your project has been created by the Phalcon Devtools, then you can start the web server with the following command:</p> <pre><code>$(which php) -S localhost:8000 -t public .htrouter.php\n</code></pre> <p>The above command does:</p> <ul> <li><code>$(which php)</code> - will insert the absolute path to your PHP binary</li> <li><code>-S localhost:8000</code> - invokes server mode with the provided <code>host:port</code></li> <li><code>-t public</code> - defines the servers root directory, necessary for php to route requests to assets like JS, CSS, and images in your public directory</li> <li><code>.htrouter.php</code> - the entry point that will be evaluated for each request</li> </ul> <p>The <code>.htrouter.php</code> file must contain:</p> <pre><code>&lt;?php\n\ndeclare(strict_types=1);\n\n$uri = urldecode(\n    parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH)\n);\n\nif ($uri !== '/' &amp;&amp; file_exists(__DIR__ . '/public' . $uri)) {\n    return false;\n}\n\n$_GET['_url'] = $_SERVER['REQUEST_URI'];\n\nrequire_once __DIR__ . '/public/index.php';\n</code></pre> <p>If your entry point is not <code>public/index.php</code>, then adjust the <code>.htrouter.php</code> file accordingly (last line) as well as the script call. You can also change the port if you like as well as the network interface that it binds to. </p> <p>After executing the command above, navigating to <code>http://localhost:8000/</code> will show your site.</p>"},{"location":"webserver-setup/#php-fpm","title":"PHP-FPM","text":"<p>The PHP-FPM (FastCGI Process Manager) is usually used to allow the processing of PHP files. Nowadays, PHP-FPM is bundled with all Linux based PHP distributions.</p> <p>On Windows PHP-FPM is in the PHP distribution archive. The file <code>php-cgi.exe</code> can be used to start the process and set options. Windows does not support unix sockets so this script will start fast-cgi in TCP mode on port <code>9000</code>.</p> <p>Create the file <code>php-fcgi.bat</code> with the following contents:</p> <pre><code>@ECHO OFF\nECHO Starting PHP FastCGI...\nset PATH=C:\\PHP;%PATH%\nc:\\bin\\RunHiddenConsole.exe C:\\PHP\\php-cgi.exe -b 127.0.0.1:9000\n</code></pre>"},{"location":"webserver-setup/#nginx","title":"nginx","text":"<p>nginx is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server. Unlike traditional servers, nginx doesn't rely on threads to handle requests. Instead, it uses a much more scalable event-driven (asynchronous) architecture. This architecture uses small, but more importantly, predictable amounts of memory under load.</p> <p>Phalcon with nginx and PHP-FPM provide a powerful set of tools that offer maximum performance for your PHP applications.</p>"},{"location":"webserver-setup/#install-nginx","title":"Install nginx","text":"<p>nginx Official Site</p>"},{"location":"webserver-setup/#phalcon-configuration","title":"Phalcon Configuration","text":"<p>You can use following potential configuration to set up nginx with Phalcon:</p> <pre><code>server {\n    # Port 80 will require nginx to be started with root permissions\n    # Depending on how you install nginx to use port 80 you will need\n    # to start the server with `sudo` ports about 1000 do not require\n    # root privileges\n    # listen      80;\n\n    listen        8000;\n    server_name   default;\n\n    ##########################\n    # In production require SSL\n    # listen 443 ssl default_server;\n\n    # ssl on;\n    # ssl_session_timeout  5m;\n    # ssl_protocols  SSLv2 SSLv3 TLSv1;\n    # ssl_ciphers  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;\n    # ssl_prefer_server_ciphers   on;\n\n    # These locations depend on where you store your certs\n    # ssl_certificate        /var/nginx/certs/default.cert;\n    # ssl_certificate_key    /var/nginx/certs/default.key;\n    ##########################\n\n    # This is the folder that index.php is in\n    root /var/www/default/public;\n    index index.php index.html index.htm;\n\n    charset utf-8;\n    client_max_body_size 100M;\n    fastcgi_read_timeout 1800;\n\n    # Represents the root of the domain\n    # https://localhost:8000/[index.php]\n    location / {\n        # Matches URLS `$_GET['_url']`\n        try_files $uri $uri/ /index.php?_url=$uri&amp;$args;\n    }\n\n    # When the HTTP request does not match the above\n    # and the file ends in .php\n    location ~ [^/]\\.php(/|$) {\n        # try_files $uri =404;\n\n        # Ubuntu and PHP7.0-fpm in socket mode\n        # This path is dependent on the version of PHP install\n        fastcgi_pass  unix:/var/run/php/php7.0-fpm.sock;\n\n\n        # Alternatively you use PHP-FPM in TCP mode (Required on Windows)\n        # You will need to configure FPM to listen on a standard port\n        # https://www.nginx.com/resources/wiki/start/topics/examples/phpfastcgionwindows/\n        # fastcgi_pass  127.0.0.1:9000;\n\n        fastcgi_index /index.php;\n\n        include fastcgi_params;\n        fastcgi_split_path_info ^(.+?\\.php)(/.*)$;\n        if (!-f $document_root$fastcgi_script_name) {\n            return 404;\n        }\n\n        fastcgi_param PATH_INFO       $fastcgi_path_info;\n        # fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;\n        # and set php.ini cgi.fix_pathinfo=0\n\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    }\n\n    location ~ /\\.ht {\n        deny all;\n    }\n\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico)$ {\n        expires       max;\n        log_not_found off;\n        access_log    off;\n    }\n}\n</code></pre>"},{"location":"webserver-setup/#start","title":"Start","text":"<p>Depending on your system, the command to start nginx could be one of the following:</p> <pre><code>start nginx\n/etc/init.d/nginx start\nservice nginx start\n</code></pre>"},{"location":"webserver-setup/#apache","title":"Apache","text":"<p>Apache is a popular and well known web server available on many platforms.</p>"},{"location":"webserver-setup/#phalcon-configuration_1","title":"Phalcon Configuration","text":"<p>The following are potential configurations you can use to set up Apache with Phalcon. These notes are primarily focused on the configuration of the <code>mod_rewrite</code> module allowing to use friendly URLs and the router component. A common directory structure for an application is:</p> <pre><code>tutorial/\n  app/\n    controllers/\n    models/\n    views/\n  public/\n    css/\n    img/\n    js/\n    index.php\n</code></pre> <p>Document root The most common case is for an application to be installed in a directory under the document root. If that is the case, we can use <code>.htaccess</code> files.  The first one will be used to hide the application code forwarding all requests to the application's document root (<code>public/</code>). </p> <p>NOTE</p> <p>Note that using <code>.htaccess</code> files requires your apache installation to have the <code>AllowOverride All</code> option set.</p> <pre><code># tutorial/.htaccess\n\n&lt;IfModule mod_rewrite.c&gt;\n    RewriteEngine on\n    RewriteRule   ^$ public/    [L]\n    RewriteRule   ((?s).*) public/$1 [L]\n&lt;/IfModule&gt;\n</code></pre> <p>A second <code>.htaccess</code> file is located in the <code>public/</code> directory, this re-writes all the URIs to the <code>public/index.php</code> file:</p> <pre><code># tutorial/public/.htaccess\n\n&lt;IfModule mod_rewrite.c&gt;\n    RewriteEngine On\n    RewriteCond   %{REQUEST_FILENAME} !-d\n    RewriteCond   %{REQUEST_FILENAME} !-f\n    RewriteRule   ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n&lt;/IfModule&gt;\n</code></pre> <p>International Characters For users that are using the Persian letter '\u0645' (meem) in uri parameters, there is an issue with <code>mod_rewrite</code>. To allow the matching to work as it does with English characters, you will need to change your <code>.htaccess</code> file:</p> <pre><code># tutorial/public/.htaccess\n\n&lt;IfModule mod_rewrite.c&gt;\n    RewriteEngine On\n    RewriteCond   %{REQUEST_FILENAME} !-d\n    RewriteCond   %{REQUEST_FILENAME} !-f\n    RewriteRule   ^([0-9A-Za-z\\x7f-\\xff]*)$ index.php?params=$1 [L]\n&lt;/IfModule&gt;\n</code></pre> <p>If your uri contains characters other than English, you might need to resort to the above change to allow <code>mod_rewrite</code> to accurately match your route.</p>"},{"location":"webserver-setup/#apache-configuration","title":"Apache Configuration","text":"<p>If you do not want to use <code>.htaccess</code> files, you can move the relevant directives to apache's main configuration file:</p> <pre><code>&lt;IfModule mod_rewrite.c&gt;\n\n    &lt;Directory \"/var/www/test\"&gt;\n        RewriteEngine on\n        RewriteRule  ^$ public/    [L]\n        RewriteRule  ((?s).*) public/$1 [L]\n    &lt;/Directory&gt;\n\n    &lt;Directory \"/var/www/tutorial/public\"&gt;\n        RewriteEngine On\n        RewriteCond   %{REQUEST_FILENAME} !-d\n        RewriteCond   %{REQUEST_FILENAME} !-f\n        RewriteRule   ^((?s).*)$ index.php?_url=/$1 [QSA,L]\n    &lt;/Directory&gt;\n\n&lt;/IfModule&gt;\n</code></pre>"},{"location":"webserver-setup/#virtual-hosts","title":"Virtual Hosts","text":"<p>The configuration below is for when you want to install your application in a virtual host:</p> <pre><code>&lt;VirtualHost *:80&gt;\n\n    ServerAdmin    admin@example.host\n    DocumentRoot   \"/var/vhosts/tutorial/public\"\n    DirectoryIndex index.php\n    ServerName     example.host\n    ServerAlias    www.example.host\n\n    &lt;Directory \"/var/vhosts/tutorial/public\"&gt;\n        Options       All\n        AllowOverride All\n        Require       all granted\n    &lt;/Directory&gt;\n\n&lt;/VirtualHost&gt;\n</code></pre>"},{"location":"webserver-setup/#lighttpd","title":"Lighttpd","text":"<p>lighttpd (pronounced \"lighty\") is an open-source web server optimized for speed-critical environments while remaining standards-compliant, secure and flexible. It was originally written by Jan Kneschke as a proof-of-concept of the c10k problem \u2013 how to handle 10,000 connections in parallel on one server, but has gained worldwide popularity. Its name is a portmanteau of \"light\" and \"httpd\".</p>"},{"location":"webserver-setup/#install-lighttpd","title":"Install lighttpd","text":"<p>lighttpd Official Site</p> <p>You can use following potential configuration to set up lighttpd with Phalcon:</p> <pre><code>server.modules = (\n        \"mod_indexfile\",\n        \"mod_access\",\n        \"mod_alias\",\n        \"mod_redirect\",\n        \"mod_rewrite\",\n)\n\nserver.document-root        = \"/var/www/html/public\"\nserver.upload-dirs          = ( \"/var/cache/lighttpd/uploads\" )\nserver.errorlog             = \"/var/log/lighttpd/error.log\"\nserver.pid-file             = \"/var/run/lighttpd.pid\"\nserver.username             = \"www-data\"\nserver.groupname            = \"www-data\"\nserver.port                 = 80\n\n# strict parsing and normalization of URL for consistency and security\n# https://redmine.lighttpd.net/projects/lighttpd/wiki/Server_http-parseoptsDetails\n# (might need to explicitly set \"url-path-2f-decode\" = \"disable\"\n#  if a specific application is encoding URLs inside url-path)\nserver.http-parseopts = (\n  \"header-strict\"           =&gt; \"enable\",# default\n  \"host-strict\"             =&gt; \"enable\",# default\n  \"host-normalize\"          =&gt; \"enable\",# default\n  \"url-normalize-unreserved\"=&gt; \"enable\",# recommended highly\n  \"url-normalize-required\"  =&gt; \"enable\",# recommended\n  \"url-ctrls-reject\"        =&gt; \"enable\",# recommended\n  \"url-path-2f-decode\"      =&gt; \"enable\",# recommended highly (unless breaks app)\n #\"url-path-2f-reject\"      =&gt; \"enable\",\n  \"url-path-dotseg-remove\"  =&gt; \"enable\",# recommended highly (unless breaks app)\n #\"url-path-dotseg-reject\"  =&gt; \"enable\",\n #\"url-query-20-plus\"       =&gt; \"enable\",# consistency in query string\n)\n\nindex-file.names            = ( \"index.php\", \"index.html\" )\nurl.access-deny             = ( \"~\", \".inc\" )\nstatic-file.exclude-extensions = ( \".php\", \".pl\", \".fcgi\" )\n\ncompress.cache-dir          = \"/var/cache/lighttpd/compress/\"\ncompress.filetype           = ( \"application/javascript\", \"text/css\", \"text/html\", \"text/plain\" )\n\n# default listening port for IPv6 falls back to the IPv4 port\ninclude_shell \"/usr/share/lighttpd/use-ipv6.pl \" + server.port\ninclude_shell \"/usr/share/lighttpd/create-mime.conf.pl\"\ninclude \"/etc/lighttpd/conf-enabled/*.conf\"\n\n#server.compat-module-load   = \"disable\"\nserver.modules += (\n        \"mod_compress\",\n        \"mod_dirlisting\",\n        \"mod_staticfile\",\n)\n\nurl.rewrite-once = ( \"^(/(?!(favicon.ico$|css/|js/|img/)).*)\" =&gt; \"/index.php?_url=$1\" )\n# or\n#url.rewrite-if-not-file = ( \"/\" =&gt; \"/index.php?_rl=$1\" )\n</code></pre>"},{"location":"webserver-setup/#wamp","title":"WAMP","text":"<p>WampServer is a Windows web development environment. It allows you to create web applications with Apache2, PHP and a MySQL database. Below are detailed instructions on how to install Phalcon on WampServer for Windows. Using the latest WampServer version is highly recommended.</p> <p>NOTE</p> <p>Since v4, you must install the <code>PSR</code> extension from PECL. Visit this URL to get the DLLs and follow the same steps to install the extension just as with Phalcon's DLLs.</p> <p>NOTE</p> <p>Paths in this guide should be relative, according to your installation WAMP</p>"},{"location":"webserver-setup/#download-phalcon","title":"Download Phalcon","text":"<p>For Phalcon to work on Windows, you must install the correct version that matches your architecture and extension built. Load up the <code>phpinfo</code> page provided by WAMP:</p> <p></p> <p>Check the <code>Architecture</code> and <code>Extension Build</code> values. Those will allow you to download the correct DLL. In the above example you should download the file:</p> <pre><code>phalcon_x86_vc15_php7.2_4.0.0+4237.zip\n</code></pre> <p>which will match <code>x86</code>, <code>vc15</code> and <code>TS</code> which is Thread Safe. If your system reports <code>NTS</code> (Non Thread Safe) then you should download that DLL. </p> <p>WAMP has both 32 and 64 bit versions. From the download section, you can download the Phalcon DLL that suits your WAMP installation.</p> <p>After downloading the Phalcon library you will have a zip file like the one shown below:</p> <p></p> <p>Extract the library from the archive to get the Phalcon DLL:</p> <p></p> <p>Copy the file <code>php_phalcon.dll</code> to the PHP extensions folder. If WAMP is installed in the <code>C:\\wamp</code> folder, the extension needs to be in <code>C:\\wamp\\bin\\php\\php7.2.18\\ext</code> (assuming your WAMP installation installed PHP 7.2.18).</p> <p></p> <p>Edit the <code>php.ini</code> file, it is located at <code>C:\\wamp\\bin\\php\\php7.2.18\\php.ini</code>. It can be edited with Notepad or a similar program. We recommend Notepad++ to avoid issues with line endings. Append at the end of the file:</p> <pre><code> extension=php_phalcon.dll\n</code></pre> <p>and save it.</p> <p></p> <p>Also edit the <code>php.ini</code> file, which is located at <code>C:\\wamp\\bin\\apache\\apache2.4.9\\bin\\php.ini</code>. Append at the end of the file: </p> <pre><code>extension=php_phalcon.dll \n</code></pre> <p>and save it.</p> <p>NOTE</p> <p>The path above might differ depending on the apache installation you have for your web server. Adjust it accordingly.</p> <p>NOTE</p> <p>As mentioned above the <code>PSR</code> extension needs to be installed and loaded before Phalcon. Add the <code>extension=php_psr.dll</code> line before the one for Phalcon as shown in the image above.</p> <p></p> <p>Restart the Apache Web Server. Do a single click on the WampServer icon at system tray. Choose <code>Restart All Services</code> from the pop-up menu. Check out that tray icon will become green again.</p> <p></p> <p>Open your browser to navigate to https://localhost. The WAMP welcome page will appear. Check the section <code>extensions loaded</code> to ensure that Phalcon was loaded.</p> <p></p> <p>NOTE</p> <p>Congratulations! You are now phlying with Phalcon.</p>"},{"location":"webserver-setup/#xampp","title":"XAMPP","text":"<p>XAMPP is an easy to install Apache distribution containing MySQL, PHP and Perl. Once you download XAMPP, all you have to do is extract it and start using it. Below are detailed instructions on how to install Phalcon on XAMPP for Windows. Using the latest XAMPP version is highly recommended.</p> <p>NOTE</p> <p>Since v4, you must install the <code>PSR</code> extension from PECL. Visit this URL to get the DLLs and follow the same steps to install the extension just as with Phalcon's DLLs.</p> <p>NOTE</p> <p>Paths in this guide should be relative, according to your installation WAMP</p>"},{"location":"webserver-setup/#download-phalcon_1","title":"Download Phalcon","text":"<p>For Phalcon to work on Windows, you must install the correct version that matches your architecture and extension built. Load up the <code>phpinfo</code> page provided by XAMPP:</p> <p></p> <p>Check the <code>Architecture</code> and <code>Extension Build</code> values. Those will allow you to download the correct DLL. In the above example you should download the file:</p> <pre><code>phalcon_x86_vc15_php7.2_4.0.0+4237.zip\n</code></pre> <p>which will match <code>x86</code>, <code>vc15</code> and <code>TS</code> which is Thread Safe. If your system reports <code>NTS</code> (Non Thread Safe) then you should download that DLL. </p> <p>Notice that XAMPP offers both 32 and 64 bit versions of Apache and PHP (5.6+): Phalcon has dlls for both, just choose the right dll for the installed version.</p> <p>After downloading the Phalcon library you will have a zip file like the one shown below:</p> <p></p> <p>Extract the library from the archive to get the Phalcon DLL:</p> <p></p> <p>Copy the file <code>php_phalcon.dll</code> to the PHP extensions directory. If you have installed XAMPP in the <code>C:\\xampp</code> folder, the extension needs to be in <code>C:\\xampp\\php\\ext</code></p> <p></p> <p>Edit the <code>php.ini</code> file, it is located at <code>C:\\xampp\\php\\php.ini</code>. It can be edited with Notepad or a similar program. We recommend Notepad++ to avoid issues with line endings. Append at the end of the file:</p> <pre><code>extension=php_phalcon.dll\n</code></pre> <p>and save it.</p> <p>NOTE</p> <p>As mentioned above the <code>PSR</code> extension needs to be installed and loaded before Phalcon. Add the <code>extension=php_psr.dll</code> line before the one for Phalcon as shown in the image above.</p> <p></p> <p>Restart the Apache Web Server from the XAMPP Control Center. This will load the new PHP configuration. Open your browser to navigate to <code>https://localhost</code>. The XAMPP welcome page will appear. Click on the link <code>phpinfo()</code>.</p> <p></p> <p>phpinfo will output a significant amount of information on screen about the current state of PHP. Scroll down to check if the Phalcon extension has been loaded correctly.</p> <p></p> <p>NOTE</p> <p>Congratulations! You are now phlying with Phalcon.</p>"},{"location":"webserver-setup/#cherokee","title":"Cherokee","text":"<p>Cherokee is a high-performance web server. It is very fast, flexible and easy to configure.</p>"},{"location":"webserver-setup/#phalcon-configuration_2","title":"Phalcon Configuration","text":"<p>Cherokee provides a friendly graphical interface to configure almost every setting available in the web server.</p> <p>Start the cherokee administrator by executing as root <code>/path-to-cherokee/sbin/cherokee-admin</code></p> <p></p> <p>Create a new virtual host by clicking on <code>vServers</code>, then add a new virtual server:</p> <p></p> <p>The recently added virtual server must appear at the left bar of the screen. In the <code>Behaviors</code> tab you will see a set of default behaviors for this virtual server. Click the <code>Rule Management</code> button. Remove those labeled as <code>Directory /cherokee_themes</code> and <code>Directory /icons</code>:</p> <p></p> <p>Add the <code>PHP Language</code> behavior using the wizard. This behavior allows you to run PHP applications:</p> <p></p> <p>Normally this behavior does not require additional settings. Add another behavior, this time in the <code>Manual Configuration</code> section. In <code>Rule Type</code> choose <code>File Exists</code>, then make sure the option <code>Match any file</code> is enabled:</p> <p></p> <p>In the <code>Handler</code> tab choose <code>List &amp; Send</code> as handler:</p> <p></p> <p>Edit the <code>Default</code> behavior in order to enable the URL-rewrite engine. Change the handler to <code>Redirection</code>, then add the following regular expression to the engine <code>^(.*)$</code>:</p> <p></p> <p>Finally, make sure the behaviors have the following order:</p> <p></p> <p>Execute the application in a browser:</p> <p></p>"},{"location":"api/","title":"API Index","text":"<ul> <li>Phalcon Acl</li> <li>Phalcon Annotations</li> <li>Phalcon Application</li> <li>Phalcon Assets</li> <li>Phalcon Cache</li> <li>Phalcon Cli</li> <li>Phalcon Collection</li> <li>Phalcon Config</li> <li>Phalcon Container</li> <li>Phalcon Crypt</li> <li>Phalcon Datamapper</li> <li>Phalcon Db</li> <li>Phalcon Debug</li> <li>Phalcon Di</li> <li>Phalcon Dispatcher</li> <li>Phalcon Domain</li> <li>Phalcon Escaper</li> <li>Phalcon Events</li> <li>Phalcon Exception</li> <li>Phalcon Factory</li> <li>Phalcon Filter</li> <li>Phalcon Flash</li> <li>Phalcon Forms</li> <li>Phalcon Helper</li> <li>Phalcon Html</li> <li>Phalcon Http</li> <li>Phalcon Image</li> <li>Phalcon Kernel</li> <li>Phalcon Loader</li> <li>Phalcon Logger</li> <li>Phalcon Messages</li> <li>Phalcon Mvc</li> <li>Phalcon Paginator</li> <li>Phalcon Registry</li> <li>Phalcon Security</li> <li>Phalcon Session</li> <li>Phalcon Storage</li> <li>Phalcon Tag</li> <li>Phalcon Text</li> <li>Phalcon Translate</li> <li>Phalcon Url</li> <li>Phalcon Validation</li> <li>Phalcon Version</li> </ul>"},{"location":"api/phalcon_acl/","title":"Phalcon acl","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_acl/#acladapterabstractadapter","title":"Acl\\Adapter\\AbstractAdapter","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Acl\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Acl\\Enum</code></li> <li><code>Phalcon\\Events\\AbstractEventsAware</code></li> <li><code>Phalcon\\Events\\EventsAwareInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractEventsAware</code></p> </li> <li> <p>Implements</p> <ul> <li><code>AdapterInterface</code></li> <li><code>EventsAwareInterface</code></li> </ul> </li> </ul> <p>Adapter for Phalcon\\Acl adapters</p>"},{"location":"api/phalcon_acl/#properties","title":"Properties","text":"<pre><code>/**\n * Access Granted\n *\n * @var bool\n */\nprotected $accessGranted = false;\n\n/**\n * Active access which the list is checking if some role can access it\n *\n * @var string|null\n */\nprotected $activeAccess;\n\n/**\n * Component which the list is checking if some role can access it\n *\n * @var string|null\n */\nprotected $activeComponent;\n\n/**\n * Role which the list is checking if it's allowed to certain\n * component/access\n *\n * @var string|null\n */\nprotected $activeRole;\n\n/**\n * Default access\n *\n * @var int\n */\nprotected $defaultAccess;\n</code></pre>"},{"location":"api/phalcon_acl/#methods","title":"Methods","text":"<p><pre><code>public function getActiveAccess(): string | null;\n</code></pre> Active access which the list is checking if some role can access it</p> <p><pre><code>public function getActiveComponent(): string | null;\n</code></pre> Component which the list is checking if some role can access it</p> <p><pre><code>public function getActiveRole(): string | null;\n</code></pre> Role which the list is checking if it's allowed to certain component/access</p> <p><pre><code>public function getDefaultAction(): int;\n</code></pre> Returns the default ACL access level</p> <p><pre><code>public function setDefaultAction( int $defaultAccess ): void;\n</code></pre> Sets the default access level (Phalcon\\Acl\\Enum::ALLOW or Phalcon\\Acl\\Enum::DENY)</p>"},{"location":"api/phalcon_acl/#acladapteradapterinterface","title":"Acl\\Adapter\\AdapterInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Acl\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Acl\\ComponentInterface</code></li> <li><code>Phalcon\\Acl\\RoleInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Acl adapters</p>"},{"location":"api/phalcon_acl/#methods_1","title":"Methods","text":"<p><pre><code>public function addComponent( mixed $componentValue, mixed $accessList ): bool;\n</code></pre> Adds a component to the ACL list</p> <p>Access names can be a particular action, by example search, update, delete, etc. or a list of them</p> <p><pre><code>public function addComponentAccess( string $componentName, mixed $accessList ): bool;\n</code></pre> Adds access to components</p> <p><pre><code>public function addInherit( string $roleName, mixed $roleToInherits ): bool;\n</code></pre> Do a role inherit from another existing role</p> <p><pre><code>public function addRole( mixed $role, mixed $accessInherits = null ): bool;\n</code></pre> Adds a role to the ACL list. Second parameter lets to inherit access data from other existing role</p> <p><pre><code>public function allow( string $roleName, string $componentName, mixed $access, mixed $func = null ): void;\n</code></pre> Allow access to a role on a component</p> <p><pre><code>public function deny( string $roleName, string $componentName, mixed $access, mixed $func = null ): void;\n</code></pre> Deny access to a role on a component</p> <p><pre><code>public function dropComponentAccess( string $componentName, mixed $accessList ): void;\n</code></pre> Removes access from a component</p> <p><pre><code>public function getActiveAccess(): null | string;\n</code></pre> Returns the access which the list is checking if some role can access it</p> <p><pre><code>public function getActiveComponent(): null | string;\n</code></pre> Returns the component which the list is checking if some role can access it</p> <p><pre><code>public function getActiveRole(): null | string;\n</code></pre> Returns the role which the list is checking if it's allowed to certain component/access</p> <p><pre><code>public function getComponents(): ComponentInterface[];\n</code></pre> Return an array with every component registered in the list</p> <p><pre><code>public function getDefaultAction(): int;\n</code></pre> Returns the default ACL access level</p> <p><pre><code>public function getNoArgumentsDefaultAction(): int;\n</code></pre> Returns the default ACL access level for no arguments provided in isAllowed action if there exists func for accessKey</p> <p><pre><code>public function getRoles(): RoleInterface[];\n</code></pre> Return an array with every role registered in the list</p> <p><pre><code>public function isAllowed( mixed $roleName, mixed $componentName, string $access, array $parameters = null ): bool;\n</code></pre> Check whether a role is allowed to access an action from a component</p> <p><pre><code>public function isComponent( string $componentName ): bool;\n</code></pre> Check whether component exist in the components list</p> <p><pre><code>public function isRole( string $roleName ): bool;\n</code></pre> Check whether role exist in the roles list</p> <p><pre><code>public function setDefaultAction( int $defaultAccess ): void;\n</code></pre> Sets the default access level (Phalcon\\Ac\\Enuml::ALLOW or Phalcon\\Acl\\Enum::DENY)</p> <p><pre><code>public function setNoArgumentsDefaultAction( int $defaultAccess ): void;\n</code></pre> Sets the default access level (Phalcon\\Acl\\Enum::ALLOW or Phalcon\\Acl\\Enum::DENY) for no arguments provided in isAllowed action if there exists func for accessKey</p>"},{"location":"api/phalcon_acl/#acladaptermemory","title":"Acl\\Adapter\\Memory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Acl\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Acl\\Component</code></li> <li><code>Phalcon\\Acl\\ComponentAwareInterface</code></li> <li><code>Phalcon\\Acl\\ComponentInterface</code></li> <li><code>Phalcon\\Acl\\Enum</code></li> <li><code>Phalcon\\Acl\\Exception</code></li> <li><code>Phalcon\\Acl\\Role</code></li> <li><code>Phalcon\\Acl\\RoleAwareInterface</code></li> <li><code>Phalcon\\Acl\\RoleInterface</code></li> <li><code>ReflectionClass</code></li> <li><code>ReflectionFunction</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Manages ACL lists in memory</p> <pre><code>$acl = new \\Phalcon\\Acl\\Adapter\\Memory();\n\n$acl-&gt;setDefaultAction(\n    \\Phalcon\\Acl\\Enum::DENY\n);\n\n// Register roles\n$roles = [\n    \"users\"  =&gt; new \\Phalcon\\Acl\\Role(\"Users\"),\n    \"guests\" =&gt; new \\Phalcon\\Acl\\Role(\"Guests\"),\n];\nforeach ($roles as $role) {\n    $acl-&gt;addRole($role);\n}\n\n// Private area components\n$privateComponents = [\n    \"companies\" =&gt; [\"index\", \"search\", \"new\", \"edit\", \"save\", \"create\", \"delete\"],\n    \"products\"  =&gt; [\"index\", \"search\", \"new\", \"edit\", \"save\", \"create\", \"delete\"],\n    \"invoices\"  =&gt; [\"index\", \"profile\"],\n];\n\nforeach ($privateComponents as $componentName =&gt; $actions) {\n    $acl-&gt;addComponent(\n        new \\Phalcon\\Acl\\Component($componentName),\n        $actions\n    );\n}\n\n// Public area components\n$publicComponents = [\n    \"index\"   =&gt; [\"index\"],\n    \"about\"   =&gt; [\"index\"],\n    \"session\" =&gt; [\"index\", \"register\", \"start\", \"end\"],\n    \"contact\" =&gt; [\"index\", \"send\"],\n];\n\nforeach ($publicComponents as $componentName =&gt; $actions) {\n    $acl-&gt;addComponent(\n        new \\Phalcon\\Acl\\Component($componentName),\n        $actions\n    );\n}\n\n// Grant access to public areas to both users and guests\nforeach ($roles as $role) {\n    foreach ($publicComponents as $component =&gt; $actions) {\n        $acl-&gt;allow($role-&gt;getName(), $component, \"*\");\n    }\n}\n\n// Grant access to private area to role Users\nforeach ($privateComponents as $component =&gt; $actions) {\n    foreach ($actions as $action) {\n        $acl-&gt;allow(\"Users\", $component, $action);\n    }\n}\n</code></pre>"},{"location":"api/phalcon_acl/#properties_1","title":"Properties","text":"<pre><code>/**\n * Access\n *\n * @var mixed\n */\nprotected $access;\n\n/**\n * Access List\n *\n * @var mixed\n */\nprotected $accessList;\n\n/**\n * Returns the latest function used to acquire access\n *\n * @var mixed\n */\nprotected $activeFunction;\n\n/**\n * Returns number of additional arguments(excluding role and resource) for active function\n *\n * @var int\n */\nprotected $activeFunctionCustomArgumentsCount = ;\n\n/**\n * Returns the latest key used to acquire access\n *\n * @var string|null\n */\nprotected $activeKey;\n\n/**\n * Components\n *\n * @var mixed\n */\nprotected $components;\n\n/**\n * Component Names\n *\n * @var mixed\n */\nprotected $componentsNames;\n\n/**\n * Function List\n *\n * @var mixed\n */\nprotected $func;\n\n/**\n * Default action for no arguments is `allow`\n *\n * @var mixed\n */\nprotected $noArgumentsDefaultAction;\n\n/**\n * Roles\n *\n * @var mixed\n */\nprotected $roles;\n\n/**\n * Role Inherits\n *\n * @var mixed\n */\nprotected $roleInherits;\n</code></pre>"},{"location":"api/phalcon_acl/#methods_2","title":"Methods","text":"<p><pre><code>public function __construct();\n</code></pre> Phalcon\\Acl\\Adapter\\Memory constructor</p> <p><pre><code>public function addComponent( mixed $componentValue, mixed $accessList ): bool;\n</code></pre> Adds a component to the ACL list</p> <p>Access names can be a particular action, by example search, update, delete, etc. or a list of them</p> <p>Example: <pre><code>// Add a component to the list allowing access to an action\n$acl-&gt;addComponent(\n    new Phalcon\\Acl\\Component(\"customers\"),\n    \"search\"\n);\n\n$acl-&gt;addComponent(\"customers\", \"search\");\n\n// Add a component  with an access list\n$acl-&gt;addComponent(\n    new Phalcon\\Acl\\Component(\"customers\"),\n    [\n        \"create\",\n        \"search\",\n    ]\n);\n\n$acl-&gt;addComponent(\n    \"customers\",\n    [\n        \"create\",\n        \"search\",\n    ]\n);\n</code></pre></p> <p><pre><code>public function addComponentAccess( string $componentName, mixed $accessList ): bool;\n</code></pre> Adds access to components</p> <p><pre><code>public function addInherit( string $roleName, mixed $roleToInherits ): bool;\n</code></pre> Do a role inherit from another existing role</p> <pre><code>$acl-&gt;addRole(\"administrator\", \"consultant\");\n$acl-&gt;addRole(\"administrator\", [\"consultant\", \"consultant2\"]);\n</code></pre> <p><pre><code>public function addRole( mixed $role, mixed $accessInherits = null ): bool;\n</code></pre> Adds a role to the ACL list. Second parameter allows inheriting access data from other existing role</p> <pre><code>$acl-&gt;addRole(\n    new Phalcon\\Acl\\Role(\"administrator\"),\n    \"consultant\"\n);\n\n$acl-&gt;addRole(\"administrator\", \"consultant\");\n$acl-&gt;addRole(\"administrator\", [\"consultant\", \"consultant2\"]);\n</code></pre> <p><pre><code>public function allow( string $roleName, string $componentName, mixed $access, mixed $func = null ): void;\n</code></pre> Allow access to a role on a component. You can use <code>*</code> as wildcard</p> <pre><code>// Allow access to guests to search on customers\n$acl-&gt;allow(\"guests\", \"customers\", \"search\");\n\n// Allow access to guests to search or create on customers\n$acl-&gt;allow(\"guests\", \"customers\", [\"search\", \"create\"]);\n\n// Allow access to any role to browse on products\n$acl-&gt;allow(\"*\", \"products\", \"browse\");\n\n// Allow access to any role to browse on any component\n$acl-&gt;allow(\"*\", \"*\", \"browse\");\n</code></pre> <p><pre><code>public function deny( string $roleName, string $componentName, mixed $access, mixed $func = null ): void;\n</code></pre> Deny access to a role on a component. You can use <code>*</code> as wildcard</p> <pre><code>// Deny access to guests to search on customers\n$acl-&gt;deny(\"guests\", \"customers\", \"search\");\n\n// Deny access to guests to search or create on customers\n$acl-&gt;deny(\"guests\", \"customers\", [\"search\", \"create\"]);\n\n// Deny access to any role to browse on products\n$acl-&gt;deny(\"*\", \"products\", \"browse\");\n\n// Deny access to any role to browse on any component\n$acl-&gt;deny(\"*\", \"*\", \"browse\");\n</code></pre> <p><pre><code>public function dropComponentAccess( string $componentName, mixed $accessList ): void;\n</code></pre> Removes access from a component</p> <p><pre><code>public function getActiveFunction(): mixed;\n</code></pre> Returns the latest function used to acquire access</p> <p><pre><code>public function getActiveFunctionCustomArgumentsCount(): int;\n</code></pre> Returns number of additional arguments(excluding role and resource) for active function</p> <p><pre><code>public function getActiveKey(): string | null;\n</code></pre> Returns the latest key used to acquire access</p> <p><pre><code>public function getComponents(): ComponentInterface[];\n</code></pre> Return an array with every component registered in the list</p> <p><pre><code>public function getNoArgumentsDefaultAction(): int;\n</code></pre> Returns the default ACL access level for no arguments provided in <code>isAllowed</code> action if a <code>func</code> (callable) exists for <code>accessKey</code></p> <p><pre><code>public function getRoles(): RoleInterface[];\n</code></pre> Return an array with every role registered in the list</p> <p><pre><code>public function isAllowed( mixed $roleName, mixed $componentName, string $access, array $parameters = null ): bool;\n</code></pre> Check whether a role is allowed to access an action from a component</p> <pre><code>// Does andres have access to the customers component to create?\n$acl-&gt;isAllowed(\"andres\", \"Products\", \"create\");\n\n// Do guests have access to any component to edit?\n$acl-&gt;isAllowed(\"guests\", \"*\", \"edit\");\n</code></pre> <p><pre><code>public function isComponent( string $componentName ): bool;\n</code></pre> Check whether component exist in the components list</p> <p><pre><code>public function isRole( string $roleName ): bool;\n</code></pre> Check whether role exist in the roles list</p> <p><pre><code>public function setNoArgumentsDefaultAction( int $defaultAccess ): void;\n</code></pre> Sets the default access level (<code>Phalcon\\Enum::ALLOW</code> or <code>Phalcon\\Enum::DENY</code>) for no arguments provided in isAllowed action if there exists func for accessKey</p>"},{"location":"api/phalcon_acl/#aclcomponent","title":"Acl\\Component","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Acl</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>ComponentInterface</code></li> </ul> </li> </ul> <p>This class defines component entity and its description</p>"},{"location":"api/phalcon_acl/#properties_2","title":"Properties","text":"<pre><code>/**\n * Component description\n *\n * @var string\n */\nprivate $description;\n\n/**\n * Component name\n *\n * @var string\n */\nprivate $name;\n</code></pre>"},{"location":"api/phalcon_acl/#methods_3","title":"Methods","text":"<p><pre><code>public function __construct( string $name, string $description = null );\n</code></pre> Phalcon\\Acl\\Component constructor</p> <pre><code>public function __toString(): string;\n</code></pre> <pre><code>public function getDescription(): string;\n</code></pre> <pre><code>public function getName(): string;\n</code></pre>"},{"location":"api/phalcon_acl/#aclcomponentawareinterface","title":"Acl\\ComponentAwareInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Acl</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for classes which could be used in allow method as RESOURCE</p>"},{"location":"api/phalcon_acl/#methods_4","title":"Methods","text":"<p><pre><code>public function getComponentName(): string;\n</code></pre> Returns component name</p>"},{"location":"api/phalcon_acl/#aclcomponentinterface","title":"Acl\\ComponentInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Acl</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Acl\\Component</p>"},{"location":"api/phalcon_acl/#methods_5","title":"Methods","text":"<p><pre><code>public function __toString(): string;\n</code></pre> Magic method __toString</p> <p><pre><code>public function getDescription(): string;\n</code></pre> Returns component description</p> <p><pre><code>public function getName(): string;\n</code></pre> Returns the component name</p>"},{"location":"api/phalcon_acl/#aclenum","title":"Acl\\Enum","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Acl</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Constants for Phalcon\\Acl\\Adapter adapters</p>"},{"location":"api/phalcon_acl/#constants","title":"Constants","text":"<pre><code>const ALLOW = 1;\nconst DENY = 0;\n</code></pre>"},{"location":"api/phalcon_acl/#aclexception","title":"Acl\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Acl</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class for exceptions thrown by Phalcon\\Acl</p>"},{"location":"api/phalcon_acl/#aclrole","title":"Acl\\Role","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Acl</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>RoleInterface</code></li> </ul> </li> </ul> <p>This class defines role entity and its description</p>"},{"location":"api/phalcon_acl/#properties_3","title":"Properties","text":"<pre><code>/**\n * Role description\n *\n * @var string\n */\nprivate $description;\n\n/**\n * Role name\n *\n * @var string\n */\nprivate $name;\n</code></pre>"},{"location":"api/phalcon_acl/#methods_6","title":"Methods","text":"<p><pre><code>public function __construct( string $name, string $description = null );\n</code></pre> Phalcon\\Acl\\Role constructor</p> <pre><code>public function __toString(): string;\n</code></pre> <pre><code>public function getDescription(): string;\n</code></pre> <pre><code>public function getName(): string;\n</code></pre>"},{"location":"api/phalcon_acl/#aclroleawareinterface","title":"Acl\\RoleAwareInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Acl</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for classes which could be used in allow method as ROLE</p>"},{"location":"api/phalcon_acl/#methods_7","title":"Methods","text":"<p><pre><code>public function getRoleName(): string;\n</code></pre> Returns role name</p>"},{"location":"api/phalcon_acl/#aclroleinterface","title":"Acl\\RoleInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Acl</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Acl\\Role</p>"},{"location":"api/phalcon_acl/#methods_8","title":"Methods","text":"<p><pre><code>public function __toString(): string;\n</code></pre> Magic method __toString</p> <p><pre><code>public function getDescription(): string;\n</code></pre> Returns role description</p> <p><pre><code>public function getName(): string;\n</code></pre> Returns the role name</p>"},{"location":"api/phalcon_annotations/","title":"Phalcon annotations","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_annotations/#annotationsadapterabstractadapter","title":"Annotations\\Adapter\\AbstractAdapter","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Annotations\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Annotations\\Collection</code></li> <li><code>Phalcon\\Annotations\\Exception</code></li> <li><code>Phalcon\\Annotations\\Reader</code></li> <li><code>Phalcon\\Annotations\\ReaderInterface</code></li> <li><code>Phalcon\\Annotations\\Reflection</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>AdapterInterface</code></li> </ul> </li> </ul> <p>This is the base class for Phalcon\\Annotations adapters</p>"},{"location":"api/phalcon_annotations/#properties","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $annotations;\n\n/**\n * @var Reader\n */\nprotected $reader;\n</code></pre>"},{"location":"api/phalcon_annotations/#methods","title":"Methods","text":"<p><pre><code>public function get( mixed $className ): Reflection;\n</code></pre> Parses or retrieves all the annotations found in a class</p> <p><pre><code>public function getMethod( string $className, string $methodName ): Collection;\n</code></pre> Returns the annotations found in a specific method</p> <p><pre><code>public function getMethods( string $className ): array;\n</code></pre> Returns the annotations found in all the class' methods</p> <p><pre><code>public function getProperties( string $className ): array;\n</code></pre> Returns the annotations found in all the class' properties</p> <p><pre><code>public function getProperty( string $className, string $propertyName ): Collection;\n</code></pre> Returns the annotations found in a specific property</p> <p><pre><code>public function getReader(): ReaderInterface;\n</code></pre> Returns the annotation reader</p> <p><pre><code>public function setReader( ReaderInterface $reader );\n</code></pre> Sets the annotations parser</p>"},{"location":"api/phalcon_annotations/#annotationsadapteradapterinterface","title":"Annotations\\Adapter\\AdapterInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Annotations\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Annotations\\Collection</code></li> <li><code>Phalcon\\Annotations\\ReaderInterface</code></li> <li><code>Phalcon\\Annotations\\Reflection</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This interface must be implemented by adapters in Phalcon\\Annotations</p>"},{"location":"api/phalcon_annotations/#methods_1","title":"Methods","text":"<p><pre><code>public function get( string $className ): Reflection;\n</code></pre> Parses or retrieves all the annotations found in a class</p> <p><pre><code>public function getMethod( string $className, string $methodName ): Collection;\n</code></pre> Returns the annotations found in a specific method</p> <p><pre><code>public function getMethods( string $className ): array;\n</code></pre> Returns the annotations found in all the class' methods</p> <p><pre><code>public function getProperties( string $className ): array;\n</code></pre> Returns the annotations found in all the class' methods</p> <p><pre><code>public function getProperty( string $className, string $propertyName ): Collection;\n</code></pre> Returns the annotations found in a specific property</p> <p><pre><code>public function getReader(): ReaderInterface;\n</code></pre> Returns the annotation reader</p> <p><pre><code>public function setReader( ReaderInterface $reader );\n</code></pre> Sets the annotations parser</p>"},{"location":"api/phalcon_annotations/#annotationsadapterapcu","title":"Annotations\\Adapter\\Apcu","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Annotations\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Annotations\\Reflection</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Stores the parsed annotations in APCu. This adapter is suitable for production</p> <pre><code>use Phalcon\\Annotations\\Adapter\\Apcu;\n\n$annotations = new Apcu();\n</code></pre>"},{"location":"api/phalcon_annotations/#properties_1","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $prefix = '';\n\n/**\n * @var int\n */\nprotected $ttl = 172800;\n</code></pre>"},{"location":"api/phalcon_annotations/#methods_2","title":"Methods","text":"<pre><code>public function __construct( array $options = [] );\n</code></pre> <p><pre><code>public function read( string $key ): Reflection | bool;\n</code></pre> Reads parsed annotations from APCu</p> <p><pre><code>public function write( string $key, Reflection $data ): bool;\n</code></pre> Writes parsed annotations to APCu</p>"},{"location":"api/phalcon_annotations/#annotationsadaptermemory","title":"Annotations\\Adapter\\Memory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Annotations\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Annotations\\Reflection</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Stores the parsed annotations in memory. This adapter is the suitable development/testing</p>"},{"location":"api/phalcon_annotations/#properties_2","title":"Properties","text":"<pre><code>/**\n * @var mixed\n */\nprotected $data;\n</code></pre>"},{"location":"api/phalcon_annotations/#methods_3","title":"Methods","text":"<p><pre><code>public function read( string $key ): Reflection | bool;\n</code></pre> Reads parsed annotations from memory</p> <p><pre><code>public function write( string $key, Reflection $data ): void;\n</code></pre> Writes parsed annotations to memory</p>"},{"location":"api/phalcon_annotations/#annotationsadapterstream","title":"Annotations\\Adapter\\Stream","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Annotations\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Annotations\\Exception</code></li> <li><code>Phalcon\\Annotations\\Reflection</code></li> <li><code>RuntimeException</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Stores the parsed annotations in files. This adapter is suitable for production</p> <pre><code>use Phalcon\\Annotations\\Adapter\\Stream;\n\n$annotations = new Stream(\n    [\n        \"annotationsDir\" =&gt; \"app/cache/annotations/\",\n    ]\n);\n</code></pre>"},{"location":"api/phalcon_annotations/#properties_3","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $annotationsDir = ./;\n</code></pre>"},{"location":"api/phalcon_annotations/#methods_4","title":"Methods","text":"<pre><code>public function __construct( array $options = [] );\n</code></pre> <p><pre><code>public function read( string $key ): Reflection | bool | int;\n</code></pre> Reads parsed annotations from files</p> <p><pre><code>public function write( string $key, Reflection $data ): void;\n</code></pre> Writes parsed annotations to files</p>"},{"location":"api/phalcon_annotations/#annotationsannotation","title":"Annotations\\Annotation","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Annotations</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Represents a single annotation in an annotations collection</p>"},{"location":"api/phalcon_annotations/#properties_4","title":"Properties","text":"<pre><code>/**\n * Annotation Arguments\n *\n * @var array\n */\nprotected $arguments;\n\n/**\n * Annotation ExprArguments\n *\n * @var array\n */\nprotected $exprArguments;\n\n/**\n * Annotation Name\n *\n * @var string|null\n */\nprotected $name;\n</code></pre>"},{"location":"api/phalcon_annotations/#methods_5","title":"Methods","text":"<p><pre><code>public function __construct( array $reflectionData );\n</code></pre> Phalcon\\Annotations\\Annotation constructor</p> <p><pre><code>public function getArgument( mixed $position ): mixed | null;\n</code></pre> Returns an argument in a specific position</p> <p><pre><code>public function getArguments(): array;\n</code></pre> Returns the expression arguments</p> <p><pre><code>public function getExprArguments(): array;\n</code></pre> Returns the expression arguments without resolving</p> <p><pre><code>public function getExpression( array $expr ): mixed;\n</code></pre> Resolves an annotation expression</p> <p><pre><code>public function getName(): null | string;\n</code></pre> Returns the annotation's name</p> <p><pre><code>public function getNamedArgument( string $name ): mixed | null;\n</code></pre> Returns a named argument</p> <p><pre><code>public function getNamedParameter( string $name ): mixed;\n</code></pre> Returns a named parameter</p> <p><pre><code>public function hasArgument( mixed $position ): bool;\n</code></pre> Returns an argument in a specific position</p> <p><pre><code>public function numberArguments(): int;\n</code></pre> Returns the number of arguments that the annotation has</p>"},{"location":"api/phalcon_annotations/#annotationsannotationsfactory","title":"Annotations\\AnnotationsFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Annotations</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Annotations\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Factory\\AbstractFactory</code></li> <li><code>Phalcon\\Helper\\Arr\\Get</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFactory</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Factory to create annotations components</p>"},{"location":"api/phalcon_annotations/#methods_6","title":"Methods","text":"<p><pre><code>public function __construct( array $services = [] );\n</code></pre> AdapterFactory constructor.</p> <pre><code>public function load( mixed $config ): mixed;\n</code></pre> <p><pre><code>public function newInstance( string $name, array $options = [] ): AdapterInterface;\n</code></pre> Create a new instance of the adapter</p> <p><pre><code>protected function getAdapters(): array;\n</code></pre> The available adapters</p>"},{"location":"api/phalcon_annotations/#annotationscollection","title":"Annotations\\Collection","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Annotations</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Countable</code></li> <li><code>Iterator</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>Countable</code></li> <li><code>Iterator</code></li> </ul> </li> </ul> <p>Represents a collection of annotations. This class allows to traverse a group of annotations easily</p> <pre><code>// Traverse annotations\nforeach ($classAnnotations as $annotation) {\n    echo \"Name=\", $annotation-&gt;getName(), PHP_EOL;\n}\n\n// Check if the annotations has a specific\nvar_dump($classAnnotations-&gt;has(\"Cacheable\"));\n\n// Get an specific annotation in the collection\n$annotation = $classAnnotations-&gt;get(\"Cacheable\");\n</code></pre>"},{"location":"api/phalcon_annotations/#properties_5","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $annotations;\n\n/**\n * @var int\n */\nprotected $position = ;\n</code></pre>"},{"location":"api/phalcon_annotations/#methods_7","title":"Methods","text":"<p><pre><code>public function __construct( array $reflectionData = [] );\n</code></pre> Phalcon\\Annotations\\Collection constructor</p> <p><pre><code>public function count(): int;\n</code></pre> Returns the number of annotations in the collection</p> <p><pre><code>public function current(): Annotation | bool;\n</code></pre> Returns the current annotation in the iterator</p> <p><pre><code>public function get( string $name ): Annotation;\n</code></pre> Returns the first annotation that match a name</p> <p><pre><code>public function getAll( string $name ): Annotation[];\n</code></pre> Returns all the annotations that match a name</p> <p><pre><code>public function getAnnotations(): Annotation[];\n</code></pre> Returns the internal annotations as an array</p> <p><pre><code>public function has( string $name ): bool;\n</code></pre> Check if an annotation exists in a collection</p> <p><pre><code>public function key(): int;\n</code></pre> Returns the current position/key in the iterator</p> <p><pre><code>public function next(): void;\n</code></pre> Moves the internal iteration pointer to the next position</p> <p><pre><code>public function rewind(): void;\n</code></pre> Rewinds the internal iterator</p> <p><pre><code>public function valid(): bool;\n</code></pre> Check if the current annotation in the iterator is valid</p>"},{"location":"api/phalcon_annotations/#annotationsexception","title":"Annotations\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Annotations</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class for exceptions thrown by Phalcon\\Annotations</p>"},{"location":"api/phalcon_annotations/#annotationsreader","title":"Annotations\\Reader","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Annotations</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>ReflectionClass</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>ReaderInterface</code></li> </ul> </li> </ul> <p>Parses docblocks returning an array with the found annotations</p>"},{"location":"api/phalcon_annotations/#methods_8","title":"Methods","text":"<p><pre><code>public function parse( string $className ): array;\n</code></pre> Reads annotations from the class docblocks, its methods and/or properties</p> <p><pre><code>public static function parseDocBlock( string $docBlock, mixed $file = null, mixed $line = null ): array;\n</code></pre> Parses a raw doc block returning the annotations found</p>"},{"location":"api/phalcon_annotations/#annotationsreaderinterface","title":"Annotations\\ReaderInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Annotations</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Parses docblocks returning an array with the found annotations</p>"},{"location":"api/phalcon_annotations/#methods_9","title":"Methods","text":"<p><pre><code>public function parse( string $className ): array;\n</code></pre> Reads annotations from the class docblocks, its methods and/or properties</p> <p><pre><code>public static function parseDocBlock( string $docBlock, mixed $file = null, mixed $line = null ): array;\n</code></pre> Parses a raw docblock returning the annotations found</p>"},{"location":"api/phalcon_annotations/#annotationsreflection","title":"Annotations\\Reflection","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Annotations</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Allows to manipulate the annotations reflection in an OO manner</p> <pre><code>use Phalcon\\Annotations\\Reader;\nuse Phalcon\\Annotations\\Reflection;\n\n// Parse the annotations in a class\n$reader = new Reader();\n$parsing = $reader-&gt;parse(\"MyComponent\");\n\n// Create the reflection\n$reflection = new Reflection($parsing);\n\n// Get the annotations in the class docblock\n$classAnnotations = $reflection-&gt;getClassAnnotations();\n</code></pre>"},{"location":"api/phalcon_annotations/#properties_6","title":"Properties","text":"<pre><code>/**\n * @var Collection|null\n */\nprotected $classAnnotations;\n\n/**\n * @var array\n */\nprotected $constantAnnotations;\n\n/**\n * @var array\n */\nprotected $propertyAnnotations;\n\n/**\n * @var array\n */\nprotected $reflectionData;\n</code></pre>"},{"location":"api/phalcon_annotations/#methods_10","title":"Methods","text":"<pre><code>public function __construct( array $reflectionData = [] );\n</code></pre> <p><pre><code>public function getClassAnnotations(): Collection | bool;\n</code></pre> Returns the annotations found in the class docblock</p> <p><pre><code>public function getMethodsAnnotations(): Collection[] | bool;\n</code></pre> Returns the annotations found in the methods' docblocks</p> <p><pre><code>public function getPropertiesAnnotations(): Collection[] | bool;\n</code></pre> Returns the annotations found in the properties' docblocks</p> <p><pre><code>public function getReflectionData(): array;\n</code></pre> Returns the raw parsing intermediate definitions used to construct the reflection</p>"},{"location":"api/phalcon_application/","title":"Phalcon application","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_application/#applicationabstractapplication","title":"Application\\AbstractApplication","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Application</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Di\\Injectable</code></li> <li><code>Phalcon\\Events\\EventsAwareInterface</code></li> <li><code>Phalcon\\Events\\ManagerInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Injectable</code></p> </li> <li> <p>Implements</p> <ul> <li><code>EventsAwareInterface</code></li> </ul> </li> </ul> <p>Base class for Phalcon\\Cli\\Console and Phalcon\\Mvc\\Application.</p>"},{"location":"api/phalcon_application/#properties","title":"Properties","text":"<pre><code>/**\n * @var DiInterface\n */\nprotected $container;\n\n/**\n * @var string\n */\nprotected $defaultModule = '';\n\n/**\n * @var ManagerInterface|null\n */\nprotected $eventsManager;\n\n/**\n * @var array\n */\nprotected $modules;\n</code></pre>"},{"location":"api/phalcon_application/#methods","title":"Methods","text":"<p><pre><code>public function __construct( DiInterface $container = null );\n</code></pre> Phalcon\\AbstractApplication constructor</p> <p><pre><code>public function getDefaultModule(): string;\n</code></pre> Returns the default module name</p> <p><pre><code>public function getEventsManager(): ManagerInterface;\n</code></pre> Returns the internal event manager</p> <p><pre><code>public function getModule( string $name ): array | object;\n</code></pre> Gets the module definition registered in the application via module name</p> <p><pre><code>public function getModules(): array;\n</code></pre> Return the modules registered in the application</p> <p><pre><code>public function registerModules( array $modules, bool $merge = bool ): AbstractApplication;\n</code></pre> Register an array of modules present in the application</p> <pre><code>$this-&gt;registerModules(\n    [\n        \"frontend\" =&gt; [\n            \"className\" =&gt; \\Multiple\\Frontend\\Module::class,\n            \"path\"      =&gt; \"../apps/frontend/Module.php\",\n        ],\n        \"backend\" =&gt; [\n            \"className\" =&gt; \\Multiple\\Backend\\Module::class,\n            \"path\"      =&gt; \"../apps/backend/Module.php\",\n        ],\n    ]\n);\n</code></pre> <p><pre><code>public function setDefaultModule( string $defaultModule ): AbstractApplication;\n</code></pre> Sets the module name to be used if the router doesn't return a valid module</p> <p><pre><code>public function setEventsManager( ManagerInterface $eventsManager ): void;\n</code></pre> Sets the events manager</p>"},{"location":"api/phalcon_application/#applicationexception","title":"Application\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Application</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Application class will use this class</p>"},{"location":"api/phalcon_assets/","title":"Phalcon assets","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_assets/#assetsasset","title":"Assets\\Asset","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Assets</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>AssetInterface</code></li> </ul> </li> </ul> <p>Represents an asset</p> <pre><code>$asset = new \\Phalcon\\Assets\\Asset(\"js\", \"js/jquery.js\");\n</code></pre>"},{"location":"api/phalcon_assets/#properties","title":"Properties","text":"<pre><code>/**\n * @var array | null\n */\nprotected $attributes;\n\n/**\n * @var bool\n */\nprotected $autoVersion = false;\n\n/**\n * @var bool\n */\nprotected $filter;\n\n/**\n * @var bool\n */\nprotected $local;\n\n/**\n * @var string\n */\nprotected $path;\n\n/**\n * @var string\n */\nprotected $sourcePath;\n\n/**\n * @var string\n */\nprotected $targetPath;\n\n/**\n * @var string\n */\nprotected $targetUri;\n\n/**\n * @var string\n */\nprotected $type;\n\n/**\n * Version of resource\n *\n * @var string\n */\nprotected $version;\n</code></pre>"},{"location":"api/phalcon_assets/#methods","title":"Methods","text":"<p><pre><code>public function __construct( string $type, string $path, bool $local = bool, bool $filter = bool, array $attributes = [], string $version = null, bool $autoVersion = bool );\n</code></pre> Asset constructor.</p> <p><pre><code>public function getAssetKey(): string;\n</code></pre> Gets the asset's key.</p> <p><pre><code>public function getAttributes(): array | null\n</code></pre> Gets extra HTML attributes.</p> <p><pre><code>public function getContent( string $basePath = null ): string;\n</code></pre> Returns the content of the asset as an string Optionally a base path where the asset is located can be set</p> <pre><code>public function getFilter(): bool;\n</code></pre> <p><pre><code>public function getLocal(): bool\n</code></pre> Checks if the asset is local or not</p> <pre><code>public function getPath(): string;\n</code></pre> <p><pre><code>public function getRealSourcePath( string $basePath = null ): string;\n</code></pre> Returns the complete location where the asset is located</p> <p><pre><code>public function getRealTargetPath( string $basePath = null ): string;\n</code></pre> Returns the complete location where the asset must be written</p> <p><pre><code>public function getRealTargetUri(): string;\n</code></pre> Returns the real target uri for the generated HTML</p> <pre><code>public function getSourcePath(): string;\n</code></pre> <pre><code>public function getTargetPath(): string;\n</code></pre> <pre><code>public function getTargetUri(): string;\n</code></pre> <pre><code>public function getType(): string;\n</code></pre> <p><pre><code>public function getVersion(): string;\n</code></pre> Version of resource</p> <p><pre><code>public function isAutoVersion(): bool;\n</code></pre> Checks if the asset is using auto version</p> <p><pre><code>public function setAttributes( array $attributes ): AssetInterface;\n</code></pre> Sets extra HTML attributes</p> <pre><code>public function setAutoVersion( bool $autoVersion )l\n</code></pre> <p><pre><code>public function setFilter( bool $filter ): AssetInterface;\n</code></pre> Sets if the asset must be filtered or not</p> <p><pre><code>public function setLocal( bool $local ): AssetInterface;\n</code></pre> Sets if the asset is local or external</p> <p><pre><code>public function setPath( string $path ): AssetInterface;\n</code></pre> Sets the asset's path</p> <p><pre><code>public function setSourcePath( string $sourcePath ): AssetInterface;\n</code></pre> Sets the asset's source path</p> <p><pre><code>public function setTargetPath( string $targetPath ): AssetInterface;\n</code></pre> Sets the asset's target path</p> <p><pre><code>public function setTargetUri( string $targetUri ): AssetInterface;\n</code></pre> Sets a target uri for the generated HTML</p> <p><pre><code>public function setType( string $type ): AssetInterface;\n</code></pre> Sets the asset's type</p> <p><pre><code>public function setVersion( string $version );\n</code></pre> Sets the asset's version</p>"},{"location":"api/phalcon_assets/#assetsassetcss","title":"Assets\\Asset\\Css","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Assets\\Asset</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Assets\\Asset</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AssetBase</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Represents CSS assets</p>"},{"location":"api/phalcon_assets/#methods_1","title":"Methods","text":"<p><pre><code>public function __construct( string $path, bool $local = bool, bool $filter = bool, array $attributes = [], string $version = null, bool $autoVersion = bool );\n</code></pre> Phalcon\\Assets\\Asset\\Css constructor</p>"},{"location":"api/phalcon_assets/#assetsassetjs","title":"Assets\\Asset\\Js","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Assets\\Asset</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Assets\\Asset</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AssetBase</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Represents JavaScript assets</p>"},{"location":"api/phalcon_assets/#methods_2","title":"Methods","text":"<p><pre><code>public function __construct( string $path, bool $local = bool, bool $filter = bool, array $attributes = [], string $version = null, bool $autoVersion = bool );\n</code></pre> Phalcon\\Assets\\Asset\\Js constructor</p>"},{"location":"api/phalcon_assets/#assetsassetinterface","title":"Assets\\AssetInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Assets</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for custom Phalcon\\Assets resources</p>"},{"location":"api/phalcon_assets/#methods_3","title":"Methods","text":"<p><pre><code>public function getAssetKey(): string;\n</code></pre> Gets the asset's key.</p> <p><pre><code>public function getAttributes(): array | null;\n</code></pre> Gets extra HTML attributes.</p> <p><pre><code>public function getFilter(): bool;\n</code></pre> Gets if the asset must be filtered or not.</p> <p><pre><code>public function getType(): string;\n</code></pre> Gets the asset's type.</p> <p><pre><code>public function setAttributes( array $attributes ): AssetInterface;\n</code></pre> Sets extra HTML attributes.</p> <p><pre><code>public function setFilter( bool $filter ): AssetInterface;\n</code></pre> Sets if the asset must be filtered or not.</p> <p><pre><code>public function setType( string $type ): AssetInterface;\n</code></pre> Sets the asset's type.</p>"},{"location":"api/phalcon_assets/#assetscollection","title":"Assets\\Collection","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Assets</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>ArrayIterator</code></li> <li><code>Countable</code></li> <li><code>IteratorAggregate</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>Countable</code></li> <li><code>IteratorAggregate</code></li> </ul> </li> </ul> <p>Collection of asset objects</p>"},{"location":"api/phalcon_assets/#properties_1","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $assets;\n\n/**\n * @var array\n */\nprotected $attributes;\n\n/**\n * Should version be determined from file modification time\n *\n * @var bool\n */\nprotected $autoVersion = false;\n\n/**\n * @var array\n */\nprotected $codes;\n\n/**\n * @var array\n */\nprotected $filters;\n\n/**\n * @var array\n */\nprotected $includedAssets;\n\n/**\n * @var bool\n */\nprotected $join = true;\n\n/**\n * @var bool\n */\nprotected $local = true;\n\n/**\n * @var string\n */\nprotected $prefix = '';\n\n/**\n * @var int\n */\nprotected $position = 0;\n\n/**\n * @var string\n */\nprotected $sourcePath = '';\n\n/**\n * @var bool\n */\nprotected $targetLocal = true;\n\n/**\n * @var string\n */\nprotected $targetPath = '';\n\n/**\n * @var string\n */\nprotected $targetUri = '';\n\n/**\n * @var string\n */\nprotected $version = '';\n</code></pre>"},{"location":"api/phalcon_assets/#methods_4","title":"Methods","text":"<p><pre><code>public function add( AssetInterface $asset ): Collection;\n</code></pre> Adds an asset to the collection</p> <p><pre><code>public function addCss( string $path, mixed $local = null, bool $filter = bool, mixed $attributes = null, string $version = null, bool $autoVersion = bool ): Collection;\n</code></pre> Adds a CSS asset to the collection</p> <p><pre><code>public function addFilter( FilterInterface $filter ): Collection;\n</code></pre> Adds a filter to the collection</p> <p><pre><code>public function addInline( Inline $code ): Collection;\n</code></pre> Adds an inline code to the collection</p> <p><pre><code>public function addInlineCss( string $content, bool $filter = bool, mixed $attributes = null ): Collection;\n</code></pre> Adds an inline CSS to the collection</p> <p><pre><code>public function addInlineJs( string $content, bool $filter = bool, mixed $attributes = null ): Collection;\n</code></pre> Adds an inline JavaScript to the collection</p> <p><pre><code>public function addJs( string $path, mixed $local = null, bool $filter = bool, mixed $attributes = null, string $version = null, bool $autoVersion = bool ): Collection;\n</code></pre> Adds a JavaScript asset to the collection</p> <p><pre><code>public function count(): int;\n</code></pre> Returns the number of elements in the form</p> <p><pre><code>public function current(): Asset;\n</code></pre> Returns the current asset in the iterator</p> <pre><code>public function getAssets(): array;\n</code></pre> <pre><code>public function getAttributes(): array;\n</code></pre> <pre><code>public function getCodes(): array;\n</code></pre> <pre><code>public function getFilters(): array;\n</code></pre> <pre><code>public function getJoin(): bool;\n</code></pre> <pre><code>public function getLocal(): bool;\n</code></pre> <pre><code>public function getPosition(): int;\n</code></pre> <pre><code>public function getPrefix(): string;\n</code></pre> <p><pre><code>public function getRealTargetPath( string $basePath ): string;\n</code></pre> Returns the complete location where the joined/filtered collection must be written</p> <pre><code>public function getSourcePath(): string;\n</code></pre> <pre><code>public function getTargetLocal(): bool;\n</code></pre> <pre><code>public function getTargetPath(): string;\n</code></pre> <pre><code>public function getTargetUri(): string;\n</code></pre> <pre><code>public function getVersion(): string;\n</code></pre> <p><pre><code>public function has( AssetInterface $asset ): bool;\n</code></pre> Checks this the asset is added to the collection.</p> <pre><code>use Phalcon\\Assets\\Asset;\nuse Phalcon\\Assets\\Collection;\n\n$collection = new Collection();\n\n$asset = new Asset(\"js\", \"js/jquery.js\");\n\n$collection-&gt;add($asset);\n$collection-&gt;has($asset); // true\n</code></pre> <p><pre><code>public function isAutoVersion(): bool;\n</code></pre> Checks if collection is using auto version</p> <p><pre><code>public function join( bool $join ): Collection;\n</code></pre> Sets if all filtered assets in the collection must be joined in a single result file</p> <p><pre><code>public function key(): int;\n</code></pre> Returns the current position/key in the iterator</p> <p><pre><code>public function next(): void;\n</code></pre> Moves the internal iteration pointer to the next position</p> <p><pre><code>public function rewind(): void;\n</code></pre> Rewinds the internal iterator</p> <p><pre><code>public function setAttributes( array $attributes ): Collection;\n</code></pre> Sets extra HTML attributes</p> <pre><code>public function setAutoVersion( bool $autoVersion )\n</code></pre> <p><pre><code>public function setFilters( array $filters ): Collection;\n</code></pre> Sets an array of filters in the collection</p> <p><pre><code>public function setLocal( bool $local ): Collection;\n</code></pre> Sets if the collection uses local assets by default</p> <p><pre><code>public function setPrefix( string $prefix ): Collection;\n</code></pre> Sets a common prefix for all the assets</p> <p><pre><code>public function setSourcePath( string $sourcePath ): Collection;\n</code></pre> Sets a base source path for all the assets in this collection</p> <p><pre><code>public function setTargetLocal( bool $targetLocal ): Collection;\n</code></pre> Sets if the target local or not</p> <p><pre><code>public function setTargetPath( string $targetPath ): Collection;\n</code></pre> Sets the target path of the file for the filtered/join output</p> <p><pre><code>public function setTargetUri( string $targetUri ): Collection;\n</code></pre> Sets a target uri for the generated HTML</p> <p><pre><code>public function setVersion( string $version )\n</code></pre> Sets the version</p> <p><pre><code>public function valid(): bool;\n</code></pre> Check if the current element in the iterator is valid</p> <p><pre><code>final protected function addAsset( AssetInterface $asset ): bool;\n</code></pre> Adds an asset or inline-code to the collection</p>"},{"location":"api/phalcon_assets/#assetsexception","title":"Assets\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Assets</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Assets will use this class</p>"},{"location":"api/phalcon_assets/#assetsfilterinterface","title":"Assets\\FilterInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Assets</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for custom Phalcon\\Assets filters</p>"},{"location":"api/phalcon_assets/#methods_5","title":"Methods","text":"<p><pre><code>public function filter( string $content ): string;\n</code></pre> Filters the content returning a string with the filtered content</p>"},{"location":"api/phalcon_assets/#assetsfilterscssmin","title":"Assets\\Filters\\Cssmin","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Assets\\Filters</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Assets\\FilterInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>FilterInterface</code></li> </ul> </li> </ul> <p>Minify the CSS - removes comments removes newlines and line feeds keeping removes last semicolon from last property</p>"},{"location":"api/phalcon_assets/#methods_6","title":"Methods","text":"<p><pre><code>public function filter( string $content ): string;\n</code></pre> Filters the content using CSSMIN</p> <p>NOTE</p> <p>This functionality is not currently available</p>"},{"location":"api/phalcon_assets/#assetsfiltersjsmin","title":"Assets\\Filters\\Jsmin","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Assets\\Filters</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Assets\\FilterInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>FilterInterface</code></li> </ul> </li> </ul> <p>Deletes the characters which are insignificant to JavaScript. Comments will be removed. Tabs will be replaced with spaces. Carriage returns will be replaced with linefeeds. Most spaces and linefeeds will be removed.</p>"},{"location":"api/phalcon_assets/#methods_7","title":"Methods","text":"<p><pre><code>public function filter( string $content ): string;\n</code></pre> Filters the content using JSMIN</p> <p>NOTE</p> <p>This functionality is not currently available</p> <p>NOTE: This functionality is not currently available</p>"},{"location":"api/phalcon_assets/#assetsfiltersnone","title":"Assets\\Filters\\None","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Assets\\Filters</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Assets\\FilterInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>FilterInterface</code></li> </ul> </li> </ul> <p>Returns the content without make any modification to the original source</p>"},{"location":"api/phalcon_assets/#methods_8","title":"Methods","text":"<p><pre><code>public function filter( string $content ): string;\n</code></pre> Returns the content as is</p>"},{"location":"api/phalcon_assets/#assetsinline","title":"Assets\\Inline","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Assets</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>AssetInterface</code></li> </ul> </li> </ul> <p>Represents an inline asset</p> <pre><code>$inline = new \\Phalcon\\Assets\\Inline(\"js\", \"alert('hello world');\");\n</code></pre>"},{"location":"api/phalcon_assets/#properties_2","title":"Properties","text":"<pre><code>/**\n * @var array | null\n */\nprotected $attributes;\n\n/**\n * @var string\n */\nprotected $content;\n\n/**\n * @var bool\n */\nprotected $filter;\n\n/**\n * @var string\n */\nprotected $type;\n</code></pre>"},{"location":"api/phalcon_assets/#methods_9","title":"Methods","text":"<p><pre><code>public function __construct( string $type, string $content, bool $filter = bool, array $attributes = [] );\n</code></pre> Phalcon\\Assets\\Inline constructor</p> <p><pre><code>public function getAssetKey(): string;\n</code></pre> Gets the asset's key.</p> <pre><code>public function getAttributes(): array;\n</code></pre> <pre><code>public function getContent(): string;\n</code></pre> <pre><code>public function getFilter(): bool;\n</code></pre> <pre><code>public function getType(): string;\n</code></pre> <p><pre><code>public function setAttributes( array $attributes ): AssetInterface;\n</code></pre> Sets extra HTML attributes</p> <p><pre><code>public function setFilter( bool $filter ): AssetInterface;\n</code></pre> Sets if the asset must be filtered or not</p> <p><pre><code>public function setType( string $type ): AssetInterface;\n</code></pre> Sets the inline's type</p>"},{"location":"api/phalcon_assets/#assetsinlinecss","title":"Assets\\Inline\\Css","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Assets\\Inline</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Assets\\Inline</code></li> </ul> </li> <li> <p>Extends</p> <p><code>InlineBase</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Represents an inlined CSS</p>"},{"location":"api/phalcon_assets/#methods_10","title":"Methods","text":"<p><pre><code>public function __construct( string $content, bool $filter = bool, mixed $attributes = null );\n</code></pre> Phalcon\\Assets\\Inline\\Css constructor</p>"},{"location":"api/phalcon_assets/#assetsinlinejs","title":"Assets\\Inline\\Js","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Assets\\Inline</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Assets\\Inline</code></li> </ul> </li> <li> <p>Extends</p> <p><code>InlineBase</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Represents an inline JavaScript</p>"},{"location":"api/phalcon_assets/#methods_11","title":"Methods","text":"<p><pre><code>public function __construct( string $content, bool $filter = bool, mixed $attributes = null );\n</code></pre> Phalcon\\Assets\\Inline\\Js constructor</p>"},{"location":"api/phalcon_assets/#assetsmanager","title":"Assets\\Manager","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Assets</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Assets\\Asset\\Css</code></li> <li><code>Phalcon\\Assets\\Asset\\Js</code></li> <li><code>Phalcon\\Assets\\Inline\\Css</code></li> <li><code>Phalcon\\Assets\\Inline\\Js</code></li> <li><code>Phalcon\\Di\\AbstractInjectionAware</code></li> <li><code>Phalcon\\Html\\Helper\\Element</code></li> <li><code>Phalcon\\Html\\Helper\\Link</code></li> <li><code>Phalcon\\Html\\Helper\\Script</code></li> <li><code>Phalcon\\Html\\TagFactory</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractInjectionAware</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Manages collections of CSS/JavaScript assets</p>"},{"location":"api/phalcon_assets/#properties_3","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $collections;\n\n/**\n * @var bool\n */\nprotected $implicitOutput = true;\n\n/**\n * @var array\n */\nprotected $options;\n</code></pre>"},{"location":"api/phalcon_assets/#methods_12","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Manager constructor.</p> <p><pre><code>public function addAsset( Asset $asset ): Manager;\n</code></pre> Adds a raw asset to the manager</p> <pre><code>$assets-&gt;addAsset(\n    new Phalcon\\Assets\\Asset(\"css\", \"css/style.css\")\n);\n</code></pre> <p><pre><code>public function addAssetByType( string $type, Asset $asset ): Manager;\n</code></pre> Adds a asset by its type</p> <pre><code>$assets-&gt;addAssetByType(\n    \"css\",\n    new \\Phalcon\\Assets\\Asset\\Css(\"css/style.css\")\n);\n</code></pre> <p><pre><code>public function addCss( string $path, mixed $local = bool, bool $filter = bool, mixed $attributes = null, string $version = null, bool $autoVersion = bool ): Manager;\n</code></pre>    Adds a CSS asset to the 'css' collection</p> <pre><code>$assets-&gt;addCss(\"css/bootstrap.css\");\n$assets-&gt;addCss(\"http://bootstrap.my-cdn.com/style.css\", false);\n</code></pre> <p><pre><code>public function addInlineCode( Inline $code ): Manager;\n</code></pre> Adds a raw inline code to the manager</p> <p><pre><code>public function addInlineCodeByType( string $type, Inline $code ): Manager;\n</code></pre> Adds an inline code by its type</p> <p><pre><code>public function addInlineCss( string $content, mixed $filter = bool, mixed $attributes = null ): Manager;\n</code></pre> Adds an inline CSS to the 'css' collection</p> <p><pre><code>public function addInlineJs( string $content, mixed $filter = bool, mixed $attributes = null ): Manager;\n</code></pre> Adds an inline JavaScript to the 'js' collection</p> <p><pre><code>public function addJs( string $path, mixed $local = bool, bool $filter = bool, mixed $attributes = null, string $version = null, bool $autoVersion = bool ): Manager;\n</code></pre> Adds a JavaScript asset to the 'js' collection</p> <pre><code>$assets-&gt;addJs(\"scripts/jquery.js\");\n$assets-&gt;addJs(\"http://jquery.my-cdn.com/jquery.js\", false);\n</code></pre> <p><pre><code>public function collection( string $name ): Collection;\n</code></pre> Creates/Returns a collection of assets</p> <p><pre><code>public function collectionAssetsByType( array $assets, string $type ): array;\n</code></pre> Creates/Returns a collection of assets by type</p> <p><pre><code>public function exists( string $id ): bool;\n</code></pre> Returns true or false if collection exists.</p> <pre><code>if ($manager-&gt;exists(\"jsHeader\")) {\n    // \\Phalcon\\Assets\\Collection\n    $collection = $manager-&gt;get(\"jsHeader\");\n}\n</code></pre> <p><pre><code>public function get( string $id ): Collection;\n</code></pre> Returns a collection by its id.</p> <pre><code>$scripts = $assets-&gt;get(\"js\");\n</code></pre> <p><pre><code>public function getCollections(): Collection[];\n</code></pre> Returns existing collections in the manager</p> <p><pre><code>public function getCss(): Collection;\n</code></pre> Returns the CSS collection of assets</p> <p><pre><code>public function getJs(): Collection;\n</code></pre> Returns the CSS collection of assets</p> <p><pre><code>public function getOptions(): array;\n</code></pre> Returns the manager options</p> <p><pre><code>public function output( Collection $collection, mixed $callback, mixed $type ): string | null;\n</code></pre> Traverses a collection calling the callback to generate its HTML</p> <p><pre><code>public function outputCss( string $collectionName = null ): string;\n</code></pre> Prints the HTML for CSS assets</p> <p><pre><code>public function outputInline( Collection $collection, mixed $type ): string;\n</code></pre> Traverses a collection and generate its HTML</p> <p><pre><code>public function outputInlineCss( string $collectionName = null ): string;\n</code></pre> Prints the HTML for inline CSS</p> <p><pre><code>public function outputInlineJs( string $collectionName = null ): string;\n</code></pre> Prints the HTML for inline JS</p> <p><pre><code>public function outputJs( string $collectionName = null ): string;\n</code></pre> Prints the HTML for JS assets</p> <p><pre><code>public function set( string $id, Collection $collection ): Manager;\n</code></pre> Sets a collection in the Assets Manager</p> <pre><code>$assets-&gt;set(\"js\", $collection);\n</code></pre> <p><pre><code>public function setOptions( array $options ): Manager;\n</code></pre> Sets the manager options</p> <p><pre><code>public function useImplicitOutput( bool $implicitOutput ): Manager;\n</code></pre> Sets if the HTML generated must be directly printed or returned</p>"},{"location":"api/phalcon_cache/","title":"Phalcon cache","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_cache/#cachecache","title":"Cache\\Cache","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cache</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>DateInterval</code></li> <li><code>Phalcon\\Cache\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Cache\\Exception\\InvalidArgumentException</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractCache</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>This component offers caching capabilities for your application. Phalcon\\Cache implements PSR-16.</p>"},{"location":"api/phalcon_cache/#properties","title":"Properties","text":"<pre><code>/**\n * The adapter\n *\n * @var AdapterInterface\n */\nprotected $adapter;\n</code></pre>"},{"location":"api/phalcon_cache/#methods","title":"Methods","text":"<p><pre><code>public function __construct( AdapterInterface $adapter );\n</code></pre> Constructor.</p> <p><pre><code>public function clear(): bool;\n</code></pre> Wipes clean the entire cache's keys.</p> <p><pre><code>public function delete( mixed $key ): bool;\n</code></pre> Delete an item from the cache by its unique key.</p> <p><pre><code>public function deleteMultiple( mixed $keys ): bool;\n</code></pre> Deletes multiple cache items in a single operation.</p> <p><pre><code>public function get( mixed $key, mixed $defaultValue = null ): mixed;\n</code></pre> Fetches a value from the cache.</p> <pre><code>public function getAdapter(): AdapterInterface\n</code></pre> <p><pre><code>public function getMultiple( mixed $keys, mixed $defaultValue = null ): mixed;\n</code></pre> Obtains multiple cache items by their unique keys.</p> <p><pre><code>public function has( mixed $key ): bool;\n</code></pre> Determines whether an item is present in the cache.</p> <p><pre><code>public function set( mixed $key, mixed $value, mixed $ttl = null ): bool;\n</code></pre> Persists data in the cache, uniquely referenced by a key with an optional expiration TTL time.</p> <p><pre><code>public function setMultiple( mixed $values, mixed $ttl = null ): bool;\n</code></pre> Persists a set of key =&gt; value pairs in the cache, with an optional TTL.</p> <p><pre><code>protected function checkKey( mixed $key ): void;\n</code></pre> Checks the key. If it contains invalid characters an exception is thrown</p> <p><pre><code>protected function checkKeys( mixed $keys ): void;\n</code></pre> Checks the key. If it contains invalid characters an exception is thrown</p>"},{"location":"api/phalcon_cache/#cacheadapteradapterinterface","title":"Cache\\Adapter\\AdapterInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cache\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Storage\\Adapter\\AdapterInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>StorageAdapterInterface</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Cache adapters</p>"},{"location":"api/phalcon_cache/#cacheadapterapcu","title":"Cache\\Adapter\\Apcu","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cache\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Cache\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Storage\\Adapter\\Apcu</code></li> </ul> </li> <li> <p>Extends</p> <p><code>StorageApcu</code></p> </li> <li> <p>Implements</p> <ul> <li><code>CacheAdapterInterface</code></li> </ul> </li> </ul> <p>Apcu adapter</p>"},{"location":"api/phalcon_cache/#cacheadapterlibmemcached","title":"Cache\\Adapter\\Libmemcached","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cache\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Cache\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Storage\\Adapter\\Libmemcached</code></li> </ul> </li> <li> <p>Extends</p> <p><code>StorageLibmemcached</code></p> </li> <li> <p>Implements</p> <ul> <li><code>CacheAdapterInterface</code></li> </ul> </li> </ul> <p>Libmemcached adapter</p>"},{"location":"api/phalcon_cache/#cacheadaptermemory","title":"Cache\\Adapter\\Memory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cache\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Cache\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Storage\\Adapter\\Memory</code></li> </ul> </li> <li> <p>Extends</p> <p><code>StorageMemory</code></p> </li> <li> <p>Implements</p> <ul> <li><code>CacheAdapterInterface</code></li> </ul> </li> </ul> <p>Memory adapter</p>"},{"location":"api/phalcon_cache/#cacheadapterredis","title":"Cache\\Adapter\\Redis","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cache\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Cache\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Storage\\Adapter\\Redis</code></li> </ul> </li> <li> <p>Extends</p> <p><code>StorageRedis</code></p> </li> <li> <p>Implements</p> <ul> <li><code>CacheAdapterInterface</code></li> </ul> </li> </ul> <p>Redis adapter</p>"},{"location":"api/phalcon_cache/#cacheadapterstream","title":"Cache\\Adapter\\Stream","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cache\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Cache\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Storage\\Adapter\\Stream</code></li> </ul> </li> <li> <p>Extends</p> <p><code>StorageStream</code></p> </li> <li> <p>Implements</p> <ul> <li><code>CacheAdapterInterface</code></li> </ul> </li> </ul> <p>Stream adapter</p>"},{"location":"api/phalcon_cache/#cacheadapterfactory","title":"Cache\\AdapterFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cache</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Cache\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Cache\\Exception\\Exception</code></li> <li><code>Phalcon\\Factory\\AbstractFactory</code></li> <li><code>Phalcon\\Storage\\SerializerFactory</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFactory</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Factory to create Cache adapters</p>"},{"location":"api/phalcon_cache/#properties_1","title":"Properties","text":"<pre><code>/**\n * @var SerializerFactory\n */\nprivate $serializerFactory;\n</code></pre>"},{"location":"api/phalcon_cache/#methods_1","title":"Methods","text":"<p><pre><code>public function __construct( SerializerFactory $factory = null, array $services = [] );\n</code></pre> AdapterFactory constructor.</p> <p><pre><code>public function newInstance( string $name, array $options = [] ): AdapterInterface;\n</code></pre> Create a new instance of the adapter</p> <p><pre><code>protected function getAdapters(): array;\n</code></pre> Returns the available adapters</p>"},{"location":"api/phalcon_cache/#cachecachefactory","title":"Cache\\CacheFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cache</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Cache\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Cache\\Cache</code></li> <li><code>Phalcon\\Cache\\Exception\\Exception</code></li> <li><code>Phalcon\\Config\\ConfigInterface</code></li> <li><code>Phalcon\\Factory\\AbstractConfigFactory</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractConfigFactory</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Creates a new Cache class</p>"},{"location":"api/phalcon_cache/#properties_2","title":"Properties","text":"<pre><code>/**\n * @var AdapterFactory\n */\nprotected $adapterFactory;\n</code></pre>"},{"location":"api/phalcon_cache/#methods_2","title":"Methods","text":"<p><pre><code>public function __construct( AdapterFactory $factory );\n</code></pre> Constructor</p> <p><pre><code>public function load( mixed $config ): mixed;\n</code></pre> Factory to create an instance from a Config object</p> <p><pre><code>public function newInstance( string $name, array $options = [] ): CacheInterface;\n</code></pre> Constructs a new Cache instance.</p>"},{"location":"api/phalcon_cache/#cacheexceptionexception","title":"Cache\\Exception\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cache\\Exception</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Cache will use this class</p>"},{"location":"api/phalcon_cache/#cacheexceptioninvalidargumentexception","title":"Cache\\Exception\\InvalidArgumentException","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cache\\Exception</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Cache will use this class</p>"},{"location":"api/phalcon_cli/","title":"Phalcon cli","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_cli/#cliconsole","title":"Cli\\Console","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cli</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Application\\AbstractApplication</code></li> <li><code>Phalcon\\Cli\\Console\\Exception</code></li> <li><code>Phalcon\\Cli\\Router\\Route</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Events\\ManagerInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractApplication</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>This component allows to create CLI applications using Phalcon</p>"},{"location":"api/phalcon_cli/#properties","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $arguments;\n\n/**\n * @var array\n */\nprotected $options;\n</code></pre>"},{"location":"api/phalcon_cli/#methods","title":"Methods","text":"<p><pre><code>public function handle( array $arguments = null );\n</code></pre> Handle the whole command-line tasks</p> <p><pre><code>public function setArgument( array $arguments = null, bool $str = bool, bool $shift = bool ): Console;\n</code></pre> Set an specific argument</p>"},{"location":"api/phalcon_cli/#cliconsoleexception","title":"Cli\\Console\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cli\\Console</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Phalcon\\Application\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Cli\\Console will use this class</p>"},{"location":"api/phalcon_cli/#clidispatcher","title":"Cli\\Dispatcher","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cli</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Cli\\Dispatcher\\Exception</code></li> <li><code>Phalcon\\Dispatcher\\AbstractDispatcher</code></li> <li><code>Phalcon\\Events\\ManagerInterface</code></li> <li><code>Phalcon\\Filter\\FilterInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>CliDispatcher</code></p> </li> <li> <p>Implements</p> <ul> <li><code>DispatcherInterface</code></li> </ul> </li> </ul> <p>Dispatching is the process of taking the command-line arguments, extracting the module name, task name, action name, and optional parameters contained in it, and then instantiating a task and calling an action on it.</p> <pre><code>use Phalcon\\Di;\nuse Phalcon\\Cli\\Dispatcher;\n\n$di = new Di();\n\n$dispatcher = new Dispatcher();\n\n$dispatcher-&gt;setDi($di);\n\n$dispatcher-&gt;setTaskName(\"posts\");\n$dispatcher-&gt;setActionName(\"index\");\n$dispatcher-&gt;setParams([]);\n\n$handle = $dispatcher-&gt;dispatch();\n</code></pre>"},{"location":"api/phalcon_cli/#properties_1","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $defaultHandler = main;\n\n/**\n * @var string\n */\nprotected $defaultAction = main;\n\n/**\n * @var string\n */\nprotected $handlerSuffix = Task;\n\n/**\n * @var array\n */\nprotected $options;\n</code></pre>"},{"location":"api/phalcon_cli/#methods_1","title":"Methods","text":"<p><pre><code>public function callActionMethod( mixed $handler, string $actionMethod, array $params = [] ): mixed;\n</code></pre> Calls the action method.</p> <p><pre><code>public function getActiveTask(): TaskInterface;\n</code></pre> Returns the active task in the dispatcher</p> <p><pre><code>public function getLastTask(): TaskInterface;\n</code></pre> Returns the latest dispatched controller</p> <p><pre><code>public function getOption( mixed $option, mixed $filters = null, mixed $defaultValue = null ): mixed;\n</code></pre> Gets an option by its name or numeric index</p> <p><pre><code>public function getOptions(): array;\n</code></pre> Get dispatched options</p> <p><pre><code>public function getTaskName(): string;\n</code></pre> Gets last dispatched task name</p> <p><pre><code>public function getTaskSuffix(): string;\n</code></pre> Gets the default task suffix</p> <p><pre><code>public function hasOption( mixed $option ): bool;\n</code></pre> Check if an option exists</p> <p><pre><code>public function setDefaultTask( string $taskName ): void;\n</code></pre> Sets the default task name</p> <p><pre><code>public function setOptions( array $options ): void;\n</code></pre> Set the options to be dispatched</p> <p><pre><code>public function setTaskName( string $taskName ): void;\n</code></pre> Sets the task name to be dispatched</p> <p><pre><code>public function setTaskSuffix( string $taskSuffix ): void;\n</code></pre> Sets the default task suffix</p> <p><pre><code>protected function handleException( \\Exception $exception );\n</code></pre> Handles a user exception</p> <p><pre><code>protected function throwDispatchException( string $message, int $exceptionCode = int );\n</code></pre> Throws an internal exception</p>"},{"location":"api/phalcon_cli/#clidispatcherexception","title":"Cli\\Dispatcher\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cli\\Dispatcher</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Phalcon\\Dispatcher\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Cli\\Dispatcher will use this class</p>"},{"location":"api/phalcon_cli/#clidispatcherinterface","title":"Cli\\DispatcherInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cli</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Dispatcher\\DispatcherInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>DispatcherInterfaceBase</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Cli\\Dispatcher</p>"},{"location":"api/phalcon_cli/#methods_2","title":"Methods","text":"<p><pre><code>public function getActiveTask(): TaskInterface;\n</code></pre> Returns the active task in the dispatcher</p> <p><pre><code>public function getLastTask(): TaskInterface;\n</code></pre> Returns the latest dispatched controller</p> <p><pre><code>public function getOptions(): array;\n</code></pre> Get dispatched options</p> <p><pre><code>public function getTaskName(): string;\n</code></pre> Gets last dispatched task name</p> <p><pre><code>public function getTaskSuffix(): string;\n</code></pre> Gets default task suffix</p> <p><pre><code>public function setDefaultTask( string $taskName ): void;\n</code></pre> Sets the default task name</p> <p><pre><code>public function setOptions( array $options ): void;\n</code></pre> Set the options to be dispatched</p> <p><pre><code>public function setTaskName( string $taskName ): void;\n</code></pre> Sets the task name to be dispatched</p> <p><pre><code>public function setTaskSuffix( string $taskSuffix ): void;\n</code></pre> Sets the default task suffix</p>"},{"location":"api/phalcon_cli/#clirouter","title":"Cli\\Router","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cli</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Cli\\Router\\Exception</code></li> <li><code>Phalcon\\Cli\\Router\\Route</code></li> <li><code>Phalcon\\Cli\\Router\\RouteInterface</code></li> <li><code>Phalcon\\Di\\AbstractInjectionAware</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractInjectionAware</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Cli\\Router is the standard framework router. Routing is the process of taking a command-line arguments and decomposing it into parameters to determine which module, task, and action of that task should receive the request.</p> <pre><code>$router = new \\Phalcon\\Cli\\Router();\n\n$router-&gt;handle(\n    [\n        \"module\" =&gt; \"main\",\n        \"task\"   =&gt; \"videos\",\n        \"action\" =&gt; \"process\",\n    ]\n);\n\necho $router-&gt;getTaskName();\n</code></pre>"},{"location":"api/phalcon_cli/#properties_2","title":"Properties","text":"<pre><code>//\nprotected $action;\n\n//\nprotected $defaultAction;\n\n//\nprotected $defaultModule;\n\n/**\n * @var array\n */\nprotected $defaultParams;\n\n//\nprotected $defaultTask;\n\n//\nprotected $matchedRoute;\n\n//\nprotected $matches;\n\n//\nprotected $module;\n\n/**\n * @var array\n */\nprotected $params;\n\n//\nprotected $routes;\n\n//\nprotected $task;\n\n//\nprotected $wasMatched = false;\n</code></pre>"},{"location":"api/phalcon_cli/#methods_3","title":"Methods","text":"<p><pre><code>public function __construct( bool $defaultRoutes = bool );\n</code></pre> Phalcon\\Cli\\Router constructor</p> <p><pre><code>public function add( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router</p> <pre><code>$router-&gt;add(\"/about\", \"About::main\");\n</code></pre> <p><pre><code>public function getActionName(): string;\n</code></pre> Returns processed action name</p> <p><pre><code>public function getMatchedRoute(): RouteInterface;\n</code></pre> Returns the route that matches the handled URI</p> <p><pre><code>public function getMatches(): array;\n</code></pre> Returns the sub expressions in the regular expression matched</p> <p><pre><code>public function getModuleName(): string;\n</code></pre> Returns processed module name</p> <p><pre><code>public function getParams(): array;\n</code></pre> Returns processed extra params</p> <p><pre><code>public function getRouteById( mixed $id ): RouteInterface | bool;\n</code></pre> Returns a route object by its id</p> <p><pre><code>public function getRouteByName( string $name ): RouteInterface | bool;\n</code></pre> Returns a route object by its name</p> <p><pre><code>public function getRoutes(): Route[];\n</code></pre> Returns all the routes defined in the router</p> <p><pre><code>public function getTaskName(): string;\n</code></pre> Returns processed task name</p> <p><pre><code>public function handle( mixed $arguments = null );\n</code></pre> Handles routing information received from command-line arguments</p> <p><pre><code>public function setDefaultAction( string $actionName );\n</code></pre> Sets the default action name</p> <p><pre><code>public function setDefaultModule( string $moduleName );\n</code></pre> Sets the name of the default module</p> <p><pre><code>public function setDefaultTask( string $taskName ): void;\n</code></pre> Sets the default controller name</p> <p><pre><code>public function setDefaults( array $defaults ): Router;\n</code></pre> Sets an array of default paths. If a route is missing a path the router will use the defined here. This method must not be used to set a 404 route</p> <pre><code>$router-&gt;setDefaults(\n    [\n        \"module\" =&gt; \"common\",\n        \"action\" =&gt; \"index\",\n    ]\n);\n</code></pre> <p><pre><code>public function wasMatched(): bool;\n</code></pre> Checks if the router matches any of the defined routes</p>"},{"location":"api/phalcon_cli/#clirouterexception","title":"Cli\\Router\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cli\\Router</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Cli\\Router will use this class</p>"},{"location":"api/phalcon_cli/#clirouterroute","title":"Cli\\Router\\Route","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cli\\Router</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>RouteInterface</code></li> </ul> </li> </ul> <p>This class represents every route added to the router</p>"},{"location":"api/phalcon_cli/#constants","title":"Constants","text":"<pre><code>const DEFAULT_DELIMITER =  ;\n</code></pre>"},{"location":"api/phalcon_cli/#properties_3","title":"Properties","text":"<pre><code>//\nprotected $beforeMatch;\n\n//\nprotected $compiledPattern;\n\n//\nprotected $converters;\n\n//\nprotected $delimiter;\n\n//\nprotected $static $delimiterPath;\n\n//\nprotected $description;\n\n//\nprotected $id;\n\n//\nprotected $name;\n\n//\nprotected $paths;\n\n//\nprotected $pattern;\n\n//\nprotected $static $uniqueId = 0;\n</code></pre>"},{"location":"api/phalcon_cli/#methods_4","title":"Methods","text":"<pre><code>public function __construct( string $pattern, mixed $paths = null );\n</code></pre> <p><pre><code>public function beforeMatch( mixed $callback ): RouteInterface;\n</code></pre> Sets a callback that is called if the route is matched. The developer can implement any arbitrary conditions here If the callback returns false the route is treated as not matched</p> <p><pre><code>public function compilePattern( string $pattern ): string;\n</code></pre> Replaces placeholders from pattern returning a valid PCRE regular expression</p> <p><pre><code>public function convert( string $name, mixed $converter ): RouteInterface;\n</code></pre> Adds a converter to perform an additional transformation for certain parameter</p> <p><pre><code>public static function delimiter( string $delimiter = null ): void;\n</code></pre> Set the routing delimiter</p> <p><pre><code>public function extractNamedParams( string $pattern ): array | bool;\n</code></pre> Extracts parameters from a string</p> <p><pre><code>public function getBeforeMatch(): mixed;\n</code></pre> Returns the 'before match' callback if any</p> <p><pre><code>public function getCompiledPattern(): string;\n</code></pre> Returns the route's compiled pattern</p> <p><pre><code>public function getConverters(): array;\n</code></pre> Returns the router converter</p> <p><pre><code>public static function getDelimiter(): string;\n</code></pre> Get routing delimiter</p> <p><pre><code>public function getDescription(): string;\n</code></pre> Returns the route's description</p> <p><pre><code>public function getName(): string;\n</code></pre> Returns the route's name</p> <p><pre><code>public function getPaths(): array;\n</code></pre> Returns the paths</p> <p><pre><code>public function getPattern(): string;\n</code></pre> Returns the route's pattern</p> <p><pre><code>public function getReversedPaths(): array;\n</code></pre> Returns the paths using positions as keys and names as values</p> <p><pre><code>public function getRouteId(): string;\n</code></pre> Returns the route's id</p> <p><pre><code>public function reConfigure( string $pattern, mixed $paths = null ): void;\n</code></pre> Reconfigure the route adding a new pattern and a set of paths</p> <p><pre><code>public static function reset(): void;\n</code></pre> Resets the internal route id generator</p> <p><pre><code>public function setDescription( string $description ): RouteInterface;\n</code></pre> Sets the route's description</p> <p><pre><code>public function setName( string $name ): RouteInterface;\n</code></pre> Sets the route's name</p> <pre><code>$router-&gt;add(\n    \"/about\",\n    [\n        \"controller\" =&gt; \"about\",\n    ]\n)-&gt;setName(\"about\");\n</code></pre>"},{"location":"api/phalcon_cli/#clirouterrouteinterface","title":"Cli\\Router\\RouteInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cli\\Router</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Cli\\Router\\Route</p>"},{"location":"api/phalcon_cli/#methods_5","title":"Methods","text":"<p><pre><code>public function compilePattern( string $pattern ): string;\n</code></pre> Replaces placeholders from pattern returning a valid PCRE regular expression</p> <p><pre><code>public static function delimiter( string $delimiter = null );\n</code></pre> Set the routing delimiter</p> <p><pre><code>public function getCompiledPattern(): string;\n</code></pre> Returns the route's pattern</p> <p><pre><code>public static function getDelimiter(): string;\n</code></pre> Get routing delimiter</p> <p><pre><code>public function getDescription(): string;\n</code></pre> Returns the route's description</p> <p><pre><code>public function getName(): string;\n</code></pre> Returns the route's name</p> <p><pre><code>public function getPaths(): array;\n</code></pre> Returns the paths</p> <p><pre><code>public function getPattern(): string;\n</code></pre> Returns the route's pattern</p> <p><pre><code>public function getReversedPaths(): array;\n</code></pre> Returns the paths using positions as keys and names as values</p> <p><pre><code>public function getRouteId(): string;\n</code></pre> Returns the route's id</p> <p><pre><code>public function reConfigure( string $pattern, mixed $paths = null ): void;\n</code></pre> Reconfigure the route adding a new pattern and a set of paths</p> <p><pre><code>public static function reset(): void;\n</code></pre> Resets the internal route id generator</p> <p><pre><code>public function setDescription( string $description ): RouteInterface;\n</code></pre> Sets the route's description</p> <p><pre><code>public function setName( string $name ): RouteInterface;\n</code></pre> Sets the route's name</p>"},{"location":"api/phalcon_cli/#clirouterinterface","title":"Cli\\RouterInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cli</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Cli\\Router\\RouteInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Cli\\Router</p>"},{"location":"api/phalcon_cli/#methods_6","title":"Methods","text":"<p><pre><code>public function add( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router on any HTTP method</p> <p><pre><code>public function getActionName(): string;\n</code></pre> Returns processed action name</p> <p><pre><code>public function getMatchedRoute(): RouteInterface;\n</code></pre> Returns the route that matches the handled URI</p> <p><pre><code>public function getMatches(): array;\n</code></pre> Return the sub expressions in the regular expression matched</p> <p><pre><code>public function getModuleName(): string;\n</code></pre> Returns processed module name</p> <p><pre><code>public function getParams(): array;\n</code></pre> Returns processed extra params</p> <p><pre><code>public function getRouteById( mixed $id ): RouteInterface;\n</code></pre> Returns a route object by its id</p> <p><pre><code>public function getRouteByName( string $name ): RouteInterface;\n</code></pre> Returns a route object by its name</p> <p><pre><code>public function getRoutes(): RouteInterface[];\n</code></pre> Return all the routes defined in the router</p> <p><pre><code>public function getTaskName(): string;\n</code></pre> Returns processed task name</p> <p><pre><code>public function handle( mixed $arguments = null );\n</code></pre> Handles routing information received from the rewrite engine</p> <p><pre><code>public function setDefaultAction( string $actionName ): void;\n</code></pre> Sets the default action name</p> <p><pre><code>public function setDefaultModule( string $moduleName ): void;\n</code></pre> Sets the name of the default module</p> <p><pre><code>public function setDefaultTask( string $taskName ): void;\n</code></pre> Sets the default task name</p> <p><pre><code>public function setDefaults( array $defaults ): void;\n</code></pre> Sets an array of default paths</p> <p><pre><code>public function wasMatched(): bool;\n</code></pre> Check if the router matches any of the defined routes</p>"},{"location":"api/phalcon_cli/#clitask","title":"Cli\\Task","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cli</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\Injectable</code></li> <li><code>Phalcon\\Events\\EventsAwareInterface</code></li> <li><code>Phalcon\\Events\\ManagerInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Injectable</code></p> </li> <li> <p>Implements</p> <ul> <li><code>EventsAwareInterface</code></li> <li><code>TaskInterface</code></li> </ul> </li> </ul> <p>Every command-line task should extend this class that encapsulates all the task functionality</p> <p>A task can be used to run \"tasks\" such as migrations, cronjobs, unit-tests, or anything that you want. The Task class should at least have a \"mainAction\" method.</p> <pre><code>class HelloTask extends \\Phalcon\\Cli\\Task\n{\n    // This action will be executed by default\n    public function mainAction()\n    {\n\n    }\n\n    public function findAction()\n    {\n\n    }\n}\n</code></pre>"},{"location":"api/phalcon_cli/#properties_4","title":"Properties","text":"<pre><code>//\nprotected $eventsManager;\n</code></pre>"},{"location":"api/phalcon_cli/#methods_7","title":"Methods","text":"<p><pre><code>final public function __construct();\n</code></pre> Phalcon\\Cli\\Task constructor</p> <p><pre><code>public function getEventsManager(): ManagerInterface | null;\n</code></pre> Returns the internal event manager</p> <p><pre><code>public function setEventsManager( ManagerInterface $eventsManager ): void;\n</code></pre> Sets the events manager</p>"},{"location":"api/phalcon_cli/#clitaskinterface","title":"Cli\\TaskInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Cli</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for task handlers</p>"},{"location":"api/phalcon_collection/","title":"Phalcon collection","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_collection/#collection","title":"Collection","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Support</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>ArrayAccess</code></li> <li><code>ArrayIterator</code></li> <li><code>Countable</code></li> <li><code>InvalidArgumentException</code></li> <li><code>IteratorAggregate</code></li> <li><code>JsonSerializable</code></li> <li><code>Phalcon\\Collection\\CollectionInterface</code></li> <li><code>Serializable</code></li> <li><code>Traversable</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>ArrayAccess</code></li> <li><code>CollectionInterface</code></li> <li><code>Countable</code></li> <li><code>IteratorAggregate</code></li> <li><code>JsonSerializable</code></li> <li><code>Serializable</code></li> </ul> </li> </ul> <p><code>Phalcon\\Collection</code> is a supercharged object oriented array. It implements: - ArrayAccess - Countable - IteratorAggregate - JsonSerializable - Serializable</p> <p>It can be used in any part of the application that needs collection of data Such implementations are for instance accessing globals <code>$_GET</code>, <code>$_POST</code> etc.</p>"},{"location":"api/phalcon_collection/#properties","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $data;\n\n/**\n * @var bool\n */\nprotected $insensitive = true;\n\n/**\n * @var array\n */\nprotected $lowerKeys;\n</code></pre>"},{"location":"api/phalcon_collection/#methods","title":"Methods","text":"<p><pre><code>public function __construct( array $data = [], bool $insensitive = bool );\n</code></pre> Collection constructor.</p> <p><pre><code>public function __get( string $element ): mixed;\n</code></pre> Magic getter to get an element from the collection</p> <p><pre><code>public function __isset( string $element ): bool;\n</code></pre> Magic isset to check whether an element exists or not</p> <p><pre><code>public function __set( string $element, mixed $value ): void;\n</code></pre> Magic setter to assign values to an element</p> <p><pre><code>public function __unset( string $element ): void;\n</code></pre> Magic unset to remove an element from the collection</p> <p><pre><code>public function clear(): void;\n</code></pre> Clears the internal collection</p> <p><pre><code>public function count(): int;\n</code></pre> Count elements of an object. See count</p> <p><pre><code>public function get( string $element, mixed $defaultValue = null, string $cast = null ): mixed;\n</code></pre> Get the element from the collection</p> <p><pre><code>public function getIterator(): Traversable;\n</code></pre> Returns the iterator of the class</p> <p><pre><code>public function getKeys( bool $insensitive = bool ): array;\n</code></pre> Return the keys as an array</p> <p><pre><code>public function getValues(): array;\n</code></pre> Return the values as an array</p> <p><pre><code>public function has( string $element ): bool;\n</code></pre> Determines whether an element is present in the collection.</p> <p><pre><code>public function init( array $data = [] ): void;\n</code></pre> Initialize internal array</p> <p><pre><code>public function jsonSerialize(): array;\n</code></pre> Specify data which should be serialized to JSON See jsonSerialize</p> <p><pre><code>public function offsetExists( mixed $element ): bool;\n</code></pre> Whether a offset exists See offsetExists</p> <p><pre><code>public function offsetGet( mixed $element );\n</code></pre> Offset to retrieve See offsetGet</p> <p><pre><code>public function offsetSet( mixed $element, mixed $value ): void;\n</code></pre> Offset to set See offsetSet</p> <p><pre><code>public function offsetUnset( mixed $element ): void;\n</code></pre> Offset to unset See offsetUnset</p> <p><pre><code>public function remove( string $element ): void;\n</code></pre> Delete the element from the collection</p> <p><pre><code>public function serialize(): string;\n</code></pre> String representation of object See serialize</p> <p><pre><code>public function set( string $element, mixed $value ): void;\n</code></pre> Set an element in the collection</p> <p><pre><code>public function toArray(): array;\n</code></pre> Returns the object in an array format</p> <p><pre><code>public function toJson( int $options = int ): string;\n</code></pre> Returns the object in a JSON format</p> <p>The default string uses the following options for json_encode</p> <p><code>JSON_HEX_TAG</code>, <code>JSON_HEX_APOS</code>, <code>JSON_HEX_AMP</code>, <code>JSON_HEX_QUOT</code>, <code>JSON_UNESCAPED_SLASHES</code></p> <p>See rfc4627</p> <p><pre><code>public function unserialize( mixed $serialized ): void;\n</code></pre> Constructs the object See unserialize</p> <p><pre><code>protected function setData( string $element, mixed $value ): void;\n</code></pre> Internal method to set data</p>"},{"location":"api/phalcon_collection/#collectioncollectioninterface","title":"Collection\\CollectionInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Collection</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Collection\\CollectionInterface</p> <p>Interface for Phalcon\\Collection class</p>"},{"location":"api/phalcon_collection/#methods_1","title":"Methods","text":"<pre><code>public function __get( string $element ): mixed;\n</code></pre> <pre><code>public function __isset( string $element ): bool;\n</code></pre> <pre><code>public function __set( string $element, mixed $value ): void;\n</code></pre> <pre><code>public function __unset( string $element ): void;\n</code></pre> <pre><code>public function clear(): void;\n</code></pre> <pre><code>public function get( string $element, mixed $defaultValue = null, string $cast = null ): mixed;\n</code></pre> <pre><code>public function getKeys( bool $insensitive = bool ): array;\n</code></pre> <pre><code>public function getValues(): array;\n</code></pre> <pre><code>public function has( string $element ): bool;\n</code></pre> <pre><code>public function init( array $data = [] ): void;\n</code></pre> <pre><code>public function remove( string $element ): void;\n</code></pre> <pre><code>public function set( string $element, mixed $value ): void;\n</code></pre> <pre><code>public function toArray(): array;\n</code></pre> <pre><code>public function toJson( int $options = int ): string;\n</code></pre>"},{"location":"api/phalcon_collection/#collectionexception","title":"Collection\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Collection</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Throwable</code></li> </ul> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions for the Collection object</p>"},{"location":"api/phalcon_collection/#collectionreadonly","title":"Collection\\ReadOnly","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Collection</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Collection</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Collection</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>A read only Collection object</p>"},{"location":"api/phalcon_collection/#methods_2","title":"Methods","text":"<p><pre><code>public function remove( string $element ): void;\n</code></pre> Delete the element from the collection</p> <p><pre><code>public function set( string $element, mixed $value ): void;\n</code></pre> Set an element in the collection</p>"},{"location":"api/phalcon_config/","title":"Phalcon config","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_config/#configconfig","title":"Config\\Config","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Config</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Collection</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Collection</code></p> </li> <li> <p>Implements</p> <ul> <li><code>ConfigInterface</code></li> </ul> </li> </ul> <p><code>Phalcon\\Config</code> is designed to simplify the access to, and the use of, configuration data within applications. It provides a nested object property based user interface for accessing this configuration data within application code.</p> <pre><code>$config = new \\Phalcon\\Config(\n    [\n        \"database\" =&gt; [\n            \"adapter\"  =&gt; \"Mysql\",\n            \"host\"     =&gt; \"localhost\",\n            \"username\" =&gt; \"scott\",\n            \"password\" =&gt; \"cheetah\",\n            \"dbname\"   =&gt; \"test_db\",\n        ],\n        \"phalcon\" =&gt; [\n            \"controllersDir\" =&gt; \"../app/controllers/\",\n            \"modelsDir\"      =&gt; \"../app/models/\",\n            \"viewsDir\"       =&gt; \"../app/views/\",\n        ],\n    ]\n);\n</code></pre>"},{"location":"api/phalcon_config/#constants","title":"Constants","text":"<pre><code>const DEFAULT_PATH_DELIMITER = .;\n</code></pre>"},{"location":"api/phalcon_config/#properties","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $pathDelimiter;\n</code></pre>"},{"location":"api/phalcon_config/#methods","title":"Methods","text":"<p><pre><code>public function getPathDelimiter(): string;\n</code></pre> Gets the default path delimiter</p> <p><pre><code>public function merge( mixed $toMerge ): ConfigInterface;\n</code></pre> Merges a configuration into the current one</p> <pre><code>$appConfig = new \\Phalcon\\Config(\n    [\n        \"database\" =&gt; [\n            \"host\" =&gt; \"localhost\",\n        ],\n    ]\n);\n\n$globalConfig-&gt;merge($appConfig);\n</code></pre> <p><pre><code>public function path( string $path, mixed $defaultValue = null, mixed $delimiter = null ): mixed | null;\n</code></pre> Returns a value from current config using a dot separated path.</p> <pre><code>echo $config-&gt;path(\"unknown.path\", \"default\", \".\");\n</code></pre> <p><pre><code>public function setPathDelimiter( string $delimiter = null ): ConfigInterface;\n</code></pre> Sets the default path delimiter</p> <p><pre><code>public function toArray(): array;\n</code></pre> Converts recursively the object to an array</p> <pre><code>print_r(\n    $config-&gt;toArray()\n);\n</code></pre> <p><pre><code>final protected function internalMerge( array $source, array $target ): array;\n</code></pre> Performs a merge recursively</p> <p><pre><code>protected function setData( mixed $element, mixed $value ): void;\n</code></pre> Sets the collection data</p>"},{"location":"api/phalcon_config/#configadaptergrouped","title":"Config\\Adapter\\Grouped","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Config\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Config</code></li> <li><code>Phalcon\\Config\\ConfigFactory</code></li> <li><code>Phalcon\\Config\\ConfigInterface</code></li> <li><code>Phalcon\\Config\\Exception</code></li> <li><code>Phalcon\\Factory\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Config</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Reads multiple files (or arrays) and merges them all together.</p> <p>See <code>Phalcon\\Config\\Factory::load</code> To load Config Adapter class using 'adapter' option.</p> <pre><code>use Phalcon\\Config\\Adapter\\Grouped;\n\n$config = new Grouped(\n    [\n        \"path/to/config.php\",\n        \"path/to/config.dist.php\",\n    ]\n);\n</code></pre> <pre><code>use Phalcon\\Config\\Adapter\\Grouped;\n\n$config = new Grouped(\n    [\n        \"path/to/config.json\",\n        \"path/to/config.dist.json\",\n    ],\n    \"json\"\n);\n</code></pre> <pre><code>use Phalcon\\Config\\Adapter\\Grouped;\n\n$config = new Grouped(\n    [\n        [\n            \"filePath\" =&gt; \"path/to/config.php\",\n            \"adapter\"  =&gt; \"php\",\n        ],\n        [\n            \"filePath\" =&gt; \"path/to/config.json\",\n            \"adapter\"  =&gt; \"json\",\n        ],\n        [\n            \"adapter\"  =&gt; \"array\",\n            \"config\"   =&gt; [\n                \"property\" =&gt; \"value\",\n            ],\n        ],\n    ],\n);\n</code></pre>"},{"location":"api/phalcon_config/#methods_1","title":"Methods","text":"<p><pre><code>public function __construct( array $arrayConfig, string $defaultAdapter = string );\n</code></pre> Phalcon\\Config\\Adapter\\Grouped constructor</p>"},{"location":"api/phalcon_config/#configadapterini","title":"Config\\Adapter\\Ini","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Config\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Config</code></li> <li><code>Phalcon\\Config\\Exception</code></li> <li><code>Phalcon\\Traits\\PhpFileTrait</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Config</code></p> </li> <li> <p>Implements Reads ini files and converts them to Phalcon\\Config objects.</p> </li> </ul> <p>Given the next configuration file:</p> <pre><code>[database]\nadapter = Mysql\nhost = localhost\nusername = scott\npassword = cheetah\ndbname = test_db\n\n[phalcon]\ncontrollersDir = \"../app/controllers/\"\nmodelsDir = \"../app/models/\"\nviewsDir = \"../app/views/\"\n</code></pre> <p>You can read it as follows:</p> <pre><code>use Phalcon\\Config\\Adapter\\Ini;\n\n$config = new Ini(\"path/config.ini\");\n\necho $config-&gt;phalcon-&gt;controllersDir;\necho $config-&gt;database-&gt;username;\n</code></pre> <p>PHP constants may also be parsed in the ini file, so if you define a constant as an ini value before calling the constructor, the constant's value will be integrated into the results. To use it this way you must specify the optional second parameter as <code>INI_SCANNER_NORMAL</code> when calling the constructor:</p> <pre><code>$config = new \\Phalcon\\Config\\Adapter\\Ini(\n    \"path/config-with-constants.ini\",\n    INI_SCANNER_NORMAL\n);\n</code></pre>"},{"location":"api/phalcon_config/#methods_2","title":"Methods","text":"<p><pre><code>public function __construct( string $filePath, mixed $mode = null );\n</code></pre> Ini constructor.</p> <p><pre><code>protected function cast( mixed $ini ): bool | null | double | int | string;\n</code></pre> We have to cast values manually because parse_ini_file() has a poor implementation.</p> <p><pre><code>protected function parseIniString( string $path, mixed $value ): array;\n</code></pre> Build multidimensional array from string</p>"},{"location":"api/phalcon_config/#configadapterjson","title":"Config\\Adapter\\Json","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Config\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Config</code></li> <li><code>Phalcon\\Helper\\Json</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Config</code></p> </li> <li> <p>Implements Reads JSON files and converts them to Phalcon\\Config objects.</p> </li> </ul> <p>Given the following configuration file:</p> <pre><code>{\"phalcon\":{\"baseuri\":\"\\/phalcon\\/\"},\"models\":{\"metadata\":\"memory\"}}\n</code></pre> <p>You can read it as follows:</p> <pre><code>use Phalcon\\Config\\Adapter\\Json;\n\n$config = new Json(\"path/config.json\");\n\necho $config-&gt;phalcon-&gt;baseuri;\necho $config-&gt;models-&gt;metadata;\n</code></pre>"},{"location":"api/phalcon_config/#methods_3","title":"Methods","text":"<p><pre><code>public function __construct( string $filePath );\n</code></pre> Phalcon\\Config\\Adapter\\Json constructor</p>"},{"location":"api/phalcon_config/#configadapterphp","title":"Config\\Adapter\\Php","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Config\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Config</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Config</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Reads php files and converts them to Phalcon\\Config objects.</p> <p>Given the next configuration file:</p> <pre><code>&lt;?php\n\nreturn [\n    \"database\" =&gt; [\n        \"adapter\"  =&gt; \"Mysql\",\n        \"host\"     =&gt; \"localhost\",\n        \"username\" =&gt; \"scott\",\n        \"password\" =&gt; \"cheetah\",\n        \"dbname\"   =&gt; \"test_db\",\n    ],\n    \"phalcon\" =&gt; [\n        \"controllersDir\" =&gt; \"../app/controllers/\",\n        \"modelsDir\"      =&gt; \"../app/models/\",\n        \"viewsDir\"       =&gt; \"../app/views/\",\n    ],\n];\n</code></pre> <p>You can read it as follows:</p> <pre><code>use Phalcon\\Config\\Adapter\\Php;\n\n$config = new Php(\"path/config.php\");\n\necho $config-&gt;phalcon-&gt;controllersDir;\necho $config-&gt;database-&gt;username;\n</code></pre>"},{"location":"api/phalcon_config/#methods_4","title":"Methods","text":"<p><pre><code>public function __construct( string $filePath );\n</code></pre> Phalcon\\Config\\Adapter\\Php constructor</p>"},{"location":"api/phalcon_config/#configadapteryaml","title":"Config\\Adapter\\Yaml","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Config\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Config</code></li> <li><code>Phalcon\\Config\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Config</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Reads YAML files and converts them to Phalcon\\Config objects.</p> <p>Given the following configuration file:</p> <pre><code>phalcon:\n  baseuri:        /phalcon/\n  controllersDir: !approot  /app/controllers/\nmodels:\n  metadata: memory\n</code></pre> <p>You can read it as follows:</p> <pre><code>define(\n    \"APPROOT\",\n    dirname(__DIR__)\n);\n\nuse Phalcon\\Config\\Adapter\\Yaml;\n\n$config = new Yaml(\n    \"path/config.yaml\",\n    [\n        \"!approot\" =&gt; function($value) {\n            return APPROOT . $value;\n        },\n    ]\n);\n\necho $config-&gt;phalcon-&gt;controllersDir;\necho $config-&gt;phalcon-&gt;baseuri;\necho $config-&gt;models-&gt;metadata;\n</code></pre>"},{"location":"api/phalcon_config/#methods_5","title":"Methods","text":"<p><pre><code>public function __construct( string $filePath, array $callbacks = null );\n</code></pre> Phalcon\\Config\\Adapter\\Yaml constructor</p>"},{"location":"api/phalcon_config/#configconfigfactory","title":"Config\\ConfigFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Config</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Config</code></li> <li><code>Phalcon\\Config\\ConfigInterface</code></li> <li><code>Phalcon\\Factory\\AbstractFactory</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFactory</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Loads Config Adapter class using 'adapter' option, if no extension is provided it will be added to filePath</p> <pre><code>use Phalcon\\Config\\ConfigFactory;\n\n$options = [\n    \"filePath\" =&gt; \"path/config\",\n    \"adapter\"  =&gt; \"php\",\n];\n\n$config = (new ConfigFactory())-&gt;load($options);\n</code></pre>"},{"location":"api/phalcon_config/#methods_6","title":"Methods","text":"<p><pre><code>public function __construct( array $services = [] );\n</code></pre> ConfigFactory constructor.</p> <p><pre><code>public function load( mixed $config ): ConfigInterface;\n</code></pre> Load a config to create a new instance</p> <p><pre><code>public function newInstance( string $name, string $fileName, mixed $params = null ): ConfigInterface;\n</code></pre> Returns a new Config instance</p> <p><pre><code>protected function getAdapters(): array;\n</code></pre> Returns the adapters for the factory</p>"},{"location":"api/phalcon_config/#configconfiginterface","title":"Config\\ConfigInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Config</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Collection\\CollectionInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>CollectionInterface</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Config\\ConfigInterface</p> <p>Interface for Phalcon\\Config class</p>"},{"location":"api/phalcon_config/#methods_7","title":"Methods","text":"<pre><code>public function getPathDelimiter(): string;\n</code></pre> <pre><code>public function merge( mixed $toMerge ): ConfigInterface;\n</code></pre> <pre><code>public function path( string $path, mixed $defaultValue = null, mixed $delimiter = null ): mixed | null;\n</code></pre> <pre><code>public function setPathDelimiter( string $delimiter = null ): ConfigInterface;\n</code></pre>"},{"location":"api/phalcon_config/#configexception","title":"Config\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Config</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Config will use this class</p>"},{"location":"api/phalcon_container/","title":"Phalcon container","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_container/#container","title":"Container","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Psr\\Container\\ContainerInterface</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>ContainerInterface</code></li> </ul> </li> </ul> <p>PSR-11 Wrapper for <code>Phalcon\\Di</code></p>"},{"location":"api/phalcon_container/#properties","title":"Properties","text":"<pre><code>/**\n * @var DiInterface\n */\nprotected $container;\n</code></pre>"},{"location":"api/phalcon_container/#methods","title":"Methods","text":"<p><pre><code>public function __construct( DiInterface $container );\n</code></pre> Phalcon\\Container constructor</p> <p><pre><code>public function get( mixed $name ): mixed;\n</code></pre> Return the service</p> <p><pre><code>public function has( mixed $name ): bool;\n</code></pre> Whether a service exists or not in the container</p>"},{"location":"api/phalcon_crypt/","title":"Phalcon crypt","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_crypt/#crypt","title":"Crypt","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Crypt\\CryptInterface</code></li> <li><code>Phalcon\\Crypt\\Exception\\Exception</code></li> <li><code>Phalcon\\Crypt\\Exception\\Mismatch</code></li> <li><code>Phalcon\\Crypt\\PadFactory</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>CryptInterface</code></li> </ul> </li> </ul> <p>Provides encryption capabilities to Phalcon applications.</p> <pre><code>use Phalcon\\Crypt;\n\n$crypt = new Crypt();\n\n$crypt-&gt;setCipher('aes-256-ctr');\n\n$key  = \"T4\\xb1\\x8d\\xa9\\x98\\x05\\\\\\x8c\\xbe\\x1d\\x07&amp;[\\x99\\x18\\xa4~Lc1\\xbeW\\xb3\";\n$text = \"The message to be encrypted\";\n\n$encrypted = $crypt-&gt;encrypt($text, $key);\n\necho $crypt-&gt;decrypt($encrypted, $key);\n</code></pre>"},{"location":"api/phalcon_crypt/#constants","title":"Constants","text":"<pre><code>const PADDING_ANSI_X_923 = 1;\nconst PADDING_DEFAULT = 0;\nconst PADDING_ISO_10126 = 3;\nconst PADDING_ISO_IEC_7816_4 = 4;\nconst PADDING_PKCS7 = 2;\nconst PADDING_SPACE = 6;\nconst PADDING_ZERO = 5;\n</code></pre>"},{"location":"api/phalcon_crypt/#properties","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $authTag;\n\n/**\n * @var string\n */\nprotected $authData = '';\n\n/**\n * @var int\n */\nprotected $authTagLength = 16;\n\n/**\n * @var string\n */\nprotected $key = ;\n\n/**\n * @var int\n */\nprotected $padding = 0;\n\n/**\n * @var string\n */\nprotected $cipher = 'aes-256-cfb';\n\n/**\n * Available cipher methods.\n * @var array\n */\nprotected $availableCiphers;\n\n/**\n * The cipher iv length.\n * @var int\n */\nprotected $ivLength = 16;\n\n/**\n * The name of hashing algorithm.\n * @var string\n */\nprotected $hashAlgo = 'sha256';\n\n/**\n * Whether calculating message digest enabled or not.\n *\n * @var bool\n */\nprotected $useSigning = true;\n</code></pre>"},{"location":"api/phalcon_crypt/#methods","title":"Methods","text":"<p><pre><code>public function __construct( string $cipher = string, bool $useSigning = bool );\n</code></pre> Phalcon\\Crypt constructor.</p> <p><pre><code>public function decrypt( string $text, string $key = null ): string;\n</code></pre> Decrypts an encrypted text.</p> <pre><code>$encrypted = $crypt-&gt;decrypt(\n    $encrypted,\n    \"T4\\xb1\\x8d\\xa9\\x98\\x05\\\\\\x8c\\xbe\\x1d\\x07&amp;[\\x99\\x18\\xa4~Lc1\\xbeW\\xb3\"\n);\n</code></pre> <p><pre><code>public function decryptBase64( string $text, mixed $key = null, bool $safe = bool ): string;\n</code></pre> Decrypt a text that is coded as a base64 string.</p> <p><pre><code>public function encrypt( string $text, string $key = null ): string;\n</code></pre> Encrypts a text.</p> <pre><code>$encrypted = $crypt-&gt;encrypt(\n    \"Top secret\",\n    \"T4\\xb1\\x8d\\xa9\\x98\\x05\\\\\\x8c\\xbe\\x1d\\x07&amp;[\\x99\\x18\\xa4~Lc1\\xbeW\\xb3\"\n);\n</code></pre> <p><pre><code>public function encryptBase64( string $text, mixed $key = null, bool $safe = bool ): string;\n</code></pre> Encrypts a text returning the result as a base64 string.</p> <p><pre><code>public function getAuthData(): string;\n</code></pre> Returns the auth data</p> <p><pre><code>public function getAuthTag(): string;\n</code></pre> Returns the auth tag</p> <p><pre><code>public function getAuthTagLength(): int;\n</code></pre> Returns the auth tag length</p> <p><pre><code>public function getAvailableCiphers(): array;\n</code></pre> Returns a list of available ciphers.</p> <p><pre><code>public function getAvailableHashAlgos(): array;\n</code></pre> Return a list of registered hashing algorithms suitable for hash_hmac.</p> <p><pre><code>public function getCipher(): string;\n</code></pre> Returns the current cipher</p> <p><pre><code>public function getHashAlgo(): string;\n</code></pre> Get the name of hashing algorithm.</p> <p><pre><code>public function getKey(): string;\n</code></pre> Returns the encryption key</p> <pre><code>public function setAuthData( string $data ): CryptInterface;\n</code></pre> <pre><code>public function setAuthTag( string $tag ): CryptInterface;\n</code></pre> <pre><code>public function setAuthTagLength( int $length ): CryptInterface;\n</code></pre> <p><pre><code>public function setCipher( string $cipher ): CryptInterface;\n</code></pre> Sets the cipher algorithm for data encryption and decryption.</p> <p>The `aes-256-gcm' is the preferable cipher, but it is not usable until the openssl library is upgraded, which is available in PHP 7.1.</p> <p>The `aes-256-ctr' is arguably the best choice for cipher algorithm for current openssl library version.</p> <p><pre><code>public function setHashAlgo( string $hashAlgo ): CryptInterface;\n</code></pre> Set the name of hashing algorithm.</p> <p><pre><code>public function setKey( string $key ): CryptInterface;\n</code></pre> Sets the encryption key.</p> <p>The `$key' should have been previously generated in a cryptographically safe way.</p> <p>Bad key: \"le password\"</p> <p>Better (but still unsafe): \"#1dj8$=dp?.ak//j1V$~%*0X\"</p> <p>Good key: \"T4\\xb1\\x8d\\xa9\\x98\\x05\\\\x8c\\xbe\\x1d\\x07&amp;[\\x99\\x18\\xa4~Lc1\\xbeW\\xb3\"</p> <p><pre><code>public function setPadding( int $scheme ): CryptInterface;\n</code></pre> Changes the padding scheme used.</p> <p><pre><code>public function useSigning( bool $useSigning ): CryptInterface;\n</code></pre> Sets if the calculating message digest must used.</p> <p><pre><code>protected function assertCipherIsAvailable( string $cipher ): void;\n</code></pre> Assert the cipher is available.</p> <p><pre><code>protected function assertHashAlgorithmAvailable( string $hashAlgo ): void;\n</code></pre> Assert the hash algorithm is available.</p> <p><pre><code>protected function cryptPadText( string $text, string $mode, int $blockSize, int $paddingType ): string;\n</code></pre> Pads texts before encryption. See cryptopad</p> <p><pre><code>protected function cryptUnpadText( string $text, string $mode, int $blockSize, int $paddingType );\n</code></pre> Removes a padding from a text.</p> <p>If the function detects that the text was not padded, it will return it unmodified.</p> <p><pre><code>protected function getIvLength( string $cipher ): int;\n</code></pre> Initialize available cipher algorithms.</p> <p><pre><code>protected function initializeAvailableCiphers(): void;\n</code></pre> Initialize available cipher algorithms.</p>"},{"location":"api/phalcon_crypt/#cryptcryptinterface","title":"Crypt\\CryptInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Crypt</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Crypt</p>"},{"location":"api/phalcon_crypt/#methods_1","title":"Methods","text":"<p><pre><code>public function decrypt( string $text, string $key = null ): string;\n</code></pre> Decrypts a text</p> <p><pre><code>public function decryptBase64( string $text, mixed $key = null ): string;\n</code></pre> Decrypt a text that is coded as a base64 string</p> <p><pre><code>public function encrypt( string $text, string $key = null ): string;\n</code></pre> Encrypts a text</p> <p><pre><code>public function encryptBase64( string $text, mixed $key = null ): string;\n</code></pre> Encrypts a text returning the result as a base64 string</p> <p><pre><code>public function getAuthData(): string;\n</code></pre> Returns authentication data</p> <p><pre><code>public function getAuthTag(): string;\n</code></pre> Returns the authentication tag</p> <p><pre><code>public function getAuthTagLength(): int;\n</code></pre> Returns the authentication tag length</p> <p><pre><code>public function getAvailableCiphers(): array;\n</code></pre> Returns a list of available cyphers</p> <p><pre><code>public function getCipher(): string;\n</code></pre> Returns the current cipher</p> <p><pre><code>public function getKey(): string;\n</code></pre> Returns the encryption key</p> <p><pre><code>public function setAuthData( string $data ): CryptInterface;\n</code></pre> Sets authentication data</p> <p><pre><code>public function setAuthTag( string $tag ): CryptInterface;\n</code></pre> Sets the authentication tag</p> <p><pre><code>public function setAuthTagLength( int $length ): CryptInterface;\n</code></pre> Sets the authentication tag length</p> <p><pre><code>public function setCipher( string $cipher ): CryptInterface;\n</code></pre> Sets the cipher algorithm</p> <p><pre><code>public function setKey( string $key ): CryptInterface;\n</code></pre> Sets the encryption key</p> <p><pre><code>public function setPadding( int $scheme ): CryptInterface;\n</code></pre> Changes the padding scheme used.</p>"},{"location":"api/phalcon_crypt/#cryptexceptionexception","title":"Crypt\\Exception\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Crypt\\Exception</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Crypt use this class</p>"},{"location":"api/phalcon_crypt/#cryptexceptionmismatch","title":"Crypt\\Exception\\Mismatch","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Crypt\\Exception</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Crypt will use this class.</p>"},{"location":"api/phalcon_datamapper/","title":"Phalcon datamapper","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_datamapper/#datamapperpdoconnection","title":"DataMapper\\Pdo\\Connection","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>InvalidArgumentException</code></li> <li><code>Phalcon\\DataMapper\\Pdo\\Connection\\AbstractConnection</code></li> <li><code>Phalcon\\DataMapper\\Pdo\\Profiler\\Profiler</code></li> <li><code>Phalcon\\DataMapper\\Pdo\\Profiler\\ProfilerInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractConnection</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Provides array quoting, profiling, a new <code>perform()</code> method, new <code>fetch*()</code> methods</p>"},{"location":"api/phalcon_datamapper/#properties","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $arguments;\n</code></pre>"},{"location":"api/phalcon_datamapper/#methods","title":"Methods","text":"<p><pre><code>public function __construct( string $dsn, string $username = null, string $password = null, array $options = [], array $queries = [], ProfilerInterface $profiler = null );\n</code></pre> Constructor.</p> <p>This overrides the parent so that it can take connection attributes as a constructor parameter, and set them after connection.</p> <p><pre><code>public function __debugInfo(): array;\n</code></pre> The purpose of this method is to hide sensitive data from stack traces.</p> <p><pre><code>public function connect(): void;\n</code></pre> Connects to the database.</p> <p><pre><code>public function disconnect(): void;\n</code></pre> Disconnects from the database.</p>"},{"location":"api/phalcon_datamapper/#datamapperpdoconnectionabstractconnection","title":"DataMapper\\Pdo\\Connection\\AbstractConnection","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Connection</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>BadMethodCallException</code></li> <li><code>Phalcon\\DataMapper\\Pdo\\Exception\\CannotBindValue</code></li> <li><code>Phalcon\\DataMapper\\Pdo\\Profiler\\ProfilerInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>ConnectionInterface</code></li> </ul> </li> </ul> <p>Provides array quoting, profiling, a new <code>perform()</code> method, new <code>fetch*()</code> methods</p>"},{"location":"api/phalcon_datamapper/#properties_1","title":"Properties","text":"<pre><code>/**\n * @var \\PDO\n */\nprotected $pdo;\n\n/**\n * @var ProfilerInterface\n */\nprotected $profiler;\n</code></pre>"},{"location":"api/phalcon_datamapper/#methods_1","title":"Methods","text":"<p><pre><code>public function __call( mixed $name, array $arguments );\n</code></pre> Proxies to PDO methods created for specific drivers; in particular, <code>sqlite</code> and <code>pgsql</code>.</p> <p><pre><code>public function beginTransaction(): bool;\n</code></pre> Begins a transaction. If the profiler is enabled, the operation will be recorded.</p> <p><pre><code>public function commit(): bool;\n</code></pre> Commits the existing transaction. If the profiler is enabled, the operation will be recorded.</p> <p><pre><code>abstract public function connect(): void;\n</code></pre> Connects to the database.</p> <p><pre><code>abstract public function disconnect(): void;\n</code></pre> Disconnects from the database.</p> <p><pre><code>public function errorCode(): string | null;\n</code></pre> Gets the most recent error code.</p> <p><pre><code>public function errorInfo(): array;\n</code></pre> Gets the most recent error info.</p> <p><pre><code>public function exec( string $statement ): int;\n</code></pre> Executes an SQL statement and returns the number of affected rows. If the profiler is enabled, the operation will be recorded.</p> <p><pre><code>public function fetchAffected( string $statement, array $values = [] ): int;\n</code></pre> Performs a statement and returns the number of affected rows.</p> <p><pre><code>public function fetchAll( string $statement, array $values = [] ): array;\n</code></pre> Fetches a sequential array of rows from the database; the rows are returned as associative arrays.</p> <p><pre><code>public function fetchAssoc( string $statement, array $values = [] ): array;\n</code></pre> Fetches an associative array of rows from the database; the rows are returned as associative arrays, and the array of rows is keyed on the first column of each row.</p> <p>If multiple rows have the same first column value, the last row with that value will overwrite earlier rows. This method is more resource intensive and should be avoided if possible.</p> <p><pre><code>public function fetchColumn( string $statement, array $values = [], int $column = int ): array;\n</code></pre> Fetches a column of rows as a sequential array (default first one).</p> <p><pre><code>public function fetchGroup( string $statement, array $values = [], int $flags = static-constant-access ): array;\n</code></pre> Fetches multiple from the database as an associative array. The first column will be the index key. The default flags are PDO::FETCH_ASSOC | PDO::FETCH_GROUP</p> <p><pre><code>public function fetchObject( string $statement, array $values = [], string $className = string, array $arguments = [] ): object;\n</code></pre> Fetches one row from the database as an object where the column values are mapped to object properties.</p> <p>Since PDO injects property values before invoking the constructor, any initializations for defaults that you potentially have in your object's constructor, will override the values that have been injected by <code>fetchObject</code>. The default object returned is <code>\\stdClass</code></p> <p><pre><code>public function fetchObjects( string $statement, array $values = [], string $className = string, array $arguments = [] ): array;\n</code></pre> Fetches a sequential array of rows from the database; the rows are returned as objects where the column values are mapped to object properties.</p> <p>Since PDO injects property values before invoking the constructor, any initializations for defaults that you potentially have in your object's constructor, will override the values that have been injected by <code>fetchObject</code>. The default object returned is <code>\\stdClass</code></p> <p><pre><code>public function fetchOne( string $statement, array $values = [] ): array;\n</code></pre> Fetches one row from the database as an associative array.</p> <p><pre><code>public function fetchPairs( string $statement, array $values = [] ): array;\n</code></pre> Fetches an associative array of rows as key-value pairs (first column is the key, second column is the value).</p> <p><pre><code>public function fetchValue( string $statement, array $values = [] );\n</code></pre> Fetches the very first value (i.e., first column of the first row).</p> <p><pre><code>public function getAdapter(): \\PDO;\n</code></pre> Return the inner PDO (if any)</p> <p><pre><code>public function getAttribute( int $attribute ): mixed;\n</code></pre> Retrieve a database connection attribute</p> <p><pre><code>public static function getAvailableDrivers(): array;\n</code></pre> Return an array of available PDO drivers (empty array if none available)</p> <p><pre><code>public function getDriverName(): string;\n</code></pre> Return the driver name</p> <p><pre><code>public function getProfiler(): ProfilerInterface;\n</code></pre> Returns the Profiler instance.</p> <p><pre><code>public function getQuoteNames( string $driver = string ): array;\n</code></pre> Gets the quote parameters based on the driver</p> <p><pre><code>public function inTransaction(): bool;\n</code></pre> Is a transaction currently active? If the profiler is enabled, the operation will be recorded. If the profiler is enabled, the operation will be recorded.</p> <p><pre><code>public function isConnected(): bool;\n</code></pre> Is the PDO connection active?</p> <p><pre><code>public function lastInsertId( string $name = null ): string;\n</code></pre> Returns the last inserted autoincrement sequence value. If the profiler is enabled, the operation will be recorded.</p> <p><pre><code>public function perform( string $statement, array $values = [] ): \\PDOStatement;\n</code></pre> Performs a query with bound values and returns the resulting PDOStatement; array values will be passed through <code>quote()</code> and their respective placeholders will be replaced in the query string. If the profiler is enabled, the operation will be recorded.</p> <p><pre><code>public function prepare( string $statement, array $options = [] ): \\PDOStatement | bool;\n</code></pre> Prepares an SQL statement for execution.</p> <p><pre><code>public function query( string $statement ): \\PDOStatement | bool;\n</code></pre> Queries the database and returns a PDOStatement. If the profiler is enabled, the operation will be recorded.</p> <p><pre><code>public function quote( mixed $value, int $type = static-constant-access ): string;\n</code></pre> Quotes a value for use in an SQL statement. This differs from <code>PDO::quote()</code> in that it will convert an array into a string of comma-separated quoted values. The default type is <code>PDO::PARAM_STR</code></p> <p><pre><code>public function rollBack(): bool;\n</code></pre> Rolls back the current transaction, and restores autocommit mode. If the profiler is enabled, the operation will be recorded.</p> <p><pre><code>public function setAttribute( int $attribute, mixed $value ): bool;\n</code></pre> Set a database connection attribute</p> <p><pre><code>public function setProfiler( ProfilerInterface $profiler );\n</code></pre> Sets the Profiler instance.</p> <p><pre><code>protected function fetchData( string $method, array $arguments, string $statement, array $values = [] ): array;\n</code></pre> Helper method to get data from PDO based on the method passed</p> <p><pre><code>protected function performBind( \\PDOStatement $statement, mixed $name, mixed $arguments ): void;\n</code></pre> Bind a value using the proper PDO::PARAM_* type.</p>"},{"location":"api/phalcon_datamapper/#datamapperpdoconnectionconnectioninterface","title":"DataMapper\\Pdo\\Connection\\ConnectionInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Connection</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Exception\\CannotBindValue</code></li> <li><code>Phalcon\\DataMapper\\Pdo\\Parser\\ParserInterface</code></li> <li><code>Phalcon\\DataMapper\\Pdo\\Profiler\\ProfilerInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>PdoInterface</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Provides array quoting, profiling, a new <code>perform()</code> method, new <code>fetch*()</code> methods</p>"},{"location":"api/phalcon_datamapper/#methods_2","title":"Methods","text":"<p><pre><code>public function connect(): void;\n</code></pre> Connects to the database.</p> <p><pre><code>public function disconnect(): void;\n</code></pre> Disconnects from the database.</p> <p><pre><code>public function fetchAffected( string $statement, array $values = [] ): int;\n</code></pre> Performs a statement and returns the number of affected rows.</p> <p><pre><code>public function fetchAll( string $statement, array $values = [] ): array;\n</code></pre> Fetches a sequential array of rows from the database; the rows are returned as associative arrays.</p> <p><pre><code>public function fetchAssoc( string $statement, array $values = [] ): array;\n</code></pre> Fetches an associative array of rows from the database; the rows are returned as associative arrays, and the array of rows is keyed on the first column of each row.</p> <p>If multiple rows have the same first column value, the last row with that value will overwrite earlier rows. This method is more resource intensive and should be avoided if possible.</p> <p><pre><code>public function fetchColumn( string $statement, array $values = [], int $column = int ): array;\n</code></pre> Fetches a column of rows as a sequential array (default first one).</p> <p><pre><code>public function fetchGroup( string $statement, array $values = [], int $flags = static-constant-access ): array;\n</code></pre> Fetches multiple from the database as an associative array. The first column will be the index key. The default flags are PDO::FETCH_ASSOC | PDO::FETCH_GROUP</p> <p><pre><code>public function fetchObject( string $statement, array $values = [], string $className = string, array $arguments = [] ): object;\n</code></pre> Fetches one row from the database as an object where the column values are mapped to object properties.</p> <p>Since PDO injects property values before invoking the constructor, any initializations for defaults that you potentially have in your object's constructor, will override the values that have been injected by <code>fetchObject</code>. The default object returned is <code>\\stdClass</code></p> <p><pre><code>public function fetchObjects( string $statement, array $values = [], string $className = string, array $arguments = [] ): array;\n</code></pre> Fetches a sequential array of rows from the database; the rows are returned as objects where the column values are mapped to object properties.</p> <p>Since PDO injects property values before invoking the constructor, any initializations for defaults that you potentially have in your object's constructor, will override the values that have been injected by <code>fetchObject</code>. The default object returned is <code>\\stdClass</code></p> <p><pre><code>public function fetchOne( string $statement, array $values = [] ): array;\n</code></pre> Fetches one row from the database as an associative array.</p> <p><pre><code>public function fetchPairs( string $statement, array $values = [] ): array;\n</code></pre> Fetches an associative array of rows as key-value pairs (first column is the key, second column is the value).</p> <p><pre><code>public function fetchValue( string $statement, array $values = [] ): mixed;\n</code></pre> Fetches the very first value (i.e., first column of the first row).</p> <p><pre><code>public function getAdapter(): \\PDO;\n</code></pre> Return the inner PDO (if any)</p> <p><pre><code>public function getProfiler(): ProfilerInterface;\n</code></pre> Returns the Profiler instance.</p> <p><pre><code>public function isConnected(): bool;\n</code></pre> Is the PDO connection active?</p> <p><pre><code>public function perform( string $statement, array $values = [] ): \\PDOStatement;\n</code></pre> Performs a query with bound values and returns the resulting PDOStatement; array values will be passed through <code>quote()</code> and their respective placeholders will be replaced in the query string. If the profiler is enabled, the operation will be recorded.</p> <p><pre><code>public function setProfiler( ProfilerInterface $profiler );\n</code></pre> Sets the Profiler instance.</p>"},{"location":"api/phalcon_datamapper/#datamapperpdoconnectiondecorated","title":"DataMapper\\Pdo\\Connection\\Decorated","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Connection</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Exception\\CannotDisconnect</code></li> <li><code>Phalcon\\DataMapper\\Pdo\\Profiler\\Profiler</code></li> <li><code>Phalcon\\DataMapper\\Pdo\\Profiler\\ProfilerInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractConnection</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Decorates an existing PDO instance with the extended methods.</p>"},{"location":"api/phalcon_datamapper/#methods_3","title":"Methods","text":"<p><pre><code>public function __construct( \\PDO $pdo, ProfilerInterface $profiler = null );\n</code></pre> Constructor.</p> <p>This overrides the parent so that it can take an existing PDO instance and decorate it with the extended methods.</p> <p><pre><code>public function connect(): void;\n</code></pre> Connects to the database.</p> <p><pre><code>public function disconnect(): void;\n</code></pre> Disconnects from the database; disallowed with decorated PDO connections.</p> <p>@throws CannotDisconnect</p>"},{"location":"api/phalcon_datamapper/#datamapperpdoconnectionpdointerface","title":"DataMapper\\Pdo\\Connection\\PdoInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Connection</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>An interface to the native PDO object.</p>"},{"location":"api/phalcon_datamapper/#methods_4","title":"Methods","text":"<p><pre><code>public function beginTransaction(): bool;\n</code></pre> Begins a transaction. If the profiler is enabled, the operation will be recorded.</p> <p><pre><code>public function commit(): bool;\n</code></pre> Commits the existing transaction. If the profiler is enabled, the operation will be recorded.</p> <p><pre><code>public function errorCode(): null | string;\n</code></pre> Gets the most recent error code.</p> <p><pre><code>public function errorInfo(): array;\n</code></pre> Gets the most recent error info.</p> <p><pre><code>public function exec( string $statement ): int;\n</code></pre> Executes an SQL statement and returns the number of affected rows. If the profiler is enabled, the operation will be recorded.</p> <p><pre><code>public function getAttribute( int $attribute ): mixed;\n</code></pre> Retrieve a database connection attribute</p> <p><pre><code>public static function getAvailableDrivers(): array;\n</code></pre> Return an array of available PDO drivers (empty array if none available)</p> <p><pre><code>public function inTransaction(): bool;\n</code></pre> Is a transaction currently active? If the profiler is enabled, the operation will be recorded. If the profiler is enabled, the operation will be recorded.</p> <p><pre><code>public function lastInsertId( string $name = null ): string;\n</code></pre> Returns the last inserted autoincrement sequence value. If the profiler is enabled, the operation will be recorded.</p> <p><pre><code>public function prepare( string $statement, array $options = [] ): \\PDOStatement | bool;\n</code></pre> Prepares an SQL statement for execution.</p> <p><pre><code>public function query( string $statement ): \\PDOStatement | bool;\n</code></pre> Queries the database and returns a PDOStatement. If the profiler is enabled, the operation will be recorded.</p> <p><pre><code>public function quote( mixed $value, int $type = static-constant-access ): string;\n</code></pre> Quotes a value for use in an SQL statement. This differs from <code>PDO::quote()</code> in that it will convert an array into a string of comma-separated quoted values. The default type is <code>PDO::PARAM_STR</code></p> <p><pre><code>public function rollBack(): bool;\n</code></pre> Rolls back the current transaction, and restores autocommit mode. If the profiler is enabled, the operation will be recorded.</p> <p><pre><code>public function setAttribute( int $attribute, mixed $value ): bool;\n</code></pre> Set a database connection attribute</p>"},{"location":"api/phalcon_datamapper/#datamapperpdoconnectionlocator","title":"DataMapper\\Pdo\\ConnectionLocator","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Connection\\ConnectionInterface</code></li> <li><code>Phalcon\\DataMapper\\Pdo\\Exception\\ConnectionNotFound</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>ConnectionLocatorInterface</code></li> </ul> </li> </ul> <p>Manages Connection instances for default, read, and write connections.</p>"},{"location":"api/phalcon_datamapper/#properties_2","title":"Properties","text":"<pre><code>/**\n * A default Connection connection factory/instance.\n *\n * @var ConnectionInterface\n */\nprotected $master;\n\n/**\n * A registry of Connection \"read\" factories/instances.\n *\n * @var array\n */\nprotected $read;\n\n/**\n * A registry of Connection \"write\" factories/instances.\n *\n * @var array\n */\nprotected $write;\n\n/**\n * A collection of resolved instances\n *\n * @var array\n */\nprivate $instances;\n</code></pre>"},{"location":"api/phalcon_datamapper/#methods_5","title":"Methods","text":"<p><pre><code>public function __construct( ConnectionInterface $master, array $read = [], array $write = [] );\n</code></pre> Constructor.</p> <p><pre><code>public function getMaster(): ConnectionInterface;\n</code></pre> Returns the default connection object.</p> <p><pre><code>public function getRead( string $name = string ): ConnectionInterface;\n</code></pre> Returns a read connection by name; if no name is given, picks a random connection; if no read connections are present, returns the default connection.</p> <p><pre><code>public function getWrite( string $name = string ): ConnectionInterface;\n</code></pre> Returns a write connection by name; if no name is given, picks a random connection; if no write connections are present, returns the default connection.</p> <p><pre><code>public function setMaster( ConnectionInterface $callableObject ): ConnectionLocatorInterface;\n</code></pre> Sets the default connection factory.</p> <p><pre><code>public function setRead( string $name, callable $callableObject ): ConnectionLocatorInterface;\n</code></pre> Sets a read connection factory by name.</p> <p><pre><code>public function setWrite( string $name, callable $callableObject ): ConnectionLocatorInterface;\n</code></pre> Sets a write connection factory by name.</p> <p><pre><code>protected function getConnection( string $type, string $name = string ): ConnectionInterface;\n</code></pre> Returns a connection by name.</p>"},{"location":"api/phalcon_datamapper/#datamapperpdoconnectionlocatorinterface","title":"DataMapper\\Pdo\\ConnectionLocatorInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Connection\\ConnectionInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Locates PDO connections for default, read, and write databases.</p>"},{"location":"api/phalcon_datamapper/#methods_6","title":"Methods","text":"<p><pre><code>public function getMaster(): ConnectionInterface;\n</code></pre> Returns the default connection object.</p> <p><pre><code>public function getRead( string $name = string ): ConnectionInterface;\n</code></pre> Returns a read connection by name; if no name is given, picks a random connection; if no read connections are present, returns the default connection.</p> <p><pre><code>public function getWrite( string $name = string ): ConnectionInterface;\n</code></pre> Returns a write connection by name; if no name is given, picks a random connection; if no write connections are present, returns the default connection.</p> <p><pre><code>public function setMaster( ConnectionInterface $callableObject ): ConnectionLocatorInterface;\n</code></pre> Sets the default connection registry entry.</p> <p><pre><code>public function setRead( string $name, callable $callableObject ): ConnectionLocatorInterface;\n</code></pre> Sets a read connection registry entry by name.</p> <p><pre><code>public function setWrite( string $name, callable $callableObject ): ConnectionLocatorInterface;\n</code></pre> Sets a write connection registry entry by name.</p>"},{"location":"api/phalcon_datamapper/#datamapperpdoexceptioncannotdisconnect","title":"DataMapper\\Pdo\\Exception\\CannotDisconnect","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Exception</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>ExtendedPdo could not disconnect; e.g., because its PDO connection was created externally and then injected.</p>"},{"location":"api/phalcon_datamapper/#datamapperpdoexceptionconnectionnotfound","title":"DataMapper\\Pdo\\Exception\\ConnectionNotFound","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Exception</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Locator could not find a named connection.</p>"},{"location":"api/phalcon_datamapper/#datamapperpdoexceptionexception","title":"DataMapper\\Pdo\\Exception\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Exception</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Base Exception class</p>"},{"location":"api/phalcon_datamapper/#datamapperpdoprofilermemorylogger","title":"DataMapper\\Pdo\\Profiler\\MemoryLogger","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Profiler</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Logger\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Logger\\Adapter\\Noop</code></li> <li><code>Phalcon\\Logger\\Enum</code></li> <li><code>Phalcon\\Logger\\LoggerInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>LoggerInterface</code></li> </ul> </li> </ul> <p>A memory-based logger.</p>"},{"location":"api/phalcon_datamapper/#properties_3","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $messages;\n</code></pre>"},{"location":"api/phalcon_datamapper/#methods_7","title":"Methods","text":"<pre><code>public function alert( string $message, array $context = [] ): void;\n</code></pre> <pre><code>public function critical( string $message, array $context = [] ): void;\n</code></pre> <pre><code>public function debug( string $message, array $context = [] ): void;\n</code></pre> <pre><code>public function emergency( string $message, array $context = [] ): void;\n</code></pre> <pre><code>public function error( string $message, array $context = [] ): void;\n</code></pre> <p><pre><code>public function getAdapter( string $name ): AdapterInterface;\n</code></pre> Returns an adapter from the stack</p> <p><pre><code>public function getAdapters(): array;\n</code></pre> Returns the adapter stack array</p> <p><pre><code>public function getLogLevel(): int;\n</code></pre> Returns the log level</p> <p><pre><code>public function getMessages(): array;\n</code></pre> Returns the logged messages.</p> <p><pre><code>public function getName(): string;\n</code></pre> Returns the name of the logger</p> <pre><code>public function info( string $message, array $context = [] ): void;\n</code></pre> <p><pre><code>public function log( mixed $level, string $message, array $context = [] ): void;\n</code></pre> Logs a message.</p> <pre><code>public function notice( string $message, array $context = [] ): void;\n</code></pre> <pre><code>public function warning( string $message, array $context = [] ): void;\n</code></pre>"},{"location":"api/phalcon_datamapper/#datamapperpdoprofilerprofiler","title":"DataMapper\\Pdo\\Profiler\\Profiler","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Profiler</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Exception\\Exception</code></li> <li><code>Phalcon\\Logger\\Enum</code></li> <li><code>Phalcon\\Logger\\LoggerInterface</code></li> <li><code>Phalcon\\Helper\\Json\\Encode</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>ProfilerInterface</code></li> </ul> </li> </ul> <p>Sends query profiles to a logger.</p>"},{"location":"api/phalcon_datamapper/#properties_4","title":"Properties","text":"<pre><code>/**\n * @var bool\n */\nprotected $active = false;\n\n/**\n * @var array\n */\nprotected $context;\n\n/**\n * @var string\n */\nprotected $logFormat = ;\n\n/**\n * @var int\n */\nprotected $logLevel = ;\n\n/**\n * @var LoggerInterface\n */\nprotected $logger;\n\n/**\n * @var Encode\n */\nprivate $encode;\n</code></pre>"},{"location":"api/phalcon_datamapper/#methods_8","title":"Methods","text":"<p><pre><code>public function __construct( LoggerInterface $logger = null );\n</code></pre> Constructor.</p> <p><pre><code>public function finish( string $statement = null, array $values = [] ): void;\n</code></pre> Finishes and logs a profile entry.</p> <p><pre><code>public function getLogFormat(): string;\n</code></pre> Returns the log message format string, with placeholders.</p> <p><pre><code>public function getLogLevel(): string;\n</code></pre> Returns the level at which to log profile messages.</p> <p><pre><code>public function getLogger(): LoggerInterface;\n</code></pre> Returns the underlying logger instance.</p> <p><pre><code>public function isActive(): bool;\n</code></pre> Returns true if logging is active.</p> <p><pre><code>public function setActive( bool $active ): ProfilerInterface;\n</code></pre> Enable or disable profiler logging.</p> <p><pre><code>public function setLogFormat( string $logFormat ): ProfilerInterface;\n</code></pre> Sets the log message format string, with placeholders.</p> <p><pre><code>public function setLogLevel( string $logLevel ): ProfilerInterface;\n</code></pre> Level at which to log profile messages.</p> <p><pre><code>public function start( string $method ): void;\n</code></pre> Starts a profile entry.</p>"},{"location":"api/phalcon_datamapper/#datamapperpdoprofilerprofilerinterface","title":"DataMapper\\Pdo\\Profiler\\ProfilerInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Profiler</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Logger\\LoggerInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface to send query profiles to a logger.</p>"},{"location":"api/phalcon_datamapper/#methods_9","title":"Methods","text":"<p><pre><code>public function finish( string $statement = null, array $values = [] ): void;\n</code></pre> Finishes and logs a profile entry.</p> <p><pre><code>public function getLogFormat(): string;\n</code></pre> Returns the log message format string, with placeholders.</p> <p><pre><code>public function getLogLevel(): string;\n</code></pre> Returns the level at which to log profile messages.</p> <p><pre><code>public function getLogger(): LoggerInterface;\n</code></pre> Returns the underlying logger instance.</p> <p><pre><code>public function isActive(): bool;\n</code></pre> Returns true if logging is active.</p> <p><pre><code>public function setActive( bool $active ): ProfilerInterface;\n</code></pre> Enable or disable profiler logging.</p> <p><pre><code>public function setLogFormat( string $logFormat ): ProfilerInterface;\n</code></pre> Sets the log message format string, with placeholders.</p> <p><pre><code>public function setLogLevel( string $logLevel ): ProfilerInterface;\n</code></pre> Level at which to log profile messages.</p> <p><pre><code>public function start( string $method ): void;\n</code></pre> Starts a profile entry.</p>"},{"location":"api/phalcon_datamapper/#datamapperqueryabstractconditions","title":"DataMapper\\Query\\AbstractConditions","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Query</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractQuery</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class AbstractConditions</p>"},{"location":"api/phalcon_datamapper/#methods_10","title":"Methods","text":"<p><pre><code>public function andWhere( string $condition, mixed $value = null, int $type = int ): AbstractConditions;\n</code></pre> Sets a <code>AND</code> for a <code>WHERE</code> condition</p> <p><pre><code>public function appendWhere( string $condition, mixed $value = null, int $type = int ): AbstractConditions;\n</code></pre> Concatenates to the most recent <code>WHERE</code> clause</p> <p><pre><code>public function limit( int $limit ): AbstractConditions;\n</code></pre> Sets the <code>LIMIT</code> clause</p> <p><pre><code>public function offset( int $offset ): AbstractConditions;\n</code></pre> Sets the <code>OFFSET</code> clause</p> <p><pre><code>public function orWhere( string $condition, mixed $value = null, int $type = int ): AbstractConditions;\n</code></pre> Sets a <code>OR</code> for a <code>WHERE</code> condition</p> <p><pre><code>public function orderBy( mixed $orderBy ): AbstractConditions;\n</code></pre> Sets the <code>ORDER BY</code></p> <p><pre><code>public function where( string $condition, mixed $value = null, int $type = int ): AbstractConditions;\n</code></pre> Sets a <code>WHERE</code> condition</p> <pre><code>public function whereEquals( array $columnsValues ): AbstractConditions;\n</code></pre> <p><pre><code>protected function addCondition( string $store, string $andor, string $condition, mixed $value = null, int $type = int ): void;\n</code></pre> Appends a conditional</p> <p><pre><code>protected function appendCondition( string $store, string $condition, mixed $value = null, int $type = int ): void;\n</code></pre> Concatenates a conditional</p> <p><pre><code>protected function buildBy( string $type ): string;\n</code></pre> Builds a <code>BY</code> list</p> <p><pre><code>protected function buildCondition( string $type ): string;\n</code></pre> Builds the conditional string</p> <p><pre><code>protected function buildLimit(): string;\n</code></pre> Builds the <code>LIMIT</code> clause</p> <p><pre><code>protected function buildLimitCommon(): string;\n</code></pre> Builds the <code>LIMIT</code> clause for all drivers</p> <p><pre><code>protected function buildLimitEarly(): string;\n</code></pre> Builds the early <code>LIMIT</code> clause - MS SQLServer</p> <p><pre><code>protected function buildLimitSqlsrv(): string;\n</code></pre> Builds the <code>LIMIT</code> clause for MSSQLServer</p> <p><pre><code>protected function processValue( string $store, mixed $data ): void;\n</code></pre> Processes a value (array or string) and merges it with the store</p>"},{"location":"api/phalcon_datamapper/#datamapperqueryabstractquery","title":"DataMapper\\Query\\AbstractQuery","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Query</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Connection</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Class AbstractQuery</p>"},{"location":"api/phalcon_datamapper/#properties_5","title":"Properties","text":"<pre><code>/**\n * @var Bind\n */\nprotected $bind;\n\n/**\n * @var Connection\n */\nprotected $connection;\n\n/**\n * @var array\n */\nprotected $store;\n</code></pre>"},{"location":"api/phalcon_datamapper/#methods_11","title":"Methods","text":"<p><pre><code>public function __construct( Connection $connection, Bind $bind );\n</code></pre> AbstractQuery constructor.</p> <p><pre><code>public function bindInline( mixed $value, int $type = int ): string;\n</code></pre> Binds a value inline</p> <p><pre><code>public function bindValue( string $key, mixed $value, int $type = int ): AbstractQuery;\n</code></pre> Binds a value - auto-detects the type if necessary</p> <p><pre><code>public function bindValues( array $values ): AbstractQuery;\n</code></pre> Binds an array of values</p> <p><pre><code>public function getBindValues(): array;\n</code></pre> Returns all the bound values</p> <p><pre><code>abstract public function getStatement(): string;\n</code></pre> Return the generated statement</p> <p><pre><code>public function perform();\n</code></pre> Performs a statement in the connection</p> <p><pre><code>public function quoteIdentifier( string $name, int $type = static-constant-access ): string;\n</code></pre> Quotes the identifier</p> <p><pre><code>public function reset();\n</code></pre> Resets the internal array</p> <p><pre><code>public function setFlag( string $flag, bool $enable = bool ): void;\n</code></pre> Sets a flag for the query such as \"DISTINCT\"</p> <p><pre><code>protected function buildFlags();\n</code></pre> Builds the flags statement(s)</p> <p><pre><code>protected function buildReturning(): string;\n</code></pre> Builds the <code>RETURNING</code> clause</p> <p><pre><code>protected function indent( array $collection, string $glue = string ): string;\n</code></pre> Indents a collection</p>"},{"location":"api/phalcon_datamapper/#datamapperquerybind","title":"DataMapper\\Query\\Bind","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Query</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Bind</p>"},{"location":"api/phalcon_datamapper/#properties_6","title":"Properties","text":"<pre><code>/**\n * @var int\n */\nprotected $inlineCount = ;\n\n/**\n * @var array\n */\nprotected $store;\n</code></pre>"},{"location":"api/phalcon_datamapper/#methods_12","title":"Methods","text":"<pre><code>public function bindInline( mixed $value, int $type = int ): string;\n</code></pre> <p><pre><code>public function remove( string $key ): void;\n</code></pre> Removes a value from the store</p> <p><pre><code>public function setValue( string $key, mixed $value, int $type = int ): void;\n</code></pre> Sets a value</p> <p><pre><code>public function setValues( array $values, int $type = int ): void;\n</code></pre> Sets values from an array</p> <p><pre><code>public function toArray(): array;\n</code></pre> Returns the internal collection</p> <p><pre><code>protected function getType( mixed $value ): int;\n</code></pre> Auto detects the PDO type</p> <p><pre><code>protected function inlineArray( array $data, int $type ): string;\n</code></pre> Processes an array - if passed as an <code>inline</code> parameter</p>"},{"location":"api/phalcon_datamapper/#datamapperquerydelete","title":"DataMapper\\Query\\Delete","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Query</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Connection</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractConditions</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Delete Query</p>"},{"location":"api/phalcon_datamapper/#methods_13","title":"Methods","text":"<p><pre><code>public function __construct( Connection $connection, Bind $bind );\n</code></pre> Delete constructor.</p> <p><pre><code>public function from( string $table ): Delete;\n</code></pre> Adds table(s) in the query</p> <pre><code>public function getStatement(): string;\n</code></pre> <p><pre><code>public function reset(): void;\n</code></pre> Resets the internal store</p> <p><pre><code>public function returning( array $columns ): Delete;\n</code></pre> Adds the <code>RETURNING</code> clause</p>"},{"location":"api/phalcon_datamapper/#datamapperqueryinsert","title":"DataMapper\\Query\\Insert","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Query</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Connection</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractQuery</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Insert Query</p>"},{"location":"api/phalcon_datamapper/#methods_14","title":"Methods","text":"<p><pre><code>public function __construct( Connection $connection, Bind $bind );\n</code></pre> Insert constructor.</p> <p><pre><code>public function column( string $column, mixed $value = null, int $type = int ): Insert;\n</code></pre> Sets a column for the <code>INSERT</code> query</p> <p><pre><code>public function columns( array $columns ): Insert;\n</code></pre> Mass sets columns and values for the <code>INSERT</code></p> <p><pre><code>public function getLastInsertId( string $name = null ): string;\n</code></pre> Returns the id of the last inserted record</p> <pre><code>public function getStatement(): string;\n</code></pre> <p><pre><code>public function into( string $table ): Insert;\n</code></pre> Adds table(s) in the query</p> <p><pre><code>public function reset(): void;\n</code></pre> Resets the internal store</p> <p><pre><code>public function returning( array $columns ): Insert;\n</code></pre> Adds the <code>RETURNING</code> clause</p> <p><pre><code>public function set( string $column, mixed $value = null ): Insert;\n</code></pre> Sets a column = value condition</p>"},{"location":"api/phalcon_datamapper/#datamapperqueryqueryfactory","title":"DataMapper\\Query\\QueryFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Query</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Connection</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>QueryFactory</p>"},{"location":"api/phalcon_datamapper/#properties_7","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $selectClass = ;\n</code></pre>"},{"location":"api/phalcon_datamapper/#methods_15","title":"Methods","text":"<p><pre><code>public function __construct( string $selectClass = string );\n</code></pre> QueryFactory constructor.</p> <p><pre><code>public function newBind(): Bind;\n</code></pre> Create a new Bind object</p> <p><pre><code>public function newDelete( Connection $connection ): Delete;\n</code></pre> Create a new Delete object</p> <p><pre><code>public function newInsert( Connection $connection ): Insert;\n</code></pre> Create a new Insert object</p> <p><pre><code>public function newSelect( Connection $connection ): Select;\n</code></pre> Create a new Select object</p> <p><pre><code>public function newUpdate( Connection $connection ): Update;\n</code></pre> Create a new Update object</p>"},{"location":"api/phalcon_datamapper/#datamapperqueryselect","title":"DataMapper\\Query\\Select","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Query</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>BadMethodCallException</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractConditions</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Select Query</p>"},{"location":"api/phalcon_datamapper/#constants","title":"Constants","text":"<pre><code>const JOIN_INNER = INNER;\nconst JOIN_LEFT = LEFT;\nconst JOIN_NATURAL = NATURAL;\nconst JOIN_RIGHT = RIGHT;\n</code></pre>"},{"location":"api/phalcon_datamapper/#properties_8","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $asAlias = ;\n\n/**\n * @var bool\n */\nprotected $forUpdate = false;\n</code></pre>"},{"location":"api/phalcon_datamapper/#methods_16","title":"Methods","text":"<p><pre><code>public function __call( string $method, array $params );\n</code></pre> Proxied methods to the connection</p> <p><pre><code>public function andHaving( string $condition, mixed $value = null, int $type = int ): Select;\n</code></pre> Sets a <code>AND</code> for a <code>HAVING</code> condition</p> <p><pre><code>public function appendHaving( string $condition, mixed $value = null, int $type = int ): Select;\n</code></pre> Concatenates to the most recent <code>HAVING</code> clause</p> <p><pre><code>public function appendJoin( string $condition, mixed $value = null, int $type = int ): Select;\n</code></pre> Concatenates to the most recent <code>JOIN</code> clause</p> <p><pre><code>public function asAlias( string $asAlias ): Select;\n</code></pre> The <code>AS</code> statement for the query - useful in sub-queries</p> <p><pre><code>public function columns( array $columns ): Select;\n</code></pre> The columns to select from. If a key is set in the array element, the key will be used as the alias</p> <pre><code>public function distinct( bool $enable = bool ): Select;\n</code></pre> <p><pre><code>public function forUpdate( bool $enable = bool ): Select;\n</code></pre> Enable the <code>FOR UPDATE</code> for the query</p> <p><pre><code>public function from( string $table ): Select;\n</code></pre> Adds table(s) in the query</p> <p><pre><code>public function getStatement(): string;\n</code></pre> Returns the compiled SQL statement</p> <p><pre><code>public function groupBy( mixed $groupBy ): Select;\n</code></pre> Sets the <code>GROUP BY</code></p> <p><pre><code>public function hasColumns(): bool;\n</code></pre> Whether the query has columns or not</p> <p><pre><code>public function having( string $condition, mixed $value = null, int $type = int ): Select;\n</code></pre> Sets a <code>HAVING</code> condition</p> <p><pre><code>public function join( string $join, string $table, string $condition, mixed $value = null, int $type = int ): Select;\n</code></pre> Sets a 'JOIN' condition</p> <p><pre><code>public function orHaving( string $condition, mixed $value = null, int $type = int ): Select;\n</code></pre> Sets a <code>OR</code> for a <code>HAVING</code> condition</p> <p><pre><code>public function reset(): Select;\n</code></pre> Resets the internal collections</p> <p><pre><code>public function subSelect(): Select;\n</code></pre> Start a sub-select</p> <p><pre><code>public function union(): Select;\n</code></pre> Start a <code>UNION</code></p> <p><pre><code>public function unionAll(): Select;\n</code></pre> Start a <code>UNION ALL</code></p> <p><pre><code>protected function getCurrentStatement( string $suffix = string ): string;\n</code></pre> Statement builder</p>"},{"location":"api/phalcon_datamapper/#datamapperqueryupdate","title":"DataMapper\\Query\\Update","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\DataMapper\\Query</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\DataMapper\\Pdo\\Connection</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractConditions</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Update Query</p>"},{"location":"api/phalcon_datamapper/#methods_17","title":"Methods","text":"<p><pre><code>public function __construct( Connection $connection, Bind $bind );\n</code></pre> Update constructor.</p> <p><pre><code>public function column( string $column, mixed $value = null, int $type = int ): Update;\n</code></pre> Sets a column for the <code>UPDATE</code> query</p> <p><pre><code>public function columns( array $columns ): Update;\n</code></pre> Mass sets columns and values for the <code>UPDATE</code></p> <p><pre><code>public function from( string $table ): Update;\n</code></pre> Adds table(s) in the query</p> <pre><code>public function getStatement(): string;\n</code></pre> <p><pre><code>public function hasColumns(): bool;\n</code></pre> Whether the query has columns or not</p> <p><pre><code>public function reset(): void;\n</code></pre> Resets the internal store</p> <p><pre><code>public function returning( array $columns ): Update;\n</code></pre> Adds the <code>RETURNING</code> clause</p> <p><pre><code>public function set( string $column, mixed $value = null ): Update;\n</code></pre> Sets a column = value condition</p>"},{"location":"api/phalcon_db/","title":"Phalcon db","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_db/#dbabstractdb","title":"Db\\AbstractDb","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>\\PDO</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Db and its related classes provide a simple SQL database interface for Phalcon Framework. The Phalcon\\Db is the basic class you use to connect your PHP application to an RDBMS. There is a different adapter class for each brand of RDBMS.</p> <p>This component is intended to lower level database operations. If you want to interact with databases using higher level of abstraction use Phalcon\\Mvc\\Model.</p> <p>Phalcon\\Db\\AbstractDb is an abstract class. You only can use it with a database adapter like Phalcon\\Db\\Adapter\\Pdo</p> <pre><code>use Phalcon\\Db;\nuse Phalcon\\Db\\Exception;\nuse Phalcon\\Db\\Adapter\\Pdo\\Mysql as MysqlConnection;\n\ntry {\n    $connection = new MysqlConnection(\n        [\n            \"host\"     =&gt; \"192.168.0.11\",\n            \"username\" =&gt; \"sigma\",\n            \"password\" =&gt; \"secret\",\n            \"dbname\"   =&gt; \"blog\",\n            \"port\"     =&gt; \"3306\",\n        ]\n    );\n\n    $result = $connection-&gt;query(\n        \"SELECTFROM robots LIMIT 5\"\n    );\n\n    $result-&gt;setFetchMode(Enum::FETCH_NUM);\n\n    while ($robot = $result-&gt;fetch()) {\n        print_r($robot);\n    }\n} catch (Exception $e) {\n    echo $e-&gt;getMessage(), PHP_EOL;\n}\n</code></pre>"},{"location":"api/phalcon_db/#methods","title":"Methods","text":"<p><pre><code>public static function setup( array $options ): void;\n</code></pre> Enables/disables options in the Database component</p>"},{"location":"api/phalcon_db/#dbadapterabstractadapter","title":"Db\\Adapter\\AbstractAdapter","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\ColumnInterface</code></li> <li><code>Phalcon\\Db\\DialectInterface</code></li> <li><code>Phalcon\\Db\\Enum</code></li> <li><code>Phalcon\\Db\\Exception</code></li> <li><code>Phalcon\\Db\\Index</code></li> <li><code>Phalcon\\Db\\IndexInterface</code></li> <li><code>Phalcon\\Db\\RawValue</code></li> <li><code>Phalcon\\Db\\Reference</code></li> <li><code>Phalcon\\Db\\ReferenceInterface</code></li> <li><code>Phalcon\\Events\\EventsAwareInterface</code></li> <li><code>Phalcon\\Events\\ManagerInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>AdapterInterface</code></li> <li><code>EventsAwareInterface</code></li> </ul> </li> </ul> <p>Base class for Phalcon\\Db\\Adapter adapters</p>"},{"location":"api/phalcon_db/#properties","title":"Properties","text":"<pre><code>/**\n * Connection ID\n *\n * @var int\n */\nprotected $static $connectionConsecutive = ;\n\n/**\n * Active connection ID\n *\n * @var long\n */\nprotected $connectionId;\n\n/**\n * Descriptor used to connect to a database\n *\n * @var array\n */\nprotected $descriptor;\n\n/**\n * Dialect instance\n *\n * @var object\n */\nprotected $dialect;\n\n/**\n * Name of the dialect used\n *\n * @var string\n */\nprotected $dialectType;\n\n/**\n * Event Manager\n *\n * @var ManagerInterface\n */\nprotected $eventsManager;\n\n/**\n * The real SQL statement - what was executed\n *\n * @var string\n */\nprotected $realSqlStatement;\n\n/**\n * Active SQL Bind Types\n *\n * @var array\n */\nprotected $sqlBindTypes;\n\n/**\n * Active SQL Statement\n *\n * @var string\n */\nprotected $sqlStatement;\n\n/**\n * Active SQL bound parameter variables\n *\n * @var array\n */\nprotected $sqlVariables;\n\n/**\n * Current transaction level\n *\n * @var int\n */\nprotected $transactionLevel = ;\n\n/**\n * Whether the database supports transactions with save points\n *\n * @var bool\n */\nprotected $transactionsWithSavepoints = false;\n\n/**\n * Type of database system the adapter is used for\n *\n * @var string\n */\nprotected $type;\n</code></pre>"},{"location":"api/phalcon_db/#methods_1","title":"Methods","text":"<p><pre><code>public function __construct( array $descriptor );\n</code></pre> Phalcon\\Db\\Adapter constructor</p> <p><pre><code>public function addColumn( string $tableName, string $schemaName, ColumnInterface $column ): bool;\n</code></pre> Adds a column to a table</p> <p><pre><code>public function addForeignKey( string $tableName, string $schemaName, ReferenceInterface $reference ): bool;\n</code></pre> Adds a foreign key to a table</p> <p><pre><code>public function addIndex( string $tableName, string $schemaName, IndexInterface $index ): bool;\n</code></pre> Adds an index to a table</p> <p><pre><code>public function addPrimaryKey( string $tableName, string $schemaName, IndexInterface $index ): bool;\n</code></pre> Adds a primary key to a table</p> <p><pre><code>public function createSavepoint( string $name ): bool;\n</code></pre> Creates a new savepoint</p> <p><pre><code>public function createTable( string $tableName, string $schemaName, array $definition ): bool;\n</code></pre> Creates a table</p> <p><pre><code>public function createView( string $viewName, array $definition, string $schemaName = null ): bool;\n</code></pre> Creates a view</p> <p><pre><code>public function delete( mixed $table, mixed $whereCondition = null, mixed $placeholders = null, mixed $dataTypes = null ): bool;\n</code></pre> Deletes data from a table using custom RBDM SQL syntax</p> <pre><code>// Deleting existing robot\n$success = $connection-&gt;delete(\n    \"robots\",\n    \"id = 101\"\n);\n\n// Next SQL sentence is generated\nDELETE FROM `robots` WHERE `id` = 101\n</code></pre> <p><pre><code>public function describeIndexes( string $table, string $schema = null ): IndexInterface[];\n</code></pre> Lists table indexes</p> <pre><code>print_r(\n    $connection-&gt;describeIndexes(\"robots_parts\")\n);\n</code></pre> <p><pre><code>public function describeReferences( string $table, string $schema = null ): ReferenceInterface[];\n</code></pre> Lists table references</p> <pre><code>print_r(\n    $connection-&gt;describeReferences(\"robots_parts\")\n);\n</code></pre> <p><pre><code>public function dropColumn( string $tableName, string $schemaName, string $columnName ): bool;\n</code></pre> Drops a column from a table</p> <p><pre><code>public function dropForeignKey( string $tableName, string $schemaName, string $referenceName ): bool;\n</code></pre> Drops a foreign key from a table</p> <p><pre><code>public function dropIndex( string $tableName, string $schemaName, mixed $indexName ): bool;\n</code></pre> Drop an index from a table</p> <p><pre><code>public function dropPrimaryKey( string $tableName, string $schemaName ): bool;\n</code></pre> Drops a table's primary key</p> <p><pre><code>public function dropTable( string $tableName, string $schemaName = null, bool $ifExists = bool ): bool;\n</code></pre> Drops a table from a schema/database</p> <p><pre><code>public function dropView( string $viewName, string $schemaName = null, bool $ifExists = bool ): bool;\n</code></pre> Drops a view</p> <p><pre><code>public function escapeIdentifier( mixed $identifier ): string;\n</code></pre> Escapes a column/table/schema name</p> <pre><code>$escapedTable = $connection-&gt;escapeIdentifier(\n    \"robots\"\n);\n\n$escapedTable = $connection-&gt;escapeIdentifier(\n    [\n        \"store\",\n        \"robots\",\n    ]\n);\n</code></pre> <p><pre><code>public function fetchAll( string $sqlQuery, int $fetchMode = static-constant-access, mixed $bindParams = null, mixed $bindTypes = null ): array;\n</code></pre> Dumps the complete result of a query into an array</p> <pre><code>// Getting all robots with associative indexes only\n$robots = $connection-&gt;fetchAll(\n    \"SELECTFROM robots\",\n    \\Phalcon\\Db\\Enum::FETCH_ASSOC\n);\n\nforeach ($robots as $robot) {\n    print_r($robot);\n}\n\n // Getting all robots that contains word \"robot\" withing the name\n$robots = $connection-&gt;fetchAll(\n    \"SELECTFROM robots WHERE name LIKE :name\",\n    \\Phalcon\\Db\\Enum::FETCH_ASSOC,\n    [\n        \"name\" =&gt; \"%robot%\",\n    ]\n);\nforeach($robots as $robot) {\n    print_r($robot);\n}\n</code></pre> <p><pre><code>public function fetchColumn( string $sqlQuery, array $placeholders = [], mixed $column = int ): string | bool;\n</code></pre> Returns the n'th field of first row in a SQL query result</p> <pre><code>// Getting count of robots\n$robotsCount = $connection-&gt;fetchColumn(\"SELECT count(*) FROM robots\");\nprint_r($robotsCount);\n\n// Getting name of last edited robot\n$robot = $connection-&gt;fetchColumn(\n    \"SELECT id, name FROM robots ORDER BY modified DESC\",\n    1\n);\nprint_r($robot);\n</code></pre> <p><pre><code>public function fetchOne( string $sqlQuery, mixed $fetchMode = static-constant-access, mixed $bindParams = null, mixed $bindTypes = null ): array;\n</code></pre> Returns the first row in a SQL query result</p> <pre><code>// Getting first robot\n$robot = $connection-&gt;fetchOne(\"SELECTFROM robots\");\nprint_r($robot);\n\n// Getting first robot with associative indexes only\n$robot = $connection-&gt;fetchOne(\n    \"SELECTFROM robots\",\n    \\Phalcon\\Db\\Enum::FETCH_ASSOC\n);\nprint_r($robot);\n</code></pre> <p><pre><code>public function forUpdate( string $sqlQuery ): string;\n</code></pre> Returns a SQL modified with a FOR UPDATE clause</p> <p><pre><code>public function getColumnDefinition( ColumnInterface $column ): string;\n</code></pre> Returns the SQL column definition from a column</p> <p><pre><code>public function getColumnList( mixed $columnList ): string;\n</code></pre> Gets a list of columns</p> <p><pre><code>public function getConnectionId(): string;\n</code></pre> Gets the active connection unique identifier</p> <p><pre><code>public function getDefaultIdValue(): RawValue;\n</code></pre> Returns the default identity value to be inserted in an identity column</p> <pre><code>// Inserting a new robot with a valid default value for the column 'id'\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        $connection-&gt;getDefaultIdValue(),\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"id\",\n        \"name\",\n        \"year\",\n    ]\n);\n</code></pre> <p><pre><code>public function getDefaultValue(): RawValue;\n</code></pre> Returns the default value to make the RBDM use the default value declared in the table definition</p> <pre><code>// Inserting a new robot with a valid default value for the column 'year'\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        $connection-&gt;getDefaultValue()\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n</code></pre> <p>@todo Return NULL if this is not supported by the adapter</p> <p><pre><code>public function getDescriptor(): array;\n</code></pre> Return descriptor used to connect to the active database</p> <p><pre><code>public function getDialect(): DialectInterface;\n</code></pre> Returns internal dialect instance</p> <p><pre><code>public function getDialectType(): string;\n</code></pre> Name of the dialect used</p> <p><pre><code>public function getEventsManager(): ManagerInterface;\n</code></pre> Returns the internal event manager</p> <p><pre><code>public function getNestedTransactionSavepointName(): string;\n</code></pre> Returns the savepoint name to use for nested transactions</p> <p><pre><code>public function getRealSQLStatement(): string;\n</code></pre> Active SQL statement in the object without replace bound parameters</p> <p><pre><code>public function getSQLBindTypes(): array;\n</code></pre> Active SQL statement in the object</p> <p><pre><code>public function getSQLStatement(): string;\n</code></pre> Active SQL statement in the object</p> <p><pre><code>public function getSQLVariables(): array;\n</code></pre> Active SQL variables in the object</p> <p><pre><code>public function getType(): string;\n</code></pre> Type of database system the adapter is used for</p> <p><pre><code>public function insert( string $table, array $values, mixed $fields = null, mixed $dataTypes = null ): bool;\n</code></pre> Inserts data into a table using custom RDBMS SQL syntax</p> <pre><code>// Inserting a new robot\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\"Astro Boy\", 1952],\n    [\"name\", \"year\"]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</code></pre> <p><pre><code>public function insertAsDict( string $table, mixed $data, mixed $dataTypes = null ): bool;\n</code></pre> Inserts data into a table using custom RBDM SQL syntax</p> <pre><code>// Inserting a new robot\n$success = $connection-&gt;insertAsDict(\n    \"robots\",\n    [\n        \"name\" =&gt; \"Astro Boy\",\n        \"year\" =&gt; 1952,\n    ]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</code></pre> <p><pre><code>public function isNestedTransactionsWithSavepoints(): bool;\n</code></pre> Returns if nested transactions should use savepoints</p> <p><pre><code>public function limit( string $sqlQuery, int $number ): string;\n</code></pre> Appends a LIMIT clause to $sqlQuery argument</p> <pre><code>echo $connection-&gt;limit(\"SELECTFROM robots\", 5);\n</code></pre> <p><pre><code>public function listTables( string $schemaName = null ): array;\n</code></pre> List all tables on a database</p> <pre><code>print_r(\n    $connection-&gt;listTables(\"blog\")\n);\n</code></pre> <p><pre><code>public function listViews( string $schemaName = null ): array;\n</code></pre> List all views on a database</p> <pre><code>print_r(\n    $connection-&gt;listViews(\"blog\")\n);\n</code></pre> <p><pre><code>public function modifyColumn( string $tableName, string $schemaName, ColumnInterface $column, ColumnInterface $currentColumn = null ): bool;\n</code></pre> Modifies a table column based on a definition</p> <p><pre><code>public function releaseSavepoint( string $name ): bool;\n</code></pre> Releases given savepoint</p> <p><pre><code>public function rollbackSavepoint( string $name ): bool;\n</code></pre> Rollbacks given savepoint</p> <p><pre><code>public function setDialect( DialectInterface $dialect );\n</code></pre> Sets the dialect used to produce the SQL</p> <p><pre><code>public function setEventsManager( ManagerInterface $eventsManager ): void;\n</code></pre> Sets the event manager</p> <p><pre><code>public function setNestedTransactionsWithSavepoints( bool $nestedTransactionsWithSavepoints ): AdapterInterface;\n</code></pre> Set if nested transactions should use savepoints</p> <p><pre><code>public function sharedLock( string $sqlQuery ): string;\n</code></pre> Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <p><pre><code>public function supportSequences(): bool;\n</code></pre> Check whether the database system requires a sequence to produce auto-numeric values</p> <p><pre><code>public function supportsDefaultValue(): bool;\n</code></pre> Check whether the database system support the DEFAULT keyword (SQLite does not support it)</p> <p>@deprecated Will re removed in the next version</p> <p><pre><code>public function tableExists( string $tableName, string $schemaName = null ): bool;\n</code></pre> Generates SQL checking for the existence of a schema.table</p> <pre><code>var_dump(\n    $connection-&gt;tableExists(\"blog\", \"posts\")\n);\n</code></pre> <p><pre><code>public function tableOptions( string $tableName, string $schemaName = null ): array;\n</code></pre> Gets creation options from a table</p> <pre><code>print_r(\n    $connection-&gt;tableOptions(\"robots\")\n);\n</code></pre> <p><pre><code>public function update( string $table, mixed $fields, mixed $values, mixed $whereCondition = null, mixed $dataTypes = null ): bool;\n</code></pre> Updates data on a table using custom RBDM SQL syntax</p> <pre><code>// Updating existing robot\n$success = $connection-&gt;update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n\n// Updating existing robot with array condition and $dataTypes\n$success = $connection-&gt;update(\n    \"robots\",\n    [\"name\"],\n    [\"New Astro Boy\"],\n    [\n        \"conditions\" =&gt; \"id = ?\",\n        \"bind\"       =&gt; [$some_unsafe_id],\n        \"bindTypes\"  =&gt; [PDO::PARAM_INT], // use only if you use $dataTypes param\n    ],\n    [\n        PDO::PARAM_STR\n    ]\n);\n</code></pre> <p>Warning! If $whereCondition is string it not escaped.</p> <p><pre><code>public function updateAsDict( string $table, mixed $data, mixed $whereCondition = null, mixed $dataTypes = null ): bool;\n</code></pre> Updates data on a table using custom RBDM SQL syntax Another, more convenient syntax</p> <pre><code>// Updating existing robot\n$success = $connection-&gt;updateAsDict(\n    \"robots\",\n    [\n        \"name\" =&gt; \"New Astro Boy\",\n    ],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n</code></pre> <p><pre><code>public function useExplicitIdValue(): bool;\n</code></pre> Check whether the database system requires an explicit value for identity columns</p> <p><pre><code>public function viewExists( string $viewName, string $schemaName = null ): bool;\n</code></pre> Generates SQL checking for the existence of a schema.view</p> <pre><code>var_dump(\n    $connection-&gt;viewExists(\"active_users\", \"posts\")\n);\n</code></pre>"},{"location":"api/phalcon_db/#dbadapteradapterinterface","title":"Db\\Adapter\\AdapterInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\ColumnInterface</code></li> <li><code>Phalcon\\Db\\DialectInterface</code></li> <li><code>Phalcon\\Db\\IndexInterface</code></li> <li><code>Phalcon\\Db\\RawValue</code></li> <li><code>Phalcon\\Db\\ReferenceInterface</code></li> <li><code>Phalcon\\Db\\ResultInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Db adapters</p>"},{"location":"api/phalcon_db/#methods_2","title":"Methods","text":"<p><pre><code>public function addColumn( string $tableName, string $schemaName, ColumnInterface $column ): bool;\n</code></pre> Adds a column to a table</p> <p><pre><code>public function addForeignKey( string $tableName, string $schemaName, ReferenceInterface $reference ): bool;\n</code></pre> Adds a foreign key to a table</p> <p><pre><code>public function addIndex( string $tableName, string $schemaName, IndexInterface $index ): bool;\n</code></pre> Adds an index to a table</p> <p><pre><code>public function addPrimaryKey( string $tableName, string $schemaName, IndexInterface $index ): bool;\n</code></pre> Adds a primary key to a table</p> <p><pre><code>public function affectedRows(): int;\n</code></pre> Returns the number of affected rows by the last INSERT/UPDATE/DELETE reported by the database system</p> <p><pre><code>public function begin( bool $nesting = bool ): bool;\n</code></pre> Starts a transaction in the connection</p> <p><pre><code>public function close(): bool;\n</code></pre> Closes active connection returning success. Phalcon automatically closes and destroys active connections within Phalcon\\Db\\Pool</p> <p><pre><code>public function commit( bool $nesting = bool ): bool;\n</code></pre> Commits the active transaction in the connection</p> <p><pre><code>public function connect( array $descriptor = null ): bool;\n</code></pre> This method is automatically called in \\Phalcon\\Db\\Adapter\\Pdo constructor. Call it when you need to restore a database connection</p> <p><pre><code>public function createSavepoint( string $name ): bool;\n</code></pre> Creates a new savepoint</p> <p><pre><code>public function createTable( string $tableName, string $schemaName, array $definition ): bool;\n</code></pre> Creates a table</p> <p><pre><code>public function createView( string $viewName, array $definition, string $schemaName = null ): bool;\n</code></pre> Creates a view</p> <p><pre><code>public function delete( mixed $table, mixed $whereCondition = null, mixed $placeholders = null, mixed $dataTypes = null ): bool;\n</code></pre> Deletes data from a table using custom RDBMS SQL syntax</p> <p><pre><code>public function describeColumns( string $table, string $schema = null ): ColumnInterface[];\n</code></pre> Returns an array of Phalcon\\Db\\Column objects describing a table</p> <p><pre><code>public function describeIndexes( string $table, string $schema = null ): IndexInterface[];\n</code></pre> Lists table indexes</p> <p><pre><code>public function describeReferences( string $table, string $schema = null ): ReferenceInterface[];\n</code></pre> Lists table references</p> <p><pre><code>public function dropColumn( string $tableName, string $schemaName, string $columnName ): bool;\n</code></pre> Drops a column from a table</p> <p><pre><code>public function dropForeignKey( string $tableName, string $schemaName, string $referenceName ): bool;\n</code></pre> Drops a foreign key from a table</p> <p><pre><code>public function dropIndex( string $tableName, string $schemaName, string $indexName ): bool;\n</code></pre> Drop an index from a table</p> <p><pre><code>public function dropPrimaryKey( string $tableName, string $schemaName ): bool;\n</code></pre> Drops primary key from a table</p> <p><pre><code>public function dropTable( string $tableName, string $schemaName = null, bool $ifExists = bool ): bool;\n</code></pre> Drops a table from a schema/database</p> <p><pre><code>public function dropView( string $viewName, string $schemaName = null, bool $ifExists = bool ): bool;\n</code></pre> Drops a view</p> <p><pre><code>public function escapeIdentifier( mixed $identifier ): string;\n</code></pre> Escapes a column/table/schema name</p> <p><pre><code>public function escapeString( string $str ): string;\n</code></pre> Escapes a value to avoid SQL injections</p> <p><pre><code>public function execute( string $sqlStatement, mixed $placeholders = null, mixed $dataTypes = null ): bool;\n</code></pre> Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server doesn't return any rows</p> <p><pre><code>public function fetchAll( string $sqlQuery, int $fetchMode = int, mixed $placeholders = null ): array;\n</code></pre> Dumps the complete result of a query into an array</p> <p><pre><code>public function fetchColumn( string $sqlQuery, array $placeholders = [], mixed $column = int ): string | bool;\n</code></pre> Returns the n'th field of first row in a SQL query result</p> <pre><code>// Getting count of robots\n$robotsCount = $connection-&gt;fetchColumn(\"SELECT COUNT(*) FROM robots\");\nprint_r($robotsCount);\n\n// Getting name of last edited robot\n$robot = $connection-&gt;fetchColumn(\n    \"SELECT id, name FROM robots ORDER BY modified DESC\",\n    1\n);\nprint_r($robot);\n</code></pre> <p><pre><code>public function fetchOne( string $sqlQuery, int $fetchMode = int, mixed $placeholders = null ): array;\n</code></pre> Returns the first row in a SQL query result</p> <p><pre><code>public function forUpdate( string $sqlQuery ): string;\n</code></pre> Returns a SQL modified with a FOR UPDATE clause</p> <p><pre><code>public function getColumnDefinition( ColumnInterface $column ): string;\n</code></pre> Returns the SQL column definition from a column</p> <p><pre><code>public function getColumnList( mixed $columnList ): string;\n</code></pre> Gets a list of columns</p> <p><pre><code>public function getConnectionId(): string;\n</code></pre> Gets the active connection unique identifier</p> <p><pre><code>public function getDefaultIdValue(): RawValue;\n</code></pre> Return the default identity value to insert in an identity column</p> <p><pre><code>public function getDefaultValue(): RawValue;\n</code></pre> Returns the default value to make the RBDM use the default value declared in the table definition</p> <pre><code>// Inserting a new robot with a valid default value for the column 'year'\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        $connection-&gt;getDefaultValue()\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n</code></pre> <p>@todo Return NULL if this is not supported by the adapter</p> <p><pre><code>public function getDescriptor(): array;\n</code></pre> Return descriptor used to connect to the active database</p> <p><pre><code>public function getDialect(): DialectInterface;\n</code></pre> Returns internal dialect instance</p> <p><pre><code>public function getDialectType(): string;\n</code></pre> Returns the name of the dialect used</p> <p><pre><code>public function getInternalHandler(): \\PDO;\n</code></pre> Return internal PDO handler</p> <p><pre><code>public function getNestedTransactionSavepointName(): string;\n</code></pre> Returns the savepoint name to use for nested transactions</p> <p><pre><code>public function getRealSQLStatement(): string;\n</code></pre> Active SQL statement in the object without replace bound parameters</p> <p><pre><code>public function getSQLBindTypes(): array;\n</code></pre> Active SQL statement in the object</p> <p><pre><code>public function getSQLStatement(): string;\n</code></pre> Active SQL statement in the object</p> <p><pre><code>public function getSQLVariables(): array;\n</code></pre> Active SQL statement in the object</p> <p><pre><code>public function getType(): string;\n</code></pre> Returns type of database system the adapter is used for</p> <p><pre><code>public function insert( string $table, array $values, mixed $fields = null, mixed $dataTypes = null ): bool;\n</code></pre> Inserts data into a table using custom RDBMS SQL syntax</p> <p><pre><code>public function insertAsDict( string $table, mixed $data, mixed $dataTypes = null ): bool;\n</code></pre> Inserts data into a table using custom RBDM SQL syntax</p> <pre><code>// Inserting a new robot\n$success = $connection-&gt;insertAsDict(\n    \"robots\",\n    [\n        \"name\" =&gt; \"Astro Boy\",\n        \"year\" =&gt; 1952,\n    ]\n);\n\n// Next SQL sentence is sent to the database system\nINSERT INTO `robots` (`name`, `year`) VALUES (\"Astro boy\", 1952);\n</code></pre> <p><pre><code>public function isNestedTransactionsWithSavepoints(): bool;\n</code></pre> Returns if nested transactions should use savepoints</p> <p><pre><code>public function isUnderTransaction(): bool;\n</code></pre> Checks whether connection is under database transaction</p> <p><pre><code>public function lastInsertId( mixed $sequenceName = null );\n</code></pre> Returns insert id for the auto_increment column inserted in the last SQL statement</p> <p><pre><code>public function limit( string $sqlQuery, int $number ): string;\n</code></pre> Appends a LIMIT clause to sqlQuery argument</p> <p><pre><code>public function listTables( string $schemaName = null ): array;\n</code></pre> List all tables on a database</p> <p><pre><code>public function listViews( string $schemaName = null ): array;\n</code></pre> List all views on a database</p> <p><pre><code>public function modifyColumn( string $tableName, string $schemaName, ColumnInterface $column, ColumnInterface $currentColumn = null ): bool;\n</code></pre> Modifies a table column based on a definition</p> <p><pre><code>public function query( string $sqlStatement, mixed $placeholders = null, mixed $dataTypes = null ): ResultInterface | bool;\n</code></pre> Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server returns rows</p> <p><pre><code>public function releaseSavepoint( string $name ): bool;\n</code></pre> Releases given savepoint</p> <p><pre><code>public function rollback( bool $nesting = bool ): bool;\n</code></pre> Rollbacks the active transaction in the connection</p> <p><pre><code>public function rollbackSavepoint( string $name ): bool;\n</code></pre> Rollbacks given savepoint</p> <p><pre><code>public function setNestedTransactionsWithSavepoints( bool $nestedTransactionsWithSavepoints ): AdapterInterface;\n</code></pre> Set if nested transactions should use savepoints</p> <p><pre><code>public function sharedLock( string $sqlQuery ): string;\n</code></pre> Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <p><pre><code>public function supportSequences(): bool;\n</code></pre> Check whether the database system requires a sequence to produce auto-numeric values</p> <p><pre><code>public function supportsDefaultValue(): bool;\n</code></pre> SQLite does not support the DEFAULT keyword</p> <p>@deprecated Will re removed in the next version</p> <p><pre><code>public function tableExists( string $tableName, string $schemaName = null ): bool;\n</code></pre> Generates SQL checking for the existence of a schema.table</p> <p><pre><code>public function tableOptions( string $tableName, string $schemaName = null ): array;\n</code></pre> Gets creation options from a table</p> <p><pre><code>public function update( string $table, mixed $fields, mixed $values, mixed $whereCondition = null, mixed $dataTypes = null ): bool;\n</code></pre> Updates data on a table using custom RDBMS SQL syntax</p> <p><pre><code>public function updateAsDict( string $table, mixed $data, mixed $whereCondition = null, mixed $dataTypes = null ): bool;\n</code></pre> Updates data on a table using custom RBDM SQL syntax Another, more convenient syntax</p> <pre><code>// Updating existing robot\n$success = $connection-&gt;updateAsDict(\n    \"robots\",\n    [\n        \"name\" =&gt; \"New Astro Boy\",\n    ],\n    \"id = 101\"\n);\n\n// Next SQL sentence is sent to the database system\nUPDATE `robots` SET `name` = \"Astro boy\" WHERE id = 101\n</code></pre> <p><pre><code>public function useExplicitIdValue(): bool;\n</code></pre> Check whether the database system requires an explicit value for identity columns</p> <p><pre><code>public function viewExists( string $viewName, string $schemaName = null ): bool;\n</code></pre> Generates SQL checking for the existence of a schema.view</p>"},{"location":"api/phalcon_db/#dbadapterpdoabstractpdo","title":"Db\\Adapter\\Pdo\\AbstractPdo","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db\\Adapter\\Pdo</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\Adapter\\AbstractAdapter</code></li> <li><code>Phalcon\\Db\\Column</code></li> <li><code>Phalcon\\Db\\Exception</code></li> <li><code>Phalcon\\Db\\ResultInterface</code></li> <li><code>Phalcon\\Db\\Result\\PdoResult</code></li> <li><code>Phalcon\\Events\\ManagerInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Db\\Adapter\\Pdo is the Phalcon\\Db that internally uses PDO to connect to a database</p> <pre><code>use Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n$config = [\n    \"host\"     =&gt; \"localhost\",\n    \"dbname\"   =&gt; \"blog\",\n    \"port\"     =&gt; 3306,\n    \"username\" =&gt; \"sigma\",\n    \"password\" =&gt; \"secret\",\n];\n\n$connection = new Mysql($config);\n</code></pre>"},{"location":"api/phalcon_db/#properties_1","title":"Properties","text":"<pre><code>/**\n * Last affected rows\n *\n * @var int\n */\nprotected $affectedRows;\n\n/**\n * PDO Handler\n *\n * @var \\PDO\n */\nprotected $pdo;\n</code></pre>"},{"location":"api/phalcon_db/#methods_3","title":"Methods","text":"<p><pre><code>public function __construct( array $descriptor );\n</code></pre> Constructor for Phalcon\\Db\\Adapter\\Pdo</p> <p><pre><code>public function affectedRows(): int;\n</code></pre> Returns the number of affected rows by the latest INSERT/UPDATE/DELETE executed in the database system</p> <pre><code>$connection-&gt;execute(\n    \"DELETE FROM robots\"\n);\n\necho $connection-&gt;affectedRows(), \" were deleted\";\n</code></pre> <p><pre><code>public function begin( bool $nesting = bool ): bool;\n</code></pre> Starts a transaction in the connection</p> <p><pre><code>public function close(): bool;\n</code></pre> Closes the active connection returning success. Phalcon automatically closes and destroys active connections when the request ends</p> <p><pre><code>public function commit( bool $nesting = bool ): bool;\n</code></pre> Commits the active transaction in the connection</p> <p><pre><code>public function connect( array $descriptor = null ): bool;\n</code></pre> This method is automatically called in \\Phalcon\\Db\\Adapter\\Pdo constructor.</p> <p>Call it when you need to restore a database connection.</p> <pre><code>use Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n// Make a connection\n$connection = new Mysql(\n    [\n        \"host\"     =&gt; \"localhost\",\n        \"username\" =&gt; \"sigma\",\n        \"password\" =&gt; \"secret\",\n        \"dbname\"   =&gt; \"blog\",\n        \"port\"     =&gt; 3306,\n    ]\n);\n\n// Reconnect\n$connection-&gt;connect();\n</code></pre> <p><pre><code>public function convertBoundParams( string $sql, array $params = [] ): array;\n</code></pre> Converts bound parameters such as :name: or ?1 into PDO bind params ?</p> <pre><code>print_r(\n    $connection-&gt;convertBoundParams(\n        \"SELECTFROM robots WHERE name = :name:\",\n        [\n            \"Bender\",\n        ]\n    )\n);\n</code></pre> <p><pre><code>public function escapeString( string $str ): string;\n</code></pre> Escapes a value to avoid SQL injections according to the active charset in the connection</p> <pre><code>$escapedStr = $connection-&gt;escapeString(\"some dangerous value\");\n</code></pre> <p><pre><code>public function execute( string $sqlStatement, mixed $bindParams = null, mixed $bindTypes = null ): bool;\n</code></pre> Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server doesn't return any rows</p> <pre><code>// Inserting data\n$success = $connection-&gt;execute(\n    \"INSERT INTO robots VALUES (1, 'Astro Boy')\"\n);\n\n$success = $connection-&gt;execute(\n    \"INSERT INTO robots VALUES (?, ?)\",\n    [\n        1,\n        \"Astro Boy\",\n    ]\n);\n</code></pre> <p><pre><code>public function executePrepared( \\PDOStatement $statement, array $placeholders, mixed $dataTypes ): \\PDOStatement;\n</code></pre> Executes a prepared statement binding. This function uses integer indexes starting from zero</p> <pre><code>use Phalcon\\Db\\Column;\n\n$statement = $db-&gt;prepare(\n    \"SELECTFROM robots WHERE name = :name\"\n);\n\n$result = $connection-&gt;executePrepared(\n    $statement,\n    [\n        \"name\" =&gt; \"Voltron\",\n    ],\n    [\n        \"name\" =&gt; Column::BIND_PARAM_STR,\n    ]\n);\n</code></pre> <p><pre><code>public function getErrorInfo();\n</code></pre> Return the error info, if any</p> <p><pre><code>public function getInternalHandler(): \\PDO;\n</code></pre> Return internal PDO handler</p> <p><pre><code>public function getTransactionLevel(): int;\n</code></pre> Returns the current transaction nesting level</p> <p><pre><code>public function isUnderTransaction(): bool;\n</code></pre> Checks whether the connection is under a transaction</p> <pre><code>$connection-&gt;begin();\n\n// true\nvar_dump(\n    $connection-&gt;isUnderTransaction()\n);\n</code></pre> <p><pre><code>public function lastInsertId( mixed $sequenceName = null ): int | bool;\n</code></pre> Returns the insert id for the auto_increment/serial column inserted in the latest executed SQL statement</p> <pre><code>// Inserting a new robot\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n\n// Getting the generated id\n$id = $connection-&gt;lastInsertId();\n</code></pre> <p><pre><code>public function prepare( string $sqlStatement ): \\PDOStatement;\n</code></pre> Returns a PDO prepared statement to be executed with 'executePrepared'</p> <pre><code>use Phalcon\\Db\\Column;\n\n$statement = $db-&gt;prepare(\n    \"SELECTFROM robots WHERE name = :name\"\n);\n\n$result = $connection-&gt;executePrepared(\n    $statement,\n    [\n        \"name\" =&gt; \"Voltron\",\n    ],\n    [\n        \"name\" =&gt; Column::BIND_PARAM_INT,\n    ]\n);\n</code></pre> <p><pre><code>public function query( string $sqlStatement, mixed $bindParams = null, mixed $bindTypes = null ): ResultInterface | bool;\n</code></pre> Sends SQL statements to the database server returning the success state. Use this method only when the SQL statement sent to the server is returning rows</p> <pre><code>// Querying data\n$resultset = $connection-&gt;query(\n    \"SELECTFROM robots WHERE type = 'mechanical'\"\n);\n\n$resultset = $connection-&gt;query(\n    \"SELECTFROM robots WHERE type = ?\",\n    [\n        \"mechanical\",\n    ]\n);\n</code></pre> <p><pre><code>public function rollback( bool $nesting = bool ): bool;\n</code></pre> Rollbacks the active transaction in the connection</p> <p><pre><code>abstract protected function getDsnDefaults(): array;\n</code></pre> Returns PDO adapter DSN defaults as a key-value map.</p> <p><pre><code>protected function prepareRealSql( string $statement, array $parameters ): void;\n</code></pre> Constructs the SQL statement (with parameters)</p> <p>@see https://stackoverflow.com/a/8403150</p>"},{"location":"api/phalcon_db/#dbadapterpdomysql","title":"Db\\Adapter\\Pdo\\Mysql","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db\\Adapter\\Pdo</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\Adapter\\Pdo\\AbstractPdo</code></li> <li><code>Phalcon\\Db\\Column</code></li> <li><code>Phalcon\\Db\\ColumnInterface</code></li> <li><code>Phalcon\\Db\\Enum</code></li> <li><code>Phalcon\\Db\\Exception</code></li> <li><code>Phalcon\\Db\\Index</code></li> <li><code>Phalcon\\Db\\IndexInterface</code></li> <li><code>Phalcon\\Db\\Reference</code></li> <li><code>Phalcon\\Db\\ReferenceInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>PdoAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Specific functions for the MySQL database system</p> <pre><code>use Phalcon\\Db\\Adapter\\Pdo\\Mysql;\n\n$config = [\n    \"host\"     =&gt; \"localhost\",\n    \"dbname\"   =&gt; \"blog\",\n    \"port\"     =&gt; 3306,\n    \"username\" =&gt; \"sigma\",\n    \"password\" =&gt; \"secret\",\n];\n\n$connection = new Mysql($config);\n</code></pre>"},{"location":"api/phalcon_db/#properties_2","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $dialectType = mysql;\n\n/**\n * @var string\n */\nprotected $type = mysql;\n</code></pre>"},{"location":"api/phalcon_db/#methods_4","title":"Methods","text":"<p><pre><code>public function __construct( array $descriptor );\n</code></pre> Constructor for Phalcon\\Db\\Adapter\\Pdo</p> <p><pre><code>public function addForeignKey( string $tableName, string $schemaName, ReferenceInterface $reference ): bool;\n</code></pre> Adds a foreign key to a table</p> <p><pre><code>public function describeColumns( string $table, string $schema = null ): ColumnInterface[];\n</code></pre> Returns an array of Phalcon\\Db\\Column objects describing a table</p> <pre><code>print_r(\n    $connection-&gt;describeColumns(\"posts\")\n);\n</code></pre> <p><pre><code>public function describeIndexes( string $table, string $schema = null ): IndexInterface[];\n</code></pre> Lists table indexes</p> <pre><code>print_r(\n    $connection-&gt;describeIndexes(\"robots_parts\")\n);\n</code></pre> <p><pre><code>public function describeReferences( string $table, string $schema = null ): ReferenceInterface[];\n</code></pre> Lists table references</p> <pre><code>print_r(\n    $connection-&gt;describeReferences(\"robots_parts\")\n);\n</code></pre> <p><pre><code>protected function getDsnDefaults(): array;\n</code></pre> Returns PDO adapter DSN defaults as a key-value map.</p>"},{"location":"api/phalcon_db/#dbadapterpdopostgresql","title":"Db\\Adapter\\Pdo\\Postgresql","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db\\Adapter\\Pdo</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\Adapter\\Pdo\\AbstractPdo</code></li> <li><code>Phalcon\\Db\\Column</code></li> <li><code>Phalcon\\Db\\ColumnInterface</code></li> <li><code>Phalcon\\Db\\Enum</code></li> <li><code>Phalcon\\Db\\Exception</code></li> <li><code>Phalcon\\Db\\RawValue</code></li> <li><code>Phalcon\\Db\\Reference</code></li> <li><code>Phalcon\\Db\\ReferenceInterface</code></li> <li><code>Throwable</code></li> </ul> </li> <li> <p>Extends</p> <p><code>PdoAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Specific functions for the PostgreSQL database system</p> <pre><code>use Phalcon\\Db\\Adapter\\Pdo\\Postgresql;\n\n$config = [\n    \"host\"     =&gt; \"localhost\",\n    \"dbname\"   =&gt; \"blog\",\n    \"port\"     =&gt; 5432,\n    \"username\" =&gt; \"postgres\",\n    \"password\" =&gt; \"secret\",\n];\n\n$connection = new Postgresql($config);\n</code></pre>"},{"location":"api/phalcon_db/#properties_3","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $dialectType = 'postgresql';\n\n/**\n * @var string\n */\nprotected $type = 'pgsql';\n</code></pre>"},{"location":"api/phalcon_db/#methods_5","title":"Methods","text":"<p><pre><code>public function __construct( array $descriptor );\n</code></pre> Constructor for Phalcon\\Db\\Adapter\\Pdo\\Postgresql</p> <p><pre><code>public function connect( array $descriptor = null ): bool;\n</code></pre> This method is automatically called in Phalcon\\Db\\Adapter\\Pdo constructor. Call it when you need to restore a database connection.</p> <p><pre><code>public function createTable( string $tableName, string $schemaName, array $definition ): bool;\n</code></pre> Creates a table</p> <p><pre><code>public function describeColumns( string $table, string $schema = null ): ColumnInterface[];\n</code></pre> Returns an array of Phalcon\\Db\\Column objects describing a table</p> <pre><code>print_r(\n    $connection-&gt;describeColumns(\"posts\")\n);\n</code></pre> <p><pre><code>public function describeReferences( string $table, string $schema = null ): ReferenceInterface[];\n</code></pre> Lists table references</p> <pre><code>print_r(\n    $connection-&gt;describeReferences(\"robots_parts\")\n);\n</code></pre> <p><pre><code>public function getDefaultIdValue(): RawValue;\n</code></pre> Returns the default identity value to be inserted in an identity column</p> <pre><code>// Inserting a new robot with a valid default value for the column 'id'\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        $connection-&gt;getDefaultIdValue(),\n        \"Astro Boy\",\n        1952,\n    ],\n    [\n        \"id\",\n        \"name\",\n        \"year\",\n    ]\n);\n</code></pre> <p><pre><code>public function modifyColumn( string $tableName, string $schemaName, ColumnInterface $column, ColumnInterface $currentColumn = null ): bool;\n</code></pre> Modifies a table column based on a definition</p> <p><pre><code>public function supportSequences(): bool;\n</code></pre> Check whether the database system requires a sequence to produce auto-numeric values</p> <p><pre><code>public function useExplicitIdValue(): bool;\n</code></pre> Check whether the database system requires an explicit value for identity columns</p> <p><pre><code>protected function getDsnDefaults(): array;\n</code></pre> Returns PDO adapter DSN defaults as a key-value map.</p>"},{"location":"api/phalcon_db/#dbadapterpdosqlite","title":"Db\\Adapter\\Pdo\\Sqlite","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db\\Adapter\\Pdo</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\Adapter\\Pdo\\AbstractPdo</code></li> <li><code>Phalcon\\Db\\Column</code></li> <li><code>Phalcon\\Db\\ColumnInterface</code></li> <li><code>Phalcon\\Db\\Enum</code></li> <li><code>Phalcon\\Db\\Exception</code></li> <li><code>Phalcon\\Db\\Index</code></li> <li><code>Phalcon\\Db\\IndexInterface</code></li> <li><code>Phalcon\\Db\\RawValue</code></li> <li><code>Phalcon\\Db\\Reference</code></li> <li><code>Phalcon\\Db\\ReferenceInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>PdoAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Specific functions for the SQLite database system</p> <pre><code>use Phalcon\\Db\\Adapter\\Pdo\\Sqlite;\n\n$connection = new Sqlite(\n    [\n        \"dbname\" =&gt; \"/tmp/test.sqlite\",\n    ]\n);\n</code></pre>"},{"location":"api/phalcon_db/#properties_4","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $dialectType = 'sqlite';\n\n/**\n * @var string\n */\nprotected $type = 'sqlite';\n</code></pre>"},{"location":"api/phalcon_db/#methods_6","title":"Methods","text":"<p><pre><code>public function __construct( array $descriptor );\n</code></pre> Constructor for Phalcon\\Db\\Adapter\\Pdo\\Sqlite</p> <p><pre><code>public function connect( array $descriptor = null ): bool;\n</code></pre> This method is automatically called in Phalcon\\Db\\Adapter\\Pdo constructor. Call it when you need to restore a database connection.</p> <p><pre><code>public function describeColumns( string $table, string $schema = null ): ColumnInterface[];\n</code></pre> Returns an array of Phalcon\\Db\\Column objects describing a table</p> <pre><code>print_r(\n    $connection-&gt;describeColumns(\"posts\")\n);\n</code></pre> <p><pre><code>public function describeIndexes( string $table, string $schema = null ): IndexInterface[];\n</code></pre> Lists table indexes</p> <pre><code>print_r(\n    $connection-&gt;describeIndexes(\"robots_parts\")\n);\n</code></pre> <p><pre><code>public function describeReferences( string $table, string $schema = null ): ReferenceInterface[];\n</code></pre> Lists table references</p> <p><pre><code>public function getDefaultValue(): RawValue;\n</code></pre> Returns the default value to make the RBDM use the default value declared in the table definition</p> <pre><code>// Inserting a new robot with a valid default value for the column 'year'\n$success = $connection-&gt;insert(\n    \"robots\",\n    [\n        \"Astro Boy\",\n        $connection-&gt;getDefaultValue(),\n    ],\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n</code></pre> <p><pre><code>public function supportsDefaultValue(): bool;\n</code></pre> SQLite does not support the DEFAULT keyword</p> <p>@deprecated Will re removed in the next version</p> <p><pre><code>public function useExplicitIdValue(): bool;\n</code></pre> Check whether the database system requires an explicit value for identity columns</p> <p><pre><code>protected function getDsnDefaults(): array;\n</code></pre> Returns PDO adapter DSN defaults as a key-value map.</p>"},{"location":"api/phalcon_db/#dbadapterpdofactory","title":"Db\\Adapter\\PdoFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Factory\\AbstractFactory</code></li> <li><code>Phalcon\\Helper\\Arr\\Get</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFactory</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>This file is part of the Phalcon Framework.</p> <p>(c) Phalcon Team team@phalcon.io</p> <p>For the full copyright and license information, please view the LICENSE.txt file that was distributed with this source code.</p>"},{"location":"api/phalcon_db/#methods_7","title":"Methods","text":"<p><pre><code>public function __construct( array $services = [] );\n</code></pre> Constructor</p> <p><pre><code>public function load( mixed $config ): AdapterInterface;\n</code></pre> Factory to create an instance from a Config object</p> <p><pre><code>public function newInstance( string $name, array $options = [] ): AdapterInterface;\n</code></pre> Create a new instance of the adapter</p> <p><pre><code>protected function getAdapters(): array;\n</code></pre> Returns the available adapters</p>"},{"location":"api/phalcon_db/#dbcolumn","title":"Db\\Column","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>ColumnInterface</code></li> </ul> </li> </ul> <p>Allows to define columns to be used on create or alter table operations</p> <pre><code>use Phalcon\\Db\\Column as Column;\n\n// Column definition\n$column = new Column(\n    \"id\",\n    [\n        \"type\"          =&gt; Column::TYPE_INTEGER,\n        \"size\"          =&gt; 10,\n        \"unsigned\"      =&gt; true,\n        \"notNull\"       =&gt; true,\n        \"autoIncrement\" =&gt; true,\n        \"first\"         =&gt; true,\n        \"comment\"       =&gt; \"\",\n    ]\n);\n\n// Add column to existing table\n$connection-&gt;addColumn(\"robots\", null, $column);\n</code></pre>"},{"location":"api/phalcon_db/#constants","title":"Constants","text":"<pre><code>const BIND_PARAM_BLOB = 3;\nconst BIND_PARAM_BOOL = 5;\nconst BIND_PARAM_DECIMAL = 32;\nconst BIND_PARAM_INT = 1;\nconst BIND_PARAM_NULL = 0;\nconst BIND_PARAM_STR = 2;\nconst BIND_SKIP = 1024;\nconst TYPE_BIGINTEGER = 14;\nconst TYPE_BIT = 19;\nconst TYPE_BLOB = 11;\nconst TYPE_BOOLEAN = 8;\nconst TYPE_CHAR = 5;\nconst TYPE_DATE = 1;\nconst TYPE_DATETIME = 4;\nconst TYPE_DECIMAL = 3;\nconst TYPE_DOUBLE = 9;\nconst TYPE_ENUM = 18;\nconst TYPE_FLOAT = 7;\nconst TYPE_INTEGER = 0;\nconst TYPE_JSON = 15;\nconst TYPE_JSONB = 16;\nconst TYPE_LONGBLOB = 13;\nconst TYPE_LONGTEXT = 24;\nconst TYPE_MEDIUMBLOB = 12;\nconst TYPE_MEDIUMINTEGER = 21;\nconst TYPE_MEDIUMTEXT = 23;\nconst TYPE_SMALLINTEGER = 22;\nconst TYPE_TEXT = 6;\nconst TYPE_TIME = 20;\nconst TYPE_TIMESTAMP = 17;\nconst TYPE_TINYBLOB = 10;\nconst TYPE_TINYINTEGER = 26;\nconst TYPE_TINYTEXT = 25;\nconst TYPE_VARCHAR = 2;\n</code></pre>"},{"location":"api/phalcon_db/#properties_5","title":"Properties","text":"<pre><code>/**\n * Column Position\n *\n * @var string|null\n */\nprotected $after;\n\n/**\n * Column is autoIncrement?\n *\n * @var bool\n */\nprotected $autoIncrement = false;\n\n/**\n * Bind Type\n *\n * @var int\n */\nprotected $bindType = 2;\n\n/**\n * Default column value\n */\nprotected $_default;\n\n/**\n * Position is first\n *\n * @var bool\n */\nprotected $first = false;\n\n/**\n * The column have some numeric type?\n */\nprotected $isNumeric = false;\n\n/**\n * Column's name\n *\n * @var string\n */\nprotected $name;\n\n/**\n * Column's comment\n *\n * @var string\n */\nprotected $comment;\n\n/**\n * Column not nullable?\n *\n * Default SQL definition is NOT NULL.\n *\n * @var bool\n */\nprotected $notNull = true;\n\n/**\n * Column is part of the primary key?\n *\n * @var bool\n */\nprotected $primary = false;\n\n/**\n * Integer column number scale\n *\n * @var int\n */\nprotected $scale = 0;\n\n/**\n * Integer column size\n *\n * @var int|string\n */\nprotected $size = 0;\n\n/**\n * Column data type\n *\n * @var int\n */\nprotected $type;\n\n/**\n * Column data type reference\n *\n * @var int\n */\nprotected $typeReference = -1;\n\n/**\n * Column data type values\n *\n * @var array|string\n */\nprotected $typeValues;\n\n/**\n * Integer column unsigned?\n *\n * @var bool\n */\nprotected $unsigned = false;\n</code></pre>"},{"location":"api/phalcon_db/#methods_8","title":"Methods","text":"<p><pre><code>public function __construct( string $name, array $definition );\n</code></pre> Phalcon\\Db\\Column constructor</p> <p><pre><code>public function getAfterPosition(): string | null;\n</code></pre> Check whether field absolute to position in table</p> <p><pre><code>public function getBindType(): int;\n</code></pre> Returns the type of bind handling</p> <p><pre><code>public function getComment(): string\n</code></pre> Column's comment</p> <pre><code>public function getName(): string\n</code></pre> <pre><code>public function getScale(): int\n</code></pre> <pre><code>public function getSize(): int | string\n</code></pre> <pre><code>public function getType(): int\n</code></pre> <pre><code>public function getTypeReference(): int\n</code></pre> <pre><code>public function getTypeValues(): array|string\n</code></pre> <pre><code>public function get_default()\n</code></pre> <p><pre><code>public function hasDefault(): bool;\n</code></pre> Check whether column has default value</p> <p><pre><code>public function isAutoIncrement(): bool;\n</code></pre> Auto-Increment</p> <p><pre><code>public function isFirst(): bool;\n</code></pre> Check whether column have first position in table</p> <p><pre><code>public function isNotNull(): bool;\n</code></pre> Not null</p> <p><pre><code>public function isNumeric(): bool;\n</code></pre> Check whether column have an numeric type</p> <p><pre><code>public function isPrimary(): bool;\n</code></pre> Column is part of the primary key?</p> <p><pre><code>public function isUnsigned(): bool;\n</code></pre> Returns true if number column is unsigned</p>"},{"location":"api/phalcon_db/#dbcolumninterface","title":"Db\\ColumnInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Db\\Column</p>"},{"location":"api/phalcon_db/#methods_9","title":"Methods","text":"<p><pre><code>public function getAfterPosition(): string | null;\n</code></pre> Check whether field absolute to position in table</p> <p><pre><code>public function getBindType(): int;\n</code></pre> Returns the type of bind handling</p> <p><pre><code>public function getDefault(): mixed;\n</code></pre> Returns default value of column</p> <p><pre><code>public function getName(): string;\n</code></pre> Returns column name</p> <p><pre><code>public function getScale(): int;\n</code></pre> Returns column scale</p> <p><pre><code>public function getSize(): int | string;\n</code></pre> Returns column size</p> <p><pre><code>public function getType(): int;\n</code></pre> Returns column type</p> <p><pre><code>public function getTypeReference(): int;\n</code></pre> Returns column type reference</p> <p><pre><code>public function getTypeValues(): array | string;\n</code></pre> Returns column type values</p> <p><pre><code>public function hasDefault(): bool;\n</code></pre> Check whether column has default value</p> <p><pre><code>public function isAutoIncrement(): bool;\n</code></pre> Auto-Increment</p> <p><pre><code>public function isFirst(): bool;\n</code></pre> Check whether column have first position in table</p> <p><pre><code>public function isNotNull(): bool;\n</code></pre> Not null</p> <p><pre><code>public function isNumeric(): bool;\n</code></pre> Check whether column have an numeric type</p> <p><pre><code>public function isPrimary(): bool;\n</code></pre> Column is part of the primary key?</p> <p><pre><code>public function isUnsigned(): bool;\n</code></pre> Returns true if number column is unsigned</p>"},{"location":"api/phalcon_db/#dbdialect","title":"Db\\Dialect","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>DialectInterface</code></li> </ul> </li> </ul> <p>This is the base class to each database dialect. This implements common methods to transform intermediate code into its RDBMS related syntax</p>"},{"location":"api/phalcon_db/#properties_6","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $escapeChar;\n\n/**\n * @var array\n */\nprotected $customFunctions;\n</code></pre>"},{"location":"api/phalcon_db/#methods_10","title":"Methods","text":"<p><pre><code>public function createSavepoint( string $name ): string;\n</code></pre> Generate SQL to create a new savepoint</p> <p><pre><code>final public function escape( string $str, string $escapeChar = null ): string;\n</code></pre> Escape identifiers</p> <p><pre><code>final public function escapeSchema( string $str, string $escapeChar = null ): string;\n</code></pre> Escape Schema</p> <p><pre><code>public function forUpdate( string $sqlQuery ): string;\n</code></pre> Returns a SQL modified with a FOR UPDATE clause</p> <pre><code>$sql = $dialect-&gt;forUpdate(\"SELECTFROM robots\");\n\necho $sql; // SELECTFROM robots FOR UPDATE\n</code></pre> <p><pre><code>final public function getColumnList( array $columnList, string $escapeChar = null, mixed $bindCounts = null ): string;\n</code></pre> Gets a list of columns with escaped identifiers</p> <pre><code>echo $dialect-&gt;getColumnList(\n    [\n        \"column1\",\n        \"column\",\n    ]\n);\n</code></pre> <p><pre><code>public function getCustomFunctions(): array;\n</code></pre> Returns registered functions</p> <p><pre><code>final public function getSqlColumn( mixed $column, string $escapeChar = null, mixed $bindCounts = null ): string;\n</code></pre> Resolve Column expressions</p> <p><pre><code>public function getSqlExpression( array $expression, string $escapeChar = null, mixed $bindCounts = null ): string;\n</code></pre> Transforms an intermediate representation for an expression into a database system valid expression</p> <p><pre><code>final public function getSqlTable( mixed $table, string $escapeChar = null ): string;\n</code></pre> Transform an intermediate representation of a schema/table into a database system valid expression</p> <p><pre><code>public function limit( string $sqlQuery, mixed $number ): string;\n</code></pre> Generates the SQL for LIMIT clause</p> <pre><code>// SELECTFROM robots LIMIT 10\necho $dialect-&gt;limit(\n    \"SELECTFROM robots\",\n    10\n);\n\n// SELECTFROM robots LIMIT 10 OFFSET 50\necho $dialect-&gt;limit(\n    \"SELECTFROM robots\",\n    [10, 50]\n);\n</code></pre> <p><pre><code>public function registerCustomFunction( string $name, callable $customFunction ): Dialect;\n</code></pre> Registers custom SQL functions</p> <p><pre><code>public function releaseSavepoint( string $name ): string;\n</code></pre> Generate SQL to release a savepoint</p> <p><pre><code>public function rollbackSavepoint( string $name ): string;\n</code></pre> Generate SQL to rollback a savepoint</p> <p><pre><code>public function select( array $definition ): string;\n</code></pre> Builds a SELECT statement</p> <p><pre><code>public function supportsReleaseSavepoints(): bool;\n</code></pre> Checks whether the platform supports releasing savepoints.</p> <p><pre><code>public function supportsSavepoints(): bool;\n</code></pre> Checks whether the platform supports savepoints</p> <p><pre><code>protected function checkColumnType( ColumnInterface $column ): string;\n</code></pre> Checks the column type and if not string it returns the type reference</p> <p><pre><code>protected function checkColumnTypeSql( ColumnInterface $column ): string;\n</code></pre> Checks the column type and returns the updated SQL statement</p> <p><pre><code>protected function getColumnSize( ColumnInterface $column ): string;\n</code></pre> Returns the size of the column enclosed in parentheses</p> <p><pre><code>protected function getColumnSizeAndScale( ColumnInterface $column ): string;\n</code></pre> Returns the column size and scale enclosed in parentheses</p> <p><pre><code>final protected function getSqlExpressionAll( array $expression, string $escapeChar = null ): string;\n</code></pre> Resolve</p> <p><pre><code>final protected function getSqlExpressionBinaryOperations( array $expression, string $escapeChar = null, mixed $bindCounts = null ): string;\n</code></pre> Resolve binary operations expressions</p> <p><pre><code>final protected function getSqlExpressionCase( array $expression, string $escapeChar = null, mixed $bindCounts = null ): string;\n</code></pre> Resolve CASE expressions</p> <p><pre><code>final protected function getSqlExpressionCastValue( array $expression, string $escapeChar = null, mixed $bindCounts = null ): string;\n</code></pre> Resolve CAST of values</p> <p><pre><code>final protected function getSqlExpressionConvertValue( array $expression, string $escapeChar = null, mixed $bindCounts = null ): string;\n</code></pre> Resolve CONVERT of values encodings</p> <p><pre><code>final protected function getSqlExpressionFrom( mixed $expression, string $escapeChar = null ): string;\n</code></pre> Resolve a FROM clause</p> <p><pre><code>final protected function getSqlExpressionFunctionCall( array $expression, string $escapeChar = null, mixed $bindCounts ): string;\n</code></pre> Resolve function calls</p> <p><pre><code>final protected function getSqlExpressionGroupBy( mixed $expression, string $escapeChar = null, mixed $bindCounts = null ): string;\n</code></pre> Resolve a GROUP BY clause</p> <p><pre><code>final protected function getSqlExpressionHaving( array $expression, string $escapeChar = null, mixed $bindCounts = null ): string;\n</code></pre> Resolve a HAVING clause</p> <p><pre><code>final protected function getSqlExpressionJoins( mixed $expression, string $escapeChar = null, mixed $bindCounts = null ): string;\n</code></pre> Resolve a JOINs clause</p> <p><pre><code>final protected function getSqlExpressionLimit( mixed $expression, string $escapeChar = null, mixed $bindCounts = null ): string;\n</code></pre> Resolve a LIMIT clause</p> <p><pre><code>final protected function getSqlExpressionList( array $expression, string $escapeChar = null, mixed $bindCounts = null ): string;\n</code></pre> Resolve Lists</p> <p><pre><code>final protected function getSqlExpressionObject( array $expression, string $escapeChar = null, mixed $bindCounts = null ): string;\n</code></pre> Resolve object expressions</p> <p><pre><code>final protected function getSqlExpressionOrderBy( mixed $expression, string $escapeChar = null, mixed $bindCounts = null ): string;\n</code></pre> Resolve an ORDER BY clause</p> <p><pre><code>final protected function getSqlExpressionQualified( array $expression, string $escapeChar = null ): string;\n</code></pre> Resolve qualified expressions</p> <p><pre><code>final protected function getSqlExpressionScalar( array $expression, string $escapeChar = null, mixed $bindCounts = null ): string;\n</code></pre> Resolve Column expressions</p> <p><pre><code>final protected function getSqlExpressionUnaryOperations( array $expression, string $escapeChar = null, mixed $bindCounts = null ): string;\n</code></pre> Resolve unary operations expressions</p> <p><pre><code>final protected function getSqlExpressionWhere( mixed $expression, string $escapeChar = null, mixed $bindCounts = null ): string;\n</code></pre> Resolve a WHERE clause</p> <p><pre><code>protected function prepareColumnAlias( string $qualified, string $alias = null, string $escapeChar = null ): string;\n</code></pre> Prepares column for this RDBMS</p> <p><pre><code>protected function prepareQualified( string $column, string $domain = null, string $escapeChar = null ): string;\n</code></pre> Prepares qualified for this RDBMS</p> <p><pre><code>protected function prepareTable( string $table, string $schema = null, string $alias = null, string $escapeChar = null ): string;\n</code></pre> Prepares table for this RDBMS</p>"},{"location":"api/phalcon_db/#dbdialectmysql","title":"Db\\Dialect\\Mysql","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db\\Dialect</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\Column</code></li> <li><code>Phalcon\\Db\\ColumnInterface</code></li> <li><code>Phalcon\\Db\\Dialect</code></li> <li><code>Phalcon\\Db\\DialectInterface</code></li> <li><code>Phalcon\\Db\\Exception</code></li> <li><code>Phalcon\\Db\\IndexInterface</code></li> <li><code>Phalcon\\Db\\ReferenceInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Dialect</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Generates database specific SQL for the MySQL RDBMS</p>"},{"location":"api/phalcon_db/#properties_7","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $escapeChar = '`';\n</code></pre>"},{"location":"api/phalcon_db/#methods_11","title":"Methods","text":"<p><pre><code>public function addColumn( string $tableName, string $schemaName, ColumnInterface $column ): string;\n</code></pre> Generates SQL to add a column to a table</p> <p><pre><code>public function addForeignKey( string $tableName, string $schemaName, ReferenceInterface $reference ): string;\n</code></pre> Generates SQL to add an index to a table</p> <p><pre><code>public function addIndex( string $tableName, string $schemaName, IndexInterface $index ): string;\n</code></pre> Generates SQL to add an index to a table</p> <p><pre><code>public function addPrimaryKey( string $tableName, string $schemaName, IndexInterface $index ): string;\n</code></pre> Generates SQL to add the primary key to a table</p> <p><pre><code>public function createTable( string $tableName, string $schemaName, array $definition ): string;\n</code></pre> Generates SQL to create a table</p> <p><pre><code>public function createView( string $viewName, array $definition, string $schemaName = null ): string;\n</code></pre> Generates SQL to create a view</p> <p><pre><code>public function describeColumns( string $table, string $schema = null ): string;\n</code></pre> Generates SQL describing a table</p> <pre><code>print_r(\n    $dialect-&gt;describeColumns(\"posts\")\n);\n</code></pre> <p><pre><code>public function describeIndexes( string $table, string $schema = null ): string;\n</code></pre> Generates SQL to query indexes on a table</p> <p><pre><code>public function describeReferences( string $table, string $schema = null ): string;\n</code></pre> Generates SQL to query foreign keys on a table</p> <p><pre><code>public function dropColumn( string $tableName, string $schemaName, string $columnName ): string;\n</code></pre> Generates SQL to delete a column from a table</p> <p><pre><code>public function dropForeignKey( string $tableName, string $schemaName, string $referenceName ): string;\n</code></pre> Generates SQL to delete a foreign key from a table</p> <p><pre><code>public function dropIndex( string $tableName, string $schemaName, string $indexName ): string;\n</code></pre> Generates SQL to delete an index from a table</p> <p><pre><code>public function dropPrimaryKey( string $tableName, string $schemaName ): string;\n</code></pre> Generates SQL to delete primary key from a table</p> <p><pre><code>public function dropTable( string $tableName, string $schemaName = null, bool $ifExists = bool ): string;\n</code></pre> Generates SQL to drop a table</p> <p><pre><code>public function dropView( string $viewName, string $schemaName = null, bool $ifExists = bool ): string;\n</code></pre> Generates SQL to drop a view</p> <p><pre><code>public function getColumnDefinition( ColumnInterface $column ): string;\n</code></pre> Gets the column name in MySQL</p> <p><pre><code>public function getForeignKeyChecks(): string;\n</code></pre> Generates SQL to check DB parameter FOREIGN_KEY_CHECKS.</p> <p><pre><code>public function listTables( string $schemaName = null ): string;\n</code></pre> List all tables in database</p> <pre><code>print_r(\n    $dialect-&gt;listTables(\"blog\")\n);\n</code></pre> <p><pre><code>public function listViews( string $schemaName = null ): string;\n</code></pre> Generates the SQL to list all views of a schema or user</p> <p><pre><code>public function modifyColumn( string $tableName, string $schemaName, ColumnInterface $column, ColumnInterface $currentColumn = null ): string;\n</code></pre> Generates SQL to modify a column in a table</p> <p><pre><code>public function sharedLock( string $sqlQuery ): string;\n</code></pre> Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <pre><code>$sql = $dialect-&gt;sharedLock(\"SELECTFROM robots\");\n\necho $sql; // SELECTFROM robots LOCK IN SHARE MODE\n</code></pre> <p><pre><code>public function tableExists( string $tableName, string $schemaName = null ): string;\n</code></pre> Generates SQL checking for the existence of a schema.table</p> <pre><code>echo $dialect-&gt;tableExists(\"posts\", \"blog\");\n\necho $dialect-&gt;tableExists(\"posts\");\n</code></pre> <p><pre><code>public function tableOptions( string $table, string $schema = null ): string;\n</code></pre> Generates the SQL to describe the table creation options</p> <p><pre><code>public function truncateTable( string $tableName, string $schemaName ): string;\n</code></pre> Generates SQL to truncate a table</p> <p><pre><code>public function viewExists( string $viewName, string $schemaName = null ): string;\n</code></pre> Generates SQL checking for the existence of a schema.view</p> <p><pre><code>protected function getTableOptions( array $definition ): string;\n</code></pre> Generates SQL to add the table creation options</p>"},{"location":"api/phalcon_db/#dbdialectpostgresql","title":"Db\\Dialect\\Postgresql","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db\\Dialect</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\Column</code></li> <li><code>Phalcon\\Db\\ColumnInterface</code></li> <li><code>Phalcon\\Db\\Dialect</code></li> <li><code>Phalcon\\Db\\DialectInterface</code></li> <li><code>Phalcon\\Db\\Exception</code></li> <li><code>Phalcon\\Db\\IndexInterface</code></li> <li><code>Phalcon\\Db\\ReferenceInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Dialect</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Generates database specific SQL for the PostgreSQL RDBMS</p>"},{"location":"api/phalcon_db/#properties_8","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $escapeChar = \"\\\"\";\n</code></pre>"},{"location":"api/phalcon_db/#methods_12","title":"Methods","text":"<p><pre><code>public function addColumn( string $tableName, string $schemaName, ColumnInterface $column ): string;\n</code></pre> Generates SQL to add a column to a table</p> <p><pre><code>public function addForeignKey( string $tableName, string $schemaName, ReferenceInterface $reference ): string;\n</code></pre> Generates SQL to add an index to a table</p> <p><pre><code>public function addIndex( string $tableName, string $schemaName, IndexInterface $index ): string;\n</code></pre> Generates SQL to add an index to a table</p> <p><pre><code>public function addPrimaryKey( string $tableName, string $schemaName, IndexInterface $index ): string;\n</code></pre> Generates SQL to add the primary key to a table</p> <p><pre><code>public function createTable( string $tableName, string $schemaName, array $definition ): string;\n</code></pre> Generates SQL to create a table</p> <p><pre><code>public function createView( string $viewName, array $definition, string $schemaName = null ): string;\n</code></pre> Generates SQL to create a view</p> <p><pre><code>public function describeColumns( string $table, string $schema = null ): string;\n</code></pre> Generates SQL describing a table</p> <pre><code>print_r(\n    $dialect-&gt;describeColumns(\"posts\")\n);\n</code></pre> <p><pre><code>public function describeIndexes( string $table, string $schema = null ): string;\n</code></pre> Generates SQL to query indexes on a table</p> <p><pre><code>public function describeReferences( string $table, string $schema = null ): string;\n</code></pre> Generates SQL to query foreign keys on a table</p> <p><pre><code>public function dropColumn( string $tableName, string $schemaName, string $columnName ): string;\n</code></pre> Generates SQL to delete a column from a table</p> <p><pre><code>public function dropForeignKey( string $tableName, string $schemaName, string $referenceName ): string;\n</code></pre> Generates SQL to delete a foreign key from a table</p> <p><pre><code>public function dropIndex( string $tableName, string $schemaName, string $indexName ): string;\n</code></pre> Generates SQL to delete an index from a table</p> <p><pre><code>public function dropPrimaryKey( string $tableName, string $schemaName ): string;\n</code></pre> Generates SQL to delete primary key from a table</p> <p><pre><code>public function dropTable( string $tableName, string $schemaName = null, bool $ifExists = bool ): string;\n</code></pre> Generates SQL to drop a table</p> <p><pre><code>public function dropView( string $viewName, string $schemaName = null, bool $ifExists = bool ): string;\n</code></pre> Generates SQL to drop a view</p> <p><pre><code>public function getColumnDefinition( ColumnInterface $column ): string;\n</code></pre> Gets the column name in PostgreSQL</p> <p><pre><code>public function listTables( string $schemaName = null ): string;\n</code></pre> List all tables in database</p> <pre><code>print_r(\n    $dialect-&gt;listTables(\"blog\")\n);\n</code></pre> <p><pre><code>public function listViews( string $schemaName = null ): string;\n</code></pre> Generates the SQL to list all views of a schema or user</p> <p><pre><code>public function modifyColumn( string $tableName, string $schemaName, ColumnInterface $column, ColumnInterface $currentColumn = null ): string;\n</code></pre> Generates SQL to modify a column in a table</p> <p><pre><code>public function sharedLock( string $sqlQuery ): string;\n</code></pre> Returns a SQL modified a shared lock statement. For now this method returns the original query</p> <p><pre><code>public function tableExists( string $tableName, string $schemaName = null ): string;\n</code></pre> Generates SQL checking for the existence of a schema.table</p> <pre><code>echo $dialect-&gt;tableExists(\"posts\", \"blog\");\n\necho $dialect-&gt;tableExists(\"posts\");\n</code></pre> <p><pre><code>public function tableOptions( string $table, string $schema = null ): string;\n</code></pre> Generates the SQL to describe the table creation options</p> <p><pre><code>public function truncateTable( string $tableName, string $schemaName ): string;\n</code></pre> Generates SQL to truncate a table</p> <p><pre><code>public function viewExists( string $viewName, string $schemaName = null ): string;\n</code></pre> Generates SQL checking for the existence of a schema.view</p> <pre><code>protected function castDefault( ColumnInterface $column ): string;\n</code></pre> <pre><code>protected function getTableOptions( array $definition ): string;\n</code></pre>"},{"location":"api/phalcon_db/#dbdialectsqlite","title":"Db\\Dialect\\Sqlite","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db\\Dialect</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\Column</code></li> <li><code>Phalcon\\Db\\ColumnInterface</code></li> <li><code>Phalcon\\Db\\Dialect</code></li> <li><code>Phalcon\\Db\\DialectInterface</code></li> <li><code>Phalcon\\Db\\Exception</code></li> <li><code>Phalcon\\Db\\IndexInterface</code></li> <li><code>Phalcon\\Db\\ReferenceInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Dialect</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Generates database specific SQL for the SQLite RDBMS</p>"},{"location":"api/phalcon_db/#properties_9","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $escapeChar = \"\\\"\";\n</code></pre>"},{"location":"api/phalcon_db/#methods_13","title":"Methods","text":"<p><pre><code>public function addColumn( string $tableName, string $schemaName, ColumnInterface $column ): string;\n</code></pre> Generates SQL to add a column to a table</p> <p><pre><code>public function addForeignKey( string $tableName, string $schemaName, ReferenceInterface $reference ): string;\n</code></pre> Generates SQL to add an index to a table</p> <p><pre><code>public function addIndex( string $tableName, string $schemaName, IndexInterface $index ): string;\n</code></pre> Generates SQL to add an index to a table</p> <p><pre><code>public function addPrimaryKey( string $tableName, string $schemaName, IndexInterface $index ): string;\n</code></pre> Generates SQL to add the primary key to a table</p> <p><pre><code>public function createTable( string $tableName, string $schemaName, array $definition ): string;\n</code></pre> Generates SQL to create a table</p> <p><pre><code>public function createView( string $viewName, array $definition, string $schemaName = null ): string;\n</code></pre> Generates SQL to create a view</p> <p><pre><code>public function describeColumns( string $table, string $schema = null ): string;\n</code></pre> Generates SQL describing a table</p> <pre><code>print_r(\n    $dialect-&gt;describeColumns(\"posts\")\n);\n</code></pre> <p><pre><code>public function describeIndex( string $index ): string;\n</code></pre> Generates SQL to query indexes detail on a table</p> <p><pre><code>public function describeIndexes( string $table, string $schema = null ): string;\n</code></pre> Generates SQL to query indexes on a table</p> <p><pre><code>public function describeReferences( string $table, string $schema = null ): string;\n</code></pre> Generates SQL to query foreign keys on a table</p> <p><pre><code>public function dropColumn( string $tableName, string $schemaName, string $columnName ): string;\n</code></pre> Generates SQL to delete a column from a table</p> <p><pre><code>public function dropForeignKey( string $tableName, string $schemaName, string $referenceName ): string;\n</code></pre> Generates SQL to delete a foreign key from a table</p> <p><pre><code>public function dropIndex( string $tableName, string $schemaName, string $indexName ): string;\n</code></pre> Generates SQL to delete an index from a table</p> <p><pre><code>public function dropPrimaryKey( string $tableName, string $schemaName ): string;\n</code></pre> Generates SQL to delete primary key from a table</p> <p><pre><code>public function dropTable( string $tableName, string $schemaName = null, bool $ifExists = bool ): string;\n</code></pre> Generates SQL to drop a table</p> <p><pre><code>public function dropView( string $viewName, string $schemaName = null, bool $ifExists = bool ): string;\n</code></pre> Generates SQL to drop a view</p> <p><pre><code>public function forUpdate( string $sqlQuery ): string;\n</code></pre> Returns a SQL modified with a FOR UPDATE clause. For SQLite it returns the original query</p> <p><pre><code>public function getColumnDefinition( ColumnInterface $column ): string;\n</code></pre> Gets the column name in SQLite</p> <p><pre><code>public function listIndexesSql( string $table, string $schema = null, string $keyName = null ): string;\n</code></pre> Generates the SQL to get query list of indexes</p> <pre><code>print_r(\n    $dialect-&gt;listIndexesSql(\"blog\")\n);\n</code></pre> <p><pre><code>public function listTables( string $schemaName = null ): string;\n</code></pre> List all tables in database</p> <pre><code>print_r(\n    $dialect-&gt;listTables(\"blog\")\n);\n</code></pre> <p><pre><code>public function listViews( string $schemaName = null ): string;\n</code></pre> Generates the SQL to list all views of a schema or user</p> <p><pre><code>public function modifyColumn( string $tableName, string $schemaName, ColumnInterface $column, ColumnInterface $currentColumn = null ): string;\n</code></pre> Generates SQL to modify a column in a table</p> <p><pre><code>public function sharedLock( string $sqlQuery ): string;\n</code></pre> Returns a SQL modified a shared lock statement. For now this method returns the original query</p> <p><pre><code>public function tableExists( string $tableName, string $schemaName = null ): string;\n</code></pre> Generates SQL checking for the existence of a schema.table</p> <pre><code>echo $dialect-&gt;tableExists(\"posts\", \"blog\");\n\necho $dialect-&gt;tableExists(\"posts\");\n</code></pre> <p><pre><code>public function tableOptions( string $table, string $schema = null ): string;\n</code></pre> Generates the SQL to describe the table creation options</p> <p><pre><code>public function truncateTable( string $tableName, string $schemaName ): string;\n</code></pre> Generates SQL to truncate a table</p> <p><pre><code>public function viewExists( string $viewName, string $schemaName = null ): string;\n</code></pre> Generates SQL checking for the existence of a schema.view</p>"},{"location":"api/phalcon_db/#dbdialectinterface","title":"Db\\DialectInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Db dialects</p>"},{"location":"api/phalcon_db/#methods_14","title":"Methods","text":"<p><pre><code>public function addColumn( string $tableName, string $schemaName, ColumnInterface $column ): string;\n</code></pre> Generates SQL to add a column to a table</p> <p><pre><code>public function addForeignKey( string $tableName, string $schemaName, ReferenceInterface $reference ): string;\n</code></pre> Generates SQL to add an index to a table</p> <p><pre><code>public function addIndex( string $tableName, string $schemaName, IndexInterface $index ): string;\n</code></pre> Generates SQL to add an index to a table</p> <p><pre><code>public function addPrimaryKey( string $tableName, string $schemaName, IndexInterface $index ): string;\n</code></pre> Generates SQL to add the primary key to a table</p> <p><pre><code>public function createSavepoint( string $name ): string;\n</code></pre> Generate SQL to create a new savepoint</p> <p><pre><code>public function createTable( string $tableName, string $schemaName, array $definition ): string;\n</code></pre> Generates SQL to create a table</p> <p><pre><code>public function createView( string $viewName, array $definition, string $schemaName = null ): string;\n</code></pre> Generates SQL to create a view</p> <p><pre><code>public function describeColumns( string $table, string $schema = null ): string;\n</code></pre> Generates SQL to describe a table</p> <p><pre><code>public function describeIndexes( string $table, string $schema = null ): string;\n</code></pre> Generates SQL to query indexes on a table</p> <p><pre><code>public function describeReferences( string $table, string $schema = null ): string;\n</code></pre> Generates SQL to query foreign keys on a table</p> <p><pre><code>public function dropColumn( string $tableName, string $schemaName, string $columnName ): string;\n</code></pre> Generates SQL to delete a column from a table</p> <p><pre><code>public function dropForeignKey( string $tableName, string $schemaName, string $referenceName ): string;\n</code></pre> Generates SQL to delete a foreign key from a table</p> <p><pre><code>public function dropIndex( string $tableName, string $schemaName, string $indexName ): string;\n</code></pre>  Generates SQL to delete an index from a table</p> <p><pre><code>public function dropPrimaryKey( string $tableName, string $schemaName ): string;\n</code></pre> Generates SQL to delete primary key from a table</p> <p><pre><code>public function dropTable( string $tableName, string $schemaName ): string;\n</code></pre> Generates SQL to drop a table</p> <p><pre><code>public function dropView( string $viewName, string $schemaName = null, bool $ifExists = bool ): string;\n</code></pre> Generates SQL to drop a view</p> <p><pre><code>public function forUpdate( string $sqlQuery ): string;\n</code></pre> Returns a SQL modified with a FOR UPDATE clause</p> <p><pre><code>public function getColumnDefinition( ColumnInterface $column ): string;\n</code></pre> Gets the column name in RDBMS</p> <p><pre><code>public function getColumnList( array $columnList ): string;\n</code></pre> Gets a list of columns</p> <p><pre><code>public function getCustomFunctions(): array;\n</code></pre> Returns registered functions</p> <p><pre><code>public function getSqlExpression( array $expression, string $escapeChar = null, mixed $bindCounts = null ): string;\n</code></pre> Transforms an intermediate representation for an expression into a database system valid expression</p> <p><pre><code>public function limit( string $sqlQuery, mixed $number ): string;\n</code></pre> Generates the SQL for LIMIT clause</p> <p><pre><code>public function listTables( string $schemaName = null ): string;\n</code></pre> List all tables in database</p> <p><pre><code>public function modifyColumn( string $tableName, string $schemaName, ColumnInterface $column, ColumnInterface $currentColumn = null ): string;\n</code></pre> Generates SQL to modify a column in a table</p> <p><pre><code>public function registerCustomFunction( string $name, callable $customFunction ): Dialect;\n</code></pre> Registers custom SQL functions</p> <p><pre><code>public function releaseSavepoint( string $name ): string;\n</code></pre> Generate SQL to release a savepoint</p> <p><pre><code>public function rollbackSavepoint( string $name ): string;\n</code></pre> Generate SQL to rollback a savepoint</p> <p><pre><code>public function select( array $definition ): string;\n</code></pre> Builds a SELECT statement</p> <p><pre><code>public function sharedLock( string $sqlQuery ): string;\n</code></pre> Returns a SQL modified with a LOCK IN SHARE MODE clause</p> <p><pre><code>public function supportsReleaseSavepoints(): bool;\n</code></pre> Checks whether the platform supports releasing savepoints.</p> <p><pre><code>public function supportsSavepoints(): bool;\n</code></pre> Checks whether the platform supports savepoints</p> <p><pre><code>public function tableExists( string $tableName, string $schemaName = null ): string;\n</code></pre> Generates SQL checking for the existence of a schema.table</p> <p><pre><code>public function tableOptions( string $table, string $schema = null ): string;\n</code></pre> Generates the SQL to describe the table creation options</p> <p><pre><code>public function viewExists( string $viewName, string $schemaName = null ): string;\n</code></pre> Generates SQL checking for the existence of a schema.view</p>"},{"location":"api/phalcon_db/#dbenum","title":"Db\\Enum","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Constants for Phalcon\\Db</p>"},{"location":"api/phalcon_db/#constants_1","title":"Constants","text":"<pre><code>const FETCH_ASSOC;\nconst FETCH_BOTH;\nconst FETCH_BOUND;\nconst FETCH_CLASS;\nconst FETCH_CLASSTYPE;\nconst FETCH_COLUMN;\nconst FETCH_FUNC;\nconst FETCH_GROUP;\nconst FETCH_INTO;\nconst FETCH_KEY_PAIR;\nconst FETCH_LAZY;\nconst FETCH_NAMED;\nconst FETCH_NUM;\nconst FETCH_OBJ;\nconst FETCH_PROPS_LATE;\nconst FETCH_SERIALIZE;\nconst FETCH_UNIQUE;\n</code></pre>"},{"location":"api/phalcon_db/#dbexception","title":"Db\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Db will use this class</p>"},{"location":"api/phalcon_db/#dbindex","title":"Db\\Index","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>IndexInterface</code></li> </ul> </li> </ul> <p>Allows to define indexes to be used on tables. Indexes are a common way to enhance database performance. An index allows the database server to find and retrieve specific rows much faster than it could do without an index</p> <pre><code>// Define new unique index\n$index_unique = new \\Phalcon\\Db\\Index(\n    'column_UNIQUE',\n    [\n        'column',\n        'column',\n    ],\n    'UNIQUE'\n);\n\n// Define new primary index\n$index_primary = new \\Phalcon\\Db\\Index(\n    'PRIMARY',\n    [\n        'column',\n    ]\n);\n\n// Add index to existing table\n$connection-&gt;addIndex(\"robots\", null, $index_unique);\n$connection-&gt;addIndex(\"robots\", null, $index_primary);\n</code></pre>"},{"location":"api/phalcon_db/#properties_10","title":"Properties","text":"<pre><code>/**\n * Index columns\n *\n * @var array\n */\nprotected $columns;\n\n/**\n * Index name\n *\n * @var string\n */\nprotected $name;\n\n/**\n * Index type\n *\n * @var string\n */\nprotected $type;\n</code></pre>"},{"location":"api/phalcon_db/#methods_15","title":"Methods","text":"<p><pre><code>public function __construct( string $name, array $columns, string $type = string );\n</code></pre> Phalcon\\Db\\Index constructor</p> <p><pre><code>public function getColumns(): array;\n</code></pre> Index columns</p> <p><pre><code>public function getName(): string;\n</code></pre> Index name</p> <p><pre><code>public function getType(): string;\n</code></pre> Index type</p>"},{"location":"api/phalcon_db/#dbindexinterface","title":"Db\\IndexInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Db\\Index</p>"},{"location":"api/phalcon_db/#methods_16","title":"Methods","text":"<p><pre><code>public function getColumns(): array;\n</code></pre> Gets the columns that corresponds the index</p> <p><pre><code>public function getName(): string;\n</code></pre> Gets the index name</p> <p><pre><code>public function getType(): string;\n</code></pre> Gets the index type</p>"},{"location":"api/phalcon_db/#dbprofiler","title":"Db\\Profiler","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\Profiler\\Item</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Instances of Phalcon\\Db can generate execution profiles on SQL statements sent to the relational database. Profiled information includes execution time in milliseconds. This helps you to identify bottlenecks in your applications.</p> <pre><code>use Phalcon\\Db\\Profiler;\nuse Phalcon\\Events\\Event;\nuse Phalcon\\Events\\Manager;\n\n$profiler = new Profiler();\n$eventsManager = new Manager();\n\n$eventsManager-&gt;attach(\n    \"db\",\n    function (Event $event, $connection) use ($profiler) {\n        if ($event-&gt;getType() === \"beforeQuery\") {\n            $sql = $connection-&gt;getSQLStatement();\n\n            // Start a profile with the active connection\n            $profiler-&gt;startProfile($sql);\n        }\n\n        if ($event-&gt;getType() === \"afterQuery\") {\n            // Stop the active profile\n            $profiler-&gt;stopProfile();\n        }\n    }\n);\n\n// Set the event manager on the connection\n$connection-&gt;setEventsManager($eventsManager);\n\n\n$sql = \"SELECT buyer_name, quantity, product_name\nFROM buyers LEFT JOIN products ON\nbuyers.pid=products.id\";\n\n// Execute a SQL statement\n$connection-&gt;query($sql);\n\n// Get the last profile in the profiler\n$profile = $profiler-&gt;getLastProfile();\n\necho \"SQL Statement: \", $profile-&gt;getSQLStatement(), \"\\n\";\necho \"Start Time: \", $profile-&gt;getInitialTime(), \"\\n\";\necho \"Final Time: \", $profile-&gt;getFinalTime(), \"\\n\";\necho \"Total Elapsed Time: \", $profile-&gt;getTotalElapsedSeconds(), \"\\n\";\n</code></pre>"},{"location":"api/phalcon_db/#properties_11","title":"Properties","text":"<pre><code>/**\n * Active Item\n *\n * @var Item\n */\nprotected $activeProfile;\n\n/**\n * All the Items in the active profile\n *\n * @var Item[]\n */\nprotected $allProfiles;\n\n/**\n * Total time spent by all profiles to complete\n *\n * @var float\n */\nprotected $totalSeconds = 0;\n</code></pre>"},{"location":"api/phalcon_db/#methods_17","title":"Methods","text":"<p><pre><code>public function getLastProfile(): Item;\n</code></pre> Returns the last profile executed in the profiler</p> <p><pre><code>public function getNumberTotalStatements(): int;\n</code></pre> Returns the total number of SQL statements processed</p> <p><pre><code>public function getProfiles(): Item[];\n</code></pre> Returns all the processed profiles</p> <p><pre><code>public function getTotalElapsedSeconds(): double;\n</code></pre> Returns the total time in seconds spent by the profiles</p> <p><pre><code>public function reset(): Profiler;\n</code></pre> Resets the profiler, cleaning up all the profiles</p> <p><pre><code>public function startProfile( string $sqlStatement, mixed $sqlVariables = null, mixed $sqlBindTypes = null ): Profiler;\n</code></pre> Starts the profile of a SQL sentence</p> <p><pre><code>public function stopProfile(): Profiler;\n</code></pre> Stops the active profile</p>"},{"location":"api/phalcon_db/#dbprofileritem","title":"Db\\Profiler\\Item","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db\\Profiler</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This class identifies each profile in a Phalcon\\Db\\Profiler</p>"},{"location":"api/phalcon_db/#properties_12","title":"Properties","text":"<pre><code>/**\n * Timestamp when the profile ended\n *\n * @var double\n */\nprotected $finalTime;\n\n/**\n * Timestamp when the profile started\n *\n * @var double\n */\nprotected $initialTime;\n\n/**\n * SQL bind types related to the profile\n *\n * @var array\n */\nprotected $sqlBindTypes;\n\n/**\n * SQL statement related to the profile\n *\n * @var string\n */\nprotected $sqlStatement;\n\n/**\n * SQL variables related to the profile\n *\n * @var array\n */\nprotected $sqlVariables;\n</code></pre>"},{"location":"api/phalcon_db/#methods_18","title":"Methods","text":"<p><pre><code>public function getFinalTime(): double;\n</code></pre> Return the timestamp when the profile ended</p> <p><pre><code>public function getInitialTime(): double;\n</code></pre> Return the timestamp when the profile started</p> <p><pre><code>public function getSqlBindTypes(): array;\n</code></pre> Return the SQL bind types related to the profile</p> <p><pre><code>public function getSqlStatement(): string;\n</code></pre> Return the SQL statement related to the profile</p> <p><pre><code>public function getSqlVariables(): array;\n</code></pre> Return the SQL variables related to the profile</p> <p><pre><code>public function getTotalElapsedSeconds(): double;\n</code></pre> Returns the total time in seconds spent by the profile</p> <p><pre><code>public function setFinalTime( double $finalTime )\n</code></pre> Return the timestamp when the profile ended</p> <p><pre><code>public function setInitialTime( double $initialTime )\n</code></pre> Return the timestamp when the profile started</p> <p><pre><code>public function setSqlBindTypes( array $sqlBindTypes )\n</code></pre> Return the SQL bind types related to the profile</p> <p><pre><code>public function setSqlStatement( string $sqlStatement )\n</code></pre> Return the SQL statement related to the profile</p> <p><pre><code>public function setSqlVariables( array $sqlVariables )\n</code></pre> Return the SQL variables related to the profile</p>"},{"location":"api/phalcon_db/#dbrawvalue","title":"Db\\RawValue","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This class allows to insert/update raw data without quoting or formatting.</p> <p>The next example shows how to use the MySQL now() function as a field value.</p> <pre><code>$subscriber = new Subscribers();\n\n$subscriber-&gt;email     = \"andres@phalcon.io\";\n$subscriber-&gt;createdAt = new \\Phalcon\\Db\\RawValue(\"now()\");\n\n$subscriber-&gt;save();\n</code></pre>"},{"location":"api/phalcon_db/#properties_13","title":"Properties","text":"<pre><code>/**\n * Raw value without quoting or formatting\n *\n * @var string\n */\nprotected $value;\n</code></pre>"},{"location":"api/phalcon_db/#methods_19","title":"Methods","text":"<p><pre><code>public function __construct( mixed $value );\n</code></pre> Phalcon\\Db\\RawValue constructor</p> <pre><code>public function __toString(): string;\n</code></pre> <pre><code>public function getValue(): string;\n</code></pre>"},{"location":"api/phalcon_db/#dbreference","title":"Db\\Reference","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>ReferenceInterface</code></li> </ul> </li> </ul> <p>Allows to define reference constraints on tables</p> <pre><code>$reference = new \\Phalcon\\Db\\Reference(\n    \"field_fk\",\n    [\n        \"referencedSchema\"  =&gt; \"invoicing\",\n        \"referencedTable\"   =&gt; \"products\",\n        \"columns\"           =&gt; [\n            \"producttype\",\n            \"product_code\",\n        ],\n        \"referencedColumns\" =&gt; [\n            \"type\",\n            \"code\",\n        ],\n    ]\n);\n</code></pre>"},{"location":"api/phalcon_db/#properties_14","title":"Properties","text":"<pre><code>/**\n * Local reference columns\n *\n * @var array\n */\nprotected $columns;\n\n/**\n * Constraint name\n *\n * @var string\n */\nprotected $name;\n\n/**\n * Referenced Columns\n *\n * @var array\n */\nprotected $referencedColumns;\n\n/**\n * Referenced Schema\n *\n * @var string\n */\nprotected $referencedSchema;\n\n/**\n * Referenced Table\n *\n * @var string\n */\nprotected $referencedTable;\n\n/**\n * Schema name\n *\n * @var string\n */\nprotected $schemaName;\n\n/**\n * ON DELETE\n *\n * @var string\n */\nprotected $onDelete;\n\n/**\n * ON UPDATE\n *\n * @var string\n */\nprotected $onUpdate;\n</code></pre>"},{"location":"api/phalcon_db/#methods_20","title":"Methods","text":"<p><pre><code>public function __construct( string $name, array $definition );\n</code></pre> Phalcon\\Db\\Reference constructor</p> <p><pre><code>public function getColumns(): array;\n</code></pre> Local reference columns</p> <p><pre><code>public function getName(): string;\n</code></pre> Constraint name</p> <p><pre><code>public function getOnDelete(): string;\n</code></pre> ON DELETE</p> <p><pre><code>public function getOnUpdate(): string;\n</code></pre> ON UPDATE</p> <p><pre><code>public function getReferencedColumns(): array;\n</code></pre> Referenced Columns</p> <p><pre><code>public function getReferencedSchema(): string;\n</code></pre> Referenced Schema</p> <p><pre><code>public function getReferencedTable(): string;\n</code></pre> Referenced Table</p> <p><pre><code>public function getSchemaName(): string;\n</code></pre> Schema name</p>"},{"location":"api/phalcon_db/#dbreferenceinterface","title":"Db\\ReferenceInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Db\\Reference</p>"},{"location":"api/phalcon_db/#methods_21","title":"Methods","text":"<p><pre><code>public function getColumns(): array;\n</code></pre> Gets local columns which reference is based</p> <p><pre><code>public function getName(): string;\n</code></pre> Gets the index name</p> <p><pre><code>public function getOnDelete(): string;\n</code></pre> Gets the referenced on delete</p> <p><pre><code>public function getOnUpdate(): string;\n</code></pre> Gets the referenced on update</p> <p><pre><code>public function getReferencedColumns(): array;\n</code></pre> Gets referenced columns</p> <p><pre><code>public function getReferencedSchema(): string;\n</code></pre> Gets the schema where referenced table is</p> <p><pre><code>public function getReferencedTable(): string;\n</code></pre> Gets the referenced table</p> <p><pre><code>public function getSchemaName(): string;\n</code></pre> Gets the schema where referenced table is</p>"},{"location":"api/phalcon_db/#dbresultpdoresult","title":"Db\\Result\\PdoResult","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db\\Result</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Db\\Enum</code></li> <li><code>Phalcon\\Db\\ResultInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>ResultInterface</code></li> </ul> </li> </ul> <p>Encapsulates the resultset internals</p> <pre><code>$result = $connection-&gt;query(\"SELECTFROM robots ORDER BY name\");\n\n$result-&gt;setFetchMode(\n    \\Phalcon\\Db\\Enum::FETCH_NUM\n);\n\nwhile ($robot = $result-&gt;fetchArray()) {\n    print_r($robot);\n}\n</code></pre>"},{"location":"api/phalcon_db/#properties_15","title":"Properties","text":"<pre><code>//\nprotected $bindParams;\n\n//\nprotected $bindTypes;\n\n//\nprotected $connection;\n\n/**\n * Active fetch mode\n */\nprotected $fetchMode;\n\n/**\n * Internal resultset\n *\n * @var \\PDOStatement\n */\nprotected $pdoStatement;\n\n//\nprotected $result;\n\n//\nprotected $rowCount = false;\n\n//\nprotected $sqlStatement;\n</code></pre>"},{"location":"api/phalcon_db/#methods_22","title":"Methods","text":"<p><pre><code>public function __construct( AdapterInterface $connection, \\PDOStatement $result, mixed $sqlStatement = null, mixed $bindParams = null, mixed $bindTypes = null );\n</code></pre> Phalcon\\Db\\Result\\Pdo constructor</p> <p><pre><code>public function dataSeek( long $number ): void;\n</code></pre> Moves internal resultset cursor to another position letting us to fetch a certain row</p> <pre><code>$result = $connection-&gt;query(\n    \"SELECTFROM robots ORDER BY name\"\n);\n\n// Move to third row on result\n$result-&gt;dataSeek(2);\n\n// Fetch third row\n$row = $result-&gt;fetch();\n</code></pre> <p><pre><code>public function execute(): bool;\n</code></pre> Allows to execute the statement again. Some database systems don't support scrollable cursors. So, as cursors are forward only, we need to execute the cursor again to fetch rows from the beginning</p> <p><pre><code>public function fetch( mixed $fetchStyle = null, mixed $cursorOrientation = null, mixed $cursorOffset = null );\n</code></pre> Fetches an array/object of strings that corresponds to the fetched row, or FALSE if there are no more rows. This method is affected by the active fetch flag set using <code>Phalcon\\Db\\Result\\Pdo::setFetchMode()</code></p> <pre><code>$result = $connection-&gt;query(\"SELECTFROM robots ORDER BY name\");\n\n$result-&gt;setFetchMode(\n    \\Phalcon\\Enum::FETCH_OBJ\n);\n\nwhile ($robot = $result-&gt;fetch()) {\n    echo $robot-&gt;name;\n}\n</code></pre> <p><pre><code>public function fetchAll( mixed $fetchStyle = null, mixed $fetchArgument = null, mixed $ctorArgs = null ): array;\n</code></pre> Returns an array of arrays containing all the records in the result This method is affected by the active fetch flag set using <code>Phalcon\\Db\\Result\\Pdo::setFetchMode()</code></p> <pre><code>$result = $connection-&gt;query(\n    \"SELECTFROM robots ORDER BY name\"\n);\n\n$robots = $result-&gt;fetchAll();\n</code></pre> <p><pre><code>public function fetchArray();\n</code></pre> Returns an array of strings that corresponds to the fetched row, or FALSE if there are no more rows. This method is affected by the active fetch flag set using <code>Phalcon\\Db\\Result\\Pdo::setFetchMode()</code></p> <pre><code>$result = $connection-&gt;query(\"SELECTFROM robots ORDER BY name\");\n\n$result-&gt;setFetchMode(\n    \\Phalcon\\Enum::FETCH_NUM\n);\n\nwhile ($robot = result-&gt;fetchArray()) {\n    print_r($robot);\n}\n</code></pre> <p><pre><code>public function getInternalResult(): \\PDOStatement;\n</code></pre> Gets the internal PDO result object</p> <p><pre><code>public function numRows(): int;\n</code></pre> Gets number of rows returned by a resultset</p> <pre><code>$result = $connection-&gt;query(\n    \"SELECTFROM robots ORDER BY name\"\n);\n\necho \"There are \", $result-&gt;numRows(), \" rows in the resultset\";\n</code></pre> <p><pre><code>public function setFetchMode( int $fetchMode, mixed $colNoOrClassNameOrObject = null, mixed $ctorargs = null ): bool;\n</code></pre> Changes the fetching mode affecting Phalcon\\Db\\Result\\Pdo::fetch()</p> <pre><code>// Return array with integer indexes\n$result-&gt;setFetchMode(\n    \\Phalcon\\Enum::FETCH_NUM\n);\n\n// Return associative array without integer indexes\n$result-&gt;setFetchMode(\n    \\Phalcon\\Enum::FETCH_ASSOC\n);\n\n// Return associative array together with integer indexes\n$result-&gt;setFetchMode(\n    \\Phalcon\\Enum::FETCH_BOTH\n);\n\n// Return an object\n$result-&gt;setFetchMode(\n    \\Phalcon\\Enum::FETCH_OBJ\n);\n</code></pre>"},{"location":"api/phalcon_db/#dbresultinterface","title":"Db\\ResultInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Db</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Db\\Result objects</p>"},{"location":"api/phalcon_db/#methods_23","title":"Methods","text":"<p><pre><code>public function dataSeek( long $number );\n</code></pre> Moves internal resultset cursor to another position letting us to fetch a certain row</p> <p><pre><code>public function execute(): bool;\n</code></pre> Allows to execute the statement again. Some database systems don't support scrollable cursors. So, as cursors are forward only, we need to execute the cursor again to fetch rows from the beginning</p> <p><pre><code>public function fetch(): mixed;\n</code></pre> Fetches an array/object of strings that corresponds to the fetched row, or FALSE if there are no more rows. This method is affected by the active fetch flag set using <code>Phalcon\\Db\\Result\\Pdo::setFetchMode()</code></p> <p><pre><code>public function fetchAll(): array;\n</code></pre> Returns an array of arrays containing all the records in the result. This method is affected by the active fetch flag set using <code>Phalcon\\Db\\Result\\Pdo::setFetchMode()</code></p> <p><pre><code>public function fetchArray(): mixed;\n</code></pre> Returns an array of strings that corresponds to the fetched row, or FALSE if there are no more rows. This method is affected by the active fetch flag set using <code>Phalcon\\Db\\Result\\Pdo::setFetchMode()</code></p> <p><pre><code>public function getInternalResult(): \\PDOStatement;\n</code></pre> Gets the internal PDO result object</p> <p><pre><code>public function numRows(): int;\n</code></pre> Gets number of rows returned by a resultset</p> <p><pre><code>public function setFetchMode( int $fetchMode ): bool;\n</code></pre> Changes the fetching mode affecting Phalcon\\Db\\Result\\Pdo::fetch()</p>"},{"location":"api/phalcon_debug/","title":"Phalcon debug","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_debug/#debug","title":"Debug","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Support</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>ErrorException</code></li> <li><code>Phalcon\\Debug\\Exception</code></li> <li><code>ReflectionClass</code></li> <li><code>ReflectionException</code></li> <li><code>ReflectionFunction</code></li> <li><code>Throwable</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Provides debug capabilities to Phalcon applications</p>"},{"location":"api/phalcon_debug/#properties","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $blacklist;\n\n/**\n * @var array\n */\nprotected $data;\n\n/**\n * @var bool\n */\nprotected $hideDocumentRoot = false;\n\n/**\n * @var bool\n */\nprotected $static $isActive;\n\n/**\n * @var bool\n */\nprotected $showBackTrace = true;\n\n/**\n * @var bool\n */\nprotected $showFileFragment = false;\n\n/**\n * @var bool\n */\nprotected $showFiles = true;\n\n/**\n * @var string\n    */\nprotected $uri = https://assets.phalcon.io/debug/4.0.x/;\n</code></pre>"},{"location":"api/phalcon_debug/#methods","title":"Methods","text":"<p><pre><code>public function clearVars(): Debug;\n</code></pre> Clears are variables added previously</p> <p><pre><code>public function debugVar( mixed $varz, string $key = null ): Debug;\n</code></pre> Adds a variable to the debug output</p> <p><pre><code>public function getCssSources(): string;\n</code></pre> Returns the CSS sources</p> <p><pre><code>public function getJsSources(): string;\n</code></pre> Returns the JavaScript sources</p> <p><pre><code>public function getVersion(): string;\n</code></pre> Generates a link to the current version documentation</p> <p><pre><code>public function halt(): void;\n</code></pre> Halts the request showing a backtrace</p> <p><pre><code>public function listen( bool $exceptions = bool, bool $lowSeverity = bool ): Debug;\n</code></pre> Listen for uncaught exceptions and non silent notices or warnings</p> <p><pre><code>public function listenExceptions(): Debug;\n</code></pre> Listen for uncaught exceptions</p> <p><pre><code>public function listenLowSeverity(): Debug;\n</code></pre> Listen for non silent notices or warnings</p> <p><pre><code>public function onUncaughtException( \\Throwable $exception ): bool;\n</code></pre> Handles uncaught exceptions</p> <p><pre><code>public function onUncaughtLowSeverity( mixed $severity, mixed $message, mixed $file, mixed $line, mixed $context ): void;\n</code></pre> Throws an exception when a notice or warning is raised</p> <p><pre><code>public function renderHtml( \\Throwable $exception ): string;\n</code></pre> Render exception to html format.</p> <p><pre><code>public function setBlacklist( array $blacklist ): Debug;\n</code></pre> Sets if files the exception's backtrace must be showed</p> <p><pre><code>public function setShowBackTrace( bool $showBackTrace ): Debug;\n</code></pre> Sets if files the exception's backtrace must be showed</p> <p><pre><code>public function setShowFileFragment( bool $showFileFragment ): Debug;\n</code></pre> Sets if files must be completely opened and showed in the output or just the fragment related to the exception</p> <p><pre><code>public function setShowFiles( bool $showFiles ): Debug;\n</code></pre> Set if files part of the backtrace must be shown in the output</p> <p><pre><code>public function setUri( string $uri ): Debug;\n</code></pre> Change the base URI for static resources</p> <p><pre><code>protected function escapeString( mixed $value ): string;\n</code></pre> Escapes a string with htmlentities</p> <p><pre><code>protected function getArrayDump( array $argument, mixed $n = int ): string | null;\n</code></pre> Produces a recursive representation of an array</p> <p><pre><code>protected function getVarDump( mixed $variable ): string;\n</code></pre> Produces an string representation of a variable</p> <p><pre><code>final protected function showTraceItem( int $n, array $trace ): string;\n</code></pre> Shows a backtrace item</p>"},{"location":"api/phalcon_debug/#debugdump","title":"Debug\\Dump","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Debug</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\Di</code></li> <li><code>Phalcon\\Helper\\Json\\Encode</code></li> <li><code>Reflection</code></li> <li><code>ReflectionClass</code></li> <li><code>ReflectionProperty</code></li> <li><code>stdClass</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Dumps information about a variable(s)</p> <pre><code>$foo = 123;\n\necho (new \\Phalcon\\Debug\\Dump())-&gt;variable($foo, \"foo\");\n</code></pre> <pre><code>$foo = \"string\";\n$bar = [\"key\" =&gt; \"value\"];\n$baz = new stdClass();\n\necho (new \\Phalcon\\Debug\\Dump())-&gt;variables($foo, $bar, $baz);\n</code></pre>"},{"location":"api/phalcon_debug/#properties_1","title":"Properties","text":"<pre><code>/**\n * @var bool\n */\nprotected $detailed = false;\n\n/**\n * @var array\n */\nprotected $methods;\n\n/**\n * @var array\n */\nprotected $styles;\n</code></pre>"},{"location":"api/phalcon_debug/#methods_1","title":"Methods","text":"<p><pre><code>public function __construct( array $styles = [], bool $detailed = bool );\n</code></pre> Phalcon\\Debug\\Dump constructor</p> <p><pre><code>public function all(): string;\n</code></pre> Alias of variables() method</p> <pre><code>public function getDetailed(): bool;\n</code></pre> <p><pre><code>public function one( mixed $variable, string $name = null ): string;\n</code></pre> Alias of variable() method</p> <pre><code>public function setDetailed( bool $detailed )\n</code></pre> <p><pre><code>public function setStyles( array $styles = [] ): array;\n</code></pre> Set styles for vars type</p> <p><pre><code>public function toJson( mixed $variable ): string;\n</code></pre> Returns an JSON string of information about a single variable.</p> <pre><code>$foo = [\n    \"key\" =&gt; \"value\",\n];\n\necho (new \\Phalcon\\Debug\\Dump())-&gt;toJson($foo);\n\n$foo = new stdClass();\n$foo-&gt;bar = \"buz\";\n\necho (new \\Phalcon\\Debug\\Dump())-&gt;toJson($foo);\n</code></pre> <p><pre><code>public function variable( mixed $variable, string $name = null ): string;\n</code></pre> Returns an HTML string of information about a single variable.</p> <pre><code>echo (new \\Phalcon\\Debug\\Dump())-&gt;variable($foo, \"foo\");\n</code></pre> <p><pre><code>public function variables(): string;\n</code></pre> Returns an HTML string of debugging information about any number of variables, each wrapped in a \"pre\" tag.</p> <pre><code>$foo = \"string\";\n$bar = [\"key\" =&gt; \"value\"];\n$baz = new stdClass();\n\necho (new \\Phalcon\\Debug\\Dump())-&gt;variables($foo, $bar, $baz);\n</code></pre> <p><pre><code>protected function getStyle( string $type ): string;\n</code></pre> Get style for type</p> <p><pre><code>protected function output( mixed $variable, string $name = null, int $tab = int ): string;\n</code></pre> Prepare an HTML string of information about a single variable.</p>"},{"location":"api/phalcon_debug/#debugexception","title":"Debug\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Debug</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Debug will use this class</p>"},{"location":"api/phalcon_di/","title":"Phalcon di","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_di/#di","title":"Di","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Config\\Adapter\\Php</code></li> <li><code>Phalcon\\Config\\Adapter\\Yaml</code></li> <li><code>Phalcon\\Config\\ConfigInterface</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Di\\Exception</code></li> <li><code>Phalcon\\Di\\Exception\\ServiceResolutionException</code></li> <li><code>Phalcon\\Di\\InitializationAwareInterface</code></li> <li><code>Phalcon\\Di\\InjectionAwareInterface</code></li> <li><code>Phalcon\\Di\\Service</code></li> <li><code>Phalcon\\Di\\ServiceInterface</code></li> <li><code>Phalcon\\Di\\ServiceProviderInterface</code></li> <li><code>Phalcon\\Events\\ManagerInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>DiInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Di is a component that implements Dependency Injection/Service Location of services and it's itself a container for them.</p> <p>Since Phalcon is highly decoupled, Phalcon\\Di is essential to integrate the different components of the framework. The developer can also use this component to inject dependencies and manage global instances of the different classes used in the application.</p> <p>Basically, this component implements the <code>Inversion of Control</code> pattern. Applying this, the objects do not receive their dependencies using setters or constructors, but requesting a service dependency injector. This reduces the overall complexity, since there is only one way to get the required dependencies within a component.</p> <p>Additionally, this pattern increases testability in the code, thus making it less prone to errors.</p> <pre><code>use Phalcon\\Di;\nuse Phalcon\\Http\\Request;\n\n$di = new Di();\n\n// Using a string definition\n$di-&gt;set(\"request\", Request::class, true);\n\n// Using an anonymous function\n$di-&gt;setShared(\n    \"request\",\n    function () {\n        return new Request();\n    }\n);\n\n$request = $di-&gt;getRequest();\n</code></pre>"},{"location":"api/phalcon_di/#properties","title":"Properties","text":"<pre><code>/**\n * List of registered services\n *\n * @var ServiceInterface[]\n */\nprotected $services;\n\n/**\n * List of shared instances\n *\n * @var array\n */\nprotected $sharedInstances;\n\n/**\n * Events Manager\n *\n * @var ManagerInterface|null\n */\nprotected $eventsManager;\n\n/**\n * Latest DI build\n *\n * @var DiInterface|null\n */\nprotected $static $_default;\n</code></pre>"},{"location":"api/phalcon_di/#methods","title":"Methods","text":"<p><pre><code>public function __call( string $method, array $arguments = [] ): mixed | null;\n</code></pre> Magic method to get or set services using setters/getters</p> <p><pre><code>public function __construct();\n</code></pre> Phalcon\\Di constructor</p> <p><pre><code>public function attempt( string $name, mixed $definition, bool $shared = bool ): ServiceInterface | bool;\n</code></pre> Attempts to register a service in the services container Only is successful if a service hasn't been registered previously with the same name</p> <p><pre><code>public function get( string $name, mixed $parameters = null ): mixed;\n</code></pre> Resolves the service based on its configuration</p> <p><pre><code>public static function getDefault(): DiInterface | null;\n</code></pre> Return the latest DI created</p> <p><pre><code>public function getInternalEventsManager(): ManagerInterface | null;\n</code></pre> Returns the internal event manager</p> <p><pre><code>public function getRaw( string $name ): mixed;\n</code></pre> Returns a service definition without resolving</p> <p><pre><code>public function getService( string $name ): ServiceInterface;\n</code></pre> Returns a Phalcon\\Di\\Service instance</p> <p><pre><code>public function getServices(): ServiceInterface[];\n</code></pre> Return the services registered in the DI</p> <p><pre><code>public function getShared( string $name, mixed $parameters = null ): mixed;\n</code></pre> Resolves a service, the resolved service is stored in the DI, subsequent requests for this service will return the same instance</p> <p><pre><code>public function has( string $name ): bool;\n</code></pre> Check whether the DI contains a service by a name</p> <p><pre><code>public function loadFromPhp( string $filePath ): void;\n</code></pre> Loads services from a php config file.</p> <pre><code>$di-&gt;loadFromPhp(\"path/services.php\");\n</code></pre> <p>And the services can be specified in the file as:</p> <pre><code>return [\n     'myComponent' =&gt; [\n         'className' =&gt; '\\Acme\\Components\\MyComponent',\n         'shared' =&gt; true,\n     ],\n     'group' =&gt; [\n         'className' =&gt; '\\Acme\\Group',\n         'arguments' =&gt; [\n             [\n                 'type' =&gt; 'service',\n                 'service' =&gt; 'myComponent',\n             ],\n         ],\n     ],\n     'user' =&gt; [\n         'className' =&gt; '\\Acme\\User',\n     ],\n];\n</code></pre> <p>@link https://docs.phalcon.io/en/latest/reference/di.html</p> <p><pre><code>public function loadFromYaml( string $filePath, array $callbacks = null ): void;\n</code></pre> Loads services from a yaml file.</p> <pre><code>$di-&gt;loadFromYaml(\n    \"path/services.yaml\",\n    [\n        \"!approot\" =&gt; function ($value) {\n            return dirname(__DIR__) . $value;\n        }\n    ]\n);\n</code></pre> <p>And the services can be specified in the file as:</p> <pre><code>myComponent:\n    className: \\Acme\\Components\\MyComponent\n    shared: true\n\ngroup:\n    className: \\Acme\\Group\n    arguments:\n        - type: service\n          name: myComponent\n\nuser:\n   className: \\Acme\\User\n</code></pre> <p>@link https://docs.phalcon.io/en/latest/reference/di.html</p> <p><pre><code>public function offsetExists( mixed $name ): bool;\n</code></pre> Check if a service is registered using the array syntax</p> <p><pre><code>public function offsetGet( mixed $name ): mixed;\n</code></pre> Allows to obtain a shared service using the array syntax</p> <pre><code>var_dump($di[\"request\"]);\n</code></pre> <p><pre><code>public function offsetSet( mixed $name, mixed $definition ): void;\n</code></pre> Allows to register a shared service using the array syntax</p> <pre><code>$di[\"request\"] = new \\Phalcon\\Http\\Request();\n</code></pre> <p><pre><code>public function offsetUnset( mixed $name ): void;\n</code></pre> Removes a service from the services container using the array syntax</p> <p><pre><code>public function register( ServiceProviderInterface $provider ): void;\n</code></pre> Registers a service provider.</p> <pre><code>use Phalcon\\Di\\DiInterface;\nuse Phalcon\\Di\\ServiceProviderInterface;\n\nclass SomeServiceProvider implements ServiceProviderInterface\n{\n    public function register(DiInterface $di)\n    {\n        $di-&gt;setShared(\n            'service',\n            function () {\n                // ...\n            }\n        );\n    }\n}\n</code></pre> <p><pre><code>public function remove( string $name ): void;\n</code></pre> Removes a service in the services container It also removes any shared instance created for the service</p> <p><pre><code>public static function reset(): void;\n</code></pre> Resets the internal default DI</p> <p><pre><code>public function set( string $name, mixed $definition, bool $shared = bool ): ServiceInterface;\n</code></pre> Registers a service in the services container</p> <p><pre><code>public static function setDefault( DiInterface $container ): void;\n</code></pre> Set a default dependency injection container to be obtained into static methods</p> <p><pre><code>public function setInternalEventsManager( ManagerInterface $eventsManager );\n</code></pre> Sets the internal event manager</p> <p><pre><code>public function setService( string $name, ServiceInterface $rawDefinition ): ServiceInterface;\n</code></pre> Sets a service using a raw Phalcon\\Di\\Service definition</p> <p><pre><code>public function setShared( string $name, mixed $definition ): ServiceInterface;\n</code></pre> Registers an \"always shared\" service in the services container</p> <p><pre><code>protected function loadFromConfig( ConfigInterface $config ): void;\n</code></pre> Loads services from a Config object.</p>"},{"location":"api/phalcon_di/#diabstractinjectionaware","title":"Di\\AbstractInjectionAware","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Di</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>InjectionAwareInterface</code></li> </ul> </li> </ul> <p>This abstract class offers common access to the DI in a class</p>"},{"location":"api/phalcon_di/#properties_1","title":"Properties","text":"<pre><code>/**\n * Dependency Injector\n *\n * @var DiInterface\n */\nprotected $container;\n</code></pre>"},{"location":"api/phalcon_di/#methods_1","title":"Methods","text":"<p><pre><code>public function getDI(): DiInterface;\n</code></pre> Returns the internal dependency injector</p> <p><pre><code>public function setDI( DiInterface $container ): void;\n</code></pre> Sets the dependency injector</p>"},{"location":"api/phalcon_di/#didiinterface","title":"Di\\DiInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Di</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>ArrayAccess</code></li> </ul> </li> <li> <p>Extends</p> <p><code>ArrayAccess</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Di</p>"},{"location":"api/phalcon_di/#methods_2","title":"Methods","text":"<p><pre><code>public function attempt( string $name, mixed $definition, bool $shared = bool ): ServiceInterface | bool;\n</code></pre> Attempts to register a service in the services container Only is successful if a service hasn't been registered previously with the same name</p> <p><pre><code>public function get( string $name, mixed $parameters = null ): mixed;\n</code></pre> Resolves the service based on its configuration</p> <p><pre><code>public static function getDefault(): DiInterface | null;\n</code></pre> Return the last DI created</p> <p><pre><code>public function getRaw( string $name ): mixed;\n</code></pre> Returns a service definition without resolving</p> <p><pre><code>public function getService( string $name ): ServiceInterface;\n</code></pre> Returns the corresponding Phalcon\\Di\\Service instance for a service</p> <p><pre><code>public function getServices(): ServiceInterface[];\n</code></pre> Return the services registered in the DI</p> <p><pre><code>public function getShared( string $name, mixed $parameters = null ): mixed;\n</code></pre> Returns a shared service based on their configuration</p> <p><pre><code>public function has( string $name ): bool;\n</code></pre> Check whether the DI contains a service by a name</p> <p><pre><code>public function remove( string $name ): void;\n</code></pre> Removes a service in the services container</p> <p><pre><code>public static function reset(): void;\n</code></pre> Resets the internal default DI</p> <p><pre><code>public function set( string $name, mixed $definition, bool $shared = bool ): ServiceInterface;\n</code></pre> Registers a service in the services container</p> <p><pre><code>public static function setDefault( DiInterface $container ): void;\n</code></pre> Set a default dependency injection container to be obtained into static methods</p> <p><pre><code>public function setService( string $name, ServiceInterface $rawDefinition ): ServiceInterface;\n</code></pre> Sets a service using a raw Phalcon\\Di\\Service definition</p> <p><pre><code>public function setShared( string $name, mixed $definition ): ServiceInterface;\n</code></pre> Registers an \"always shared\" service in the services container</p>"},{"location":"api/phalcon_di/#diexception","title":"Di\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Di</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Di will use this class</p>"},{"location":"api/phalcon_di/#diexceptionserviceresolutionexception","title":"Di\\Exception\\ServiceResolutionException","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Di\\Exception</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Phalcon\\Di\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Di\\Exception\\ServiceResolutionException</p>"},{"location":"api/phalcon_di/#difactorydefault","title":"Di\\FactoryDefault","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Di</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\FilterFactory</code></li> </ul> </li> <li> <p>Extends</p> <p><code>\\Phalcon\\Di\\Di</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>This is a variant of the standard Phalcon\\Di. By default it automatically registers all the services provided by the framework. Thanks to this, the developer does not need to register each service individually providing a full stack framework</p>"},{"location":"api/phalcon_di/#methods_3","title":"Methods","text":"<p><pre><code>public function __construct();\n</code></pre> Phalcon\\Di\\FactoryDefault constructor</p>"},{"location":"api/phalcon_di/#difactorydefaultcli","title":"Di\\FactoryDefault\\Cli","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Di\\FactoryDefault</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\FactoryDefault</code></li> <li><code>Phalcon\\Di\\Service</code></li> <li><code>Phalcon\\Filter\\FilterFactory</code></li> </ul> </li> <li> <p>Extends</p> <p><code>FactoryDefault</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Di\\FactoryDefault\\Cli</p> <p>This is a variant of the standard Phalcon\\Di. By default it automatically registers all the services provided by the framework. Thanks to this, the developer does not need to register each service individually. This class is specially suitable for CLI applications</p>"},{"location":"api/phalcon_di/#methods_4","title":"Methods","text":"<p><pre><code>public function __construct();\n</code></pre> Phalcon\\Di\\FactoryDefault\\Cli constructor</p>"},{"location":"api/phalcon_di/#diinjectable","title":"Di\\Injectable","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Di</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\Di</code></li> <li><code>Phalcon\\Session\\BagInterface</code></li> <li><code>stdClass</code></li> </ul> </li> <li> <p>Extends</p> <p><code>stdClass</code></p> </li> <li> <p>Implements</p> <ul> <li><code>InjectionAwareInterface</code></li> </ul> </li> </ul> <p>This class allows to access services in the services container by just only accessing a public property with the same name of a registered service</p>"},{"location":"api/phalcon_di/#properties_2","title":"Properties","text":"<pre><code>/**\n * Dependency Injector\n *\n * @var DiInterface\n */\nprotected $container;\n</code></pre>"},{"location":"api/phalcon_di/#methods_5","title":"Methods","text":"<p><pre><code>public function __get( string $propertyName ): mixed | null;\n</code></pre> Magic method __get</p> <p><pre><code>public function __isset( string $name ): bool;\n</code></pre> Magic method __isset</p> <p><pre><code>public function getDI(): DiInterface;\n</code></pre> Returns the internal dependency injector</p> <p><pre><code>public function setDI( DiInterface $container ): void;\n</code></pre> Sets the dependency injector</p>"},{"location":"api/phalcon_di/#diinjectionawareinterface","title":"Di\\InjectionAwareInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Di</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This interface must be implemented in those classes that uses internally the Phalcon\\Di that creates them</p>"},{"location":"api/phalcon_di/#methods_6","title":"Methods","text":"<p><pre><code>public function getDI(): DiInterface;\n</code></pre> Returns the internal dependency injector</p> <p><pre><code>public function setDI( DiInterface $container ): void;\n</code></pre> Sets the dependency injector</p>"},{"location":"api/phalcon_di/#diservice","title":"Di\\Service","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Di</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Closure</code></li> <li><code>Phalcon\\Di\\Exception\\ServiceResolutionException</code></li> <li><code>Phalcon\\Di\\Service\\Builder</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>ServiceInterface</code></li> </ul> </li> </ul> <p>Represents individually a service in the services container</p> <pre><code>$service = new \\Phalcon\\Di\\Service(\n    \"request\",\n    \\Phalcon\\Http\\Request::class\n);\n\n$request = service-&gt;resolve();\n</code></pre>"},{"location":"api/phalcon_di/#properties_3","title":"Properties","text":"<pre><code>/**\n * @var mixed\n */\nprotected $definition;\n\n/**\n * @var bool\n */\nprotected $resolved = false;\n\n/**\n * @var bool\n */\nprotected $shared = false;\n\n//\nprotected $sharedInstance;\n</code></pre>"},{"location":"api/phalcon_di/#methods_7","title":"Methods","text":"<p><pre><code>final public function __construct( mixed $definition, bool $shared = bool );\n</code></pre> Phalcon\\Di\\Service</p> <p><pre><code>public function getDefinition(): mixed;\n</code></pre> Returns the service definition</p> <p><pre><code>public function getParameter( int $position );\n</code></pre> Returns a parameter in a specific position</p> <p><pre><code>public function isResolved(): bool;\n</code></pre> Returns true if the service was resolved</p> <p><pre><code>public function isShared(): bool;\n</code></pre> Check whether the service is shared or not</p> <p><pre><code>public function resolve( mixed $parameters = null, DiInterface $container = null ): mixed;\n</code></pre> Resolves the service</p> <p><pre><code>public function setDefinition( mixed $definition ): void;\n</code></pre> Set the service definition</p> <p><pre><code>public function setParameter( int $position, array $parameter ): ServiceInterface;\n</code></pre> Changes a parameter in the definition without resolve the service</p> <p><pre><code>public function setShared( bool $shared ): void;\n</code></pre> Sets if the service is shared or not</p> <p><pre><code>public function setSharedInstance( mixed $sharedInstance ): void;\n</code></pre> Sets/Resets the shared instance related to the service</p>"},{"location":"api/phalcon_di/#diservicebuilder","title":"Di\\Service\\Builder","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Di\\Service</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Di\\Exception</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Di\\Service\\Builder</p> <p>This class builds instances based on complex definitions</p>"},{"location":"api/phalcon_di/#methods_8","title":"Methods","text":"<p><pre><code>public function build( DiInterface $container, array $definition, mixed $parameters = null );\n</code></pre> Builds a service using a complex service definition</p>"},{"location":"api/phalcon_di/#diserviceinterface","title":"Di\\ServiceInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Di</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Represents a service in the services container</p>"},{"location":"api/phalcon_di/#methods_9","title":"Methods","text":"<p><pre><code>public function getDefinition(): mixed;\n</code></pre> Returns the service definition</p> <p><pre><code>public function getParameter( int $position );\n</code></pre> Returns a parameter in a specific position</p> <p><pre><code>public function isResolved(): bool;\n</code></pre> Returns true if the service was resolved</p> <p><pre><code>public function isShared(): bool;\n</code></pre> Check whether the service is shared or not</p> <p><pre><code>public function resolve( mixed $parameters = null, DiInterface $container = null ): mixed;\n</code></pre> Resolves the service</p> <p><pre><code>public function setDefinition( mixed $definition );\n</code></pre> Set the service definition</p> <p><pre><code>public function setParameter( int $position, array $parameter ): ServiceInterface;\n</code></pre> Changes a parameter in the definition without resolve the service</p> <p><pre><code>public function setShared( bool $shared );\n</code></pre> Sets if the service is shared or not</p>"},{"location":"api/phalcon_di/#diserviceproviderinterface","title":"Di\\ServiceProviderInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Di</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Should be implemented by service providers, or such components, which register a service in the service container.</p> <pre><code>namespace Acme;\n\nuse Phalcon\\Di\\DiInterface;\nuse Phalcon\\Di\\ServiceProviderInterface;\n\nclass SomeServiceProvider implements ServiceProviderInterface\n{\n    public function register(DiInterface $di)\n    {\n        $di-&gt;setShared(\n            'service',\n            function () {\n                // ...\n            }\n        );\n    }\n}\n</code></pre>"},{"location":"api/phalcon_di/#methods_10","title":"Methods","text":"<p><pre><code>public function register( DiInterface $di ): void;\n</code></pre> Registers a service provider.</p>"},{"location":"api/phalcon_dispatcher/","title":"Phalcon dispatcher","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_dispatcher/#dispatcherabstractdispatcher","title":"Dispatcher\\AbstractDispatcher","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Dispatcher</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Exception</code></li> <li><code>Phalcon\\Di\\AbstractInjectionAware</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Dispatcher\\Exception</code></li> <li><code>Phalcon\\Events\\EventsAwareInterface</code></li> <li><code>Phalcon\\Events\\ManagerInterface</code></li> <li><code>Phalcon\\Filter\\FilterInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Binder</code></li> <li><code>Phalcon\\Mvc\\Model\\BinderInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractInjectionAware</code></p> </li> <li> <p>Implements</p> <ul> <li><code>DispatcherInterface</code></li> <li><code>EventsAwareInterface</code></li> </ul> </li> </ul> <p>This is the base class for Phalcon\\Mvc\\Dispatcher and Phalcon\\Cli\\Dispatcher. This class can't be instantiated directly, you can use it to create your own dispatchers.</p>"},{"location":"api/phalcon_dispatcher/#properties","title":"Properties","text":"<pre><code>//\nprotected $activeHandler;\n\n/**\n * @var array\n */\nprotected $activeMethodMap;\n\n//\nprotected $actionName = '';\n\n/**\n * @var string\n */\nprotected $actionSuffix = 'Action';\n\n/**\n * @var array\n */\nprotected $camelCaseMap;\n\n/**\n * @var string\n */\nprotected $defaultAction = '';\n\n//\nprotected $defaultNamespace;\n\n//\nprotected $defaultHandler;\n\n/**\n * @var array\n */\nprotected $handlerHashes;\n\n//\nprotected $handlerName;\n\n/**\n * @var string\n */\nprotected $handlerSuffix = '';\n\n/**\n * @var ManagerInterface|null\n */\nprotected $eventsManager;\n\n/**\n * @var bool\n */\nprotected $finished = false;\n\n/**\n * @var bool\n */\nprotected $forwarded = false;\n\n/**\n * @var bool\n */\nprotected $isControllerInitialize = false;\n\n//\nprotected $lastHandler;\n\n//\nprotected $modelBinder;\n\n/**\n * @var bool\n */\nprotected $modelBinding = false;\n\n/**\n * @var string\n */\nprotected $moduleName = '';\n\n/**\n * @var string\n */\nprotected $namespaceName = '';\n\n/**\n * @var array\n */\nprotected $params;\n\n//\nprotected $previousActionName = '';\n\n//\nprotected $previousHandlerName = '';\n\n//\nprotected $previousNamespaceName = '';\n\n//\nprotected $returnedValue;\n</code></pre>"},{"location":"api/phalcon_dispatcher/#methods","title":"Methods","text":"<pre><code>public function callActionMethod( mixed $handler, string $actionMethod, array $params = [] );\n</code></pre> <p><pre><code>public function dispatch(): mixed | bool;\n</code></pre> Process the results of the router by calling into the appropriate controller action(s) including any routing data or injected parameters.</p> <p><pre><code>public function forward( array $forward ): void;\n</code></pre> Forwards the execution flow to another controller/action.</p> <pre><code>$this-&gt;dispatcher-&gt;forward(\n    [\n        \"controller\" =&gt; \"posts\",\n        \"action\"     =&gt; \"index\",\n    ]\n);\n</code></pre> <p><pre><code>public function getActionName(): string;\n</code></pre> Gets the latest dispatched action name</p> <p><pre><code>public function getActionSuffix(): string;\n</code></pre> Gets the default action suffix</p> <p><pre><code>public function getActiveMethod(): string;\n</code></pre> Returns the current method to be/executed in the dispatcher</p> <p><pre><code>public function getBoundModels(): array;\n</code></pre> Returns bound models from binder instance</p> <pre><code>class UserController extends Controller\n{\n    public function showAction(User $user)\n    {\n        // return array with $user\n        $boundModels = $this-&gt;dispatcher-&gt;getBoundModels();\n    }\n}\n</code></pre> <p><pre><code>public function getDefaultNamespace(): string;\n</code></pre> Returns the default namespace</p> <p><pre><code>public function getEventsManager(): ManagerInterface;\n</code></pre> Returns the internal event manager</p> <p><pre><code>public function getHandlerClass(): string;\n</code></pre> Possible class name that will be located to dispatch the request</p> <p><pre><code>public function getHandlerSuffix(): string;\n</code></pre> Gets the default handler suffix</p> <p><pre><code>public function getModelBinder(): BinderInterface | null;\n</code></pre> Gets model binder</p> <p><pre><code>public function getModuleName(): string;\n</code></pre> Gets the module where the controller class is</p> <p><pre><code>public function getNamespaceName(): string;\n</code></pre> Gets a namespace to be prepended to the current handler name</p> <p><pre><code>public function getParam( mixed $param, mixed $filters = null, mixed $defaultValue = null ): mixed;\n</code></pre> Gets a param by its name or numeric index</p> <p><pre><code>public function getParams(): array;\n</code></pre> Gets action params</p> <p><pre><code>public function getReturnedValue(): mixed;\n</code></pre> Returns value returned by the latest dispatched action</p> <p><pre><code>public function hasParam( mixed $param ): bool;\n</code></pre> Check if a param exists</p> <p><pre><code>public function isFinished(): bool;\n</code></pre> Checks if the dispatch loop is finished or has more pendent controllers/tasks to dispatch</p> <p><pre><code>public function setActionName( string $actionName ): void;\n</code></pre> Sets the action name to be dispatched</p> <p><pre><code>public function setActionSuffix( string $actionSuffix ): void;\n</code></pre> Sets the default action suffix</p> <p><pre><code>public function setDefaultAction( string $actionName ): void;\n</code></pre> Sets the default action name</p> <p><pre><code>public function setDefaultNamespace( string $namespaceName ): void;\n</code></pre> Sets the default namespace</p> <p><pre><code>public function setEventsManager( ManagerInterface $eventsManager ): void;\n</code></pre> Sets the events manager</p> <p><pre><code>public function setHandlerSuffix( string $handlerSuffix ): void;\n</code></pre> Sets the default suffix for the handler</p> <p><pre><code>public function setModelBinder( BinderInterface $modelBinder, mixed $cache = null ): DispatcherInterface;\n</code></pre> Enable model binding during dispatch</p> <pre><code>$di-&gt;set(\n    'dispatcher',\n    function() {\n        $dispatcher = new Dispatcher();\n\n        $dispatcher-&gt;setModelBinder(\n            new Binder(),\n            'cache'\n        );\n\n        return $dispatcher;\n    }\n);\n</code></pre> <p><pre><code>public function setModuleName( string $moduleName ): void;\n</code></pre> Sets the module where the controller is (only informative)</p> <p><pre><code>public function setNamespaceName( string $namespaceName ): void;\n</code></pre> Sets the namespace where the controller class is</p> <p><pre><code>public function setParam( mixed $param, mixed $value ): void;\n</code></pre> Set a param by its name or numeric index</p> <p><pre><code>public function setParams( array $params ): void;\n</code></pre> Sets action params to be dispatched</p> <p><pre><code>public function setReturnedValue( mixed $value ): void;\n</code></pre> Sets the latest returned value by an action manually</p> <p><pre><code>public function wasForwarded(): bool;\n</code></pre> Check if the current executed action was forwarded by another one</p> <p><pre><code>protected function resolveEmptyProperties(): void;\n</code></pre> Set empty properties to their defaults (where defaults are available)</p> <pre><code>protected function toCamelCase( string $input ): string;\n</code></pre>"},{"location":"api/phalcon_dispatcher/#dispatcherdispatcherinterface","title":"Dispatcher\\DispatcherInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Dispatcher</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Dispatcher\\AbstractDispatcher</p>"},{"location":"api/phalcon_dispatcher/#methods_1","title":"Methods","text":"<p><pre><code>public function dispatch(): mixed | bool;\n</code></pre> Dispatches a handle action taking into account the routing parameters</p> <p><pre><code>public function forward( array $forward ): void;\n</code></pre> Forwards the execution flow to another controller/action</p> <p><pre><code>public function getActionName(): string;\n</code></pre> Gets last dispatched action name</p> <p><pre><code>public function getActionSuffix(): string;\n</code></pre> Gets the default action suffix</p> <p><pre><code>public function getHandlerSuffix(): string;\n</code></pre> Gets the default handler suffix</p> <p><pre><code>public function getParam( mixed $param, mixed $filters = null ): mixed;\n</code></pre> Gets a param by its name or numeric index</p> <p><pre><code>public function getParams(): array;\n</code></pre> Gets action params</p> <p><pre><code>public function getReturnedValue(): mixed;\n</code></pre> Returns value returned by the latest dispatched action</p> <p><pre><code>public function hasParam( mixed $param ): bool;\n</code></pre> Check if a param exists</p> <p><pre><code>public function isFinished(): bool;\n</code></pre> Checks if the dispatch loop is finished or has more pendent controllers/tasks to dispatch</p> <p><pre><code>public function setActionName( string $actionName ): void;\n</code></pre> Sets the action name to be dispatched</p> <p><pre><code>public function setActionSuffix( string $actionSuffix ): void;\n</code></pre> Sets the default action suffix</p> <p><pre><code>public function setDefaultAction( string $actionName ): void;\n</code></pre> Sets the default action name</p> <p><pre><code>public function setDefaultNamespace( string $defaultNamespace ): void;\n</code></pre> Sets the default namespace</p> <p><pre><code>public function setHandlerSuffix( string $handlerSuffix ): void;\n</code></pre> Sets the default suffix for the handler</p> <p><pre><code>public function setModuleName( string $moduleName ): void;\n</code></pre> Sets the module name which the application belongs to</p> <p><pre><code>public function setNamespaceName( string $namespaceName ): void;\n</code></pre> Sets the namespace which the controller belongs to</p> <p><pre><code>public function setParam( mixed $param, mixed $value ): void;\n</code></pre> Set a param by its name or numeric index</p> <p><pre><code>public function setParams( array $params ): void;\n</code></pre> Sets action params to be dispatched</p>"},{"location":"api/phalcon_dispatcher/#dispatcherexception","title":"Dispatcher\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Dispatcher</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Dispatcher/* will use this class</p>"},{"location":"api/phalcon_dispatcher/#constants","title":"Constants","text":"<pre><code>const EXCEPTION_ACTION_NOT_FOUND = 5;\nconst EXCEPTION_CYCLIC_ROUTING = 1;\nconst EXCEPTION_HANDLER_NOT_FOUND = 2;\nconst EXCEPTION_INVALID_HANDLER = 3;\nconst EXCEPTION_INVALID_PARAMS = 4;\nconst EXCEPTION_NO_DI = 0;\n</code></pre>"},{"location":"api/phalcon_domain/","title":"Phalcon domain","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_domain/#domainpayloadpayload","title":"Domain\\Payload\\Payload","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Domain\\Payload</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Throwable</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>PayloadInterface</code></li> </ul> </li> </ul> <p>Holds the payload</p>"},{"location":"api/phalcon_domain/#properties","title":"Properties","text":"<pre><code>/**\n * Exception if any\n *\n * @var Throwable|null\n */\nprotected $exception;\n\n/**\n * Extra information\n *\n * @var mixed\n */\nprotected $extras;\n\n/**\n * Input\n *\n * @var mixed\n */\nprotected $input;\n\n/**\n * Messages\n *\n * @var mixed\n */\nprotected $messages;\n\n/**\n * Status\n *\n * @var mixed\n */\nprotected $status;\n\n/**\n * Output\n *\n * @var mixed\n */\nprotected $output;\n</code></pre>"},{"location":"api/phalcon_domain/#methods","title":"Methods","text":"<p><pre><code>public function getException(): Throwable | null;\n</code></pre> Gets the potential exception thrown in the domain layer</p> <p><pre><code>public function getExtras(): mixed;\n</code></pre> Extra information</p> <p><pre><code>public function getInput(): mixed;\n</code></pre> Input</p> <p><pre><code>public function getMessages(): mixed;\n</code></pre> Messages</p> <p><pre><code>public function getOutput(): mixed;\n</code></pre> Output</p> <p><pre><code>public function getStatus(): mixed;\n</code></pre> Status</p> <p><pre><code>public function setException( Throwable $exception ): PayloadInterface;\n</code></pre> Sets an exception thrown in the domain</p> <p><pre><code>public function setExtras( mixed $extras ): PayloadInterface;\n</code></pre> Sets arbitrary extra domain information.</p> <p><pre><code>public function setInput( mixed $input ): PayloadInterface;\n</code></pre> Sets the domain input.</p> <p><pre><code>public function setMessages( mixed $messages ): PayloadInterface;\n</code></pre> Sets the domain messages.</p> <p><pre><code>public function setOutput( mixed $output ): PayloadInterface;\n</code></pre> Sets the domain output.</p> <p><pre><code>public function setStatus( mixed $status ): PayloadInterface;\n</code></pre> Sets the payload status.</p>"},{"location":"api/phalcon_domain/#domainpayloadpayloadfactory","title":"Domain\\Payload\\PayloadFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Domain\\Payload</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Factory to create payload objects</p>"},{"location":"api/phalcon_domain/#methods_1","title":"Methods","text":"<p><pre><code>public function newInstance(): PayloadInterface;\n</code></pre> Instantiate a new object</p>"},{"location":"api/phalcon_domain/#domainpayloadpayloadinterface","title":"Domain\\Payload\\PayloadInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Domain\\Payload</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>ReadableInterface</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>This interface is used for consumers</p>"},{"location":"api/phalcon_domain/#domainpayloadreadableinterface","title":"Domain\\Payload\\ReadableInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Domain\\Payload</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Throwable</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This interface is used for consumers (read only)</p>"},{"location":"api/phalcon_domain/#methods_2","title":"Methods","text":"<p><pre><code>public function getException(): Throwable | null;\n</code></pre> Gets the potential exception thrown in the domain layer</p> <p><pre><code>public function getExtras(): mixed;\n</code></pre> Gets arbitrary extra values produced by the domain layer.</p> <p><pre><code>public function getInput(): mixed;\n</code></pre> Gets the input received by the domain layer.</p> <p><pre><code>public function getMessages(): mixed;\n</code></pre> Gets the messages produced by the domain layer.</p> <p><pre><code>public function getOutput(): mixed;\n</code></pre> Gets the output produced from the domain layer.</p> <p><pre><code>public function getStatus(): mixed;\n</code></pre> Gets the status of this payload.</p>"},{"location":"api/phalcon_domain/#domainpayloadstatus","title":"Domain\\Payload\\Status","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Domain\\Payload</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Holds the status codes for the payload</p>"},{"location":"api/phalcon_domain/#constants","title":"Constants","text":"<pre><code>const ACCEPTED = ACCEPTED;\nconst AUTHENTICATED = AUTHENTICATED;\nconst AUTHORIZED = AUTHORIZED;\nconst CREATED = CREATED;\nconst DELETED = DELETED;\nconst ERROR = ERROR;\nconst FAILURE = FAILURE;\nconst FOUND = FOUND;\nconst NOT_ACCEPTED = NOT_ACCEPTED;\nconst NOT_AUTHENTICATED = NOT_AUTHENTICATED;\nconst NOT_AUTHORIZED = NOT_AUTHORIZED;\nconst NOT_CREATED = NOT_CREATED;\nconst NOT_DELETED = NOT_DELETED;\nconst NOT_FOUND = NOT_FOUND;\nconst NOT_UPDATED = NOT_UPDATED;\nconst NOT_VALID = NOT_VALID;\nconst PROCESSING = PROCESSING;\nconst SUCCESS = SUCCESS;\nconst UPDATED = UPDATED;\nconst VALID = VALID;\n</code></pre>"},{"location":"api/phalcon_domain/#methods_3","title":"Methods","text":"<p><pre><code>final private function __construct();\n</code></pre> Instantiation not allowed.</p>"},{"location":"api/phalcon_domain/#domainpayloadwriteableinterface","title":"Domain\\Payload\\WriteableInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Domain\\Payload</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Throwable</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This interface is used for consumers (write)</p>"},{"location":"api/phalcon_domain/#methods_4","title":"Methods","text":"<p><pre><code>public function setException( Throwable $exception ): PayloadInterface;\n</code></pre> Sets an exception produced by the domain layer.</p> <p><pre><code>public function setExtras( mixed $extras ): PayloadInterface;\n</code></pre> Sets arbitrary extra values produced by the domain layer.</p> <p><pre><code>public function setInput( mixed $input ): PayloadInterface;\n</code></pre> Sets the input received by the domain layer.</p> <p><pre><code>public function setMessages( mixed $messages ): PayloadInterface;\n</code></pre> Sets the messages produced by the domain layer.</p> <p><pre><code>public function setOutput( mixed $output ): PayloadInterface;\n</code></pre> Sets the output produced from the domain layer.</p> <p><pre><code>public function setStatus( mixed $status ): PayloadInterface;\n</code></pre> Sets the status of this payload.</p>"},{"location":"api/phalcon_escaper/","title":"Phalcon escaper","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_escaper/#escaper","title":"Escaper","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Escaper\\EscaperInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>EscaperInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Escaper</p> <p>Escapes different kinds of text securing them. By using this component you may prevent XSS attacks.</p> <p>This component only works with UTF-8. The PREG extension needs to be compiled with UTF-8 support.</p> <pre><code>$escaper = new \\Phalcon\\Escaper();\n\n$escaped = $escaper-&gt;escapeCss(\"font-family: &lt;Verdana&gt;\");\n\necho $escaped; // font\\2D family\\3A \\20 \\3C Verdana\\3E\n</code></pre>"},{"location":"api/phalcon_escaper/#properties","title":"Properties","text":"<pre><code>/**\n * @var bool\n */\nprotected $doubleEncode = true;\n\n/**\n * @var string\n */\nprotected $encoding = utf-8;\n\n/**\n * @var int\n */\nprotected $flags = 3;\n</code></pre>"},{"location":"api/phalcon_escaper/#methods","title":"Methods","text":"<p><pre><code>public function attributes( string $attribute = null ): string;\n</code></pre> Escapes a HTML attribute string</p> <p><pre><code>public function css( string $input ): string;\n</code></pre> Escape CSS strings by replacing non-alphanumeric chars by their hexadecimal escaped representation</p> <p><pre><code>final public function detectEncoding( string $str ): string | null;\n</code></pre> Detect the character encoding of a string to be handled by an encoder. Special-handling for chr(172) and chr(128) to chr(159) which fail to be detected by mb_detect_encoding()</p> <p><pre><code>public function escapeCss( string $css ): string;\n</code></pre> Escape CSS strings by replacing non-alphanumeric chars by their hexadecimal escaped representation</p> <p><pre><code>public function escapeHtml( string $text = null ): string;\n</code></pre> Escapes a HTML string. Internally uses htmlspecialchars</p> <p><pre><code>public function escapeHtmlAttr( string $attribute = null ): string;\n</code></pre> Escapes a HTML attribute string</p> <p><pre><code>public function escapeJs( string $js ): string;\n</code></pre> Escape JavaScript strings by replacing non-alphanumeric chars by their hexadecimal escaped representation</p> <p><pre><code>public function escapeUrl( string $url ): string;\n</code></pre> Escapes a URL. Internally uses rawurlencode</p> <p><pre><code>public function getEncoding(): string;\n</code></pre> Returns the internal encoding used by the escaper</p> <p><pre><code>public function getFlags(): int;\n</code></pre> Returns the current flags for htmlspecialchars</p> <p><pre><code>public function html( string $input = null ): string;\n</code></pre> Escapes a HTML string. Internally uses htmlspecialchars</p> <p><pre><code>public function js( string $input ): string;\n</code></pre> Escape javascript strings by replacing non-alphanumeric chars by their hexadecimal escaped representation</p> <p><pre><code>final public function normalizeEncoding( string $str ): string;\n</code></pre> Utility to normalize a string's encoding to UTF-32.</p> <p><pre><code>public function setDoubleEncode( bool $doubleEncode ): void;\n</code></pre> Sets the double_encode to be used by the escaper</p> <pre><code>$escaper-&gt;setDoubleEncode(false);\n</code></pre> <p><pre><code>public function setEncoding( string $encoding ): void;\n</code></pre> Sets the encoding to be used by the escaper</p> <pre><code>$escaper-&gt;setEncoding(\"utf-8\");\n</code></pre> <p><pre><code>public function setFlags( int $flags ): Escaper;\n</code></pre> Sets the HTML quoting type for htmlspecialchars</p> <pre><code>$escaper-&gt;setFlags(ENT_XHTML);\n</code></pre> <p><pre><code>public function setHtmlQuoteType( int $flags ): void;\n</code></pre> Sets the HTML quoting type for htmlspecialchars</p> <pre><code>$escaper-&gt;setHtmlQuoteType(ENT_XHTML);\n</code></pre> <p><pre><code>public function url( string $url ): string;\n</code></pre> Escapes a URL. Internally uses rawurlencode</p>"},{"location":"api/phalcon_escaper/#escaperescaperinterface","title":"Escaper\\EscaperInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Escaper</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Escaper</p>"},{"location":"api/phalcon_escaper/#methods_1","title":"Methods","text":"<p><pre><code>public function escapeCss( string $css ): string;\n</code></pre> Escape CSS strings by replacing non-alphanumeric chars by their hexadecimal representation</p> <p><pre><code>public function escapeHtml( string $text ): string;\n</code></pre> Escapes a HTML string</p> <p><pre><code>public function escapeHtmlAttr( string $text ): string;\n</code></pre> Escapes a HTML attribute string</p> <p><pre><code>public function escapeJs( string $js ): string;\n</code></pre> Escape Javascript strings by replacing non-alphanumeric chars by their hexadecimal representation</p> <p><pre><code>public function escapeUrl( string $url ): string;\n</code></pre> Escapes a URL. Internally uses rawurlencode</p> <p><pre><code>public function getEncoding(): string;\n</code></pre> Returns the internal encoding used by the escaper</p> <p><pre><code>public function setEncoding( string $encoding ): void;\n</code></pre> Sets the encoding to be used by the escaper</p> <p><pre><code>public function setHtmlQuoteType( int $quoteType ): void;\n</code></pre> Sets the HTML quoting type for htmlspecialchars</p>"},{"location":"api/phalcon_escaper/#htmlexception","title":"Html\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Escaper will use this class</p>"},{"location":"api/phalcon_events/","title":"Phalcon events","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_events/#eventsevent","title":"Events\\Event","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Events</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>EventInterface</code></li> </ul> </li> </ul> <p>This class offers contextual information of a fired event in the EventsManager</p> <pre><code>Phalcon\\Events\\Event;\n\n$event = new Event(\"db:afterQuery\", $this, [\"data\" =&gt; \"mydata\"], true);\nif ($event-&gt;isCancelable()) {\n    $event-&gt;stop();\n}\n</code></pre>"},{"location":"api/phalcon_events/#properties","title":"Properties","text":"<pre><code>/**\n * Is event cancelable?\n *\n * @var bool\n */\nprotected $cancelable;\n\n/**\n * Event data\n *\n * @var mixed\n */\nprotected $data;\n\n/**\n * Event source\n *\n * @var object|null\n */\nprotected $source;\n\n/**\n * Is event propagation stopped?\n *\n * @var bool\n */\nprotected $stopped = false;\n\n/**\n * Event type\n *\n * @var string\n */\nprotected $type;\n</code></pre>"},{"location":"api/phalcon_events/#methods","title":"Methods","text":"<p><pre><code>public function __construct( string $type, object $source, mixed $data = null, bool $cancelable = bool );\n</code></pre> Phalcon\\Events\\Event constructor</p> <pre><code>public function getData(): mixed\n</code></pre> <pre><code>public function getSource(): object\n</code></pre> <pre><code>public function getType(): string\n</code></pre> <p><pre><code>public function isCancelable(): bool;\n</code></pre> Check whether the event is cancelable.</p> <pre><code>if ($event-&gt;isCancelable()) {\n    $event-&gt;stop();\n}\n</code></pre> <p><pre><code>public function isStopped(): bool;\n</code></pre> Check whether the event is currently stopped.</p> <p><pre><code>public function setData( mixed $data = null ): EventInterface;\n</code></pre> Sets event data.</p> <p><pre><code>public function setType( string $type ): EventInterface;\n</code></pre> Sets event type.</p> <p><pre><code>public function stop(): EventInterface;\n</code></pre> Stops the event preventing propagation.</p> <pre><code>if ($event-&gt;isCancelable()) {\n    $event-&gt;stop();\n}\n</code></pre>"},{"location":"api/phalcon_events/#eventseventinterface","title":"Events\\EventInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Events</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Events\\Event class</p>"},{"location":"api/phalcon_events/#methods_1","title":"Methods","text":"<p><pre><code>public function getData(): mixed;\n</code></pre> Gets event data</p> <p><pre><code>public function getType(): mixed;\n</code></pre> Gets event type</p> <p><pre><code>public function isCancelable(): bool;\n</code></pre> Check whether the event is cancelable</p> <p><pre><code>public function isStopped(): bool;\n</code></pre> Check whether the event is currently stopped</p> <p><pre><code>public function setData( mixed $data = null ): EventInterface;\n</code></pre> Sets event data</p> <p><pre><code>public function setType( string $type ): EventInterface;\n</code></pre> Sets event type</p> <p><pre><code>public function stop(): EventInterface;\n</code></pre> Stops the event preventing propagation</p>"},{"location":"api/phalcon_events/#eventseventsawareinterface","title":"Events\\EventsAwareInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Events</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This interface must for those classes that accept an EventsManager and dispatch events</p>"},{"location":"api/phalcon_events/#methods_2","title":"Methods","text":"<p><pre><code>public function getEventsManager(): ManagerInterface | null;\n</code></pre> Returns the internal event manager</p> <p><pre><code>public function setEventsManager( ManagerInterface $eventsManager ): void;\n</code></pre> Sets the events manager</p>"},{"location":"api/phalcon_events/#eventsexception","title":"Events\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Events</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Events will use this class</p>"},{"location":"api/phalcon_events/#eventsmanager","title":"Events\\Manager","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Events</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Closure</code></li> <li><code>SplPriorityQueue</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>ManagerInterface</code></li> </ul> </li> </ul> <p>Phalcon Events Manager, offers an easy way to intercept and manipulate, if needed, the normal flow of operation. With the EventsManager the developer can create hooks or plugins that will offer monitoring of data, manipulation, conditional execution and much more.</p>"},{"location":"api/phalcon_events/#constants","title":"Constants","text":"<pre><code>const DEFAULT_PRIORITY = 100;\n</code></pre>"},{"location":"api/phalcon_events/#properties_1","title":"Properties","text":"<pre><code>/**\n * @var bool\n */\nprotected $collect = false;\n\n/**\n * @var bool\n */\nprotected $enablePriorities = false;\n\n//\nprotected $events;\n\n//\nprotected $responses;\n</code></pre>"},{"location":"api/phalcon_events/#methods_3","title":"Methods","text":"<p><pre><code>public function arePrioritiesEnabled(): bool;\n</code></pre> Returns if priorities are enabled</p> <p><pre><code>public function attach( string $eventType, mixed $handler, int $priority = static-constant-access ): void;\n</code></pre> Attach a listener to the events manager</p> <p><pre><code>public function collectResponses( bool $collect ): void;\n</code></pre> Tells the event manager if it needs to collect all the responses returned by every registered listener in a single fire</p> <p><pre><code>public function detach( string $eventType, mixed $handler ): void;\n</code></pre> Detach the listener from the events manager</p> <p><pre><code>public function detachAll( string $type = null ): void;\n</code></pre> Removes all events from the EventsManager</p> <p><pre><code>public function enablePriorities( bool $enablePriorities ): void;\n</code></pre> Set if priorities are enabled in the EventsManager.</p> <p>A priority queue of events is a data structure similar to a regular queue of events: we can also put and extract elements from it. The difference is that each element in a priority queue is associated with a value called priority. This value is used to order elements of a queue: elements with higher priority are retrieved before the elements with lower priority.</p> <p><pre><code>public function fire( string $eventType, object $source, mixed $data = null, bool $cancelable = bool );\n</code></pre> Fires an event in the events manager causing the active listeners to be notified about it</p> <pre><code>$eventsManager-&gt;fire(\"db\", $connection);\n</code></pre> <p><pre><code>final public function fireQueue( SplPriorityQueue $queue, EventInterface $event );\n</code></pre> Internal handler to call a queue of events</p> <p><pre><code>public function getListeners( string $type ): array;\n</code></pre> Returns all the attached listeners of a certain type</p> <p><pre><code>public function getResponses(): array;\n</code></pre> Returns all the responses returned by every handler executed by the last 'fire' executed</p> <p><pre><code>public function hasListeners( string $type ): bool;\n</code></pre> Check whether certain type of event has listeners</p> <p><pre><code>public function isCollecting(): bool;\n</code></pre> Check if the events manager is collecting all the responses returned by every registered listener in a single fire</p> <pre><code>public function isValidHandler( mixed $handler ): bool;\n</code></pre>"},{"location":"api/phalcon_events/#eventsmanagerinterface","title":"Events\\ManagerInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Events</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Events managers.</p>"},{"location":"api/phalcon_events/#methods_4","title":"Methods","text":"<p><pre><code>public function attach( string $eventType, mixed $handler ): void;\n</code></pre> Attach a listener to the events manager</p> <p><pre><code>public function detach( string $eventType, mixed $handler ): void;\n</code></pre> Detach the listener from the events manager</p> <p><pre><code>public function detachAll( string $type = null ): void;\n</code></pre> Removes all events from the EventsManager</p> <p><pre><code>public function fire( string $eventType, object $source, mixed $data = null, bool $cancelable = bool );\n</code></pre> Fires an event in the events manager causing the active listeners to be notified about it</p> <p><pre><code>public function getListeners( string $type ): array;\n</code></pre> Returns all the attached listeners of a certain type</p> <p><pre><code>public function hasListeners( string $type ): bool;\n</code></pre> Check whether certain type of event has listeners</p>"},{"location":"api/phalcon_exception/","title":"Phalcon exception","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_exception/#eventsevent","title":"Events\\Event","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <ul> <li><code>Exception</code></li> </ul> </li> <li> <p>Implements</p> <ul> <li><code>Throwable</code></li> </ul> </li> </ul> <p>All framework exceptions should use or extend this exception</p>"},{"location":"api/phalcon_exception/#methods","title":"Methods","text":"<pre><code>public static function containerServiceNotFound( string $service ): string;\n</code></pre>"},{"location":"api/phalcon_factory/","title":"Phalcon factory","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_factory/#factoryabstractfactory","title":"Factory\\AbstractFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Factory</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Config\\ConfigInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This file is part of the Phalcon Framework.</p> <p>(c) Phalcon Team team@phalcon.io</p> <p>For the full copyright and license information, please view the LICENSE.txt file that was distributed with this source code.</p>"},{"location":"api/phalcon_factory/#properties","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $mapper;\n\n/**\n * @var array\n */\nprotected $services;\n</code></pre>"},{"location":"api/phalcon_factory/#methods","title":"Methods","text":"<p><pre><code>protected function checkConfig( mixed $config ): array;\n</code></pre> Checks the config if it is a valid object</p> <p><pre><code>abstract protected function getAdapters(): array;\n</code></pre> Returns the adapters for the factory</p> <p><pre><code>protected function getService( string $name ): mixed;\n</code></pre> Checks if a service exists and throws an exception</p> <p><pre><code>protected function init( array $services = [] ): void;\n</code></pre> AdapterFactory constructor.</p>"},{"location":"api/phalcon_factory/#factoryexception","title":"Factory\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Factory</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>This file is part of the Phalcon Framework.</p> <p>(c) Phalcon Team team@phalcon.io</p> <p>For the full copyright and license information, please view the LICENSE.txt file that was distributed with this source code.</p>"},{"location":"api/phalcon_filter/","title":"Phalcon filter","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_filter/#filterfilter","title":"Filter\\Filter","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Closure</code></li> <li><code>Phalcon\\Filter\\Exception</code></li> <li><code>Phalcon\\Filter\\FilterInterface</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>FilterInterface</code></li> </ul> </li> </ul> <p>Lazy loads, stores and exposes sanitizer objects</p>"},{"location":"api/phalcon_filter/#constants","title":"Constants","text":"<pre><code>const FILTER_ABSINT = absint;\nconst FILTER_ALNUM = alnum;\nconst FILTER_ALPHA = alpha;\nconst FILTER_BOOL = bool;\nconst FILTER_EMAIL = email;\nconst FILTER_FLOAT = float;\nconst FILTER_INT = int;\nconst FILTER_LOWER = lower;\nconst FILTER_LOWERFIRST = lowerFirst;\nconst FILTER_REGEX = regex;\nconst FILTER_REMOVE = remove;\nconst FILTER_REPLACE = replace;\nconst FILTER_SPECIAL = special;\nconst FILTER_SPECIALFULL = specialFull;\nconst FILTER_STRING = string;\nconst FILTER_STRIPTAGS = striptags;\nconst FILTER_TRIM = trim;\nconst FILTER_UPPER = upper;\nconst FILTER_UPPERFIRST = upperFirst;\nconst FILTER_UPPERWORDS = upperWords;\nconst FILTER_URL = url;\n</code></pre>"},{"location":"api/phalcon_filter/#properties","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $mapper;\n\n/**\n * @var array\n */\nprotected $services;\n</code></pre>"},{"location":"api/phalcon_filter/#methods","title":"Methods","text":"<p><pre><code>public function __construct( array $mapper = [] );\n</code></pre> Key value pairs with name as the key and a callable as the value for the service object</p> <p><pre><code>public function get( string $name ): mixed;\n</code></pre> Get a service. If it is not in the mapper array, create a new object, set it and then return it.</p> <p><pre><code>public function has( string $name ): bool;\n</code></pre> Checks if a service exists in the map array</p> <p><pre><code>public function sanitize( mixed $value, mixed $sanitizers, bool $noRecursive = bool ): mixed;\n</code></pre> Sanitizes a value with a specified single or set of sanitizers</p> <p><pre><code>public function set( string $name, callable $service ): void;\n</code></pre> Set a new service to the mapper array</p> <p><pre><code>protected function init( array $mapper ): void;\n</code></pre> Loads the objects in the internal mapper array</p>"},{"location":"api/phalcon_filter/#filterexception","title":"Filter\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>Phalcon\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Exception</p> <p>Exceptions thrown in Phalcon\\Filter will use this class</p>"},{"location":"api/phalcon_filter/#filterfilterfactory","title":"Filter\\FilterFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Class FilterFactory</p>"},{"location":"api/phalcon_filter/#methods_1","title":"Methods","text":"<p><pre><code>public function newInstance(): FilterInterface;\n</code></pre> Returns a Locator object with all the helpers defined in anonymous functions</p> <pre><code>protected function getAdapters(): array;\n</code></pre>"},{"location":"api/phalcon_filter/#filterfilterinterface","title":"Filter\\FilterInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Lazy loads, stores and exposes sanitizer objects</p>"},{"location":"api/phalcon_filter/#methods_2","title":"Methods","text":"<p><pre><code>public function sanitize( mixed $value, mixed $sanitizers, bool $noRecursive = bool ): mixed;\n</code></pre> Sanitizes a value with a specified single or set of sanitizers</p>"},{"location":"api/phalcon_filter/#filtersanitizeabsint","title":"Filter\\Sanitize\\AbsInt","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\AbsInt</p> <p>Sanitizes a value to absolute integer</p>"},{"location":"api/phalcon_filter/#methods_3","title":"Methods","text":"<pre><code>public function __invoke( mixed $input );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizealnum","title":"Filter\\Sanitize\\Alnum","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\Alnum</p> <p>Sanitizes a value to an alphanumeric value</p>"},{"location":"api/phalcon_filter/#methods_4","title":"Methods","text":"<pre><code>public function __invoke( mixed $input );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizealpha","title":"Filter\\Sanitize\\Alpha","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\Alpha</p> <p>Sanitizes a value to an alpha value</p>"},{"location":"api/phalcon_filter/#methods_5","title":"Methods","text":"<pre><code>public function __invoke( mixed $input );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizeboolval","title":"Filter\\Sanitize\\BoolVal","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\BoolVal</p> <p>Sanitizes a value to boolean</p>"},{"location":"api/phalcon_filter/#methods_6","title":"Methods","text":"<pre><code>public function __invoke( mixed $input );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizeemail","title":"Filter\\Sanitize\\Email","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\Email</p> <p>Sanitizes an email string</p>"},{"location":"api/phalcon_filter/#methods_7","title":"Methods","text":"<pre><code>public function __invoke( mixed $input );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizefloatval","title":"Filter\\Sanitize\\FloatVal","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\FloatVal</p> <p>Sanitizes a value to float</p>"},{"location":"api/phalcon_filter/#methods_8","title":"Methods","text":"<pre><code>public function __invoke( mixed $input );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizeintval","title":"Filter\\Sanitize\\IntVal","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\IntVal</p> <p>Sanitizes a value to integer</p>"},{"location":"api/phalcon_filter/#methods_9","title":"Methods","text":"<pre><code>public function __invoke( mixed $input );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizelower","title":"Filter\\Sanitize\\Lower","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\Lower</p> <p>Sanitizes a value to lowercase</p>"},{"location":"api/phalcon_filter/#methods_10","title":"Methods","text":"<pre><code>public function __invoke( string $input );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizelowerfirst","title":"Filter\\Sanitize\\LowerFirst","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\LowerFirst</p> <p>Sanitizes a value to lcfirst</p>"},{"location":"api/phalcon_filter/#methods_11","title":"Methods","text":"<pre><code>public function __invoke( string $input );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizeregex","title":"Filter\\Sanitize\\Regex","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\Regex</p> <p>Sanitizes a value performing preg_replace</p>"},{"location":"api/phalcon_filter/#methods_12","title":"Methods","text":"<pre><code>public function __invoke( mixed $input, mixed $pattern, mixed $replace );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizeremove","title":"Filter\\Sanitize\\Remove","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\Remove</p> <p>Sanitizes a value removing parts of a string</p>"},{"location":"api/phalcon_filter/#methods_13","title":"Methods","text":"<pre><code>public function __invoke( mixed $input, mixed $replace );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizereplace","title":"Filter\\Sanitize\\Replace","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\Replace</p> <p>Sanitizes a value replacing parts of a string</p>"},{"location":"api/phalcon_filter/#methods_14","title":"Methods","text":"<pre><code>public function __invoke( mixed $input, mixed $from, mixed $to );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizespecial","title":"Filter\\Sanitize\\Special","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\Special</p> <p>Sanitizes a value special characters</p>"},{"location":"api/phalcon_filter/#methods_15","title":"Methods","text":"<pre><code>public function __invoke( mixed $input );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizespecialfull","title":"Filter\\Sanitize\\SpecialFull","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\SpecialFull</p> <p>Sanitizes a value special characters (htmlspecialchars() and ENT_QUOTES)</p>"},{"location":"api/phalcon_filter/#methods_16","title":"Methods","text":"<pre><code>public function __invoke( mixed $input );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizestringval","title":"Filter\\Sanitize\\StringVal","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Sanitizes a value to string</p>"},{"location":"api/phalcon_filter/#methods_17","title":"Methods","text":"<pre><code>public function __invoke( mixed $input );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizestriptags","title":"Filter\\Sanitize\\Striptags","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\Striptags</p> <p>Sanitizes a value striptags</p>"},{"location":"api/phalcon_filter/#methods_18","title":"Methods","text":"<pre><code>public function __invoke( string $input );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizetrim","title":"Filter\\Sanitize\\Trim","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\Trim</p> <p>Sanitizes a value removing leading and trailing spaces</p>"},{"location":"api/phalcon_filter/#methods_19","title":"Methods","text":"<pre><code>public function __invoke( string $input );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizeupper","title":"Filter\\Sanitize\\Upper","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\Upper</p> <p>Sanitizes a value to uppercase</p>"},{"location":"api/phalcon_filter/#methods_20","title":"Methods","text":"<pre><code>public function __invoke( string $input );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizeupperfirst","title":"Filter\\Sanitize\\UpperFirst","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\UpperFirst</p> <p>Sanitizes a value to ucfirst</p>"},{"location":"api/phalcon_filter/#methods_21","title":"Methods","text":"<pre><code>public function __invoke( string $input );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizeupperwords","title":"Filter\\Sanitize\\UpperWords","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\UpperWords</p> <p>Sanitizes a value to uppercase the first character of each word</p>"},{"location":"api/phalcon_filter/#methods_22","title":"Methods","text":"<pre><code>public function __invoke( string $input );\n</code></pre>"},{"location":"api/phalcon_filter/#filtersanitizeurl","title":"Filter\\Sanitize\\Url","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Sanitize</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Filter\\Sanitize\\Url</p> <p>Sanitizes a value url</p>"},{"location":"api/phalcon_filter/#methods_23","title":"Methods","text":"<pre><code>public function __invoke( mixed $input );\n</code></pre>"},{"location":"api/phalcon_flash/","title":"Phalcon flash","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_flash/#flashabstractflash","title":"Flash\\AbstractFlash","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Flash</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\AbstractInjectionAware</code></li> <li><code>Phalcon\\Di\\Di</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Html\\Escaper\\EscaperInterface</code></li> <li><code>Phalcon\\Session\\ManagerInterface</code></li> <li><code>Phalcon\\Helper\\Str\\Interpolate</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractInjectionAware</code></p> </li> <li> <p>Implements</p> <ul> <li><code>FlashInterface</code></li> </ul> </li> </ul> <p>Shows HTML notifications related to different circumstances. Classes can be stylized using CSS</p> <pre><code>$flash-&gt;success(\"The record was successfully deleted\");\n$flash-&gt;error(\"Cannot open the file\");\n</code></pre>"},{"location":"api/phalcon_flash/#properties","title":"Properties","text":"<pre><code>/**\n * @var bool\n */\nprotected $autoescape = true;\n\n/**\n * @var bool\n */\nprotected $automaticHtml = true;\n\n/**\n * @var array\n */\nprotected $cssClasses;\n\n/**\n * @var string\n */\nprotected $customTemplate = '';\n\n/**\n * @var EscaperInterface | null\n */\nprotected $escaperService;\n\n/**\n * @var bool\n */\nprotected $implicitFlush = true;\n\n/**\n * @var array\n */\nprotected $messages;\n\n/**\n * @var SessionInterface | null\n */\nprotected $sessionService;\n</code></pre>"},{"location":"api/phalcon_flash/#methods","title":"Methods","text":"<p><pre><code>public function __construct( EscaperInterface $escaper = null, SessionInterface $session = null );\n</code></pre> Phalcon\\Flash constructor</p> <p><pre><code>public function clear(): void;\n</code></pre> Clears accumulated messages when implicit flush is disabled</p> <p><pre><code>public function error( string $message ): string | null;\n</code></pre> Shows a HTML error message</p> <pre><code>$flash-&gt;error(\"This is an error\");\n</code></pre> <pre><code>public function getAutoescape(): bool;\n</code></pre> <pre><code>public function getCssClasses(): array;\n</code></pre> <pre><code>public function getCustomTemplate(): string;\n</code></pre> <p><pre><code>public function getEscaperService(): EscaperInterface;\n</code></pre> Returns the Escaper Service</p> <p><pre><code>public function notice( string $message ): string | null;\n</code></pre> Shows a HTML notice/information message</p> <pre><code>$flash-&gt;notice(\"This is an information\");\n</code></pre> <p><pre><code>public function outputMessage( string $type, mixed $message );\n</code></pre> Outputs a message formatting it with HTML</p> <pre><code>$flash-&gt;outputMessage(\"error\", $message);\n</code></pre> <p><pre><code>public function setAutoescape( bool $autoescape ): FlashInterface;\n</code></pre> Set the autoescape mode in generated HTML</p> <p><pre><code>public function setAutomaticHtml( bool $automaticHtml ): FlashInterface;\n</code></pre> Set if the output must be implicitly formatted with HTML</p> <p><pre><code>public function setCssClasses( array $cssClasses ): FlashInterface;\n</code></pre> Set an array with CSS classes to format the messages</p> <p><pre><code>public function setCustomTemplate( string $customTemplate ): FlashInterface;\n</code></pre> Set an custom template for showing the messages</p> <p><pre><code>public function setEscaperService( EscaperInterface $escaperService ): FlashInterface;\n</code></pre> Sets the Escaper Service</p> <p><pre><code>public function setImplicitFlush( bool $implicitFlush ): FlashInterface;\n</code></pre> Set whether the output must be implicitly flushed to the output or returned as string</p> <p><pre><code>public function success( string $message ): string | null;\n</code></pre> Shows a HTML success message</p> <pre><code>$flash-&gt;success(\"The process was finished successfully\");\n</code></pre> <p><pre><code>public function warning( string $message ): string | null;\n</code></pre> Shows a HTML warning message</p> <pre><code>$flash-&gt;warning(\"Hey, this is important\");\n</code></pre>"},{"location":"api/phalcon_flash/#flashdirect","title":"Flash\\Direct","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Flash</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractFlash</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Direct</p> <p>@package Phalcon\\Flash</p>"},{"location":"api/phalcon_flash/#methods_1","title":"Methods","text":"<p><pre><code>public function message( string $type, mixed $message ): string | null;\n</code></pre> Outputs a message</p> <p><pre><code>public function output( bool $remove = bool ): void;\n</code></pre> Prints the messages accumulated in the flasher</p>"},{"location":"api/phalcon_flash/#flashexception","title":"Flash\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Flash</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Flash classes will use this class</p>"},{"location":"api/phalcon_flash/#flashflashinterface","title":"Flash\\FlashInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Flash</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface FlashInterface</p> <p>Interface for Phalcon\\Flash classes</p>"},{"location":"api/phalcon_flash/#methods_2","title":"Methods","text":"<p><pre><code>public function error( string $message ): string | null;\n</code></pre> Shows a HTML error message</p> <p><pre><code>public function message( string $type, string $message ): string | null;\n</code></pre> Outputs a message</p> <p><pre><code>public function notice( string $message ): string | null;\n</code></pre> Shows a HTML notice/information message</p> <p><pre><code>public function success( string $message ): string | null;\n</code></pre> Shows a HTML success message</p> <p><pre><code>public function warning( string $message ): string | null;\n</code></pre> Shows a HTML warning message</p>"},{"location":"api/phalcon_flash/#flashsession","title":"Flash\\Session","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Flash</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Session\\ManagerInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFlash</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>This is an implementation of the Phalcon\\Flash\\FlashInterface that temporarily stores the messages in session, then messages can be printed in the next request.</p>"},{"location":"api/phalcon_flash/#methods_3","title":"Methods","text":"<p><pre><code>public function clear(): void;\n</code></pre> Clear messages in the session messenger</p> <p><pre><code>public function getMessages( mixed $type = null, bool $remove = bool ): array;\n</code></pre> Returns the messages in the session flasher</p> <p><pre><code>public function getSessionService(): ManagerInterface;\n</code></pre> Returns the Session Service</p> <p><pre><code>public function has( mixed $type = null ): bool;\n</code></pre> Checks whether there are messages</p> <p><pre><code>public function message( string $type, string $message ): string | null;\n</code></pre> Adds a message to the session flasher</p> <p><pre><code>public function output( bool $remove = bool ): void;\n</code></pre> Prints the messages in the session flasher</p> <p><pre><code>protected function getSessionMessages( bool $remove, mixed $type = null ): array;\n</code></pre> Returns the messages stored in session</p> <p><pre><code>protected function setSessionMessages( array $messages ): array;\n</code></pre> Stores the messages in session</p>"},{"location":"api/phalcon_forms/","title":"Phalcon forms","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_forms/#formselementabstractelement","title":"Forms\\Element\\AbstractElement","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Forms\\Element</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>InvalidArgumentException</code></li> <li><code>Phalcon\\Di\\Di</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Filter\\Validation\\ValidatorInterface</code></li> <li><code>Phalcon\\Forms\\Exception</code></li> <li><code>Phalcon\\Forms\\Form</code></li> <li><code>Phalcon\\Html\\Escaper</code></li> <li><code>Phalcon\\Html\\TagFactory</code></li> <li><code>Phalcon\\Messages\\MessageInterface</code></li> <li><code>Phalcon\\Messages\\Messages</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>ElementInterface</code></li> </ul> </li> </ul> <p>This is a base class for form elements</p>"},{"location":"api/phalcon_forms/#properties","title":"Properties","text":"<pre><code>//\nprotected $attributes;\n\n//\nprotected $filters;\n\n//\nprotected $form;\n\n//\nprotected $label;\n\n//\nprotected $messages;\n\n//\nprotected $name;\n\n//\nprotected $options;\n\n/**\n * @var array\n */\nprotected $validators;\n\n//\nprotected $value;\n</code></pre>"},{"location":"api/phalcon_forms/#methods","title":"Methods","text":"<p><pre><code>public function __construct( string $name, array $attributes = [] );\n</code></pre> Constructor</p> <p><pre><code>public function __toString(): string;\n</code></pre> Magic method __toString renders the widget without attributes</p> <p><pre><code>public function addFilter( string $filter ): ElementInterface;\n</code></pre> Adds a filter to current list of filters</p> <p><pre><code>public function addValidator( ValidatorInterface $validator ): ElementInterface;\n</code></pre> Adds a validator to the element</p> <p><pre><code>public function addValidators( array $validators, bool $merge = bool ): ElementInterface;\n</code></pre> Adds a group of validators</p> <p><pre><code>public function appendMessage( MessageInterface $message ): ElementInterface;\n</code></pre> Appends a message to the internal message list</p> <p><pre><code>public function clear(): ElementInterface;\n</code></pre> Clears element to its default value</p> <p><pre><code>public function getAttribute( string $attribute, mixed $defaultValue = null ): mixed;\n</code></pre> Returns the value of an attribute if present</p> <p><pre><code>public function getAttributes(): array;\n</code></pre> Returns the default attributes for the element</p> <p><pre><code>public function getDefault(): mixed;\n</code></pre> Returns the default value assigned to the element</p> <p><pre><code>public function getFilters();\n</code></pre> Returns the element filters</p> <p><pre><code>public function getForm(): Form;\n</code></pre> Returns the parent form to the element</p> <p><pre><code>public function getLabel(): string;\n</code></pre> Returns the element label</p> <p><pre><code>public function getMessages(): Messages;\n</code></pre> Returns the messages that belongs to the element The element needs to be attached to a form</p> <p><pre><code>public function getName(): string;\n</code></pre> Returns the element name</p> <p><pre><code>public function getUserOption( string $option, mixed $defaultValue = null ): mixed;\n</code></pre> Returns the value of an option if present</p> <p><pre><code>public function getUserOptions(): array;\n</code></pre> Returns the options for the element</p> <p><pre><code>public function getValidators(): ValidatorInterface[];\n</code></pre> Returns the validators registered for the element</p> <p><pre><code>public function getValue(): mixed;\n</code></pre> Returns the element's value</p> <p><pre><code>public function hasMessages(): bool;\n</code></pre> Checks whether there are messages attached to the element</p> <p><pre><code>public function label( array $attributes = [] ): string;\n</code></pre> Generate the HTML to label the element</p> <p><pre><code>public function prepareAttributes( array $attributes = [], bool $useChecked = bool ): array;\n</code></pre> Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element parameters</p> <p><pre><code>public function setAttribute( string $attribute, mixed $value ): ElementInterface;\n</code></pre> Sets a default attribute for the element</p> <p><pre><code>public function setAttributes( array $attributes ): ElementInterface;\n</code></pre> Sets default attributes for the element</p> <p><pre><code>public function setDefault( mixed $value ): ElementInterface;\n</code></pre> Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <p><pre><code>public function setFilters( mixed $filters ): ElementInterface;\n</code></pre> Sets the element filters</p> <p><pre><code>public function setForm( Form $form ): ElementInterface;\n</code></pre> Sets the parent form to the element</p> <p><pre><code>public function setLabel( string $label ): ElementInterface;\n</code></pre> Sets the element label</p> <p><pre><code>public function setMessages( Messages $messages ): ElementInterface;\n</code></pre> Sets the validation messages related to the element</p> <p><pre><code>public function setName( string $name ): ElementInterface;\n</code></pre> Sets the element name</p> <p><pre><code>public function setUserOption( string $option, mixed $value ): ElementInterface;\n</code></pre> Sets an option for the element</p> <p><pre><code>public function setUserOptions( array $options ): ElementInterface;\n</code></pre> Sets options for the element</p>"},{"location":"api/phalcon_forms/#forms-element-check","title":"Class Phalcon\\Forms\\Element\\Check","text":""},{"location":"api/phalcon_forms/#formselementcheck","title":"Forms\\Element\\Check","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Forms\\Element</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Tag</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Component INPUT[type=check] for forms</p>"},{"location":"api/phalcon_forms/#methods_1","title":"Methods","text":"<p><pre><code>public function render( array $attributes = [] ): string;\n</code></pre> Renders the element widget returning HTML</p>"},{"location":"api/phalcon_forms/#formselementdate","title":"Forms\\Element\\Date","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Forms\\Element</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Tag</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractElement</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Component INPUT[type=date] for forms</p>"},{"location":"api/phalcon_forms/#methods_2","title":"Methods","text":"<p><pre><code>public function render( array $attributes = [] ): string;\n</code></pre> Renders the element widget returning html</p>"},{"location":"api/phalcon_forms/#formselementelementinterface","title":"Forms\\Element\\ElementInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Forms\\Element</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation\\ValidatorInterface</code></li> <li><code>Phalcon\\Forms\\Form</code></li> <li><code>Phalcon\\Messages\\MessageInterface</code></li> <li><code>Phalcon\\Messages\\Messages</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Forms\\Element classes</p>"},{"location":"api/phalcon_forms/#methods_3","title":"Methods","text":"<p><pre><code>public function addFilter( string $filter ): ElementInterface;\n</code></pre> Adds a filter to current list of filters</p> <p><pre><code>public function addValidator( ValidatorInterface $validator ): ElementInterface;\n</code></pre> Adds a validator to the element</p> <p><pre><code>public function addValidators( array $validators, bool $merge = bool ): ElementInterface;\n</code></pre> Adds a group of validators</p> <p><pre><code>public function appendMessage( MessageInterface $message ): ElementInterface;\n</code></pre> Appends a message to the internal message list</p> <p><pre><code>public function clear(): ElementInterface;\n</code></pre> Clears every element in the form to its default value</p> <p><pre><code>public function getAttribute( string $attribute, mixed $defaultValue = null ): mixed;\n</code></pre> Returns the value of an attribute if present</p> <p><pre><code>public function getAttributes(): array;\n</code></pre> Returns the default attributes for the element</p> <p><pre><code>public function getDefault(): mixed;\n</code></pre> Returns the default value assigned to the element</p> <p><pre><code>public function getFilters();\n</code></pre> Returns the element's filters</p> <p><pre><code>public function getForm(): Form;\n</code></pre> Returns the parent form to the element</p> <p><pre><code>public function getLabel(): string;\n</code></pre> Returns the element's label</p> <p><pre><code>public function getMessages(): Messages;\n</code></pre> Returns the messages that belongs to the element The element needs to be attached to a form</p> <p><pre><code>public function getName(): string;\n</code></pre> Returns the element's name</p> <p><pre><code>public function getUserOption( string $option, mixed $defaultValue = null ): mixed;\n</code></pre> Returns the value of an option if present</p> <p><pre><code>public function getUserOptions(): array;\n</code></pre> Returns the options for the element</p> <p><pre><code>public function getValidators(): ValidatorInterface[];\n</code></pre> Returns the validators registered for the element</p> <p><pre><code>public function getValue(): mixed;\n</code></pre> Returns the element's value</p> <p><pre><code>public function hasMessages(): bool;\n</code></pre> Checks whether there are messages attached to the element</p> <p><pre><code>public function label(): string;\n</code></pre> Generate the HTML to label the element</p> <p><pre><code>public function prepareAttributes( array $attributes = [], bool $useChecked = bool ): array;\n</code></pre> Returns an array of prepared attributes for Phalcon\\Tag helpers according to the element's parameters</p> <p><pre><code>public function render( array $attributes = [] ): string;\n</code></pre> Renders the element widget</p> <p><pre><code>public function setAttribute( string $attribute, mixed $value ): ElementInterface;\n</code></pre> Sets a default attribute for the element</p> <p><pre><code>public function setAttributes( array $attributes ): ElementInterface;\n</code></pre> Sets default attributes for the element</p> <p><pre><code>public function setDefault( mixed $value ): ElementInterface;\n</code></pre> Sets a default value in case the form does not use an entity or there is no value available for the element in _POST</p> <p><pre><code>public function setFilters( mixed $filters ): ElementInterface;\n</code></pre> Sets the element's filters</p> <p><pre><code>public function setForm( Form $form ): ElementInterface;\n</code></pre> Sets the parent form to the element</p> <p><pre><code>public function setLabel( string $label ): ElementInterface;\n</code></pre> Sets the element label</p> <p><pre><code>public function setMessages( Messages $messages ): ElementInterface;\n</code></pre> Sets the validation messages related to the element</p> <p><pre><code>public function setName( string $name ): ElementInterface;\n</code></pre> Sets the element's name</p> <p><pre><code>public function setUserOption( string $option, mixed $value ): ElementInterface;\n</code></pre> Sets an option for the element</p> <p><pre><code>public function setUserOptions( array $options ): ElementInterface;\n</code></pre> Sets options for the element</p>"},{"location":"api/phalcon_forms/#formselementemail","title":"Forms\\Element\\Email","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Forms\\Element</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Tag</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractElement</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Component INPUT[type=email] for forms</p>"},{"location":"api/phalcon_forms/#methods_4","title":"Methods","text":"<p><pre><code>public function render( array $attributes = [] ): string;\n</code></pre> Renders the element widget returning HTML</p>"},{"location":"api/phalcon_forms/#formselementfile","title":"Forms\\Element\\File","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Forms\\Element</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Tag</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractElement</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Component INPUT[type=file] for forms</p>"},{"location":"api/phalcon_forms/#methods_5","title":"Methods","text":"<p><pre><code>public function render( array $attributes = [] ): string;\n</code></pre> Renders the element widget returning HTML</p>"},{"location":"api/phalcon_forms/#formselementhidden","title":"Forms\\Element\\Hidden","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Forms\\Element</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Tag</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractElement</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Component INPUT[type=hidden] for forms</p>"},{"location":"api/phalcon_forms/#methods_6","title":"Methods","text":"<p><pre><code>public function render( array $attributes = [] ): string;\n</code></pre> Renders the element widget returning HTML</p>"},{"location":"api/phalcon_forms/#formselementnumeric","title":"Forms\\Element\\Numeric","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Forms\\Element</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Tag</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractElement</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Component INPUT[type=number] for forms</p>"},{"location":"api/phalcon_forms/#methods_7","title":"Methods","text":"<p><pre><code>public function render( array $attributes = [] ): string;\n</code></pre> Renders the element widget returning HTML</p>"},{"location":"api/phalcon_forms/#formselementpassword","title":"Forms\\Element\\Password","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Forms\\Element</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Tag</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractElement</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Component INPUT[type=password] for forms</p>"},{"location":"api/phalcon_forms/#methods_8","title":"Methods","text":"<p><pre><code>public function render( array $attributes = [] ): string;\n</code></pre> Renders the element widget returning HTML</p>"},{"location":"api/phalcon_forms/#formselementradio","title":"Forms\\Element\\Radio","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Forms\\Element</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Tag</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractElement</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Component INPUT[type=radio] for forms</p>"},{"location":"api/phalcon_forms/#methods_9","title":"Methods","text":"<p><pre><code>public function render( array $attributes = [] ): string;\n</code></pre> Renders the element widget returning HTML</p>"},{"location":"api/phalcon_forms/#formselementselect","title":"Forms\\Element\\Select","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Forms\\Element</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Tag\\Select</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractElement</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Component SELECT (choice) for forms</p>"},{"location":"api/phalcon_forms/#properties_1","title":"Properties","text":"<pre><code>//\nprotected $optionsValues;\n</code></pre>"},{"location":"api/phalcon_forms/#methods_10","title":"Methods","text":"<p><pre><code>public function __construct( string $name, mixed $options = null, mixed $attributes = null );\n</code></pre> Phalcon\\Forms\\Element constructor</p> <p><pre><code>public function addOption( mixed $option ): ElementInterface;\n</code></pre> Adds an option to the current options</p> <p><pre><code>public function getOptions();\n</code></pre> Returns the choices' options</p> <p><pre><code>public function render( array $attributes = [] ): string;\n</code></pre> Renders the element widget returning HTML</p> <p><pre><code>public function setOptions( mixed $options ): ElementInterface;\n</code></pre> Set the choice's options</p>"},{"location":"api/phalcon_forms/#formselementsubmit","title":"Forms\\Element\\Submit","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Forms\\Element</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Tag</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractElement</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Component INPUT[type=submit] for forms</p>"},{"location":"api/phalcon_forms/#methods_11","title":"Methods","text":"<p><pre><code>public function render( array $attributes = [] ): string;\n</code></pre> Renders the element widget</p>"},{"location":"api/phalcon_forms/#formselementtext","title":"Forms\\Element\\Text","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Forms\\Element</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Forms\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractElement</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Component INPUT[type=text] for forms</p>"},{"location":"api/phalcon_forms/#methods_12","title":"Methods","text":"<p><pre><code>public function render( array $attributes = [] ): string;\n</code></pre> Renders the element widget</p>"},{"location":"api/phalcon_forms/#formselementtextarea","title":"Forms\\Element\\TextArea","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Forms\\Element</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Tag</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractElement</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Component TEXTAREA for forms</p>"},{"location":"api/phalcon_forms/#methods_13","title":"Methods","text":"<p><pre><code>public function render( array $attributes = [] ): string;\n</code></pre> Renders the element widget</p>"},{"location":"api/phalcon_forms/#formsexception","title":"Forms\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Forms</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Forms will use this class</p>"},{"location":"api/phalcon_forms/#formsform","title":"Forms\\Form","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Forms</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Countable</code></li> <li><code>Iterator</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Di\\Injectable</code></li> <li><code>Phalcon\\Filter\\FilterInterface</code></li> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\ValidationInterface</code></li> <li><code>Phalcon\\Forms\\Element\\ElementInterface</code></li> <li><code>Phalcon\\Html\\Attributes</code></li> <li><code>Phalcon\\Html\\Attributes\\AttributesInterface</code></li> <li><code>Phalcon\\Html\\TagFactory</code></li> <li><code>Phalcon\\Messages\\Messages</code></li> <li><code>Phalcon\\Tag</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Injectable</code></p> </li> <li> <p>Implements</p> <ul> <li><code>AttributesInterface</code></li> <li><code>Countable</code></li> <li><code>Iterator</code></li> </ul> </li> </ul> <p>This component allows to build forms using an object-oriented interface</p>"},{"location":"api/phalcon_forms/#properties_2","title":"Properties","text":"<pre><code>/**\n * @var Attributes | null\n */\nprotected $attributes;\n\n//\nprotected $data;\n\n//\nprotected $elements;\n\n//\nprotected $elementsIndexed;\n\n//\nprotected $entity;\n\n//\nprotected $messages;\n\n//\nprotected $position;\n\n//\nprotected $options;\n\n//\nprotected $validation;\n</code></pre>"},{"location":"api/phalcon_forms/#methods_14","title":"Methods","text":"<p><pre><code>public function __construct( mixed $entity = null, array $userOptions = [] );\n</code></pre> Phalcon\\Forms\\Form constructor</p> <p><pre><code>public function add( ElementInterface $element, string $position = null, bool $type = null ): Form;\n</code></pre> Adds an element to the form</p> <p><pre><code>public function bind( array $data, mixed $entity, mixed $whitelist = null ): Form;\n</code></pre> Binds data to the entity</p> <p><pre><code>public function clear( mixed $fields = null ): Form;\n</code></pre> Clears every element in the form to its default value</p> <p><pre><code>public function count(): int;\n</code></pre> Returns the number of elements in the form</p> <p><pre><code>public function current(): ElementInterface | bool;\n</code></pre> Returns the current element in the iterator</p> <p><pre><code>public function get( string $name ): ElementInterface;\n</code></pre> Returns an element added to the form by its name</p> <p><pre><code>public function getAction(): string;\n</code></pre> Returns the form's action</p> <p><pre><code>public function getAttributes(): Attributes;\n</code></pre>    Get Form attributes collection</p> <p><pre><code>public function getElements(): ElementInterface[];\n</code></pre> Returns the form elements added to the form</p> <p><pre><code>public function getEntity();\n</code></pre> Returns the entity related to the model</p> <p><pre><code>public function getLabel( string $name ): string;\n</code></pre> Returns a label for an element</p> <p><pre><code>public function getMessages(): Messages | array;\n</code></pre> Returns the messages generated in the validation.</p> <pre><code>if ($form-&gt;isValid($_POST) == false) {\n    $messages = $form-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo $message, \"&lt;br&gt;\";\n    }\n}\n</code></pre> <p><pre><code>public function getMessagesFor( string $name ): Messages;\n</code></pre> Returns the messages generated for a specific element</p> <p><pre><code>public function getUserOption( string $option, mixed $defaultValue = null ): mixed;\n</code></pre> Returns the value of an option if present</p> <p><pre><code>public function getUserOptions(): array;\n</code></pre> Returns the options for the element</p> <pre><code>public function getValidation()\n</code></pre> <p><pre><code>public function getValue( string $name ): mixed | null;\n</code></pre> Gets a value from the internal related entity or from the default value</p> <p><pre><code>public function has( string $name ): bool;\n</code></pre> Check if the form contains an element</p> <p><pre><code>public function hasMessagesFor( string $name ): bool;\n</code></pre> Check if messages were generated for a specific element</p> <p><pre><code>public function isValid( mixed $data = null, mixed $entity = null ): bool;\n</code></pre> Validates the form</p> <p><pre><code>public function key(): int;\n</code></pre> Returns the current position/key in the iterator</p> <p><pre><code>public function label( string $name, array $attributes = null ): string;\n</code></pre> Generate the label of an element added to the form including HTML</p> <p><pre><code>public function next(): void;\n</code></pre> Moves the internal iteration pointer to the next position</p> <p><pre><code>public function remove( string $name ): bool;\n</code></pre> Removes an element from the form</p> <p><pre><code>public function render( string $name, array $attributes = [] ): string;\n</code></pre> Renders a specific item in the form</p> <p><pre><code>public function rewind(): void;\n</code></pre> Rewinds the internal iterator</p> <p><pre><code>public function setAction( string $action ): Form;\n</code></pre> Sets the form's action</p> <p><pre><code>public function setAttributes( Attributes $attributes ): AttributesInterface;\n</code></pre>    Set form attributes collection</p> <p><pre><code>public function setEntity( mixed $entity ): Form;\n</code></pre> Sets the entity related to the model</p> <p><pre><code>public function setUserOption( string $option, mixed $value ): Form;\n</code></pre> Sets an option for the form</p> <p><pre><code>public function setUserOptions( array $options ): Form;\n</code></pre> Sets options for the element</p> <pre><code>public function setValidation( $validation )\n</code></pre> <p><pre><code>public function valid(): bool;\n</code></pre> Check if the current element in the iterator is valid</p>"},{"location":"api/phalcon_forms/#formsmanager","title":"Forms\\Manager","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Forms</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Forms Manager</p>"},{"location":"api/phalcon_forms/#properties_3","title":"Properties","text":"<pre><code>//\nprotected $forms;\n</code></pre>"},{"location":"api/phalcon_forms/#methods_15","title":"Methods","text":"<p><pre><code>public function create( string $name, mixed $entity = null ): Form;\n</code></pre> Creates a form registering it in the forms manager</p> <p><pre><code>public function get( string $name ): Form;\n</code></pre> Returns a form by its name</p> <p><pre><code>public function has( string $name ): bool;\n</code></pre> Checks if a form is registered in the forms manager</p> <p><pre><code>public function set( string $name, Form $form ): Manager;\n</code></pre> Registers a form in the Forms Manager</p>"},{"location":"api/phalcon_helper/","title":"Phalcon helper","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_helper/#helperarr","title":"Helper\\Arr","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Helper</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>stdClass</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This class offers quick array functions throughout the framework</p>"},{"location":"api/phalcon_helper/#methods","title":"Methods","text":"<p><pre><code>final public static function blackList( array $collection, array $blackList ): array;\n</code></pre> Black list filter by key: exclude elements of an array by the keys obtained from the elements of a blacklist</p> <p><pre><code>final public static function chunk( array $collection, int $size, bool $preserveKeys = bool ): array;\n</code></pre> Chunks an array into smaller arrays of a specified size.</p> <p><pre><code>final public static function filter( array $collection, mixed $method = null ): array;\n</code></pre> Helper method to filter the collection</p> <p><pre><code>final public static function first( array $collection, mixed $method = null ): mixed;\n</code></pre> Returns the first element of the collection. If a callable is passed, the element returned is the first that validates true</p> <p><pre><code>final public static function firstKey( array $collection, mixed $method = null ): mixed;\n</code></pre> Returns the key of the first element of the collection. If a callable is passed, the element returned is the first that validates true</p> <p><pre><code>final public static function flatten( array $collection, bool $deep = bool ): array;\n</code></pre> Flattens an array up to the one level depth, unless <code>$deep</code> is set to <code>true</code></p> <p><pre><code>final public static function get( array $collection, mixed $index, mixed $defaultValue = null, string $cast = null ): mixed;\n</code></pre> Helper method to get an array element or a default</p> <p><pre><code>final public static function group( array $collection, mixed $method ): array;\n</code></pre> Groups the elements of an array based on the passed callable</p> <p><pre><code>final public static function has( array $collection, mixed $index ): bool;\n</code></pre> Determines whether an element is present in the array.</p> <p><pre><code>final public static function isUnique( array $collection ): bool;\n</code></pre> Checks a flat list for duplicate values. Returns true if duplicate values exist and false if values are all unique.</p> <p><pre><code>final public static function last( array $collection, mixed $method = null ): mixed;\n</code></pre> Returns the last element of the collection. If a callable is passed, the element returned is the first that validates true</p> <p><pre><code>final public static function lastKey( array $collection, mixed $method = null ): mixed;\n</code></pre> Returns the key of the last element of the collection. If a callable is passed, the element returned is the first that validates true</p> <p><pre><code>final public static function order( array $collection, mixed $attribute, string $order = string ): array;\n</code></pre> Sorts a collection of arrays or objects by key</p> <p><pre><code>final public static function pluck( array $collection, string $element ): array;\n</code></pre> Retrieves all of the values for a given key:</p> <p><pre><code>final public static function set( array $collection, mixed $value, mixed $index = null ): array;\n</code></pre> Helper method to set an array element</p> <p><pre><code>final public static function sliceLeft( array $collection, int $elements = int ): array;\n</code></pre> Returns a new array with n elements removed from the right.</p> <p><pre><code>final public static function sliceRight( array $collection, int $elements = int ): array;\n</code></pre> Returns a new array with the X elements from the right</p> <p><pre><code>final public static function split( array $collection ): array;\n</code></pre> Returns a new array with keys of the passed array as one element and values as another</p> <p><pre><code>final public static function toObject( array $collection );\n</code></pre> Returns the passed array as an object</p> <p><pre><code>final public static function validateAll( array $collection, mixed $method = null ): bool;\n</code></pre> Returns true if the provided function returns true for all elements of the collection, false otherwise.</p> <p><pre><code>final public static function validateAny( array $collection, mixed $method = null ): bool;\n</code></pre> Returns true if the provided function returns true for at least one element of the collection, false otherwise.</p> <p><pre><code>final public static function whiteList( array $collection, array $whiteList ): array;\n</code></pre> White list filter by key: obtain elements of an array filtering by the keys obtained from the elements of a whitelist</p>"},{"location":"api/phalcon_helper/#helperbase64","title":"Helper\\Base64","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Helper</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This class offers quick string base64 functions</p>"},{"location":"api/phalcon_helper/#methods_1","title":"Methods","text":"<p><pre><code>final public static function decodeUrl( string $input ): string;\n</code></pre> Decode a Base64 Url string to a json string</p> <p><pre><code>final public static function encodeUrl( string $input ): string;\n</code></pre> Encode a json string in Base64 Url format.</p>"},{"location":"api/phalcon_helper/#helperexception","title":"Helper\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Helper</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <ul> <li><code>Phalcon\\Exception</code></li> </ul> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Helper will use this class</p>"},{"location":"api/phalcon_helper/#helperfs","title":"Helper\\Fs","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Helper</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This class offers file operation helper</p>"},{"location":"api/phalcon_helper/#methods_2","title":"Methods","text":"<p><pre><code>final public static function basename( string $uri, mixed $suffix = null ): string;\n</code></pre> Gets the filename from a given path, Same as PHP's basename() but has non-ASCII support. PHP's basename() does not properly support streams or filenames beginning with a non-US-ASCII character. see https://bugs.php.net/bug.php?id=37738</p>"},{"location":"api/phalcon_helper/#helperjson","title":"Helper\\Json","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Helper</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>InvalidArgumentException</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This class offers a wrapper for JSON methods to serialize and unserialize</p>"},{"location":"api/phalcon_helper/#methods_3","title":"Methods","text":"<p><pre><code>final public static function decode( string $data, bool $associative = bool, int $depth = int, int $options = int ): mixed;\n</code></pre> Decodes a string using <code>json_decode</code> and throws an exception if the JSON data cannot be decoded</p> <pre><code>use Phalcon\\Helper\\Json;\n\n$data = '{\"one\":\"two\",\"0\":\"three\"}';\n\nvar_dump(Json::decode($data));\n// [\n//     'one' =&gt; 'two',\n//     'three'\n// ];\n</code></pre> <p><pre><code>final public static function encode( mixed $data, int $options = int, int $depth = int ): string;\n</code></pre> Encodes a string using <code>json_encode</code> and throws an exception if the JSON data cannot be encoded</p> <pre><code>use Phalcon\\Helper\\Json;\n\n$data = [\n    'one' =&gt; 'two',\n    'three'\n];\n\necho Json::encode($data);\n// {\"one\":\"two\",\"0\":\"three\"}\n</code></pre>"},{"location":"api/phalcon_helper/#helpernumber","title":"Helper\\Number","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Helper</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This class offers numeric functions for the framework</p>"},{"location":"api/phalcon_helper/#methods_4","title":"Methods","text":"<p><pre><code>final public static function between( int $value, int $from, int $to ): bool;\n</code></pre> Helper method to get an array element or a default</p>"},{"location":"api/phalcon_helper/#helperstr","title":"Helper\\Str","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Helper</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>RuntimeException</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This class offers quick string functions throughout the framework</p>"},{"location":"api/phalcon_helper/#constants","title":"Constants","text":"<pre><code>const RANDOM_ALNUM = 0;\nconst RANDOM_ALPHA = 1;\nconst RANDOM_DISTINCT = 5;\nconst RANDOM_HEXDEC = 2;\nconst RANDOM_NOZERO = 4;\nconst RANDOM_NUMERIC = 3;\n</code></pre>"},{"location":"api/phalcon_helper/#methods_5","title":"Methods","text":"<p><pre><code>final public static function camelize( string $text, mixed $delimiter = null ): string;\n</code></pre> Converts strings to camelize style</p> <pre><code>use Phalcon\\Helper\\Str;\n\necho Str::camelize(\"coco_bongo\");            // CocoBongo\necho Str::camelize(\"co_co-bon_go\", \"-\");     // Co_coBon_go\necho Str::camelize(\"co_co-bon_go\", \"_-\");    // CoCoBonGo\n</code></pre> <p><pre><code>final public static function concat(): string;\n</code></pre> Concatenates strings using the separator only once without duplication in places concatenation</p> <pre><code>$str = Phalcon\\Helper\\Str::concat(\n    \"/\",\n    \"/tmp/\",\n    \"/folder_1/\",\n    \"/folder_2\",\n    \"folder_3/\"\n);\n\necho $str;   // /tmp/folder_1/folder_2/folder_3/\n</code></pre> <p><pre><code>final public static function countVowels( string $text ): int;\n</code></pre> Returns number of vowels in provided string. Uses a regular expression to count the number of vowels (A, E, I, O, U) in a string.</p> <p><pre><code>final public static function decapitalize( string $text, bool $upperRest = bool, string $encoding = string ): string;\n</code></pre> Decapitalizes the first letter of the string and then adds it with rest of the string. Omit the upperRest parameter to keep the rest of the string intact, or set it to true to convert to uppercase.</p> <p><pre><code>final public static function decrement( string $text, string $separator = string ): string;\n</code></pre> Removes a number from a string or decrements that number if it already is defined. defined</p> <pre><code>use Phalcon\\Helper\\Str;\n\necho Str::decrement(\"a_1\");    // \"a\"\necho Str::decrement(\"a_2\");  // \"a_1\"\n</code></pre> <p><pre><code>final public static function dirFromFile( string $file ): string;\n</code></pre> Accepts a file name (without extension) and returns a calculated directory structure with the filename in the end</p> <pre><code>use Phalcon\\Helper\\Str;\n\necho Str::dirFromFile(\"file1234.jpg\"); // fi/le/12/\n</code></pre> <p><pre><code>final public static function dirSeparator( string $directory ): string;\n</code></pre> Accepts a directory name and ensures that it ends with DIRECTORY_SEPARATOR</p> <pre><code>use Phalcon\\Helper\\Str;\n\necho Str::dirSeparator(\"/home/phalcon\"); // /home/phalcon/\n</code></pre> <p><pre><code>final public static function dynamic( string $text, string $leftDelimiter = string, string $rightDelimiter = string, string $separator = string ): string;\n</code></pre> Generates random text in accordance with the template</p> <pre><code>use Phalcon\\Helper\\Str;\n\n// Hi my name is a Bob\necho Str::dynamic(\"{Hi|Hello}, my name is a {Bob|Mark|Jon}!\");\n\n// Hi my name is a Jon\necho Str::dynamic(\"{Hi|Hello}, my name is a {Bob|Mark|Jon}!\");\n\n// Hello my name is a Bob\necho Str::dynamic(\"{Hi|Hello}, my name is a {Bob|Mark|Jon}!\");\n\n// Hello my name is a Zyxep\necho Str::dynamic(\n    \"[Hi/Hello], my name is a [Zyxep/Mark]!\",\n    \"[\", \"]\",\n    \"/\"\n);\n</code></pre> <p><pre><code>final public static function endsWith( string $text, string $end, bool $ignoreCase = bool ): bool;\n</code></pre> Check if a string ends with a given string</p> <pre><code>use Phalcon\\Helper\\Str;\n\necho Str::endsWith(\"Hello\", \"llo\");          // true\necho Str::endsWith(\"Hello\", \"LLO\", false);   // false\necho Str::endsWith(\"Hello\", \"LLO\");          // true\n</code></pre> <p><pre><code>final public static function firstBetween( string $text, string $start, string $end ): string;\n</code></pre> Returns the first string there is between the strings from the parameter start and end.</p> <p><pre><code>final public static function friendly( string $text, string $separator = string, bool $lowercase = bool, mixed $replace = null ): string;\n</code></pre> Changes a text to a URL friendly one</p> <p><pre><code>final public static function humanize( string $text ): string;\n</code></pre> Makes an underscored or dashed phrase human-readable</p> <pre><code>use Phalcon\\Helper\\Str;\n\necho Str::humanize(\"start-a-horse\"); // \"start a horse\"\necho Str::humanize(\"five_cats\");     // \"five cats\"\n</code></pre> <p><pre><code>final public static function includes( string $needle, string $haystack ): bool;\n</code></pre> Lets you determine whether or not a string includes another string.</p> <p><pre><code>final public static function increment( string $text, string $separator = string ): string;\n</code></pre> Adds a number to a string or increment that number if it already is defined</p> <pre><code>use Phalcon\\Helper\\Str;\n\necho Str::increment(\"a\");    // \"a_1\"\necho Str::increment(\"a_1\");  // \"a_2\"\n</code></pre> <p><pre><code>final public static function isAnagram( string $first, string $second ): bool;\n</code></pre> Compare two strings and returns true if both strings are anagram, false otherwise.</p> <p><pre><code>final public static function isLower( string $text, string $encoding = string ): bool;\n</code></pre> Returns true if the given string is lower case, false otherwise.</p> <p><pre><code>final public static function isPalindrome( string $text ): bool;\n</code></pre> Returns true if the given string is a palindrome, false otherwise.</p> <p><pre><code>final public static function isUpper( string $text, string $encoding = string ): bool;\n</code></pre> Returns true if the given string is upper case, false otherwise.</p> <p><pre><code>final public static function lower( string $text, string $encoding = string ): string;\n</code></pre> Lowercases a string, this function makes use of the mbstring extension if available</p> <pre><code>echo Phalcon\\Helper\\Str::lower(\"HELLO\"); // hello\n</code></pre> <p><pre><code>final public static function random( int $type = int, long $length = int ): string;\n</code></pre> Generates a random string based on the given type. Type is one of the RANDOM_* constants</p> <pre><code>use Phalcon\\Helper\\Str;\n\necho Str::random(Str::RANDOM_ALNUM); // \"aloiwkqz\"\n</code></pre> <p><pre><code>final public static function reduceSlashes( string $text ): string;\n</code></pre> Reduces multiple slashes in a string to single slashes</p> <pre><code>// foo/bar/baz\necho Phalcon\\Helper\\Str::reduceSlashes(\"foo//bar/baz\");\n\n// http://foo.bar/baz/buz\necho Phalcon\\Helper\\Str::reduceSlashes(\"http://foo.bar///baz/buz\");\n</code></pre> <p><pre><code>final public static function startsWith( string $text, string $start, bool $ignoreCase = bool ): bool;\n</code></pre> Check if a string starts with a given string</p> <pre><code>use Phalcon\\Helper\\Str;\n\necho Str::startsWith(\"Hello\", \"He\");         // true\necho Str::startsWith(\"Hello\", \"he\", false);  // false\necho Str::startsWith(\"Hello\", \"he\");         // true\n</code></pre> <p><pre><code>final public static function uncamelize( string $text, mixed $delimiter = null ): string;\n</code></pre> Uncamelize strings which are camelized</p> <pre><code>use Phalcon\\Helper\\Str;\n\necho Str::uncamelize(\"CocoBongo\");       // coco_bongo\necho Str::uncamelize(\"CocoBongo\", \"-\");  // coco-bongo\n</code></pre> <p><pre><code>final public static function underscore( string $text ): string;\n</code></pre> Makes a phrase underscored instead of spaced</p> <pre><code>use Phalcon\\Helper\\Str;\n\necho Str::underscore(\"look behind\");     // \"look_behind\"\necho Str::underscore(\"Awesome Phalcon\"); // \"Awesome_Phalcon\"\n</code></pre> <p><pre><code>final public static function upper( string $text, string $encoding = string ): string;\n</code></pre> Uppercases a string, this function makes use of the mbstring extension if available</p> <pre><code>echo Phalcon\\Helper\\Str::upper(\"hello\"); // HELLO\n</code></pre>"},{"location":"api/phalcon_html/","title":"Phalcon html","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_html/#htmlattributes","title":"Html\\Attributes","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Attributes\\RenderInterface</code></li> <li><code>Phalcon\\Collection</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Collection</code></p> </li> <li> <p>Implements</p> <ul> <li><code>RenderInterface</code></li> </ul> </li> </ul> <p>This class helps to work with HTML Attributes</p>"},{"location":"api/phalcon_html/#methods","title":"Methods","text":"<p><pre><code>public function __toString(): string;\n</code></pre> Alias of the render method</p> <p><pre><code>public function render(): string;\n</code></pre> Render attributes as HTML attributes</p>"},{"location":"api/phalcon_html/#htmlattributesattributesinterface","title":"Html\\Attributes\\AttributesInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Attributes</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Attributes</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> <li> <p>Phalcon\\Html\\Attributes\\AttributesInterface *</p> </li> <li>Interface Phalcon\\Html\\Attributes\\AttributesInterface */</li> </ul>"},{"location":"api/phalcon_html/#methods_1","title":"Methods","text":"<p><pre><code>public function getAttributes(): Attributes;\n</code></pre> Get Attributes</p> <p><pre><code>public function setAttributes( Attributes $attributes ): AttributesInterface;\n</code></pre> Set Attributes</p>"},{"location":"api/phalcon_html/#htmlattributesrenderinterface","title":"Html\\Attributes\\RenderInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Attributes</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul>"},{"location":"api/phalcon_html/#methods_2","title":"Methods","text":"<p><pre><code>public function render(): string;\n</code></pre> Generate a string represetation</p>"},{"location":"api/phalcon_html/#htmlbreadcrumbs","title":"Html\\Breadcrumbs","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\DiInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Html\\Breadcrumbs</p> <p>This component offers an easy way to create breadcrumbs for your application. The resulting HTML when calling <code>render()</code> will have each breadcrumb enclosed in <code>&lt;dt&gt;</code> tags, while the whole string is enclosed in <code>&lt;dl&gt;</code> tags.</p>"},{"location":"api/phalcon_html/#properties","title":"Properties","text":"<pre><code>/**\n * Keeps all the breadcrumbs\n *\n * @var array\n */\nprivate $elements;\n\n/**\n * Crumb separator\n *\n * @var string\n */\nprivate $separator =  '/' ;\n\n/**\n * The HTML template to use to render the breadcrumbs.\n *\n * @var string\n */\nprivate $template = \"&lt;dt&gt;&lt;a href=\\\"%link%\\\"&gt;%label%&lt;/a&gt;&lt;/dt&gt;\";\n</code></pre>"},{"location":"api/phalcon_html/#methods_3","title":"Methods","text":"<p><pre><code>public function add( string $label, string $link = string ): Breadcrumbs;\n</code></pre> Adds a new crumb.</p> <pre><code>// Adding a crumb with a link\n$breadcrumbs-&gt;add(\"Home\", \"/\");\n\n// Adding a crumb without a link (normally the last one)\n$breadcrumbs-&gt;add(\"Users\");\n</code></pre> <p><pre><code>public function clear(): void;\n</code></pre> Clears the crumbs</p> <pre><code>$breadcrumbs-&gt;clear()\n</code></pre> <p><pre><code>public function getSeparator(): string;\n</code></pre> Crumb separator</p> <p><pre><code>public function remove( string $link ): void;\n</code></pre> Removes crumb by url.</p> <pre><code>$breadcrumbs-&gt;remove(\"/admin/user/create\");\n\n// remove a crumb without an url (last link)\n$breadcrumbs-&gt;remove();\n</code></pre> <p><pre><code>public function render(): string;\n</code></pre> Renders and outputs breadcrumbs based on previously set template.</p> <pre><code>echo $breadcrumbs-&gt;render();\n</code></pre> <pre><code>public function setSeparator( string $separator )\n</code></pre> <p><pre><code>public function toArray(): array;\n</code></pre> Returns the internal breadcrumbs array</p>"},{"location":"api/phalcon_html/#htmlescaperexception","title":"Html\\Escaper\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Escaper</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Html\\Escaper will use this class</p>"},{"location":"api/phalcon_html/#htmlhelperabstracthelper","title":"Html\\Helper\\AbstractHelper","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Escaper\\EscaperInterface</code></li> <li><code>Phalcon\\Html\\Exception</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul>"},{"location":"api/phalcon_html/#properties_1","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $delimiter = '';\n\n/**\n * @var EscaperInterface\n */\nprotected $escaper;\n\n/**\n * @var string\n */\nprotected $indent = '    ';\n\n/**\n * @var int\n */\nprotected $indentLevel = 1;\n</code></pre>"},{"location":"api/phalcon_html/#methods_4","title":"Methods","text":"<p><pre><code>public function __construct( EscaperInterface $escaper );\n</code></pre> AbstractHelper constructor.</p> <p><pre><code>protected function close( string $tag, bool $raw = bool ): string;\n</code></pre> Produces a closing tag</p> <p><pre><code>protected function indent(): string;\n</code></pre> Replicates the indent x times as per indentLevel</p> <p><pre><code>protected function orderAttributes( array $overrides, array $attributes ): array;\n</code></pre> Keeps all the attributes sorted - same order all the tome</p> <p><pre><code>protected function renderArrayElements( array $elements, string $delimiter ): string;\n</code></pre> Traverses an array and calls the method defined in the first element with attributes as the second, returning the resulting string</p> <p><pre><code>protected function renderAttributes( array $attributes ): string;\n</code></pre> Renders all the attributes</p> <p><pre><code>protected function renderElement( string $tag, array $attributes = [] ): string;\n</code></pre> Renders an element</p> <p><pre><code>protected function renderFullElement( string $tag, string $text, array $attributes = [], bool $raw = bool ): string;\n</code></pre> Renders an element</p> <p><pre><code>protected function renderTag( string $tag, array $attributes = [], string $close = string ): string;\n</code></pre> Renders a tag</p> <p><pre><code>protected function selfClose( string $tag, array $attributes = [] ): string;\n</code></pre> Produces a self close tag i.e. </p>"},{"location":"api/phalcon_html/#htmlhelperabstractlist","title":"Html\\Helper\\AbstractList","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractHelper</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class AbstractList</p>"},{"location":"api/phalcon_html/#properties_2","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $attributes;\n\n/**\n * @var string\n */\nprotected $elementTag = \"li\";\n\n/**\n * @var array\n */\nprotected $store;\n</code></pre>"},{"location":"api/phalcon_html/#methods_5","title":"Methods","text":"<pre><code>public function __invoke( string $indent = null, string $delimiter = null, array $attributes = [] ): AbstractList;\n</code></pre> <p><pre><code>public function __toString();\n</code></pre> Generates and returns the HTML for the list.</p> <p><pre><code>abstract protected function getTag(): string;\n</code></pre> Returns the tag name.</p>"},{"location":"api/phalcon_html/#htmlhelperabstractseries","title":"Html\\Helper\\AbstractSeries","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractHelper</code></p> </li> <li> <p>Implements</p> </li> </ul>"},{"location":"api/phalcon_html/#properties_3","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $attributes;\n\n/**\n * @var array\n */\nprotected $store;\n</code></pre>"},{"location":"api/phalcon_html/#methods_6","title":"Methods","text":"<pre><code>public function __invoke( string $indent = null, string $delimiter = null ): AbstractSeries;\n</code></pre> <p><pre><code>public function __toString();\n</code></pre> Generates and returns the HTML for the list.</p> <p><pre><code>abstract protected function getTag(): string;\n</code></pre> Returns the tag name.</p>"},{"location":"api/phalcon_html/#htmlhelperanchor","title":"Html\\Helper\\Anchor","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractHelper</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Anchor</p>"},{"location":"api/phalcon_html/#methods_7","title":"Methods","text":"<p><pre><code>public function __invoke( string $href, string $text, array $attributes = [], bool $raw = bool ): string;\n</code></pre> Produce a  tag <pre><code>protected function processAttributes( string $href, array $attributes ): array;\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperbase","title":"Html\\Helper\\Base","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractHelper</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Base</p>"},{"location":"api/phalcon_html/#methods_8","title":"Methods","text":"<p><pre><code>public function __invoke( string $href = null, array $attributes = [] ): string;\n</code></pre> Produce a <code>&lt;base/&gt;</code> tag.</p>"},{"location":"api/phalcon_html/#htmlhelperbody","title":"Html\\Helper\\Body","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractHelper</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Body</p>"},{"location":"api/phalcon_html/#methods_9","title":"Methods","text":"<p><pre><code>public function __invoke( array $attributes = [] ): string;\n</code></pre> Produce a <code>&lt;body&gt;</code> tag.</p>"},{"location":"api/phalcon_html/#htmlhelperbutton","title":"Html\\Helper\\Button","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractHelper</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Button</p>"},{"location":"api/phalcon_html/#methods_10","title":"Methods","text":"<p><pre><code>public function __invoke( string $text, array $attributes = [], bool $raw = bool ): string;\n</code></pre> Produce a <code>&lt;button&gt;</code> tag.</p>"},{"location":"api/phalcon_html/#htmlhelperclose","title":"Html\\Helper\\Close","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractHelper</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Close</p>"},{"location":"api/phalcon_html/#methods_11","title":"Methods","text":"<p><pre><code>public function __invoke( string $tag, bool $raw = bool ): string;\n</code></pre> Produce a <code>&lt;/...&gt;</code> tag.</p>"},{"location":"api/phalcon_html/#htmlhelperelement","title":"Html\\Helper\\Element","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractHelper</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Element</p>"},{"location":"api/phalcon_html/#methods_12","title":"Methods","text":"<p><pre><code>public function __invoke( string $tag, string $text, array $attributes = [], bool $raw = bool ): string;\n</code></pre> Produce a tag.</p>"},{"location":"api/phalcon_html/#htmlhelperform","title":"Html\\Helper\\Form","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractHelper</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Form</p>"},{"location":"api/phalcon_html/#methods_13","title":"Methods","text":"<p><pre><code>public function __invoke( array $attributes = [] ): string;\n</code></pre> Produce a <code>&lt;form&gt;</code> tag.</p>"},{"location":"api/phalcon_html/#htmlhelperimg","title":"Html\\Helper\\Img","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractHelper</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Img</p>"},{"location":"api/phalcon_html/#methods_14","title":"Methods","text":"<p><pre><code>public function __invoke( string $src, array $attributes = [] ): string;\n</code></pre> Produce a  tag.</p>"},{"location":"api/phalcon_html/#htmlhelperinputabstractinput","title":"Html\\Helper\\Input\\AbstractInput","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Helper\\AbstractHelper</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractHelper</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class AbstractInput</p>"},{"location":"api/phalcon_html/#properties_4","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $type = 'text';\n\n/**\n * @var array\n */\nprotected $attributes;\n</code></pre>"},{"location":"api/phalcon_html/#methods_15","title":"Methods","text":"<pre><code>public function __invoke( string $name, string $value = null, array $attributes = [] ): AbstractInput;\n</code></pre> <p><pre><code>public function __toString();\n</code></pre> Returns the HTML for the input.</p> <p><pre><code>public function setValue( string $value = null ): AbstractInput;\n</code></pre> Sets the value of the element</p>"},{"location":"api/phalcon_html/#htmlhelperinputcheckbox","title":"Html\\Helper\\Input\\Checkbox","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Escaper\\EscaperInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Checkbox</p>"},{"location":"api/phalcon_html/#properties_5","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $label;\n\n/**\n * @var string\n */\nprotected $type = 'checkbox';\n</code></pre>"},{"location":"api/phalcon_html/#methods_16","title":"Methods","text":"<p><pre><code>public function __construct( EscaperInterface $escaper );\n</code></pre> AbstractHelper constructor.</p> <p><pre><code>public function __toString();\n</code></pre> Returns the HTML for the input.</p> <p><pre><code>public function label( array $attributes = [] ): Checkbox;\n</code></pre> Attaches a label to the element</p>"},{"location":"api/phalcon_html/#htmlhelperinputcolor","title":"Html\\Helper\\Input\\Color","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Color</p>"},{"location":"api/phalcon_html/#properties_6","title":"Properties","text":"<pre><code>//\nprotected $type = 'color';\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperinputdate","title":"Html\\Helper\\Input\\Date","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Date</p>"},{"location":"api/phalcon_html/#properties_7","title":"Properties","text":"<pre><code>//\nprotected $type = 'date';\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperinputdatetime","title":"Html\\Helper\\Input\\DateTime","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class DateTime</p>"},{"location":"api/phalcon_html/#properties_8","title":"Properties","text":"<pre><code>//\nprotected $type = 'datetime';\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperinputdatetimelocal","title":"Html\\Helper\\Input\\DateTimeLocal","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class DateTimeLocal</p>"},{"location":"api/phalcon_html/#properties_9","title":"Properties","text":"<pre><code>//\nprotected $type = 'datetime-local';\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperinputemail","title":"Html\\Helper\\Input\\Email","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Email</p>"},{"location":"api/phalcon_html/#properties_10","title":"Properties","text":"<pre><code>//\nprotected $type = 'email';\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperinputfile","title":"Html\\Helper\\Input\\File","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class File</p>"},{"location":"api/phalcon_html/#properties_11","title":"Properties","text":"<pre><code>//\nprotected $type = 'file';\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperinputhidden","title":"Html\\Helper\\Input\\Hidden","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Hidden</p>"},{"location":"api/phalcon_html/#properties_12","title":"Properties","text":"<pre><code>//\nprotected $type = 'hidden';\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperinputimage","title":"Html\\Helper\\Input\\Image","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Image</p>"},{"location":"api/phalcon_html/#properties_13","title":"Properties","text":"<pre><code>//\nprotected $type = 'image';\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperinputinput","title":"Html\\Helper\\Input\\Input","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Input</p>"},{"location":"api/phalcon_html/#methods_17","title":"Methods","text":"<p><pre><code>public function setType( string $type ): AbstractInput;\n</code></pre> Sets the type of the input</p>"},{"location":"api/phalcon_html/#htmlhelperinputmonth","title":"Html\\Helper\\Input\\Month","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Month</p>"},{"location":"api/phalcon_html/#properties_14","title":"Properties","text":"<pre><code>//\nprotected $type = 'month';\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperinputnumeric","title":"Html\\Helper\\Input\\Numeric","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Numeric</p>"},{"location":"api/phalcon_html/#properties_15","title":"Properties","text":"<pre><code>//\nprotected $type = 'numeric';\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperinputpassword","title":"Html\\Helper\\Input\\Password","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Password</p>"},{"location":"api/phalcon_html/#properties_16","title":"Properties","text":"<pre><code>//\nprotected $type = 'password';\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperinputradio","title":"Html\\Helper\\Input\\Radio","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>Checkbox</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Radio</p>"},{"location":"api/phalcon_html/#properties_17","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $type = 'radio';\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperinputrange","title":"Html\\Helper\\Input\\Range","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Range</p>"},{"location":"api/phalcon_html/#properties_18","title":"Properties","text":"<pre><code>//\nprotected $type = 'range';\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperinputsearch","title":"Html\\Helper\\Input\\Search","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Search</p>"},{"location":"api/phalcon_html/#properties_19","title":"Properties","text":"<pre><code>//\nprotected $type = 'search';\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperinputselect","title":"Html\\Helper\\Input\\Select","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Helper\\AbstractList</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractList</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Select</p>"},{"location":"api/phalcon_html/#properties_20","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $elementTag = 'option';\n\n/**\n * @var bool\n */\nprotected $inOptGroup = false;\n\n/**\n * @var string\n */\nprotected $selected = ;\n</code></pre>"},{"location":"api/phalcon_html/#methods_18","title":"Methods","text":"<p><pre><code>public function add( string $text, string $value = null, array $attributes = [], bool $raw = bool ): Select;\n</code></pre> Add an element to the list</p> <p><pre><code>public function addPlaceholder( string $text, mixed $value = null, array $attributes = [], bool $raw = bool ): Select;\n</code></pre> Add a placeholder to the element</p> <p><pre><code>public function optGroup( string $label = null, array $attributes = [] ): Select;\n</code></pre> Creates an option group</p> <pre><code>public function selected( string $selected ): Select;\n</code></pre> <pre><code>protected function getTag(): string;\n</code></pre> <pre><code>protected function optGroupEnd(): string;\n</code></pre> <pre><code>protected function optGroupStart( string $label, array $attributes ): string;\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperinputsubmit","title":"Html\\Helper\\Input\\Submit","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Submit</p>"},{"location":"api/phalcon_html/#properties_21","title":"Properties","text":"<pre><code>//\nprotected $type = 'submit';\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperinputtel","title":"Html\\Helper\\Input\\Tel","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Tel</p>"},{"location":"api/phalcon_html/#properties_22","title":"Properties","text":"<pre><code>//\nprotected $type = 'tel';\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperinputtext","title":"Html\\Helper\\Input\\Text","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Text</p>"},{"location":"api/phalcon_html/#htmlhelperinputtextarea","title":"Html\\Helper\\Input\\Textarea","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Textarea</p>"},{"location":"api/phalcon_html/#properties_23","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $type = 'textarea';\n</code></pre>"},{"location":"api/phalcon_html/#methods_19","title":"Methods","text":"<p><pre><code>public function __toString();\n</code></pre> Returns the HTML for the input.</p>"},{"location":"api/phalcon_html/#htmlhelperinputtime","title":"Html\\Helper\\Input\\Time","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Time</p>"},{"location":"api/phalcon_html/#properties_24","title":"Properties","text":"<pre><code>//\nprotected $type = 'time';\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperinputurl","title":"Html\\Helper\\Input\\Url","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Url</p>"},{"location":"api/phalcon_html/#properties_25","title":"Properties","text":"<pre><code>//\nprotected $type = 'url';\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperinputweek","title":"Html\\Helper\\Input\\Week","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper\\Input</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractInput</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Week</p>"},{"location":"api/phalcon_html/#properties_26","title":"Properties","text":"<pre><code>//\nprotected $type = 'week';\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperlabel","title":"Html\\Helper\\Label","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractHelper</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Label</p>"},{"location":"api/phalcon_html/#methods_20","title":"Methods","text":"<p><pre><code>public function __invoke( string $label, array $attributes = [], bool $raw = bool ): string;\n</code></pre> Produce a <code>&lt;label&gt;</code> tag.</p>"},{"location":"api/phalcon_html/#htmlhelperlink","title":"Html\\Helper\\Link","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>Style</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Creates  tags</p>"},{"location":"api/phalcon_html/#methods_21","title":"Methods","text":"<p><pre><code>public function add( string $url, array $attributes = [] );\n</code></pre> Add an element to the list</p> <p><pre><code>protected function getAttributes( string $url, array $attributes ): array;\n</code></pre> Returns the necessary attributes</p> <pre><code>protected function getTag(): string;\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelpermeta","title":"Html\\Helper\\Meta","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractSeries</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Meta</p>"},{"location":"api/phalcon_html/#methods_22","title":"Methods","text":"<p><pre><code>public function add( array $attributes = [] ): Meta;\n</code></pre> Add an element to the list</p> <pre><code>public function addHttp( string $httpEquiv, string $content ): Meta;\n</code></pre> <pre><code>public function addName( string $name, string $content ): Meta;\n</code></pre> <pre><code>public function addProperty( string $name, string $content ): Meta;\n</code></pre> <pre><code>protected function getTag(): string;\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperol","title":"Html\\Helper\\Ol","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractList</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Ol</p>"},{"location":"api/phalcon_html/#methods_23","title":"Methods","text":"<p><pre><code>public function add( string $text, array $attributes = [], bool $raw = bool ): AbstractList;\n</code></pre> Add an element to the list</p> <pre><code>protected function getTag(): string;\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperscript","title":"Html\\Helper\\Script","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractSeries</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Script</p>"},{"location":"api/phalcon_html/#methods_24","title":"Methods","text":"<p><pre><code>protected function getAttributes( string $src, array $attributes ): array;\n</code></pre> Returns the necessary attributes</p> <pre><code>protected function getTag(): string;\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelperstyle","title":"Html\\Helper\\Style","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractSeries</code></p> </li> </ul> <p>Class Style</p>"},{"location":"api/phalcon_html/#methods_25","title":"Methods","text":"<p><pre><code>public function add( string $href, array $attributes = [] );\n</code></pre> Add an element to the list</p> <p><pre><code>protected function getAttributes( string $href, array $attributes ): array;\n</code></pre> Returns the necessary attributes</p> <pre><code>protected function getTag(): string;\n</code></pre>"},{"location":"api/phalcon_html/#htmlhelpertitle","title":"Html\\Helper\\Title","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractHelper</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Title</p>"},{"location":"api/phalcon_html/#properties_27","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $append;\n\n/**\n * @var array\n */\nprotected $prepend;\n\n/**\n * @var string\n */\nprotected $title = ;\n\n/**\n * @var string\n */\nprotected $separator = ;\n</code></pre>"},{"location":"api/phalcon_html/#methods_26","title":"Methods","text":"<p><pre><code>public function __invoke( string $separator = string, string $indent = null, string $delimiter = null ): Title;\n</code></pre> Sets the separator and returns the object back</p> <p><pre><code>public function __toString();\n</code></pre> Returns the title tags</p> <p><pre><code>public function append( string $text, bool $raw = bool ): Title;\n</code></pre> Appends text to current document title</p> <p><pre><code>public function get(): string;\n</code></pre> Returns the title</p> <p><pre><code>public function prepend( string $text, bool $raw = bool ): Title;\n</code></pre> Prepends text to current document title</p> <p><pre><code>public function set( string $text, bool $raw = bool ): Title;\n</code></pre> Sets the title</p>"},{"location":"api/phalcon_html/#htmlhelperul","title":"Html\\Helper\\Ul","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Helper</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>Ol</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Ul</p>"},{"location":"api/phalcon_html/#methods_27","title":"Methods","text":"<pre><code>protected function getTag(): string;\n</code></pre>"},{"location":"api/phalcon_html/#htmllinkevolvablelink","title":"Html\\Link\\EvolvableLink","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Link</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Psr\\Link\\EvolvableLinkInterface</code></li> </ul> </li> <li> <p>Extends</p> <ul> <li><code>Link</code></li> </ul> </li> <li> <p>Implements</p> <ul> <li><code>EvolvableLinkInterface</code></li> </ul> </li> </ul> <p>Class Phalcon\\Http\\Link\\EvolvableLink</p>"},{"location":"api/phalcon_html/#methods_28","title":"Methods","text":"<p><pre><code>public function withAttribute( mixed $attribute, mixed $value );\n</code></pre> Returns an instance with the specified attribute added.</p> <p>If the specified attribute is already present, it will be overwritten with the new value.</p> <p><pre><code>public function withHref( mixed $href );\n</code></pre> Returns an instance with the specified href.</p> <p><pre><code>public function withRel( mixed $rel );\n</code></pre> Returns an instance with the specified relationship included.</p> <p>If the specified rel is already present, this method MUST return normally without errors, but without adding the rel a second time.</p> <p><pre><code>public function withoutAttribute( mixed $attribute );\n</code></pre> Returns an instance with the specified attribute excluded.</p> <p>If the specified attribute is not present, this method MUST return normally without errors.</p> <p><pre><code>public function withoutRel( mixed $rel );\n</code></pre> Returns an instance with the specified relationship excluded.</p> <p>If the specified rel is not present, this method MUST return normally without errors.</p>"},{"location":"api/phalcon_html/#htmllinkevolvablelinkprovider","title":"Html\\Link\\EvolvableLinkProvider","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Link</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Psr\\Link\\EvolvableLinkProviderInterface</code></li> <li><code>Psr\\Link\\LinkInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>LinkProvider</code></p> </li> <li> <p>Implements</p> <ul> <li><code>EvolvableLinkProviderInterface</code></li> </ul> </li> </ul> <p>Class Phalcon\\Http\\Link\\LinkProvider</p>"},{"location":"api/phalcon_html/#methods_29","title":"Methods","text":"<p><pre><code>public function withLink( LinkInterface $link );\n</code></pre> Returns an instance with the specified link included.</p> <p>If the specified link is already present, this method MUST return normally without errors. The link is present if link is === identical to a link object already in the collection.</p> <p><pre><code>public function withoutLink( LinkInterface $link );\n</code></pre> Returns an instance with the specified link removed.</p> <p>If the specified link is not present, this method MUST return normally without errors. The link is present if link is === identical to a link object already in the collection.</p>"},{"location":"api/phalcon_html/#htmllinklink","title":"Html\\Link\\Link","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Link</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Psr\\Link\\LinkInterface</code></li> <li><code>Phalcon\\Collection</code></li> <li><code>Phalcon\\Collection\\CollectionInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>LinkInterface</code></li> </ul> </li> </ul> <p>Class Phalcon\\Http\\Link\\Link</p>"},{"location":"api/phalcon_html/#properties_28","title":"Properties","text":"<pre><code>/**\n * @var Collection|CollectionInterface\n */\nprotected $attributes;\n\n/**\n * @var string\n */\nprotected $href = '';\n\n/**\n * @var Collection|CollectionInterface\n */\nprotected $rels;\n\n/**\n * @var bool\n */\nprotected $templated = false;\n</code></pre>"},{"location":"api/phalcon_html/#methods_30","title":"Methods","text":"<p><pre><code>public function __construct( string $rel = string, string $href = string, array $attributes = [] );\n</code></pre> Link constructor.</p> <p><pre><code>public function getAttributes();\n</code></pre> Returns a list of attributes that describe the target URI.</p> <p><pre><code>public function getHref();\n</code></pre> Returns the target of the link.</p> <p>The target link must be one of: - An absolute URI, as defined by RFC 5988. - A relative URI, as defined by RFC 5988. The base of the relative link     is assumed to be known based on context by the client. - A URI template as defined by RFC 6570.</p> <p>If a URI template is returned, isTemplated() MUST return True.</p> <p><pre><code>public function getRels();\n</code></pre> Returns the relationship type(s) of the link.</p> <p>This method returns 0 or more relationship types for a link, expressed as an array of strings.</p> <p><pre><code>public function isTemplated();\n</code></pre> Returns whether or not this is a templated link.</p> <p><pre><code>protected function hrefIsTemplated( string $href ): bool;\n</code></pre> Determines if a href is a templated link or not.</p> <p>@see https://tools.ietf.org/html/rfc6570</p>"},{"location":"api/phalcon_html/#htmllinklinkprovider","title":"Html\\Link\\LinkProvider","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Link</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Psr\\Link\\Interfaces\\LinkInterface</code></li> <li><code>Psr\\Link\\Interfaces\\LinkProviderInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>LinkProviderInterface</code></li> </ul> </li> </ul>"},{"location":"api/phalcon_html/#properties_29","title":"Properties","text":"<pre><code>/**\n * @var LinkInterface[]\n */\nprotected $links;\n</code></pre>"},{"location":"api/phalcon_html/#methods_31","title":"Methods","text":"<p><pre><code>public function __construct( array $links = [] );\n</code></pre> LinkProvider constructor.</p> <p><pre><code>public function getLinks();\n</code></pre> Returns an iterable of LinkInterface objects.</p> <p>The iterable may be an array or any PHP \\Traversable object. If no links are available, an empty array or \\Traversable MUST be returned.</p> <p><pre><code>public function getLinksByRel( mixed $rel );\n</code></pre> Returns an iterable of LinkInterface objects that have a specific relationship.</p> <p>The iterable may be an array or any PHP \\Traversable object. If no links with that relationship are available, an empty array or \\Traversable MUST be returned.</p> <p><pre><code>protected function getKey( LinkInterface $link ): string;\n</code></pre> Returns the object hash key</p>"},{"location":"api/phalcon_html/#htmllinkserializerheader","title":"Html\\Link\\Serializer\\Header","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Link\\Serializer</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Psr\\Link\\EvolvableLinkInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>SerializerInterface</code></li> </ul> </li> </ul> <p>Class Phalcon\\Http\\Link\\Serializer\\Header</p>"},{"location":"api/phalcon_html/#methods_32","title":"Methods","text":"<p><pre><code>public function serialize( array $links ): string | null;\n</code></pre> Serializes all the passed links to a HTTP link header</p>"},{"location":"api/phalcon_html/#htmllinkserializerserializerinterface","title":"Html\\Link\\Serializer\\SerializerInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html\\Link\\Serializer</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Phalcon\\Http\\Link\\Serializer\\SerializerInterface</p>"},{"location":"api/phalcon_html/#methods_33","title":"Methods","text":"<p><pre><code>public function serialize( array $links ): string | null;\n</code></pre> Serializer method</p>"},{"location":"api/phalcon_html/#htmltagfactory","title":"Html\\TagFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Html</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Escaper</code></li> <li><code>Phalcon\\Escaper\\EscaperInterface</code></li> <li><code>Phalcon\\Factory\\AbstractFactory</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFactory</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>ServiceLocator implementation for Tag helpers.</p>"},{"location":"api/phalcon_html/#properties_30","title":"Properties","text":"<pre><code>/**\n * @var EscaperInterface\n */\nprivate $escaper;\n</code></pre>"},{"location":"api/phalcon_html/#methods_34","title":"Methods","text":"<p><pre><code>public function __construct( EscaperInterface $escaper, array $services = [] );\n</code></pre> TagFactory constructor.</p> <pre><code>public function newInstance( string $name ): mixed;\n</code></pre> <pre><code>protected function getAdapters(): array;\n</code></pre>"},{"location":"api/phalcon_http/","title":"Phalcon http","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_http/#httpcookie","title":"Http\\Cookie","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\AbstractInjectionAware</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Encryption\\Crypt\\CryptInterface</code></li> <li><code>Phalcon\\Encryption\\Crypt\\Mismatch</code></li> <li><code>Phalcon\\Filter\\FilterInterface</code></li> <li><code>Phalcon\\Http\\Cookie\\CookieInterface</code></li> <li><code>Phalcon\\Http\\Cookie\\Exception</code></li> <li><code>Phalcon\\Http\\Response\\Exception</code></li> <li><code>Phalcon\\Session\\ManagerInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractInjectionAware</code></p> </li> <li> <p>Implements</p> <ul> <li><code>CookieInterface</code></li> </ul> </li> </ul> <p>Provide OO wrappers to manage a HTTP cookie.</p>"},{"location":"api/phalcon_http/#properties","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $domain;\n\n/**\n * @var int\n */\nprotected $expire;\n\n//\nprotected $filter;\n\n/**\n * @var bool\n */\nprotected $httpOnly;\n\n/**\n * @var string\n */\nprotected $name;\n\n/**\n * @var array\n */\nprotected $options;\n\n/**\n * @var string\n */\nprotected $path;\n\n/**\n * @var bool\n */\nprotected $read = false;\n\n/**\n * @var bool\n */\nprotected $restored = false;\n\n/**\n * @var bool\n */\nprotected $secure;\n\n/**\n * The cookie's sign key.\n *\n * @var string|null\n */\nprotected $signKey;\n\n/**\n * @var bool\n */\nprotected $useEncryption = false;\n\n/**\n * @var mixed\n */\nprotected $value;\n</code></pre>"},{"location":"api/phalcon_http/#methods","title":"Methods","text":"<p><pre><code>public function __construct( string $name, mixed $value = null, int $expire = int, string $path = string, bool $secure = null, string $domain = null, bool $httpOnly = bool, array $options = [] );\n</code></pre> Phalcon\\Http\\Cookie constructor.</p> <p><pre><code>public function __toString(): string;\n</code></pre> Magic __toString method converts the cookie's value to string</p> <p><pre><code>public function delete();\n</code></pre> Deletes the cookie by setting an expire time in the past</p> <p><pre><code>public function getDomain(): string;\n</code></pre> Returns the domain that the cookie is available to</p> <p><pre><code>public function getExpiration(): string;\n</code></pre> Returns the current expiration time</p> <p><pre><code>public function getHttpOnly(): bool;\n</code></pre> Returns if the cookie is accessible only through the HTTP protocol</p> <p><pre><code>public function getName(): string;\n</code></pre> Returns the current cookie's name</p> <p><pre><code>public function getOptions(): array;\n</code></pre> Returns the current cookie's options</p> <p><pre><code>public function getPath(): string;\n</code></pre> Returns the current cookie's path</p> <p><pre><code>public function getSecure(): bool;\n</code></pre> Returns whether the cookie must only be sent when the connection is secure (HTTPS)</p> <p><pre><code>public function getValue( mixed $filters = null, mixed $defaultValue = null ): mixed;\n</code></pre> Returns the cookie's value.</p> <p><pre><code>public function isUsingEncryption(): bool;\n</code></pre> Check if the cookie is using implicit encryption</p> <p><pre><code>public function restore(): CookieInterface;\n</code></pre> Reads the cookie-related info from the SESSION to restore the cookie as it was set.</p> <p>This method is automatically called internally so normally you don't need to call it.</p> <p><pre><code>public function send(): CookieInterface;\n</code></pre> Sends the cookie to the HTTP client.</p> <p>Stores the cookie definition in session.</p> <p><pre><code>public function setDomain( string $domain ): CookieInterface;\n</code></pre> Sets the domain that the cookie is available to</p> <p><pre><code>public function setExpiration( int $expire ): CookieInterface;\n</code></pre> Sets the cookie's expiration time</p> <p><pre><code>public function setHttpOnly( bool $httpOnly ): CookieInterface;\n</code></pre> Sets if the cookie is accessible only through the HTTP protocol</p> <p><pre><code>public function setOptions( array $options ): CookieInterface;\n</code></pre> Sets the cookie's options</p> <p><pre><code>public function setPath( string $path ): CookieInterface;\n</code></pre> Sets the cookie's path</p> <p><pre><code>public function setSecure( bool $secure ): CookieInterface;\n</code></pre> Sets if the cookie must only be sent when the connection is secure (HTTPS)</p> <p><pre><code>public function setSignKey( string $signKey = null ): CookieInterface;\n</code></pre> Sets the cookie's sign key.</p> <p>The <code>$signKey</code> MUST be at least 32 characters long and generated using a cryptographically secure pseudo random generator.</p> <p>Use NULL to disable cookie signing.</p> <p><pre><code>public function setValue( mixed $value ): CookieInterface;\n</code></pre> Sets the cookie's value</p> <p><pre><code>public function useEncryption( bool $useEncryption ): CookieInterface;\n</code></pre> Sets if the cookie must be encrypted/decrypted automatically</p> <p><pre><code>protected function assertSignKeyIsLongEnough( string $signKey ): void;\n</code></pre> Assert the cookie's key is enough long.</p> <p>@throws \\Phalcon\\Http\\Cookie\\Exception</p>"},{"location":"api/phalcon_http/#httpcookiecookieinterface","title":"Http\\Cookie\\CookieInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Cookie</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Http\\Cookie</p>"},{"location":"api/phalcon_http/#methods_1","title":"Methods","text":"<p><pre><code>public function delete();\n</code></pre> Deletes the cookie</p> <p><pre><code>public function getDomain(): string;\n</code></pre> Returns the domain that the cookie is available to</p> <p><pre><code>public function getExpiration(): string;\n</code></pre> Returns the current expiration time</p> <p><pre><code>public function getHttpOnly(): bool;\n</code></pre> Returns if the cookie is accessible only through the HTTP protocol</p> <p><pre><code>public function getName(): string;\n</code></pre> Returns the current cookie's name</p> <p><pre><code>public function getOptions(): array;\n</code></pre> Returns the current cookie's options</p> <p><pre><code>public function getPath(): string;\n</code></pre> Returns the current cookie's path</p> <p><pre><code>public function getSecure(): bool;\n</code></pre> Returns whether the cookie must only be sent when the connection is secure (HTTPS)</p> <p><pre><code>public function getValue( mixed $filters = null, mixed $defaultValue = null ): mixed;\n</code></pre> Returns the cookie's value.</p> <p><pre><code>public function isUsingEncryption(): bool;\n</code></pre> Check if the cookie is using implicit encryption</p> <p><pre><code>public function send(): CookieInterface;\n</code></pre> Sends the cookie to the HTTP client</p> <p><pre><code>public function setDomain( string $domain ): CookieInterface;\n</code></pre> Sets the domain that the cookie is available to</p> <p><pre><code>public function setExpiration( int $expire ): CookieInterface;\n</code></pre> Sets the cookie's expiration time</p> <p><pre><code>public function setHttpOnly( bool $httpOnly ): CookieInterface;\n</code></pre> Sets if the cookie is accessible only through the HTTP protocol</p> <p><pre><code>public function setOptions( array $options ): CookieInterface;\n</code></pre> Sets the cookie's options</p> <p><pre><code>public function setPath( string $path ): CookieInterface;\n</code></pre> Sets the cookie's expiration time</p> <p><pre><code>public function setSecure( bool $secure ): CookieInterface;\n</code></pre> Sets if the cookie must only be sent when the connection is secure (HTTPS)</p> <p><pre><code>public function setValue( mixed $value ): CookieInterface;\n</code></pre> Sets the cookie's value</p> <p><pre><code>public function useEncryption( bool $useEncryption ): CookieInterface;\n</code></pre> Sets if the cookie must be encrypted/decrypted automatically</p>"},{"location":"api/phalcon_http/#httpcookieexception","title":"Http\\Cookie\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Cookie</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Http\\Cookie\\Exception</p> <p>Exceptions thrown in Phalcon\\Http\\Cookie will use this class.</p>"},{"location":"api/phalcon_http/#httpmessageabstractcommon","title":"Http\\Message\\AbstractCommon","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Message</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Http\\Message</code></li> <li><code>Phalcon\\Http\\Message\\Exception\\InvalidArgumentException</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Common methods</p>"},{"location":"api/phalcon_http/#methods_2","title":"Methods","text":"<p><pre><code>final protected function checkStringParameter( mixed $element ): void;\n</code></pre> Checks the element passed if it is a string</p> <p><pre><code>final protected function cloneInstance( mixed $element, string $property ): mixed;\n</code></pre> Returns a new instance having set the parameter</p> <p><pre><code>final protected function processWith( mixed $element, string $property ): mixed;\n</code></pre> Checks the element passed; assigns it to the property and returns a clone of the object back</p>"},{"location":"api/phalcon_http/#httpmessageabstractmessage","title":"Http\\Message\\AbstractMessage","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Message</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Collection</code></li> <li><code>Phalcon\\Collection\\CollectionInterface</code></li> <li><code>Phalcon\\Http\\Message\\Exception\\InvalidArgumentException</code></li> <li><code>Psr\\Http\\Message\\StreamInterface</code></li> <li><code>Psr\\Http\\Message\\UriInterface</code></li> </ul> </li> <li> <p>Extends</p> <ul> <li><code>AbstractCommon</code></li> </ul> </li> <li> <p>Implements</p> </li> </ul> <p>Message methods</p>"},{"location":"api/phalcon_http/#properties_1","title":"Properties","text":"<pre><code>/**\n * Gets the body of the message.\n *\n * @var StreamInterface\n */\nprotected $body;\n\n/**\n * @var Collection|CollectionInterface\n */\nprotected $headers;\n\n/**\n * Retrieves the HTTP protocol version as a string.\n *\n * The string MUST contain only the HTTP version number (e.g., '1.1',\n * '1.0').\n *\n * @return string HTTP protocol version.\n *\n * @var string\n */\nprotected $protocolVersion = 1.1;\n\n/**\n * Retrieves the URI instance.\n *\n * This method MUST return a UriInterface instance.\n *\n * @see https://tools.ietf.org/html/rfc3986#section-4.3\n *\n * @var UriInterface\n */\nprotected $uri;\n</code></pre>"},{"location":"api/phalcon_http/#methods_3","title":"Methods","text":"<pre><code>public function getBody(): StreamInterface\n</code></pre> <p><pre><code>public function getHeader( mixed $name ): array;\n</code></pre> Retrieves a message header value by the given case-insensitive name.</p> <p>This method returns an array of all the header values of the given case-insensitive header name.</p> <p>If the header does not appear in the message, this method MUST return an empty array.</p> <p><pre><code>public function getHeaderLine( mixed $name ): string;\n</code></pre> Retrieves a comma-separated string of the values for a single header.</p> <p>This method returns all of the header values of the given case-insensitive header name as a string concatenated together using a comma.</p> <p>NOTE: Not all header values may be appropriately represented using comma concatenation. For such headers, use getHeader() instead and supply your own delimiter when concatenating.</p> <p>If the header does not appear in the message, this method MUST return an empty string.</p> <p><pre><code>public function getHeaders(): array;\n</code></pre> Retrieves all message header values.</p> <p>The keys represent the header name as it will be sent over the wire, and each value is an array of strings associated with the header.</p> <pre><code>// Represent the headers as a string\nforeach ($message-&gt;getHeaders() as $name =&gt; $values) {\n    echo $name . ': ' . implode(', ', $values);\n}\n\n// Emit headers iteratively:\nforeach ($message-&gt;getHeaders() as $name =&gt; $values) {\n    foreach ($values as $value) {\n        header(sprintf('%s: %s', $name, $value), false);\n    }\n}\n</code></pre> <p>While header names are not case-sensitive, getHeaders() will preserve the exact case in which headers were originally specified.</p> <pre><code>public function getProtocolVersion(): string\n</code></pre> <pre><code>public function getUri(): UriInterface\n</code></pre> <p><pre><code>public function hasHeader( mixed $name ): bool;\n</code></pre> Checks if a header exists by the given case-insensitive name.</p> <p><pre><code>public function withAddedHeader( mixed $name, mixed $value ): mixed;\n</code></pre> Return an instance with the specified header appended with the given value.</p> <p>Existing values for the specified header will be maintained. The new value(s) will be appended to the existing list. If the header did not exist previously, it will be added.</p> <p>This method MUST be implemented in such a way as to retain the immutability of the message, and MUST return an instance that has the new header and/or value.</p> <p><pre><code>public function withBody( StreamInterface $body ): mixed;\n</code></pre> Return an instance with the specified message body.</p> <p>The body MUST be a StreamInterface object.</p> <p>This method MUST be implemented in such a way as to retain the immutability of the message, and MUST return a new instance that has the new body stream.</p> <p><pre><code>public function withHeader( mixed $name, mixed $value ): mixed;\n</code></pre> Return an instance with the provided value replacing the specified header.</p> <p>While header names are case-insensitive, the casing of the header will be preserved by this function, and returned from getHeaders().</p> <p>This method MUST be implemented in such a way as to retain the immutability of the message, and MUST return an instance that has the new and/or updated header and value.</p> <p><pre><code>public function withProtocolVersion( mixed $version ): mixed;\n</code></pre> Return an instance with the specified HTTP protocol version.</p> <p>The version string MUST contain only the HTTP version number (e.g., '1.1', '1.0').</p> <p>This method MUST be implemented in such a way as to retain the immutability of the message, and MUST return an instance that has the new protocol version.</p> <p><pre><code>public function withoutHeader( mixed $name ): mixed;\n</code></pre> Return an instance without the specified header.</p> <p>Header resolution MUST be done without case-sensitivity.</p> <p>This method MUST be implemented in such a way as to retain the immutability of the message, and MUST return an instance that removes the named header.</p> <p><pre><code>final protected function checkHeaderHost( CollectionInterface $collection ): CollectionInterface;\n</code></pre> Ensure Host is the first header.</p> <p>@see: https://tools.ietf.org/html/rfc7230#section-5.4</p> <p><pre><code>final protected function checkHeaderName( mixed $name ): void;\n</code></pre> Check the name of the header. Throw exception if not valid</p> <p>@see https://tools.ietf.org/html/rfc7230#section-3.2</p> <p><pre><code>final protected function checkHeaderValue( mixed $value ): void;\n</code></pre> Validates a header value</p> <p>Most HTTP header field values are defined using common syntax components (token, quoted-string, and comment) separated by whitespace or specific delimiting characters.  Delimiters are chosen from the set of US-ASCII visual characters not allowed in a token (DQUOTE and '(),/:;&lt;=&gt;?@[]{}').</p> <pre><code>token          = 1*tchar\n\ntchar          = '!' / '#' / '$' / '%' / '&amp;' / ''' / '*'\n               / '+' / '-' / '.' / '^' / '_' / '`' / '|' / '~'\n               / DIGIT / ALPHA\n               ; any VCHAR, except delimiters\n</code></pre> <p>A string of text is parsed as a single value if it is quoted using double-quote marks.</p> <pre><code>quoted-string  = DQUOTE( qdtext / quoted-pair ) DQUOTE\nqdtext         = HTAB / SP /%x21 / %x23-5B / %x5D-7E / obs-text\nobs-text       = %x80-FF\n</code></pre> <p>Comments can be included in some HTTP header fields by surrounding the comment text with parentheses.  Comments are only allowed in fields containing 'comment' as part of their field value definition.</p> <pre><code>comment        = '('( ctext / quoted-pair / comment ) ')'\nctext          = HTAB / SP / %x21-27 / %x2A-5B / %x5D-7E / obs-text\n</code></pre> <p>The backslash octet ('\\') can be used as a single-octet quoting mechanism within quoted-string and comment constructs.  Recipients that process the value of a quoted-string MUST handle a quoted-pair as if it were replaced by the octet following the backslash.</p> <pre><code>quoted-pair    = '\\' ( HTAB / SP / VCHAR / obs-text )\n</code></pre> <p>A sender SHOULD NOT generate a quoted-pair in a quoted-string except where necessary to quote DQUOTE and backslash octets occurring within that string.  A sender SHOULD NOT generate a quoted-pair in a comment except where necessary to quote parentheses ['(' and ')'] and backslash octets occurring within that comment.</p> <p>@see https://tools.ietf.org/html/rfc7230#section-3.2.6</p> <p><pre><code>final protected function getHeaderValue( mixed $values ): array;\n</code></pre> Returns the header values checked for validity</p> <p><pre><code>final protected function getUriHost( UriInterface $uri ): string;\n</code></pre> Return the host and if applicable the port</p> <p><pre><code>final protected function populateHeaderCollection( array $headers ): CollectionInterface;\n</code></pre> Populates the header collection</p> <p><pre><code>final protected function processBody( mixed $body = string, string $mode = string ): StreamInterface;\n</code></pre> Set a valid stream</p> <p><pre><code>final protected function processHeaders( mixed $headers ): CollectionInterface;\n</code></pre> Sets the headers</p> <p><pre><code>final protected function processProtocol( mixed $protocol = string ): string;\n</code></pre> Checks the protocol</p>"},{"location":"api/phalcon_http/#httpmessageabstractrequest","title":"Http\\Message\\AbstractRequest","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Message</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Http\\Message\\Exception\\InvalidArgumentException</code></li> <li><code>Psr\\Http\\Message\\UriInterface</code></li> </ul> </li> <li> <p>Extends</p> <ul> <li><code>AbstractMessage</code></li> </ul> </li> <li> <p>Implements</p> </li> </ul> <p>Request methods</p>"},{"location":"api/phalcon_http/#properties_2","title":"Properties","text":"<pre><code>/**\n * Retrieves the HTTP method of the request.\n *\n * @var string\n */\nprotected $method = 'GET';\n\n/**\n * The request-target, if it has been provided or calculated.\n *\n * @var null|string\n */\nprotected $requestTarget;\n\n/**\n * Retrieves the URI instance.\n *\n * This method MUST return a UriInterface instance.\n *\n * @see https://tools.ietf.org/html/rfc3986#section-4.3\n *\n * @var UriInterface\n */\nprotected $uri;\n</code></pre>"},{"location":"api/phalcon_http/#methods_4","title":"Methods","text":"<pre><code>public function getMethod(): string\n</code></pre> <p><pre><code>public function getRequestTarget(): string;\n</code></pre> Retrieves the message's request target.</p> <p>Retrieves the message's request-target either as it will appear (for clients), as it appeared at request (for servers), or as it was specified for the instance (see withRequestTarget()).</p> <p>In most cases, this will be the origin-form of the composed URI, unless a value was provided to the concrete implementation (see withRequestTarget() below).</p> <pre><code>public function getUri(): UriInterface\n</code></pre> <p><pre><code>public function withMethod( mixed $method ): mixed;\n</code></pre> Return an instance with the provided HTTP method.</p> <p>While HTTP method names are typically all uppercase characters, HTTP method names are case-sensitive and thus implementations SHOULD NOT modify the given string.</p> <p>This method MUST be implemented in such a way as to retain the immutability of the message, and MUST return an instance that has the changed request method.</p> <p><pre><code>public function withRequestTarget( mixed $requestTarget ): mixed;\n</code></pre> Return an instance with the specific request-target.</p> <p>If the request needs a non-origin-form request-target \u2014 e.g., for specifying an absolute-form, authority-form, or asterisk-form \u2014 this method may be used to create an instance with the specified request-target, verbatim.</p> <p>This method MUST be implemented in such a way as to retain the immutability of the message, and MUST return an instance that has the changed request target.</p> <p>@see https://tools.ietf.org/html/rfc7230#section-5.3 (for the various     request-target forms allowed in request messages)</p> <p><pre><code>public function withUri( UriInterface $uri, mixed $preserveHost = bool ): mixed;\n</code></pre> Returns an instance with the provided URI.</p> <p>This method MUST update the Host header of the returned request by default if the URI contains a host component. If the URI does not contain a host component, any pre-existing Host header MUST be carried over to the returned request.</p> <p>You can opt-in to preserving the original state of the Host header by setting <code>$preserveHost</code> to <code>true</code>. When <code>$preserveHost</code> is set to <code>true</code>, this method interacts with the Host header in the following ways:</p> <ul> <li>If the Host header is missing or empty, and the new URI contains   a host component, this method MUST update the Host header in the   returned request.</li> <li>If the Host header is missing or empty, and the new URI does not contain a host component, this method MUST NOT update the Host header in the returned request.</li> <li>If a Host header is present and non-empty, this method MUST NOT update   the Host header in the returned request.</li> </ul> <p>This method MUST be implemented in such a way as to retain the immutability of the message, and MUST return an instance that has the new UriInterface instance.</p> <p>@see https://tools.ietf.org/html/rfc3986#section-4.3</p> <p><pre><code>final protected function processMethod( mixed $method = string ): string;\n</code></pre> Check the method</p> <p><pre><code>final protected function processUri( mixed $uri ): UriInterface;\n</code></pre> Sets a valid Uri</p>"},{"location":"api/phalcon_http/#httpmessageexceptioninvalidargumentexception","title":"Http\\Message\\Exception\\InvalidArgumentException","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Message\\Exception</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Throwable</code></li> </ul> </li> <li> <p>Extends</p> <ul> <li><code>InvalidArgumentException</code></li> </ul> </li> <li> <p>Implements</p> <ul> <li><code>Throwable</code></li> </ul> </li> </ul>"},{"location":"api/phalcon_http/#httpmessagerequest","title":"Http\\Message\\Request","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Message</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Http\\Message\\Stream\\Input</code></li> <li><code>Phalcon\\Http\\Message\\AbstractRequest</code></li> <li><code>Psr\\Http\\Message\\RequestInterface</code></li> <li><code>Psr\\Http\\Message\\StreamInterface</code></li> <li><code>Psr\\Http\\Message\\UriInterface</code></li> </ul> </li> <li> <p>Extends</p> <ul> <li><code>AbstractRequest</code></li> </ul> </li> <li> <p>Implements</p> <ul> <li><code>RequestInterface</code></li> </ul> </li> </ul> <p>PSR-7 Request</p>"},{"location":"api/phalcon_http/#methods_5","title":"Methods","text":"<p><pre><code>public function __construct( string $method = string, mixed $uri = null, mixed $body = string, mixed $headers = [] );\n</code></pre> Request constructor.</p>"},{"location":"api/phalcon_http/#httpmessagerequestfactory","title":"Http\\Message\\RequestFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Message</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Psr\\Http\\Message\\RequestInterface</code></li> <li><code>Psr\\Http\\Message\\RequestFactoryInterface</code> </li> <li><code>Psr\\Http\\Message\\UriInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>RequestFactoryInterface</code></li> </ul> </li> </ul> <p>PSR-17 RequestFactory</p>"},{"location":"api/phalcon_http/#methods_6","title":"Methods","text":"<p><pre><code>public function createRequest( string $method, mixed $uri ): RequestInterface;\n</code></pre> Create a new request.</p>"},{"location":"api/phalcon_http/#httpmessageresponse","title":"Http\\Message\\Response","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Message</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Helper\\Number</code></li> <li><code>Phalcon\\Http\\Message\\AbstractMessage</code></li> <li><code>Phalcon\\Http\\Message\\Exception\\InvalidArgumentException</code></li> <li><code>Psr\\Http\\Message\\ResponseInterface</code></li> </ul> </li> <li> <p>Extends</p> <ul> <li><code>AbstractMessage</code></li> </ul> </li> <li> <p>Implements</p> <ul> <li><code>ResponseInterface</code></li> </ul> </li> </ul> <p>PSR-7 Response</p>"},{"location":"api/phalcon_http/#properties_3","title":"Properties","text":"<pre><code>/**\n * Gets the response reason phrase associated with the status code.\n *\n * Because a reason phrase is not a required element in a response\n * status line, the reason phrase value MAY be empty. Implementations MAY\n * choose to return the default RFC 7231 recommended reason phrase (or\n * those\n * listed in the IANA HTTP Status Code Registry) for the response's\n * status code.\n *\n * @see https://tools.ietf.org/html/rfc7231#section-6\n * @see https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n *\n * @var string\n */\nprotected $reasonPhrase = '';\n\n/**\n * Gets the response status code.\n *\n * The status code is a 3-digit integer result code of the server's attempt\n * to understand and satisfy the request.\n *\n * @var int\n */\nprotected $statusCode = 200;\n</code></pre>"},{"location":"api/phalcon_http/#methods_7","title":"Methods","text":"<p><pre><code>public function __construct( mixed $body = string, int $code = int, array $headers = [] );\n</code></pre> Response constructor.</p> <pre><code>public function getReasonPhrase(): string\n</code></pre> <pre><code>public function getStatusCode(): int\n</code></pre> <p><pre><code>public function withStatus( mixed $code, mixed $reasonPhrase = string ): Response;\n</code></pre> Return an instance with the specified status code and, optionally, reason phrase.</p> <p>If no reason phrase is specified, implementations MAY choose to default to the RFC 7231 or IANA recommended reason phrase for the response's status code.</p> <p>This method MUST be implemented in such a way as to retain the immutability of the message, and MUST return an instance that has the updated status and reason phrase.</p> <p>@see https://tools.ietf.org/html/rfc7231#section-6 @see https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml</p> <p><pre><code>protected function getPhrases(): array;\n</code></pre> Returns the list of status codes available</p> <p><pre><code>protected function processCode( mixed $code, mixed $phrase = string ): void;\n</code></pre> Set a valid status code and phrase</p>"},{"location":"api/phalcon_http/#httpmessageresponsefactory","title":"Http\\Message\\ResponseFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Message</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Psr\\Http\\Message\\ResponseInterface</code></li> <li><code>Psr\\Http\\Message\\ResponseFactoryInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>ResponseFactoryInterface</code></li> </ul> </li> </ul> <p>PSR-17 ResponseFactory</p>"},{"location":"api/phalcon_http/#methods_8","title":"Methods","text":"<p><pre><code>public function createResponse( int $code = int, string $reasonPhrase = string ): ResponseInterface;\n</code></pre> Create a new response.</p>"},{"location":"api/phalcon_http/#httpmessageserverrequest","title":"Http\\Message\\ServerRequest","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Message</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Collection</code></li> <li><code>Phalcon\\Collection\\CollectionInterface</code></li> <li><code>Phalcon\\Http\\Message\\Exception\\InvalidArgumentException</code></li> <li><code>Phalcon\\Http\\Message\\Stream\\Input</code></li> <li><code>Psr\\Http\\Message\\ServerRequestInterface</code></li> <li><code>Psr\\Http\\Message\\StreamInterface</code></li> <li><code>Psr\\Http\\Message\\UploadedFileInterface</code></li> <li><code>Psr\\Http\\Message\\UriInterface</code></li> </ul> </li> <li> <p>Extends</p> <ul> <li>`AbstractRequest</li> </ul> </li> <li> <p>Implements</p> <ul> <li><code>ServerRequestInterface</code></li> </ul> </li> </ul> <p>PSR-7 ServerRequest</p>"},{"location":"api/phalcon_http/#properties_4","title":"Properties","text":"<pre><code>/**\n * @var Collection|CollectionInterface\n */\nprotected $attributes;\n\n/**\n * Retrieve cookies.\n *\n * Retrieves cookies sent by the client to the server.\n *\n * The data MUST be compatible with the structure of the $_COOKIE\n * superglobal.\n *\n * @var array\n */\nprotected $cookieParams;\n\n/**\n * Retrieve any parameters provided in the request body.\n *\n * If the request Content-Type is either application/x-www-form-urlencoded\n * or multipart/form-data, and the request method is POST, this method MUST\n * return the contents of $_POST.\n *\n * Otherwise, this method may return any results of deserializing\n * the request body content; as parsing returns structured content, the\n * potential types MUST be arrays or objects only. A null value indicates\n * the absence of body content.\n *\n * @var mixed\n */\nprotected $parsedBody;\n\n/**\n * Retrieve query string arguments.\n *\n * Retrieves the deserialized query string arguments, if any.\n *\n * Note: the query params might not be in sync with the URI or server\n * params. If you need to ensure you are only getting the original\n * values, you may need to parse the query string from\n * `getUri()-&gt;getQuery()` or from the `QUERY_STRING` server param.\n *\n * @var array\n */\nprotected $queryParams;\n\n/**\n * Retrieve server parameters.\n *\n * Retrieves data related to the incoming request environment,\n * typically derived from PHP's $_SERVER superglobal. The data IS NOT\n * REQUIRED to originate from $_SERVER.\n *\n * @var array\n */\nprotected $serverParams;\n\n/**\n * Retrieve normalized file upload data.\n *\n * This method returns upload metadata in a normalized tree, with each leaf\n * an instance of Psr\\Http\\Message\\UploadedFileInterface.\n *\n * These values MAY be prepared from $_FILES or the message body during\n * instantiation, or MAY be injected via withUploadedFiles().\n *\n * @var array\n */\nprotected $uploadedFiles;\n</code></pre>"},{"location":"api/phalcon_http/#methods_9","title":"Methods","text":"<p><pre><code>public function __construct( string $method = string, mixed $uri = null, array $serverParams = [], mixed $body = string, mixed $headers = [], array $cookies = [], array $queryParams = [], array $uploadFiles = [], mixed $parsedBody = null, string $protocol = string );\n</code></pre> ServerRequest constructor.</p> <p><pre><code>public function getAttribute( mixed $name, mixed $defaultValue = null ): mixed;\n</code></pre> Retrieve a single derived request attribute.</p> <p>Retrieves a single derived request attribute as described in getAttributes(). If the attribute has not been previously set, returns the default value as provided.</p> <p>This method obviates the need for a hasAttribute() method, as it allows specifying a default value to return if the attribute is not found.</p> <p><pre><code>public function getAttributes(): array;\n</code></pre> Retrieve attributes derived from the request.</p> <p>The request 'attributes' may be used to allow injection of any parameters derived from the request: e.g., the results of path match operations; the results of decrypting cookies; the results of deserializing non-form-encoded message bodies; etc. Attributes will be application and request specific, and CAN be mutable.</p> <pre><code>public function getCookieParams(): array\n</code></pre> <pre><code>public function getParsedBody(): mixed\n</code></pre> <pre><code>public function getQueryParams(): array\n</code></pre> <pre><code>public function getServerParams(): array\n</code></pre> <pre><code>public function getUploadedFiles(): array\n</code></pre> <p><pre><code>public function withAttribute( mixed $name, mixed $value ): ServerRequest;\n</code></pre> Return an instance with the specified derived request attribute.</p> <p>This method allows setting a single derived request attribute as described in getAttributes().</p> <p>This method MUST be implemented in such a way as to retain the immutability of the message, and MUST return an instance that has the updated attribute.</p> <p><pre><code>public function withCookieParams( array $cookies ): ServerRequest;\n</code></pre> Return an instance with the specified cookies.</p> <p>The data IS NOT REQUIRED to come from the $_COOKIE superglobal, but MUST be compatible with the structure of $_COOKIE. Typically, this data will be injected at instantiation.</p> <p>This method MUST NOT update the related Cookie header of the request instance, nor related values in the server params.</p> <p>This method MUST be implemented in such a way as to retain the immutability of the message, and MUST return an instance that has the updated cookie values.</p> <p><pre><code>public function withParsedBody( mixed $data ): ServerRequest;\n</code></pre> Return an instance with the specified body parameters.</p> <p>These MAY be injected during instantiation.</p> <p>If the request Content-Type is either application/x-www-form-urlencoded or multipart/form-data, and the request method is POST, use this method ONLY to inject the contents of $_POST.</p> <p>The data IS NOT REQUIRED to come from $_POST, but MUST be the results of deserializing the request body content. Deserialization/parsing returns structured data, and, as such, this method ONLY accepts arrays or objects, or a null value if nothing was available to parse.</p> <p>As an example, if content negotiation determines that the request data is a JSON payload, this method could be used to create a request instance with the deserialized parameters.</p> <p>This method MUST be implemented in such a way as to retain the immutability of the message, and MUST return an instance that has the updated body parameters.</p> <p><pre><code>public function withQueryParams( array $query ): ServerRequest;\n</code></pre> Return an instance with the specified query string arguments.</p> <p>These values SHOULD remain immutable over the course of the incoming request. They MAY be injected during instantiation, such as from PHP's $_GET superglobal, or MAY be derived from some other value such as the URI. In cases where the arguments are parsed from the URI, the data MUST be compatible with what PHP's parse_str() would return for purposes of how duplicate query parameters are handled, and how nested sets are handled.</p> <p>Setting query string arguments MUST NOT change the URI stored by the request, nor the values in the server params.</p> <p>This method MUST be implemented in such a way as to retain the immutability of the message, and MUST return an instance that has the updated query string arguments.</p> <p><pre><code>public function withUploadedFiles( array $uploadedFiles ): ServerRequest;\n</code></pre> Create a new instance with the specified uploaded files.</p> <p>This method MUST be implemented in such a way as to retain the immutability of the message, and MUST return an instance that has the updated body parameters.</p> <p><pre><code>public function withoutAttribute( mixed $name ): ServerRequest;\n</code></pre> Return an instance that removes the specified derived request attribute.</p> <p>This method allows removing a single derived request attribute as described in getAttributes().</p> <p>This method MUST be implemented in such a way as to retain the immutability of the message, and MUST return an instance that removes the attribute.</p>"},{"location":"api/phalcon_http/#httpmessageserverrequestfactory","title":"Http\\Message\\ServerRequestFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Message</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Collection</code></li> <li><code>Phalcon\\Collection\\CollectionInterface</code></li> <li><code>Phalcon\\Helper\\Arr</code></li> <li><code>Phalcon\\Http\\Message\\Exception\\InvalidArgumentException</code></li> <li><code>Psr\\Http\\Message\\ServerRequestFactoryInterface</code></li> <li><code>Psr\\Http\\Message\\ServerRequestInterface</code></li> <li><code>Psr\\Http\\Message\\UploadedFileInterface</code></li> <li><code>Psr\\Http\\Message\\UriInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>ServerRequestFactoryInterface</code></li> </ul> </li> </ul> <p>PSR-17 ServerRequestFactory</p>"},{"location":"api/phalcon_http/#methods_10","title":"Methods","text":"<p><pre><code>public function createServerRequest( string $method, mixed $uri, array $serverParams = [] ): ServerRequestInterface;\n</code></pre> Create a new server request.</p> <p>Note that server-params are taken precisely as given - no parsing/processing of the given values is performed, and, in particular, no attempt is made to determine the HTTP method or URI, which must be provided explicitly.</p> <p><pre><code>public function load( array $server = null, array $get = null, array $post = null, array $cookies = null, array $files = null ): ServerRequest;\n</code></pre> Create a request from the supplied superglobal values.</p> <p>If any argument is not supplied, the corresponding superglobal value will be used.</p> <p><pre><code>protected function getHeaders();\n</code></pre> Returns the apache_request_headers if it exists</p>"},{"location":"api/phalcon_http/#httpmessagestream","title":"Http\\Message\\Stream","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Message</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Exception</code></li> <li><code>Phalcon\\Helper\\Arr</code></li> <li><code>Psr\\Http\\Message\\StreamInterface</code></li> <li><code>RuntimeException</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>StreamInterface</code></li> </ul> </li> </ul> <p>PSR-7 Stream</p>"},{"location":"api/phalcon_http/#properties_5","title":"Properties","text":"<pre><code>/**\n * @var resource | null\n */\nprotected $handle;\n\n/**\n * @var resource | string\n */\nprotected $stream;\n</code></pre>"},{"location":"api/phalcon_http/#methods_11","title":"Methods","text":"<p><pre><code>public function __construct( mixed $stream, string $mode = string );\n</code></pre> Stream constructor.</p> <p><pre><code>public function __destruct();\n</code></pre> Closes the stream when the destructed.</p> <p><pre><code>public function __toString(): string;\n</code></pre> Reads all data from the stream into a string, from the beginning to end.</p> <p>This method MUST attempt to seek to the beginning of the stream before reading data and read the stream until the end is reached.</p> <p>Warning: This could attempt to load a large amount of data into memory.</p> <p>This method MUST NOT raise an exception in order to conform with PHP's string casting operations.</p> <p>@see https://php.net/manual/en/language.oop5.magic.php#object.tostring</p> <p><pre><code>public function close(): void;\n</code></pre> Closes the stream and any underlying resources.</p> <p><pre><code>public function detach(): resource | null;\n</code></pre> Separates any underlying resources from the stream.</p> <p>After the stream has been detached, the stream is in an unusable state.</p> <p><pre><code>public function eof(): bool;\n</code></pre> Returns true if the stream is at the end of the stream.</p> <p><pre><code>public function getContents(): string;\n</code></pre> Returns the remaining contents in a string</p> <p><pre><code>public function getMetadata( mixed $key = null );\n</code></pre> Get stream metadata as an associative array or retrieve a specific key.</p> <p>The keys returned are identical to the keys returned from PHP's stream_get_meta_data() function.</p> <p><pre><code>public function getSize(): null | int;\n</code></pre> Get the size of the stream if known.</p> <p><pre><code>public function isReadable(): bool;\n</code></pre> Returns whether or not the stream is readable.</p> <p><pre><code>public function isSeekable(): bool;\n</code></pre> Returns whether or not the stream is seekable.</p> <p><pre><code>public function isWritable(): bool;\n</code></pre> Returns whether or not the stream is writable.</p> <p><pre><code>public function read( mixed $length ): string;\n</code></pre> Read data from the stream.</p> <p><pre><code>public function rewind(): void;\n</code></pre> Seek to the beginning of the stream.</p> <p>If the stream is not seekable, this method will raise an exception; otherwise, it will perform a seek(0).</p> <p><pre><code>public function seek( mixed $offset, mixed $whence = int ): void;\n</code></pre> Seek to a position in the stream.</p> <p><pre><code>public function setStream( mixed $stream, string $mode = string ): void;\n</code></pre> Sets the stream - existing instance</p> <p><pre><code>public function tell(): int;\n</code></pre> Returns the current position of the file read/write pointer</p> <p><pre><code>public function write( mixed $data ): int;\n</code></pre> Write data to the stream.</p>"},{"location":"api/phalcon_http/#httpmessagestreaminput","title":"Http\\Message\\Stream\\Input","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Message\\Stream</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Http\\Message\\Stream</code></li> </ul> </li> <li> <p>Extends</p> <ul> <li><code>Stream</code></li> </ul> </li> <li> <p>Implements</p> </li> </ul> <p>Describes a data stream from \"php://input\"</p> <p>Typically, an instance will wrap a PHP stream; this interface provides a wrapper around the most common operations, including serialization of the entire stream to a string.</p>"},{"location":"api/phalcon_http/#properties_6","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprivate data = '';\n\n/**\n * @var bool\n */\nprivate $eof = false;\n</code></pre>"},{"location":"api/phalcon_http/#methods_12","title":"Methods","text":"<p><pre><code>public function __construct();\n</code></pre> Input constructor.</p> <p><pre><code>public function __toString(): string;\n</code></pre> Reads all data from the stream into a string, from the beginning to end.</p> <p>This method MUST attempt to seek to the beginning of the stream before reading data and read the stream until the end is reached.</p> <p>Warning: This could attempt to load a large amount of data into memory.</p> <p>This method MUST NOT raise an exception in order to conform with PHP's string casting operations.</p> <p>@see https://php.net/manual/en/language.oop5.magic.php#object.tostring</p> <p><pre><code>public function getContents( int $length = int ): string;\n</code></pre> Returns the remaining contents in a string</p> <p>@throws RuntimeException if unable to read. @throws RuntimeException if error occurs while reading.</p> <p><pre><code>public function isWritable(): bool;\n</code></pre> Returns whether or not the stream is writeable.</p> <p><pre><code>public function read( mixed $length ): string;\n</code></pre> Read data from the stream.</p>"},{"location":"api/phalcon_http/#httpmessagestreammemory","title":"Http\\Message\\Stream\\Memory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Message\\Stream</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Http\\Message\\Stream</code></li> </ul> </li> <li> <p>Extends</p> <ul> <li><code>Stream</code></li> </ul> </li> <li> <p>Implements</p> </li> </ul> <p>Describes a data stream from \"php://memory\"</p> <p>Typically, an instance will wrap a PHP stream; this interface provides a wrapper around the most common operations, including serialization of the entire stream to a string.</p>"},{"location":"api/phalcon_http/#methods_13","title":"Methods","text":"<p><pre><code>public function __construct( mixed $mode = string );\n</code></pre> Constructor</p>"},{"location":"api/phalcon_http/#httpmessagestreamtemp","title":"Http\\Message\\Stream\\Temp","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Message\\Stream</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Http\\Message\\Stream</code></li> </ul> </li> <li> <p>Extends</p> <ul> <li><code>Stream</code></li> </ul> </li> <li> <p>Implements</p> </li> </ul> <p>Describes a data stream from \"php://temp\"</p> <p>Typically, an instance will wrap a PHP stream; this interface provides a wrapper around the most common operations, including serialization of the entire stream to a string.</p>"},{"location":"api/phalcon_http/#methods_14","title":"Methods","text":"<p><pre><code>public function __construct( mixed $mode = string );\n</code></pre> Constructor</p>"},{"location":"api/phalcon_http/#httpmessagestreamfactory","title":"Http\\Message\\StreamFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Message</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Http\\Message\\Exception\\InvalidArgumentException</code></li> <li><code>Psr\\Http\\Message\\StreamFactoryInterface</code></li> <li><code>Psr\\Http\\Message\\StreamInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>StreamFactoryInterface</code></li> </ul> </li> </ul> <p>PSR-17 StreamFactory</p>"},{"location":"api/phalcon_http/#methods_15","title":"Methods","text":"<p><pre><code>public function createStream( string $content = string ): StreamInterface;\n</code></pre> Create a new stream from a string.</p> <p>The stream SHOULD be created with a temporary resource.</p> <p><pre><code>public function createStreamFromFile( string $filename, string $mode = string ): StreamInterface;\n</code></pre> Create a stream from an existing file.</p> <p>The file MUST be opened using the given mode, which may be any mode supported by the <code>fopen</code> function.</p> <p>The <code>$filename</code> MAY be any string supported by <code>fopen()</code>.</p> <p><pre><code>public function createStreamFromResource( mixed $phpResource ): StreamInterface;\n</code></pre> Create a new stream from an existing resource.</p> <p>The stream MUST be readable and may be writable.</p>"},{"location":"api/phalcon_http/#httpmessageuploadedfile","title":"Http\\Message\\UploadedFile","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Message</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Helper\\Number</code></li> <li><code>Phalcon\\Helper\\Arr</code></li> <li><code>Phalcon\\Helper\\Str</code></li> <li><code>Phalcon\\Http\\Message\\Exception\\InvalidArgumentException</code></li> <li><code>Psr\\Http\\Message\\StreamInterface</code></li> <li><code>Psr\\Http\\Message\\UploadedFileInterface</code></li> <li><code>RuntimeException</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>UploadedFileInterface</code></li> </ul> </li> </ul> <p>PSR-7 UploadedFile</p>"},{"location":"api/phalcon_http/#properties_7","title":"Properties","text":"<pre><code>/**\n * If the file has already been moved, we hold that status here\n *\n * @var bool\n */\nprivate $alreadyMoved = false;\n\n/**\n * Retrieve the filename sent by the client.\n *\n * Do not trust the value returned by this method. A client could send\n * a malicious filename with the intention to corrupt or hack your\n * application.\n *\n * Implementations SHOULD return the value stored in the 'name' key of\n * the file in the $_FILES array.\n *\n * @var string | null\n */\nprivate $clientFilename;\n\n/**\n * Retrieve the media type sent by the client.\n *\n * Do not trust the value returned by this method. A client could send\n * a malicious media type with the intention to corrupt or hack your\n * application.\n *\n * Implementations SHOULD return the value stored in the 'type' key of\n * the file in the $_FILES array.\n *\n * @var string | null\n */\nprivate $clientMediaType;\n\n/**\n * Retrieve the error associated with the uploaded file.\n *\n * The return value MUST be one of PHP's UPLOAD_ERR_XXX constants.\n *\n * If the file was uploaded successfully, this method MUST return\n * UPLOAD_ERR_OK.\n *\n * Implementations SHOULD return the value stored in the 'error' key of\n * the file in the $_FILES array.\n *\n * @see https://php.net/manual/en/features.file-upload.errors.php\n *\n * @var int\n */\nprivate $error = 0;\n\n/**\n * If the stream is a string (file name) we store it here\n *\n * @var string\n */\nprivate $fileName = '';\n\n/**\n * Retrieve the file size.\n *\n * Implementations SHOULD return the value stored in the 'size' key of\n * the file in the $_FILES array if available, as PHP calculates this based\n * on the actual size transmitted.\n *\n * @var int | null\n */\nprivate $size;\n\n/**\n * Holds the stream/string for the uploaded file\n *\n * @var StreamInterface|string|null\n */\nprivate $stream;\n</code></pre>"},{"location":"api/phalcon_http/#methods_16","title":"Methods","text":"<p><pre><code>public function __construct( mixed $stream, int $size = null, int $error = int, string $clientFilename = null, string $clientMediaType = null );\n</code></pre> UploadedFile constructor.</p> <pre><code>public function getClientFilename(): string | null\n</code></pre> <pre><code>public function getClientMediaType(): string | null\n</code></pre> <pre><code>public function getError(): int\n</code></pre> <pre><code>public function getSize(): int | null\n</code></pre> <p><pre><code>public function getStream(): mixed;\n</code></pre> Retrieve a stream representing the uploaded file.</p> <p>This method MUST return a StreamInterface instance, representing the uploaded file. The purpose of this method is to allow utilizing native PHP stream functionality to manipulate the file upload, such as stream_copy_to_stream() (though the result will need to be decorated in a native PHP stream wrapper to work with such functions).</p> <p>If the moveTo() method has been called previously, this method MUST raise an exception.</p> <p><pre><code>public function moveTo( mixed $targetPath ): void;\n</code></pre> Move the uploaded file to a new location.</p> <p>Use this method as an alternative to move_uploaded_file(). This method is guaranteed to work in both SAPI and non-SAPI environments. Implementations must determine which environment they are in, and use the appropriate method (move_uploaded_file(), rename(), or a stream operation) to perform the operation.</p> <p>$targetPath may be an absolute path, or a relative path. If it is a relative path, resolution should be the same as used by PHP's rename() function.</p> <p>The original file or stream MUST be removed on completion.</p> <p>If this method is called more than once, any subsequent calls MUST raise an exception.</p> <p>When used in an SAPI environment where $_FILES is populated, when writing files via moveTo(), is_uploaded_file() and move_uploaded_file() SHOULD be used to ensure permissions and upload status are verified correctly.</p> <p>If you wish to move to a stream, use getStream(), as SAPI operations cannot guarantee writing to stream destinations.</p> <p>@see https://php.net/is_uploaded_file @see https://php.net/move_uploaded_file</p>"},{"location":"api/phalcon_http/#httpmessageuploadedfilefactory","title":"Http\\Message\\UploadedFileFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Message</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Psr\\Http\\Message\\StreamInterface</code></li> <li><code>Psr\\Http\\Message\\UploadedFileInterface</code></li> <li><code>Psr\\Http\\Message\\UploadedFileFactoryInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>UploadedFileFactoryInterface</code></li> </ul> </li> </ul> <p>PSR-17 UploadedFileFactory</p>"},{"location":"api/phalcon_http/#methods_17","title":"Methods","text":"<p><pre><code>public function createUploadedFile( StreamInterface $stream, int $size = null, int $error = int, string $clientFilename = null, string $clientMediaType = null ): UploadedFileInterface;\n</code></pre> Create a new uploaded file.</p> <p>If a size is not provided it will be determined by checking the size of the stream.</p> <p>@link https://php.net/manual/features.file-upload.post-method.php @link https://php.net/manual/features.file-upload.errors.php</p>"},{"location":"api/phalcon_http/#httpmessageuri","title":"Http\\Message\\Uri","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Message</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Helper\\Arr</code></li> <li><code>Phalcon\\Helper\\Str</code></li> <li><code>Phalcon\\Http\\Message\\Exception\\InvalidArgumentException</code></li> <li><code>Psr\\Http\\Message\\UriInterface</code></li> </ul> </li> <li> <p>Extends</p> <ul> <li><code>AbstractCommon</code></li> </ul> </li> <li> <p>Implements</p> <ul> <li><code>UriInterface</code></li> </ul> </li> </ul> <p>PSR-7 Uri</p>"},{"location":"api/phalcon_http/#properties_8","title":"Properties","text":"<pre><code>/**\n * Returns the fragment of the URL\n *\n * @return string\n */\nprotected $fragment = '';\n\n/**\n * Retrieve the host component of the URI.\n *\n * If no host is present, this method MUST return an empty string.\n *\n * The value returned MUST be normalized to lowercase, per RFC 3986\n * Section 3.2.2.\n *\n * @see https://tools.ietf.org/html/rfc3986#section-3.2.2\n *\n * @return string\n */\nprotected $host = '';\n\n/**\n * @var string\n */\nprotected $pass = '';\n\n/**\n * Returns the path of the URL\n *\n * @return string\n */\nprotected $path = '';\n\n/**\n * Retrieve the port component of the URI.\n *\n * If a port is present, and it is non-standard for the current scheme,\n * this method MUST return it as an integer. If the port is the standard\n * port used with the current scheme, this method SHOULD return null.\n *\n * If no port is present, and no scheme is present, this method MUST return\n * a null value.\n *\n * If no port is present, but a scheme is present, this method MAY return\n * the standard port for that scheme, but SHOULD return null.\n *\n * @return int|null\n */\nprotected $port;\n\n/**\n * Returns the query of the URL\n *\n * @return string\n */\nprotected $query = '';\n\n/**\n * Retrieve the scheme component of the URI.\n *\n * If no scheme is present, this method MUST return an empty string.\n *\n * The value returned MUST be normalized to lowercase, per RFC 3986\n * Section 3.1.\n *\n * The trailing \":\" character is not part of the scheme and MUST NOT be\n * added.\n *\n * @see https://tools.ietf.org/html/rfc3986#section-3.1\n *\n * @return string\n */\nprotected $scheme = 'https';\n\n/**\n * @var string\n */\nprotected $user = '';\n</code></pre>"},{"location":"api/phalcon_http/#methods_18","title":"Methods","text":"<p><pre><code>public function __construct( string $uri = string );\n</code></pre> Uri constructor.</p> <p><pre><code>public function __toString(): string;\n</code></pre> Return the string representation as a URI reference.</p> <p>Depending on which components of the URI are present, the resulting string is either a full URI or relative reference according to RFC 3986, Section 4.1. The method concatenates the various components of the URI, using the appropriate delimiters</p> <p><pre><code>public function getAuthority(): string;\n</code></pre> Retrieve the authority component of the URI.</p> <pre><code>public function getFragment()\n</code></pre> <pre><code>public function getHost()\n</code></pre> <pre><code>public function getPath()\n</code></pre> <pre><code>public function getPort()\n</code></pre> <pre><code>public function getQuery()\n</code></pre> <pre><code>public function getScheme()\n</code></pre> <p><pre><code>public function getUserInfo(): string;\n</code></pre> Retrieve the user information component of the URI.</p> <p>If no user information is present, this method MUST return an empty string.</p> <p>If a user is present in the URI, this will return that value; additionally, if the password is also present, it will be appended to the user value, with a colon (\":\") separating the values.</p> <p>The trailing \"@\" character is not part of the user information and MUST NOT be added.</p> <p><pre><code>public function withFragment( mixed $fragment ): Uri;\n</code></pre> Return an instance with the specified URI fragment.</p> <p>This method MUST retain the state of the current instance, and return an instance that contains the specified URI fragment.</p> <p>Users can provide both encoded and decoded fragment characters. Implementations ensure the correct encoding as outlined in getFragment().</p> <p>An empty fragment value is equivalent to removing the fragment.</p> <p><pre><code>public function withHost( mixed $host ): Uri;\n</code></pre> Return an instance with the specified host.</p> <p>This method MUST retain the state of the current instance, and return an instance that contains the specified host.</p> <p>An empty host value is equivalent to removing the host.</p> <p><pre><code>public function withPath( mixed $path ): Uri;\n</code></pre> Return an instance with the specified path.</p> <p>This method MUST retain the state of the current instance, and return an instance that contains the specified path.</p> <p>The path can either be empty or absolute (starting with a slash) or rootless (not starting with a slash). Implementations MUST support all three syntaxes.</p> <p>If an HTTP path is intended to be host-relative rather than path-relative then it must begin with a slash (\"/\"). HTTP paths not starting with a slash are assumed to be relative to some base path known to the application or consumer.</p> <p>Users can provide both encoded and decoded path characters. Implementations ensure the correct encoding as outlined in getPath().</p> <p><pre><code>public function withPort( mixed $port ): Uri;\n</code></pre> Return an instance with the specified port.</p> <p>This method MUST retain the state of the current instance, and return an instance that contains the specified port.</p> <p>Implementations MUST raise an exception for ports outside the established TCP and UDP port ranges.</p> <p>A null value provided for the port is equivalent to removing the port information.</p> <p><pre><code>public function withQuery( mixed $query ): Uri;\n</code></pre> Return an instance with the specified query string.</p> <p>This method MUST retain the state of the current instance, and return an instance that contains the specified query string.</p> <p>Users can provide both encoded and decoded query characters. Implementations ensure the correct encoding as outlined in getQuery().</p> <p>An empty query string value is equivalent to removing the query string.</p> <p><pre><code>public function withScheme( mixed $scheme ): Uri;\n</code></pre> Return an instance with the specified scheme.</p> <p>This method MUST retain the state of the current instance, and return an instance that contains the specified scheme.</p> <p>Implementations MUST support the schemes \"http\" and \"https\" case insensitively, and MAY accommodate other schemes if required.</p> <p>An empty scheme is equivalent to removing the scheme.</p> <p><pre><code>public function withUserInfo( mixed $user, mixed $password = null ): Uri;\n</code></pre> Return an instance with the specified user information.</p>"},{"location":"api/phalcon_http/#httpmessageurifactory","title":"Http\\Message\\UriFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Message</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Psr\\Http\\Message\\UriFactoryInterface</code></li> <li><code>Psr\\Http\\Message\\UriInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>UriFactoryInterface</code></li> </ul> </li> </ul> <p>PSR-17 UriFactory</p>"},{"location":"api/phalcon_http/#methods_19","title":"Methods","text":"<p><pre><code>public function createUri( string $uri = string ): UriInterface;\n</code></pre> Returns a Locator object with all the helpers defined in anonynous functions</p>"},{"location":"api/phalcon_http/#httprequest","title":"Http\\Request","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\AbstractInjectionAware</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Events\\ManagerInterface</code></li> <li><code>Phalcon\\Filter\\FilterInterface</code></li> <li><code>Phalcon\\Http\\Message\\RequestMethodInterface</code></li> <li><code>Phalcon\\Http\\Request\\Exception</code></li> <li><code>Phalcon\\Http\\Request\\File</code></li> <li><code>Phalcon\\Http\\Request\\FileInterface</code></li> <li><code>Phalcon\\Helper\\Json\\Decode</code></li> <li><code>UnexpectedValueException</code></li> <li><code>stdClass</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractInjectionAware</code></p> </li> <li> <p>Implements</p> <ul> <li><code>RequestInterface</code></li> <li><code>RequestMethodInterface</code></li> </ul> </li> </ul> <p>Encapsulates request information for easy and secure access from application controllers.</p> <p>The request object is a simple value object that is passed between the dispatcher and controller classes. It packages the HTTP request environment.</p> <pre><code>use Phalcon\\Http\\Request;\n\n$request = new Request();\n\nif ($request-&gt;isPost() &amp;&amp; $request-&gt;isAjax()) {\n    echo \"Request was made using POST and AJAX\";\n}\n\n// Retrieve SERVER variables\n$request-&gt;getServer(\"HTTP_HOST\");\n\n// GET, POST, PUT, DELETE, HEAD, OPTIONS, PATCH, PURGE, TRACE, CONNECT\n$request-&gt;getMethod();\n\n// An array of languages the client accepts\n$request-&gt;getLanguages();\n</code></pre>"},{"location":"api/phalcon_http/#properties_9","title":"Properties","text":"<pre><code>//\nprivate filterService;\n\n/**\n * @var bool\n */\nprivate httpMethodParameterOverride = false;\n\n/**\n * @var array\n */\nprivate queryFilters;\n\n//\nprivate putCache;\n\n//\nprivate rawBody;\n\n/**\n * @var bool\n */\nprivate strictHostCheck = false;\n</code></pre>"},{"location":"api/phalcon_http/#methods_20","title":"Methods","text":"<p><pre><code>public function get( string $name = null, mixed $filters = null, mixed $defaultValue = null, bool $notAllowEmpty = bool, bool $noRecursive = bool ): mixed;\n</code></pre> Gets a variable from the $_REQUEST superglobal applying filters if needed. If no parameters are given the $_REQUEST superglobal is returned</p> <pre><code>// Returns value from $_REQUEST[\"user_email\"] without sanitizing\n$userEmail = $request-&gt;get(\"user_email\");\n\n// Returns value from $_REQUEST[\"user_email\"] with sanitizing\n$userEmail = $request-&gt;get(\"user_email\", \"email\");\n</code></pre> <p><pre><code>public function getAcceptableContent(): array;\n</code></pre> Gets an array with mime/types and their quality accepted by the browser/client from _SERVER[\"HTTP_ACCEPT\"]</p> <p><pre><code>public function getBasicAuth(): array | null;\n</code></pre> Gets auth info accepted by the browser/client from $_SERVER[\"PHP_AUTH_USER\"]</p> <p><pre><code>public function getBestAccept(): string;\n</code></pre> Gets best mime/type accepted by the browser/client from _SERVER[\"HTTP_ACCEPT\"]</p> <p><pre><code>public function getBestCharset(): string;\n</code></pre> Gets best charset accepted by the browser/client from _SERVER[\"HTTP_ACCEPT_CHARSET\"]</p> <p><pre><code>public function getBestLanguage(): string;\n</code></pre> Gets best language accepted by the browser/client from _SERVER[\"HTTP_ACCEPT_LANGUAGE\"]</p> <p><pre><code>public function getClientAddress( bool $trustForwardedHeader = bool ): string | bool;\n</code></pre> Gets most possible client IPv4 Address. This method searches in <code>$_SERVER[\"REMOTE_ADDR\"]</code> and optionally in <code>$_SERVER[\"HTTP_X_FORWARDED_FOR\"]</code></p> <p><pre><code>public function getClientCharsets(): array;\n</code></pre> Gets a charsets array and their quality accepted by the browser/client from _SERVER[\"HTTP_ACCEPT_CHARSET\"]</p> <p><pre><code>public function getContentType(): string | null;\n</code></pre> Gets content type which request has been made</p> <p><pre><code>public function getDigestAuth(): array;\n</code></pre> Gets auth info accepted by the browser/client from $_SERVER[\"PHP_AUTH_DIGEST\"]</p> <p><pre><code>public function getFilteredPost( string $name = null, mixed $defaultValue = null, bool $notAllowEmpty = bool, bool $noRecursive = bool ): mixed;\n</code></pre> Retrieves a post value always sanitized with the preset filters</p> <p><pre><code>public function getFilteredPut( string $name = null, mixed $defaultValue = null, bool $notAllowEmpty = bool, bool $noRecursive = bool ): mixed;\n</code></pre> Retrieves a put value always sanitized with the preset filters</p> <p><pre><code>public function getFilteredQuery( string $name = null, mixed $defaultValue = null, bool $notAllowEmpty = bool, bool $noRecursive = bool ): mixed;\n</code></pre> Retrieves a query/get value always sanitized with the preset filters</p> <p><pre><code>public function getHTTPReferer(): string;\n</code></pre> Gets web page that refers active request. ie: https://www.google.com</p> <p><pre><code>final public function getHeader( string $header ): string;\n</code></pre> Gets HTTP header from request data</p> <p><pre><code>public function getHeaders(): array;\n</code></pre> Returns the available headers in the request</p> <p><code> $_SERVER = [     \"PHP_AUTH_USER\" =&gt; \"phalcon\",     \"PHP_AUTH_PW\"   =&gt; \"secret\", ]; <p>$headers = $request-&gt;getHeaders();</p> <p>echo $headers[\"Authorization\"]; // Basic cGhhbGNvbjpzZWNyZXQ= </p> <p><pre><code>public function getHttpHost(): string;\n</code></pre> Gets host name used by the request.</p> <p><code>Request::getHttpHost</code> trying to find host name in following order:</p> <ul> <li><code>$_SERVER[\"HTTP_HOST\"]</code></li> <li><code>$_SERVER[\"SERVER_NAME\"]</code></li> <li><code>$_SERVER[\"SERVER_ADDR\"]</code></li> </ul> <p>Optionally <code>Request::getHttpHost</code> validates and clean host name. The <code>Request::$strictHostCheck</code> can be used to validate host name.</p> <p>Note: validation and cleaning have a negative performance impact because they use regular expressions.</p> <pre><code>use Phalcon\\Http\\Request;\n\n$request = new Request;\n\n$_SERVER[\"HTTP_HOST\"] = \"example.com\";\n$request-&gt;getHttpHost(); // example.com\n\n$_SERVER[\"HTTP_HOST\"] = \"example.com:8080\";\n$request-&gt;getHttpHost(); // example.com:8080\n\n$request-&gt;setStrictHostCheck(true);\n$_SERVER[\"HTTP_HOST\"] = \"ex=am~ple.com\";\n$request-&gt;getHttpHost(); // UnexpectedValueException\n\n$_SERVER[\"HTTP_HOST\"] = \"ExAmPlE.com\";\n$request-&gt;getHttpHost(); // example.com\n</code></pre> <p><pre><code>public function getHttpMethodParameterOverride(): bool;\n</code></pre> Return the HTTP method parameter override flag</p> <p><pre><code>public function getJsonRawBody( bool $associative = bool ): \\stdClass | array | bool;\n</code></pre> Gets decoded JSON HTTP raw request body</p> <p><pre><code>public function getLanguages(): array;\n</code></pre> Gets languages array and their quality accepted by the browser/client from _SERVER[\"HTTP_ACCEPT_LANGUAGE\"]</p> <p><pre><code>final public function getMethod(): string;\n</code></pre> Gets HTTP method which request has been made</p> <p>If the X-HTTP-Method-Override header is set, and if the method is a POST, then it is used to determine the \"real\" intended HTTP method.</p> <p>The _method request parameter can also be used to determine the HTTP method, but only if setHttpMethodParameterOverride(true) has been called.</p> <p>The method is always an uppercased string.</p> <p><pre><code>public function getPort(): int;\n</code></pre> Gets information about the port on which the request is made.</p> <p><pre><code>public function getPost( string $name = null, mixed $filters = null, mixed $defaultValue = null, bool $notAllowEmpty = bool, bool $noRecursive = bool ): mixed;\n</code></pre> Gets a variable from the $_POST superglobal applying filters if needed If no parameters are given the $_POST superglobal is returned</p> <pre><code>// Returns value from $_POST[\"user_email\"] without sanitizing\n$userEmail = $request-&gt;getPost(\"user_email\");\n\n// Returns value from $_POST[\"user_email\"] with sanitizing\n$userEmail = $request-&gt;getPost(\"user_email\", \"email\");\n</code></pre> <p><pre><code>public function getPreferredIsoLocaleVariant(): string;\n</code></pre> Gets the preferred ISO locale variant.</p> <p>Gets the preferred locale accepted by the client from the \"Accept-Language\" request HTTP header and returns the base part of it i.e. <code>en</code> instead of <code>en-US</code>.</p> <p>Note: This method relies on the <code>$_SERVER[\"HTTP_ACCEPT_LANGUAGE\"]</code> header.</p> <p>@link https://www.iso.org/standard/50707.html</p> <p><pre><code>public function getPut( string $name = null, mixed $filters = null, mixed $defaultValue = null, bool $notAllowEmpty = bool, bool $noRecursive = bool ): mixed;\n</code></pre> Gets a variable from put request</p> <pre><code>// Returns value from $_PUT[\"user_email\"] without sanitizing\n$userEmail = $request-&gt;getPut(\"user_email\");\n\n// Returns value from $_PUT[\"user_email\"] with sanitizing\n$userEmail = $request-&gt;getPut(\"user_email\", \"email\");\n</code></pre> <p><pre><code>public function getQuery( string $name = null, mixed $filters = null, mixed $defaultValue = null, bool $notAllowEmpty = bool, bool $noRecursive = bool ): mixed;\n</code></pre> Gets variable from $_GET superglobal applying filters if needed If no parameters are given the $_GET superglobal is returned</p> <pre><code>// Returns value from $_GET[\"id\"] without sanitizing\n$id = $request-&gt;getQuery(\"id\");\n\n// Returns value from $_GET[\"id\"] with sanitizing\n$id = $request-&gt;getQuery(\"id\", \"int\");\n\n// Returns value from $_GET[\"id\"] with a default value\n$id = $request-&gt;getQuery(\"id\", null, 150);\n</code></pre> <p><pre><code>public function getRawBody(): string;\n</code></pre> Gets HTTP raw request body</p> <p><pre><code>public function getScheme(): string;\n</code></pre> Gets HTTP schema (http/https)</p> <p><pre><code>public function getServer( string $name ): string | null;\n</code></pre> Gets variable from $_SERVER superglobal</p> <p><pre><code>public function getServerAddress(): string;\n</code></pre> Gets active server address IP</p> <p><pre><code>public function getServerName(): string;\n</code></pre> Gets active server name</p> <p><pre><code>final public function getURI( bool $onlyPath = bool ): string;\n</code></pre> Gets HTTP URI which request has been made to</p> <pre><code>// Returns /some/path?with=queryParams\n$uri = $request-&gt;getURI();\n\n// Returns /some/path\n$uri = $request-&gt;getURI(true);\n</code></pre> <p><pre><code>public function getUploadedFiles( bool $onlySuccessful = bool, bool $namedKeys = bool ): FileInterface[];\n</code></pre> Gets attached files as Phalcon\\Http\\Request\\File instances</p> <p><pre><code>public function getUserAgent(): string;\n</code></pre> Gets HTTP user agent used to made the request</p> <p><pre><code>public function has( string $name ): bool;\n</code></pre> Checks whether $_REQUEST superglobal has certain index</p> <p><pre><code>public function hasFiles(): bool;\n</code></pre> Returns if the request has files or not</p> <p><pre><code>final public function hasHeader( string $header ): bool;\n</code></pre> Checks whether headers has certain index</p> <p><pre><code>public function hasPost( string $name ): bool;\n</code></pre> Checks whether $_POST superglobal has certain index</p> <p><pre><code>public function hasPut( string $name ): bool;\n</code></pre> Checks whether the PUT data has certain index</p> <p><pre><code>public function hasQuery( string $name ): bool;\n</code></pre> Checks whether $_GET superglobal has certain index</p> <p><pre><code>final public function hasServer( string $name ): bool;\n</code></pre> Checks whether $_SERVER superglobal has certain index</p> <p><pre><code>public function isAjax(): bool;\n</code></pre> Checks whether request has been made using ajax</p> <p><pre><code>public function isConnect(): bool;\n</code></pre> Checks whether HTTP method is CONNECT. if _SERVER[\"REQUEST_METHOD\"]===\"CONNECT\"</p> <p><pre><code>public function isDelete(): bool;\n</code></pre> Checks whether HTTP method is DELETE. if _SERVER[\"REQUEST_METHOD\"]===\"DELETE\"</p> <p><pre><code>public function isGet(): bool;\n</code></pre> Checks whether HTTP method is GET. if _SERVER[\"REQUEST_METHOD\"]===\"GET\"</p> <p><pre><code>public function isHead(): bool;\n</code></pre> Checks whether HTTP method is HEAD. if _SERVER[\"REQUEST_METHOD\"]===\"HEAD\"</p> <p><pre><code>public function isMethod( mixed $methods, bool $strict = bool ): bool;\n</code></pre> Check if HTTP method match any of the passed methods When strict is true it checks if validated methods are real HTTP methods</p> <p><pre><code>public function isOptions(): bool;\n</code></pre> Checks whether HTTP method is OPTIONS. if _SERVER[\"REQUEST_METHOD\"]===\"OPTIONS\"</p> <p><pre><code>public function isPatch(): bool;\n</code></pre> Checks whether HTTP method is PATCH. if _SERVER[\"REQUEST_METHOD\"]===\"PATCH\"</p> <p><pre><code>public function isPost(): bool;\n</code></pre> Checks whether HTTP method is POST. if _SERVER[\"REQUEST_METHOD\"]===\"POST\"</p> <p><pre><code>public function isPurge(): bool;\n</code></pre> Checks whether HTTP method is PURGE (Squid and Varnish support). if _SERVER[\"REQUEST_METHOD\"]===\"PURGE\"</p> <p><pre><code>public function isPut(): bool;\n</code></pre> Checks whether HTTP method is PUT. if _SERVER[\"REQUEST_METHOD\"]===\"PUT\"</p> <p><pre><code>public function isSecure(): bool;\n</code></pre> Checks whether request has been made using any secure layer</p> <p><pre><code>public function isSoap(): bool;\n</code></pre> Checks whether request has been made using SOAP</p> <p><pre><code>public function isStrictHostCheck(): bool;\n</code></pre> Checks if the <code>Request::getHttpHost</code> method will be use strict validation of host name or not</p> <p><pre><code>public function isTrace(): bool;\n</code></pre> Checks whether HTTP method is TRACE. if _SERVER[\"REQUEST_METHOD\"]===\"TRACE\"</p> <p><pre><code>public function isValidHttpMethod( string $method ): bool;\n</code></pre> Checks if a method is a valid HTTP method</p> <p><pre><code>public function numFiles( bool $onlySuccessful = bool ): long;\n</code></pre> Returns the number of files available</p> <p><pre><code>public function setHttpMethodParameterOverride( bool $httpMethodParameterOverride )\n</code></pre> Set the HTTP method parameter override flag</p> <p><pre><code>public function setParameterFilters( string $name, array $filters = [], array $scope = [] ): RequestInterface;\n</code></pre> Sets automatic sanitizers/filters for a particular field and for particular methods</p> <p><pre><code>public function setStrictHostCheck( bool $flag = bool ): RequestInterface;\n</code></pre> Sets if the <code>Request::getHttpHost</code> method must be use strict validation of host name or not</p> <p><pre><code>final protected function getBestQuality( array $qualityParts, string $name ): string;\n</code></pre> Process a request header and return the one with best quality</p> <p><pre><code>final protected function getHelper( array $source, string $name = null, mixed $filters = null, mixed $defaultValue = null, bool $notAllowEmpty = bool, bool $noRecursive = bool ): mixed;\n</code></pre> Helper to get data from superglobals, applying filters if needed. If no parameters are given the superglobal is returned.</p> <p><pre><code>final protected function getQualityHeader( string $serverIndex, string $name ): array;\n</code></pre> Process a request header and return an array of values with their qualities</p> <p><pre><code>final protected function hasFileHelper( mixed $data, bool $onlySuccessful ): long;\n</code></pre> Recursively counts file in an array of files</p> <p><pre><code>protected function resolveAuthorizationHeaders(): array;\n</code></pre> Resolve authorization headers.</p> <p><pre><code>final protected function smoothFiles( array $names, array $types, array $tmp_names, array $sizes, array $errors, string $prefix ): array;\n</code></pre> Smooth out $_FILES to have plain array with all files uploaded</p>"},{"location":"api/phalcon_http/#httprequestexception","title":"Http\\Request\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Request</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Http\\Request\\Exception</p> <p>Exceptions thrown in Phalcon\\Http\\Request will use this class</p>"},{"location":"api/phalcon_http/#httprequestfile","title":"Http\\Request\\File","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Request</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>FileInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Http\\Request\\File</p> <p>Provides OO wrappers to the $_FILES superglobal</p> <pre><code>use Phalcon\\Mvc\\Controller;\n\nclass PostsController extends Controller\n{\n    public function uploadAction()\n    {\n        // Check if the user has uploaded files\n        if ($this-&gt;request-&gt;hasFiles() == true) {\n            // Print the real file names and their sizes\n            foreach ($this-&gt;request-&gt;getUploadedFiles() as $file) {\n                echo $file-&gt;getName(), \" \", $file-&gt;getSize(), \"\\n\";\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"api/phalcon_http/#properties_10","title":"Properties","text":"<pre><code>/**\n * @var string|null\n */\nprotected $error;\n\n/**\n * @var string\n */\nprotected $extension;\n\n/**\n * @var string|null\n */\nprotected $key;\n\n//\nprotected $name;\n\n//\nprotected $realType;\n\n//\nprotected $size;\n\n//\nprotected $tmp;\n\n//\nprotected $type;\n</code></pre>"},{"location":"api/phalcon_http/#methods_21","title":"Methods","text":"<p><pre><code>public function __construct( array $file, mixed $key = null );\n</code></pre> Phalcon\\Http\\Request\\File constructor</p> <pre><code>public function getError(): string | null;\n</code></pre> <pre><code>public function getExtension(): string;\n</code></pre> <pre><code>public function getKey(): string | null;\n</code></pre> <p><pre><code>public function getName(): string;\n</code></pre> Returns the real name of the uploaded file</p> <p><pre><code>public function getRealType(): string;\n</code></pre> Gets the real mime type of the upload file using finfo</p> <p><pre><code>public function getSize(): int;\n</code></pre> Returns the file size of the uploaded file</p> <p><pre><code>public function getTempName(): string;\n</code></pre> Returns the temporary name of the uploaded file</p> <p><pre><code>public function getType(): string;\n</code></pre> Returns the mime type reported by the browser This mime type is not completely secure, use getRealType() instead</p> <p><pre><code>public function isUploadedFile(): bool;\n</code></pre> Checks whether the file has been uploaded via Post.</p> <p><pre><code>public function moveTo( string $destination ): bool;\n</code></pre> Moves the temporary file to a destination within the application</p>"},{"location":"api/phalcon_http/#httprequestfileinterface","title":"Http\\Request\\FileInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Request</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Http\\Request\\File</p>"},{"location":"api/phalcon_http/#methods_22","title":"Methods","text":"<p><pre><code>public function getError(): string | null;\n</code></pre> Returns the error if any</p> <p><pre><code>public function getName(): string;\n</code></pre> Returns the real name of the uploaded file</p> <p><pre><code>public function getRealType(): string;\n</code></pre> Gets the real mime type of the upload file using finfo</p> <p><pre><code>public function getSize(): int;\n</code></pre> Returns the file size of the uploaded file</p> <p><pre><code>public function getTempName(): string;\n</code></pre> Returns the temporal name of the uploaded file</p> <p><pre><code>public function getType(): string;\n</code></pre> Returns the mime type reported by the browser This mime type is not completely secure, use getRealType() instead</p> <p><pre><code>public function moveTo( string $destination ): bool;\n</code></pre> Move the temporary file to a destination</p>"},{"location":"api/phalcon_http/#httprequestinterface","title":"Http\\RequestInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Http\\Request\\FileInterface</code></li> <li><code>stdClass</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Http\\Request</p>"},{"location":"api/phalcon_http/#methods_23","title":"Methods","text":"<p><pre><code>public function get( string $name = null, mixed $filters = null, mixed $defaultValue = null, bool $notAllowEmpty = bool, bool $noRecursive = bool ): mixed;\n</code></pre> Gets a variable from the $_REQUEST superglobal applying filters if needed. If no parameters are given the $_REQUEST superglobal is returned</p> <pre><code>// Returns value from $_REQUEST[\"user_email\"] without sanitizing\n$userEmail = $request-&gt;get(\"user_email\");\n\n// Returns value from $_REQUEST[\"user_email\"] with sanitizing\n$userEmail = $request-&gt;get(\"user_email\", \"email\");\n</code></pre> <p><pre><code>public function getAcceptableContent(): array;\n</code></pre> Gets an array with mime/types and their quality accepted by the browser/client from _SERVER[\"HTTP_ACCEPT\"]</p> <p><pre><code>public function getBasicAuth(): array | null;\n</code></pre> Gets auth info accepted by the browser/client from $_SERVER[\"PHP_AUTH_USER\"]</p> <p><pre><code>public function getBestAccept(): string;\n</code></pre> Gets best mime/type accepted by the browser/client from _SERVER[\"HTTP_ACCEPT\"]</p> <p><pre><code>public function getBestCharset(): string;\n</code></pre> Gets best charset accepted by the browser/client from _SERVER[\"HTTP_ACCEPT_CHARSET\"]</p> <p><pre><code>public function getBestLanguage(): string;\n</code></pre> Gets best language accepted by the browser/client from _SERVER[\"HTTP_ACCEPT_LANGUAGE\"]</p> <p><pre><code>public function getClientAddress( bool $trustForwardedHeader = bool ): string | bool;\n</code></pre> Gets most possible client IPv4 Address. This method searches in $_SERVER[\"REMOTE_ADDR\"] and optionally in $_SERVER[\"HTTP_X_FORWARDED_FOR\"]</p> <p><pre><code>public function getClientCharsets(): array;\n</code></pre> Gets a charsets array and their quality accepted by the browser/client from _SERVER[\"HTTP_ACCEPT_CHARSET\"]</p> <p><pre><code>public function getContentType(): string | null;\n</code></pre> Gets content type which request has been made</p> <p><pre><code>public function getDigestAuth(): array;\n</code></pre> Gets auth info accepted by the browser/client from $_SERVER[\"PHP_AUTH_DIGEST\"]</p> <p><pre><code>public function getHTTPReferer(): string;\n</code></pre> Gets web page that refers active request. ie: https://www.google.com</p> <p><pre><code>public function getHeader( string $header ): string;\n</code></pre> Gets HTTP header from request data</p> <p><pre><code>public function getHeaders(): array;\n</code></pre> Returns the available headers in the request</p> <pre><code>$_SERVER = [\n    \"PHP_AUTH_USER\" =&gt; \"phalcon\",\n    \"PHP_AUTH_PW\"   =&gt; \"secret\",\n];\n\n$headers = $request-&gt;getHeaders();\n\necho $headers[\"Authorization\"]; // Basic cGhhbGNvbjpzZWNyZXQ=\n</code></pre> <p><pre><code>public function getHttpHost(): string;\n</code></pre> Gets host name used by the request.</p> <p><code>Request::getHttpHost</code> trying to find host name in following order:</p> <ul> <li><code>$_SERVER[\"HTTP_HOST\"]</code></li> <li><code>$_SERVER[\"SERVER_NAME\"]</code></li> <li><code>$_SERVER[\"SERVER_ADDR\"]</code></li> </ul> <p>Optionally <code>Request::getHttpHost</code> validates and clean host name. The <code>Request::$_strictHostCheck</code> can be used to validate host name.</p> <p>Note: validation and cleaning have a negative performance impact because they use regular expressions.</p> <pre><code>use Phalcon\\Http\\Request;\n\n$request = new Request;\n\n$_SERVER[\"HTTP_HOST\"] = \"example.com\";\n$request-&gt;getHttpHost(); // example.com\n\n$_SERVER[\"HTTP_HOST\"] = \"example.com:8080\";\n$request-&gt;getHttpHost(); // example.com:8080\n\n$request-&gt;setStrictHostCheck(true);\n$_SERVER[\"HTTP_HOST\"] = \"ex=am~ple.com\";\n$request-&gt;getHttpHost(); // UnexpectedValueException\n\n$_SERVER[\"HTTP_HOST\"] = \"ExAmPlE.com\";\n$request-&gt;getHttpHost(); // example.com\n</code></pre> <p><pre><code>public function getJsonRawBody( bool $associative = bool ): stdClass | array | bool;\n</code></pre> Gets decoded JSON HTTP raw request body</p> <p><pre><code>public function getLanguages(): array;\n</code></pre> Gets languages array and their quality accepted by the browser/client from _SERVER[\"HTTP_ACCEPT_LANGUAGE\"]</p> <p><pre><code>public function getMethod(): string;\n</code></pre> Gets HTTP method which request has been made</p> <p>If the X-HTTP-Method-Override header is set, and if the method is a POST, then it is used to determine the \"real\" intended HTTP method.</p> <p>The _method request parameter can also be used to determine the HTTP method, but only if setHttpMethodParameterOverride(true) has been called.</p> <p>The method is always an uppercased string.</p> <p><pre><code>public function getPort(): int;\n</code></pre> Gets information about the port on which the request is made</p> <p><pre><code>public function getPost( string $name = null, mixed $filters = null, mixed $defaultValue = null, bool $notAllowEmpty = bool, bool $noRecursive = bool ): mixed;\n</code></pre> Gets a variable from the $_POST superglobal applying filters if needed If no parameters are given the $_POST superglobal is returned</p> <pre><code>// Returns value from $_POST[\"user_email\"] without sanitizing\n$userEmail = $request-&gt;getPost(\"user_email\");\n\n// Returns value from $_POST[\"user_email\"] with sanitizing\n$userEmail = $request-&gt;getPost(\"user_email\", \"email\");\n</code></pre> <p><pre><code>public function getPut( string $name = null, mixed $filters = null, mixed $defaultValue = null, bool $notAllowEmpty = bool, bool $noRecursive = bool ): mixed;\n</code></pre> Gets a variable from put request</p> <pre><code>// Returns value from $_PUT[\"user_email\"] without sanitizing\n$userEmail = $request-&gt;getPut(\"user_email\");\n\n// Returns value from $_PUT[\"user_email\"] with sanitizing\n$userEmail = $request-&gt;getPut(\"user_email\", \"email\");\n</code></pre> <p><pre><code>public function getQuery( string $name = null, mixed $filters = null, mixed $defaultValue = null, bool $notAllowEmpty = bool, bool $noRecursive = bool ): mixed;\n</code></pre> Gets variable from $_GET superglobal applying filters if needed If no parameters are given the $_GET superglobal is returned</p> <pre><code>// Returns value from $_GET[\"id\"] without sanitizing\n$id = $request-&gt;getQuery(\"id\");\n\n// Returns value from $_GET[\"id\"] with sanitizing\n$id = $request-&gt;getQuery(\"id\", \"int\");\n\n// Returns value from $_GET[\"id\"] with a default value\n$id = $request-&gt;getQuery(\"id\", null, 150);\n</code></pre> <p><pre><code>public function getRawBody(): string;\n</code></pre> Gets HTTP raw request body</p> <p><pre><code>public function getScheme(): string;\n</code></pre> Gets HTTP schema (http/https)</p> <p><pre><code>public function getServer( string $name ): string | null;\n</code></pre> Gets variable from $_SERVER superglobal</p> <p><pre><code>public function getServerAddress(): string;\n</code></pre> Gets active server address IP</p> <p><pre><code>public function getServerName(): string;\n</code></pre> Gets active server name</p> <p><pre><code>public function getURI( bool $onlyPath = bool ): string;\n</code></pre> Gets HTTP URI which request has been made to</p> <pre><code>// Returns /some/path?with=queryParams\n$uri = $request-&gt;getURI();\n\n// Returns /some/path\n$uri = $request-&gt;getURI(true);\n</code></pre> <p><pre><code>public function getUploadedFiles( bool $onlySuccessful = bool, bool $namedKeys = bool ): FileInterface[];\n</code></pre> Gets attached files as Phalcon\\Http\\Request\\FileInterface compatible instances</p> <p><pre><code>public function getUserAgent(): string;\n</code></pre> Gets HTTP user agent used to made the request</p> <p><pre><code>public function has( string $name ): bool;\n</code></pre> Checks whether $_REQUEST superglobal has certain index</p> <p><pre><code>public function hasFiles(): bool;\n</code></pre> Checks whether request include attached files</p> <p><pre><code>public function hasHeader( string $header ): bool;\n</code></pre> Checks whether headers has certain index</p> <p><pre><code>public function hasPost( string $name ): bool;\n</code></pre> Checks whether $_POST superglobal has certain index</p> <p><pre><code>public function hasPut( string $name ): bool;\n</code></pre> Checks whether the PUT data has certain index</p> <p><pre><code>public function hasQuery( string $name ): bool;\n</code></pre> Checks whether $_GET superglobal has certain index</p> <p><pre><code>public function hasServer( string $name ): bool;\n</code></pre> Checks whether $_SERVER superglobal has certain index</p> <p><pre><code>public function isAjax(): bool;\n</code></pre> Checks whether request has been made using ajax. Checks if $_SERVER[\"HTTP_X_REQUESTED_WITH\"] === \"XMLHttpRequest\"</p> <p><pre><code>public function isConnect(): bool;\n</code></pre> Checks whether HTTP method is CONNECT. if $_SERVER[\"REQUEST_METHOD\"] === \"CONNECT\"</p> <p><pre><code>public function isDelete(): bool;\n</code></pre> Checks whether HTTP method is DELETE. if $_SERVER[\"REQUEST_METHOD\"] === \"DELETE\"</p> <p><pre><code>public function isGet(): bool;\n</code></pre> Checks whether HTTP method is GET. if $_SERVER[\"REQUEST_METHOD\"] === \"GET\"</p> <p><pre><code>public function isHead(): bool;\n</code></pre> Checks whether HTTP method is HEAD. if $_SERVER[\"REQUEST_METHOD\"] === \"HEAD\"</p> <p><pre><code>public function isMethod( mixed $methods, bool $strict = bool ): bool;\n</code></pre> Check if HTTP method match any of the passed methods</p> <p><pre><code>public function isOptions(): bool;\n</code></pre> Checks whether HTTP method is OPTIONS. if $_SERVER[\"REQUEST_METHOD\"] === \"OPTIONS\"</p> <p><pre><code>public function isPost(): bool;\n</code></pre> Checks whether HTTP method is POST. if $_SERVER[\"REQUEST_METHOD\"] === \"POST\"</p> <p><pre><code>public function isPurge(): bool;\n</code></pre> Checks whether HTTP method is PURGE (Squid and Varnish support). if $_SERVER[\"REQUEST_METHOD\"] === \"PURGE\"</p> <p><pre><code>public function isPut(): bool;\n</code></pre> Checks whether HTTP method is PUT. if $_SERVER[\"REQUEST_METHOD\"] === \"PUT\"</p> <p><pre><code>public function isSecure(): bool;\n</code></pre> Checks whether request has been made using any secure layer</p> <p><pre><code>public function isSoap(): bool;\n</code></pre> Checks whether request has been made using SOAP</p> <p><pre><code>public function isTrace(): bool;\n</code></pre> Checks whether HTTP method is TRACE. if $_SERVER[\"REQUEST_METHOD\"] === \"TRACE\"</p> <p><pre><code>public function numFiles( bool $onlySuccessful = bool ): long;\n</code></pre> Returns the number of files available</p>"},{"location":"api/phalcon_http/#httpresponse","title":"Http\\Response","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>DateTime</code></li> <li><code>DateTimeZone</code></li> <li><code>Phalcon\\Di\\Di</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Di\\InjectionAwareInterface</code></li> <li><code>Phalcon\\Events\\EventsAwareInterface</code></li> <li><code>Phalcon\\Events\\ManagerInterface</code></li> <li><code>Phalcon\\Http\\Message\\ResponseStatusCodeInterface</code></li> <li><code>Phalcon\\Http\\Response\\CookiesInterface</code></li> <li><code>Phalcon\\Http\\Response\\Exception</code></li> <li><code>Phalcon\\Http\\Response\\Headers</code></li> <li><code>Phalcon\\Http\\Response\\HeadersInterface</code></li> <li><code>Phalcon\\Mvc\\Url\\UrlInterface</code></li> <li><code>Phalcon\\Mvc\\ViewInterface</code></li> <li><code>Phalcon\\Helper\\Json\\Encode</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>EventsAwareInterface</code></li> <li><code>InjectionAwareInterface</code></li> <li><code>ResponseInterface</code></li> <li><code>ResponseStatusCodeInterface</code></li> </ul> </li> </ul> <p>Part of the HTTP cycle is return responses to the clients. Phalcon\\HTTP\\Response is the Phalcon component responsible to achieve this task. HTTP responses are usually composed by headers and body.</p> <pre><code>$response = new \\Phalcon\\Http\\Response();\n\n$response-&gt;setStatusCode(200, \"OK\");\n$response-&gt;setContent(\"&lt;html&gt;&lt;body&gt;Hello&lt;/body&gt;&lt;/html&gt;\");\n\n$response-&gt;send();\n</code></pre>"},{"location":"api/phalcon_http/#properties_11","title":"Properties","text":"<pre><code>//\nprotected $container;\n\n//\nprotected $content;\n\n//\nprotected $cookies;\n\n//\nprotected $eventsManager;\n\n//\nprotected $file;\n\n//\nprotected $headers;\n\n/**\n * @var bool\n */\nprotected $sent = false;\n\n//\nprotected $statusCodes;\n</code></pre>"},{"location":"api/phalcon_http/#methods_24","title":"Methods","text":"<p><pre><code>public function __construct( string $content = null, mixed $code = null, mixed $status = null );\n</code></pre> Phalcon\\Http\\Response constructor</p> <p><pre><code>public function appendContent( mixed $content ): ResponseInterface;\n</code></pre> Appends a string to the HTTP response body</p> <p><pre><code>public function getContent(): string;\n</code></pre> Gets the HTTP response body</p> <p><pre><code>public function getCookies(): CookiesInterface;\n</code></pre> Returns cookies set by the user</p> <p><pre><code>public function getDI(): DiInterface;\n</code></pre> Returns the internal dependency injector</p> <p><pre><code>public function getEventsManager(): ManagerInterface;\n</code></pre> Returns the internal event manager</p> <p><pre><code>public function getHeaders(): HeadersInterface;\n</code></pre> Returns headers set by the user</p> <p><pre><code>public function getReasonPhrase(): string | null;\n</code></pre> Returns the reason phrase</p> <pre><code>echo $response-&gt;getReasonPhrase();\n</code></pre> <p><pre><code>public function getStatusCode(): int | null;\n</code></pre> Returns the status code</p> <pre><code>echo $response-&gt;getStatusCode();\n</code></pre> <p><pre><code>public function hasHeader( string $name ): bool;\n</code></pre> Checks if a header exists</p> <pre><code>$response-&gt;hasHeader(\"Content-Type\");\n</code></pre> <p><pre><code>public function isSent(): bool;\n</code></pre> Check if the response is already sent</p> <p><pre><code>public function redirect( mixed $location = null, bool $externalRedirect = bool, int $statusCode = int ): ResponseInterface;\n</code></pre> Redirect by HTTP to another action or URL</p> <pre><code>// Using a string redirect (internal/external)\n$response-&gt;redirect(\"posts/index\");\n$response-&gt;redirect(\"http://en.wikipedia.org\", true);\n$response-&gt;redirect(\"http://www.example.com/new-location\", true, 301);\n\n// Making a redirection based on a named route\n$response-&gt;redirect(\n    [\n        \"for\"        =&gt; \"index-lang\",\n        \"lang\"       =&gt; \"jp\",\n        \"controller\" =&gt; \"index\",\n    ]\n);\n</code></pre> <p><pre><code>public function removeHeader( string $name ): ResponseInterface;\n</code></pre> Remove a header in the response</p> <pre><code>$response-&gt;removeHeader(\"Expires\");\n</code></pre> <p><pre><code>public function resetHeaders(): ResponseInterface;\n</code></pre> Resets all the established headers</p> <p><pre><code>public function send(): ResponseInterface;\n</code></pre> Prints out HTTP response to the client</p> <p><pre><code>public function sendCookies(): ResponseInterface;\n</code></pre> Sends cookies to the client</p> <p><pre><code>public function sendHeaders(): ResponseInterface | bool;\n</code></pre> Sends headers to the client</p> <p><pre><code>public function setCache( int $minutes ): ResponseInterface;\n</code></pre> Sets Cache headers to use HTTP cache</p> <pre><code>$this-&gt;response-&gt;setCache(60);\n</code></pre> <p><pre><code>public function setContent( string $content ): ResponseInterface;\n</code></pre> Sets HTTP response body</p> <pre><code>$response-&gt;setContent(\"&lt;h1&gt;Hello!&lt;/h1&gt;\");\n</code></pre> <p><pre><code>public function setContentLength( int $contentLength ): ResponseInterface;\n</code></pre> Sets the response content-length</p> <pre><code>$response-&gt;setContentLength(2048);\n</code></pre> <p><pre><code>public function setContentType( string $contentType, mixed $charset = null ): ResponseInterface;\n</code></pre> Sets the response content-type mime, optionally the charset</p> <pre><code>$response-&gt;setContentType(\"application/pdf\");\n$response-&gt;setContentType(\"text/plain\", \"UTF-8\");\n</code></pre> <p><pre><code>public function setCookies( CookiesInterface $cookies ): ResponseInterface;\n</code></pre> Sets a cookies bag for the response externally</p> <p><pre><code>public function setDI( DiInterface $container ): void;\n</code></pre> Sets the dependency injector</p> <p><pre><code>public function setEtag( string $etag ): ResponseInterface;\n</code></pre> Set a custom ETag</p> <pre><code>$response-&gt;setEtag(\n    md5(\n        time()\n    )\n);\n</code></pre> <p><pre><code>public function setEventsManager( ManagerInterface $eventsManager ): void;\n</code></pre> Sets the events manager</p> <p><pre><code>public function setExpires( DateTime $datetime ): ResponseInterface;\n</code></pre> Sets an Expires header in the response that allows to use the HTTP cache</p> <pre><code>$this-&gt;response-&gt;setExpires(\n    new DateTime()\n);\n</code></pre> <p><pre><code>public function setFileToSend( string $filePath, mixed $attachmentName = null, mixed $attachment = bool ): ResponseInterface;\n</code></pre> Sets an attached file to be sent at the end of the request</p> <p><pre><code>public function setHeader( string $name, mixed $value ): ResponseInterface;\n</code></pre> Overwrites a header in the response</p> <pre><code>$response-&gt;setHeader(\"Content-Type\", \"text/plain\");\n</code></pre> <p><pre><code>public function setHeaders( HeadersInterface $headers ): ResponseInterface;\n</code></pre> Sets a headers bag for the response externally</p> <p><pre><code>public function setJsonContent( mixed $content, int $jsonOptions = int, int $depth = int ): ResponseInterface;\n</code></pre> Sets HTTP response body. The parameter is automatically converted to JSON and also sets default header: Content-Type: \"application/json; charset=UTF-8\"</p> <pre><code>$response-&gt;setJsonContent(\n    [\n        \"status\" =&gt; \"OK\",\n    ]\n);\n</code></pre> <p><pre><code>public function setLastModified( DateTime $datetime ): ResponseInterface;\n</code></pre> Sets Last-Modified header</p> <pre><code>$this-&gt;response-&gt;setLastModified(\n    new DateTime()\n);\n</code></pre> <p><pre><code>public function setNotModified(): ResponseInterface;\n</code></pre> Sends a Not-Modified response</p> <p><pre><code>public function setRawHeader( string $header ): ResponseInterface;\n</code></pre> Send a raw header to the response</p> <pre><code>$response-&gt;setRawHeader(\"HTTP/1.1 404 Not Found\");\n</code></pre> <p><pre><code>public function setStatusCode( int $code, string $message = null ): ResponseInterface;\n</code></pre> Sets the HTTP response code</p> <pre><code>$response-&gt;setStatusCode(404, \"Not Found\");\n</code></pre>"},{"location":"api/phalcon_http/#httpresponsecookies","title":"Http\\Response\\Cookies","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Response</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\AbstractInjectionAware</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Http\\Cookie\\CookieInterface</code></li> <li><code>Phalcon\\Http\\Cookie\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractInjectionAware</code></p> </li> <li> <p>Implements</p> <ul> <li><code>CookiesInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Http\\Response\\Cookies</p> <p>This class is a bag to manage the cookies.</p> <p>A cookies bag is automatically registered as part of the 'response' service in the DI. By default, cookies are automatically encrypted before being sent to the client and are decrypted when retrieved from the user. To set sign key used to generate a message authentication code use <code>Phalcon\\Http\\Response\\Cookies::setSignKey()</code>.</p> <pre><code>use Phalcon\\Di;\nuse Phalcon\\Crypt;\nuse Phalcon\\Http\\Response\\Cookies;\n\n$di = new Di();\n\n$di-&gt;set(\n    'crypt',\n    function () {\n        $crypt = new Crypt();\n\n        // The `$key' should have been previously generated in a cryptographically safe way.\n        $key = \"T4\\xb1\\x8d\\xa9\\x98\\x05\\\\\\x8c\\xbe\\x1d\\x07&amp;[\\x99\\x18\\xa4~Lc1\\xbeW\\xb3\";\n\n        $crypt-&gt;setKey($key);\n\n        return $crypt;\n    }\n);\n\n$di-&gt;set(\n    'cookies',\n    function () {\n        $cookies = new Cookies();\n\n        // The `$key' MUST be at least 32 characters long and generated using a\n        // cryptographically secure pseudo random generator.\n        $key = \"#1dj8$=dp?.ak//j1V$~%*0XaK\\xb1\\x8d\\xa9\\x98\\x054t7w!z%C*F-Jk\\x98\\x05\\\\\\x5c\";\n\n        $cookies-&gt;setSignKey($key);\n\n        return $cookies;\n    }\n);\n</code></pre>"},{"location":"api/phalcon_http/#properties_12","title":"Properties","text":"<pre><code>//\nprotected $cookies;\n\n//\nprotected $registered = false;\n\n/**\n * The cookie's sign key.\n * @var string|null\n */\nprotected $signKey;\n\n//\nprotected $useEncryption = true;\n</code></pre>"},{"location":"api/phalcon_http/#methods_25","title":"Methods","text":"<p><pre><code>public function __construct( bool $useEncryption = bool, string $signKey = null );\n</code></pre> Phalcon\\Http\\Response\\Cookies constructor</p> <p><pre><code>public function delete( string $name ): bool;\n</code></pre> Deletes a cookie by its name This method does not removes cookies from the _COOKIE superglobal</p> <p><pre><code>public function get( string $name ): CookieInterface;\n</code></pre> Gets a cookie from the bag</p> <p><pre><code>public function getCookies(): array;\n</code></pre> Gets all cookies from the bag</p> <p><pre><code>public function has( string $name ): bool;\n</code></pre> Check if a cookie is defined in the bag or exists in the _COOKIE superglobal</p> <p><pre><code>public function isUsingEncryption(): bool;\n</code></pre> Returns if the bag is automatically encrypting/decrypting cookies</p> <p><pre><code>public function reset(): CookiesInterface;\n</code></pre> Reset set cookies</p> <p><pre><code>public function send(): bool;\n</code></pre> Sends the cookies to the client Cookies aren't sent if headers are sent in the current request</p> <p><pre><code>public function set( string $name, mixed $value = null, int $expire = int, string $path = string, bool $secure = null, string $domain = null, bool $httpOnly = null, array $options = [] ): CookiesInterface;\n</code></pre> Sets a cookie to be sent at the end of the request.</p> <p>This method overrides any cookie set before with the same name.</p> <pre><code>use Phalcon\\Http\\Response\\Cookies;\n\n$now = new DateTimeImmutable();\n$tomorrow = $now-&gt;modify('tomorrow');\n\n$cookies = new Cookies();\n$cookies-&gt;set(\n    'remember-me',\n    json_encode(['user_id' =&gt; 1]),\n    (int) $tomorrow-&gt;format('U'),\n);\n</code></pre> <p><pre><code>public function setSignKey( string $signKey = null ): CookiesInterface;\n</code></pre> Sets the cookie's sign key.</p> <p>The `$signKey' MUST be at least 32 characters long and generated using a cryptographically secure pseudo random generator.</p> <p>Use NULL to disable cookie signing.</p> <p>@see \\Phalcon\\Security\\Random</p> <p><pre><code>public function useEncryption( bool $useEncryption ): CookiesInterface;\n</code></pre> Set if cookies in the bag must be automatically encrypted/decrypted</p>"},{"location":"api/phalcon_http/#httpresponsecookiesinterface","title":"Http\\Response\\CookiesInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Response</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Http\\Cookie\\CookieInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Http\\Response\\CookiesInterface</p> <p>Interface for Phalcon\\Http\\Response\\Cookies</p>"},{"location":"api/phalcon_http/#methods_26","title":"Methods","text":"<p><pre><code>public function delete( string $name ): bool;\n</code></pre> Deletes a cookie by its name This method does not removes cookies from the _COOKIE superglobal</p> <p><pre><code>public function get( string $name ): CookieInterface;\n</code></pre> Gets a cookie from the bag</p> <p><pre><code>public function has( string $name ): bool;\n</code></pre> Check if a cookie is defined in the bag or exists in the _COOKIE superglobal</p> <p><pre><code>public function isUsingEncryption(): bool;\n</code></pre> Returns if the bag is automatically encrypting/decrypting cookies</p> <p><pre><code>public function reset(): CookiesInterface;\n</code></pre> Reset set cookies</p> <p><pre><code>public function send(): bool;\n</code></pre> Sends the cookies to the client</p> <p><pre><code>public function set( string $name, mixed $value = null, int $expire = int, string $path = string, bool $secure = null, string $domain = null, bool $httpOnly = null, array $options = [] ): CookiesInterface;\n</code></pre> Sets a cookie to be sent at the end of the request</p> <p><pre><code>public function useEncryption( bool $useEncryption ): CookiesInterface;\n</code></pre> Set if cookies in the bag must be automatically encrypted/decrypted</p>"},{"location":"api/phalcon_http/#httpresponseexception","title":"Http\\Response\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Response</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Http\\Response\\Exception</p> <p>Exceptions thrown in Phalcon\\Http\\Response will use this class.</p>"},{"location":"api/phalcon_http/#httpresponseheaders","title":"Http\\Response\\Headers","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Response</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>HeadersInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Http\\Response\\Headers</p> <p>This class is a bag to manage the response headers</p>"},{"location":"api/phalcon_http/#properties_13","title":"Properties","text":"<pre><code>//\nprotected $headers;\n</code></pre>"},{"location":"api/phalcon_http/#methods_27","title":"Methods","text":"<p><pre><code>public function get( string $name ): string | bool;\n</code></pre> Gets a header value from the internal bag</p> <p><pre><code>public function has( string $name ): bool;\n</code></pre> Checks if a header exists</p> <p><pre><code>public function remove( string $header ): HeadersInterface;\n</code></pre> Removes a header to be sent at the end of the request</p> <p><pre><code>public function reset();\n</code></pre> Reset set headers</p> <p><pre><code>public function send(): bool;\n</code></pre> Sends the headers to the client</p> <p><pre><code>public function set( string $name, string $value ): HeadersInterface;\n</code></pre> Sets a header to be sent at the end of the request</p> <p><pre><code>public function setRaw( string $header ): HeadersInterface;\n</code></pre> Sets a raw header to be sent at the end of the request</p> <p><pre><code>public function toArray(): array;\n</code></pre> Returns the current headers as an array</p>"},{"location":"api/phalcon_http/#httpresponseheadersinterface","title":"Http\\Response\\HeadersInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Response</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Http\\Response\\HeadersInterface</p> <p>Interface for Phalcon\\Http\\Response\\Headers compatible bags</p>"},{"location":"api/phalcon_http/#methods_28","title":"Methods","text":"<p><pre><code>public function get( string $name ): string | bool;\n</code></pre> Gets a header value from the internal bag</p> <p><pre><code>public function has( string $name ): bool;\n</code></pre> Checks if a header exists</p> <p><pre><code>public function reset();\n</code></pre> Reset set headers</p> <p><pre><code>public function send(): bool;\n</code></pre> Sends the headers to the client</p> <p><pre><code>public function set( string $name, string $value );\n</code></pre> Sets a header to be sent at the end of the request</p> <p><pre><code>public function setRaw( string $header );\n</code></pre> Sets a raw header to be sent at the end of the request</p>"},{"location":"api/phalcon_http/#httpresponseinterface","title":"Http\\ResponseInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>DateTime</code></li> <li><code>Phalcon\\Http\\Response\\HeadersInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Http\\Response</p> <p>Interface for Phalcon\\Http\\Response</p>"},{"location":"api/phalcon_http/#methods_29","title":"Methods","text":"<p><pre><code>public function appendContent( mixed $content ): ResponseInterface;\n</code></pre> Appends a string to the HTTP response body</p> <p><pre><code>public function getContent(): string;\n</code></pre> Gets the HTTP response body</p> <p><pre><code>public function getHeaders(): HeadersInterface;\n</code></pre> Returns headers set by the user</p> <p><pre><code>public function getStatusCode(): int | null;\n</code></pre> Returns the status code</p> <p><pre><code>public function hasHeader( string $name ): bool;\n</code></pre> Checks if a header exists</p> <p><pre><code>public function isSent(): bool;\n</code></pre> Checks if the response was already sent</p> <p><pre><code>public function redirect( mixed $location = null, bool $externalRedirect = bool, int $statusCode = int ): ResponseInterface;\n</code></pre> Redirect by HTTP to another action or URL</p> <p><pre><code>public function resetHeaders(): ResponseInterface;\n</code></pre> Resets all the established headers</p> <p><pre><code>public function send(): ResponseInterface;\n</code></pre> Prints out HTTP response to the client</p> <p><pre><code>public function sendCookies(): ResponseInterface;\n</code></pre> Sends cookies to the client</p> <p><pre><code>public function sendHeaders(): ResponseInterface | bool;\n</code></pre> Sends headers to the client</p> <p><pre><code>public function setContent( string $content ): ResponseInterface;\n</code></pre> Sets HTTP response body</p> <p><pre><code>public function setContentLength( int $contentLength ): ResponseInterface;\n</code></pre> Sets the response content-length</p> <p><pre><code>public function setContentType( string $contentType, mixed $charset = null ): ResponseInterface;\n</code></pre> Sets the response content-type mime, optionally the charset</p> <p><pre><code>public function setExpires( DateTime $datetime ): ResponseInterface;\n</code></pre> Sets output expire time header</p> <p><pre><code>public function setFileToSend( string $filePath, mixed $attachmentName = null ): ResponseInterface;\n</code></pre> Sets an attached file to be sent at the end of the request</p> <p><pre><code>public function setHeader( string $name, mixed $value ): ResponseInterface;\n</code></pre> Overwrites a header in the response</p> <p><pre><code>public function setJsonContent( mixed $content ): ResponseInterface;\n</code></pre> Sets HTTP response body. The parameter is automatically converted to JSON</p> <pre><code>$response-&gt;setJsonContent(\n    [\n        \"status\" =&gt; \"OK\",\n    ]\n);\n</code></pre> <p><pre><code>public function setNotModified(): ResponseInterface;\n</code></pre> Sends a Not-Modified response</p> <p><pre><code>public function setRawHeader( string $header ): ResponseInterface;\n</code></pre> Send a raw header to the response</p> <p><pre><code>public function setStatusCode( int $code, string $message = null ): ResponseInterface;\n</code></pre> Sets the HTTP response code</p>"},{"location":"api/phalcon_http/#httpserverabstractmiddleware","title":"Http\\Server\\AbstractMiddleware","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Server</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Psr\\Http\\Message\\ResponseInterface</code></li> <li><code>Psr\\Http\\Message\\ServerRequestInterface</code></li> <li><code>Psr\\Http\\Server\\MiddlewareInterface</code></li> <li><code>Psr\\Http\\Server\\RequestHandlerInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>MiddlewareInterface</code></li> </ul> </li> </ul> <p>Participant in processing a server request and response.</p> <p>An HTTP middleware component participates in processing an HTTP message: by acting on the request, generating the response, or forwarding the request to a subsequent middleware and possibly acting on its response.</p>"},{"location":"api/phalcon_http/#methods_30","title":"Methods","text":"<p><pre><code>abstract public function process( ServerRequestInterface $request, RequestHandlerInterface $handler ): ResponseInterface;\n</code></pre> Process an incoming server request.</p> <p>Processes an incoming server request in order to produce a response. If unable to produce the response itself, it may delegate to the provided request handler to do so.</p>"},{"location":"api/phalcon_http/#httpserverabstractrequesthandler","title":"Http\\Server\\AbstractRequestHandler","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Http\\Server</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Psr\\Http\\Message\\ResponseInterface</code></li> <li><code>Psr\\Http\\Message\\ServerRequestInterface</code></li> <li><code>Psr\\Http\\Server\\RequestHandlerInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>RequestHandlerInterface</code></li> </ul> </li> </ul> <p>Handles a server request and produces a response.</p> <p>An HTTP request handler process an HTTP request in order to produce an HTTP response.</p>"},{"location":"api/phalcon_http/#methods_31","title":"Methods","text":"<p><pre><code>abstract public function handle( ServerRequestInterface $request ): ResponseInterface;\n</code></pre> Handles a request and produces a response.</p> <p>May call other collaborating code to generate the response.</p>"},{"location":"api/phalcon_image/","title":"Phalcon image","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_image/#imageadapterabstractadapter","title":"Image\\Adapter\\AbstractAdapter","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Image\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Image\\Enum</code></li> <li><code>Phalcon\\Image\\Exception</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>AdapterInterface</code></li> </ul> </li> </ul> <p>All image adapters must use this class</p>"},{"location":"api/phalcon_image/#properties","title":"Properties","text":"<pre><code>//\nprotected $static $checked = false;\n\n//\nprotected $file;\n\n/**\n * Image height\n *\n * @var int\n */\nprotected $height;\n\n//\nprotected $image;\n\n/**\n * Image mime type\n *\n * @var string\n */\nprotected $mime;\n\n//\nprotected $realpath;\n\n/**\n * Image type\n *\n * Driver dependent\n *\n * @var int\n */\nprotected $type;\n\n/**\n * Image width\n *\n * @var int\n */\nprotected $width;\n</code></pre>"},{"location":"api/phalcon_image/#methods","title":"Methods","text":"<p><pre><code>public function background( string $color, int $opacity = int ): AdapterInterface;\n</code></pre>  Set the background color of an image</p> <p><pre><code>public function blur( int $radius ): AdapterInterface;\n</code></pre>  Blur image</p> <p><pre><code>public function crop( int $width, int $height, int $offsetX = null, int $offsetY = null ): AdapterInterface;\n</code></pre>  Crop an image to the given size</p> <p><pre><code>public function flip( int $direction ): AdapterInterface;\n</code></pre>  Flip the image along the horizontal or vertical axis</p> <pre><code>public function getHeight(): int;\n</code></pre> <pre><code>public function getImage();\n</code></pre> <pre><code>public function getMime(): string;\n</code></pre> <pre><code>public function getRealpath();\n</code></pre> <pre><code>public function getType(): int;\n</code></pre> <pre><code>public function getWidth(): int;\n</code></pre> <p><pre><code>public function liquidRescale( int $width, int $height, int $deltaX = int, int $rigidity = int ): AbstractAdapter;\n</code></pre> This method scales the images using liquid rescaling method. Only support Imagick</p> <p><pre><code>public function mask( AdapterInterface $watermark ): AdapterInterface;\n</code></pre>  Composite one image onto another</p> <p><pre><code>public function pixelate( int $amount ): AdapterInterface;\n</code></pre>  Pixelate image</p> <p><pre><code>public function reflection( int $height, int $opacity = int, bool $fadeIn = bool ): AdapterInterface;\n</code></pre>  Add a reflection to an image</p> <p><pre><code>public function render( string $ext = null, int $quality = int ): string;\n</code></pre>  Render the image and return the binary string</p> <p><pre><code>public function resize( int $width = null, int $height = null, int $master = static-constant-access ): AdapterInterface;\n</code></pre>  Resize the image to the given size</p> <p><pre><code>public function rotate( int $degrees ): AdapterInterface;\n</code></pre>  Rotate the image by a given amount</p> <p><pre><code>public function save( string $file = null, int $quality = int ): AdapterInterface;\n</code></pre>  Save the image</p> <p><pre><code>public function sharpen( int $amount ): AdapterInterface;\n</code></pre>  Sharpen the image by a given amount</p> <p><pre><code>public function text( string $text, mixed $offsetX = bool, mixed $offsetY = bool, int $opacity = int, string $color = string, int $size = int, string $fontfile = null ): AdapterInterface;\n</code></pre>  Add a text to an image with a specified opacity</p> <p><pre><code>public function watermark( AdapterInterface $watermark, int $offsetX = int, int $offsetY = int, int $opacity = int ): AdapterInterface;\n</code></pre>  Add a watermark to an image with the specified opacity</p>"},{"location":"api/phalcon_image/#imageadapteradapterinterface","title":"Image\\Adapter\\AdapterInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Image\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Image\\Enum</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Image\\Adapter classes</p>"},{"location":"api/phalcon_image/#methods_1","title":"Methods","text":"<pre><code>public function background( string $color, int $opacity = int ): AdapterInterface;\n</code></pre> <pre><code>public function blur( int $radius ): AdapterInterface;\n</code></pre> <pre><code>public function crop( int $width, int $height, int $offsetX = null, int $offsetY = null ): AdapterInterface;\n</code></pre> <pre><code>public function flip( int $direction ): AdapterInterface;\n</code></pre> <pre><code>public function mask( AdapterInterface $watermark ): AdapterInterface;\n</code></pre> <pre><code>public function pixelate( int $amount ): AdapterInterface;\n</code></pre> <pre><code>public function reflection( int $height, int $opacity = int, bool $fadeIn = bool ): AdapterInterface;\n</code></pre> <pre><code>public function render( string $ext = null, int $quality = int ): string;\n</code></pre> <pre><code>public function resize( int $width = null, int $height = null, int $master = static-constant-access ): AdapterInterface;\n</code></pre> <pre><code>public function rotate( int $degrees ): AdapterInterface;\n</code></pre> <pre><code>public function save( string $file = null, int $quality = int ): AdapterInterface;\n</code></pre> <pre><code>public function sharpen( int $amount ): AdapterInterface;\n</code></pre> <pre><code>public function text( string $text, int $offsetX = int, int $offsetY = int, int $opacity = int, string $color = string, int $size = int, string $fontfile = null ): AdapterInterface;\n</code></pre> <pre><code>public function watermark( AdapterInterface $watermark, int $offsetX = int, int $offsetY = int, int $opacity = int ): AdapterInterface;\n</code></pre>"},{"location":"api/phalcon_image/#imageadaptergd","title":"Image\\Adapter\\Gd","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Image\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Image\\Enum</code></li> <li><code>Phalcon\\Image\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>This file is part of the Phalcon Framework.</p> <p>(c) Phalcon Team team@phalcon.io</p> <p>For the full copyright and license information, please view the LICENSE.txt file that was distributed with this source code.</p>"},{"location":"api/phalcon_image/#properties_1","title":"Properties","text":"<pre><code>//\nprotected $static $checked = false;\n</code></pre>"},{"location":"api/phalcon_image/#methods_2","title":"Methods","text":"<pre><code>public function __construct( string $file, int $width = null, int $height = null );\n</code></pre> <pre><code>public function __destruct();\n</code></pre> <pre><code>public static function check(): bool;\n</code></pre> <pre><code>public static function getVersion(): string;\n</code></pre> <pre><code>protected function processBackground( int $r, int $g, int $b, int $opacity );\n</code></pre> <pre><code>protected function processBlur( int $radius );\n</code></pre> <pre><code>protected function processCreate( int $width, int $height );\n</code></pre> <pre><code>protected function processCrop( int $width, int $height, int $offsetX, int $offsetY );\n</code></pre> <pre><code>protected function processFlip( int $direction );\n</code></pre> <pre><code>protected function processMask( AdapterInterface $mask );\n</code></pre> <pre><code>protected function processPixelate( int $amount );\n</code></pre> <pre><code>protected function processReflection( int $height, int $opacity, bool $fadeIn );\n</code></pre> <pre><code>protected function processRender( string $ext, int $quality );\n</code></pre> <pre><code>protected function processResize( int $width, int $height );\n</code></pre> <pre><code>protected function processRotate( int $degrees );\n</code></pre> <pre><code>protected function processSave( string $file, int $quality );\n</code></pre> <pre><code>protected function processSharpen( int $amount );\n</code></pre> <pre><code>protected function processText( string $text, int $offsetX, int $offsetY, int $opacity, int $r, int $g, int $b, int $size, string $fontfile );\n</code></pre> <pre><code>protected function processWatermark( AdapterInterface $watermark, int $offsetX, int $offsetY, int $opacity );\n</code></pre>"},{"location":"api/phalcon_image/#imageadapterimagick","title":"Image\\Adapter\\Imagick","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Image\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Imagick</code></li> <li><code>ImagickDraw</code></li> <li><code>ImagickDrawException</code></li> <li><code>ImagickException</code></li> <li><code>ImagickPixel</code></li> <li><code>ImagickPixelException</code></li> <li><code>Phalcon\\Image\\Enum</code></li> <li><code>Phalcon\\Image\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Image\\Adapter\\Imagick</p> <p>Image manipulation support. Allows images to be resized, cropped, etc.</p> <pre><code>$image = new \\Phalcon\\Image\\Adapter\\Imagick(\"upload/test.jpg\");\n\n$image-&gt;resize(200, 200)-&gt;rotate(90)-&gt;crop(100, 100);\n\nif ($image-&gt;save()) {\n    echo \"success\";\n\n}\n</code></pre>"},{"location":"api/phalcon_image/#properties_2","title":"Properties","text":"<pre><code>//\nprotected $static $checked = false;\n\n//\nprotected $static $version = 0;\n</code></pre>"},{"location":"api/phalcon_image/#methods_3","title":"Methods","text":"<p><pre><code>public function __construct( string $file, int $width = null, int $height = null );\n</code></pre> \\Phalcon\\Image\\Adapter\\Imagick constructor</p> <p><pre><code>public function __destruct();\n</code></pre> Destroys the loaded image to free up resources.</p> <p><pre><code>public static function check(): bool;\n</code></pre> Checks if Imagick is enabled</p> <p><pre><code>public function getInternalImInstance(): \\Imagick;\n</code></pre> Get instance</p> <p><pre><code>public function setResourceLimit( int $type, int $limit );\n</code></pre> Sets the limit for a particular resource in megabytes</p> <p>@link https://php.net/manual/ru/imagick.constants.php#imagick.constants.resourcetypes</p> <p><pre><code>protected function processBackground( int $r, int $g, int $b, int $opacity );\n</code></pre> Execute a background.</p> <p><pre><code>protected function processBlur( int $radius );\n</code></pre> Blur image</p> <p><pre><code>protected function processCrop( int $width, int $height, int $offsetX, int $offsetY );\n</code></pre> Execute a crop.</p> <p><pre><code>protected function processFlip( int $direction );\n</code></pre> Execute a flip.</p> <p><pre><code>protected function processLiquidRescale( int $width, int $height, int $deltaX, int $rigidity );\n</code></pre> This method scales the images using liquid rescaling method. Only support Imagick</p> <p><pre><code>protected function processMask( AdapterInterface $image );\n</code></pre> Composite one image onto another</p> <p><pre><code>protected function processPixelate( int $amount );\n</code></pre> Pixelate image</p> <p><pre><code>protected function processReflection( int $height, int $opacity, bool $fadeIn );\n</code></pre> Execute a reflection.</p> <p><pre><code>protected function processRender( string $extension, int $quality ): string;\n</code></pre> Execute a render.</p> <p><pre><code>protected function processResize( int $width, int $height );\n</code></pre> Execute a resize.</p> <p><pre><code>protected function processRotate( int $degrees );\n</code></pre> Execute a rotation.</p> <p><pre><code>protected function processSave( string $file, int $quality );\n</code></pre> Execute a save.</p> <p><pre><code>protected function processSharpen( int $amount );\n</code></pre> Execute a sharpen.</p> <p><pre><code>protected function processText( string $text, mixed $offsetX, mixed $offsetY, int $opacity, int $r, int $g, int $b, int $size, string $fontfile );\n</code></pre> Execute a text</p> <p><pre><code>protected function processWatermark( AdapterInterface $image, int $offsetX, int $offsetY, int $opacity );\n</code></pre> Execute a watermarking.</p>"},{"location":"api/phalcon_image/#imageenum","title":"Image\\Enum","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Image</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This file is part of the Phalcon Framework.</p> <p>(c) Phalcon Team team@phalcon.io</p> <p>For the full copyright and license information, please view the LICENSE.txt file that was distributed with this source code.</p>"},{"location":"api/phalcon_image/#constants","title":"Constants","text":"<pre><code>const AUTO = 4;\nconst HEIGHT = 3;\nconst HORIZONTAL = 11;\nconst INVERSE = 5;\nconst NONE = 1;\nconst PRECISE = 6;\nconst TENSILE = 7;\nconst VERTICAL = 12;\nconst WIDTH = 2;\n</code></pre>"},{"location":"api/phalcon_image/#imageexception","title":"Image\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Image</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Image will use this class</p>"},{"location":"api/phalcon_image/#imageimagefactory","title":"Image\\ImageFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Image</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Factory\\AbstractFactory</code></li> <li><code>Phalcon\\Image\\Adapter\\AdapterInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFactory</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Image/ImageFactory</p>"},{"location":"api/phalcon_image/#methods_4","title":"Methods","text":"<p><pre><code>public function __construct( array $services = [] );\n</code></pre> Constructor</p> <p><pre><code>public function load( mixed $config ): AdapterInterface;\n</code></pre> Factory to create an instance from a Config object</p> <p><pre><code>public function newInstance( string $name, string $file, int $width = null, int $height = null ): AdapterInterface;\n</code></pre> Creates a new instance</p> <pre><code>protected function getAdapters(): array;\n</code></pre>"},{"location":"api/phalcon_kernel/","title":"Phalcon kernel","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_kernel/#kernel","title":"Kernel","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This class allows to change the internal behavior of the framework in runtime</p>"},{"location":"api/phalcon_kernel/#methods","title":"Methods","text":"<p><pre><code>public static function preComputeHashKey( string $key );\n</code></pre> Produces a pre-computed hash key based on a string. This function produces different numbers in 32bit/64bit processors</p>"},{"location":"api/phalcon_loader/","title":"Phalcon loader","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_loader/#loader","title":"Loader","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Autoload</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Events\\AbstractEventsAware</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractEventsAware</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>This component helps to load your project classes automatically based on some conventions</p> <pre><code>use Phalcon\\Loader;\n\n// Creates the autoloader\n$loader = new Loader();\n\n// Register some namespaces\n$loader-&gt;registerNamespaces(\n    [\n        \"Example\\\\Base\"    =&gt; \"vendor/example/base/\",\n        \"Example\\\\Adapter\" =&gt; \"vendor/example/adapter/\",\n        \"Example\"          =&gt; \"vendor/example/\",\n    ]\n);\n\n// Register autoloader\n$loader-&gt;register();\n\n// Requiring this class will automatically include file vendor/example/adapter/Some.php\n$adapter = new \\Example\\Adapter\\Some();\n</code></pre>"},{"location":"api/phalcon_loader/#properties","title":"Properties","text":"<pre><code>//\nprotected $checkedPath;\n\n/**\n * @var array\n */\nprotected $classes;\n\n/**\n * @var array\n */\nprotected $directories;\n\n/**\n * @var array\n */\nprotected $directories;\n\n/**\n * @var array\n */\nprotected $extensions;\n\n/**\n * @var string|callable\n */\nprotected $fileCheckingCallback = 'is_file';\n\n/**\n * @var array\n */\nprotected $files;\n\n/**\n * @var bool\n */\nprotected $foundPath;\n\n/**\n * @var array\n */\nprotected $namespaces;\n\n/**\n * @var bool\n */\nprotected $registered = false;\n</code></pre>"},{"location":"api/phalcon_loader/#methods","title":"Methods","text":"<p><pre><code>public function autoLoad( string $className ): bool;\n</code></pre> Autoloads the registered classes</p> <p><pre><code>public function getCheckedPath(): string;\n</code></pre> Get the path the loader is checking for a path</p> <p><pre><code>public function getClasses(): array;\n</code></pre> Returns the class-map currently registered in the autoloader</p> <p><pre><code>public function getDirs(): array;\n</code></pre> Returns the directories currently registered in the autoloader</p> <p><pre><code>public function getEventsManager(): ManagerInterface;\n</code></pre> Returns the internal event manager</p> <p><pre><code>public function getExtensions(): array;\n</code></pre> Returns the file extensions registered in the loader</p> <p><pre><code>public function getFiles(): array;\n</code></pre> Returns the files currently registered in the autoloader</p> <p><pre><code>public function getFoundPath(): string;\n</code></pre> Get the path when a class was found</p> <p><pre><code>public function getNamespaces(): array;\n</code></pre> Returns the namespaces currently registered in the autoloader</p> <p><pre><code>public function loadFiles(): void;\n</code></pre> Checks if a file exists and then adds the file by doing virtual require</p> <p><pre><code>public function register( bool $prepend = bool ): Loader;\n</code></pre> Register the autoload method</p> <p><pre><code>public function registerClasses( array $classes, bool $merge = bool ): Loader;\n</code></pre> Register classes and their locations</p> <p><pre><code>public function registerDirs( array $directories, bool $merge = bool ): Loader;\n</code></pre> Register directories in which \"not found\" classes could be found</p> <p><pre><code>public function registerFiles( array $files, bool $merge = bool ): Loader;\n</code></pre> Registers files that are \"non-classes\" hence need a \"require\". This is very useful for including files that only have functions</p> <p><pre><code>public function registerNamespaces( array $namespaces, bool $merge = bool ): Loader;\n</code></pre> Register namespaces and their related directories</p> <p><pre><code>public function setEventsManager( ManagerInterface $eventsManager ): void;\n</code></pre> Sets the events manager</p> <p><pre><code>public function setExtensions( array $extensions ): Loader;\n</code></pre> Sets an array of file extensions that the loader must try in each attempt to locate the file</p> <p><pre><code>public function setFileCheckingCallback( mixed $callback = null ): Loader;\n</code></pre> Sets the file check callback.</p> <pre><code>// Default behavior.\n$loader-&gt;setFileCheckingCallback(\"is_file\");\n\n// Faster than `is_file()`, but implies some issues if\n// the file is removed from the filesystem.\n$loader-&gt;setFileCheckingCallback(\"stream_resolve_include_path\");\n\n// Do not check file existence.\n$loader-&gt;setFileCheckingCallback(null);\n</code></pre> <p><pre><code>public function unregister(): Loader;\n</code></pre> Unregister the autoload method</p> <pre><code>protected function prepareNamespace( array $namespaceName ): array;\n</code></pre>"},{"location":"api/phalcon_loader/#loaderexception","title":"Loader\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Autoload</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements Exceptions thrown in Phalcon\\Loader will use this class</p> </li> </ul>"},{"location":"api/phalcon_logger/","title":"Phalcon logger","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_logger/#loggerlogger","title":"Logger\\Logger","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Logger</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Psr\\Log\\LoggerInterface</code></li> <li><code>Phalcon\\Logger\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Logger\\Item</code></li> <li><code>Phalcon\\Logger\\Exception</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>LoggerInterface</code></li> </ul> </li> </ul> <p>Phalcon Logger.</p> <p>This component offers logging capabilities for your application. The component accepts multiple adapters, working also as a multiple logger. Phalcon\\Logger implements PSR-3.</p> <pre><code>use Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Stream;\n\n$adapter1 = new Stream('/logs/first-log.log');\n$adapter2 = new Stream('/remote/second-log.log');\n$adapter3 = new Stream('/manager/third-log.log');\n\n$logger = new Logger(\n        'messages',\n        [\n            'local'   =&gt; $adapter1,\n            'remote'  =&gt; $adapter2,\n            'manager' =&gt; $adapter3,\n        ]\n    );\n\n// Log to all adapters\n$logger-&gt;error('Something went wrong');\n\n// Log to specific adapters\n$logger\n        -&gt;excludeAdapters(['manager'])\n        -&gt;info('This does not go to the \"manager\" logger');\n</code></pre>"},{"location":"api/phalcon_logger/#constants","title":"Constants","text":"<pre><code>const ALERT = 2;\nconst CRITICAL = 1;\nconst CUSTOM = 8;\nconst DEBUG = 7;\nconst EMERGENCY = 0;\nconst ERROR = 3;\nconst INFO = 6;\nconst NOTICE = 5;\nconst WARNING = 4;\n</code></pre>"},{"location":"api/phalcon_logger/#properties","title":"Properties","text":"<pre><code>/**\n * The adapter stack\n *\n * @var AdapterInterface[]\n */\nprotected $adapters;\n\n/**\n * Minimum log level for the logger\n *\n * @var int\n */\nprotected $logLevel = 8;\n\n/**\n * @var string\n */\nprotected $name = '';\n\n/**\n * The excluded adapters for this log process\n *\n * @var AdapterInterface[]\n */\nprotected $excluded;\n</code></pre>"},{"location":"api/phalcon_logger/#methods","title":"Methods","text":"<p><pre><code>public function __construct( string $name, array $adapters = [] );\n</code></pre> Constructor.</p> <p><pre><code>public function addAdapter( string $name, AdapterInterface $adapter ): Logger;\n</code></pre> Add an adapter to the stack. For processing we use FIFO</p> <p><pre><code>public function alert( mixed $message, array $context = [] ): void;\n</code></pre> Action must be taken immediately.</p> <p>Example: Entire website down, database unavailable, etc. This should trigger the SMS alerts and wake you up.</p> <p><pre><code>public function critical( mixed $message, array $context = [] ): void;\n</code></pre> Critical conditions.</p> <p>Example: Application component unavailable, unexpected exception.</p> <p><pre><code>public function debug( mixed $message, array $context = [] ): void;\n</code></pre> Detailed debug information.</p> <p><pre><code>public function emergency( mixed $message, array $context = [] ): void;\n</code></pre> System is unusable.</p> <p><pre><code>public function error( mixed $message, array $context = [] ): void;\n</code></pre> Runtime errors that do not require immediate action but should typically be logged and monitored.</p> <p><pre><code>public function excludeAdapters( array $adapters = [] ): Logger;\n</code></pre> Exclude certain adapters.</p> <p><pre><code>public function getAdapter( string $name ): AdapterInterface;\n</code></pre> Returns an adapter from the stack</p> <p><pre><code>public function getAdapters(): array;\n</code></pre> Returns the adapter stack array</p> <pre><code>public function getLogLevel(): int\n</code></pre> <p><pre><code>public function getName(): string;\n</code></pre> Returns the name of the logger</p> <p><pre><code>public function info( mixed $message, array $context = [] ): void;\n</code></pre> Interesting events.</p> <p>Example: User logs in, SQL logs.</p> <p><pre><code>public function log( mixed $level, mixed $message, array $context = [] ): void;\n</code></pre> Logs with an arbitrary level.</p> <p><pre><code>public function notice( mixed $message, array $context = [] ): void;\n</code></pre> Normal but significant events.</p> <p><pre><code>public function removeAdapter( string $name ): Logger;\n</code></pre> Removes an adapter from the stack</p> <p><pre><code>public function setAdapters( array $adapters ): Logger;\n</code></pre> Sets the adapters stack overriding what is already there</p> <p><pre><code>public function setLogLevel( int $level ): Logger;\n</code></pre> Sets the log level above which we can log</p> <p><pre><code>public function warning( mixed $message, array $context = [] ): void;\n</code></pre> Exceptional occurrences that are not errors.</p> <p>Example: Use of deprecated APIs, poor use of an API, undesirable things that are not necessarily wrong.</p> <p><pre><code>protected function addMessage( int $level, string $message, array $context = [] ): bool;\n</code></pre> Adds a message to each handler for processing</p> <p><pre><code>protected function getLevels(): array;\n</code></pre> Returns an array of log levels with integer to string conversion</p>"},{"location":"api/phalcon_logger/#loggeradapterabstractadapter","title":"Logger\\Adapter\\AbstractAdapter","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Logger\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Logger\\Exception</code></li> <li><code>Phalcon\\Logger\\Formatter\\FormatterInterface</code></li> <li><code>Phalcon\\Logger\\Formatter\\Line</code></li> <li><code>Phalcon\\Logger\\Item</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>AdapterInterface</code></li> </ul> </li> </ul>"},{"location":"api/phalcon_logger/#properties_1","title":"Properties","text":"<pre><code>/**\n * Name of the default formatter class\n *\n * @var string\n */\nprotected $defaultFormatter = 'Line';\n\n/**\n * Formatter\n *\n * @var FormatterInterface\n */\nprotected $formatter;\n\n/**\n * Tells if there is an active transaction or not\n *\n * @var bool\n */\nprotected $inTransaction = false;\n\n/**\n * Array with messages queued in the transaction\n *\n * @var array\n */\nprotected $queue;\n</code></pre>"},{"location":"api/phalcon_logger/#methods_1","title":"Methods","text":"<p><pre><code>public function __destruct();\n</code></pre> Destructor cleanup</p> <p><pre><code>public function add( Item $item ): AdapterInterface;\n</code></pre> Adds a message to the queue</p> <p><pre><code>public function begin(): AdapterInterface;\n</code></pre> Starts a transaction</p> <p><pre><code>public function commit(): AdapterInterface;\n</code></pre> Commits the internal transaction</p> <pre><code>public function getFormatter(): FormatterInterface;\n</code></pre> <p><pre><code>public function inTransaction(): bool;\n</code></pre> Returns the whether the logger is currently in an active transaction or not</p> <p><pre><code>abstract public function process( Item $item ): void;\n</code></pre>  Processes the message in the adapter</p> <p><pre><code>public function rollback(): AdapterInterface;\n</code></pre> Rollbacks the internal transaction</p> <p><pre><code>public function setFormatter( FormatterInterface $formatter ): AdapterInterface;\n</code></pre> Sets the message formatter</p>"},{"location":"api/phalcon_logger/#loggeradapteradapterinterface","title":"Logger\\Adapter\\AdapterInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Logger\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Logger\\Formatter\\FormatterInterface</code></li> <li><code>Phalcon\\Logger\\Item</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Logger\\AdapterInterface</p> <p>Interface for Phalcon\\Logger adapters</p>"},{"location":"api/phalcon_logger/#methods_2","title":"Methods","text":"<p><pre><code>public function add( Item $item ): AdapterInterface;\n</code></pre> Adds a message in the queue</p> <p><pre><code>public function begin(): AdapterInterface;\n</code></pre> Starts a transaction</p> <p><pre><code>public function close(): bool;\n</code></pre> Closes the logger</p> <p><pre><code>public function commit(): AdapterInterface;\n</code></pre> Commits the internal transaction</p> <p><pre><code>public function getFormatter(): FormatterInterface;\n</code></pre> Returns the internal formatter</p> <p><pre><code>public function inTransaction(): bool;\n</code></pre> Returns the whether the logger is currently in an active transaction or not</p> <p><pre><code>public function process( Item $item ): void;\n</code></pre> Processes the message in the adapter</p> <p><pre><code>public function rollback(): AdapterInterface;\n</code></pre> Rollbacks the internal transaction</p> <p><pre><code>public function setFormatter( FormatterInterface $formatter ): AdapterInterface;\n</code></pre> Sets the message formatter</p>"},{"location":"api/phalcon_logger/#loggeradapternoop","title":"Logger\\Adapter\\Noop","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Logger\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Logger\\Item</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <pre><code>$logger = new \\Phalcon\\Logger\\Adapter\\Noop();\n\n$logger-&gt;log(\\Phalcon\\Logger::ERROR, \"This is an error\");\n$logger-&gt;error(\"This is another error\");\n\n$logger-&gt;close();\n</code></pre>"},{"location":"api/phalcon_logger/#methods_3","title":"Methods","text":"<p><pre><code>public function close(): bool;\n</code></pre> Closes the stream</p> <p><pre><code>public function process( Item $item ): void;\n</code></pre> Processes the message i.e. writes it to the file</p>"},{"location":"api/phalcon_logger/#loggeradapterstream","title":"Logger\\Adapter\\Stream","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Logger\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Logger\\Adapter</code></li> <li><code>Phalcon\\Logger\\Exception</code></li> <li><code>Phalcon\\Logger\\Formatter\\FormatterInterface</code></li> <li><code>Phalcon\\Logger\\Item</code></li> <li><code>UnexpectedValueException</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Logger\\Adapter\\Stream</p> <p>Adapter to store logs in plain text files</p> <pre><code>$logger = new \\Phalcon\\Logger\\Adapter\\Stream('app/logs/test.log');\n\n$logger-&gt;log('This is a message');\n$logger-&gt;log(\\Phalcon\\Logger::ERROR, 'This is an error');\n$logger-&gt;error('This is another error');\n\n$logger-&gt;close();\n</code></pre>"},{"location":"api/phalcon_logger/#properties_2","title":"Properties","text":"<pre><code>/**\n * Stream handler resource\n *\n * @var resource|null\n */\nprotected $handler;\n\n/**\n * The file open mode. Defaults to \"ab\"\n *\n * @var string\n */\nprotected $mode = ab;\n\n/**\n * Stream name\n *\n * @var string\n */\nprotected $name;\n\n/**\n * Path options\n *\n * @var array\n */\nprotected $options;\n</code></pre>"},{"location":"api/phalcon_logger/#methods_4","title":"Methods","text":"<p><pre><code>public function __construct( string $name, array $options = [] );\n</code></pre> Constructor. Accepts the name and some options</p> <p><pre><code>public function close(): bool;\n</code></pre> Closes the stream</p> <pre><code>public function getName(): string\n</code></pre> <p><pre><code>public function process( Item $item ): void;\n</code></pre> Processes the message i.e. writes it to the file</p>"},{"location":"api/phalcon_logger/#loggeradaptersyslog","title":"Logger\\Adapter\\Syslog","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Logger\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>LogicException</code></li> <li><code>Phalcon\\Helper\\Arr</code></li> <li><code>Phalcon\\Logger</code></li> <li><code>Phalcon\\Logger\\Adapter</code></li> <li><code>Phalcon\\Logger\\Exception</code></li> <li><code>Phalcon\\Logger\\Formatter\\FormatterInterface</code></li> <li><code>Phalcon\\Logger\\Item</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Syslog</p> <p>Sends logs to the system logger</p> <pre><code>use Phalcon\\Logger;\nuse Phalcon\\Logger\\Adapter\\Syslog;\n\n// LOG_USER is the only valid log type under Windows operating systems\n$logger = new Syslog(\n    \"ident\",\n    [\n        \"option\"   =&gt; LOG_CONS | LOG_NDELAY | LOG_PID,\n        \"facility\" =&gt; LOG_USER,\n    ]\n);\n\n$logger-&gt;log(\"This is a message\");\n$logger-&gt;log(Logger::ERROR, \"This is an error\");\n$logger-&gt;error(\"This is another error\");\n</code></pre>"},{"location":"api/phalcon_logger/#properties_3","title":"Properties","text":"<pre><code>/**\n * Name of the default formatter class\n *\n * @var string\n */\nprotected $defaultFormatter = Line;\n\n/**\n * @var int\n */\nprotected $facility = 0;\n\n/**\n * @var string\n */\nprotected $name = '';\n\n/**\n * @var bool\n */\nprotected $opened = false;\n\n/**\n * @var int\n */\nprotected $option = 0;\n</code></pre>"},{"location":"api/phalcon_logger/#methods_5","title":"Methods","text":"<p><pre><code>public function __construct( string $name, array $options = [] );\n</code></pre> Phalcon\\Logger\\Adapter\\Syslog constructor</p> <p><pre><code>public function close(): bool;\n</code></pre>  Closes the logger</p> <p><pre><code>public function process( Item $item ): void;\n</code></pre> Processes the message i.e. writes it to the syslog</p>"},{"location":"api/phalcon_logger/#loggeradapterfactory","title":"Logger\\AdapterFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Logger</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Factory\\AbstractFactory</code></li> <li><code>Phalcon\\Logger\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Logger\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFactory</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Factory used to create adapters used for Logging</p>"},{"location":"api/phalcon_logger/#methods_6","title":"Methods","text":"<p><pre><code>public function __construct( array $services = [] );\n</code></pre> AdapterFactory constructor.</p> <p><pre><code>public function newInstance( string $name, string $fileName, array $options = [] ): AdapterInterface;\n</code></pre> Create a new instance of the adapter</p> <pre><code>protected function getAdapters(): array;\n</code></pre>"},{"location":"api/phalcon_logger/#loggerexception","title":"Logger\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Logger</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Logger\\Exception</p> <p>Exceptions thrown in Phalcon\\Logger will use this class</p>"},{"location":"api/phalcon_logger/#loggerformatterabstractformatter","title":"Logger\\Formatter\\AbstractFormatter","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Logger\\Formatter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>DateTimeImmutable</code></li> <li><code>DateTimeZone</code></li> <li><code>Phalcon\\Logger</code></li> <li><code>Phalcon\\Logger\\Item</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>FormatterInterface</code></li> </ul> </li> </ul> <p>Class AbstractFormatter</p>"},{"location":"api/phalcon_logger/#properties_4","title":"Properties","text":"<pre><code>/**\n * Default date format\n *\n * @var string\n */\nprotected $dateFormat;\n</code></pre>"},{"location":"api/phalcon_logger/#methods_7","title":"Methods","text":"<pre><code>public function getDateFormat(): string\n</code></pre> <p><pre><code>public function interpolate( string $message, mixed $context = null );\n</code></pre> Interpolates context values into the message placeholders</p> <p>@see https://www.php-fig.org/psr/psr-3/ Section 1.2 Message</p> <pre><code>public function setDateFormat( string $dateFormat )\n</code></pre> <p><pre><code>protected function getFormattedDate(): string;\n</code></pre> Returns the date formatted for the logger. @todo Not using the set time from the Item since we have interface misalignment which will break semver This will change in the future</p>"},{"location":"api/phalcon_logger/#loggerformatterformatterinterface","title":"Logger\\Formatter\\FormatterInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Logger\\Formatter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Logger\\Item</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This interface must be implemented by formatters in Phalcon\\Logger</p>"},{"location":"api/phalcon_logger/#methods_8","title":"Methods","text":"<p><pre><code>public function format( Item $item ): string | array;\n</code></pre> Applies a format to an item</p>"},{"location":"api/phalcon_logger/#loggerformatterjson","title":"Logger\\Formatter\\Json","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Logger\\Formatter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Helper\\Json</code></li> <li><code>Phalcon\\Logger\\Item</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFormatter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Formats messages using JSON encoding</p>"},{"location":"api/phalcon_logger/#methods_9","title":"Methods","text":"<p><pre><code>public function __construct( string $dateFormat = string );\n</code></pre> Phalcon\\Logger\\Formatter\\Json construct</p> <p><pre><code>public function format( Item $item ): string;\n</code></pre> Applies a format to a message before sent it to the internal log</p>"},{"location":"api/phalcon_logger/#loggerformatterline","title":"Logger\\Formatter\\Line","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Logger\\Formatter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>DateTime</code></li> <li><code>Phalcon\\Logger\\Item</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFormatter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Formats messages using a one-line string</p>"},{"location":"api/phalcon_logger/#properties_5","title":"Properties","text":"<pre><code>/**\n * Format applied to each message\n *\n * @var string\n */\nprotected $format;\n</code></pre>"},{"location":"api/phalcon_logger/#methods_10","title":"Methods","text":"<p><pre><code>public function __construct( string $format = string, string $dateFormat = string );\n</code></pre> Phalcon\\Logger\\Formatter\\Line construct</p> <p><pre><code>public function format( Item $item ): string;\n</code></pre> Applies a format to a message before sent it to the internal log</p> <pre><code>public function getFormat(): string\n</code></pre> <pre><code>public function setFormat( string $format )\n</code></pre>"},{"location":"api/phalcon_logger/#loggeritem","title":"Logger\\Item","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Logger</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Logger\\Item</p> <p>Represents each item in a logging transaction</p>"},{"location":"api/phalcon_logger/#properties_6","title":"Properties","text":"<pre><code>/**\n * Log Context\n *      \n * @var mixed\n */\nprotected $context;\n\n/**\n * Log message\n *\n * @var string\n */\nprotected $message;\n\n/**\n * Log message\n *\n * @var string\n */\nprotected $name;\n\n/**\n * Log timestamp\n *\n * @var integer\n */\nprotected $time;\n\n/**\n * Log type\n *\n * @var integer\n */\nprotected $type;\n</code></pre>"},{"location":"api/phalcon_logger/#methods_11","title":"Methods","text":"<p><pre><code>public function __construct( string $message, string $name, int $type, int $time = int, mixed $context = [] );\n</code></pre> Phalcon\\Logger\\Item constructor @todo Remove the time or change the signature to an array</p> <pre><code>public function getContext(): mixed\n</code></pre> <pre><code>public function getMessage(): string\n</code></pre> <pre><code>public function getName(): string\n</code></pre> <pre><code>public function getTime(): integer\n</code></pre> <pre><code>public function getType(): integer\n</code></pre>"},{"location":"api/phalcon_logger/#loggerloggerfactory","title":"Logger\\LoggerFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Logger</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Config</code></li> <li><code>Phalcon\\Config\\ConfigInterface</code></li> <li><code>Phalcon\\Helper\\Arr</code></li> <li><code>Phalcon\\Logger</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Factory creating logger objects</p>"},{"location":"api/phalcon_logger/#properties_7","title":"Properties","text":"<pre><code>/**\n * @var AdapterFactory\n */\nprivate adapterFactory;\n</code></pre>"},{"location":"api/phalcon_logger/#methods_12","title":"Methods","text":"<pre><code>public function __construct( AdapterFactory $factory );\n</code></pre> <p><pre><code>public function load( mixed $config ): Logger;\n</code></pre> Factory to create an instance from a Config object</p> <p><pre><code>public function newInstance( string $name, array $adapters = [] ): Logger;\n</code></pre> Returns a Logger object</p>"},{"location":"api/phalcon_messages/","title":"Phalcon messages","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_messages/#messagesexception","title":"Messages\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Messages</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Messages* classes will use this class</p>"},{"location":"api/phalcon_messages/#messagesmessage","title":"Messages\\Message","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Messages</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>JsonSerializable</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>JsonSerializable</code></li> <li><code>MessageInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Messages\\Message</p> <p>Stores a message from various components</p>"},{"location":"api/phalcon_messages/#properties","title":"Properties","text":"<pre><code>/**\n * @var int\n */\nprotected $code;\n\n/**\n * @var string\n */\nprotected $field;\n\n/**\n * @var string\n */\nprotected $message;\n\n/**\n * @var string\n */\nprotected $type;\n\n/**\n * @var array\n */\nprotected $metaData;\n</code></pre>"},{"location":"api/phalcon_messages/#methods","title":"Methods","text":"<p><pre><code>public function __construct( string $message, mixed $field = string, string $type = string, int $code = int, array $metaData = [] );\n</code></pre> Phalcon\\Messages\\Message constructor</p> <p><pre><code>public function __toString(): string;\n</code></pre> Magic __toString method returns verbose message</p> <pre><code>public function getCode(): int;\n</code></pre> <pre><code>public function getField(): string;\n</code></pre> <pre><code>public function getMessage(): string;\n</code></pre> <pre><code>public function getMetaData(): array;\n</code></pre> <pre><code>public function getType(): string;\n</code></pre> <p><pre><code>public function jsonSerialize(): array;\n</code></pre> Serializes the object for json_encode</p> <p><pre><code>public function setCode( int $code ): MessageInterface;\n</code></pre> Sets code for the message</p> <p><pre><code>public function setField( mixed $field ): MessageInterface;\n</code></pre> Sets field name related to message</p> <p><pre><code>public function setMessage( string $message ): MessageInterface;\n</code></pre> Sets verbose message</p> <p><pre><code>public function setMetaData( array $metaData ): MessageInterface;\n</code></pre> Sets message metadata</p> <p><pre><code>public function setType( string $type ): MessageInterface;\n</code></pre> Sets message type</p>"},{"location":"api/phalcon_messages/#messagesmessageinterface","title":"Messages\\MessageInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Messages</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Messages\\MessageInterface</p> <p>Interface for Phalcon\\Messages\\MessageInterface</p>"},{"location":"api/phalcon_messages/#methods_1","title":"Methods","text":"<p><pre><code>public function __toString(): string;\n</code></pre> Magic __toString method returns verbose message</p> <p><pre><code>public function getCode();\n</code></pre> Returns the message code related to this message</p> <p><pre><code>public function getField();\n</code></pre> Returns field name related to message</p> <p><pre><code>public function getMessage(): string;\n</code></pre> Returns verbose message</p> <p><pre><code>public function getMetaData(): array;\n</code></pre> Returns message metadata</p> <p><pre><code>public function getType(): string;\n</code></pre> Returns message type</p> <p><pre><code>public function setCode( int $code ): MessageInterface;\n</code></pre> Sets code for the message</p> <p><pre><code>public function setField( string $field ): MessageInterface;\n</code></pre> Sets field name related to message</p> <p><pre><code>public function setMessage( string $message ): MessageInterface;\n</code></pre> Sets verbose message</p> <p><pre><code>public function setMetaData( array $metaData ): MessageInterface;\n</code></pre> Sets message metadata</p> <p><pre><code>public function setType( string $type ): MessageInterface;\n</code></pre> Sets message type</p>"},{"location":"api/phalcon_messages/#messagesmessages","title":"Messages\\Messages","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Messages</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>ArrayAccess</code></li> <li><code>Countable</code></li> <li><code>Iterator</code></li> <li><code>JsonSerializable</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>ArrayAccess</code></li> <li><code>Countable</code></li> <li><code>Iterator</code></li> <li><code>JsonSerializable</code></li> </ul> </li> </ul> <p>Represents a collection of messages</p>"},{"location":"api/phalcon_messages/#properties_1","title":"Properties","text":"<pre><code>/**\n * @var int\n */\nprotected $position = 0;\n\n/**\n * @var array\n */\nprotected $messages;\n</code></pre>"},{"location":"api/phalcon_messages/#methods_2","title":"Methods","text":"<p><pre><code>public function __construct( array $messages = [] );\n</code></pre> Phalcon\\Messages\\Messages constructor</p> <p><pre><code>public function appendMessage( MessageInterface $message );\n</code></pre> Appends a message to the collection</p> <pre><code>$messages-&gt;appendMessage(\n    new \\Phalcon\\Messages\\Message(\"This is a message\")\n);\n</code></pre> <p><pre><code>public function appendMessages( mixed $messages );\n</code></pre> Appends an array of messages to the collection</p> <pre><code>$messages-&gt;appendMessages($messagesArray);\n</code></pre> <p><pre><code>public function count(): int;\n</code></pre> Returns the number of messages in the list</p> <p><pre><code>public function current(): MessageInterface;\n</code></pre> Returns the current message in the iterator</p> <p><pre><code>public function filter( string $fieldName ): array;\n</code></pre> Filters the message collection by field name</p> <p><pre><code>public function jsonSerialize(): array;\n</code></pre> Returns serialised message objects as array for json_encode. Calls jsonSerialize on each object if present</p> <pre><code>$data = $messages-&gt;jsonSerialize();\necho json_encode($data);\n</code></pre> <p><pre><code>public function key(): int;\n</code></pre> Returns the current position/key in the iterator</p> <p><pre><code>public function next(): void;\n</code></pre> Moves the internal iteration pointer to the next position</p> <p><pre><code>public function offsetExists( mixed $index ): bool;\n</code></pre> Checks if an index exists</p> <pre><code>var_dump(\n    isset($message[\"database\"])\n);\n</code></pre> <p><pre><code>public function offsetGet( mixed $index ): mixed;\n</code></pre> Gets an attribute a message using the array syntax</p> <pre><code>print_r(\n    $messages[0]\n);\n</code></pre> <p><pre><code>public function offsetSet( mixed $index, mixed $message ): void;\n</code></pre> Sets an attribute using the array-syntax</p> <pre><code>$messages[0] = new \\Phalcon\\Messages\\Message(\"This is a message\");\n</code></pre> <p><pre><code>public function offsetUnset( mixed $index ): void;\n</code></pre> Removes a message from the list</p> <pre><code>unset($message[\"database\"]);\n</code></pre> <p><pre><code>public function rewind(): void;\n</code></pre> Rewinds the internal iterator</p> <p><pre><code>public function valid(): bool;\n</code></pre> Check if the current message in the iterator is valid</p>"},{"location":"api/phalcon_mvc/","title":"Phalcon mvc","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_mvc/#mvcapplication","title":"Mvc\\Application","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Closure</code></li> <li><code>Phalcon\\Application\\AbstractApplication</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Events\\ManagerInterface</code></li> <li><code>Phalcon\\Http\\ResponseInterface</code></li> <li><code>Phalcon\\Mvc\\Application\\Exception</code></li> <li><code>Phalcon\\Mvc\\ModuleDefinitionInterface</code></li> <li><code>Phalcon\\Mvc\\Router\\RouteInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractApplication</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Application</p> <p>This component encapsulates all the complex operations behind instantiating every component needed and integrating it with the rest to allow the MVC pattern to operate as desired.</p> <pre><code>use Phalcon\\Mvc\\Application;\n\nclass MyApp extends Application\n{\n    // Register the services here to make them general or register\n    // in the ModuleDefinition to make them module-specific\n    //\n    protected function registerServices()\n    {\n\n    }\n\n    // This method registers all the modules in the application\n    public function main()\n    {\n        $this-&gt;registerModules(\n            [\n                \"frontend\" =&gt; [\n                    \"className\" =&gt; \"Multiple\\\\Frontend\\\\Module\",\n                    \"path\"      =&gt; \"../apps/frontend/Module.php\",\n                ],\n                \"backend\" =&gt; [\n                    \"className\" =&gt; \"Multiple\\\\Backend\\\\Module\",\n                    \"path\"      =&gt; \"../apps/backend/Module.php\",\n                ],\n            ]\n        );\n    }\n}\n\n$application = new MyApp();\n\n$application-&gt;main();\n</code></pre>"},{"location":"api/phalcon_mvc/#properties","title":"Properties","text":"<pre><code>//\nprotected $implicitView = true;\n\n//\nprotected $sendCookies = true;\n\n//\nprotected $sendHeaders = true;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods","title":"Methods","text":"<p><pre><code>public function handle( string $uri ): ResponseInterface | bool;\n</code></pre> Handles a MVC request</p> <p><pre><code>public function sendCookiesOnHandleRequest( bool $sendCookies ): Application;\n</code></pre> Enables or disables sending cookies by each request handling</p> <p><pre><code>public function sendHeadersOnHandleRequest( bool $sendHeaders ): Application;\n</code></pre> Enables or disables sending headers by each request handling</p> <p><pre><code>public function useImplicitView( bool $implicitView ): Application;\n</code></pre> By default. The view is implicitly buffering all the output You can full disable the view component using this method</p>"},{"location":"api/phalcon_mvc/#mvcapplicationexception","title":"Mvc\\Application\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Application</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Phalcon\\Application\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Application\\Exception</p> <p>Exceptions thrown in Phalcon\\Mvc\\Application class will use this class</p>"},{"location":"api/phalcon_mvc/#mvccontroller","title":"Mvc\\Controller","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\Injectable</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Injectable</code></p> </li> <li> <p>Implements</p> <ul> <li><code>ControllerInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Controller</p> <p>Every application controller should extend this class that encapsulates all the controller functionality</p> <p>The controllers provide the \u201cflow\u201d between models and views. Controllers are responsible for processing the incoming requests from the web browser, interrogating the models for data, and passing that data on to the views for presentation.</p> <pre><code>&lt;?php\n\nclass PeopleController extends \\Phalcon\\Mvc\\Controller\n{\n    // This action will be executed by default\n    public function indexAction()\n    {\n\n    }\n\n    public function findAction()\n    {\n\n    }\n\n    public function saveAction()\n    {\n        // Forwards flow to the index action\n        return $this-&gt;dispatcher-&gt;forward(\n            [\n                \"controller\" =&gt; \"people\",\n                \"action\"     =&gt; \"index\",\n            ]\n        );\n    }\n}\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_1","title":"Methods","text":"<p><pre><code>final public function __construct();\n</code></pre> Phalcon\\Mvc\\Controller constructor</p>"},{"location":"api/phalcon_mvc/#mvccontrollerbindmodelinterface","title":"Mvc\\Controller\\BindModelInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Controller</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Mvc\\Controller</p>"},{"location":"api/phalcon_mvc/#methods_2","title":"Methods","text":"<p><pre><code>public static function getModelName(): string;\n</code></pre> Return the model name associated with this controller</p>"},{"location":"api/phalcon_mvc/#mvccontrollerinterface","title":"Mvc\\ControllerInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for controller handlers</p>"},{"location":"api/phalcon_mvc/#mvcdispatcher","title":"Mvc\\Dispatcher","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Dispatcher\\AbstractDispatcher</code></li> <li><code>Phalcon\\Events\\ManagerInterface</code></li> <li><code>Phalcon\\Http\\ResponseInterface</code></li> <li><code>Phalcon\\Mvc\\Dispatcher\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>BaseDispatcher</code></p> </li> <li> <p>Implements</p> <ul> <li><code>DispatcherInterface</code></li> </ul> </li> </ul> <p>Dispatching is the process of taking the request object, extracting the module name, controller name, action name, and optional parameters contained in it, and then instantiating a controller and calling an action of that controller.</p> <pre><code>$di = new \\Phalcon\\Di();\n\n$dispatcher = new \\Phalcon\\Mvc\\Dispatcher();\n\n$dispatcher-&gt;setDI($di);\n\n$dispatcher-&gt;setControllerName(\"posts\");\n$dispatcher-&gt;setActionName(\"index\");\n$dispatcher-&gt;setParams([]);\n\n$controller = $dispatcher-&gt;dispatch();\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_1","title":"Properties","text":"<pre><code>//\nprotected $defaultAction = index;\n\n//\nprotected $defaultHandler = index;\n\n//\nprotected $handlerSuffix = Controller;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_3","title":"Methods","text":"<p><pre><code>public function forward( array $forward ): void;\n</code></pre> Forwards the execution flow to another controller/action.</p> <pre><code>use Phalcon\\Events\\Event;\nuse Phalcon\\Mvc\\Dispatcher;\nuse App\\Backend\\Bootstrap as Backend;\nuse App\\Frontend\\Bootstrap as Frontend;\n\n// Registering modules\n$modules = [\n    \"frontend\" =&gt; [\n        \"className\" =&gt; Frontend::class,\n        \"path\"      =&gt; __DIR__ . \"/app/Modules/Frontend/Bootstrap.php\",\n        \"metadata\"  =&gt; [\n            \"controllersNamespace\" =&gt; \"App\\Frontend\\Controllers\",\n        ],\n    ],\n    \"backend\" =&gt; [\n        \"className\" =&gt; Backend::class,\n        \"path\"      =&gt; __DIR__ . \"/app/Modules/Backend/Bootstrap.php\",\n        \"metadata\"  =&gt; [\n            \"controllersNamespace\" =&gt; \"App\\Backend\\Controllers\",\n        ],\n    ],\n];\n\n$application-&gt;registerModules($modules);\n\n// Setting beforeForward listener\n$eventsManager  = $di-&gt;getShared(\"eventsManager\");\n\n$eventsManager-&gt;attach(\n    \"dispatch:beforeForward\",\n    function(Event $event, Dispatcher $dispatcher, array $forward) use ($modules) {\n        $metadata = $modules[$forward[\"module\"]][\"metadata\"];\n\n        $dispatcher-&gt;setModuleName(\n            $forward[\"module\"]\n        );\n\n        $dispatcher-&gt;setNamespaceName(\n            $metadata[\"controllersNamespace\"]\n        );\n    }\n);\n\n// Forward\n$this-&gt;dispatcher-&gt;forward(\n    [\n        \"module\"     =&gt; \"backend\",\n        \"controller\" =&gt; \"posts\",\n        \"action\"     =&gt; \"index\",\n    ]\n);\n</code></pre> <p><pre><code>public function getActiveController(): ControllerInterface;\n</code></pre> Returns the active controller in the dispatcher</p> <p><pre><code>public function getControllerClass(): string;\n</code></pre> Possible controller class name that will be located to dispatch the request</p> <p><pre><code>public function getControllerName(): string;\n</code></pre> Gets last dispatched controller name</p> <p><pre><code>public function getLastController(): ControllerInterface;\n</code></pre> Returns the latest dispatched controller</p> <p><pre><code>public function getPreviousActionName(): string;\n</code></pre> Gets previous dispatched action name</p> <p><pre><code>public function getPreviousControllerName(): string;\n</code></pre> Gets previous dispatched controller name</p> <p><pre><code>public function getPreviousNamespaceName(): string;\n</code></pre> Gets previous dispatched namespace name</p> <p><pre><code>public function setControllerName( string $controllerName );\n</code></pre> Sets the controller name to be dispatched</p> <p><pre><code>public function setControllerSuffix( string $controllerSuffix );\n</code></pre> Sets the default controller suffix</p> <p><pre><code>public function setDefaultController( string $controllerName );\n</code></pre> Sets the default controller name</p> <p><pre><code>protected function handleException( \\Exception $exception );\n</code></pre> Handles a user exception</p> <p><pre><code>protected function throwDispatchException( string $message, int $exceptionCode = int );\n</code></pre> Throws an internal exception</p>"},{"location":"api/phalcon_mvc/#mvcdispatcherexception","title":"Mvc\\Dispatcher\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Dispatcher</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Phalcon\\Dispatcher\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Dispatcher\\Exception</p> <p>Exceptions thrown in Phalcon\\Mvc\\Dispatcher will use this class</p>"},{"location":"api/phalcon_mvc/#mvcdispatcherinterface","title":"Mvc\\DispatcherInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Dispatcher\\DispatcherInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>DispatcherInterfaceBase</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Mvc\\Dispatcher</p>"},{"location":"api/phalcon_mvc/#methods_4","title":"Methods","text":"<p><pre><code>public function getActiveController(): ControllerInterface;\n</code></pre> Returns the active controller in the dispatcher</p> <p><pre><code>public function getControllerName(): string;\n</code></pre> Gets last dispatched controller name</p> <p><pre><code>public function getLastController(): ControllerInterface;\n</code></pre> Returns the latest dispatched controller</p> <p><pre><code>public function setControllerName( string $controllerName );\n</code></pre> Sets the controller name to be dispatched</p> <p><pre><code>public function setControllerSuffix( string $controllerSuffix );\n</code></pre> Sets the default controller suffix</p> <p><pre><code>public function setDefaultController( string $controllerName );\n</code></pre> Sets the default controller name</p>"},{"location":"api/phalcon_mvc/#mvcentityinterface","title":"Mvc\\EntityInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\EntityInterface</p> <p>Interface for Phalcon\\Mvc\\Collection and Phalcon\\Mvc\\Model</p>"},{"location":"api/phalcon_mvc/#methods_5","title":"Methods","text":"<p><pre><code>public function readAttribute( string $attribute ): mixed | null;\n</code></pre> Reads an attribute value by its name</p> <p><pre><code>public function writeAttribute( string $attribute, mixed $value );\n</code></pre> Writes an attribute value by its name</p>"},{"location":"api/phalcon_mvc/#mvcmicro","title":"Mvc\\Micro","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>ArrayAccess</code></li> <li><code>Closure</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Di\\FactoryDefault</code></li> <li><code>Phalcon\\Di\\Injectable</code></li> <li><code>Phalcon\\Di\\ServiceInterface</code></li> <li><code>Phalcon\\Events\\EventsAwareInterface</code></li> <li><code>Phalcon\\Events\\ManagerInterface</code></li> <li><code>Phalcon\\Http\\ResponseInterface</code></li> <li><code>Phalcon\\Mvc\\Micro\\Collection</code></li> <li><code>Phalcon\\Mvc\\Micro\\CollectionInterface</code></li> <li><code>Phalcon\\Mvc\\Micro\\Exception</code></li> <li><code>Phalcon\\Mvc\\Micro\\LazyLoader</code></li> <li><code>Phalcon\\Mvc\\Micro\\MiddlewareInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\BinderInterface</code></li> <li><code>Phalcon\\Mvc\\Router\\RouteInterface</code></li> <li><code>Throwable</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Injectable</code></p> </li> <li> <p>Implements</p> <ul> <li><code>ArrayAccess</code></li> <li><code>EventsAwareInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Micro</p> <p>With Phalcon you can create \"Micro-Framework like\" applications. By doing this, you only need to write a minimal amount of code to create a PHP application. Micro applications are suitable to small applications, APIs and prototypes in a practical way.</p> <pre><code>$app = new \\Phalcon\\Mvc\\Micro();\n\n$app-&gt;get(\n    \"/say/welcome/{name}\",\n    function ($name) {\n        echo \"&lt;h1&gt;Welcome $name!&lt;/h1&gt;\";\n    }\n);\n\n$app-&gt;handle(\"/say/welcome/Phalcon\");\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_2","title":"Properties","text":"<pre><code>//\nprotected $activeHandler;\n\n//\nprotected $afterBindingHandlers;\n\n//\nprotected $afterHandlers;\n\n//\nprotected $beforeHandlers;\n\n//\nprotected $container;\n\n//\nprotected $errorHandler;\n\n//\nprotected $eventsManager;\n\n//\nprotected $finishHandlers;\n\n//\nprotected $handlers;\n\n//\nprotected $modelBinder;\n\n//\nprotected $notFoundHandler;\n\n//\nprotected $responseHandler;\n\n//\nprotected $returnedValue;\n\n//\nprotected $router;\n\n//\nprotected $stopped;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_6","title":"Methods","text":"<p><pre><code>public function __construct( DiInterface $container = null );\n</code></pre> Phalcon\\Mvc\\Micro constructor</p> <p><pre><code>public function after( mixed $handler ): Micro;\n</code></pre> Appends an 'after' middleware to be called after execute the route</p> <p><pre><code>public function afterBinding( mixed $handler ): Micro;\n</code></pre> Appends a afterBinding middleware to be called after model binding</p> <p><pre><code>public function before( mixed $handler ): Micro;\n</code></pre> Appends a before middleware to be called before execute the route</p> <p><pre><code>public function delete( string $routePattern, mixed $handler ): RouteInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is DELETE</p> <p><pre><code>public function error( mixed $handler ): Micro;\n</code></pre> Sets a handler that will be called when an exception is thrown handling the route</p> <p><pre><code>public function finish( mixed $handler ): Micro;\n</code></pre> Appends a 'finish' middleware to be called when the request is finished</p> <p><pre><code>public function get( string $routePattern, mixed $handler ): RouteInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is GET</p> <p><pre><code>public function getActiveHandler();\n</code></pre> Return the handler that will be called for the matched route</p> <p><pre><code>public function getBoundModels(): array;\n</code></pre> Returns bound models from binder instance</p> <p><pre><code>public function getEventsManager(): ManagerInterface | null;\n</code></pre> Returns the internal event manager</p> <p><pre><code>public function getHandlers(): array;\n</code></pre> Returns the internal handlers attached to the application</p> <p><pre><code>public function getModelBinder(): BinderInterface | null;\n</code></pre> Gets model binder</p> <p><pre><code>public function getReturnedValue();\n</code></pre> Returns the value returned by the executed handler</p> <p><pre><code>public function getRouter(): RouterInterface;\n</code></pre> Returns the internal router used by the application</p> <p><pre><code>public function getService( string $serviceName );\n</code></pre> Obtains a service from the DI</p> <p><pre><code>public function getSharedService( string $serviceName );\n</code></pre> Obtains a shared service from the DI</p> <p><pre><code>public function handle( string $uri );\n</code></pre> Handle the whole request</p> <p><pre><code>public function hasService( string $serviceName ): bool;\n</code></pre> Checks if a service is registered in the DI</p> <p><pre><code>public function head( string $routePattern, mixed $handler ): RouteInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is HEAD</p> <p><pre><code>public function map( string $routePattern, mixed $handler ): RouteInterface;\n</code></pre> Maps a route to a handler without any HTTP method constraint</p> <p><pre><code>public function mount( CollectionInterface $collection ): Micro;\n</code></pre> Mounts a collection of handlers</p> <p><pre><code>public function notFound( mixed $handler ): Micro;\n</code></pre> Sets a handler that will be called when the router doesn't match any of the defined routes</p> <p><pre><code>public function offsetExists( mixed $alias ): bool;\n</code></pre> Check if a service is registered in the internal services container using the array syntax</p> <p><pre><code>public function offsetGet( mixed $alias ): mixed;\n</code></pre> Allows to obtain a shared service in the internal services container using the array syntax</p> <pre><code>var_dump(\n    $app[\"request\"]\n);\n</code></pre> <p><pre><code>public function offsetSet( mixed $alias, mixed $definition ): void;\n</code></pre> Allows to register a shared service in the internal services container using the array syntax</p> <pre><code>   $app[\"request\"] = new \\Phalcon\\Http\\Request();\n</code></pre> <p><pre><code>public function offsetUnset( mixed $alias ): void;\n</code></pre> Removes a service from the internal services container using the array syntax</p> <p><pre><code>public function options( string $routePattern, mixed $handler ): RouteInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is OPTIONS</p> <p><pre><code>public function patch( string $routePattern, mixed $handler ): RouteInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is PATCH</p> <p><pre><code>public function post( string $routePattern, mixed $handler ): RouteInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is POST</p> <p><pre><code>public function put( string $routePattern, mixed $handler ): RouteInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is PUT</p> <p><pre><code>public function setActiveHandler( mixed $activeHandler );\n</code></pre> Sets externally the handler that must be called by the matched route</p> <p><pre><code>public function setDI( DiInterface $container ): void;\n</code></pre> Sets the DependencyInjector container</p> <p><pre><code>public function setEventsManager( ManagerInterface $eventsManager ): void;\n</code></pre> Sets the events manager</p> <p><pre><code>public function setModelBinder( BinderInterface $modelBinder, mixed $cache = null ): Micro;\n</code></pre> Sets model binder</p> <pre><code>$micro = new Micro($di);\n\n$micro-&gt;setModelBinder(\n    new Binder(),\n    'cache'\n);\n</code></pre> <p><pre><code>public function setResponseHandler( mixed $handler ): Micro;\n</code></pre> Appends a custom 'response' handler to be called instead of the default response handler</p> <p><pre><code>public function setService( string $serviceName, mixed $definition, bool $shared = bool ): ServiceInterface;\n</code></pre> Sets a service from the DI</p> <p><pre><code>public function stop();\n</code></pre> Stops the middleware execution avoiding than other middlewares be executed</p>"},{"location":"api/phalcon_mvc/#mvcmicrocollection","title":"Mvc\\Micro\\Collection","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Micro</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>CollectionInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Micro\\Collection</p> <p>Groups Micro-Mvc handlers as controllers</p> <pre><code>$app = new \\Phalcon\\Mvc\\Micro();\n\n$collection = new Collection();\n\n$collection-&gt;setHandler(\n    new PostsController()\n);\n\n$collection-&gt;get(\"/posts/edit/{id}\", \"edit\");\n\n$app-&gt;mount($collection);\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_3","title":"Properties","text":"<pre><code>//\nprotected $handler;\n\n//\nprotected $handlers;\n\n//\nprotected $lazy;\n\n//\nprotected $prefix;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_7","title":"Methods","text":"<p><pre><code>public function delete( string $routePattern, mixed $handler, string $name = null ): CollectionInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is DELETE.</p> <p><pre><code>public function get( string $routePattern, mixed $handler, string $name = null ): CollectionInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is GET.</p> <p><pre><code>public function getHandler(): mixed;\n</code></pre> Returns the main handler</p> <p><pre><code>public function getHandlers(): array;\n</code></pre> Returns the registered handlers</p> <p><pre><code>public function getPrefix(): string;\n</code></pre> Returns the collection prefix if any</p> <p><pre><code>public function head( string $routePattern, mixed $handler, string $name = null ): CollectionInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is HEAD.</p> <p><pre><code>public function isLazy(): bool;\n</code></pre> Returns if the main handler must be lazy loaded</p> <p><pre><code>public function map( string $routePattern, mixed $handler, string $name = null ): CollectionInterface;\n</code></pre> Maps a route to a handler.</p> <p><pre><code>public function mapVia( string $routePattern, mixed $handler, mixed $method, string $name = null ): CollectionInterface;\n</code></pre> Maps a route to a handler via methods.</p> <pre><code>$collection-&gt;mapVia(\n    \"/test\",\n    \"indexAction\",\n    [\"POST\", \"GET\"],\n    \"test\"\n);\n</code></pre> <p><pre><code>public function options( string $routePattern, mixed $handler, string $name = null ): CollectionInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is OPTIONS.</p> <p><pre><code>public function patch( string $routePattern, mixed $handler, string $name = null ): CollectionInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is PATCH.</p> <p><pre><code>public function post( string $routePattern, mixed $handler, string $name = null ): CollectionInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is POST.</p> <p><pre><code>public function put( string $routePattern, mixed $handler, string $name = null ): CollectionInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is PUT.</p> <p><pre><code>public function setHandler( mixed $handler, bool $lazy = bool ): CollectionInterface;\n</code></pre> Sets the main handler.</p> <p><pre><code>public function setLazy( bool $lazy ): CollectionInterface;\n</code></pre> Sets if the main handler must be lazy loaded</p> <p><pre><code>public function setPrefix( string $prefix ): CollectionInterface;\n</code></pre> Sets a prefix for all routes added to the collection</p> <p><pre><code>protected function addMap( mixed $method, string $routePattern, mixed $handler, string $name );\n</code></pre> Internal function to add a handler to the group.</p>"},{"location":"api/phalcon_mvc/#mvcmicrocollectioninterface","title":"Mvc\\Micro\\CollectionInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Micro</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Micro\\CollectionInterface</p> <p>Interface for Phalcon\\Mvc\\Micro\\Collection</p>"},{"location":"api/phalcon_mvc/#methods_8","title":"Methods","text":"<p><pre><code>public function delete( string $routePattern, callable $handler, string $name = null ): CollectionInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is DELETE</p> <p><pre><code>public function get( string $routePattern, callable $handler, string $name = null ): CollectionInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is GET</p> <p><pre><code>public function getHandler(): mixed;\n</code></pre> Returns the main handler</p> <p><pre><code>public function getHandlers(): array;\n</code></pre> Returns the registered handlers</p> <p><pre><code>public function getPrefix(): string;\n</code></pre> Returns the collection prefix if any</p> <p><pre><code>public function head( string $routePattern, callable $handler, string $name = null ): CollectionInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is HEAD</p> <p><pre><code>public function isLazy(): bool;\n</code></pre> Returns if the main handler must be lazy loaded</p> <p><pre><code>public function map( string $routePattern, callable $handler, string $name = null ): CollectionInterface;\n</code></pre> Maps a route to a handler</p> <p><pre><code>public function options( string $routePattern, callable $handler, string $name = null ): CollectionInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is OPTIONS</p> <p><pre><code>public function patch( string $routePattern, callable $handler, string $name = null ): CollectionInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is PATCH</p> <p><pre><code>public function post( string $routePattern, callable $handler, string $name = null ): CollectionInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is POST</p> <p><pre><code>public function put( string $routePattern, callable $handler, string $name = null ): CollectionInterface;\n</code></pre> Maps a route to a handler that only matches if the HTTP method is PUT</p> <p><pre><code>public function setHandler( mixed $handler, bool $lazy = bool ): CollectionInterface;\n</code></pre> Sets the main handler</p> <p><pre><code>public function setLazy( bool $lazy ): CollectionInterface;\n</code></pre> Sets if the main handler must be lazy loaded</p> <p><pre><code>public function setPrefix( string $prefix ): CollectionInterface;\n</code></pre> Sets a prefix for all routes added to the collection</p>"},{"location":"api/phalcon_mvc/#mvcmicroexception","title":"Mvc\\Micro\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Micro</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>Phalcon\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Mvc\\Micro will use this class</p>"},{"location":"api/phalcon_mvc/#mvcmicrolazyloader","title":"Mvc\\Micro\\LazyLoader","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Micro</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Mvc\\Model\\BinderInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Micro\\LazyLoader</p> <p>Lazy-Load of handlers for Mvc\\Micro using auto-loading</p>"},{"location":"api/phalcon_mvc/#properties_4","title":"Properties","text":"<pre><code>//\nprotected $handler;\n\n//\nprotected $definition;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_9","title":"Methods","text":"<p><pre><code>public function __construct( string $definition );\n</code></pre> Phalcon\\Mvc\\Micro\\LazyLoader constructor</p> <p><pre><code>public function callMethod( string $method, mixed $arguments, BinderInterface $modelBinder = null );\n</code></pre> Calling __call method</p> <pre><code>public function getDefinition()\n</code></pre> <pre><code>public function getHandler()\n</code></pre>"},{"location":"api/phalcon_mvc/#mvcmicromiddlewareinterface","title":"Mvc\\Micro\\MiddlewareInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Micro</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Mvc\\Micro</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Allows to implement Phalcon\\Mvc\\Micro middleware in classes</p>"},{"location":"api/phalcon_mvc/#methods_10","title":"Methods","text":"<p><pre><code>public function call( Micro $application );\n</code></pre> Calls the middleware</p>"},{"location":"api/phalcon_mvc/#mvcmodel","title":"Mvc\\Model","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>JsonSerializable</code></li> <li><code>Phalcon\\Db\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Db\\Column</code></li> <li><code>Phalcon\\Db\\DialectInterface</code></li> <li><code>Phalcon\\Db\\Enum</code></li> <li><code>Phalcon\\Db\\RawValue</code></li> <li><code>Phalcon\\Di\\AbstractInjectionAware</code></li> <li><code>Phalcon\\Di\\Di</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Events\\ManagerInterface</code></li> <li><code>Phalcon\\Filter\\Validation\\ValidationInterface</code></li> <li><code>Phalcon\\Messages\\Message</code></li> <li><code>Phalcon\\Messages\\MessageInterface</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\BehaviorInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Criteria</code></li> <li><code>Phalcon\\Mvc\\Model\\CriteriaInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Exception</code></li> <li><code>Phalcon\\Mvc\\Model\\ManagerInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\MetaDataInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Query</code></li> <li><code>Phalcon\\Mvc\\Model\\QueryInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Query\\Builder</code></li> <li><code>Phalcon\\Mvc\\Model\\Query\\BuilderInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Relation</code></li> <li><code>Phalcon\\Mvc\\Model\\RelationInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\ResultInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Resultset</code></li> <li><code>Phalcon\\Mvc\\Model\\ResultsetInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\TransactionInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\ValidationFailed</code></li> <li><code>Phalcon\\Collection</code></li> <li><code>Phalcon\\Collection\\CollectionInterface</code></li> <li><code>Serializable</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractInjectionAware</code></p> </li> <li> <p>Implements</p> <ul> <li><code>EntityInterface</code></li> <li><code>JsonSerializable</code></li> <li><code>ModelInterface</code></li> <li><code>ResultInterface</code></li> <li><code>Serializable</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Model</p> <p>Phalcon\\Mvc\\Model connects business objects and database tables to create a persistable domain model where logic and data are presented in one wrapping. It\u2018s an implementation of the object-relational mapping (ORM).</p> <p>A model represents the information (data) of the application and the rules to manipulate that data. Models are primarily used for managing the rules of interaction with a corresponding database table. In most cases, each table in your database will correspond to one model in your application. The bulk of your application's business logic will be concentrated in the models.</p> <p>Phalcon\\Mvc\\Model is the first ORM written in Zephir/C languages for PHP, giving to developers high performance when interacting with databases while is also easy to use.</p> <pre><code>$robot = new Robots();\n\n$robot-&gt;type = \"mechanical\";\n$robot-&gt;name = \"Astro Boy\";\n$robot-&gt;year = 1952;\n\nif ($robot-&gt;save() === false) {\n    echo \"Umh, We can store robots: \";\n\n    $messages = $robot-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo $message;\n    }\n} else {\n    echo \"Great, a new robot was saved successfully!\";\n}\n</code></pre>"},{"location":"api/phalcon_mvc/#constants","title":"Constants","text":"<pre><code>const DIRTY_STATE_DETACHED = 2;\nconst DIRTY_STATE_PERSISTENT = 0;\nconst DIRTY_STATE_TRANSIENT = 1;\nconst OP_CREATE = 1;\nconst OP_DELETE = 3;\nconst OP_NONE = 0;\nconst OP_UPDATE = 2;\nconst TRANSACTION_INDEX = transaction;\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_5","title":"Properties","text":"<pre><code>//\nprotected $dirtyState = 1;\n\n/**\n * @var array\n */\nprotected $dirtyRelated;\n\n/**\n * @var array\n */\nprotected $errorMessages;\n\n//\nprotected $modelsManager;\n\n//\nprotected $modelsMetaData;\n\n/**\n * @var array\n */\nprotected $related;\n\n//\nprotected $operationMade = 0;\n\n/**\n * @var array\n */\nprotected $oldSnapshot;\n\n//\nprotected $skipped;\n\n//\nprotected $snapshot;\n\n//\nprotected $transaction;\n\n//\nprotected $uniqueKey;\n\n//\nprotected $uniqueParams;\n\n//\nprotected $uniqueTypes;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_11","title":"Methods","text":"<p><pre><code>public function __call( string $method, array $arguments );\n</code></pre> Handles method calls when a method is not implemented</p> <p><pre><code>public static function __callStatic( string $method, array $arguments );\n</code></pre> Handles method calls when a static method is not implemented</p> <p><pre><code>final public function __construct( mixed $data = null, DiInterface $container = null, ManagerInterface $modelsManager = null );\n</code></pre> Phalcon\\Mvc\\Model constructor</p> <p><pre><code>public function __get( string $property );\n</code></pre> Magic method to get related records using the relation alias as a property</p> <p><pre><code>public function __isset( string $property ): bool;\n</code></pre> Magic method to check if a property is a valid relation</p> <p><pre><code>public function __set( string $property, mixed $value );\n</code></pre> Magic method to assign values to the the model</p> <p><pre><code>public function addBehavior( BehaviorInterface $behavior ): void;\n</code></pre> Setups a behavior in a model</p> <pre><code>use Phalcon\\Mvc\\Model;\nuse Phalcon\\Mvc\\Model\\Behavior\\Timestampable;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;addBehavior(\n            new Timestampable(\n                [\n                    \"beforeCreate\" =&gt; [\n                        \"field\"  =&gt; \"created_at\",\n                        \"format\" =&gt; \"Y-m-d\",\n                    ],\n                ]\n            )\n        );\n\n        $this-&gt;addBehavior(\n            new Timestampable(\n                [\n                    \"beforeUpdate\" =&gt; [\n                        \"field\"  =&gt; \"updated_at\",\n                        \"format\" =&gt; \"Y-m-d\",\n                    ],\n                ]\n            )\n        );\n    }\n}\n</code></pre> <p><pre><code>public function appendMessage( MessageInterface $message ): ModelInterface;\n</code></pre> Appends a customized message on the validation process</p> <pre><code>use Phalcon\\Mvc\\Model;\nuse Phalcon\\Messages\\Message as Message;\n\nclass Robots extends Model\n{\n    public function beforeSave()\n    {\n        if ($this-&gt;name === \"Peter\") {\n            $message = new Message(\n                \"Sorry, but a robot cannot be named Peter\"\n            );\n\n            $this-&gt;appendMessage($message);\n        }\n    }\n}\n</code></pre> <p><pre><code>public function assign( array $data, mixed $whiteList = null, mixed $dataColumnMap = null ): ModelInterface;\n</code></pre> Assigns values to a model from an array</p> <pre><code>$robot-&gt;assign(\n    [\n        \"type\" =&gt; \"mechanical\",\n        \"name\" =&gt; \"Astro Boy\",\n        \"year\" =&gt; 1952,\n    ]\n);\n\n// Assign by db row, column map needed\n$robot-&gt;assign(\n    $dbRow,\n    [\n        \"db_type\" =&gt; \"type\",\n        \"db_name\" =&gt; \"name\",\n        \"db_year\" =&gt; \"year\",\n    ]\n);\n\n// Allow assign only name and year\n$robot-&gt;assign(\n    $_POST,\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n\n// By default assign method will use setters if exist, you can disable it by using ini_set to directly use properties\n\nini_set(\"phalcon.orm.disable_assign_setters\", true);\n\n$robot-&gt;assign(\n    $_POST,\n    [\n        \"name\",\n        \"year\",\n    ]\n);\n</code></pre> <p><pre><code>public static function average( mixed $parameters = null ): double | ResultsetInterface;\n</code></pre> Returns the average value on a column for a result-set of rows matching the specified conditions.</p> <p>Returned value will be a float for simple queries or a ResultsetInterface instance for when the GROUP condition is used. The results will contain the average of each group.</p> <pre><code>// What's the average price of robots?\n$average = Robots::average(\n    [\n        \"column\" =&gt; \"price\",\n    ]\n);\n\necho \"The average price is \", $average, \"\\n\";\n\n// What's the average price of mechanical robots?\n$average = Robots::average(\n    [\n        \"type = 'mechanical'\",\n        \"column\" =&gt; \"price\",\n    ]\n);\n\necho \"The average price of mechanical robots is \", $average, \"\\n\";\n</code></pre> <p><pre><code>public static function cloneResult( ModelInterface $base, array $data, int $dirtyState = int ): ModelInterface;\n</code></pre> Assigns values to a model from an array returning a new model</p> <pre><code>$robot = Phalcon\\Mvc\\Model::cloneResult(\n    new Robots(),\n    [\n        \"type\" =&gt; \"mechanical\",\n        \"name\" =&gt; \"Astro Boy\",\n        \"year\" =&gt; 1952,\n    ]\n);\n</code></pre> <p><pre><code>public static function cloneResultMap( mixed $base, array $data, mixed $columnMap, int $dirtyState = int, bool $keepSnapshots = null ): ModelInterface;\n</code></pre> Assigns values to a model from an array, returning a new model.</p> <pre><code>$robot = \\Phalcon\\Mvc\\Model::cloneResultMap(\n    new Robots(),\n    [\n        \"type\" =&gt; \"mechanical\",\n        \"name\" =&gt; \"Astro Boy\",\n        \"year\" =&gt; 1952,\n    ]\n);\n</code></pre> <p><pre><code>public static function cloneResultMapHydrate( array $data, mixed $columnMap, int $hydrationMode );\n</code></pre> Returns an hydrated result based on the data and the column map</p> <p><pre><code>public static function count( mixed $parameters = null ): int | ResultsetInterface;\n</code></pre> Counts how many records match the specified conditions.</p> <p>Returns an integer for simple queries or a ResultsetInterface instance for when the GROUP condition is used. The results will contain the count of each group.</p> <pre><code>// How many robots are there?\n$number = Robots::count();\n\necho \"There are \", $number, \"\\n\";\n\n// How many mechanical robots are there?\n$number = Robots::count(\"type = 'mechanical'\");\n\necho \"There are \", $number, \" mechanical robots\\n\";\n</code></pre> <p><pre><code>public function create(): bool;\n</code></pre> Inserts a model instance. If the instance already exists in the persistence it will throw an exception Returning true on success or false otherwise.</p> <pre><code>// Creating a new robot\n$robot = new Robots();\n\n$robot-&gt;type = \"mechanical\";\n$robot-&gt;name = \"Astro Boy\";\n$robot-&gt;year = 1952;\n\n$robot-&gt;create();\n\n// Passing an array to create\n$robot = new Robots();\n\n$robot-&gt;assign(\n    [\n        \"type\" =&gt; \"mechanical\",\n        \"name\" =&gt; \"Astro Boy\",\n        \"year\" =&gt; 1952,\n    ]\n);\n\n$robot-&gt;create();\n</code></pre> <p><pre><code>public function delete(): bool;\n</code></pre> Deletes a model instance. Returning true on success or false otherwise.</p> <pre><code>$robot = Robots::findFirst(\"id=100\");\n\n$robot-&gt;delete();\n\n$robots = Robots::find(\"type = 'mechanical'\");\n\nforeach ($robots as $robot) {\n    $robot-&gt;delete();\n}\n</code></pre> <p><pre><code>public function dump(): array;\n</code></pre> Returns a simple representation of the object that can be used with <code>var_dump()</code></p> <pre><code>var_dump(\n    $robot-&gt;dump()\n);\n</code></pre> <p><pre><code>public static function find( mixed $parameters = null ): ResultsetInterface;\n</code></pre> Query for a set of records that match the specified conditions</p> <pre><code>// How many robots are there?\n$robots = Robots::find();\n\necho \"There are \", count($robots), \"\\n\";\n\n// How many mechanical robots are there?\n$robots = Robots::find(\n    \"type = 'mechanical'\"\n);\n\necho \"There are \", count($robots), \"\\n\";\n\n// Get and print virtual robots ordered by name\n$robots = Robots::find(\n    [\n        \"type = 'virtual'\",\n        \"order\" =&gt; \"name\",\n    ]\n);\n\nforeach ($robots as $robot) {\n    echo $robot-&gt;name, \"\\n\";\n}\n\n// Get first 100 virtual robots ordered by name\n$robots = Robots::find(\n    [\n        \"type = 'virtual'\",\n        \"order\" =&gt; \"name\",\n        \"limit\" =&gt; 100,\n    ]\n);\n\nforeach ($robots as $robot) {\n    echo $robot-&gt;name, \"\\n\";\n}\n\n// encapsulate find it into an running transaction esp. useful for application unit-tests\n// or complex business logic where we wanna control which transactions are used.\n\n$myTransaction = new Transaction(\\Phalcon\\Di::getDefault());\n$myTransaction-&gt;begin();\n\n$newRobot = new Robot();\n$newRobot-&gt;setTransaction($myTransaction);\n\n$newRobot-&gt;assign(\n    [\n        'name' =&gt; 'test',\n        'type' =&gt; 'mechanical',\n        'year' =&gt; 1944,\n    ]\n);\n\n$newRobot-&gt;save();\n\n$resultInsideTransaction = Robot::find(\n    [\n        'name' =&gt; 'test',\n        Model::TRANSACTION_INDEX =&gt; $myTransaction,\n    ]\n);\n\n$resultOutsideTransaction = Robot::find(['name' =&gt; 'test']);\n\nforeach ($setInsideTransaction as $robot) {\n    echo $robot-&gt;name, \"\\n\";\n}\n\nforeach ($setOutsideTransaction as $robot) {\n    echo $robot-&gt;name, \"\\n\";\n}\n\n// reverts all not commited changes\n$myTransaction-&gt;rollback();\n\n// creating two different transactions\n$myTransaction1 = new Transaction(\\Phalcon\\Di::getDefault());\n$myTransaction1-&gt;begin();\n$myTransaction2 = new Transaction(\\Phalcon\\Di::getDefault());\n$myTransaction2-&gt;begin();\n\n // add a new robots\n$firstNewRobot = new Robot();\n$firstNewRobot-&gt;setTransaction($myTransaction1);\n$firstNewRobot-&gt;assign(\n    [\n        'name' =&gt; 'first-transaction-robot',\n        'type' =&gt; 'mechanical',\n        'year' =&gt; 1944,\n    ]\n);\n$firstNewRobot-&gt;save();\n\n$secondNewRobot = new Robot();\n$secondNewRobot-&gt;setTransaction($myTransaction2);\n$secondNewRobot-&gt;assign(\n    [\n        'name' =&gt; 'second-transaction-robot',\n        'type' =&gt; 'fictional',\n        'year' =&gt; 1984,\n    ]\n);\n$secondNewRobot-&gt;save();\n\n// this transaction will find the robot.\n$resultInFirstTransaction = Robot::find(\n    [\n        'name'                   =&gt; 'first-transaction-robot',\n        Model::TRANSACTION_INDEX =&gt; $myTransaction1,\n    ]\n);\n\n// this transaction won't find the robot.\n$resultInSecondTransaction = Robot::find(\n    [\n        'name'                   =&gt; 'first-transaction-robot',\n        Model::TRANSACTION_INDEX =&gt; $myTransaction2,\n    ]\n);\n\n// this transaction won't find the robot.\n$resultOutsideAnyExplicitTransaction = Robot::find(\n    [\n        'name' =&gt; 'first-transaction-robot',\n    ]\n);\n\n// this transaction won't find the robot.\n$resultInFirstTransaction = Robot::find(\n    [\n        'name'                   =&gt; 'second-transaction-robot',\n        Model::TRANSACTION_INDEX =&gt; $myTransaction2,\n    ]\n);\n\n// this transaction will find the robot.\n$resultInSecondTransaction = Robot::find(\n    [\n        'name'                   =&gt; 'second-transaction-robot',\n        Model::TRANSACTION_INDEX =&gt; $myTransaction1,\n    ]\n);\n\n// this transaction won't find the robot.\n$resultOutsideAnyExplicitTransaction = Robot::find(\n    [\n        'name' =&gt; 'second-transaction-robot',\n    ]\n);\n\n$transaction1-&gt;rollback();\n$transaction2-&gt;rollback();\n</code></pre> <p><pre><code>public static function findFirst( mixed $parameters = null ): ModelInterface | null;\n</code></pre> Query the first record that matches the specified conditions</p> <pre><code>// What's the first robot in robots table?\n$robot = Robots::findFirst();\n\necho \"The robot name is \", $robot-&gt;name;\n\n// What's the first mechanical robot in robots table?\n$robot = Robots::findFirst(\n    \"type = 'mechanical'\"\n);\n\necho \"The first mechanical robot name is \", $robot-&gt;name;\n\n// Get first virtual robot ordered by name\n$robot = Robots::findFirst(\n    [\n        \"type = 'virtual'\",\n        \"order\" =&gt; \"name\",\n    ]\n);\n\necho \"The first virtual robot name is \", $robot-&gt;name;\n\n// behaviour with transaction\n$myTransaction = new Transaction(\\Phalcon\\Di::getDefault());\n$myTransaction-&gt;begin();\n\n$newRobot = new Robot();\n$newRobot-&gt;setTransaction($myTransaction);\n$newRobot-&gt;assign(\n    [\n        'name' =&gt; 'test',\n        'type' =&gt; 'mechanical',\n        'year' =&gt; 1944,\n    ]\n);\n$newRobot-&gt;save();\n\n$findsARobot = Robot::findFirst(\n    [\n        'name'                   =&gt; 'test',\n        Model::TRANSACTION_INDEX =&gt; $myTransaction,\n    ]\n);\n\n$doesNotFindARobot = Robot::findFirst(\n    [\n        'name' =&gt; 'test',\n    ]\n);\n\nvar_dump($findARobot);\nvar_dump($doesNotFindARobot);\n\n$transaction-&gt;commit();\n\n$doesFindTheRobotNow = Robot::findFirst(\n    [\n        'name' =&gt; 'test',\n    ]\n);\n</code></pre> <p><pre><code>public function fireEvent( string $eventName ): bool;\n</code></pre> Fires an event, implicitly calls behaviors and listeners in the events manager are notified</p> <p><pre><code>public function fireEventCancel( string $eventName ): bool;\n</code></pre> Fires an event, implicitly calls behaviors and listeners in the events manager are notified This method stops if one of the callbacks/listeners returns bool false</p> <p><pre><code>public function getChangedFields(): array;\n</code></pre> Returns a list of changed values.</p> <pre><code>$robots = Robots::findFirst();\nprint_r($robots-&gt;getChangedFields()); // []\n\n$robots-&gt;deleted = 'Y';\n\n$robots-&gt;getChangedFields();\nprint_r($robots-&gt;getChangedFields()); // [\"deleted\"]\n</code></pre> <p><pre><code>public function getDirtyState(): int;\n</code></pre> Returns one of the DIRTY_STATE_* constants telling if the record exists in the database or not</p> <p><pre><code>public function getEventsManager(): EventsManagerInterface | null;\n</code></pre> Returns the custom events manager or null if there is no custom events manager</p> <p><pre><code>public function getMessages( mixed $filter = null ): MessageInterface[];\n</code></pre> Returns array of validation messages</p> <pre><code>$robot = new Robots();\n\n$robot-&gt;type = \"mechanical\";\n$robot-&gt;name = \"Astro Boy\";\n$robot-&gt;year = 1952;\n\nif ($robot-&gt;save() === false) {\n    echo \"Umh, We can't store robots right now \";\n\n    $messages = $robot-&gt;getMessages();\n\n    foreach ($messages as $message) {\n        echo $message;\n    }\n} else {\n    echo \"Great, a new robot was saved successfully!\";\n}\n</code></pre> <p><pre><code>public function getModelsManager(): ManagerInterface;\n</code></pre> Returns the models manager related to the entity instance</p> <p><pre><code>public function getModelsMetaData(): MetaDataInterface;\n</code></pre></p> <p><pre><code>public function getOldSnapshotData(): array;\n</code></pre> Returns the internal old snapshot data</p> <p><pre><code>public function getOperationMade(): int;\n</code></pre> Returns the type of the latest operation performed by the ORM Returns one of the OP_* class constants</p> <p><pre><code>final public function getReadConnection(): AdapterInterface;\n</code></pre> Gets the connection used to read data for the model</p> <p><pre><code>final public function getReadConnectionService(): string;\n</code></pre> Returns the DependencyInjection connection service name used to read data related the model</p> <p><pre><code>public function getRelated( string $alias, mixed $arguments = null );\n</code></pre> Returns related records based on defined relations</p> <p><pre><code>final public function getSchema(): string;\n</code></pre> Returns schema name where the mapped table is located</p> <p><pre><code>public function getSnapshotData(): array;\n</code></pre> Returns the internal snapshot data</p> <p><pre><code>final public function getSource(): string;\n</code></pre> Returns the table name mapped in the model</p> <pre><code>public function getTransaction()\n</code></pre> <p><pre><code>public function getUpdatedFields(): array;\n</code></pre> Returns a list of updated values.</p> <pre><code>$robots = Robots::findFirst();\nprint_r($robots-&gt;getChangedFields()); // []\n\n$robots-&gt;deleted = 'Y';\n\n$robots-&gt;getChangedFields();\nprint_r($robots-&gt;getChangedFields()); // [\"deleted\"]\n$robots-&gt;save();\nprint_r($robots-&gt;getChangedFields()); // []\nprint_r($robots-&gt;getUpdatedFields()); // [\"deleted\"]\n</code></pre> <p><pre><code>final public function getWriteConnection(): AdapterInterface;\n</code></pre> Gets the connection used to write data to the model</p> <p><pre><code>final public function getWriteConnectionService(): string;\n</code></pre> Returns the DependencyInjection connection service name used to write data related to the model</p> <p><pre><code>public function hasChanged( mixed $fieldName = null, bool $allFields = bool ): bool;\n</code></pre> Check if a specific attribute has changed This only works if the model is keeping data snapshots</p> <pre><code>$robot = new Robots();\n\n$robot-&gt;type = \"mechanical\";\n$robot-&gt;name = \"Astro Boy\";\n$robot-&gt;year = 1952;\n\n$robot-&gt;create();\n\n$robot-&gt;type = \"hydraulic\";\n\n$hasChanged = $robot-&gt;hasChanged(\"type\"); // returns true\n$hasChanged = $robot-&gt;hasChanged([\"type\", \"name\"]); // returns true\n$hasChanged = $robot-&gt;hasChanged([\"type\", \"name\"], true); // returns false\n</code></pre> <p><pre><code>public function hasSnapshotData(): bool;\n</code></pre> Checks if the object has internal snapshot data</p> <p><pre><code>public function hasUpdated( mixed $fieldName = null, bool $allFields = bool ): bool;\n</code></pre> Check if a specific attribute was updated This only works if the model is keeping data snapshots</p> <p><pre><code>public function isRelationshipLoaded( string $relationshipAlias ): bool;\n</code></pre> Checks if saved related records have already been loaded.</p> <p>Only returns true if the records were previously fetched through the model without any additional parameters.</p> <pre><code>$robot = Robots::findFirst();\nvar_dump($robot-&gt;isRelationshipLoaded('robotsParts')); // false\n\n$robotsParts = $robot-&gt;getRobotsParts(['id &gt; 0']);\nvar_dump($robot-&gt;isRelationshipLoaded('robotsParts')); // false\n\n$robotsParts = $robot-&gt;getRobotsParts(); // or $robot-&gt;robotsParts\nvar_dump($robot-&gt;isRelationshipLoaded('robotsParts')); // true\n\n$robot-&gt;robotsParts = [new RobotsParts()];\nvar_dump($robot-&gt;isRelationshipLoaded('robotsParts')); // false\n</code></pre> <p><pre><code>public function jsonSerialize(): array;\n</code></pre>    Serializes the object for json_encode</p> <pre><code>echo json_encode($robot);\n</code></pre> <p><pre><code>public static function maximum( mixed $parameters = null ): mixed;\n</code></pre> Returns the maximum value of a column for a result-set of rows that match the specified conditions</p> <pre><code>// What is the maximum robot id?\n$id = Robots::maximum(\n    [\n        \"column\" =&gt; \"id\",\n    ]\n);\n\necho \"The maximum robot id is: \", $id, \"\\n\";\n\n// What is the maximum id of mechanical robots?\n$sum = Robots::maximum(\n    [\n        \"type = 'mechanical'\",\n        \"column\" =&gt; \"id\",\n    ]\n);\n\necho \"The maximum robot id of mechanical robots is \", $id, \"\\n\";\n</code></pre> <p><pre><code>public static function minimum( mixed $parameters = null ): mixed;\n</code></pre> Returns the minimum value of a column for a result-set of rows that match the specified conditions</p> <pre><code>// What is the minimum robot id?\n$id = Robots::minimum(\n    [\n        \"column\" =&gt; \"id\",\n    ]\n);\n\necho \"The minimum robot id is: \", $id;\n\n// What is the minimum id of mechanical robots?\n$sum = Robots::minimum(\n    [\n        \"type = 'mechanical'\",\n        \"column\" =&gt; \"id\",\n    ]\n);\n\necho \"The minimum robot id of mechanical robots is \", $id;\n</code></pre> <p><pre><code>public static function query( DiInterface $container = null ): CriteriaInterface;\n</code></pre> Create a criteria for a specific model</p> <p><pre><code>public function readAttribute( string $attribute ): mixed | null;\n</code></pre> Reads an attribute value by its name</p> <pre><code>echo $robot-&gt;readAttribute(\"name\");\n</code></pre> <p><pre><code>public function refresh(): ModelInterface;\n</code></pre> Refreshes the model attributes re-querying the record from the database</p> <p><pre><code>public function save(): bool;\n</code></pre> Inserts or updates a model instance. Returning true on success or false otherwise.</p> <pre><code>// Creating a new robot\n$robot = new Robots();\n\n$robot-&gt;type = \"mechanical\";\n$robot-&gt;name = \"Astro Boy\";\n$robot-&gt;year = 1952;\n\n$robot-&gt;save();\n\n// Updating a robot name\n$robot = Robots::findFirst(\"id = 100\");\n\n$robot-&gt;name = \"Biomass\";\n\n$robot-&gt;save();\n</code></pre> <p><pre><code>public function serialize(): string;\n</code></pre> Serializes the object ignoring connections, services, related objects or static properties</p> <p><pre><code>final public function setConnectionService( string $connectionService ): void;\n</code></pre> Sets the DependencyInjection connection service name</p> <p><pre><code>public function setDirtyState( int $dirtyState ): ModelInterface | bool;\n</code></pre> Sets the dirty state of the object using one of the DIRTY_STATE_* constants</p> <p><pre><code>public function setEventsManager( EventsManagerInterface $eventsManager );\n</code></pre> Sets a custom events manager</p> <p><pre><code>public function setOldSnapshotData( array $data, mixed $columnMap = null );\n</code></pre> Sets the record's old snapshot data. This method is used internally to set old snapshot data when the model was set up to keep snapshot data</p> <p><pre><code>final public function setReadConnectionService( string $connectionService ): void;\n</code></pre> Sets the DependencyInjection connection service name used to read data</p> <p><pre><code>public function setSnapshotData( array $data, mixed $columnMap = null ): void;\n</code></pre> Sets the record's snapshot data. This method is used internally to set snapshot data when the model was set up to keep snapshot data</p> <p><pre><code>public function setTransaction( TransactionInterface $transaction ): ModelInterface;\n</code></pre> Sets a transaction related to the Model instance</p> <pre><code>use Phalcon\\Mvc\\Model\\Transaction\\Manager as TxManager;\nuse Phalcon\\Mvc\\Model\\Transaction\\Failed as TxFailed;\n\ntry {\n    $txManager = new TxManager();\n\n    $transaction = $txManager-&gt;get();\n\n    $robot = new Robots();\n\n    $robot-&gt;setTransaction($transaction);\n\n    $robot-&gt;name       = \"WALL\u00b7E\";\n    $robot-&gt;created_at = date(\"Y-m-d\");\n\n    if ($robot-&gt;save() === false) {\n        $transaction-&gt;rollback(\"Can't save robot\");\n    }\n\n    $robotPart = new RobotParts();\n\n    $robotPart-&gt;setTransaction($transaction);\n\n    $robotPart-&gt;type = \"head\";\n\n    if ($robotPart-&gt;save() === false) {\n        $transaction-&gt;rollback(\"Robot part cannot be saved\");\n    }\n\n    $transaction-&gt;commit();\n} catch (TxFailed $e) {\n    echo \"Failed, reason: \", $e-&gt;getMessage();\n}\n</code></pre> <p><pre><code>final public function setWriteConnectionService( string $connectionService ): void;\n</code></pre> Sets the DependencyInjection connection service name used to write data</p> <p><pre><code>public static function setup( array $options ): void;\n</code></pre> Enables/disables options in the ORM</p> <p><pre><code>public function skipOperation( bool $skip ): void;\n</code></pre> Skips the current operation forcing a success state</p> <p><pre><code>public static function sum( mixed $parameters = null ): double | ResultsetInterface;\n</code></pre> Calculates the sum on a column for a result-set of rows that match the specified conditions</p> <pre><code>// How much are all robots?\n$sum = Robots::sum(\n    [\n        \"column\" =&gt; \"price\",\n    ]\n);\n\necho \"The total price of robots is \", $sum, \"\\n\";\n\n// How much are mechanical robots?\n$sum = Robots::sum(\n    [\n        \"type = 'mechanical'\",\n        \"column\" =&gt; \"price\",\n    ]\n);\n\necho \"The total price of mechanical robots is  \", $sum, \"\\n\";\n</code></pre> <p><pre><code>public function toArray( mixed $columns = null ): array;\n</code></pre> Returns the instance as an array representation</p> <pre><code>print_r(\n    $robot-&gt;toArray()\n);\n</code></pre> <p><pre><code>public function unserialize( mixed $data );\n</code></pre> Unserializes the object from a serialized string</p> <p><pre><code>public function update(): bool;\n</code></pre> Updates a model instance. If the instance doesn't exist in the persistence it will throw an exception. Returning true on success or false otherwise.</p> <pre><code>// Updating a robot name\n$robot = Robots::findFirst(\"id = 100\");\n\n$robot-&gt;name = \"Biomass\";\n\n$robot-&gt;update();\n</code></pre> <p><pre><code>public function validationHasFailed(): bool;\n</code></pre> Check whether validation process has generated any messages</p> <pre><code>use Phalcon\\Mvc\\Model;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\ExclusionIn;\n\nclass Subscriptors extends Model\n{\n    public function validation()\n    {\n        $validator = new Validation();\n\n        $validator-&gt;validate(\n            \"status\",\n            new ExclusionIn(\n                [\n                    \"domain\" =&gt; [\n                        \"A\",\n                        \"I\",\n                    ],\n                ]\n            )\n        );\n\n        return $this-&gt;validate($validator);\n    }\n}\n</code></pre> <p><pre><code>public function writeAttribute( string $attribute, mixed $value ): void;\n</code></pre> Writes an attribute value by its name</p> <pre><code>$robot-&gt;writeAttribute(\"name\", \"Rosey\");\n</code></pre> <p><pre><code>protected function _cancelOperation();\n</code></pre> Cancel the current operation</p> <p>@todo Remove in v5.0 @deprecated Use cancelOperation()</p> <p><pre><code>final protected function _checkForeignKeysRestrict(): bool;\n</code></pre> Reads \"belongs to\" relations and check the virtual foreign keys when inserting or updating records to verify that inserted/updated values are present in the related entity</p> <p><pre><code>final protected function _checkForeignKeysReverseCascade(): bool;\n</code></pre> Reads both \"hasMany\" and \"hasOne\" relations and checks the virtual foreign keys (cascade) when deleting records</p> <p><pre><code>final protected function _checkForeignKeysReverseRestrict(): bool;\n</code></pre> Reads both \"hasMany\" and \"hasOne\" relations and checks the virtual foreign keys (restrict) when deleting records</p> <p><pre><code>protected function _doLowInsert( MetaDataInterface $metaData, AdapterInterface $connection, mixed $table, mixed $identityField ): bool;\n</code></pre> Sends a pre-build INSERT SQL statement to the relational database system</p> <p>@todo Remove in v5.0 @deprecated Use doLowInsert()</p> <p><pre><code>protected function _doLowUpdate( MetaDataInterface $metaData, AdapterInterface $connection, mixed $table ): bool;\n</code></pre> Sends a pre-build UPDATE SQL statement to the relational database system</p> <p>@todo Remove in v5.0 @deprecated Use doLowUpdate()</p> <p><pre><code>protected function _exists( MetaDataInterface $metaData, AdapterInterface $connection ): bool;\n</code></pre> Checks whether the current record already exists</p> <p>@todo Remove in v5.0 @deprecated Use exists()</p> <p><pre><code>protected function _getRelatedRecords( string $modelName, string $method, array $arguments );\n</code></pre> Returns related records defined relations depending on the method name. Returns false if the relation is non-existent.</p> <p>@todo Remove in v5.0 @deprecated Use getRelatedRecords()</p> <p><pre><code>protected $static function _groupResult( string $functionName, string $alias, mixed $parameters ): ResultsetInterface;\n</code></pre> Generate a PHQL SELECT statement for an aggregate</p> <p>@todo Remove in v5.0 @deprecated Use groupResult()</p> <p><pre><code>final protected function _possibleSetter( string $property, mixed $value ): bool;\n</code></pre> Check for, and attempt to use, possible setter.</p> <p><pre><code>protected function _postSave( bool $success, bool $exists ): bool;\n</code></pre> Executes internal events after save a record</p> <p>@todo Remove in v5.0 @deprecated Use postSave()</p> <p><pre><code>protected function _postSaveRelatedRecords( AdapterInterface $connection, mixed $related ): bool;\n</code></pre> Save the related records assigned in the has-one/has-many relations</p> <p>@todo Remove in v5.0 @deprecated Use postSaveRelatedRecords()</p> <p><pre><code>protected function _preSave( MetaDataInterface $metaData, bool $exists, mixed $identityField ): bool;\n</code></pre> Executes internal hooks before save a record</p> <p>@todo Remove in v5.0 @deprecated Use preSave()</p> <p><pre><code>protected function _preSaveRelatedRecords( AdapterInterface $connection, mixed $related ): bool;\n</code></pre> Saves related records that must be stored prior to save the master record</p> <p>@todo Remove in v5.0 @deprecated Use preSaveRelatedRecords()</p> <p><pre><code>protected function allowEmptyStringValues( array $attributes ): void;\n</code></pre> Sets a list of attributes that must be skipped from the generated UPDATE statement</p> <pre><code>class Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this-&gt;allowEmptyStringValues(\n            [\n                \"name\",\n            ]\n        );\n    }\n}\n</code></pre> <p><pre><code>protected function belongsTo( mixed $fields, string $referenceModel, mixed $referencedFields, mixed $options = null ): Relation;\n</code></pre> Setup a reverse 1-1 or n-1 relation between two models</p> <pre><code>class RobotsParts extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this-&gt;belongsTo(\n            \"robots_id\",\n            Robots::class,\n            \"id\"\n        );\n    }\n}\n</code></pre> <p><pre><code>protected function cancelOperation();\n</code></pre> Cancel the current operation</p> <p><pre><code>protected function collectRelatedToSave(): array;\n</code></pre> Collects previously queried (belongs-to, has-one and has-one-through) related records along with freshly added one</p> <p><pre><code>protected function doLowInsert( MetaDataInterface $metaData, AdapterInterface $connection, mixed $table, mixed $identityField ): bool;\n</code></pre> Sends a pre-build INSERT SQL statement to the relational database system</p> <p><pre><code>protected function doLowUpdate( MetaDataInterface $metaData, AdapterInterface $connection, mixed $table ): bool;\n</code></pre> Sends a pre-build UPDATE SQL statement to the relational database system</p> <p><pre><code>protected function exists( MetaDataInterface $metaData, AdapterInterface $connection ): bool;\n</code></pre> Checks whether the current record already exists</p> <p><pre><code>protected function getRelatedRecords( string $modelName, string $method, array $arguments );\n</code></pre> Returns related records defined relations depending on the method name. Returns false if the relation is non-existent.</p> <p><pre><code>protected $static function groupResult( string $functionName, string $alias, mixed $parameters ): ResultsetInterface;\n</code></pre> Generate a PHQL SELECT statement for an aggregate</p> <p><pre><code>protected function hasMany( mixed $fields, string $referenceModel, mixed $referencedFields, mixed $options = null ): Relation;\n</code></pre> Setup a 1-n relation between two models</p> <pre><code>class Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this-&gt;hasMany(\n            \"id\",\n            RobotsParts::class,\n            \"robots_id\"\n        );\n    }\n}\n</code></pre> <p><pre><code>protected function hasManyToMany( mixed $fields, string $intermediateModel, mixed $intermediateFields, mixed $intermediateReferencedFields, string $referenceModel, mixed $referencedFields, mixed $options = null ): Relation;\n</code></pre> Setup an n-n relation between two models, through an intermediate relation</p> <pre><code>class Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        // Setup a many-to-many relation to Parts through RobotsParts\n        $this-&gt;hasManyToMany(\n            \"id\",\n            RobotsParts::class,\n            \"robots_id\",\n            \"parts_id\",\n            Parts::class,\n            \"id\",\n        );\n    }\n}\n</code></pre> <p><pre><code>protected function hasOne( mixed $fields, string $referenceModel, mixed $referencedFields, mixed $options = null ): Relation;\n</code></pre> Setup a 1-1 relation between two models</p> <pre><code>class Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this-&gt;hasOne(\n            \"id\",\n            RobotsDescription::class,\n            \"robots_id\"\n        );\n    }\n}\n</code></pre> <p><pre><code>protected function hasOneThrough( mixed $fields, string $intermediateModel, mixed $intermediateFields, mixed $intermediateReferencedFields, string $referenceModel, mixed $referencedFields, mixed $options = null ): Relation;\n</code></pre> Setup a 1-1 relation between two models, through an intermediate relation</p> <pre><code>class Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        // Setup a 1-1 relation to one item from Parts through RobotsParts\n        $this-&gt;hasOneThrough(\n            \"id\",\n            RobotsParts::class,\n            \"robots_id\",\n            \"parts_id\",\n            Parts::class,\n            \"id\",\n        );\n    }\n}\n</code></pre> <p><pre><code>protected function keepSnapshots( bool $keepSnapshot ): void;\n</code></pre> Sets if the model must keep the original record snapshot in memory</p> <pre><code>use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;keepSnapshots(true);\n    }\n}\n</code></pre> <p><pre><code>protected function postSave( bool $success, bool $exists ): bool;\n</code></pre> Executes internal events after save a record</p> <p><pre><code>protected function postSaveRelatedRecords( AdapterInterface $connection, mixed $related ): bool;\n</code></pre> Save the related records assigned in the has-one/has-many relations</p> <p><pre><code>protected function preSave( MetaDataInterface $metaData, bool $exists, mixed $identityField ): bool;\n</code></pre> Executes internal hooks before save a record</p> <p><pre><code>protected function preSaveRelatedRecords( AdapterInterface $connection, mixed $related ): bool;\n</code></pre> Saves related records that must be stored prior to save the master record</p> <p><pre><code>final protected function setSchema( string $schema ): ModelInterface;\n</code></pre> Sets schema name where the mapped table is located</p> <p><pre><code>final protected function setSource( string $source ): ModelInterface;\n</code></pre> Sets the table name to which model should be mapped</p> <p><pre><code>protected function skipAttributes( array $attributes );\n</code></pre> Sets a list of attributes that must be skipped from the generated INSERT/UPDATE statement</p> <pre><code>class Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this-&gt;skipAttributes(\n            [\n                \"price\",\n            ]\n        );\n    }\n}\n</code></pre> <p><pre><code>protected function skipAttributesOnCreate( array $attributes ): void;\n</code></pre> Sets a list of attributes that must be skipped from the generated INSERT statement</p> <pre><code>class Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this-&gt;skipAttributesOnCreate(\n            [\n                \"created_at\",\n            ]\n        );\n    }\n}\n</code></pre> <p><pre><code>protected function skipAttributesOnUpdate( array $attributes ): void;\n</code></pre> Sets a list of attributes that must be skipped from the generated UPDATE statement</p> <pre><code>class Robots extends \\Phalcon\\Mvc\\Model\n{\n    public function initialize()\n    {\n        $this-&gt;skipAttributesOnUpdate(\n            [\n                \"modified_in\",\n            ]\n        );\n    }\n}\n</code></pre> <p><pre><code>protected function useDynamicUpdate( bool $dynamicUpdate ): void;\n</code></pre> Sets if a model must use dynamic update instead of the all-field update</p> <pre><code>use Phalcon\\Mvc\\Model;\n\nclass Robots extends Model\n{\n    public function initialize()\n    {\n        $this-&gt;useDynamicUpdate(true);\n    }\n}\n</code></pre> <p><pre><code>protected function validate( ValidationInterface $validator ): bool;\n</code></pre> Executes validators on every validation call</p> <pre><code>use Phalcon\\Mvc\\Model;\nuse Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\ExclusionIn;\n\nclass Subscriptors extends Model\n{\n    public function validation()\n    {\n        $validator = new Validation();\n\n        $validator-&gt;add(\n            \"status\",\n            new ExclusionIn(\n                [\n                    \"domain\" =&gt; [\n                        \"A\",\n                        \"I\",\n                    ],\n                ]\n            )\n        );\n\n        return $this-&gt;validate($validator);\n    }\n}\n</code></pre>"},{"location":"api/phalcon_mvc/#mvcmodelbehavior","title":"Mvc\\Model\\Behavior","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>BehaviorInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Model\\Behavior</p> <p>This is an optional base class for ORM behaviors</p>"},{"location":"api/phalcon_mvc/#properties_6","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $options;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_12","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Phalcon\\Mvc\\Model\\Behavior</p> <p><pre><code>public function missingMethod( ModelInterface $model, string $method, array $arguments = [] );\n</code></pre> Acts as fallbacks when a missing method is called on the model</p> <p><pre><code>public function notify( string $type, ModelInterface $model );\n</code></pre> This method receives the notifications from the EventsManager</p> <p><pre><code>protected function getOptions( string $eventName = null );\n</code></pre> Returns the behavior options related to an event</p> <p><pre><code>protected function mustTakeAction( string $eventName ): bool;\n</code></pre> Checks whether the behavior must take action on certain event</p>"},{"location":"api/phalcon_mvc/#mvcmodelbehaviorsoftdelete","title":"Mvc\\Model\\Behavior\\SoftDelete","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\Behavior</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Behavior</code></li> <li><code>Phalcon\\Mvc\\Model\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Behavior</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\Behavior\\SoftDelete</p> <p>Instead of permanently delete a record it marks the record as deleted changing the value of a flag column</p>"},{"location":"api/phalcon_mvc/#methods_13","title":"Methods","text":"<p><pre><code>public function notify( string $type, ModelInterface $model );\n</code></pre> Listens for notifications from the models manager</p>"},{"location":"api/phalcon_mvc/#mvcmodelbehaviortimestampable","title":"Mvc\\Model\\Behavior\\Timestampable","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\Behavior</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Closure</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Behavior</code></li> <li><code>Phalcon\\Mvc\\Model\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Behavior</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\Behavior\\Timestampable</p> <p>Allows to automatically update a model\u2019s attribute saving the datetime when a record is created or updated</p>"},{"location":"api/phalcon_mvc/#methods_14","title":"Methods","text":"<p><pre><code>public function notify( string $type, ModelInterface $model );\n</code></pre> Listens for notifications from the models manager</p>"},{"location":"api/phalcon_mvc/#mvcmodelbehaviorinterface","title":"Mvc\\Model\\BehaviorInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\BehaviorInterface</p> <p>Interface for Phalcon\\Mvc\\Model\\Behavior</p>"},{"location":"api/phalcon_mvc/#methods_15","title":"Methods","text":"<p><pre><code>public function missingMethod( ModelInterface $model, string $method, array $arguments = [] );\n</code></pre> Calls a method when it's missing in the model</p> <p><pre><code>public function notify( string $type, ModelInterface $model );\n</code></pre> This method receives the notifications from the EventsManager</p>"},{"location":"api/phalcon_mvc/#mvcmodelbinder","title":"Mvc\\Model\\Binder","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Closure</code></li> <li><code>Phalcon\\Cache\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Mvc\\Controller\\BindModelInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Binder\\BindableInterface</code></li> <li><code>ReflectionFunction</code></li> <li><code>ReflectionMethod</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>BinderInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Model\\Binder</p> <p>This is an class for binding models into params for handler</p>"},{"location":"api/phalcon_mvc/#properties_7","title":"Properties","text":"<pre><code>/**\n * Array for storing active bound models\n *\n * @var array\n */\nprotected $boundModels;\n\n/**\n * Cache object used for caching parameters for model binding\n */\nprotected $cache;\n\n/**\n * Internal cache for caching parameters for model binding during request\n */\nprotected $internalCache;\n\n/**\n * Array for original values\n */\nprotected $originalValues;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_16","title":"Methods","text":"<p><pre><code>public function __construct( AdapterInterface $cache = null );\n</code></pre> Phalcon\\Mvc\\Model\\Binder constructor</p> <p><pre><code>public function bindToHandler( object $handler, array $params, string $cacheKey, string $methodName = null ): array;\n</code></pre> Bind models into params in proper handler</p> <pre><code>public function getBoundModels(): array;\n</code></pre> <p><pre><code>public function getCache(): AdapterInterface;\n</code></pre> Sets cache instance</p> <pre><code>public function getOriginalValues()\n</code></pre> <p><pre><code>public function setCache( AdapterInterface $cache ): BinderInterface;\n</code></pre> Gets cache instance</p> <p><pre><code>protected function findBoundModel( mixed $paramValue, string $className ): mixed | bool;\n</code></pre> Find the model by param value.</p> <p><pre><code>protected function getParamsFromCache( string $cacheKey ): array | null;\n</code></pre> Get params classes from cache by key</p> <p><pre><code>protected function getParamsFromReflection( object $handler, array $params, string $cacheKey, string $methodName ): array;\n</code></pre> Get modified params for handler using reflection</p>"},{"location":"api/phalcon_mvc/#mvcmodelbinderbindableinterface","title":"Mvc\\Model\\Binder\\BindableInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\Binder</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\Binder\\BindableInterface</p> <p>Interface for bindable classes</p>"},{"location":"api/phalcon_mvc/#methods_17","title":"Methods","text":"<p><pre><code>public function getModelName(): string | array;\n</code></pre> Return the model name or models names and parameters keys associated with this class</p>"},{"location":"api/phalcon_mvc/#mvcmodelbinderinterface","title":"Mvc\\Model\\BinderInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Cache\\Adapter\\AdapterInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\BinderInterface</p> <p>Interface for Phalcon\\Mvc\\Model\\Binder</p>"},{"location":"api/phalcon_mvc/#methods_18","title":"Methods","text":"<p><pre><code>public function bindToHandler( object $handler, array $params, string $cacheKey, string $methodName = null ): array;\n</code></pre> Bind models into params in proper handler</p> <p><pre><code>public function getBoundModels(): array;\n</code></pre> Gets active bound models</p> <p><pre><code>public function getCache(): AdapterInterface;\n</code></pre> Gets cache instance</p> <p><pre><code>public function setCache( AdapterInterface $cache ): BinderInterface;\n</code></pre> Sets cache instance</p>"},{"location":"api/phalcon_mvc/#mvcmodelcriteria","title":"Mvc\\Model\\Criteria","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\Column</code></li> <li><code>Phalcon\\Di\\Di</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Di\\InjectionAwareInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Query\\BuilderInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>CriteriaInterface</code></li> <li><code>InjectionAwareInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Model\\Criteria</p> <p>This class is used to build the array parameter required by Phalcon\\Mvc\\Model::find() and Phalcon\\Mvc\\Model::findFirst() using an object-oriented interface.</p> <pre><code>$robots = Robots::query()\n    -&gt;where(\"type = :type:\")\n    -&gt;andWhere(\"year &lt; 2000\")\n    -&gt;bind([\"type\" =&gt; \"mechanical\"])\n    -&gt;limit(5, 10)\n    -&gt;orderBy(\"name\")\n    -&gt;execute();\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_8","title":"Properties","text":"<pre><code>//\nprotected $bindParams;\n\n//\nprotected $bindTypes;\n\n//\nprotected $hiddenParamNumber = 0;\n\n//\nprotected $model;\n\n//\nprotected $params;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_19","title":"Methods","text":"<p><pre><code>public function andWhere( string $conditions, mixed $bindParams = null, mixed $bindTypes = null ): CriteriaInterface;\n</code></pre> Appends a condition to the current conditions using an AND operator</p> <p><pre><code>public function betweenWhere( string $expr, mixed $minimum, mixed $maximum ): CriteriaInterface;\n</code></pre> Appends a BETWEEN condition to the current conditions</p> <pre><code>$criteria-&gt;betweenWhere(\"price\", 100.25, 200.50);\n</code></pre> <p><pre><code>public function bind( array $bindParams, bool $merge = bool ): CriteriaInterface;\n</code></pre> Sets the bound parameters in the criteria This method replaces all previously set bound parameters</p> <p><pre><code>public function bindTypes( array $bindTypes ): CriteriaInterface;\n</code></pre> Sets the bind types in the criteria This method replaces all previously set bound parameters</p> <p><pre><code>public function cache( array $cache ): CriteriaInterface;\n</code></pre> Sets the cache options in the criteria This method replaces all previously set cache options</p> <p><pre><code>public function columns( mixed $columns ): CriteriaInterface;\n</code></pre> Sets the columns to be queried</p> <pre><code>$criteria-&gt;columns(\n    [\n        \"id\",\n        \"name\",\n    ]\n);\n</code></pre> <p><pre><code>public function conditions( string $conditions ): CriteriaInterface;\n</code></pre> Adds the conditions parameter to the criteria</p> <p><pre><code>public function createBuilder(): BuilderInterface;\n</code></pre> Creates a query builder from criteria.</p> <pre><code>$builder = Robots::query()\n    -&gt;where(\"type = :type:\")\n    -&gt;bind([\"type\" =&gt; \"mechanical\"])\n    -&gt;createBuilder();\n</code></pre> <p><pre><code>public function distinct( mixed $distinct ): CriteriaInterface;\n</code></pre> Sets SELECT DISTINCT / SELECT ALL flag</p> <p><pre><code>public function execute(): ResultsetInterface;\n</code></pre> Executes a find using the parameters built with the criteria</p> <p><pre><code>public function forUpdate( bool $forUpdate = bool ): CriteriaInterface;\n</code></pre> Adds the \"for_update\" parameter to the criteria</p> <p><pre><code>public static function fromInput( DiInterface $container, string $modelName, array $data, string $operator = string ): CriteriaInterface;\n</code></pre> Builds a Phalcon\\Mvc\\Model\\Criteria based on an input array like $_POST</p> <p><pre><code>public function getColumns(): string | array | null;\n</code></pre> Returns the columns to be queried</p> <p><pre><code>public function getConditions(): string | null;\n</code></pre> Returns the conditions parameter in the criteria</p> <p><pre><code>public function getDI(): DiInterface;\n</code></pre> Returns the DependencyInjector container</p> <p><pre><code>public function getGroupBy();\n</code></pre> Returns the group clause in the criteria</p> <p><pre><code>public function getHaving();\n</code></pre> Returns the having clause in the criteria</p> <p><pre><code>public function getLimit(): int | array | null;\n</code></pre> Returns the limit parameter in the criteria, which will be</p> <ul> <li>An integer if 'limit' was set without an 'offset'</li> <li>An array with 'number' and 'offset' keys if an offset was set with the limit</li> <li>NULL if limit has not been set</li> </ul> <p><pre><code>public function getModelName(): string;\n</code></pre> Returns an internal model name on which the criteria will be applied</p> <p><pre><code>public function getOrderBy(): string | null;\n</code></pre> Returns the order clause in the criteria</p> <p><pre><code>public function getParams(): array;\n</code></pre> Returns all the parameters defined in the criteria</p> <p><pre><code>public function getWhere(): string | null;\n</code></pre> Returns the conditions parameter in the criteria</p> <p><pre><code>public function groupBy( mixed $group ): CriteriaInterface;\n</code></pre> Adds the group-by clause to the criteria</p> <p><pre><code>public function having( mixed $having ): CriteriaInterface;\n</code></pre> Adds the having clause to the criteria</p> <p><pre><code>public function inWhere( string $expr, array $values ): CriteriaInterface;\n</code></pre> Appends an IN condition to the current conditions</p> <pre><code>$criteria-&gt;inWhere(\"id\", [1, 2, 3]);\n</code></pre> <p><pre><code>public function innerJoin( string $model, mixed $conditions = null, mixed $alias = null ): CriteriaInterface;\n</code></pre> Adds an INNER join to the query</p> <pre><code>$criteria-&gt;innerJoin(\n    Robots::class\n);\n\n$criteria-&gt;innerJoin(\n    Robots::class,\n    \"r.id = RobotsParts.robots_id\"\n);\n\n$criteria-&gt;innerJoin(\n    Robots::class,\n    \"r.id = RobotsParts.robots_id\",\n    \"r\"\n);\n</code></pre> <p><pre><code>public function join( string $model, mixed $conditions = null, mixed $alias = null, mixed $type = null ): CriteriaInterface;\n</code></pre> Adds an INNER join to the query</p> <pre><code>$criteria-&gt;join(\n    Robots::class\n);\n\n$criteria-&gt;join(\n    Robots::class,\n    \"r.id = RobotsParts.robots_id\"\n);\n\n$criteria-&gt;join(\n    Robots::class,\n    \"r.id = RobotsParts.robots_id\",\n    \"r\"\n);\n\n$criteria-&gt;join(\n    Robots::class,\n    \"r.id = RobotsParts.robots_id\",\n    \"r\",\n    \"LEFT\"\n);\n</code></pre> <p><pre><code>public function leftJoin( string $model, mixed $conditions = null, mixed $alias = null ): CriteriaInterface;\n</code></pre> Adds a LEFT join to the query</p> <pre><code>$criteria-&gt;leftJoin(\n    Robots::class,\n    \"r.id = RobotsParts.robots_id\",\n    \"r\"\n);\n</code></pre> <p><pre><code>public function limit( int $limit, int $offset = int ): CriteriaInterface;\n</code></pre> Adds the limit parameter to the criteria.</p> <pre><code>$criteria-&gt;limit(100);\n$criteria-&gt;limit(100, 200);\n$criteria-&gt;limit(\"100\", \"200\");\n</code></pre> <p><pre><code>public function notBetweenWhere( string $expr, mixed $minimum, mixed $maximum ): CriteriaInterface;\n</code></pre> Appends a NOT BETWEEN condition to the current conditions</p> <pre><code>$criteria-&gt;notBetweenWhere(\"price\", 100.25, 200.50);\n</code></pre> <p><pre><code>public function notInWhere( string $expr, array $values ): CriteriaInterface;\n</code></pre> Appends a NOT IN condition to the current conditions</p> <pre><code>$criteria-&gt;notInWhere(\"id\", [1, 2, 3]);\n</code></pre> <p><pre><code>public function orWhere( string $conditions, mixed $bindParams = null, mixed $bindTypes = null ): CriteriaInterface;\n</code></pre> Appends a condition to the current conditions using an OR operator</p> <p><pre><code>public function orderBy( string $orderColumns ): CriteriaInterface;\n</code></pre> Adds the order-by clause to the criteria</p> <p><pre><code>public function rightJoin( string $model, mixed $conditions = null, mixed $alias = null ): CriteriaInterface;\n</code></pre> Adds a RIGHT join to the query</p> <pre><code>$criteria-&gt;rightJoin(\n    Robots::class,\n    \"r.id = RobotsParts.robots_id\",\n    \"r\"\n);\n</code></pre> <p><pre><code>public function setDI( DiInterface $container ): void;\n</code></pre> Sets the DependencyInjector container</p> <p><pre><code>public function setModelName( string $modelName ): CriteriaInterface;\n</code></pre> Set a model on which the query will be executed</p> <p><pre><code>public function sharedLock( bool $sharedLock = bool ): CriteriaInterface;\n</code></pre> Adds the \"shared_lock\" parameter to the criteria</p> <p><pre><code>public function where( string $conditions, mixed $bindParams = null, mixed $bindTypes = null ): CriteriaInterface;\n</code></pre> Sets the conditions parameter in the criteria</p>"},{"location":"api/phalcon_mvc/#mvcmodelcriteriainterface","title":"Mvc\\Model\\CriteriaInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\DiInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\CriteriaInterface</p> <p>Interface for Phalcon\\Mvc\\Model\\Criteria</p>"},{"location":"api/phalcon_mvc/#methods_20","title":"Methods","text":"<p><pre><code>public function andWhere( string $conditions, mixed $bindParams = null, mixed $bindTypes = null ): CriteriaInterface;\n</code></pre> Appends a condition to the current conditions using an AND operator</p> <p><pre><code>public function betweenWhere( string $expr, mixed $minimum, mixed $maximum ): CriteriaInterface;\n</code></pre> Appends a BETWEEN condition to the current conditions</p> <pre><code>$criteria-&gt;betweenWhere(\"price\", 100.25, 200.50);\n</code></pre> <p><pre><code>public function bind( array $bindParams ): CriteriaInterface;\n</code></pre> Sets the bound parameters in the criteria This method replaces all previously set bound parameters</p> <p><pre><code>public function bindTypes( array $bindTypes ): CriteriaInterface;\n</code></pre> Sets the bind types in the criteria This method replaces all previously set bound parameters</p> <p><pre><code>public function cache( array $cache ): CriteriaInterface;\n</code></pre> Sets the cache options in the criteria This method replaces all previously set cache options</p> <p><pre><code>public function conditions( string $conditions ): CriteriaInterface;\n</code></pre> Adds the conditions parameter to the criteria</p> <p><pre><code>public function distinct( mixed $distinct ): CriteriaInterface;\n</code></pre> Sets SELECT DISTINCT / SELECT ALL flag</p> <p><pre><code>public function execute(): ResultsetInterface;\n</code></pre> Executes a find using the parameters built with the criteria</p> <p><pre><code>public function forUpdate( bool $forUpdate = bool ): CriteriaInterface;\n</code></pre> Sets the \"for_update\" parameter to the criteria</p> <p><pre><code>public function getColumns(): string | array | null;\n</code></pre> Returns the columns to be queried</p> <p><pre><code>public function getConditions(): string | null;\n</code></pre> Returns the conditions parameter in the criteria</p> <p><pre><code>public function getGroupBy();\n</code></pre> Returns the group clause in the criteria</p> <p><pre><code>public function getHaving();\n</code></pre> Returns the having clause in the criteria</p> <p><pre><code>public function getLimit(): int | array | null;\n</code></pre> Returns the limit parameter in the criteria, which will be</p> <ul> <li>An integer if 'limit' was set without an 'offset'</li> <li>An array with 'number' and 'offset' keys if an offset was set with the limit</li> <li>NULL if limit has not been set</li> </ul> <p><pre><code>public function getModelName(): string;\n</code></pre> Returns an internal model name on which the criteria will be applied</p> <p><pre><code>public function getOrderBy(): string | null;\n</code></pre> Returns the order parameter in the criteria</p> <p><pre><code>public function getParams(): array;\n</code></pre> Returns all the parameters defined in the criteria</p> <p><pre><code>public function getWhere(): string | null;\n</code></pre> Returns the conditions parameter in the criteria</p> <p><pre><code>public function groupBy( mixed $group ): CriteriaInterface;\n</code></pre> Adds the group-by clause to the criteria</p> <p><pre><code>public function having( mixed $having ): CriteriaInterface;\n</code></pre> Adds the having clause to the criteria</p> <p><pre><code>public function inWhere( string $expr, array $values ): CriteriaInterface;\n</code></pre> Appends an IN condition to the current conditions</p> <pre><code>$criteria-&gt;inWhere(\"id\", [1, 2, 3]);\n</code></pre> <p><pre><code>public function innerJoin( string $model, mixed $conditions = null, mixed $alias = null ): CriteriaInterface;\n</code></pre> Adds an INNER join to the query</p> <pre><code>$criteria-&gt;innerJoin(\n    Robots::class\n);\n\n$criteria-&gt;innerJoin(\n    Robots::class,\n    \"r.id = RobotsParts.robots_id\"\n);\n\n$criteria-&gt;innerJoin(\n    Robots::class,\n    \"r.id = RobotsParts.robots_id\",\n    \"r\"\n);\n</code></pre> <p><pre><code>public function leftJoin( string $model, mixed $conditions = null, mixed $alias = null ): CriteriaInterface;\n</code></pre> Adds a LEFT join to the query</p> <pre><code>$criteria-&gt;leftJoin(\n    Robots::class,\n    \"r.id = RobotsParts.robots_id\",\n    \"r\"\n);\n</code></pre> <p><pre><code>public function limit( int $limit, int $offset = int ): CriteriaInterface;\n</code></pre> Sets the limit parameter to the criteria</p> <p><pre><code>public function notBetweenWhere( string $expr, mixed $minimum, mixed $maximum ): CriteriaInterface;\n</code></pre> Appends a NOT BETWEEN condition to the current conditions</p> <pre><code>$criteria-&gt;notBetweenWhere(\"price\", 100.25, 200.50);\n</code></pre> <p><pre><code>public function notInWhere( string $expr, array $values ): CriteriaInterface;\n</code></pre> Appends a NOT IN condition to the current conditions</p> <pre><code>$criteria-&gt;notInWhere(\"id\", [1, 2, 3]);\n</code></pre> <p><pre><code>public function orWhere( string $conditions, mixed $bindParams = null, mixed $bindTypes = null ): CriteriaInterface;\n</code></pre> Appends a condition to the current conditions using an OR operator</p> <p><pre><code>public function orderBy( string $orderColumns ): CriteriaInterface;\n</code></pre> Adds the order-by parameter to the criteria</p> <p><pre><code>public function rightJoin( string $model, mixed $conditions = null, mixed $alias = null ): CriteriaInterface;\n</code></pre> Adds a RIGHT join to the query</p> <pre><code>$criteria-&gt;rightJoin(\n    Robots::class,\n    \"r.id = RobotsParts.robots_id\",\n    \"r\"\n);\n</code></pre> <p><pre><code>public function setModelName( string $modelName ): CriteriaInterface;\n</code></pre> Set a model on which the query will be executed</p> <p><pre><code>public function sharedLock( bool $sharedLock = bool ): CriteriaInterface;\n</code></pre> Sets the \"shared_lock\" parameter to the criteria</p> <p><pre><code>public function where( string $conditions, mixed $bindParams = null, mixed $bindTypes = null ): CriteriaInterface;\n</code></pre> Sets the conditions parameter in the criteria</p>"},{"location":"api/phalcon_mvc/#mvcmodelexception","title":"Mvc\\Model\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\Exception</p> <p>Exceptions thrown in Phalcon\\Mvc\\Model* classes will use this class</p>"},{"location":"api/phalcon_mvc/#mvcmodelmanager","title":"Mvc\\Model\\Manager","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Di\\InjectionAwareInterface</code></li> <li><code>Phalcon\\Events\\EventsAwareInterface</code></li> <li><code>Phalcon\\Events\\ManagerInterface</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Query\\Builder</code></li> <li><code>Phalcon\\Mvc\\Model\\Query\\BuilderInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Query\\StatusInterface</code></li> <li><code>ReflectionClass</code></li> <li><code>ReflectionProperty</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>EventsAwareInterface</code></li> <li><code>InjectionAwareInterface</code></li> <li><code>ManagerInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Model\\Manager</p> <p>This components controls the initialization of models, keeping record of relations between the different models of the application.</p> <p>A ModelsManager is injected to a model via a Dependency Injector/Services Container such as Phalcon\\Di.</p> <pre><code>use Phalcon\\Di;\nuse Phalcon\\Mvc\\Model\\Manager as ModelsManager;\n\n$di = new Di();\n\n$di-&gt;set(\n    \"modelsManager\",\n    function() {\n        return new ModelsManager();\n    }\n);\n\n$robot = new Robots($di);\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_9","title":"Properties","text":"<pre><code>//\nprotected $aliases;\n\n/**\n * Models' behaviors\n */\nprotected $behaviors;\n\n/**\n * Belongs to relations\n */\nprotected $belongsTo;\n\n/**\n * All the relationships by model\n */\nprotected $belongsToSingle;\n\n//\nprotected $container;\n\n//\nprotected $customEventsManager;\n\n/**\n * Does the model use dynamic update, instead of updating all rows?\n */\nprotected $dynamicUpdate;\n\n//\nprotected $eventsManager;\n\n/**\n * Has many relations\n */\nprotected $hasMany;\n\n/**\n * Has many relations by model\n */\nprotected $hasManySingle;\n\n/**\n * Has many-Through relations\n */\nprotected $hasManyToMany;\n\n/**\n * Has many-Through relations by model\n */\nprotected $hasManyToManySingle;\n\n/**\n * Has one relations\n */\nprotected $hasOne;\n\n/**\n * Has one relations by model\n */\nprotected $hasOneSingle;\n\n/**\n * Has one through relations\n */\nprotected $hasOneThrough;\n\n/**\n * Has one through relations by model\n */\nprotected $hasOneThroughSingle;\n\n/**\n * Mark initialized models\n */\nprotected $initialized;\n\n//\nprotected $keepSnapshots;\n\n/**\n * Last model initialized\n */\nprotected $lastInitialized;\n\n/**\n * Last query created/executed\n */\nprotected $lastQuery;\n\n//\nprotected $modelVisibility;\n\n//\nprotected $prefix = ;\n\n//\nprotected $readConnectionServices;\n\n//\nprotected $sources;\n\n//\nprotected $schemas;\n\n//\nprotected $writeConnectionServices;\n\n/**\n * Stores a list of reusable instances\n */\nprotected $reusable;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_21","title":"Methods","text":"<p><pre><code>public function __destruct();\n</code></pre> Destroys the current PHQL cache</p> <p><pre><code>public function _getConnectionService( ModelInterface $model, mixed $connectionServices ): string;\n</code></pre> Returns the connection service name used to read or write data related to a model depending on the connection services</p> <p>@todo Remove in v5.0 @deprecated Use getConnectionService()</p> <p><pre><code>public function addBehavior( ModelInterface $model, BehaviorInterface $behavior ): void;\n</code></pre> Binds a behavior to a model</p> <p><pre><code>public function addBelongsTo( ModelInterface $model, mixed $fields, string $referencedModel, mixed $referencedFields, mixed $options = null ): RelationInterface;\n</code></pre> Setup a relation reverse many to one between two models</p> <p><pre><code>public function addHasMany( ModelInterface $model, mixed $fields, string $referencedModel, mixed $referencedFields, mixed $options = null ): RelationInterface;\n</code></pre> Setup a relation 1-n between two models</p> <p><pre><code>public function addHasManyToMany( ModelInterface $model, mixed $fields, string $intermediateModel, mixed $intermediateFields, mixed $intermediateReferencedFields, string $referencedModel, mixed $referencedFields, mixed $options = null ): RelationInterface;\n</code></pre> Setups a relation n-m between two models</p> <p><pre><code>public function addHasOne( ModelInterface $model, mixed $fields, string $referencedModel, mixed $referencedFields, mixed $options = null ): RelationInterface;\n</code></pre> Setup a 1-1 relation between two models</p> <p><pre><code>public function addHasOneThrough( ModelInterface $model, mixed $fields, string $intermediateModel, mixed $intermediateFields, mixed $intermediateReferencedFields, string $referencedModel, mixed $referencedFields, mixed $options = null ): RelationInterface;\n</code></pre> Setups a relation 1-1 between two models using an intermediate model</p> <p><pre><code>public function clearReusableObjects(): void;\n</code></pre> Clears the internal reusable list</p> <p><pre><code>public function createBuilder( mixed $params = null ): BuilderInterface;\n</code></pre> Creates a Phalcon\\Mvc\\Model\\Query\\Builder</p> <p><pre><code>public function createQuery( string $phql ): QueryInterface;\n</code></pre> Creates a Phalcon\\Mvc\\Model\\Query without execute it</p> <p><pre><code>public function executeQuery( string $phql, mixed $placeholders = null, mixed $types = null ): mixed;\n</code></pre> Creates a Phalcon\\Mvc\\Model\\Query and execute it</p> <pre><code>$model = new Robots();\n$manager = $model-&gt;getModelsManager();\n\n// \\Phalcon\\Mvc\\Model\\Resultset\\Simple\n$manager-&gt;executeQuery('SELECTFROM Robots');\n\n// \\Phalcon\\Mvc\\Model\\Resultset\\Complex\n$manager-&gt;executeQuery('SELECT COUNT(type) FROM Robots GROUP BY type');\n\n// \\Phalcon\\Mvc\\Model\\Query\\StatusInterface\n$manager-&gt;executeQuery('INSERT INTO Robots (id) VALUES (1)');\n\n// \\Phalcon\\Mvc\\Model\\Query\\StatusInterface\n$manager-&gt;executeQuery('UPDATE Robots SET id = 0 WHERE id = :id:', ['id' =&gt; 1]);\n\n// \\Phalcon\\Mvc\\Model\\Query\\StatusInterface\n$manager-&gt;executeQuery('DELETE FROM Robots WHERE id = :id:', ['id' =&gt; 1]);\n</code></pre> <p><pre><code>public function existsBelongsTo( string $modelName, string $modelRelation ): bool;\n</code></pre> Checks whether a model has a belongsTo relation with another model</p> <p><pre><code>public function existsHasMany( string $modelName, string $modelRelation ): bool;\n</code></pre> Checks whether a model has a hasMany relation with another model</p> <p><pre><code>public function existsHasManyToMany( string $modelName, string $modelRelation ): bool;\n</code></pre> Checks whether a model has a hasManyToMany relation with another model</p> <p><pre><code>public function existsHasOne( string $modelName, string $modelRelation ): bool;\n</code></pre> Checks whether a model has a hasOne relation with another model</p> <p><pre><code>public function existsHasOneThrough( string $modelName, string $modelRelation ): bool;\n</code></pre> Checks whether a model has a hasOneThrough relation with another model</p> <p><pre><code>public function getBelongsTo( ModelInterface $model ): RelationInterface[] | array;\n</code></pre> Gets all the belongsTo relations defined in a model</p> <pre><code>$relations = $modelsManager-&gt;getBelongsTo(\n    new Robots()\n);\n</code></pre> <p><pre><code>public function getBelongsToRecords( string $modelName, string $modelRelation, ModelInterface $record, mixed $parameters = null, string $method = null ): ResultsetInterface | bool;\n</code></pre> Gets belongsTo related records from a model</p> <p><pre><code>public function getConnectionService( ModelInterface $model, mixed $connectionServices ): string;\n</code></pre> Returns the connection service name used to read or write data related to a model depending on the connection services</p> <p><pre><code>public function getCustomEventsManager( ModelInterface $model ): EventsManagerInterface | null;\n</code></pre> Returns a custom events manager related to a model or null if there is no related events manager</p> <p><pre><code>public function getDI(): DiInterface;\n</code></pre> Returns the DependencyInjector container</p> <p><pre><code>public function getEventsManager(): EventsManagerInterface;\n</code></pre> Returns the internal event manager</p> <p><pre><code>public function getHasMany( ModelInterface $model ): RelationInterface[] | array;\n</code></pre> Gets hasMany relations defined on a model</p> <p><pre><code>public function getHasManyRecords( string $modelName, string $modelRelation, ModelInterface $record, mixed $parameters = null, string $method = null ): ResultsetInterface | bool;\n</code></pre> Gets hasMany related records from a model</p> <p><pre><code>public function getHasManyToMany( ModelInterface $model ): RelationInterface[] | array;\n</code></pre> Gets hasManyToMany relations defined on a model</p> <p><pre><code>public function getHasOne( ModelInterface $model ): array;\n</code></pre> Gets hasOne relations defined on a model</p> <p><pre><code>public function getHasOneAndHasMany( ModelInterface $model ): RelationInterface[];\n</code></pre> Gets hasOne relations defined on a model</p> <p><pre><code>public function getHasOneRecords( string $modelName, string $modelRelation, ModelInterface $record, mixed $parameters = null, string $method = null ): ModelInterface | bool;\n</code></pre> Gets belongsTo related records from a model</p> <p><pre><code>public function getHasOneThrough( ModelInterface $model ): RelationInterface[] | array;\n</code></pre> Gets hasOneThrough relations defined on a model</p> <p><pre><code>public function getLastInitialized(): ModelInterface;\n</code></pre> Get last initialized model</p> <p><pre><code>public function getLastQuery(): QueryInterface;\n</code></pre> Returns the last query created or executed in the models manager</p> <p><pre><code>public function getModelPrefix(): string;\n</code></pre> Returns the prefix for all model sources.</p> <p><pre><code>public function getModelSchema( ModelInterface $model ): string;\n</code></pre> Returns the mapped schema for a model</p> <p><pre><code>public function getModelSource( ModelInterface $model ): string;\n</code></pre> Returns the mapped source for a model</p> <p><pre><code>public function getReadConnection( ModelInterface $model ): AdapterInterface;\n</code></pre> Returns the connection to read data related to a model</p> <p><pre><code>public function getReadConnectionService( ModelInterface $model ): string;\n</code></pre> Returns the connection service name used to read data related to a model</p> <p><pre><code>public function getRelationByAlias( string $modelName, string $alias ): RelationInterface | bool;\n</code></pre> Returns a relation by its alias</p> <p><pre><code>public function getRelationRecords( RelationInterface $relation, ModelInterface $record, mixed $parameters = null, string $method = null );\n</code></pre> Helper method to query records based on a relation definition</p> <p><pre><code>public function getRelations( string $modelName ): RelationInterface[];\n</code></pre> Query all the relationships defined on a model</p> <p><pre><code>public function getRelationsBetween( string $first, string $second ): RelationInterface[] | bool;\n</code></pre> Query the first relationship defined between two models</p> <p><pre><code>public function getReusableRecords( string $modelName, string $key );\n</code></pre> Returns a reusable object from the internal list</p> <p><pre><code>public function getWriteConnection( ModelInterface $model ): AdapterInterface;\n</code></pre> Returns the connection to write data related to a model</p> <p><pre><code>public function getWriteConnectionService( ModelInterface $model ): string;\n</code></pre> Returns the connection service name used to write data related to a model</p> <p><pre><code>public function initialize( ModelInterface $model ): bool;\n</code></pre> Initializes a model in the model manager</p> <p><pre><code>public function isInitialized( string $className ): bool;\n</code></pre> Check whether a model is already initialized</p> <p><pre><code>public function isKeepingSnapshots( ModelInterface $model ): bool;\n</code></pre> Checks if a model is keeping snapshots for the queried records</p> <p><pre><code>public function isUsingDynamicUpdate( ModelInterface $model ): bool;\n</code></pre> Checks if a model is using dynamic update instead of all-field update</p> <p><pre><code>final public function isVisibleModelProperty( ModelInterface $model, string $property ): bool;\n</code></pre> Check whether a model property is declared as public.</p> <pre><code>$isPublic = $manager-&gt;isVisibleModelProperty(\n    new Robots(),\n    \"name\"\n);\n</code></pre> <p><pre><code>public function keepSnapshots( ModelInterface $model, bool $keepSnapshots ): void;\n</code></pre> Sets if a model must keep snapshots</p> <p><pre><code>public function load( string $modelName ): ModelInterface;\n</code></pre> Loads a model throwing an exception if it doesn't exist</p> <p><pre><code>public function missingMethod( ModelInterface $model, string $eventName, mixed $data );\n</code></pre> Dispatch an event to the listeners and behaviors This method expects that the endpoint listeners/behaviors returns true meaning that a least one was implemented</p> <p><pre><code>public function notifyEvent( string $eventName, ModelInterface $model );\n</code></pre> Receives events generated in the models and dispatches them to an events-manager if available. Notify the behaviors that are listening in the model</p> <p><pre><code>public function setConnectionService( ModelInterface $model, string $connectionService ): void;\n</code></pre> Sets both write and read connection service for a model</p> <p><pre><code>public function setCustomEventsManager( ModelInterface $model, EventsManagerInterface $eventsManager ): void;\n</code></pre> Sets a custom events manager for a specific model</p> <p><pre><code>public function setDI( DiInterface $container ): void;\n</code></pre> Sets the DependencyInjector container</p> <p><pre><code>public function setEventsManager( EventsManagerInterface $eventsManager ): void;\n</code></pre> Sets a global events manager</p> <p><pre><code>public function setModelPrefix( string $prefix ): void;\n</code></pre> Sets the prefix for all model sources.</p> <pre><code>use Phalcon\\Mvc\\Model\\Manager;\n\n$di-&gt;set(\n    \"modelsManager\",\n    function () {\n        $modelsManager = new Manager();\n\n        $modelsManager-&gt;setModelPrefix(\"wp_\");\n\n        return $modelsManager;\n    }\n);\n\n$robots = new Robots();\n\necho $robots-&gt;getSource(); // wp_robots\n</code></pre> <p><pre><code>public function setModelSchema( ModelInterface $model, string $schema ): void;\n</code></pre> Sets the mapped schema for a model</p> <p><pre><code>public function setModelSource( ModelInterface $model, string $source ): void;\n</code></pre> Sets the mapped source for a model</p> <p><pre><code>public function setReadConnectionService( ModelInterface $model, string $connectionService ): void;\n</code></pre> Sets read connection service for a model</p> <p><pre><code>public function setReusableRecords( string $modelName, string $key, mixed $records ): void;\n</code></pre> Stores a reusable record in the internal list</p> <p><pre><code>public function setWriteConnectionService( ModelInterface $model, string $connectionService ): void;\n</code></pre> Sets write connection service for a model</p> <p><pre><code>public function useDynamicUpdate( ModelInterface $model, bool $dynamicUpdate ): void;\n</code></pre> Sets if a model must use dynamic update instead of the all-field update</p> <p><pre><code>protected function _getConnection( ModelInterface $model, mixed $connectionServices ): AdapterInterface;\n</code></pre> Returns the connection to read or write data related to a model depending on the connection services.</p> <p>@todo Remove in v5.0 @deprecated Use getConnection()</p> <p><pre><code>final protected function _mergeFindParameters( mixed $findParamsOne, mixed $findParamsTwo ): array;\n</code></pre> Merge two arrays of find parameters</p> <p><pre><code>protected function getConnection( ModelInterface $model, mixed $connectionServices ): AdapterInterface;\n</code></pre> Returns the connection to read or write data related to a model depending on the connection services.</p>"},{"location":"api/phalcon_mvc/#mvcmodelmanagerinterface","title":"Mvc\\Model\\ManagerInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Query\\BuilderInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Query\\StatusInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\ManagerInterface</p> <p>Interface for Phalcon\\Mvc\\Model\\Manager</p>"},{"location":"api/phalcon_mvc/#methods_22","title":"Methods","text":"<p><pre><code>public function addBehavior( ModelInterface $model, BehaviorInterface $behavior ): void;\n</code></pre> Binds a behavior to a model</p> <p><pre><code>public function addBelongsTo( ModelInterface $model, mixed $fields, string $referencedModel, mixed $referencedFields, mixed $options = null ): RelationInterface;\n</code></pre> Setup a relation reverse 1-1  between two models</p> <p><pre><code>public function addHasMany( ModelInterface $model, mixed $fields, string $referencedModel, mixed $referencedFields, mixed $options = null ): RelationInterface;\n</code></pre> Setup a relation 1-n between two models</p> <p><pre><code>public function addHasManyToMany( ModelInterface $model, mixed $fields, string $intermediateModel, mixed $intermediateFields, mixed $intermediateReferencedFields, string $referencedModel, mixed $referencedFields, mixed $options = null ): RelationInterface;\n</code></pre> Setups a relation n-m between two models</p> <p><pre><code>public function addHasOne( ModelInterface $model, mixed $fields, string $referencedModel, mixed $referencedFields, mixed $options = null ): RelationInterface;\n</code></pre> Setup a 1-1 relation between two models</p> <p><pre><code>public function addHasOneThrough( ModelInterface $model, mixed $fields, string $intermediateModel, mixed $intermediateFields, mixed $intermediateReferencedFields, string $referencedModel, mixed $referencedFields, mixed $options = null ): RelationInterface;\n</code></pre> Setups a 1-1 relation between two models using an intermediate table</p> <p><pre><code>public function createBuilder( mixed $params = null ): BuilderInterface;\n</code></pre> Creates a Phalcon\\Mvc\\Model\\Query\\Builder</p> <p><pre><code>public function createQuery( string $phql ): QueryInterface;\n</code></pre> Creates a Phalcon\\Mvc\\Model\\Query without execute it</p> <p><pre><code>public function executeQuery( string $phql, mixed $placeholders = null, mixed $types = null ): mixed;\n</code></pre> Creates a Phalcon\\Mvc\\Model\\Query and execute it</p> <p><pre><code>public function existsBelongsTo( string $modelName, string $modelRelation ): bool;\n</code></pre> Checks whether a model has a belongsTo relation with another model</p> <p><pre><code>public function existsHasMany( string $modelName, string $modelRelation ): bool;\n</code></pre> Checks whether a model has a hasMany relation with another model</p> <p><pre><code>public function existsHasManyToMany( string $modelName, string $modelRelation ): bool;\n</code></pre> Checks whether a model has a hasManyToMany relation with another model</p> <p><pre><code>public function existsHasOne( string $modelName, string $modelRelation ): bool;\n</code></pre> Checks whether a model has a hasOne relation with another model</p> <p><pre><code>public function existsHasOneThrough( string $modelName, string $modelRelation ): bool;\n</code></pre> Checks whether a model has a hasOneThrough relation with another model</p> <p><pre><code>public function getBelongsTo( ModelInterface $model ): RelationInterface[] | array;\n</code></pre> Gets belongsTo relations defined on a model</p> <p><pre><code>public function getBelongsToRecords( string $modelName, string $modelRelation, ModelInterface $record, mixed $parameters = null, string $method = null ): ResultsetInterface | bool;\n</code></pre> Gets belongsTo related records from a model</p> <p><pre><code>public function getHasMany( ModelInterface $model ): RelationInterface[] | array;\n</code></pre> Gets hasMany relations defined on a model</p> <p><pre><code>public function getHasManyRecords( string $modelName, string $modelRelation, ModelInterface $record, mixed $parameters = null, string $method = null ): ResultsetInterface | bool;\n</code></pre> Gets hasMany related records from a model</p> <p><pre><code>public function getHasManyToMany( ModelInterface $model ): RelationInterface[] | array;\n</code></pre> Gets hasManyToMany relations defined on a model</p> <p><pre><code>public function getHasOne( ModelInterface $model ): RelationInterface[] | array;\n</code></pre> Gets hasOne relations defined on a model</p> <p><pre><code>public function getHasOneAndHasMany( ModelInterface $model ): RelationInterface[];\n</code></pre> Gets hasOne relations defined on a model</p> <p><pre><code>public function getHasOneRecords( string $modelName, string $modelRelation, ModelInterface $record, mixed $parameters = null, string $method = null ): ModelInterface | bool;\n</code></pre> Gets hasOne related records from a model</p> <p><pre><code>public function getHasOneThrough( ModelInterface $model ): RelationInterface[] | array;\n</code></pre> Gets hasOneThrough relations defined on a model</p> <p><pre><code>public function getLastInitialized(): ModelInterface;\n</code></pre> Get last initialized model</p> <p><pre><code>public function getLastQuery(): QueryInterface;\n</code></pre> Returns the last query created or executed in the models manager</p> <p><pre><code>public function getModelSchema( ModelInterface $model ): string;\n</code></pre> Returns the mapped schema for a model</p> <p><pre><code>public function getModelSource( ModelInterface $model ): string;\n</code></pre> Returns the mapped source for a model</p> <p><pre><code>public function getReadConnection( ModelInterface $model ): AdapterInterface;\n</code></pre> Returns the connection to read data related to a model</p> <p><pre><code>public function getReadConnectionService( ModelInterface $model ): string;\n</code></pre> Returns the connection service name used to read data related to a model</p> <p><pre><code>public function getRelationByAlias( string $modelName, string $alias ): Relation | bool;\n</code></pre> Returns a relation by its alias</p> <p><pre><code>public function getRelationRecords( RelationInterface $relation, ModelInterface $record, mixed $parameters = null, string $method = null );\n</code></pre> Helper method to query records based on a relation definition</p> <p><pre><code>public function getRelations( string $modelName ): RelationInterface[];\n</code></pre> Query all the relationships defined on a model</p> <p><pre><code>public function getRelationsBetween( string $first, string $second ): RelationInterface[] | bool;\n</code></pre> Query the relations between two models</p> <p><pre><code>public function getWriteConnection( ModelInterface $model ): AdapterInterface;\n</code></pre> Returns the connection to write data related to a model</p> <p><pre><code>public function getWriteConnectionService( ModelInterface $model ): string;\n</code></pre> Returns the connection service name used to write data related to a model</p> <p><pre><code>public function initialize( ModelInterface $model );\n</code></pre> Initializes a model in the model manager</p> <p><pre><code>public function isInitialized( string $className ): bool;\n</code></pre> Check of a model is already initialized</p> <p><pre><code>public function isKeepingSnapshots( ModelInterface $model ): bool;\n</code></pre> Checks if a model is keeping snapshots for the queried records</p> <p><pre><code>public function isUsingDynamicUpdate( ModelInterface $model ): bool;\n</code></pre> Checks if a model is using dynamic update instead of all-field update</p> <p><pre><code>public function isVisibleModelProperty( ModelInterface $model, string $property ): bool;\n</code></pre> Check whether a model property is declared as public.</p> <pre><code>$isPublic = $manager-&gt;isVisibleModelProperty(\n    new Robots(),\n    \"name\"\n);\n</code></pre> <p><pre><code>public function keepSnapshots( ModelInterface $model, bool $keepSnapshots ): void;\n</code></pre> Sets if a model must keep snapshots</p> <p><pre><code>public function load( string $modelName ): ModelInterface;\n</code></pre> Loads a model throwing an exception if it doesn't exist</p> <p><pre><code>public function missingMethod( ModelInterface $model, string $eventName, mixed $data );\n</code></pre> Dispatch an event to the listeners and behaviors This method expects that the endpoint listeners/behaviors returns true meaning that a least one is implemented</p> <p><pre><code>public function notifyEvent( string $eventName, ModelInterface $model );\n</code></pre> Receives events generated in the models and dispatches them to an events-manager if available Notify the behaviors that are listening in the model</p> <p><pre><code>public function setConnectionService( ModelInterface $model, string $connectionService ): void;\n</code></pre> Sets both write and read connection service for a model</p> <p><pre><code>public function setModelSchema( ModelInterface $model, string $schema ): void;\n</code></pre> Sets the mapped schema for a model</p> <p><pre><code>public function setModelSource( ModelInterface $model, string $source ): void;\n</code></pre> Sets the mapped source for a model</p> <p><pre><code>public function setReadConnectionService( ModelInterface $model, string $connectionService ): void;\n</code></pre> Sets read connection service for a model</p> <p><pre><code>public function setWriteConnectionService( ModelInterface $model, string $connectionService );\n</code></pre> Sets write connection service for a model</p> <p><pre><code>public function useDynamicUpdate( ModelInterface $model, bool $dynamicUpdate ): void;\n</code></pre> Sets if a model must use dynamic update instead of the all-field update</p>"},{"location":"api/phalcon_mvc/#mvcmodelmetadata","title":"Mvc\\Model\\MetaData","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Cache\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Di\\InjectionAwareInterface</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\MetaData\\Strategy\\Introspection</code></li> <li><code>Phalcon\\Mvc\\Model\\MetaData\\Strategy\\StrategyInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>InjectionAwareInterface</code></li> <li><code>MetaDataInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Model\\MetaData</p> <p>Because Phalcon\\Mvc\\Model requires meta-data like field names, data types, primary keys, etc. This component collect them and store for further querying by Phalcon\\Mvc\\Model. Phalcon\\Mvc\\Model\\MetaData can also use adapters to store temporarily or permanently the meta-data.</p> <p>A standard Phalcon\\Mvc\\Model\\MetaData can be used to query model attributes:</p> <pre><code>$metaData = new \\Phalcon\\Mvc\\Model\\MetaData\\Memory();\n\n$attributes = $metaData-&gt;getAttributes(\n    new Robots()\n);\n\nprint_r($attributes);\n</code></pre>"},{"location":"api/phalcon_mvc/#constants_1","title":"Constants","text":"<pre><code>const MODELS_ATTRIBUTES = 0;\nconst MODELS_AUTOMATIC_DEFAULT_INSERT = 10;\nconst MODELS_AUTOMATIC_DEFAULT_UPDATE = 11;\nconst MODELS_COLUMN_MAP = 0;\nconst MODELS_DATA_TYPES = 4;\nconst MODELS_DATA_TYPES_BIND = 9;\nconst MODELS_DATA_TYPES_NUMERIC = 5;\nconst MODELS_DATE_AT = 6;\nconst MODELS_DATE_IN = 7;\nconst MODELS_DEFAULT_VALUES = 12;\nconst MODELS_EMPTY_STRING_VALUES = 13;\nconst MODELS_IDENTITY_COLUMN = 8;\nconst MODELS_NON_PRIMARY_KEY = 2;\nconst MODELS_NOT_NULL = 3;\nconst MODELS_PRIMARY_KEY = 1;\nconst MODELS_REVERSE_COLUMN_MAP = 1;\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_10","title":"Properties","text":"<pre><code>/**\n * @var CacheAdapterInterface\n */\nprotected $adapter;\n\n//\nprotected $columnMap;\n\n//\nprotected $container;\n\n//\nprotected $metaData;\n\n//\nprotected $strategy;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_23","title":"Methods","text":"<p><pre><code>public function getAttributes( ModelInterface $model ): array;\n</code></pre> Returns table attributes names (fields)</p> <pre><code>print_r(\n    $metaData-&gt;getAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p><pre><code>public function getAutomaticCreateAttributes( ModelInterface $model ): array;\n</code></pre> Returns attributes that must be ignored from the INSERT SQL generation</p> <pre><code>print_r(\n    $metaData-&gt;getAutomaticCreateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p><pre><code>public function getAutomaticUpdateAttributes( ModelInterface $model ): array;\n</code></pre> Returns attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>print_r(\n    $metaData-&gt;getAutomaticUpdateAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p><pre><code>public function getBindTypes( ModelInterface $model ): array;\n</code></pre> Returns attributes and their bind data types</p> <pre><code>print_r(\n    $metaData-&gt;getBindTypes(\n        new Robots()\n    )\n);\n</code></pre> <p><pre><code>public function getColumnMap( ModelInterface $model ): array | null;\n</code></pre> Returns the column map if any</p> <pre><code>print_r(\n    $metaData-&gt;getColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p><pre><code>public function getDI(): DiInterface;\n</code></pre> Returns the DependencyInjector container</p> <p><pre><code>public function getDataTypes( ModelInterface $model ): array;\n</code></pre> Returns attributes and their data types</p> <pre><code>print_r(\n    $metaData-&gt;getDataTypes(\n        new Robots()\n    )\n);\n</code></pre> <p><pre><code>public function getDataTypesNumeric( ModelInterface $model ): array;\n</code></pre> Returns attributes which types are numerical</p> <pre><code>print_r(\n    $metaData-&gt;getDataTypesNumeric(\n        new Robots()\n    )\n);\n</code></pre> <p><pre><code>public function getDefaultValues( ModelInterface $model ): array;\n</code></pre> Returns attributes (which have default values) and their default values</p> <pre><code>print_r(\n    $metaData-&gt;getDefaultValues(\n        new Robots()\n    )\n);\n</code></pre> <p><pre><code>public function getEmptyStringAttributes( ModelInterface $model ): array;\n</code></pre> Returns attributes allow empty strings</p> <pre><code>print_r(\n    $metaData-&gt;getEmptyStringAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p><pre><code>public function getIdentityField( ModelInterface $model ): string | null;\n</code></pre> Returns the name of identity field (if one is present)</p> <pre><code>print_r(\n    $metaData-&gt;getIdentityField(\n        new Robots()\n    )\n);\n</code></pre> <p><pre><code>public function getNonPrimaryKeyAttributes( ModelInterface $model ): array;\n</code></pre> Returns an array of fields which are not part of the primary key</p> <pre><code>print_r(\n    $metaData-&gt;getNonPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p><pre><code>public function getNotNullAttributes( ModelInterface $model ): array;\n</code></pre> Returns an array of not null attributes</p> <pre><code>print_r(\n    $metaData-&gt;getNotNullAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p><pre><code>public function getPrimaryKeyAttributes( ModelInterface $model ): array;\n</code></pre> Returns an array of fields which are part of the primary key</p> <pre><code>print_r(\n    $metaData-&gt;getPrimaryKeyAttributes(\n        new Robots()\n    )\n);\n</code></pre> <p><pre><code>public function getReverseColumnMap( ModelInterface $model ): array | null;\n</code></pre> Returns the reverse column map if any</p> <pre><code>print_r(\n    $metaData-&gt;getReverseColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p><pre><code>public function getStrategy(): StrategyInterface;\n</code></pre> Return the strategy to obtain the meta-data</p> <p><pre><code>public function hasAttribute( ModelInterface $model, string $attribute ): bool;\n</code></pre> Check if a model has certain attribute</p> <pre><code>var_dump(\n    $metaData-&gt;hasAttribute(\n        new Robots(),\n        \"name\"\n    )\n);\n</code></pre> <p><pre><code>public function isEmpty(): bool;\n</code></pre> Checks if the internal meta-data container is empty</p> <pre><code>var_dump(\n    $metaData-&gt;isEmpty()\n);\n</code></pre> <p><pre><code>public function read( string $key ): array | null;\n</code></pre> Reads metadata from the adapter</p> <p><pre><code>final public function readColumnMap( ModelInterface $model ): array | null;\n</code></pre> Reads the ordered/reversed column map for certain model</p> <pre><code>print_r(\n    $metaData-&gt;readColumnMap(\n        new Robots()\n    )\n);\n</code></pre> <p><pre><code>final public function readColumnMapIndex( ModelInterface $model, int $index );\n</code></pre> Reads column-map information for certain model using a MODEL_* constant</p> <pre><code>print_r(\n    $metaData-&gt;readColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP\n    )\n);\n</code></pre> <p><pre><code>final public function readMetaData( ModelInterface $model ): array;\n</code></pre> Reads the complete meta-data for certain model</p> <pre><code>print_r(\n    $metaData-&gt;readMetaData(\n        new Robots()\n    )\n);\n</code></pre> <p><pre><code>final public function readMetaDataIndex( ModelInterface $model, int $index );\n</code></pre> Reads meta-data for certain model</p> <pre><code>print_r(\n    $metaData-&gt;readMetaDataIndex(\n        new Robots(),\n        0\n    )\n);\n</code></pre> <p><pre><code>public function reset(): void;\n</code></pre> Resets internal meta-data in order to regenerate it</p> <pre><code>$metaData-&gt;reset();\n</code></pre> <p><pre><code>public function setAutomaticCreateAttributes( ModelInterface $model, array $attributes ): void;\n</code></pre> Set the attributes that must be ignored from the INSERT SQL generation</p> <pre><code>$metaData-&gt;setAutomaticCreateAttributes(\n    new Robots(),\n    [\n        \"created_at\" =&gt; true,\n    ]\n);\n</code></pre> <p><pre><code>public function setAutomaticUpdateAttributes( ModelInterface $model, array $attributes ): void;\n</code></pre> Set the attributes that must be ignored from the UPDATE SQL generation</p> <pre><code>$metaData-&gt;setAutomaticUpdateAttributes(\n    new Robots(),\n    [\n        \"modified_at\" =&gt; true,\n    ]\n);\n</code></pre> <p><pre><code>public function setDI( DiInterface $container ): void;\n</code></pre> Sets the DependencyInjector container</p> <p><pre><code>public function setEmptyStringAttributes( ModelInterface $model, array $attributes ): void;\n</code></pre> Set the attributes that allow empty string values</p> <pre><code>$metaData-&gt;setEmptyStringAttributes(\n    new Robots(),\n    [\n        \"name\" =&gt; true,\n    ]\n);\n</code></pre> <p><pre><code>public function setStrategy( StrategyInterface $strategy ): void;\n</code></pre> Set the meta-data extraction strategy</p> <p><pre><code>public function write( string $key, array $data ): void;\n</code></pre> Writes the metadata to adapter</p> <p><pre><code>final public function writeMetaDataIndex( ModelInterface $model, int $index, mixed $data ): void;\n</code></pre> Writes meta-data for certain model using a MODEL_* constant</p> <pre><code>print_r(\n    $metaData-&gt;writeColumnMapIndex(\n        new Robots(),\n        MetaData::MODELS_REVERSE_COLUMN_MAP,\n        [\n            \"leName\" =&gt; \"name\",\n        ]\n    )\n);\n</code></pre> <p><pre><code>final protected function initialize( ModelInterface $model, mixed $key, mixed $table, mixed $schema );\n</code></pre> Initialize the metadata for certain table</p>"},{"location":"api/phalcon_mvc/#mvcmodelmetadataapcu","title":"Mvc\\Model\\MetaData\\Apcu","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\MetaData</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Helper\\Arr</code></li> <li><code>Phalcon\\Mvc\\Model\\MetaData</code></li> <li><code>Phalcon\\Mvc\\Model\\Exception</code></li> <li><code>Phalcon\\Cache\\AdapterFactory</code></li> </ul> </li> <li> <p>Extends</p> <p><code>MetaData</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\MetaData\\Apcu</p> <p>Stores model meta-data in the APCu cache. Data will erased if the web server is restarted</p> <p>By default meta-data is stored for 48 hours (172800 seconds)</p> <p>You can query the meta-data by printing apcu_fetch('$PMM$') or apcu_fetch('$PMM$my-app-id')</p> <pre><code>$metaData = new \\Phalcon\\Mvc\\Model\\MetaData\\Apcu(\n    [\n        \"prefix\"   =&gt; \"my-app-id\",\n        \"lifetime\" =&gt; 86400,\n    ]\n);\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_24","title":"Methods","text":"<p><pre><code>public function __construct( AdapterFactory $factory, array $options = null );\n</code></pre> Phalcon\\Mvc\\Model\\MetaData\\Apcu constructor</p>"},{"location":"api/phalcon_mvc/#mvcmodelmetadatalibmemcached","title":"Mvc\\Model\\MetaData\\Libmemcached","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\MetaData</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Helper\\Arr</code></li> <li><code>Phalcon\\Mvc\\Model\\Exception</code></li> <li><code>Phalcon\\Mvc\\Model\\MetaData</code></li> <li><code>Phalcon\\Cache\\AdapterFactory</code></li> </ul> </li> <li> <p>Extends</p> <p><code>MetaData</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\MetaData\\Libmemcached</p> <p>Stores model meta-data in the Memcache.</p> <p>By default meta-data is stored for 48 hours (172800 seconds)</p>"},{"location":"api/phalcon_mvc/#methods_25","title":"Methods","text":"<p><pre><code>public function __construct( AdapterFactory $factory, array $options = [] );\n</code></pre> Phalcon\\Mvc\\Model\\MetaData\\Libmemcached constructor</p> <p><pre><code>public function reset(): void;\n</code></pre> Flush Memcache data and resets internal meta-data in order to regenerate it</p>"},{"location":"api/phalcon_mvc/#mvcmodelmetadatamemory","title":"Mvc\\Model\\MetaData\\Memory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\MetaData</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Mvc\\Model\\Exception</code></li> <li><code>Phalcon\\Mvc\\Model\\MetaData</code></li> </ul> </li> <li> <p>Extends</p> <p><code>MetaData</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\MetaData\\Memory</p> <p>Stores model meta-data in memory. Data will be erased when the request finishes</p>"},{"location":"api/phalcon_mvc/#methods_26","title":"Methods","text":"<p><pre><code>public function __construct( mixed $options = null );\n</code></pre> Phalcon\\Mvc\\Model\\MetaData\\Memory constructor</p> <p><pre><code>public function read( string $key ): array | null;\n</code></pre> Reads the meta-data from temporal memory</p> <p><pre><code>public function write( string $key, array $data ): void;\n</code></pre> Writes the meta-data to temporal memory</p>"},{"location":"api/phalcon_mvc/#mvcmodelmetadataredis","title":"Mvc\\Model\\MetaData\\Redis","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\MetaData</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Cache\\AdapterFactory</code></li> <li><code>Phalcon\\Helper\\Arr</code></li> <li><code>Phalcon\\Mvc\\Model\\MetaData</code></li> </ul> </li> <li> <p>Extends</p> <p><code>MetaData</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\MetaData\\Redis</p> <p>Stores model meta-data in the Redis.</p> <p>By default meta-data is stored for 48 hours (172800 seconds)</p> <pre><code>use Phalcon\\Mvc\\Model\\MetaData\\Redis;\n\n$metaData = new Redis(\n    [\n        \"host\"       =&gt; \"127.0.0.1\",\n        \"port\"       =&gt; 6379,\n        \"persistent\" =&gt; 0,\n        \"lifetime\"   =&gt; 172800,\n        \"index\"      =&gt; 2,\n    ]\n);\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_27","title":"Methods","text":"<p><pre><code>public function __construct( AdapterFactory $factory, array $options = [] );\n</code></pre> Phalcon\\Mvc\\Model\\MetaData\\Redis constructor</p> <p><pre><code>public function reset(): void;\n</code></pre> Flush Redis data and resets internal meta-data in order to regenerate it</p>"},{"location":"api/phalcon_mvc/#mvcmodelmetadatastrategyannotations","title":"Mvc\\Model\\MetaData\\Strategy\\Annotations","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\MetaData\\Strategy</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\Column</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Exception</code></li> <li><code>Phalcon\\Mvc\\Model\\MetaData</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>StrategyInterface</code></li> </ul> </li> </ul> <p>This file is part of the Phalcon Framework.</p> <p>(c) Phalcon Team team@phalcon.io</p> <p>For the full copyright and license information, please view the LICENSE.txt file that was distributed with this source code.</p>"},{"location":"api/phalcon_mvc/#methods_28","title":"Methods","text":"<p><pre><code>final public function getColumnMaps( ModelInterface $model, DiInterface $container ): array;\n</code></pre> Read the model's column map, this can't be inferred</p> <p><pre><code>final public function getMetaData( ModelInterface $model, DiInterface $container ): array;\n</code></pre> The meta-data is obtained by reading the column descriptions from the database information schema</p>"},{"location":"api/phalcon_mvc/#mvcmodelmetadatastrategyintrospection","title":"Mvc\\Model\\MetaData\\Strategy\\Introspection","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\MetaData\\Strategy</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Db\\Column</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Exception</code></li> <li><code>Phalcon\\Mvc\\Model\\MetaData</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>StrategyInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Model\\MetaData\\Strategy\\Introspection</p> <p>Queries the table meta-data in order to introspect the model's metadata</p>"},{"location":"api/phalcon_mvc/#methods_29","title":"Methods","text":"<p><pre><code>final public function getColumnMaps( ModelInterface $model, DiInterface $container ): array;\n</code></pre> Read the model's column map, this can't be inferred</p> <p><pre><code>final public function getMetaData( ModelInterface $model, DiInterface $container ): array;\n</code></pre> The meta-data is obtained by reading the column descriptions from the database information schema</p>"},{"location":"api/phalcon_mvc/#mvcmodelmetadatastrategystrategyinterface","title":"Mvc\\Model\\MetaData\\Strategy\\StrategyInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\MetaData\\Strategy</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This file is part of the Phalcon Framework.</p> <p>(c) Phalcon Team team@phalcon.io</p> <p>For the full copyright and license information, please view the LICENSE.txt file that was distributed with this source code.</p>"},{"location":"api/phalcon_mvc/#methods_30","title":"Methods","text":"<p><pre><code>public function getColumnMaps( ModelInterface $model, DiInterface $container ): array;\n</code></pre> Read the model's column map, this can't be inferred</p> <p>@todo Not implemented</p> <p><pre><code>public function getMetaData( ModelInterface $model, DiInterface $container ): array;\n</code></pre> The meta-data is obtained by reading the column descriptions from the database information schema</p>"},{"location":"api/phalcon_mvc/#mvcmodelmetadatastream","title":"Mvc\\Model\\MetaData\\Stream","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\MetaData</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Mvc\\Model\\Exception</code></li> <li><code>Phalcon\\Mvc\\Model\\MetaData</code></li> </ul> </li> <li> <p>Extends</p> <p><code>MetaData</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\MetaData\\Stream</p> <p>Stores model meta-data in PHP files.</p> <pre><code>$metaData = new \\Phalcon\\Mvc\\Model\\MetaData\\Files(\n    [\n        \"metaDataDir\" =&gt; \"app/cache/metadata/\",\n    ]\n);\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_11","title":"Properties","text":"<pre><code>//\nprotected $metaDataDir = ./;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_31","title":"Methods","text":"<p><pre><code>public function __construct( mixed $options = null );\n</code></pre> Phalcon\\Mvc\\Model\\MetaData\\Files constructor</p> <p><pre><code>public function read( string $key ): array | null;\n</code></pre> Reads meta-data from files</p> <p><pre><code>public function write( string $key, array $data ): void;\n</code></pre> Writes the meta-data to files</p>"},{"location":"api/phalcon_mvc/#mvcmodelmetadatainterface","title":"Mvc\\Model\\MetaDataInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\MetaData\\Strategy\\StrategyInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\MetaDataInterface</p> <p>Interface for Phalcon\\Mvc\\Model\\MetaData</p>"},{"location":"api/phalcon_mvc/#methods_32","title":"Methods","text":"<p><pre><code>public function getAttributes( ModelInterface $model ): array;\n</code></pre> Returns table attributes names (fields)</p> <p><pre><code>public function getAutomaticCreateAttributes( ModelInterface $model ): array;\n</code></pre> Returns attributes that must be ignored from the INSERT SQL generation</p> <p><pre><code>public function getAutomaticUpdateAttributes( ModelInterface $model ): array;\n</code></pre> Returns attributes that must be ignored from the UPDATE SQL generation</p> <p><pre><code>public function getBindTypes( ModelInterface $model ): array;\n</code></pre> Returns attributes and their bind data types</p> <p><pre><code>public function getColumnMap( ModelInterface $model ): array | null;\n</code></pre> Returns the column map if any</p> <p><pre><code>public function getDataTypes( ModelInterface $model ): array;\n</code></pre> Returns attributes and their data types</p> <p><pre><code>public function getDataTypesNumeric( ModelInterface $model ): array;\n</code></pre> Returns attributes which types are numerical</p> <p><pre><code>public function getDefaultValues( ModelInterface $model ): array;\n</code></pre> Returns attributes (which have default values) and their default values</p> <p><pre><code>public function getEmptyStringAttributes( ModelInterface $model ): array;\n</code></pre> Returns attributes allow empty strings</p> <p><pre><code>public function getIdentityField( ModelInterface $model ): string | null;\n</code></pre> Returns the name of identity field (if one is present)</p> <p><pre><code>public function getNonPrimaryKeyAttributes( ModelInterface $model ): array;\n</code></pre> Returns an array of fields which are not part of the primary key</p> <p><pre><code>public function getNotNullAttributes( ModelInterface $model ): array;\n</code></pre> Returns an array of not null attributes</p> <p><pre><code>public function getPrimaryKeyAttributes( ModelInterface $model ): array;\n</code></pre> Returns an array of fields which are part of the primary key</p> <p><pre><code>public function getReverseColumnMap( ModelInterface $model ): array | null;\n</code></pre> Returns the reverse column map if any</p> <p><pre><code>public function getStrategy(): StrategyInterface;\n</code></pre> Return the strategy to obtain the meta-data</p> <p><pre><code>public function hasAttribute( ModelInterface $model, string $attribute ): bool;\n</code></pre> Check if a model has certain attribute</p> <p><pre><code>public function isEmpty(): bool;\n</code></pre> Checks if the internal meta-data container is empty</p> <p><pre><code>public function read( string $key ): array | null;\n</code></pre> Reads meta-data from the adapter</p> <p><pre><code>public function readColumnMap( ModelInterface $model ): array | null;\n</code></pre> Reads the ordered/reversed column map for certain model</p> <p><pre><code>public function readColumnMapIndex( ModelInterface $model, int $index );\n</code></pre> Reads column-map information for certain model using a MODEL_* constant</p> <p><pre><code>public function readMetaData( ModelInterface $model ): array;\n</code></pre> Reads meta-data for certain model</p> <p><pre><code>public function readMetaDataIndex( ModelInterface $model, int $index ): mixed;\n</code></pre> Reads meta-data for certain model using a MODEL_* constant</p> <p><pre><code>public function reset();\n</code></pre> Resets internal meta-data in order to regenerate it</p> <p><pre><code>public function setAutomaticCreateAttributes( ModelInterface $model, array $attributes );\n</code></pre> Set the attributes that must be ignored from the INSERT SQL generation</p> <p><pre><code>public function setAutomaticUpdateAttributes( ModelInterface $model, array $attributes );\n</code></pre> Set the attributes that must be ignored from the UPDATE SQL generation</p> <p><pre><code>public function setEmptyStringAttributes( ModelInterface $model, array $attributes ): void;\n</code></pre> Set the attributes that allow empty string values</p> <p><pre><code>public function setStrategy( StrategyInterface $strategy );\n</code></pre> Set the meta-data extraction strategy</p> <p><pre><code>public function write( string $key, array $data ): void;\n</code></pre> Writes meta-data to the adapter</p> <p><pre><code>public function writeMetaDataIndex( ModelInterface $model, int $index, mixed $data );\n</code></pre> Writes meta-data for certain model using a MODEL_* constant</p>"},{"location":"api/phalcon_mvc/#mvcmodelquery","title":"Mvc\\Model\\Query","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Db\\Column</code></li> <li><code>Phalcon\\Db\\DialectInterface</code></li> <li><code>Phalcon\\Db\\RawValue</code></li> <li><code>Phalcon\\Db\\ResultInterface</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Di\\InjectionAwareInterface</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Query\\Lang</code></li> <li><code>Phalcon\\Mvc\\Model\\Query\\Status</code></li> <li><code>Phalcon\\Mvc\\Model\\Query\\StatusInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\ResultsetInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Resultset\\Complex</code></li> <li><code>Phalcon\\Mvc\\Model\\Resultset\\Simple</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>InjectionAwareInterface</code></li> <li><code>QueryInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Model\\Query</p> <p>This class takes a PHQL intermediate representation and executes it.</p> <pre><code>$phql = \"SELECT c.price*0.16 AS taxes, c.* FROM Cars AS c JOIN Brands AS b\n         WHERE b.name = :name: ORDER BY c.name\";\n\n$result = $manager-&gt;executeQuery(\n    $phql,\n    [\n        \"name\" =&gt; \"Lamborghini\",\n    ]\n);\n\nforeach ($result as $row) {\n    echo \"Name: \",  $row-&gt;cars-&gt;name, \"\\n\";\n    echo \"Price: \", $row-&gt;cars-&gt;price, \"\\n\";\n    echo \"Taxes: \", $row-&gt;taxes, \"\\n\";\n}\n\n// with transaction\nuse Phalcon\\Mvc\\Model\\Query;\nuse Phalcon\\Mvc\\Model\\Transaction;\n\n// $di needs to have the service \"db\" registered for this to work\n$di = Phalcon\\Di\\FactoryDefault::getDefault();\n\n$phql = 'SELECTFROM robot';\n\n$myTransaction = new Transaction($di);\n$myTransaction-&gt;begin();\n\n$newRobot = new Robot();\n$newRobot-&gt;setTransaction($myTransaction);\n$newRobot-&gt;type = \"mechanical\";\n$newRobot-&gt;name = \"Astro Boy\";\n$newRobot-&gt;year = 1952;\n$newRobot-&gt;save();\n\n$queryWithTransaction = new Query($phql, $di);\n$queryWithTransaction-&gt;setTransaction($myTransaction);\n\n$resultWithEntries = $queryWithTransaction-&gt;execute();\n\n$queryWithOutTransaction = new Query($phql, $di);\n$resultWithOutEntries = $queryWithTransaction-&gt;execute();\n</code></pre>"},{"location":"api/phalcon_mvc/#constants_2","title":"Constants","text":"<pre><code>const TYPE_DELETE = 303;\nconst TYPE_INSERT = 306;\nconst TYPE_SELECT = 309;\nconst TYPE_UPDATE = 300;\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_12","title":"Properties","text":"<pre><code>//\nprotected $ast;\n\n//\nprotected $bindParams;\n\n//\nprotected $bindTypes;\n\n//\nprotected $cache;\n\n//\nprotected $cacheOptions;\n\n//\nprotected $container;\n\n//\nprotected $enableImplicitJoins;\n\n//\nprotected $intermediate;\n\n//\nprotected $manager;\n\n//\nprotected $metaData;\n\n//\nprotected $models;\n\n//\nprotected $modelsInstances;\n\n//\nprotected $nestingLevel = -1;\n\n//\nprotected $phql;\n\n//\nprotected $sharedLock;\n\n//\nprotected $sqlAliases;\n\n//\nprotected $sqlAliasesModels;\n\n//\nprotected $sqlAliasesModelsInstances;\n\n//\nprotected $sqlColumnAliases;\n\n//\nprotected $sqlModelsAliases;\n\n//\nprotected $type;\n\n//\nprotected $uniqueRow;\n\n//\nstatic protected $_irPhqlCache;\n\n/**\n * TransactionInterface so that the query can wrap a transaction\n * around batch updates and intermediate selects within the transaction.\n * however if a model got a transaction set inside it will use the local\n * transaction instead of this one\n */\nprotected $_transaction;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_33","title":"Methods","text":"<p><pre><code>public function __construct( string $phql = null, DiInterface $container = null, array $options = [] );\n</code></pre> Phalcon\\Mvc\\Model\\Query constructor</p> <p><pre><code>public function cache( array $cacheOptions ): QueryInterface;\n</code></pre> Sets the cache parameters of the query</p> <p><pre><code>public static function clean(): void;\n</code></pre> Destroys the internal PHQL cache</p> <p><pre><code>public function execute( array $bindParams = [], array $bindTypes = [] );\n</code></pre> Executes a parsed PHQL statement</p> <p><pre><code>public function getBindParams(): array;\n</code></pre> Returns default bind params</p> <p><pre><code>public function getBindTypes(): array;\n</code></pre> Returns default bind types</p> <p><pre><code>public function getCache(): AdapterInterface;\n</code></pre> Returns the current cache backend instance</p> <p><pre><code>public function getCacheOptions(): array;\n</code></pre> Returns the current cache options</p> <p><pre><code>public function getDI(): DiInterface;\n</code></pre> Returns the dependency injection container</p> <p><pre><code>public function getIntermediate(): array;\n</code></pre> Returns the intermediate representation of the PHQL statement</p> <p><pre><code>public function getSingleResult( array $bindParams = [], array $bindTypes = [] ): ModelInterface;\n</code></pre> Executes the query returning the first result</p> <p><pre><code>public function getSql(): array;\n</code></pre> Returns the SQL to be generated by the internal PHQL (only works in SELECT statements)</p> <p><pre><code>public function getType(): int;\n</code></pre> Gets the type of PHQL statement executed</p> <p><pre><code>public function getUniqueRow(): bool;\n</code></pre> Check if the query is programmed to get only the first row in the resultset</p> <pre><code>public function get_transaction()\n</code></pre> <p><pre><code>public function parse(): array;\n</code></pre> Parses the intermediate code produced by Phalcon\\Mvc\\Model\\Query\\Lang generating another intermediate representation that could be executed by Phalcon\\Mvc\\Model\\Query</p> <p><pre><code>public function setBindParams( array $bindParams, bool $merge = bool ): QueryInterface;\n</code></pre> Set default bind parameters</p> <p><pre><code>public function setBindTypes( array $bindTypes, bool $merge = bool ): QueryInterface;\n</code></pre> Set default bind parameters</p> <p><pre><code>public function setDI( DiInterface $container ): void;\n</code></pre> Sets the dependency injection container</p> <p><pre><code>public function setIntermediate( array $intermediate ): QueryInterface;\n</code></pre> Allows to set the IR to be executed</p> <p><pre><code>public function setSharedLock( bool $sharedLock = bool ): QueryInterface;\n</code></pre> Set SHARED LOCK clause</p> <p><pre><code>public function setTransaction( TransactionInterface $transaction ): QueryInterface;\n</code></pre> allows to wrap a transaction around all queries</p> <p><pre><code>public function setType( int $type ): QueryInterface;\n</code></pre> Sets the type of PHQL statement to be executed</p> <p><pre><code>public function setUniqueRow( bool $uniqueRow ): QueryInterface;\n</code></pre> Tells to the query if only the first row in the resultset must be returned</p> <p><pre><code>final protected function _executeDelete( array $intermediate, array $bindParams, array $bindTypes ): StatusInterface;\n</code></pre> Executes the DELETE intermediate representation producing a Phalcon\\Mvc\\Model\\Query\\Status</p> <p><pre><code>final protected function _executeInsert( array $intermediate, array $bindParams, array $bindTypes ): StatusInterface;\n</code></pre> Executes the INSERT intermediate representation producing a Phalcon\\Mvc\\Model\\Query\\Status</p> <p><pre><code>final protected function _executeSelect( array $intermediate, array $bindParams, array $bindTypes, bool $simulate = bool ): ResultsetInterface | array;\n</code></pre> Executes the SELECT intermediate representation producing a Phalcon\\Mvc\\Model\\Resultset</p> <p><pre><code>final protected function _executeUpdate( array $intermediate, array $bindParams, array $bindTypes ): StatusInterface;\n</code></pre> Executes the UPDATE intermediate representation producing a Phalcon\\Mvc\\Model\\Query\\Status</p> <p><pre><code>final protected function _getCallArgument( array $argument ): array;\n</code></pre> Resolves an expression in a single call argument</p> <p><pre><code>final protected function _getCaseExpression( array $expr ): array;\n</code></pre> Resolves an expression in a single call argument</p> <p><pre><code>final protected function _getExpression( array $expr, bool $quoting = bool ): string;\n</code></pre> Resolves an expression from its intermediate code into a string</p> <p><pre><code>final protected function _getFunctionCall( array $expr ): array;\n</code></pre> Resolves an expression in a single call argument</p> <p><pre><code>final protected function _getGroupClause( array $group ): array;\n</code></pre> Returns a processed group clause for a SELECT statement</p> <p><pre><code>final protected function _getJoin( ManagerInterface $manager, array $join ): array;\n</code></pre> Resolves a JOIN clause checking if the associated models exist</p> <p><pre><code>final protected function _getJoinType( array $join ): string;\n</code></pre> Resolves a JOIN type</p> <p><pre><code>final protected function _getJoins( array $select ): array;\n</code></pre> Processes the JOINs in the query returning an internal representation for the database dialect</p> <p><pre><code>final protected function _getLimitClause( array $limitClause ): array;\n</code></pre> Returns a processed limit clause for a SELECT statement</p> <p><pre><code>final protected function _getMultiJoin( string $joinType, mixed $joinSource, string $modelAlias, string $joinAlias, RelationInterface $relation ): array;\n</code></pre> Resolves joins involving many-to-many relations</p> <p><pre><code>final protected function _getOrderClause( mixed $order ): array;\n</code></pre> Returns a processed order clause for a SELECT statement</p> <p><pre><code>final protected function _getQualified( array $expr ): array;\n</code></pre> Replaces the model's name to its source name in a qualified-name expression</p> <p><pre><code>final protected function _getRelatedRecords( ModelInterface $model, array $intermediate, array $bindParams, array $bindTypes ): ResultsetInterface;\n</code></pre> Query the records on which the UPDATE/DELETE operation will be done</p> <p>@todo Remove in v5.0 @deprecated Use getRelatedRecords()</p> <p><pre><code>final protected function _getSelectColumn( array $column ): array;\n</code></pre> Resolves a column from its intermediate representation into an array used to determine if the resultset produced is simple or complex</p> <p><pre><code>final protected function _getSingleJoin( string $joinType, mixed $joinSource, string $modelAlias, string $joinAlias, RelationInterface $relation ): array;\n</code></pre> Resolves joins involving has-one/belongs-to/has-many relations</p> <p><pre><code>final protected function _getTable( ManagerInterface $manager, array $qualifiedName );\n</code></pre> Resolves a table in a SELECT statement checking if the model exists</p> <p><pre><code>final protected function _prepareDelete(): array;\n</code></pre> Analyzes a DELETE intermediate code and produces an array to be executed later</p> <p><pre><code>final protected function _prepareInsert(): array;\n</code></pre> Analyzes an INSERT intermediate code and produces an array to be executed later</p> <p><pre><code>final protected function _prepareSelect( mixed $ast = null, bool $merge = bool ): array;\n</code></pre> Analyzes a SELECT intermediate code and produces an array to be executed later</p> <p><pre><code>final protected function _prepareUpdate(): array;\n</code></pre> Analyzes an UPDATE intermediate code and produces an array to be executed later</p> <p><pre><code>protected function getReadConnection( ModelInterface $model, array $intermediate = null, array $bindParams = [], array $bindTypes = [] ): AdapterInterface;\n</code></pre> Gets the read connection from the model if there is no transaction set inside the query object</p> <p><pre><code>final protected function getRelatedRecords( ModelInterface $model, array $intermediate, array $bindParams, array $bindTypes ): ResultsetInterface;\n</code></pre> Query the records on which the UPDATE/DELETE operation will be done</p> <p><pre><code>protected function getWriteConnection( ModelInterface $model, array $intermediate = null, array $bindParams = [], array $bindTypes = [] ): AdapterInterface;\n</code></pre> Gets the write connection from the model if there is no transaction inside the query object</p>"},{"location":"api/phalcon_mvc/#mvcmodelquerybuilder","title":"Mvc\\Model\\Query\\Builder","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\Query</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\Column</code></li> <li><code>Phalcon\\Di\\Di</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Di\\InjectionAwareInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Exception</code></li> <li><code>Phalcon\\Mvc\\Model\\QueryInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>BuilderInterface</code></li> <li><code>InjectionAwareInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Model\\Query\\Builder</p> <p>Helps to create PHQL queries using an OO interface</p> <pre><code>$params = [\n    \"models\"     =&gt; [\n        Users::class,\n    ],\n    \"columns\"    =&gt; [\"id\", \"name\", \"status\"],\n    \"conditions\" =&gt; [\n        [\n            \"created &gt; :min: AND created &lt; :max:\",\n            [\n                \"min\" =&gt; \"2013-01-01\",\n                \"max\" =&gt; \"2014-01-01\",\n            ],\n            [\n                \"min\" =&gt; PDO::PARAM_STR,\n                \"max\" =&gt; PDO::PARAM_STR,\n            ],\n        ],\n    ],\n    // or \"conditions\" =&gt; \"created &gt; '2013-01-01' AND created &lt; '2014-01-01'\",\n    \"group\"      =&gt; [\"id\", \"name\"],\n    \"having\"     =&gt; \"name = 'Kamil'\",\n    \"order\"      =&gt; [\"name\", \"id\"],\n    \"limit\"      =&gt; 20,\n    \"offset\"     =&gt; 20,\n    // or \"limit\" =&gt; [20, 20],\n];\n\n$queryBuilder = new \\Phalcon\\Mvc\\Model\\Query\\Builder($params);\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_13","title":"Properties","text":"<pre><code>//\nprotected $bindParams;\n\n//\nprotected $bindTypes;\n\n//\nprotected $columns;\n\n//\nprotected $conditions;\n\n//\nprotected $container;\n\n//\nprotected $distinct;\n\n//\nprotected $forUpdate;\n\n/**\n * @var array\n */\nprotected $group;\n\n//\nprotected $having;\n\n//\nprotected $hiddenParamNumber = 0;\n\n//\nprotected $joins;\n\n//\nprotected $limit;\n\n/**\n * @var array|string\n */\nprotected $models;\n\n//\nprotected $offset;\n\n//\nprotected $order;\n\n//\nprotected $sharedLock;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_34","title":"Methods","text":"<p><pre><code>public function __construct( mixed $params = null, DiInterface $container = null );\n</code></pre> Phalcon\\Mvc\\Model\\Query\\Builder constructor</p> <p><pre><code>public function addFrom( string $model, string $alias = null ): BuilderInterface;\n</code></pre> Add a model to take part of the query</p> <pre><code>// Load data from models Robots\n$builder-&gt;addFrom(\n    Robots::class\n);\n\n// Load data from model 'Robots' using 'r' as alias in PHQL\n$builder-&gt;addFrom(\n    Robots::class,\n    \"r\"\n);\n</code></pre> <p><pre><code>public function andHaving( string $conditions, array $bindParams = [], array $bindTypes = [] ): BuilderInterface;\n</code></pre> Appends a condition to the current HAVING conditions clause using a AND operator</p> <pre><code>$builder-&gt;andHaving(\"SUM(Robots.price) &gt; 0\");\n\n$builder-&gt;andHaving(\n    \"SUM(Robots.price) &gt; :sum:\",\n    [\n        \"sum\" =&gt; 100,\n    ]\n);\n</code></pre> <p><pre><code>public function andWhere( string $conditions, array $bindParams = [], array $bindTypes = [] ): BuilderInterface;\n</code></pre> Appends a condition to the current WHERE conditions using a AND operator</p> <pre><code>$builder-&gt;andWhere(\"name = 'Peter'\");\n\n$builder-&gt;andWhere(\n    \"name = :name: AND id &gt; :id:\",\n    [\n        \"name\" =&gt; \"Peter\",\n        \"id\"   =&gt; 100,\n    ]\n);\n</code></pre> <p><pre><code>final public function autoescape( string $identifier ): string;\n</code></pre> Automatically escapes identifiers but only if they need to be escaped.</p> <p><pre><code>public function betweenHaving( string $expr, mixed $minimum, mixed $maximum, string $operator = static-constant-access ): BuilderInterface;\n</code></pre> Appends a BETWEEN condition to the current HAVING conditions clause</p> <pre><code>$builder-&gt;betweenHaving(\"SUM(Robots.price)\", 100.25, 200.50);\n</code></pre> <p><pre><code>public function betweenWhere( string $expr, mixed $minimum, mixed $maximum, string $operator = static-constant-access ): BuilderInterface;\n</code></pre> Appends a BETWEEN condition to the current WHERE conditions</p> <pre><code>$builder-&gt;betweenWhere(\"price\", 100.25, 200.50);\n</code></pre> <pre><code>public function columns( mixed $columns ): BuilderInterface;\n</code></pre> <p>Sets the columns to be queried. The columns can be either a <code>string</code> or an <code>array</code>. The string can specify one or more columns, separated by commas, the same way that one uses the SQL select statement. You can use aliases, aggregate functions etc. If you need to reference other models you will need to reference them with their namespaces.</p> <p>When using an array as a parameter, you will need to specify one field per element. If a key is defined in our array, it will be used as the alias in the query</p> <pre><code>&lt;?php\n\n// String, comma separated values\n$builder-&gt;columns(\"id, name\");\n\n// Array, one column per element\n$builder-&gt;columns(\n    [\n        \"id\",\n        \"name\",\n    ]\n);\n\n// Array, named keys. The name of the key acts as an alias (`AS` clause)\n$builder-&gt;columns(\n    [\n        \"name\",\n        \"number\" =&gt; \"COUNT(*)\",\n    ]\n);\n\n// Different models\n$builder-&gt;columns(\n    [\n        \"\\Phalcon\\Models\\Invoices.*\",\n        \"\\Phalcon\\Models\\Customers.cst_name_first\",\n        \"\\Phalcon\\Models\\Customers.cst_name_last\",\n    ]\n);\n</code></pre> <p><pre><code>public function distinct( mixed $distinct ): BuilderInterface;\n</code></pre> Sets SELECT DISTINCT / SELECT ALL flag</p> <pre><code>$builder-&gt;distinct(\"status\");\n$builder-&gt;distinct(null);\n</code></pre> <p><pre><code>public function forUpdate( bool $forUpdate ): BuilderInterface;\n</code></pre> Sets a FOR UPDATE clause</p> <pre><code>$builder-&gt;forUpdate(true);\n</code></pre> <p><pre><code>public function from( mixed $models ): BuilderInterface;\n</code></pre> Sets the models who makes part of the query</p> <pre><code>$builder-&gt;from(\n    Robots::class\n);\n\n$builder-&gt;from(\n    [\n        Robots::class,\n        RobotsParts::class,\n    ]\n);\n\n$builder-&gt;from(\n    [\n        \"r\"  =&gt; Robots::class,\n        \"rp\" =&gt; RobotsParts::class,\n    ]\n);\n</code></pre> <p><pre><code>public function getBindParams(): array;\n</code></pre> Returns default bind params</p> <p><pre><code>public function getBindTypes(): array;\n</code></pre> Returns default bind types</p> <p><pre><code>public function getColumns();\n</code></pre> Return the columns to be queried</p> <p><pre><code>public function getDI(): DiInterface;\n</code></pre> Returns the DependencyInjector container</p> <p><pre><code>public function getDistinct(): bool;\n</code></pre> Returns SELECT DISTINCT / SELECT ALL flag</p> <p><pre><code>public function getFrom();\n</code></pre> Return the models who makes part of the query</p> <p><pre><code>public function getGroupBy(): array;\n</code></pre> Returns the GROUP BY clause</p> <p><pre><code>public function getHaving(): string;\n</code></pre> Return the current having clause</p> <p><pre><code>public function getJoins(): array;\n</code></pre> Return join parts of the query</p> <p><pre><code>public function getLimit();\n</code></pre> Returns the current LIMIT clause</p> <p><pre><code>public function getModels(): string | array | null;\n</code></pre> Returns the models involved in the query</p> <p><pre><code>public function getOffset(): int;\n</code></pre> Returns the current OFFSET clause</p> <p><pre><code>public function getOrderBy();\n</code></pre> Returns the set ORDER BY clause</p> <p><pre><code>final public function getPhql(): string;\n</code></pre> Returns a PHQL statement built based on the builder parameters</p> <p><pre><code>public function getQuery(): QueryInterface;\n</code></pre> Returns the query built</p> <p><pre><code>public function getWhere();\n</code></pre> Return the conditions for the query</p> <p><pre><code>public function groupBy( mixed $group ): BuilderInterface;\n</code></pre> Sets a GROUP BY clause</p> <pre><code>$builder-&gt;groupBy(\n    [\n        \"Robots.name\",\n    ]\n);\n</code></pre> <p><pre><code>public function having( mixed $conditions, array $bindParams = [], array $bindTypes = [] ): BuilderInterface;\n</code></pre> Sets the HAVING condition clause</p> <pre><code>$builder-&gt;having(\"SUM(Robots.price) &gt; 0\");\n\n$builder-&gt;having(\n    \"SUM(Robots.price) &gt; :sum:\",\n    [\n        \"sum\" =&gt; 100,\n    ]\n);\n</code></pre> <p><pre><code>public function inHaving( string $expr, array $values, string $operator = static-constant-access ): BuilderInterface;\n</code></pre> Appends an IN condition to the current HAVING conditions clause</p> <pre><code>$builder-&gt;inHaving(\"SUM(Robots.price)\", [100, 200]);\n</code></pre> <p><pre><code>public function inWhere( string $expr, array $values, string $operator = static-constant-access ): BuilderInterface;\n</code></pre> Appends an IN condition to the current WHERE conditions</p> <pre><code>$builder-&gt;inWhere(\n    \"id\",\n    [1, 2, 3]\n);\n</code></pre> <p><pre><code>public function innerJoin( string $model, string $conditions = null, string $alias = null ): BuilderInterface;\n</code></pre> Adds an INNER join to the query</p> <pre><code>// Inner Join model 'Robots' with automatic conditions and alias\n$builder-&gt;innerJoin(\n    Robots::class\n);\n\n// Inner Join model 'Robots' specifying conditions\n$builder-&gt;innerJoin(\n    Robots::class,\n    \"Robots.id = RobotsParts.robots_id\"\n);\n\n// Inner Join model 'Robots' specifying conditions and alias\n$builder-&gt;innerJoin(\n    Robots::class,\n    \"r.id = RobotsParts.robots_id\",\n    \"r\"\n);\n</code></pre> <p><pre><code>public function join( string $model, string $conditions = null, string $alias = null, string $type = null ): BuilderInterface;\n</code></pre> Adds an :type: join (by default type - INNER) to the query</p> <pre><code>// Inner Join model 'Robots' with automatic conditions and alias\n$builder-&gt;join(\n    Robots::class\n);\n\n// Inner Join model 'Robots' specifying conditions\n$builder-&gt;join(\n    Robots::class,\n    \"Robots.id = RobotsParts.robots_id\"\n);\n\n// Inner Join model 'Robots' specifying conditions and alias\n$builder-&gt;join(\n    Robots::class,\n    \"r.id = RobotsParts.robots_id\",\n    \"r\"\n);\n\n// Left Join model 'Robots' specifying conditions, alias and type of join\n$builder-&gt;join(\n    Robots::class,\n    \"r.id = RobotsParts.robots_id\",\n    \"r\",\n    \"LEFT\"\n);\n</code></pre> <p><pre><code>public function leftJoin( string $model, string $conditions = null, string $alias = null ): BuilderInterface;\n</code></pre> Adds a LEFT join to the query</p> <pre><code>$builder-&gt;leftJoin(\n    Robots::class,\n    \"r.id = RobotsParts.robots_id\",\n    \"r\"\n);\n</code></pre> <p><pre><code>public function limit( int $limit, mixed $offset = null ): BuilderInterface;\n</code></pre> Sets a LIMIT clause, optionally an offset clause</p> <pre><code>$builder-&gt;limit(100);\n$builder-&gt;limit(100, 20);\n$builder-&gt;limit(\"100\", \"20\");\n</code></pre> <p><pre><code>public function notBetweenHaving( string $expr, mixed $minimum, mixed $maximum, string $operator = static-constant-access ): BuilderInterface;\n</code></pre> Appends a NOT BETWEEN condition to the current HAVING conditions clause</p> <pre><code>$builder-&gt;notBetweenHaving(\"SUM(Robots.price)\", 100.25, 200.50);\n</code></pre> <p><pre><code>public function notBetweenWhere( string $expr, mixed $minimum, mixed $maximum, string $operator = static-constant-access ): BuilderInterface;\n</code></pre> Appends a NOT BETWEEN condition to the current WHERE conditions</p> <pre><code>$builder-&gt;notBetweenWhere(\"price\", 100.25, 200.50);\n</code></pre> <p><pre><code>public function notInHaving( string $expr, array $values, string $operator = static-constant-access ): BuilderInterface;\n</code></pre> Appends a NOT IN condition to the current HAVING conditions clause</p> <pre><code>$builder-&gt;notInHaving(\"SUM(Robots.price)\", [100, 200]);\n</code></pre> <p><pre><code>public function notInWhere( string $expr, array $values, string $operator = static-constant-access ): BuilderInterface;\n</code></pre> Appends a NOT IN condition to the current WHERE conditions</p> <pre><code>$builder-&gt;notInWhere(\"id\", [1, 2, 3]);\n</code></pre> <p><pre><code>public function offset( int $offset ): BuilderInterface;\n</code></pre> Sets an OFFSET clause</p> <pre><code>$builder-&gt;offset(30);\n</code></pre> <p><pre><code>public function orHaving( string $conditions, array $bindParams = [], array $bindTypes = [] ): BuilderInterface;\n</code></pre> Appends a condition to the current HAVING conditions clause using an OR operator</p> <pre><code>$builder-&gt;orHaving(\"SUM(Robots.price) &gt; 0\");\n\n$builder-&gt;orHaving(\n    \"SUM(Robots.price) &gt; :sum:\",\n    [\n        \"sum\" =&gt; 100,\n    ]\n);\n</code></pre> <p><pre><code>public function orWhere( string $conditions, array $bindParams = [], array $bindTypes = [] ): BuilderInterface;\n</code></pre> Appends a condition to the current conditions using an OR operator</p> <pre><code>$builder-&gt;orWhere(\"name = 'Peter'\");\n\n$builder-&gt;orWhere(\n    \"name = :name: AND id &gt; :id:\",\n    [\n        \"name\" =&gt; \"Peter\",\n        \"id\"   =&gt; 100,\n    ]\n);\n</code></pre> <p><pre><code>public function orderBy( mixed $orderBy ): BuilderInterface;\n</code></pre> Sets an ORDER BY condition clause</p> <pre><code>$builder-&gt;orderBy(\"Robots.name\");\n$builder-&gt;orderBy([\"1\", \"Robots.name\"]);\n$builder-&gt;orderBy([\"Robots.name DESC\"]);\n</code></pre> <p><pre><code>public function rightJoin( string $model, string $conditions = null, string $alias = null ): BuilderInterface;\n</code></pre> Adds a RIGHT join to the query</p> <pre><code>$builder-&gt;rightJoin(\n    Robots::class,\n    \"r.id = RobotsParts.robots_id\",\n    \"r\"\n);\n</code></pre> <p><pre><code>public function setBindParams( array $bindParams, bool $merge = bool ): BuilderInterface;\n</code></pre> Set default bind parameters</p> <p><pre><code>public function setBindTypes( array $bindTypes, bool $merge = bool ): BuilderInterface;\n</code></pre> Set default bind types</p> <p><pre><code>public function setDI( DiInterface $container ): void;\n</code></pre> Sets the DependencyInjector container</p> <p><pre><code>public function where( string $conditions, array $bindParams = [], array $bindTypes = [] ): BuilderInterface;\n</code></pre> Sets the query WHERE conditions</p> <pre><code>$builder-&gt;where(100);\n\n$builder-&gt;where(\"name = 'Peter'\");\n\n$builder-&gt;where(\n    \"name = :name: AND id &gt; :id:\",\n    [\n        \"name\" =&gt; \"Peter\",\n        \"id\"   =&gt; 100,\n    ]\n);\n</code></pre> <p><pre><code>protected function conditionBetween( string $clause, string $operator, string $expr, mixed $minimum, mixed $maximum ): BuilderInterface;\n</code></pre> Appends a BETWEEN condition</p> <p><pre><code>protected function conditionIn( string $clause, string $operator, string $expr, array $values ): BuilderInterface;\n</code></pre> Appends an IN condition</p> <p><pre><code>protected function conditionNotBetween( string $clause, string $operator, string $expr, mixed $minimum, mixed $maximum ): BuilderInterface;\n</code></pre> Appends a NOT BETWEEN condition</p> <p><pre><code>protected function conditionNotIn( string $clause, string $operator, string $expr, array $values ): BuilderInterface;\n</code></pre> Appends a NOT IN condition</p>"},{"location":"api/phalcon_mvc/#mvcmodelquerybuilderinterface","title":"Mvc\\Model\\Query\\BuilderInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\Query</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Mvc\\Model\\QueryInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\Query\\BuilderInterface</p> <p>Interface for Phalcon\\Mvc\\Model\\Query\\Builder</p>"},{"location":"api/phalcon_mvc/#constants_3","title":"Constants","text":"<pre><code>const OPERATOR_AND = and;\nconst OPERATOR_OR = or;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_35","title":"Methods","text":"<p><pre><code>public function addFrom( string $model, string $alias = null ): BuilderInterface;\n</code></pre> Add a model to take part of the query</p> <p><pre><code>public function andWhere( string $conditions, array $bindParams = [], array $bindTypes = [] ): BuilderInterface;\n</code></pre> Appends a condition to the current conditions using a AND operator</p> <p><pre><code>public function betweenWhere( string $expr, mixed $minimum, mixed $maximum, string $operator = static-constant-access ): BuilderInterface;\n</code></pre> Appends a BETWEEN condition to the current conditions</p> <p><pre><code>public function columns( mixed $columns ): BuilderInterface;\n</code></pre> Sets the columns to be queried. The columns can be either a <code>string</code> or an <code>array</code>. The string can specify one or more columns, separated by commas, the same way that one uses the SQL select statement. You can use aliases, aggregate functions etc. If you need to reference other models you will need to reference them with their namespaces.</p> <p>When using an array as a parameter, you will need to specify one field per element. If a key is defined in our array, it will be used as the alias in the query</p> <pre><code>&lt;?php\n\n// String, comma separated values\n$builder-&gt;columns(\"id, name\");\n\n// Array, one column per element\n$builder-&gt;columns(\n    [\n        \"id\",\n        \"name\",\n    ]\n);\n\n// Array, named keys. The name of the key acts as an alias (`AS` clause)\n$builder-&gt;columns(\n    [\n        \"name\",\n        \"number\" =&gt; \"COUNT(*)\",\n    ]\n);\n\n// Different models\n$builder-&gt;columns(\n    [\n        \"\\Phalcon\\Models\\Invoices.*\",\n        \"\\Phalcon\\Models\\Customers.cst_name_first\",\n        \"\\Phalcon\\Models\\Customers.cst_name_last\",\n    ]\n);\n</code></pre> <p><pre><code>public function distinct( mixed $distinct ): BuilderInterface;\n</code></pre> Sets SELECT DISTINCT / SELECT ALL flag</p> <pre><code>$builder-&gt;distinct(\"status\");\n$builder-&gt;distinct(null);\n</code></pre> <p><pre><code>public function forUpdate( bool $forUpdate ): BuilderInterface;\n</code></pre> Sets a FOR UPDATE clause</p> <pre><code>$builder-&gt;forUpdate(true);\n</code></pre> <p><pre><code>public function from( mixed $models ): BuilderInterface;\n</code></pre> Sets the models who makes part of the query</p> <p><pre><code>public function getBindParams(): array;\n</code></pre> Returns default bind params</p> <p><pre><code>public function getBindTypes(): array;\n</code></pre> Returns default bind types</p> <p><pre><code>public function getColumns();\n</code></pre> Return the columns to be queried</p> <p><pre><code>public function getDistinct(): bool;\n</code></pre> Returns SELECT DISTINCT / SELECT ALL flag</p> <p><pre><code>public function getFrom();\n</code></pre> Return the models who makes part of the query</p> <p><pre><code>public function getGroupBy(): array;\n</code></pre> Returns the GROUP BY clause</p> <p><pre><code>public function getHaving(): string;\n</code></pre> Returns the HAVING condition clause</p> <p><pre><code>public function getJoins(): array;\n</code></pre> Return join parts of the query</p> <p><pre><code>public function getLimit();\n</code></pre> Returns the current LIMIT clause</p> <p><pre><code>public function getModels(): string | array | null;\n</code></pre> Returns the models involved in the query</p> <p><pre><code>public function getOffset(): int;\n</code></pre> Returns the current OFFSET clause</p> <p><pre><code>public function getOrderBy();\n</code></pre> Return the set ORDER BY clause</p> <p><pre><code>public function getPhql(): string;\n</code></pre> Returns a PHQL statement built based on the builder parameters</p> <p><pre><code>public function getQuery(): QueryInterface;\n</code></pre> Returns the query built</p> <p><pre><code>public function getWhere();\n</code></pre> Return the conditions for the query</p> <p><pre><code>public function groupBy( mixed $group ): BuilderInterface;\n</code></pre> Sets a GROUP BY clause</p> <p><pre><code>public function having( string $having ): BuilderInterface;\n</code></pre> Sets a HAVING condition clause</p> <p><pre><code>public function inWhere( string $expr, array $values, string $operator = static-constant-access ): BuilderInterface;\n</code></pre> Appends an IN condition to the current conditions</p> <p><pre><code>public function innerJoin( string $model, string $conditions = null, string $alias = null ): BuilderInterface;\n</code></pre> Adds an INNER join to the query</p> <p><pre><code>public function join( string $model, string $conditions = null, string $alias = null ): BuilderInterface;\n</code></pre> Adds an :type: join (by default type - INNER) to the query</p> <p><pre><code>public function leftJoin( string $model, string $conditions = null, string $alias = null ): BuilderInterface;\n</code></pre> Adds a LEFT join to the query</p> <p><pre><code>public function limit( int $limit, mixed $offset = null ): BuilderInterface;\n</code></pre> Sets a LIMIT clause</p> <p><pre><code>public function notBetweenWhere( string $expr, mixed $minimum, mixed $maximum, string $operator = static-constant-access ): BuilderInterface;\n</code></pre> Appends a NOT BETWEEN condition to the current conditions</p> <p><pre><code>public function notInWhere( string $expr, array $values, string $operator = static-constant-access ): BuilderInterface;\n</code></pre> Appends a NOT IN condition to the current conditions</p> <p><pre><code>public function offset( int $offset ): BuilderInterface;\n</code></pre> Sets an OFFSET clause</p> <p><pre><code>public function orWhere( string $conditions, array $bindParams = [], array $bindTypes = [] ): BuilderInterface;\n</code></pre> Appends a condition to the current conditions using an OR operator</p> <p><pre><code>public function orderBy( string $orderBy ): BuilderInterface;\n</code></pre> Sets an ORDER BY condition clause</p> <p><pre><code>public function rightJoin( string $model, string $conditions = null, string $alias = null ): BuilderInterface;\n</code></pre> Adds a RIGHT join to the query</p> <p><pre><code>public function setBindParams( array $bindParams, bool $merge = bool ): BuilderInterface;\n</code></pre> Set default bind parameters</p> <p><pre><code>public function setBindTypes( array $bindTypes, bool $merge = bool ): BuilderInterface;\n</code></pre> Set default bind types</p> <p><pre><code>public function where( string $conditions, array $bindParams = [], array $bindTypes = [] ): BuilderInterface;\n</code></pre> Sets conditions for the query</p>"},{"location":"api/phalcon_mvc/#mvcmodelquerylang","title":"Mvc\\Model\\Query\\Lang","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\Query</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\Query\\Lang</p> <p>PHQL is implemented as a parser (written in C) that translates syntax in that of the target RDBMS. It allows Phalcon to offer a unified SQL language to the developer, while internally doing all the work of translating PHQL instructions to the most optimal SQL instructions depending on the RDBMS type associated with a model.</p> <p>To achieve the highest performance possible, we wrote a parser that uses the same technology as SQLite. This technology provides a small in-memory parser with a very low memory footprint that is also thread-safe.</p> <pre><code>use Phalcon\\Mvc\\Model\\Query\\Lang;\n\n$intermediate = Lang::parsePHQL(\n    \"SELECT r.* FROM Robots r LIMIT 10\"\n);\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_36","title":"Methods","text":"<p><pre><code>public static function parsePHQL( string $phql ): array;\n</code></pre> Parses a PHQL statement returning an intermediate representation (IR)</p>"},{"location":"api/phalcon_mvc/#mvcmodelquerystatus","title":"Mvc\\Model\\Query\\Status","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\Query</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Messages\\MessageInterface</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>StatusInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Model\\Query\\Status</p> <p>This class represents the status returned by a PHQL statement like INSERT, UPDATE or DELETE. It offers context information and the related messages produced by the model which finally executes the operations when it fails</p> <pre><code>$phql = \"UPDATE Robots SET name = :name:, type = :type:, year = :year: WHERE id = :id:\";\n\n$status = $app-&gt;modelsManager-&gt;executeQuery(\n    $phql,\n    [\n        \"id\"   =&gt; 100,\n        \"name\" =&gt; \"Astroy Boy\",\n        \"type\" =&gt; \"mechanical\",\n        \"year\" =&gt; 1959,\n    ]\n);\n\n// Check if the update was successful\nif ($status-&gt;success()) {\n    echo \"OK\";\n}\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_14","title":"Properties","text":"<pre><code>//\nprotected $model;\n\n//\nprotected $success;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_37","title":"Methods","text":"<p><pre><code>public function __construct( bool $success, ModelInterface $model = null );\n</code></pre> Phalcon\\Mvc\\Model\\Query\\Status</p> <p><pre><code>public function getMessages(): MessageInterface[];\n</code></pre> Returns the messages produced because of a failed operation</p> <p><pre><code>public function getModel(): ModelInterface;\n</code></pre> Returns the model that executed the action</p> <p><pre><code>public function success(): bool;\n</code></pre> Allows to check if the executed operation was successful</p>"},{"location":"api/phalcon_mvc/#mvcmodelquerystatusinterface","title":"Mvc\\Model\\Query\\StatusInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\Query</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Messages\\MessageInterface</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\Query\\StatusInterface</p> <p>Interface for Phalcon\\Mvc\\Model\\Query\\Status</p>"},{"location":"api/phalcon_mvc/#methods_38","title":"Methods","text":"<p><pre><code>public function getMessages(): MessageInterface[];\n</code></pre> Returns the messages produced by an operation failed</p> <p><pre><code>public function getModel(): ModelInterface;\n</code></pre> Returns the model which executed the action</p> <p><pre><code>public function success(): bool;\n</code></pre> Allows to check if the executed operation was successful</p>"},{"location":"api/phalcon_mvc/#mvcmodelqueryinterface","title":"Mvc\\Model\\QueryInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\QueryInterface</p> <p>Interface for Phalcon\\Mvc\\Model\\Query</p>"},{"location":"api/phalcon_mvc/#methods_39","title":"Methods","text":"<p><pre><code>public function cache( array $cacheOptions ): QueryInterface;\n</code></pre> Sets the cache parameters of the query</p> <p><pre><code>public function execute( array $bindParams = [], array $bindTypes = [] );\n</code></pre> Executes a parsed PHQL statement</p> <p><pre><code>public function getBindParams(): array;\n</code></pre> Returns default bind params</p> <p><pre><code>public function getBindTypes(): array;\n</code></pre> Returns default bind types</p> <p><pre><code>public function getCacheOptions(): array;\n</code></pre> Returns the current cache options</p> <p><pre><code>public function getSingleResult( array $bindParams = [], array $bindTypes = [] ): ModelInterface;\n</code></pre> Executes the query returning the first result</p> <p><pre><code>public function getSql(): array;\n</code></pre> Returns the SQL to be generated by the internal PHQL (only works in SELECT statements)</p> <p><pre><code>public function getUniqueRow(): bool;\n</code></pre> Check if the query is programmed to get only the first row in the resultset</p> <p><pre><code>public function parse(): array;\n</code></pre> Parses the intermediate code produced by Phalcon\\Mvc\\Model\\Query\\Lang generating another intermediate representation that could be executed by Phalcon\\Mvc\\Model\\Query</p> <p><pre><code>public function setBindParams( array $bindParams, bool $merge = bool ): QueryInterface;\n</code></pre> Set default bind parameters</p> <p><pre><code>public function setBindTypes( array $bindTypes, bool $merge = bool ): QueryInterface;\n</code></pre> Set default bind parameters</p> <p><pre><code>public function setSharedLock( bool $sharedLock = bool ): QueryInterface;\n</code></pre> Set SHARED LOCK clause</p> <p><pre><code>public function setUniqueRow( bool $uniqueRow ): QueryInterface;\n</code></pre> Tells to the query if only the first row in the resultset must be returned</p>"},{"location":"api/phalcon_mvc/#mvcmodelrelation","title":"Mvc\\Model\\Relation","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>RelationInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Model\\Relation</p> <p>This class represents a relationship between two models</p>"},{"location":"api/phalcon_mvc/#constants_4","title":"Constants","text":"<pre><code>const ACTION_CASCADE = 2;\nconst ACTION_RESTRICT = 1;\nconst BELONGS_TO = 0;\nconst HAS_MANY = 2;\nconst HAS_MANY_THROUGH = 4;\nconst HAS_ONE = 1;\nconst HAS_ONE_THROUGH = 3;\nconst NO_ACTION = 0;\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_15","title":"Properties","text":"<pre><code>//\nprotected $fields;\n\n//\nprotected $intermediateFields;\n\n//\nprotected $intermediateModel;\n\n//\nprotected $intermediateReferencedFields;\n\n//\nprotected $options;\n\n//\nprotected $referencedFields;\n\n//\nprotected $referencedModel;\n\n//\nprotected $type;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_40","title":"Methods","text":"<p><pre><code>public function __construct( int $type, string $referencedModel, mixed $fields, mixed $referencedFields, array $options = [] );\n</code></pre> Phalcon\\Mvc\\Model\\Relation constructor</p> <p><pre><code>public function getFields();\n</code></pre> Returns the fields</p> <p><pre><code>public function getForeignKey();\n</code></pre> Returns the foreign key configuration</p> <p><pre><code>public function getIntermediateFields();\n</code></pre> Gets the intermediate fields for has-*-through relations</p> <p><pre><code>public function getIntermediateModel(): string;\n</code></pre> Gets the intermediate model for has-*-through relations</p> <p><pre><code>public function getIntermediateReferencedFields();\n</code></pre> Gets the intermediate referenced fields for has-*-through relations</p> <p><pre><code>public function getOption( string $name );\n</code></pre> Returns an option by the specified name If the option doesn't exist null is returned</p> <p><pre><code>public function getOptions(): array;\n</code></pre> Returns the options</p> <p><pre><code>public function getParams();\n</code></pre> Returns parameters that must be always used when the related records are obtained</p> <p><pre><code>public function getReferencedFields();\n</code></pre> Returns the referenced fields</p> <p><pre><code>public function getReferencedModel(): string;\n</code></pre> Returns the referenced model</p> <p><pre><code>public function getType(): int;\n</code></pre> Returns the relation type</p> <p><pre><code>public function isForeignKey(): bool;\n</code></pre> Check whether the relation act as a foreign key</p> <p><pre><code>public function isReusable(): bool;\n</code></pre> Check if records returned by getting belongs-to/has-many are implicitly cached during the current request</p> <p><pre><code>public function isThrough(): bool;\n</code></pre> Check whether the relation is a 'many-to-many' relation or not</p> <p><pre><code>public function setIntermediateRelation( mixed $intermediateFields, string $intermediateModel, mixed $intermediateReferencedFields );\n</code></pre> Sets the intermediate model data for has-*-through relations</p>"},{"location":"api/phalcon_mvc/#mvcmodelrelationinterface","title":"Mvc\\Model\\RelationInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\RelationInterface</p> <p>Interface for Phalcon\\Mvc\\Model\\Relation</p>"},{"location":"api/phalcon_mvc/#methods_41","title":"Methods","text":"<p><pre><code>public function getFields();\n</code></pre> Returns the fields</p> <p><pre><code>public function getForeignKey();\n</code></pre> Returns the foreign key configuration</p> <p><pre><code>public function getIntermediateFields();\n</code></pre> Gets the intermediate fields for has-*-through relations</p> <p><pre><code>public function getIntermediateModel(): string;\n</code></pre> Gets the intermediate model for has-*-through relations</p> <p><pre><code>public function getIntermediateReferencedFields();\n</code></pre> Gets the intermediate referenced fields for has-*-through relations</p> <p><pre><code>public function getOption( string $name );\n</code></pre> Returns an option by the specified name If the option doesn't exist null is returned</p> <p><pre><code>public function getOptions(): array;\n</code></pre> Returns the options</p> <p><pre><code>public function getParams();\n</code></pre> Returns parameters that must be always used when the related records are obtained</p> <p><pre><code>public function getReferencedFields();\n</code></pre> Returns the referenced fields</p> <p><pre><code>public function getReferencedModel(): string;\n</code></pre> Returns the referenced model</p> <p><pre><code>public function getType(): int;\n</code></pre> Returns the relations type</p> <p><pre><code>public function isForeignKey(): bool;\n</code></pre> Check whether the relation act as a foreign key</p> <p><pre><code>public function isReusable(): bool;\n</code></pre> Check if records returned by getting belongs-to/has-many are implicitly cached during the current request</p> <p><pre><code>public function isThrough(): bool;\n</code></pre> Check whether the relation is a 'many-to-many' relation or not</p> <p><pre><code>public function setIntermediateRelation( mixed $intermediateFields, string $intermediateModel, mixed $intermediateReferencedFields );\n</code></pre> Sets the intermediate model data for has-*-through relations</p>"},{"location":"api/phalcon_mvc/#mvcmodelresultinterface","title":"Mvc\\Model\\ResultInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\ResultInterface</p> <p>All single objects passed as base objects to Resultsets must implement this interface</p>"},{"location":"api/phalcon_mvc/#methods_42","title":"Methods","text":"<p><pre><code>public function setDirtyState( int $dirtyState ): ModelInterface | bool;\n</code></pre> Sets the object's state</p>"},{"location":"api/phalcon_mvc/#mvcmodelresultset","title":"Mvc\\Model\\Resultset","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>ArrayAccess</code></li> <li><code>Closure</code></li> <li><code>Countable</code></li> <li><code>Iterator</code></li> <li><code>JsonSerializable</code></li> <li><code>Phalcon\\Cache\\CacheInterface</code></li> <li><code>Phalcon\\Db\\Enum</code></li> <li><code>Phalcon\\Messages\\MessageInterface</code></li> <li><code>Phalcon\\Mvc\\Model</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> <li><code>Phalcon\\Storage\\Serializer\\SerializerInterface</code></li> <li><code>SeekableIterator</code></li> <li><code>Serializable</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>ArrayAccess</code></li> <li><code>Countable</code></li> <li><code>Iterator</code></li> <li><code>JsonSerializable</code></li> <li><code>ResultsetInterface</code></li> <li><code>SeekableIterator</code></li> <li><code>Serializable</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Model\\Resultset</p> <p>This component allows to Phalcon\\Mvc\\Model returns large resultsets with the minimum memory consumption Resultsets can be traversed using a standard foreach or a while statement. If a resultset is serialized it will dump all the rows into a big array. Then unserialize will retrieve the rows as they were before serializing.</p> <pre><code>// Using a standard foreach\n$robots = Robots::find(\n    [\n        \"type = 'virtual'\",\n        \"order\" =&gt; \"name\",\n    ]\n);\n\nforeach ($robots as robot) {\n    echo robot-&gt;name, \"\\n\";\n}\n\n// Using a while\n$robots = Robots::find(\n    [\n        \"type = 'virtual'\",\n        \"order\" =&gt; \"name\",\n    ]\n);\n\n$robots-&gt;rewind();\n\nwhile ($robots-&gt;valid()) {\n    $robot = $robots-&gt;current();\n\n    echo $robot-&gt;name, \"\\n\";\n\n    $robots-&gt;next();\n}\n</code></pre>"},{"location":"api/phalcon_mvc/#constants_5","title":"Constants","text":"<pre><code>const HYDRATE_ARRAYS = 1;\nconst HYDRATE_OBJECTS = 2;\nconst HYDRATE_RECORDS = 0;\nconst TYPE_RESULT_FULL = 0;\nconst TYPE_RESULT_PARTIAL = 1;\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_16","title":"Properties","text":"<pre><code>//\nprotected $activeRow;\n\n//\nprotected $cache;\n\n//\nprotected $count = 0;\n\n//\nprotected $errorMessages;\n\n//\nprotected $hydrateMode = 0;\n\n//\nprotected $isFresh = true;\n\n//\nprotected $pointer = 0;\n\n//\nprotected $row;\n\n//\nprotected $rows;\n\n/**\n * Phalcon\\Db\\ResultInterface or false for empty resultset\n */\nprotected $result;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_43","title":"Methods","text":"<p><pre><code>public function __construct( mixed $result, AdapterInterface $cache = null );\n</code></pre> Phalcon\\Mvc\\Model\\Resultset constructor</p> <p><pre><code>final public function count(): int;\n</code></pre> Counts how many rows are in the resultset</p> <p><pre><code>public function delete( Closure $conditionCallback = null ): bool;\n</code></pre> Deletes every record in the resultset</p> <p><pre><code>public function filter( callable $filter ): ModelInterface[];\n</code></pre> Filters a resultset returning only those the developer requires</p> <pre><code>$filtered = $robots-&gt;filter(\n    function ($robot) {\n        if ($robot-&gt;id &lt; 3) {\n            return $robot;\n        }\n    }\n);\n</code></pre> <p><pre><code>public function getCache(): AdapterInterface;\n</code></pre> Returns the associated cache for the resultset</p> <p><pre><code>public function getFirst(): mixed | null;\n</code></pre> Get first row in the resultset</p> <pre><code>$model = new Robots();\n$manager = $model-&gt;getModelsManager();\n\n// \\Robots\n$manager-&gt;createQuery('SELECTFROM Robots')\n        -&gt;execute()\n        -&gt;getFirst();\n\n// \\Phalcon\\Mvc\\Model\\Row\n$manager-&gt;createQuery('SELECT r.id FROM Robots AS r')\n        -&gt;execute()\n        -&gt;getFirst();\n\n// NULL\n$manager-&gt;createQuery('SELECT r.id FROM Robots AS r WHERE r.name = \"NON-EXISTENT\"')\n        -&gt;execute()\n        -&gt;getFirst();\n</code></pre> <p><pre><code>public function getHydrateMode(): int;\n</code></pre> Returns the current hydration mode</p> <p><pre><code>public function getLast(): ModelInterface | null;\n</code></pre> Get last row in the resultset</p> <p><pre><code>public function getMessages(): MessageInterface[];\n</code></pre> Returns the error messages produced by a batch operation</p> <p><pre><code>public function getType(): int;\n</code></pre> Returns the internal type of data retrieval that the resultset is using</p> <p><pre><code>public function isFresh(): bool;\n</code></pre> Tell if the resultset if fresh or an old one cached</p> <p><pre><code>public function jsonSerialize(): array;\n</code></pre> Returns serialised model objects as array for json_encode. Calls jsonSerialize on each object if present</p> <pre><code>$robots = Robots::find();\n\necho json_encode($robots);\n</code></pre> <p><pre><code>public function key(): int | null;\n</code></pre> Gets pointer number of active row in the resultset</p> <p><pre><code>public function next(): void;\n</code></pre> Moves cursor to next row in the resultset</p> <p><pre><code>public function offsetExists( mixed $index ): bool;\n</code></pre> Checks whether offset exists in the resultset</p> <p><pre><code>public function offsetGet( mixed $index ): ModelInterface | bool;\n</code></pre> Gets row in a specific position of the resultset</p> <p><pre><code>public function offsetSet( mixed $index, mixed $value ): void;\n</code></pre> Resultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <p><pre><code>public function offsetUnset( mixed $offset ): void;\n</code></pre> Resultsets cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <p><pre><code>final public function rewind(): void;\n</code></pre> Rewinds resultset to its beginning</p> <p><pre><code>final public function seek( mixed $position ): void;\n</code></pre> Changes the internal pointer to a specific position in the resultset. Set the new position if required, and then set this-&gt;row</p> <p><pre><code>public function setHydrateMode( int $hydrateMode ): ResultsetInterface;\n</code></pre> Sets the hydration mode in the resultset</p> <p><pre><code>public function setIsFresh( bool $isFresh ): ResultsetInterface;\n</code></pre> Set if the resultset is fresh or an old one cached</p> <p><pre><code>public function update( mixed $data, Closure $conditionCallback = null ): bool;\n</code></pre> Updates every record in the resultset</p> <p><pre><code>public function valid(): bool;\n</code></pre> Check whether internal resource has rows to fetch</p>"},{"location":"api/phalcon_mvc/#mvcmodelresultsetcomplex","title":"Mvc\\Model\\Resultset\\Complex","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\Resultset</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\ResultInterface</code></li> <li><code>Phalcon\\Di\\Di</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Mvc\\Model</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Exception</code></li> <li><code>Phalcon\\Mvc\\Model\\Resultset</code></li> <li><code>Phalcon\\Mvc\\Model\\ResultsetInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Row</code></li> <li><code>Phalcon\\Storage\\Serializer\\SerializerInterface</code></li> <li><code>stdClass</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Resultset</code></p> </li> <li> <p>Implements</p> <ul> <li><code>ResultsetInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Model\\Resultset\\Complex</p> <p>Complex resultsets may include complete objects and scalar values. This class builds every complex row as it is required</p>"},{"location":"api/phalcon_mvc/#properties_17","title":"Properties","text":"<pre><code>//\nprotected $columnTypes;\n\n/**\n * Unserialised result-set hydrated all rows already. unserialise() sets\n * disableHydration to true\n */\nprotected $disableHydration = false;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_44","title":"Methods","text":"<p><pre><code>public function __construct( mixed $columnTypes, ResultInterface $result = null, AdapterInterface $cache = null );\n</code></pre> Phalcon\\Mvc\\Model\\Resultset\\Complex constructor</p> <p><pre><code>final public function current(): ModelInterface | bool;\n</code></pre> Returns current row in the resultset</p> <p><pre><code>public function serialize(): string;\n</code></pre> Serializing a resultset will dump all related rows into a big array</p> <p><pre><code>public function toArray(): array;\n</code></pre> Returns a complete resultset as an array, if the resultset has a big number of rows it could consume more memory than currently it does.</p> <p><pre><code>public function unserialize( mixed $data ): void;\n</code></pre> Unserializing a resultset will allow to only works on the rows present in the saved state</p>"},{"location":"api/phalcon_mvc/#mvcmodelresultsetsimple","title":"Mvc\\Model\\Resultset\\Simple","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\Resultset</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\Di</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Mvc\\Model</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Exception</code></li> <li><code>Phalcon\\Mvc\\Model\\Resultset</code></li> <li><code>Phalcon\\Mvc\\Model\\Row</code></li> <li><code>Phalcon\\Storage\\Serializer\\SerializerInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Resultset</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\Resultset\\Simple</p> <p>Simple resultsets only contains a complete objects This class builds every complete object as it is required</p>"},{"location":"api/phalcon_mvc/#properties_18","title":"Properties","text":"<pre><code>//\nprotected $columnMap;\n\n//\nprotected $model;\n\n/**\n * @var bool\n */\nprotected $keepSnapshots = false;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_45","title":"Methods","text":"<p><pre><code>public function __construct( mixed $columnMap, mixed $model, mixed $result, AdapterInterface $cache = null, bool $keepSnapshots = null );\n</code></pre> Phalcon\\Mvc\\Model\\Resultset\\Simple constructor</p> <p><pre><code>final public function current(): ModelInterface | null;\n</code></pre> Returns current row in the resultset</p> <p><pre><code>public function serialize(): string;\n</code></pre> Serializing a resultset will dump all related rows into a big array</p> <p><pre><code>public function toArray( bool $renameColumns = bool ): array;\n</code></pre> Returns a complete resultset as an array, if the resultset has a big number of rows it could consume more memory than currently it does. Export the resultset to an array couldn't be faster with a large number of records</p> <p><pre><code>public function unserialize( mixed $data ): void;\n</code></pre> Unserializing a resultset will allow to only works on the rows present in the saved state</p>"},{"location":"api/phalcon_mvc/#mvcmodelresultsetinterface","title":"Mvc\\Model\\ResultsetInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Closure</code></li> <li><code>Phalcon\\Messages\\MessageInterface</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\ResultsetInterface</p> <p>Interface for Phalcon\\Mvc\\Model\\Resultset</p>"},{"location":"api/phalcon_mvc/#methods_46","title":"Methods","text":"<p><pre><code>public function delete( Closure $conditionCallback = null ): bool;\n</code></pre> Deletes every record in the resultset</p> <p><pre><code>public function filter( callable $filter ): ModelInterface[];\n</code></pre> Filters a resultset returning only those the developer requires</p> <pre><code>$filtered = $robots-&gt;filter(\n    function ($robot) {\n        if ($robot-&gt;id &lt; 3) {\n            return $robot;\n        }\n    }\n);\n</code></pre> <p><pre><code>public function getCache(): AdapterInterface;\n</code></pre> Returns the associated cache for the resultset</p> <p><pre><code>public function getFirst(): mixed | null;\n</code></pre> Get first row in the resultset</p> <p><pre><code>public function getHydrateMode(): int;\n</code></pre> Returns the current hydration mode</p> <p><pre><code>public function getLast(): ModelInterface | null;\n</code></pre> Get last row in the resultset</p> <p><pre><code>public function getMessages(): MessageInterface[];\n</code></pre> Returns the error messages produced by a batch operation</p> <p><pre><code>public function getType(): int;\n</code></pre> Returns the internal type of data retrieval that the resultset is using</p> <p><pre><code>public function isFresh(): bool;\n</code></pre> Tell if the resultset if fresh or an old one cached</p> <p><pre><code>public function setHydrateMode( int $hydrateMode ): ResultsetInterface;\n</code></pre> Sets the hydration mode in the resultset</p> <p><pre><code>public function setIsFresh( bool $isFresh ): ResultsetInterface;\n</code></pre> Set if the resultset is fresh or an old one cached</p> <p><pre><code>public function toArray(): array;\n</code></pre> Returns a complete resultset as an array, if the resultset has a big number of rows it could consume more memory than currently it does.</p> <p><pre><code>public function update( mixed $data, Closure $conditionCallback = null ): bool;\n</code></pre> Updates every record in the resultset</p>"},{"location":"api/phalcon_mvc/#mvcmodelrow","title":"Mvc\\Model\\Row","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>ArrayAccess</code></li> <li><code>JsonSerializable</code></li> <li><code>Phalcon\\Mvc\\EntityInterface</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>ArrayAccess</code></li> <li><code>EntityInterface</code></li> <li><code>JsonSerializable</code></li> <li><code>ResultInterface</code></li> </ul> </li> </ul> <p>This component allows Phalcon\\Mvc\\Model to return rows without an associated entity. This objects implements the ArrayAccess interface to allow access the object as object-&gt;x or array[x].</p>"},{"location":"api/phalcon_mvc/#methods_47","title":"Methods","text":"<p><pre><code>public function jsonSerialize(): array;\n</code></pre>    Serializes the object for json_encode</p> <p><pre><code>public function offsetExists( mixed $index ): bool;\n</code></pre> Checks whether offset exists in the row</p> <p><pre><code>public function offsetGet( mixed $index ): mixed;\n</code></pre> Gets a record in a specific position of the row</p> <p><pre><code>public function offsetSet( mixed $index, mixed $value ): void;\n</code></pre> Rows cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <p><pre><code>public function offsetUnset( mixed $offset ): void;\n</code></pre> Rows cannot be changed. It has only been implemented to meet the definition of the ArrayAccess interface</p> <p><pre><code>public function readAttribute( string $attribute );\n</code></pre> Reads an attribute value by its name</p> <pre><code>echo $robot-&gt;readAttribute(\"name\");\n</code></pre> <p><pre><code>public function setDirtyState( int $dirtyState ): ModelInterface | bool;\n</code></pre> Set the current object's state</p> <p><pre><code>public function toArray(): array;\n</code></pre> Returns the instance as an array representation</p> <p><pre><code>public function writeAttribute( string $attribute, mixed $value ): void;\n</code></pre> Writes an attribute value by its name</p> <pre><code>$robot-&gt;writeAttribute(\"name\", \"Rosey\");\n</code></pre>"},{"location":"api/phalcon_mvc/#mvcmodeltransaction","title":"Mvc\\Model\\Transaction","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\TransactionInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Transaction\\Failed</code></li> <li><code>Phalcon\\Mvc\\Model\\Transaction\\ManagerInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>TransactionInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Model\\Transaction</p> <p>Transactions are protective blocks where SQL statements are only permanent if they can all succeed as one atomic action. Phalcon\\Transaction is intended to be used with Phalcon_Model_Base. Phalcon Transactions should be created using Phalcon\\Transaction\\Manager.</p> <pre><code>use Phalcon\\Mvc\\Model\\Transaction\\Failed;\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager;\n\ntry {\n    $manager = new Manager();\n\n    $transaction = $manager-&gt;get();\n\n    $robot = new Robots();\n\n    $robot-&gt;setTransaction($transaction);\n\n    $robot-&gt;name       = \"WALL\u00b7E\";\n    $robot-&gt;created_at = date(\"Y-m-d\");\n\n    if ($robot-&gt;save() === false) {\n        $transaction-&gt;rollback(\"Can't save robot\");\n    }\n\n    $robotPart = new RobotParts();\n\n    $robotPart-&gt;setTransaction($transaction);\n\n    $robotPart-&gt;type = \"head\";\n\n    if ($robotPart-&gt;save() === false) {\n        $transaction-&gt;rollback(\"Can't save robot part\");\n    }\n\n    $transaction-&gt;commit();\n} catch(Failed $e) {\n    echo \"Failed, reason: \", $e-&gt;getMessage();\n}\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_19","title":"Properties","text":"<pre><code>//\nprotected $activeTransaction = false;\n\n//\nprotected $connection;\n\n//\nprotected $isNewTransaction = true;\n\n//\nprotected $manager;\n\n//\nprotected $messages;\n\n//\nprotected $rollbackRecord;\n\n//\nprotected $rollbackOnAbort = false;\n\n//\nprotected $rollbackThrowException = false;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_48","title":"Methods","text":"<p><pre><code>public function __construct( DiInterface $container, bool $autoBegin = bool, string $service = string );\n</code></pre> Phalcon\\Mvc\\Model\\Transaction constructor</p> <p><pre><code>public function begin(): bool;\n</code></pre> Starts the transaction</p> <p><pre><code>public function commit(): bool;\n</code></pre> Commits the transaction</p> <p><pre><code>public function getConnection(): AdapterInterface;\n</code></pre> Returns the connection related to transaction</p> <p><pre><code>public function getMessages(): array;\n</code></pre> Returns validations messages from last save try</p> <p><pre><code>public function isManaged(): bool;\n</code></pre> Checks whether transaction is managed by a transaction manager</p> <p><pre><code>public function isValid(): bool;\n</code></pre> Checks whether internal connection is under an active transaction</p> <p><pre><code>public function rollback( string $rollbackMessage = null, ModelInterface $rollbackRecord = null ): bool;\n</code></pre> Rollbacks the transaction</p> <p><pre><code>public function setIsNewTransaction( bool $isNew ): void;\n</code></pre> Sets if is a reused transaction or new once</p> <p><pre><code>public function setRollbackOnAbort( bool $rollbackOnAbort ): void;\n</code></pre> Sets flag to rollback on abort the HTTP connection</p> <p><pre><code>public function setRollbackedRecord( ModelInterface $record ): void;\n</code></pre> Sets object which generates rollback action</p> <p><pre><code>public function setTransactionManager( ManagerInterface $manager ): void;\n</code></pre> Sets transaction manager related to the transaction</p> <p><pre><code>public function throwRollbackException( bool $status ): TransactionInterface;\n</code></pre> Enables throwing exception</p>"},{"location":"api/phalcon_mvc/#mvcmodeltransactionexception","title":"Mvc\\Model\\Transaction\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\Transaction</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Phalcon\\Mvc\\Model\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\Transaction\\Exception</p> <p>Exceptions thrown in Phalcon\\Mvc\\Model\\Transaction will use this class</p>"},{"location":"api/phalcon_mvc/#mvcmodeltransactionfailed","title":"Mvc\\Model\\Transaction\\Failed","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\Transaction</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Messages\\MessageInterface</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\Transaction\\Failed</p> <p>This class will be thrown to exit a try/catch block for isolated transactions</p>"},{"location":"api/phalcon_mvc/#properties_20","title":"Properties","text":"<pre><code>//\nprotected $record;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_49","title":"Methods","text":"<p><pre><code>public function __construct( string $message, ModelInterface $record = null );\n</code></pre> Phalcon\\Mvc\\Model\\Transaction\\Failed constructor</p> <p><pre><code>public function getRecord(): ModelInterface;\n</code></pre> Returns validation record messages which stop the transaction</p> <p><pre><code>public function getRecordMessages(): MessageInterface[];\n</code></pre> Returns validation record messages which stop the transaction</p>"},{"location":"api/phalcon_mvc/#mvcmodeltransactionmanager","title":"Mvc\\Model\\Transaction\\Manager","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\Transaction</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\Di</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Di\\InjectionAwareInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Transaction</code></li> <li><code>Phalcon\\Mvc\\Model\\TransactionInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>InjectionAwareInterface</code></li> <li><code>ManagerInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Model\\Transaction\\Manager</p> <p>A transaction acts on a single database connection. If you have multiple class-specific databases, the transaction will not protect interaction among them.</p> <p>This class manages the objects that compose a transaction. A transaction produces a unique connection that is passed to every object part of the transaction.</p> <pre><code>use Phalcon\\Mvc\\Model\\Transaction\\Failed;\nuse Phalcon\\Mvc\\Model\\Transaction\\Manager;\n\ntry {\n   $transactionManager = new Manager();\n\n   $transaction = $transactionManager-&gt;get();\n\n   $robot = new Robots();\n\n   $robot-&gt;setTransaction($transaction);\n\n   $robot-&gt;name       = \"WALL\u00b7E\";\n   $robot-&gt;created_at = date(\"Y-m-d\");\n\n   if ($robot-&gt;save() === false) {\n       $transaction-&gt;rollback(\"Can't save robot\");\n   }\n\n   $robotPart = new RobotParts();\n\n   $robotPart-&gt;setTransaction($transaction);\n\n   $robotPart-&gt;type = \"head\";\n\n   if ($robotPart-&gt;save() === false) {\n       $transaction-&gt;rollback(\"Can't save robot part\");\n   }\n\n   $transaction-&gt;commit();\n} catch (Failed $e) {\n   echo \"Failed, reason: \", $e-&gt;getMessage();\n}\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_21","title":"Properties","text":"<pre><code>//\nprotected $container;\n\n//\nprotected $initialized = false;\n\n//\nprotected $number = 0;\n\n//\nprotected $rollbackPendent = true;\n\n//\nprotected $service = db;\n\n/**\n * @var array\n */\nprotected $transactions;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_50","title":"Methods","text":"<p><pre><code>public function __construct( DiInterface $container = null );\n</code></pre> Phalcon\\Mvc\\Model\\Transaction\\Manager constructor</p> <p><pre><code>public function collectTransactions(): void;\n</code></pre> Remove all the transactions from the manager</p> <p><pre><code>public function commit();\n</code></pre> Commits active transactions within the manager</p> <p><pre><code>public function get( bool $autoBegin = bool ): TransactionInterface;\n</code></pre> Returns a new \\Phalcon\\Mvc\\Model\\Transaction or an already created once This method registers a shutdown function to rollback active connections</p> <p><pre><code>public function getDI(): DiInterface;\n</code></pre> Returns the dependency injection container</p> <p><pre><code>public function getDbService(): string;\n</code></pre> Returns the database service used to isolate the transaction</p> <p><pre><code>public function getOrCreateTransaction( bool $autoBegin = bool ): TransactionInterface;\n</code></pre> Create/Returns a new transaction or an existing one</p> <p><pre><code>public function getRollbackPendent(): bool;\n</code></pre> Check if the transaction manager is registering a shutdown function to clean up pendent transactions</p> <p><pre><code>public function has(): bool;\n</code></pre> Checks whether the manager has an active transaction</p> <p><pre><code>public function notifyCommit( TransactionInterface $transaction ): void;\n</code></pre> Notifies the manager about a committed transaction</p> <p><pre><code>public function notifyRollback( TransactionInterface $transaction ): void;\n</code></pre> Notifies the manager about a rollbacked transaction</p> <p><pre><code>public function rollback( bool $collect = bool ): void;\n</code></pre> Rollbacks active transactions within the manager Collect will remove the transaction from the manager</p> <p><pre><code>public function rollbackPendent(): void;\n</code></pre> Rollbacks active transactions within the manager</p> <p><pre><code>public function setDI( DiInterface $container ): void;\n</code></pre> Sets the dependency injection container</p> <p><pre><code>public function setDbService( string $service ): ManagerInterface;\n</code></pre> Sets the database service used to run the isolated transactions</p> <p><pre><code>public function setRollbackPendent( bool $rollbackPendent ): ManagerInterface;\n</code></pre> Set if the transaction manager must register a shutdown function to clean up pendent transactions</p> <p><pre><code>protected function collectTransaction( TransactionInterface $transaction ): void;\n</code></pre> Removes transactions from the TransactionManager</p>"},{"location":"api/phalcon_mvc/#mvcmodeltransactionmanagerinterface","title":"Mvc\\Model\\Transaction\\ManagerInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model\\Transaction</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Mvc\\Model\\TransactionInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\Transaction\\ManagerInterface</p> <p>Interface for Phalcon\\Mvc\\Model\\Transaction\\Manager</p>"},{"location":"api/phalcon_mvc/#methods_51","title":"Methods","text":"<p><pre><code>public function collectTransactions(): void;\n</code></pre> Remove all the transactions from the manager</p> <p><pre><code>public function commit();\n</code></pre> Commits active transactions within the manager</p> <p><pre><code>public function get( bool $autoBegin = bool ): TransactionInterface;\n</code></pre> Returns a new \\Phalcon\\Mvc\\Model\\Transaction or an already created once</p> <p><pre><code>public function getDbService(): string;\n</code></pre> Returns the database service used to isolate the transaction</p> <p><pre><code>public function getRollbackPendent(): bool;\n</code></pre> Check if the transaction manager is registering a shutdown function to clean up pendent transactions</p> <p><pre><code>public function has(): bool;\n</code></pre> Checks whether manager has an active transaction</p> <p><pre><code>public function notifyCommit( TransactionInterface $transaction ): void;\n</code></pre> Notifies the manager about a committed transaction</p> <p><pre><code>public function notifyRollback( TransactionInterface $transaction ): void;\n</code></pre> Notifies the manager about a rollbacked transaction</p> <p><pre><code>public function rollback( bool $collect = bool ): void;\n</code></pre> Rollbacks active transactions within the manager Collect will remove transaction from the manager</p> <p><pre><code>public function rollbackPendent(): void;\n</code></pre> Rollbacks active transactions within the manager</p> <p><pre><code>public function setDbService( string $service ): ManagerInterface;\n</code></pre> Sets the database service used to run the isolated transactions</p> <p><pre><code>public function setRollbackPendent( bool $rollbackPendent ): ManagerInterface;\n</code></pre> Set if the transaction manager must register a shutdown function to clean up pendent transactions</p>"},{"location":"api/phalcon_mvc/#mvcmodeltransactioninterface","title":"Mvc\\Model\\TransactionInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\Transaction\\ManagerInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\TransactionInterface</p> <p>Interface for Phalcon\\Mvc\\Model\\Transaction</p>"},{"location":"api/phalcon_mvc/#methods_52","title":"Methods","text":"<p><pre><code>public function begin(): bool;\n</code></pre> Starts the transaction</p> <p><pre><code>public function commit(): bool;\n</code></pre> Commits the transaction</p> <p><pre><code>public function getConnection(): \\Phalcon\\Db\\Adapter\\AdapterInterface;\n</code></pre> Returns connection related to transaction</p> <p><pre><code>public function getMessages(): array;\n</code></pre> Returns validations messages from last save try</p> <p><pre><code>public function isManaged(): bool;\n</code></pre> Checks whether transaction is managed by a transaction manager</p> <p><pre><code>public function isValid(): bool;\n</code></pre> Checks whether internal connection is under an active transaction</p> <p><pre><code>public function rollback( string $rollbackMessage = null, ModelInterface $rollbackRecord = null ): bool;\n</code></pre> Rollbacks the transaction</p> <p><pre><code>public function setIsNewTransaction( bool $isNew ): void;\n</code></pre> Sets if is a reused transaction or new once</p> <p><pre><code>public function setRollbackOnAbort( bool $rollbackOnAbort ): void;\n</code></pre> Sets flag to rollback on abort the HTTP connection</p> <p><pre><code>public function setRollbackedRecord( ModelInterface $record ): void;\n</code></pre> Sets object which generates rollback action</p> <p><pre><code>public function setTransactionManager( ManagerInterface $manager ): void;\n</code></pre> Sets transaction manager related to the transaction</p> <p><pre><code>public function throwRollbackException( bool $status ): TransactionInterface;\n</code></pre> Enables throwing exception</p>"},{"location":"api/phalcon_mvc/#mvcmodelvalidationfailed","title":"Mvc\\Model\\ValidationFailed","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Model</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Messages\\Message</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Model\\ValidationFailed</p> <p>This exception is generated when a model fails to save a record Phalcon\\Mvc\\Model must be set up to have this behavior</p>"},{"location":"api/phalcon_mvc/#properties_22","title":"Properties","text":"<pre><code>//\nprotected $messages;\n\n//\nprotected $model;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_53","title":"Methods","text":"<p><pre><code>public function __construct( ModelInterface $model, array $validationMessages );\n</code></pre> Phalcon\\Mvc\\Model\\ValidationFailed constructor</p> <p><pre><code>public function getMessages(): Message[];\n</code></pre> Returns the complete group of messages produced in the validation</p> <p><pre><code>public function getModel(): ModelInterface;\n</code></pre> Returns the model that generated the messages</p>"},{"location":"api/phalcon_mvc/#mvcmodelinterface","title":"Mvc\\ModelInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\Adapter\\AdapterInterface</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Messages\\MessageInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\CriteriaInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\MetaDataInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\ResultsetInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\TransactionInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\ModelInterface</p> <p>Interface for Phalcon\\Mvc\\Model</p>"},{"location":"api/phalcon_mvc/#methods_54","title":"Methods","text":"<p><pre><code>public function appendMessage( MessageInterface $message ): ModelInterface;\n</code></pre> Appends a customized message on the validation process</p> <p><pre><code>public function assign( array $data, mixed $whiteList = null, mixed $dataColumnMap = null ): ModelInterface;\n</code></pre> Assigns values to a model from an array</p> <p><pre><code>public static function average( mixed $parameters = null ): double | ResultsetInterface;\n</code></pre> Allows to calculate the average value on a column matching the specified conditions</p> <p><pre><code>public static function cloneResult( ModelInterface $base, array $data, int $dirtyState = int ): ModelInterface;\n</code></pre> Assigns values to a model from an array returning a new model</p> <p><pre><code>public static function cloneResultMap( mixed $base, array $data, mixed $columnMap, int $dirtyState = int, bool $keepSnapshots = null ): ModelInterface;\n</code></pre> Assigns values to a model from an array returning a new model</p> <p><pre><code>public static function cloneResultMapHydrate( array $data, mixed $columnMap, int $hydrationMode );\n</code></pre> Returns an hydrated result based on the data and the column map</p> <p><pre><code>public static function count( mixed $parameters = null ): int | ResultsetInterface;\n</code></pre> Allows to count how many records match the specified conditions</p> <p>Returns an integer for simple queries or a ResultsetInterface instance for when the GROUP condition is used. The results will contain the count of each group.</p> <p><pre><code>public function create(): bool;\n</code></pre> Inserts a model instance. If the instance already exists in the persistence it will throw an exception. Returning true on success or false otherwise.</p> <p><pre><code>public function delete(): bool;\n</code></pre> Deletes a model instance. Returning true on success or false otherwise.</p> <p><pre><code>public static function find( mixed $parameters = null ): ResultsetInterface;\n</code></pre> Allows to query a set of records that match the specified conditions</p> <p><pre><code>public static function findFirst( mixed $parameters = null ): mixed | null;\n</code></pre> Allows to query the first record that match the specified conditions</p> <p><pre><code>public function fireEvent( string $eventName ): bool;\n</code></pre> Fires an event, implicitly calls behaviors and listeners in the events manager are notified</p> <p><pre><code>public function fireEventCancel( string $eventName ): bool;\n</code></pre> Fires an event, implicitly calls behaviors and listeners in the events manager are notified. This method stops if one of the callbacks/listeners returns bool false</p> <p><pre><code>public function getDirtyState(): int;\n</code></pre> Returns one of the DIRTY_STATE_* constants telling if the record exists in the database or not</p> <p><pre><code>public function getMessages(): MessageInterface[];\n</code></pre> Returns array of validation messages</p> <p><pre><code>public function getModelsMetaData(): MetaDataInterface;\n</code></pre> Returns the models meta-data service related to the entity instance.</p> <p><pre><code>public function getOperationMade(): int;\n</code></pre> Returns the type of the latest operation performed by the ORM Returns one of the OP_* class constants</p> <p><pre><code>public function getReadConnection(): AdapterInterface;\n</code></pre> Gets internal database connection</p> <p><pre><code>public function getReadConnectionService(): string;\n</code></pre> Returns DependencyInjection connection service used to read data</p> <p><pre><code>public function getRelated( string $alias, mixed $arguments = null );\n</code></pre> Returns related records based on defined relations</p> <p><pre><code>public function getSchema(): string;\n</code></pre> Returns schema name where table mapped is located</p> <p><pre><code>public function getSource(): string;\n</code></pre> Returns table name mapped in the model</p> <p><pre><code>public function getWriteConnection(): AdapterInterface;\n</code></pre> Gets internal database connection</p> <p><pre><code>public function getWriteConnectionService(): string;\n</code></pre> Returns DependencyInjection connection service used to write data</p> <p><pre><code>public static function maximum( mixed $parameters = null ): mixed;\n</code></pre> Allows to get the maximum value of a column that match the specified conditions</p> <p><pre><code>public static function minimum( mixed $parameters = null ): mixed;\n</code></pre> Allows to get the minimum value of a column that match the specified conditions</p> <p><pre><code>public static function query( DiInterface $container = null ): CriteriaInterface;\n</code></pre> Create a criteria for a specific model</p> <p><pre><code>public function refresh(): ModelInterface;\n</code></pre> Refreshes the model attributes re-querying the record from the database</p> <p><pre><code>public function save(): bool;\n</code></pre> Inserts or updates a model instance. Returning true on success or false otherwise.</p> <p><pre><code>public function setConnectionService( string $connectionService ): void;\n</code></pre> Sets both read/write connection services</p> <p><pre><code>public function setDirtyState( int $dirtyState ): ModelInterface | bool;\n</code></pre> Sets the dirty state of the object using one of the DIRTY_STATE_* constants</p> <p><pre><code>public function setReadConnectionService( string $connectionService ): void;\n</code></pre> Sets the DependencyInjection connection service used to read data</p> <p><pre><code>public function setSnapshotData( array $data, mixed $columnMap = null ): void;\n</code></pre> Sets the record's snapshot data. This method is used internally to set snapshot data when the model was set up to keep snapshot data</p> <p><pre><code>public function setTransaction( TransactionInterface $transaction ): ModelInterface;\n</code></pre> Sets a transaction related to the Model instance</p> <p><pre><code>public function setWriteConnectionService( string $connectionService ): void;\n</code></pre> Sets the DependencyInjection connection service used to write data</p> <p><pre><code>public function skipOperation( bool $skip ): void;\n</code></pre> Skips the current operation forcing a success state</p> <p><pre><code>public static function sum( mixed $parameters = null ): double | ResultsetInterface;\n</code></pre> Allows to calculate a sum on a column that match the specified conditions</p> <p><pre><code>public function update(): bool;\n</code></pre> Updates a model instance. If the instance doesn't exist in the persistence it will throw an exception. Returning true on success or false otherwise.</p> <p><pre><code>public function validationHasFailed(): bool;\n</code></pre> Check whether validation process has generated any messages</p>"},{"location":"api/phalcon_mvc/#mvcmoduledefinitioninterface","title":"Mvc\\ModuleDefinitionInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\DiInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\ModuleDefinitionInterface</p> <p>This interface must be implemented by class module definitions</p>"},{"location":"api/phalcon_mvc/#methods_55","title":"Methods","text":"<p><pre><code>public function registerAutoloaders( DiInterface $container = null );\n</code></pre> Registers an autoloader related to the module</p> <p><pre><code>public function registerServices( DiInterface $container );\n</code></pre> Registers services related to the module</p>"},{"location":"api/phalcon_mvc/#mvcrouter","title":"Mvc\\Router","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\AbstractInjectionAware</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Events\\EventsAwareInterface</code></li> <li><code>Phalcon\\Events\\ManagerInterface</code></li> <li><code>Phalcon\\Http\\RequestInterface</code></li> <li><code>Phalcon\\Mvc\\Router\\Exception</code></li> <li><code>Phalcon\\Mvc\\Router\\GroupInterface</code></li> <li><code>Phalcon\\Mvc\\Router\\Route</code></li> <li><code>Phalcon\\Mvc\\Router\\RouteInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractInjectionAware</code></p> </li> <li> <p>Implements</p> <ul> <li><code>EventsAwareInterface</code></li> <li><code>RouterInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Router</p> <p>Phalcon\\Mvc\\Router is the standard framework router. Routing is the process of taking a URI endpoint (that part of the URI which comes after the base URL) and decomposing it into parameters to determine which module, controller, and action of that controller should receive the request</p> <pre><code>use Phalcon\\Mvc\\Router;\n\n$router = new Router();\n\n$router-&gt;add(\n    \"/documentation/{chapter}/{name}\\.{type:[a-z]+}\",\n    [\n        \"controller\" =&gt; \"documentation\",\n        \"action\"     =&gt; \"show\",\n    ]\n);\n\n$router-&gt;handle(\n    \"/documentation/1/examples.html\"\n);\n\necho $router-&gt;getControllerName();\n</code></pre>"},{"location":"api/phalcon_mvc/#constants_6","title":"Constants","text":"<pre><code>const POSITION_FIRST = 0;\nconst POSITION_LAST = 1;\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_23","title":"Properties","text":"<pre><code>//\nprotected $action;\n\n//\nprotected $controller;\n\n//\nprotected $defaultAction;\n\n//\nprotected $defaultController;\n\n//\nprotected $defaultModule;\n\n//\nprotected $defaultNamespace;\n\n//\nprotected $defaultParams;\n\n//\nprotected $eventsManager;\n\n//\nprotected $keyRouteNames;\n\n//\nprotected $keyRouteIds;\n\n//\nprotected $matchedRoute;\n\n//\nprotected $matches;\n\n//\nprotected $module;\n\n//\nprotected $namespaceName;\n\n//\nprotected $notFoundPaths;\n\n//\nprotected $params;\n\n//\nprotected $removeExtraSlashes;\n\n//\nprotected $routes;\n\n//\nprotected $wasMatched = false;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_56","title":"Methods","text":"<p><pre><code>public function __construct( bool $defaultRoutes = bool );\n</code></pre> Phalcon\\Mvc\\Router constructor</p> <p><pre><code>public function add( string $pattern, mixed $paths = null, mixed $httpMethods = null, mixed $position = static-constant-access ): RouteInterface;\n</code></pre> Adds a route to the router without any HTTP constraint</p> <pre><code>use Phalcon\\Mvc\\Router;\n\n$router-&gt;add(\"/about\", \"About::index\");\n\n$router-&gt;add(\n    \"/about\",\n    \"About::index\",\n    [\"GET\", \"POST\"]\n);\n\n$router-&gt;add(\n    \"/about\",\n    \"About::index\",\n    [\"GET\", \"POST\"],\n    Router::POSITION_FIRST\n);\n</code></pre> <p><pre><code>public function addConnect( string $pattern, mixed $paths = null, mixed $position = static-constant-access ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is CONNECT</p> <p><pre><code>public function addDelete( string $pattern, mixed $paths = null, mixed $position = static-constant-access ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is DELETE</p> <p><pre><code>public function addGet( string $pattern, mixed $paths = null, mixed $position = static-constant-access ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is GET</p> <p><pre><code>public function addHead( string $pattern, mixed $paths = null, mixed $position = static-constant-access ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is HEAD</p> <p><pre><code>public function addOptions( string $pattern, mixed $paths = null, mixed $position = static-constant-access ): RouteInterface;\n</code></pre> Add a route to the router that only match if the HTTP method is OPTIONS</p> <p><pre><code>public function addPatch( string $pattern, mixed $paths = null, mixed $position = static-constant-access ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is PATCH</p> <p><pre><code>public function addPost( string $pattern, mixed $paths = null, mixed $position = static-constant-access ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is POST</p> <p><pre><code>public function addPurge( string $pattern, mixed $paths = null, mixed $position = static-constant-access ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is PURGE (Squid and Varnish support)</p> <p><pre><code>public function addPut( string $pattern, mixed $paths = null, mixed $position = static-constant-access ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is PUT</p> <p><pre><code>public function addTrace( string $pattern, mixed $paths = null, mixed $position = static-constant-access ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is TRACE</p> <p><pre><code>public function attach( RouteInterface $route, mixed $position = static-constant-access ): RouterInterface;\n</code></pre> Attach Route object to the routes stack.</p> <pre><code>use Phalcon\\Mvc\\Router;\nuse Phalcon\\Mvc\\Router\\Route;\n\nclass CustomRoute extends Route {\n     // ...\n}\n\n$router = new Router();\n\n$router-&gt;attach(\n    new CustomRoute(\"/about\", \"About::index\", [\"GET\", \"HEAD\"]),\n    Router::POSITION_FIRST\n);\n</code></pre> <p><pre><code>public function clear(): void;\n</code></pre> Removes all the pre-defined routes</p> <p><pre><code>public function getActionName(): string;\n</code></pre> Returns the processed action name</p> <p><pre><code>public function getControllerName(): string;\n</code></pre> Returns the processed controller name</p> <p><pre><code>public function getDefaults(): array;\n</code></pre> Returns an array of default parameters</p> <p><pre><code>public function getEventsManager(): ManagerInterface;\n</code></pre> Returns the internal event manager</p> <pre><code>public function getKeyRouteIds()\n</code></pre> <pre><code>public function getKeyRouteNames()\n</code></pre> <p><pre><code>public function getMatchedRoute(): RouteInterface;\n</code></pre> Returns the route that matches the handled URI</p> <p><pre><code>public function getMatches(): array;\n</code></pre> Returns the sub expressions in the regular expression matched</p> <p><pre><code>public function getModuleName(): string;\n</code></pre> Returns the processed module name</p> <p><pre><code>public function getNamespaceName(): string;\n</code></pre> Returns the processed namespace name</p> <p><pre><code>public function getParams(): array;\n</code></pre> Returns the processed parameters</p> <p><pre><code>public function getRouteById( mixed $id ): RouteInterface | bool;\n</code></pre> Returns a route object by its id</p> <p><pre><code>public function getRouteByName( string $name ): RouteInterface | bool;\n</code></pre> Returns a route object by its name</p> <p><pre><code>public function getRoutes(): RouteInterface[];\n</code></pre> Returns all the routes defined in the router</p> <p><pre><code>public function handle( string $uri ): void;\n</code></pre> Handles routing information received from the rewrite engine</p> <pre><code>// Passing a URL\n$router-&gt;handle(\"/posts/edit/1\");\n</code></pre> <p><pre><code>public function isExactControllerName(): bool;\n</code></pre> Returns whether controller name should not be mangled</p> <p><pre><code>public function mount( GroupInterface $group ): RouterInterface;\n</code></pre> Mounts a group of routes in the router</p> <p><pre><code>public function notFound( mixed $paths ): RouterInterface;\n</code></pre> Set a group of paths to be returned when none of the defined routes are matched</p> <p><pre><code>public function removeExtraSlashes( bool $remove ): RouterInterface;\n</code></pre> Set whether router must remove the extra slashes in the handled routes</p> <p><pre><code>public function setDefaultAction( string $actionName ): RouterInterface;\n</code></pre> Sets the default action name</p> <p><pre><code>public function setDefaultController( string $controllerName ): RouterInterface;\n</code></pre> Sets the default controller name</p> <p><pre><code>public function setDefaultModule( string $moduleName ): RouterInterface;\n</code></pre> Sets the name of the default module</p> <p><pre><code>public function setDefaultNamespace( string $namespaceName ): RouterInterface;\n</code></pre> Sets the name of the default namespace</p> <p><pre><code>public function setDefaults( array $defaults ): RouterInterface;\n</code></pre> Sets an array of default paths. If a route is missing a path the router will use the defined here. This method must not be used to set a 404 route</p> <pre><code>$router-&gt;setDefaults(\n    [\n        \"module\" =&gt; \"common\",\n        \"action\" =&gt; \"index\",\n    ]\n);\n</code></pre> <p><pre><code>public function setEventsManager( ManagerInterface $eventsManager ): void;\n</code></pre> Sets the events manager</p> <pre><code>public function setKeyRouteIds( $keyRouteIds )\n</code></pre> <pre><code>public function setKeyRouteNames( $keyRouteNames )\n</code></pre> <p><pre><code>public function wasMatched(): bool;\n</code></pre> Checks if the router matches any of the defined routes</p>"},{"location":"api/phalcon_mvc/#mvcrouterannotations","title":"Mvc\\Router\\Annotations","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Router</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Annotations\\Annotation</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Mvc\\Router</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Router</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Router\\Annotations</p> <p>A router that reads routes annotations from classes/resources</p> <pre><code>use Phalcon\\Mvc\\Router\\Annotations;\n\n$di-&gt;setShared(\n    \"router\",\n    function() {\n        // Use the annotations router\n        $router = new Annotations(false);\n\n        // This will do the same as above but only if the handled uri starts with /robots\n        $router-&gt;addResource(\"Robots\", \"/robots\");\n\n        return $router;\n    }\n);\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_24","title":"Properties","text":"<pre><code>//\nprotected $actionSuffix = Action;\n\n//\nprotected $actionPreformatCallback;\n\n//\nprotected $controllerSuffix = Controller;\n\n//\nprotected $handlers;\n\n//\nprotected $routePrefix;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_57","title":"Methods","text":"<p><pre><code>public function addModuleResource( string $module, string $handler, string $prefix = null ): Annotations;\n</code></pre> Adds a resource to the annotations handler A resource is a class that contains routing annotations The class is located in a module</p> <p><pre><code>public function addResource( string $handler, string $prefix = null ): Annotations;\n</code></pre> Adds a resource to the annotations handler A resource is a class that contains routing annotations</p> <pre><code>public function getActionPreformatCallback();\n</code></pre> <p><pre><code>public function getResources(): array;\n</code></pre> Return the registered resources</p> <p><pre><code>public function handle( string $uri ): void;\n</code></pre> Produce the routing parameters from the rewrite information</p> <p><pre><code>public function processActionAnnotation( string $module, string $namespaceName, string $controller, string $action, Annotation $annotation );\n</code></pre> Checks for annotations in the public methods of the controller</p> <p><pre><code>public function processControllerAnnotation( string $handler, Annotation $annotation );\n</code></pre> Checks for annotations in the controller docblock</p> <p><pre><code>public function setActionPreformatCallback( mixed $callback = null );\n</code></pre> Sets the action preformat callback $action here already without suffix 'Action'</p> <pre><code>// Array as callback\n$annotationRouter-&gt;setActionPreformatCallback([Text::class, 'uncamelize']);\n\n// Function as callback\n$annotationRouter-&gt;setActionPreformatCallback(function(action){\n    return action;\n});\n\n// String as callback\n$annotationRouter-&gt;setActionPreformatCallback('strtolower');\n\n// If empty method constructor called [null], sets uncamelize with - delimiter\n$annotationRouter-&gt;setActionPreformatCallback();\n</code></pre> <p><pre><code>public function setActionSuffix( string $actionSuffix );\n</code></pre> Changes the action method suffix</p> <p><pre><code>public function setControllerSuffix( string $controllerSuffix );\n</code></pre> Changes the controller class suffix</p>"},{"location":"api/phalcon_mvc/#mvcrouterexception","title":"Mvc\\Router\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Router</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Router\\Exception</p> <p>Exceptions thrown in Phalcon\\Mvc\\Router will use this class</p>"},{"location":"api/phalcon_mvc/#mvcroutergroup","title":"Mvc\\Router\\Group","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Router</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>GroupInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Router\\Group</p> <p>Helper class to create a group of routes with common attributes</p> <pre><code>$router = new \\Phalcon\\Mvc\\Router();\n\n//Create a group with a common module and controller\n$blog = new Group(\n    [\n        \"module\"     =&gt; \"blog\",\n        \"controller\" =&gt; \"index\",\n    ]\n);\n\n//All the routes start with /blog\n$blog-&gt;setPrefix(\"/blog\");\n\n//Add a route to the group\n$blog-&gt;add(\n    \"/save\",\n    [\n        \"action\" =&gt; \"save\",\n    ]\n);\n\n//Add another route to the group\n$blog-&gt;add(\n    \"/edit/{id}\",\n    [\n        \"action\" =&gt; \"edit\",\n    ]\n);\n\n//This route maps to a controller different than the default\n$blog-&gt;add(\n    \"/blog\",\n    [\n        \"controller\" =&gt; \"about\",\n        \"action\"     =&gt; \"index\",\n    ]\n);\n\n//Add the group to the router\n$router-&gt;mount($blog);\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_25","title":"Properties","text":"<pre><code>//\nprotected $beforeMatch;\n\n//\nprotected $hostname;\n\n//\nprotected $paths;\n\n//\nprotected $prefix;\n\n//\nprotected $routes;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_58","title":"Methods","text":"<p><pre><code>public function __construct( mixed $paths = null );\n</code></pre> Phalcon\\Mvc\\Router\\Group constructor</p> <p><pre><code>public function add( string $pattern, mixed $paths = null, mixed $httpMethods = null ): RouteInterface;\n</code></pre> Adds a route to the router on any HTTP method</p> <pre><code>$router-&gt;add(\"/about\", \"About::index\");\n</code></pre> <p><pre><code>public function addConnect( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is CONNECT</p> <p><pre><code>public function addDelete( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is DELETE</p> <p><pre><code>public function addGet( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is GET</p> <p><pre><code>public function addHead( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is HEAD</p> <p><pre><code>public function addOptions( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Add a route to the router that only match if the HTTP method is OPTIONS</p> <p><pre><code>public function addPatch( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is PATCH</p> <p><pre><code>public function addPost( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is POST</p> <p><pre><code>public function addPurge( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is PURGE</p> <p><pre><code>public function addPut( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is PUT</p> <p><pre><code>public function addTrace( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is TRACE</p> <p><pre><code>public function beforeMatch( callable $beforeMatch ): GroupInterface;\n</code></pre> Sets a callback that is called if the route is matched. The developer can implement any arbitrary conditions here If the callback returns false the route is treated as not matched</p> <p><pre><code>public function clear(): void;\n</code></pre> Removes all the pre-defined routes</p> <p><pre><code>public function getBeforeMatch(): callable;\n</code></pre> Returns the 'before match' callback if any</p> <p><pre><code>public function getHostname(): string;\n</code></pre> Returns the hostname restriction</p> <p><pre><code>public function getPaths(): array | string;\n</code></pre> Returns the common paths defined for this group</p> <p><pre><code>public function getPrefix(): string;\n</code></pre> Returns the common prefix for all the routes</p> <p><pre><code>public function getRoutes(): RouteInterface[];\n</code></pre> Returns the routes added to the group</p> <p><pre><code>public function setHostname( string $hostname ): GroupInterface;\n</code></pre> Set a hostname restriction for all the routes in the group</p> <p><pre><code>public function setPaths( mixed $paths ): GroupInterface;\n</code></pre> Set common paths for all the routes in the group</p> <p><pre><code>public function setPrefix( string $prefix ): GroupInterface;\n</code></pre> Set a common uri prefix for all the routes in this group</p> <p><pre><code>protected function addRoute( string $pattern, mixed $paths = null, mixed $httpMethods = null ): RouteInterface;\n</code></pre> Adds a route applying the common attributes</p>"},{"location":"api/phalcon_mvc/#mvcroutergroupinterface","title":"Mvc\\Router\\GroupInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Router</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Router\\GroupInterface</p> <pre><code>$router = new \\Phalcon\\Mvc\\Router();\n\n// Create a group with a common module and controller\n$blog = new Group(\n    [\n        \"module\"     =&gt; \"blog\",\n        \"controller\" =&gt; \"index\",\n    ]\n);\n\n// All the routes start with /blog\n$blog-&gt;setPrefix(\"/blog\");\n\n// Add a route to the group\n$blog-&gt;add(\n    \"/save\",\n    [\n        \"action\" =&gt; \"save\",\n    ]\n);\n\n// Add another route to the group\n$blog-&gt;add(\n    \"/edit/{id}\",\n    [\n        \"action\" =&gt; \"edit\",\n    ]\n);\n\n// This route maps to a controller different than the default\n$blog-&gt;add(\n    \"/blog\",\n    [\n        \"controller\" =&gt; \"about\",\n        \"action\"     =&gt; \"index\",\n    ]\n);\n\n// Add the group to the router\n$router-&gt;mount($blog);\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_59","title":"Methods","text":"<p><pre><code>public function add( string $pattern, mixed $paths = null, mixed $httpMethods = null ): RouteInterface;\n</code></pre> Adds a route to the router on any HTTP method</p> <pre><code>router-&gt;add(\"/about\", \"About::index\");\n</code></pre> <p><pre><code>public function addConnect( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is CONNECT</p> <p><pre><code>public function addDelete( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is DELETE</p> <p><pre><code>public function addGet( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is GET</p> <p><pre><code>public function addHead( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is HEAD</p> <p><pre><code>public function addOptions( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Add a route to the router that only match if the HTTP method is OPTIONS</p> <p><pre><code>public function addPatch( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is PATCH</p> <p><pre><code>public function addPost( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is POST</p> <p><pre><code>public function addPurge( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is PURGE</p> <p><pre><code>public function addPut( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is PUT</p> <p><pre><code>public function addTrace( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is TRACE</p> <p><pre><code>public function beforeMatch( callable $beforeMatch ): GroupInterface;\n</code></pre> Sets a callback that is called if the route is matched. The developer can implement any arbitrary conditions here If the callback returns false the route is treated as not matched</p> <p><pre><code>public function clear(): void;\n</code></pre> Removes all the pre-defined routes</p> <p><pre><code>public function getBeforeMatch(): callable;\n</code></pre> Returns the 'before match' callback if any</p> <p><pre><code>public function getHostname(): string;\n</code></pre> Returns the hostname restriction</p> <p><pre><code>public function getPaths(): array | string;\n</code></pre> Returns the common paths defined for this group</p> <p><pre><code>public function getPrefix(): string;\n</code></pre> Returns the common prefix for all the routes</p> <p><pre><code>public function getRoutes(): RouteInterface[];\n</code></pre> Returns the routes added to the group</p> <p><pre><code>public function setHostname( string $hostname ): GroupInterface;\n</code></pre> Set a hostname restriction for all the routes in the group</p> <p><pre><code>public function setPaths( mixed $paths ): GroupInterface;\n</code></pre> Set common paths for all the routes in the group</p> <p><pre><code>public function setPrefix( string $prefix ): GroupInterface;\n</code></pre> Set a common uri prefix for all the routes in this group</p>"},{"location":"api/phalcon_mvc/#mvcrouterroute","title":"Mvc\\Router\\Route","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Router</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>RouteInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\Router\\Route</p> <p>This class represents every route added to the router</p>"},{"location":"api/phalcon_mvc/#properties_26","title":"Properties","text":"<pre><code>//\nprotected $beforeMatch;\n\n//\nprotected $compiledPattern;\n\n//\nprotected $converters;\n\n//\nprotected $group;\n\n//\nprotected $hostname;\n\n//\nprotected $id;\n\n//\nprotected $methods;\n\n//\nprotected $match;\n\n//\nprotected $name;\n\n//\nprotected $paths;\n\n//\nprotected $pattern;\n\n//\nprotected $static uniqueId = 0;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_60","title":"Methods","text":"<p><pre><code>public function __construct( string $pattern, mixed $paths = null, mixed $httpMethods = null );\n</code></pre> Phalcon\\Mvc\\Router\\Route constructor</p> <p><pre><code>public function beforeMatch( mixed $callback ): RouteInterface;\n</code></pre> Sets a callback that is called if the route is matched. The developer can implement any arbitrary conditions here If the callback returns false the route is treated as not matched</p> <pre><code>$router-&gt;add(\n    \"/login\",\n    [\n        \"module\"     =&gt; \"admin\",\n        \"controller\" =&gt; \"session\",\n    ]\n)-&gt;beforeMatch(\n    function ($uri, $route) {\n        // Check if the request was made with Ajax\n        if ($_SERVER[\"HTTP_X_REQUESTED_WITH\"] === \"xmlhttprequest\") {\n            return false;\n        }\n\n        return true;\n    }\n);\n</code></pre> <p><pre><code>public function compilePattern( string $pattern ): string;\n</code></pre> Replaces placeholders from pattern returning a valid PCRE regular expression</p> <p><pre><code>public function convert( string $name, mixed $converter ): RouteInterface;\n</code></pre></p> <p><pre><code>public function extractNamedParams( string $pattern ): array | bool;\n</code></pre> Extracts parameters from a string</p> <p><pre><code>public function getBeforeMatch(): callable;\n</code></pre> Returns the 'before match' callback if any</p> <p><pre><code>public function getCompiledPattern(): string;\n</code></pre> Returns the route's compiled pattern</p> <p><pre><code>public function getConverters(): array;\n</code></pre> Returns the router converter</p> <p><pre><code>public function getGroup(): GroupInterface | null;\n</code></pre> Returns the group associated with the route</p> <p><pre><code>public function getHostname(): string;\n</code></pre> Returns the hostname restriction if any</p> <p><pre><code>public function getHttpMethods(): array | string;\n</code></pre> Returns the HTTP methods that constraint matching the route</p> <pre><code>public function getId()\n</code></pre> <p><pre><code>public function getMatch(): callable;\n</code></pre> Returns the 'match' callback if any</p> <p><pre><code>public function getName(): string;\n</code></pre> Returns the route's name</p> <p><pre><code>public function getPaths(): array;\n</code></pre> Returns the paths</p> <p><pre><code>public function getPattern(): string;\n</code></pre> Returns the route's pattern</p> <p><pre><code>public function getReversedPaths(): array;\n</code></pre> Returns the paths using positions as keys and names as values</p> <p><pre><code>public function getRouteId(): string;\n</code></pre> Returns the route's id</p> <p><pre><code>public static function getRoutePaths( mixed $paths = null ): array;\n</code></pre> Returns routePaths</p> <p><pre><code>public function match( mixed $callback ): RouteInterface;\n</code></pre> Allows to set a callback to handle the request directly in the route</p> <pre><code>$router-&gt;add(\n    \"/help\",\n    []\n)-&gt;match(\n    function () {\n        return $this-&gt;getResponse()-&gt;redirect(\"https://support.google.com/\", true);\n    }\n);\n</code></pre> <p><pre><code>public function reConfigure( string $pattern, mixed $paths = null ): void;\n</code></pre> Reconfigure the route adding a new pattern and a set of paths</p> <p><pre><code>public static function reset(): void;\n</code></pre> Resets the internal route id generator</p> <p><pre><code>public function setGroup( GroupInterface $group ): RouteInterface;\n</code></pre> Sets the group associated with the route</p> <p><pre><code>public function setHostname( string $hostname ): RouteInterface;\n</code></pre> Sets a hostname restriction to the route</p> <pre><code>$route-&gt;setHostname(\"localhost\");\n</code></pre> <p><pre><code>public function setHttpMethods( mixed $httpMethods ): RouteInterface;\n</code></pre> Sets a set of HTTP methods that constraint the matching of the route (alias of via)</p> <pre><code>$route-&gt;setHttpMethods(\"GET\");\n\n$route-&gt;setHttpMethods(\n    [\n        \"GET\",\n        \"POST\",\n    ]\n);\n</code></pre> <p><pre><code>public function setName( string $name ): RouteInterface;\n</code></pre> Sets the route's name</p> <pre><code>$router-&gt;add(\n    \"/about\",\n    [\n        \"controller\" =&gt; \"about\",\n    ]\n)-&gt;setName(\"about\");\n</code></pre> <p><pre><code>public function via( mixed $httpMethods ): RouteInterface;\n</code></pre> Set one or more HTTP methods that constraint the matching of the route</p> <pre><code>$route-&gt;via(\"GET\");\n\n$route-&gt;via(\n    [\n        \"GET\",\n        \"POST\",\n    ]\n);\n</code></pre>"},{"location":"api/phalcon_mvc/#mvcrouterrouteinterface","title":"Mvc\\Router\\RouteInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Router</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Router\\RouteInterface</p> <p>Interface for Phalcon\\Mvc\\Router\\Route</p>"},{"location":"api/phalcon_mvc/#methods_61","title":"Methods","text":"<p><pre><code>public function compilePattern( string $pattern ): string;\n</code></pre> Replaces placeholders from pattern returning a valid PCRE regular expression</p> <p><pre><code>public function convert( string $name, mixed $converter ): RouteInterface;\n</code></pre> Adds a converter to perform an additional transformation for certain parameter.</p> <p><pre><code>public function getCompiledPattern(): string;\n</code></pre> Returns the route's pattern</p> <p><pre><code>public function getHostname(): string;\n</code></pre> Returns the hostname restriction if any</p> <p><pre><code>public function getHttpMethods(): string | array;\n</code></pre> Returns the HTTP methods that constraint matching the route</p> <p><pre><code>public function getName(): string;\n</code></pre> Returns the route's name</p> <p><pre><code>public function getPaths(): array;\n</code></pre> Returns the paths</p> <p><pre><code>public function getPattern(): string;\n</code></pre> Returns the route's pattern</p> <p><pre><code>public function getReversedPaths(): array;\n</code></pre> Returns the paths using positions as keys and names as values</p> <p><pre><code>public function getRouteId(): string;\n</code></pre> Returns the route's id</p> <p><pre><code>public function reConfigure( string $pattern, mixed $paths = null ): void;\n</code></pre> Reconfigure the route adding a new pattern and a set of paths</p> <p><pre><code>public static function reset(): void;\n</code></pre> Resets the internal route id generator</p> <p><pre><code>public function setHostname( string $hostname ): RouteInterface;\n</code></pre> Sets a hostname restriction to the route</p> <p><pre><code>public function setHttpMethods( mixed $httpMethods ): RouteInterface;\n</code></pre> Sets a set of HTTP methods that constraint the matching of the route</p> <p><pre><code>public function setName( string $name ): RouteInterface;\n</code></pre> Sets the route's name</p> <p><pre><code>public function via( mixed $httpMethods ): RouteInterface;\n</code></pre> Set one or more HTTP methods that constraint the matching of the route</p>"},{"location":"api/phalcon_mvc/#mvcrouterinterface","title":"Mvc\\RouterInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Mvc\\Router\\GroupInterface</code></li> <li><code>Phalcon\\Mvc\\Router\\RouteInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Mvc\\Router</p>"},{"location":"api/phalcon_mvc/#methods_62","title":"Methods","text":"<p><pre><code>public function add( string $pattern, mixed $paths = null, mixed $httpMethods = null ): RouteInterface;\n</code></pre> Adds a route to the router on any HTTP method</p> <p><pre><code>public function addConnect( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is CONNECT</p> <p><pre><code>public function addDelete( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is DELETE</p> <p><pre><code>public function addGet( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is GET</p> <p><pre><code>public function addHead( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is HEAD</p> <p><pre><code>public function addOptions( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Add a route to the router that only match if the HTTP method is OPTIONS</p> <p><pre><code>public function addPatch( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is PATCH</p> <p><pre><code>public function addPost( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is POST</p> <p><pre><code>public function addPurge( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is PURGE (Squid and Varnish support)</p> <p><pre><code>public function addPut( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is PUT</p> <p><pre><code>public function addTrace( string $pattern, mixed $paths = null ): RouteInterface;\n</code></pre> Adds a route to the router that only match if the HTTP method is TRACE</p> <p><pre><code>public function attach( RouteInterface $route, mixed $position = static-constant-access ): RouterInterface;\n</code></pre> Attach Route object to the routes stack.</p> <p><pre><code>public function clear(): void;\n</code></pre> Removes all the defined routes</p> <p><pre><code>public function getActionName(): string;\n</code></pre> Returns processed action name</p> <p><pre><code>public function getControllerName(): string;\n</code></pre> Returns processed controller name</p> <p><pre><code>public function getMatchedRoute(): RouteInterface;\n</code></pre> Returns the route that matches the handled URI</p> <p><pre><code>public function getMatches(): array;\n</code></pre> Return the sub expressions in the regular expression matched</p> <p><pre><code>public function getModuleName(): string;\n</code></pre> Returns processed module name</p> <p><pre><code>public function getNamespaceName(): string;\n</code></pre> Returns processed namespace name</p> <p><pre><code>public function getParams(): array;\n</code></pre> Returns processed extra params</p> <p><pre><code>public function getRouteById( mixed $id ): RouteInterface | bool;\n</code></pre> Returns a route object by its id</p> <p><pre><code>public function getRouteByName( string $name ): RouteInterface | bool;\n</code></pre> Returns a route object by its name</p> <p><pre><code>public function getRoutes(): RouteInterface[];\n</code></pre> Return all the routes defined in the router</p> <p><pre><code>public function handle( string $uri ): void;\n</code></pre> Handles routing information received from the rewrite engine</p> <p><pre><code>public function mount( GroupInterface $group ): RouterInterface;\n</code></pre> Mounts a group of routes in the router</p> <p><pre><code>public function setDefaultAction( string $actionName ): RouterInterface;\n</code></pre> Sets the default action name</p> <p><pre><code>public function setDefaultController( string $controllerName ): RouterInterface;\n</code></pre> Sets the default controller name</p> <p><pre><code>public function setDefaultModule( string $moduleName ): RouterInterface;\n</code></pre> Sets the name of the default module</p> <p><pre><code>public function setDefaults( array $defaults ): RouterInterface;\n</code></pre> Sets an array of default paths</p> <p><pre><code>public function wasMatched(): bool;\n</code></pre> Check if the router matches any of the defined routes</p>"},{"location":"api/phalcon_mvc/#mvcview","title":"Mvc\\View","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Closure</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Di\\Injectable</code></li> <li><code>Phalcon\\Events\\EventsAwareInterface</code></li> <li><code>Phalcon\\Events\\ManagerInterface</code></li> <li><code>Phalcon\\Mvc\\View\\Engine\\Php</code></li> <li><code>Phalcon\\Mvc\\View\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Injectable</code></p> </li> <li> <p>Implements</p> <ul> <li><code>EventsAwareInterface</code></li> <li><code>ViewInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\View</p> <p>Phalcon\\Mvc\\View is a class for working with the \"view\" portion of the model-view-controller pattern. That is, it exists to help keep the view script separate from the model and controller scripts. It provides a system of helpers, output filters, and variable escaping.</p> <pre><code>use Phalcon\\Mvc\\View;\n\n$view = new View();\n\n// Setting views directory\n$view-&gt;setViewsDir(\"app/views/\");\n\n$view-&gt;start();\n\n// Shows recent posts view (app/views/posts/recent.phtml)\n$view-&gt;render(\"posts\", \"recent\");\n$view-&gt;finish();\n\n// Printing views output\necho $view-&gt;getContent();\n</code></pre>"},{"location":"api/phalcon_mvc/#constants_7","title":"Constants","text":"<pre><code>const LEVEL_ACTION_VIEW = 1;\nconst LEVEL_AFTER_TEMPLATE = 4;\nconst LEVEL_BEFORE_TEMPLATE = 2;\nconst LEVEL_LAYOUT = 3;\nconst LEVEL_MAIN_LAYOUT = 5;\nconst LEVEL_NO_RENDER = 0;\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_27","title":"Properties","text":"<pre><code>//\nprotected $actionName;\n\n//\nprotected $activeRenderPaths;\n\n//\nprotected $basePath = ;\n\n//\nprotected $content = ;\n\n//\nprotected $controllerName;\n\n//\nprotected $currentRenderLevel = 0;\n\n//\nprotected $disabled = false;\n\n//\nprotected $disabledLevels;\n\n//\nprotected $engines = false;\n\n//\nprotected $eventsManager;\n\n//\nprotected $layout;\n\n//\nprotected $layoutsDir = ;\n\n//\nprotected $mainView = index;\n\n//\nprotected $options;\n\n//\nprotected $params;\n\n//\nprotected $pickView;\n\n//\nprotected $partialsDir = ;\n\n//\nprotected $registeredEngines;\n\n//\nprotected $renderLevel = 5;\n\n//\nprotected $templatesAfter;\n\n//\nprotected $templatesBefore;\n\n//\nprotected $viewsDirs;\n\n//\nprotected $viewParams;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_63","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Phalcon\\Mvc\\View constructor</p> <p><pre><code>public function __get( string $key ): mixed | null;\n</code></pre> Magic method to retrieve a variable passed to the view</p> <pre><code>echo $this-&gt;view-&gt;products;\n</code></pre> <p><pre><code>public function __isset( string $key ): bool;\n</code></pre> Magic method to retrieve if a variable is set in the view</p> <pre><code>echo isset($this-&gt;view-&gt;products);\n</code></pre> <p><pre><code>public function __set( string $key, mixed $value );\n</code></pre> Magic method to pass variables to the views</p> <pre><code>$this-&gt;view-&gt;products = $products;\n</code></pre> <p><pre><code>public function cleanTemplateAfter(): View;\n</code></pre> Resets any template before layouts</p> <p><pre><code>public function cleanTemplateBefore(): View;\n</code></pre> Resets any \"template before\" layouts</p> <p><pre><code>public function disable(): View;\n</code></pre> Disables the auto-rendering process</p> <p><pre><code>public function disableLevel( mixed $level ): ViewInterface;\n</code></pre> Disables a specific level of rendering</p> <pre><code>// Render all levels except ACTION level\n$this-&gt;view-&gt;disableLevel(\n    View::LEVEL_ACTION_VIEW\n);\n</code></pre> <p><pre><code>public function enable(): View;\n</code></pre> Enables the auto-rendering process</p> <p><pre><code>public function exists( string $view ): bool;\n</code></pre> Checks whether view exists</p> <p><pre><code>public function finish(): View;\n</code></pre> Finishes the render process by stopping the output buffering</p> <p><pre><code>public function getActionName(): string;\n</code></pre> Gets the name of the action rendered</p> <p><pre><code>public function getActiveRenderPath(): string | array;\n</code></pre> Returns the path (or paths) of the views that are currently rendered</p> <p><pre><code>public function getBasePath(): string;\n</code></pre> Gets base path</p> <p><pre><code>public function getContent(): string;\n</code></pre> Returns output from another view stage</p> <p><pre><code>public function getControllerName(): string;\n</code></pre> Gets the name of the controller rendered</p> <pre><code>public function getCurrentRenderLevel()\n</code></pre> <p><pre><code>public function getEventsManager(): ManagerInterface | null;\n</code></pre> Returns the internal event manager</p> <p><pre><code>public function getLayout(): string;\n</code></pre> Returns the name of the main view</p> <p><pre><code>public function getLayoutsDir(): string;\n</code></pre> Gets the current layouts sub-directory</p> <p><pre><code>public function getMainView(): string;\n</code></pre> Returns the name of the main view</p> <p><pre><code>public function getParamsToView(): array;\n</code></pre> Returns parameters to views</p> <p><pre><code>public function getPartial( string $partialPath, mixed $params = null ): string;\n</code></pre> Renders a partial view</p> <pre><code>// Retrieve the contents of a partial\necho $this-&gt;getPartial(\"shared/footer\");\n</code></pre> <pre><code>// Retrieve the contents of a partial with arguments\necho $this-&gt;getPartial(\n    \"shared/footer\",\n    [\n        \"content\" =&gt; $html,\n    ]\n);\n</code></pre> <p><pre><code>public function getPartialsDir(): string;\n</code></pre> Gets the current partials sub-directory</p> <pre><code>public function getRegisteredEngines()\n</code></pre> <p><pre><code>public function getRender( string $controllerName, string $actionName, array $params = [], mixed $configCallback = null ): string;\n</code></pre> Perform the automatic rendering returning the output as a string</p> <pre><code>$template = $this-&gt;view-&gt;getRender(\n    \"products\",\n    \"show\",\n    [\n        \"products\" =&gt; $products,\n    ]\n);\n</code></pre> <pre><code>public function getRenderLevel()\n</code></pre> <p><pre><code>public function getVar( string $key );\n</code></pre> Returns a parameter previously set in the view</p> <p><pre><code>public function getViewsDir(): string | array;\n</code></pre> Gets views directory</p> <p><pre><code>public function isDisabled(): bool;\n</code></pre> Whether automatic rendering is enabled</p> <p><pre><code>public function partial( string $partialPath, mixed $params = null );\n</code></pre> Renders a partial view</p> <pre><code>// Show a partial inside another view\n$this-&gt;partial(\"shared/footer\");\n</code></pre> <pre><code>// Show a partial inside another view with parameters\n$this-&gt;partial(\n    \"shared/footer\",\n    [\n        \"content\" =&gt; $html,\n    ]\n);\n</code></pre> <p><pre><code>public function pick( mixed $renderView ): View;\n</code></pre> Choose a different view to render instead of last-controller/last-action</p> <pre><code>use Phalcon\\Mvc\\Controller;\n\nclass ProductsController extends Controller\n{\n    public function saveAction()\n    {\n        // Do some save stuff...\n\n        // Then show the list view\n        $this-&gt;view-&gt;pick(\"products/list\");\n    }\n}\n</code></pre> <p><pre><code>public function processRender( string $controllerName, string $actionName, array $params = [], bool $fireEvents = bool ): bool;\n</code></pre> Processes the view and templates; Fires events if needed</p> <p><pre><code>public function registerEngines( array $engines ): View;\n</code></pre> Register templating engines</p> <pre><code>$this-&gt;view-&gt;registerEngines(\n    [\n        \".phtml\" =&gt; \\Phalcon\\Mvc\\View\\Engine\\Php::class,\n        \".volt\"  =&gt; \\Phalcon\\Mvc\\View\\Engine\\Volt::class,\n        \".mhtml\" =&gt; \\MyCustomEngine::class,\n    ]\n);\n</code></pre> <p><pre><code>public function render( string $controllerName, string $actionName, array $params = [] ): View | bool;\n</code></pre> Executes render process from dispatching data</p> <pre><code>// Shows recent posts view (app/views/posts/recent.phtml)\n$view-&gt;start()-&gt;render(\"posts\", \"recent\")-&gt;finish();\n</code></pre> <p><pre><code>public function reset(): View;\n</code></pre> Resets the view component to its factory default values</p> <p><pre><code>public function setBasePath( string $basePath ): View;\n</code></pre> Sets base path. Depending of your platform, always add a trailing slash or backslash</p> <pre><code>$view-&gt;setBasePath(__DIR__ . \"/\");\n</code></pre> <p><pre><code>public function setContent( string $content ): View;\n</code></pre> Externally sets the view content</p> <pre><code>$this-&gt;view-&gt;setContent(\"&lt;h1&gt;hello&lt;/h1&gt;\");\n</code></pre> <p><pre><code>public function setEventsManager( ManagerInterface $eventsManager ): void;\n</code></pre> Sets the events manager</p> <p><pre><code>public function setLayout( string $layout ): View;\n</code></pre> Change the layout to be used instead of using the name of the latest controller name</p> <pre><code>$this-&gt;view-&gt;setLayout(\"main\");\n</code></pre> <p><pre><code>public function setLayoutsDir( string $layoutsDir ): View;\n</code></pre> Sets the layouts sub-directory. Must be a directory under the views directory. Depending of your platform, always add a trailing slash or backslash</p> <pre><code>$view-&gt;setLayoutsDir(\"../common/layouts/\");\n</code></pre> <p><pre><code>public function setMainView( string $viewPath ): View;\n</code></pre> Sets default view name. Must be a file without extension in the views directory</p> <pre><code>// Renders as main view views-dir/base.phtml\n$this-&gt;view-&gt;setMainView(\"base\");\n</code></pre> <p><pre><code>public function setParamToView( string $key, mixed $value ): View;\n</code></pre> Adds parameters to views (alias of setVar)</p> <pre><code>$this-&gt;view-&gt;setParamToView(\"products\", $products);\n</code></pre> <p><pre><code>public function setPartialsDir( string $partialsDir ): View;\n</code></pre> Sets a partials sub-directory. Must be a directory under the views directory. Depending of your platform, always add a trailing slash or backslash</p> <pre><code>$view-&gt;setPartialsDir(\"../common/partials/\");\n</code></pre> <p><pre><code>public function setRenderLevel( int $level ): ViewInterface;\n</code></pre> Sets the render level for the view</p> <pre><code>// Render the view related to the controller only\n$this-&gt;view-&gt;setRenderLevel(\n    View::LEVEL_LAYOUT\n);\n</code></pre> <p><pre><code>public function setTemplateAfter( mixed $templateAfter ): View;\n</code></pre> Sets a \"template after\" controller layout</p> <p><pre><code>public function setTemplateBefore( mixed $templateBefore ): View;\n</code></pre> Sets a template before the controller layout</p> <p><pre><code>public function setVar( string $key, mixed $value ): View;\n</code></pre> Set a single view parameter</p> <pre><code>$this-&gt;view-&gt;setVar(\"products\", $products);\n</code></pre> <p><pre><code>public function setVars( array $params, bool $merge = bool ): View;\n</code></pre> Set all the render params</p> <pre><code>$this-&gt;view-&gt;setVars(\n    [\n        \"products\" =&gt; $products,\n    ]\n);\n</code></pre> <p><pre><code>public function setViewsDir( mixed $viewsDir ): View;\n</code></pre> Sets the views directory. Depending of your platform, always add a trailing slash or backslash</p> <p><pre><code>public function start(): View;\n</code></pre> Starts rendering process enabling the output buffering</p> <p><pre><code>public function toString( string $controllerName, string $actionName, array $params = [] ): string;\n</code></pre> Renders the view and returns it as a string</p> <p><pre><code>protected function engineRender( array $engines, string $viewPath, bool $silence, bool $mustClean = bool );\n</code></pre> Checks whether view exists on registered extensions and render it</p> <p><pre><code>protected function getViewsDirs(): array;\n</code></pre> Gets views directories</p> <p><pre><code>final protected function isAbsolutePath( string $path );\n</code></pre> Checks if a path is absolute or not</p> <p><pre><code>protected function loadTemplateEngines(): array;\n</code></pre> Loads registered template engines, if none is registered it will use Phalcon\\Mvc\\View\\Engine\\Php</p>"},{"location":"api/phalcon_mvc/#mvcviewengineabstractengine","title":"Mvc\\View\\Engine\\AbstractEngine","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\View\\Engine</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Di\\Injectable</code></li> <li><code>Phalcon\\Mvc\\ViewBaseInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Injectable</code></p> </li> <li> <p>Implements</p> <ul> <li><code>EngineInterface</code></li> </ul> </li> </ul> <p>All the template engine adapters must inherit this class. This provides basic interfacing between the engine and the Phalcon\\Mvc\\View component.</p>"},{"location":"api/phalcon_mvc/#properties_28","title":"Properties","text":"<pre><code>//\nprotected $view;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_64","title":"Methods","text":"<p><pre><code>public function __construct( ViewBaseInterface $view, DiInterface $container = null );\n</code></pre> Phalcon\\Mvc\\View\\Engine constructor</p> <p><pre><code>public function getContent(): string;\n</code></pre> Returns cached output on another view stage</p> <p><pre><code>public function getView(): ViewBaseInterface;\n</code></pre> Returns the view component related to the adapter</p> <p><pre><code>public function partial( string $partialPath, mixed $params = null ): void;\n</code></pre> Renders a partial inside another view</p>"},{"location":"api/phalcon_mvc/#mvcviewengineengineinterface","title":"Mvc\\View\\Engine\\EngineInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\View\\Engine</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Mvc\\View engine adapters</p>"},{"location":"api/phalcon_mvc/#methods_65","title":"Methods","text":"<p><pre><code>public function getContent(): string;\n</code></pre> Returns cached output on another view stage</p> <p><pre><code>public function partial( string $partialPath, mixed $params = null ): void;\n</code></pre> Renders a partial inside another view</p> <p><pre><code>public function render( string $path, mixed $params, bool $mustClean = bool );\n</code></pre> Renders a view using the template engine</p>"},{"location":"api/phalcon_mvc/#mvcviewenginephp","title":"Mvc\\View\\Engine\\Php","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\View\\Engine</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractEngine</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Adapter to use PHP itself as templating engine</p>"},{"location":"api/phalcon_mvc/#methods_66","title":"Methods","text":"<p><pre><code>public function render( string $path, mixed $params, bool $mustClean = bool );\n</code></pre> Renders a view using the template engine</p>"},{"location":"api/phalcon_mvc/#mvcviewenginevolt","title":"Mvc\\View\\Engine\\Volt","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\View\\Engine</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Events\\EventsAwareInterface</code></li> <li><code>Phalcon\\Events\\ManagerInterface</code></li> <li><code>Phalcon\\Html\\Link\\Link</code></li> <li><code>Phalcon\\Html\\Link\\Serializer\\Header</code></li> <li><code>Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler</code></li> <li><code>Phalcon\\Mvc\\View\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractEngine</code></p> </li> <li> <p>Implements</p> <ul> <li><code>EventsAwareInterface</code></li> </ul> </li> </ul> <p>Designer friendly and fast template engine for PHP written in Zephir/C</p>"},{"location":"api/phalcon_mvc/#properties_29","title":"Properties","text":"<pre><code>//\nprotected $compiler;\n\n//\nprotected $eventsManager;\n\n//\nprotected $macros;\n\n//\nprotected $options;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_67","title":"Methods","text":"<p><pre><code>public function callMacro( string $name, array $arguments = [] ): mixed;\n</code></pre> Checks if a macro is defined and calls it</p> <p><pre><code>public function convertEncoding( string $text, string $from, string $to ): string;\n</code></pre> Performs a string conversion</p> <p><pre><code>public function getCompiler(): Compiler;\n</code></pre> Returns the Volt's compiler</p> <p><pre><code>public function getEventsManager(): ManagerInterface | null;\n</code></pre> Returns the internal event manager</p> <p><pre><code>public function getOptions(): array;\n</code></pre> Return Volt's options</p> <p><pre><code>public function isIncluded( mixed $needle, mixed $haystack ): bool;\n</code></pre> Checks if the needle is included in the haystack</p> <p><pre><code>public function length( mixed $item ): int;\n</code></pre> Length filter. If an array/object is passed a count is performed otherwise a strlen/mb_strlen</p> <p><pre><code>public function render( string $templatePath, mixed $params, bool $mustClean = bool );\n</code></pre> Renders a view using the template engine</p> <p><pre><code>public function setEventsManager( ManagerInterface $eventsManager ): void;\n</code></pre> Sets the events manager</p> <p><pre><code>public function setOptions( array $options );\n</code></pre> Set Volt's options</p> <p><pre><code>public function slice( mixed $value, int $start = int, mixed $end = null );\n</code></pre> Extracts a slice from a string/array/traversable object value</p> <p><pre><code>public function sort( array $value ): array;\n</code></pre> Sorts an array</p>"},{"location":"api/phalcon_mvc/#mvcviewenginevoltcompiler","title":"Mvc\\View\\Engine\\Volt\\Compiler","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\View\\Engine\\Volt</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Closure</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Di\\InjectionAwareInterface</code></li> <li><code>Phalcon\\Mvc\\ViewBaseInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>InjectionAwareInterface</code></li> </ul> </li> </ul> <p>This class reads and compiles Volt templates into PHP plain code</p> <pre><code>$compiler = new \\Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler();\n\n$compiler-&gt;compile(\"views/partials/header.volt\");\n\nrequire $compiler-&gt;getCompiledTemplatePath();\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_30","title":"Properties","text":"<pre><code>//\nprotected $autoescape = false;\n\n//\nprotected $blockLevel = 0;\n\n//\nprotected $blocks;\n\n//\nprotected $container;\n\n//\nprotected $compiledTemplatePath;\n\n//\nprotected $currentBlock;\n\n//\nprotected $currentPath;\n\n//\nprotected $exprLevel = 0;\n\n//\nprotected $extended = false;\n\n//\nprotected $extensions;\n\n//\nprotected $extendedBlocks;\n\n//\nprotected $filters;\n\n//\nprotected $foreachLevel = 0;\n\n//\nprotected $forElsePointers;\n\n//\nprotected functions;\n\n//\nprotected $level = 0;\n\n//\nprotected $loopPointers;\n\n//\nprotected $macros;\n\n//\nprotected $options;\n\n//\nprotected $prefix;\n\n//\nprotected $view;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_68","title":"Methods","text":"<p><pre><code>public function __construct( ViewBaseInterface $view = null );\n</code></pre> Phalcon\\Mvc\\View\\Engine\\Volt\\Compiler</p> <p><pre><code>public function addExtension( mixed $extension ): Compiler;\n</code></pre> Registers a Volt's extension</p> <p><pre><code>public function addFilter( string $name, mixed $definition ): Compiler;\n</code></pre> Register a new filter in the compiler</p> <p><pre><code>public function addFunction( string $name, mixed $definition ): Compiler;\n</code></pre> Register a new function in the compiler</p> <p><pre><code>public function attributeReader( array $expr ): string;\n</code></pre> Resolves attribute reading</p> <p><pre><code>public function compile( string $templatePath, bool $extendsMode = bool );\n</code></pre> Compiles a template into a file applying the compiler options This method does not return the compiled path if the template was not compiled</p> <pre><code>$compiler-&gt;compile(\"views/layouts/main.volt\");\n\nrequire $compiler-&gt;getCompiledTemplatePath();\n</code></pre> <p><pre><code>public function compileAutoEscape( array $statement, bool $extendsMode ): string;\n</code></pre> Compiles a \"autoescape\" statement returning PHP code</p> <p><pre><code>public function compileCache( array $statement, bool $extendsMode = bool ): string;\n</code></pre> Compiles a \"cache\" statement returning PHP code</p> <p>@deprecated Will be removed in 5.0 @todo Remove this in the next major version</p> <p><pre><code>public function compileCall( array $statement, bool $extendsMode );\n</code></pre> Compiles calls to macros</p> <p><pre><code>public function compileCase( array $statement, bool $caseClause = bool ): string;\n</code></pre> Compiles a \"case\"/\"default\" clause returning PHP code</p> <p><pre><code>public function compileDo( array $statement ): string;\n</code></pre> Compiles a \"do\" statement returning PHP code</p> <p><pre><code>public function compileEcho( array $statement ): string;\n</code></pre> Compiles a {% raw %}<code>{{</code> <code>}}</code> statement returning PHP code</p> <p><pre><code>public function compileElseIf( array $statement ): string;\n</code></pre> Compiles a \"elseif\" statement returning PHP code</p> <p><pre><code>public function compileFile( string $path, string $compiledPath, bool $extendsMode = bool );\n</code></pre> Compiles a template into a file forcing the destination path</p> <pre><code>$compiler-&gt;compileFile(\n    \"views/layouts/main.volt\",\n    \"views/layouts/main.volt.php\"\n);\n</code></pre> <p><pre><code>public function compileForElse(): string;\n</code></pre> Generates a 'forelse' PHP code</p> <p><pre><code>public function compileForeach( array $statement, bool $extendsMode = bool ): string;\n</code></pre> Compiles a \"foreach\" intermediate code representation into plain PHP code</p> <p><pre><code>public function compileIf( array $statement, bool $extendsMode = bool ): string;\n</code></pre> Compiles a 'if' statement returning PHP code</p> <p><pre><code>public function compileInclude( array $statement ): string;\n</code></pre> Compiles a 'include' statement returning PHP code</p> <p><pre><code>public function compileMacro( array $statement, bool $extendsMode ): string;\n</code></pre> Compiles macros</p> <p><pre><code>public function compileReturn( array $statement ): string;\n</code></pre> Compiles a \"return\" statement returning PHP code</p> <p><pre><code>public function compileSet( array $statement ): string;\n</code></pre> Compiles a \"set\" statement returning PHP code</p> <p><pre><code>public function compileString( string $viewCode, bool $extendsMode = bool ): string;\n</code></pre> Compiles a template into a string</p> <pre><code>echo $compiler-&gt;compileString({% raw %}'{{ \"hello world\" }}'{% endraw %});\n</code></pre> <p><pre><code>public function compileSwitch( array $statement, bool $extendsMode = bool ): string;\n</code></pre> Compiles a 'switch' statement returning PHP code</p> <p><pre><code>final public function expression( array $expr ): string;\n</code></pre> Resolves an expression node in an AST volt tree</p> <p><pre><code>final public function fireExtensionEvent( string $name, mixed $arguments = null );\n</code></pre> Fires an event to registered extensions</p> <p><pre><code>public function functionCall( array $expr ): string;\n</code></pre> Resolves function intermediate code into PHP function calls</p> <p><pre><code>public function getCompiledTemplatePath(): string;\n</code></pre> Returns the path to the last compiled template</p> <p><pre><code>public function getDI(): DiInterface;\n</code></pre> Returns the internal dependency injector</p> <p><pre><code>public function getExtensions(): array;\n</code></pre> Returns the list of extensions registered in Volt</p> <p><pre><code>public function getFilters(): array;\n</code></pre> Register the user registered filters</p> <p><pre><code>public function getFunctions(): array;\n</code></pre> Register the user registered functions</p> <p><pre><code>public function getOption( string $option );\n</code></pre> Returns a compiler's option</p> <p><pre><code>public function getOptions(): array;\n</code></pre> Returns the compiler options</p> <p><pre><code>public function getTemplatePath(): string;\n</code></pre> Returns the path that is currently being compiled</p> <p><pre><code>public function getUniquePrefix(): string;\n</code></pre> Return a unique prefix to be used as prefix for compiled variables and contexts</p> <p><pre><code>public function parse( string $viewCode );\n</code></pre> Parses a Volt template returning its intermediate representation</p> <pre><code>print_r(\n    $compiler-&gt;parse(\"{% raw %}{{ 3 + 2 }}{% endraw %}\")\n);\n</code></pre> <p><pre><code>public function resolveTest( array $test, string $left ): string;\n</code></pre> Resolves filter intermediate code into a valid PHP expression</p> <p><pre><code>public function setDI( DiInterface $container ): void;\n</code></pre> Sets the dependency injector</p> <p><pre><code>public function setOption( string $option, mixed $value );\n</code></pre> Sets a single compiler option</p> <p><pre><code>public function setOptions( array $options );\n</code></pre> Sets the compiler options</p> <p><pre><code>public function setUniquePrefix( string $prefix ): Compiler;\n</code></pre> Set a unique prefix to be used as prefix for compiled variables</p> <p><pre><code>protected function compileSource( string $viewCode, bool $extendsMode = bool ): string;\n</code></pre> Compiles a Volt source code returning a PHP plain version</p> <p><pre><code>protected function getFinalPath( string $path );\n</code></pre> Gets the final path with VIEW</p> <p><pre><code>final protected function resolveFilter( array $filter, string $left ): string;\n</code></pre> Resolves filter intermediate code into PHP function calls</p> <p><pre><code>final protected function statementList( array $statements, bool $extendsMode = bool ): string;\n</code></pre> Traverses a statement list compiling each of its nodes</p> <p><pre><code>final protected function statementListOrExtends( mixed $statements );\n</code></pre> Compiles a block of statements</p>"},{"location":"api/phalcon_mvc/#mvcviewenginevoltexception","title":"Mvc\\View\\Engine\\Volt\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\View\\Engine\\Volt</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Mvc\\View\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>BaseException</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Class for exceptions thrown by Phalcon\\Mvc\\View</p>"},{"location":"api/phalcon_mvc/#properties_31","title":"Properties","text":"<pre><code>//\nprotected $statement;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_69","title":"Methods","text":"<pre><code>public function __construct( string $message = string, array $statement = [], int $code = int, \\Exception $previous = null );\n</code></pre> <p><pre><code>public function getStatement(): array;\n</code></pre> Gets currently parsed statement (if any).</p>"},{"location":"api/phalcon_mvc/#mvcviewexception","title":"Mvc\\View\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\View</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\View\\Exception</p> <p>Class for exceptions thrown by Phalcon\\Mvc\\View</p>"},{"location":"api/phalcon_mvc/#mvcviewsimple","title":"Mvc\\View\\Simple","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\View</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Closure</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Di\\Injectable</code></li> <li><code>Phalcon\\Events\\EventsAwareInterface</code></li> <li><code>Phalcon\\Events\\ManagerInterface</code></li> <li><code>Phalcon\\Mvc\\ViewBaseInterface</code></li> <li><code>Phalcon\\Mvc\\View\\Engine\\EngineInterface</code></li> <li><code>Phalcon\\Mvc\\View\\Engine\\Php</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Injectable</code></p> </li> <li> <p>Implements</p> <ul> <li><code>EventsAwareInterface</code></li> <li><code>ViewBaseInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Mvc\\View\\Simple</p> <p>This component allows to render views without hierarchical levels</p> <pre><code>use Phalcon\\Mvc\\View\\Simple as View;\n\n$view = new View();\n\n// Render a view\necho $view-&gt;render(\n    \"templates/my-view\",\n    [\n        \"some\" =&gt; $param,\n    ]\n);\n\n// Or with filename with extension\necho $view-&gt;render(\n    \"templates/my-view.volt\",\n    [\n        \"parameter\" =&gt; $here,\n    ]\n);\n</code></pre>"},{"location":"api/phalcon_mvc/#properties_32","title":"Properties","text":"<pre><code>//\nprotected $activeRenderPath;\n\n//\nprotected $content;\n\n/**\n * @var \\Phalcon\\Mvc\\View\\EngineInterface[]|false\n */\nprotected $engines = false;\n\n//\nprotected $eventsManager;\n\n//\nprotected $options;\n\n//\nprotected $partialsDir;\n\n/**\n * @var array|null\n */\nprotected $registeredEngines;\n\n//\nprotected $viewsDir;\n\n//\nprotected $viewParams;\n</code></pre>"},{"location":"api/phalcon_mvc/#methods_70","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Phalcon\\Mvc\\View\\Simple constructor</p> <p><pre><code>public function __get( string $key ): mixed | null;\n</code></pre> Magic method to retrieve a variable passed to the view</p> <pre><code>echo $this-&gt;view-&gt;products;\n</code></pre> <p><pre><code>public function __set( string $key, mixed $value );\n</code></pre> Magic method to pass variables to the views</p> <pre><code>$this-&gt;view-&gt;products = $products;\n</code></pre> <p><pre><code>public function getActiveRenderPath(): string;\n</code></pre> Returns the path of the view that is currently rendered</p> <p><pre><code>public function getContent(): string;\n</code></pre> Returns output from another view stage</p> <p><pre><code>public function getEventsManager(): ManagerInterface | null;\n</code></pre> Returns the internal event manager</p> <p><pre><code>public function getParamsToView(): array;\n</code></pre> Returns parameters to views</p> <pre><code>public function getRegisteredEngines(): array|null\n</code></pre> <p><pre><code>public function getVar( string $key ): mixed | null;\n</code></pre> Returns a parameter previously set in the view</p> <p><pre><code>public function getViewsDir(): string;\n</code></pre> Gets views directory</p> <p><pre><code>public function partial( string $partialPath, mixed $params = null );\n</code></pre> Renders a partial view</p> <pre><code>// Show a partial inside another view\n$this-&gt;partial(\"shared/footer\");\n</code></pre> <pre><code>// Show a partial inside another view with parameters\n$this-&gt;partial(\n    \"shared/footer\",\n    [\n        \"content\" =&gt; $html,\n    ]\n);\n</code></pre> <p><pre><code>public function registerEngines( array $engines );\n</code></pre> Register templating engines</p> <pre><code>$this-&gt;view-&gt;registerEngines(\n    [\n        \".phtml\" =&gt; \\Phalcon\\Mvc\\View\\Engine\\Php::class,\n        \".volt\"  =&gt; \\Phalcon\\Mvc\\View\\Engine\\Volt::class,\n        \".mhtml\" =&gt; \\MyCustomEngine::class,\n    ]\n);\n</code></pre> <p><pre><code>public function render( string $path, array $params = [] ): string;\n</code></pre> Renders a view</p> <p><pre><code>public function setContent( string $content ): Simple;\n</code></pre> Externally sets the view content</p> <pre><code>$this-&gt;view-&gt;setContent(\"&lt;h1&gt;hello&lt;/h1&gt;\");\n</code></pre> <p><pre><code>public function setEventsManager( ManagerInterface $eventsManager ): void;\n</code></pre> Sets the events manager</p> <p><pre><code>public function setParamToView( string $key, mixed $value ): Simple;\n</code></pre> Adds parameters to views (alias of setVar)</p> <pre><code>$this-&gt;view-&gt;setParamToView(\"products\", $products);\n</code></pre> <p><pre><code>public function setVar( string $key, mixed $value ): Simple;\n</code></pre> Set a single view parameter</p> <pre><code>$this-&gt;view-&gt;setVar(\"products\", $products);\n</code></pre> <p><pre><code>public function setVars( array $params, bool $merge = bool ): Simple;\n</code></pre> Set all the render params</p> <pre><code>$this-&gt;view-&gt;setVars(\n    [\n        \"products\" =&gt; $products,\n    ]\n);\n</code></pre> <p><pre><code>public function setViewsDir( string $viewsDir );\n</code></pre> Sets views directory</p> <p><pre><code>final protected function internalRender( string $path, mixed $params );\n</code></pre> Tries to render the view with every engine registered in the component</p> <p><pre><code>protected function loadTemplateEngines(): array;\n</code></pre> Loads registered template engines, if none are registered it will use Phalcon\\Mvc\\View\\Engine\\Php</p>"},{"location":"api/phalcon_mvc/#mvcviewbaseinterface","title":"Mvc\\ViewBaseInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Cache\\Adapter\\AdapterInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\ViewInterface</p> <p>Interface for Phalcon\\Mvc\\View and Phalcon\\Mvc\\View\\Simple</p>"},{"location":"api/phalcon_mvc/#methods_71","title":"Methods","text":"<p><pre><code>public function getContent(): string;\n</code></pre> Returns cached output from another view stage</p> <p><pre><code>public function getParamsToView(): array;\n</code></pre> Returns parameters to views</p> <p><pre><code>public function getViewsDir(): string | array;\n</code></pre> Gets views directory</p> <p><pre><code>public function partial( string $partialPath, mixed $params = null );\n</code></pre> Renders a partial view</p> <p><pre><code>public function setContent( string $content );\n</code></pre> Externally sets the view content</p> <p><pre><code>public function setParamToView( string $key, mixed $value );\n</code></pre> Adds parameters to views (alias of setVar)</p> <p><pre><code>public function setVar( string $key, mixed $value );\n</code></pre> Adds parameters to views</p> <p><pre><code>public function setViewsDir( string $viewsDir );\n</code></pre> Sets views directory. Depending of your platform, always add a trailing slash or backslash</p>"},{"location":"api/phalcon_mvc/#mvcviewinterface","title":"Mvc\\ViewInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>ViewBaseInterface</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\ViewInterface</p> <p>Interface for Phalcon\\Mvc\\View</p>"},{"location":"api/phalcon_mvc/#methods_72","title":"Methods","text":"<p><pre><code>public function cleanTemplateAfter();\n</code></pre> Resets any template before layouts</p> <p><pre><code>public function cleanTemplateBefore();\n</code></pre> Resets any template before layouts</p> <p><pre><code>public function disable();\n</code></pre> Disables the auto-rendering process</p> <p><pre><code>public function enable();\n</code></pre> Enables the auto-rendering process</p> <p><pre><code>public function finish();\n</code></pre> Finishes the render process by stopping the output buffering</p> <p><pre><code>public function getActionName(): string;\n</code></pre> Gets the name of the action rendered</p> <p><pre><code>public function getActiveRenderPath(): string | array;\n</code></pre> Returns the path of the view that is currently rendered</p> <p><pre><code>public function getBasePath(): string;\n</code></pre> Gets base path</p> <p><pre><code>public function getControllerName(): string;\n</code></pre> Gets the name of the controller rendered</p> <p><pre><code>public function getLayout(): string;\n</code></pre> Returns the name of the main view</p> <p><pre><code>public function getLayoutsDir(): string;\n</code></pre> Gets the current layouts sub-directory</p> <p><pre><code>public function getMainView(): string;\n</code></pre> Returns the name of the main view</p> <p><pre><code>public function getPartialsDir(): string;\n</code></pre> Gets the current partials sub-directory</p> <p><pre><code>public function isDisabled(): bool;\n</code></pre> Whether the automatic rendering is disabled</p> <p><pre><code>public function pick( string $renderView );\n</code></pre> Choose a view different to render than last-controller/last-action</p> <p><pre><code>public function registerEngines( array $engines );\n</code></pre> Register templating engines</p> <p><pre><code>public function render( string $controllerName, string $actionName, array $params = [] ): ViewInterface | bool;\n</code></pre> Executes render process from dispatching data</p> <p><pre><code>public function reset();\n</code></pre> Resets the view component to its factory default values</p> <p><pre><code>public function setBasePath( string $basePath );\n</code></pre> Sets base path. Depending of your platform, always add a trailing slash or backslash</p> <p><pre><code>public function setLayout( string $layout );\n</code></pre> Change the layout to be used instead of using the name of the latest controller name</p> <p><pre><code>public function setLayoutsDir( string $layoutsDir );\n</code></pre> Sets the layouts sub-directory. Must be a directory under the views directory. Depending of your platform, always add a trailing slash or backslash</p> <p><pre><code>public function setMainView( string $viewPath );\n</code></pre> Sets default view name. Must be a file without extension in the views directory</p> <p><pre><code>public function setPartialsDir( string $partialsDir );\n</code></pre> Sets a partials sub-directory. Must be a directory under the views directory. Depending of your platform, always add a trailing slash or backslash</p> <p><pre><code>public function setRenderLevel( int $level ): ViewInterface;\n</code></pre> Sets the render level for the view</p> <p><pre><code>public function setTemplateAfter( mixed $templateAfter );\n</code></pre> Appends template after controller layout</p> <p><pre><code>public function setTemplateBefore( mixed $templateBefore );\n</code></pre> Appends template before controller layout</p> <p><pre><code>public function start();\n</code></pre> Starts rendering process enabling the output buffering</p>"},{"location":"api/phalcon_paginator/","title":"Phalcon paginator","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_paginator/#paginatoradapterabstractadapter","title":"Paginator\\Adapter\\AbstractAdapter","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Paginator\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Paginator\\Exception</code></li> <li><code>Phalcon\\Paginator\\Repository</code></li> <li><code>Phalcon\\Paginator\\RepositoryInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>AdapterInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Paginator\\Adapter\\AbstractAdapter</p>"},{"location":"api/phalcon_paginator/#properties","title":"Properties","text":"<pre><code>/**\n * Configuration of paginator\n */\nprotected $config;\n\n/**\n * Number of rows to show in the paginator. By default, is null\n */\nprotected $limitRows;\n\n/**\n * Current page in paginate\n */\nprotected $page;\n\n/**\n * Repository for pagination\n *\n * @var RepositoryInterface\n */\nprotected $repository;\n</code></pre>"},{"location":"api/phalcon_paginator/#methods","title":"Methods","text":"<p><pre><code>public function __construct( array $config );\n</code></pre> Phalcon\\Paginator\\Adapter\\AbstractAdapter constructor</p> <p><pre><code>public function getLimit(): int;\n</code></pre> Get current rows limit</p> <p><pre><code>public function setCurrentPage( int $page ): AdapterInterface;\n</code></pre> Set the current page number</p> <p><pre><code>public function setLimit( int $limitRows ): AdapterInterface;\n</code></pre> Set current rows limit</p> <p><pre><code>public function setRepository( RepositoryInterface $repository ): AdapterInterface;\n</code></pre> Sets current repository for pagination</p> <p><pre><code>protected function getRepository( array $properties = null ): RepositoryInterface;\n</code></pre> Gets current repository for pagination</p>"},{"location":"api/phalcon_paginator/#paginatoradapteradapterinterface","title":"Paginator\\Adapter\\AdapterInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Paginator\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Paginator\\RepositoryInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Paginator\\AdapterInterface</p> <p>Interface for Phalcon\\Paginator adapters</p>"},{"location":"api/phalcon_paginator/#methods_1","title":"Methods","text":"<p><pre><code>public function getLimit(): int;\n</code></pre> Get current rows limit</p> <p><pre><code>public function paginate(): RepositoryInterface;\n</code></pre> Returns a slice of the resultset to show in the pagination</p> <p><pre><code>public function setCurrentPage( int $page );\n</code></pre> Set the current page number</p> <p><pre><code>public function setLimit( int $limit );\n</code></pre> Set current rows limit</p>"},{"location":"api/phalcon_paginator/#paginatoradaptermodel","title":"Paginator\\Adapter\\Model","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Paginator\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\ResultsetInterface</code></li> <li><code>Phalcon\\Paginator\\Exception</code></li> <li><code>Phalcon\\Paginator\\RepositoryInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Paginator\\Adapter\\Model</p> <p>This adapter allows to paginate data using a Phalcon\\Mvc\\Model resultset as a base.</p> <pre><code>use Phalcon\\Paginator\\Adapter\\Model;\n\n$paginator = new Model(\n    [\n        \"model\" =&gt; Robots::class,\n        \"limit\" =&gt; 25,\n        \"page\"  =&gt; $currentPage,\n    ]\n);\n\n\n$paginator = new Model(\n    [\n        \"model\" =&gt; Robots::class,\n        \"parameters\" =&gt; [\n             \"columns\" =&gt; \"id, name\"\n        ],\n        \"limit\" =&gt; 12,\n        \"page\"  =&gt; $currentPage,\n    ]\n);\n\n\n$paginator = new Model(\n    [\n        \"model\" =&gt; Robots::class,\n        \"parameters\" =&gt; [\n             \"type = :type:\",\n             \"bind\" =&gt; [\n                 \"type\" =&gt; \"mechanical\"\n             ],\n             \"order\" =&gt; \"name\"\n        ],\n        \"limit\" =&gt; 16,\n        \"page\"  =&gt; $currentPage,\n    ]\n);\n\n$paginator = new Model(\n    [\n        \"model\" =&gt; Robots::class,\n        \"parameters\" =&gt; \"(id % 2) = 0\",\n        \"limit\" =&gt; 8,\n        \"page\"  =&gt; $currentPage,\n    ]\n);\n\n\n$paginator = new Model(\n    [\n        \"model\" =&gt; Robots::class,\n        \"parameters\" =&gt; [ \"(id % 2) = 0\" ],\n        \"limit\" =&gt; 8,\n        \"page\"  =&gt; $currentPage,\n    ]\n);\n\n$paginate = $paginator-&gt;paginate();\n</code></pre>"},{"location":"api/phalcon_paginator/#methods_2","title":"Methods","text":"<p><pre><code>public function paginate(): RepositoryInterface;\n</code></pre> Returns a slice of the resultset to show in the pagination</p>"},{"location":"api/phalcon_paginator/#paginatoradapternativearray","title":"Paginator\\Adapter\\NativeArray","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Paginator\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Paginator\\Exception</code></li> <li><code>Phalcon\\Paginator\\RepositoryInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Paginator\\Adapter\\NativeArray</p> <p>Pagination using a PHP array as source of data</p> <pre><code>use Phalcon\\Paginator\\Adapter\\NativeArray;\n\n$paginator = new NativeArray(\n    [\n        \"data\"  =&gt; [\n            [\"id\" =&gt; 1, \"name\" =&gt; \"Artichoke\"],\n            [\"id\" =&gt; 2, \"name\" =&gt; \"Carrots\"],\n            [\"id\" =&gt; 3, \"name\" =&gt; \"Beet\"],\n            [\"id\" =&gt; 4, \"name\" =&gt; \"Lettuce\"],\n            [\"id\" =&gt; 5, \"name\" =&gt; \"\"],\n        ],\n        \"limit\" =&gt; 2,\n        \"page\"  =&gt; $currentPage,\n    ]\n);\n</code></pre>"},{"location":"api/phalcon_paginator/#methods_3","title":"Methods","text":"<p><pre><code>public function paginate(): RepositoryInterface;\n</code></pre> Returns a slice of the resultset to show in the pagination</p>"},{"location":"api/phalcon_paginator/#paginatoradapterquerybuilder","title":"Paginator\\Adapter\\QueryBuilder","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Paginator\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Db\\Enum</code></li> <li><code>Phalcon\\Mvc\\Model\\Query\\Builder</code></li> <li><code>Phalcon\\Paginator\\Exception</code></li> <li><code>Phalcon\\Paginator\\RepositoryInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Paginator\\Adapter\\QueryBuilder</p> <p>Pagination using a PHQL query builder as source of data</p> <pre><code>use Phalcon\\Paginator\\Adapter\\QueryBuilder;\n\n$builder = $this-&gt;modelsManager-&gt;createBuilder()\n                -&gt;columns(\"id, name\")\n                -&gt;from(Robots::class)\n                -&gt;orderBy(\"name\");\n\n$paginator = new QueryBuilder(\n    [\n        \"builder\" =&gt; $builder,\n        \"limit\"   =&gt; 20,\n        \"page\"    =&gt; 1,\n    ]\n);\n</code></pre>"},{"location":"api/phalcon_paginator/#properties_1","title":"Properties","text":"<pre><code>/**\n * Paginator's data\n */\nprotected $builder;\n\n/**\n * Columns for count query if builder has having\n */\nprotected $columns;\n</code></pre>"},{"location":"api/phalcon_paginator/#methods_4","title":"Methods","text":"<p><pre><code>public function __construct( array $config );\n</code></pre> Phalcon\\Paginator\\Adapter\\QueryBuilder</p> <p><pre><code>public function getCurrentPage(): int;\n</code></pre> Get the current page number</p> <p><pre><code>public function getQueryBuilder(): Builder;\n</code></pre> Get query builder object</p> <p><pre><code>public function paginate(): RepositoryInterface;\n</code></pre> Returns a slice of the resultset to show in the pagination</p> <p><pre><code>public function setQueryBuilder( Builder $builder ): QueryBuilder;\n</code></pre> Set query builder object</p>"},{"location":"api/phalcon_paginator/#paginatorexception","title":"Paginator\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Paginator</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Paginator\\Exception</p> <p>Exceptions thrown in Phalcon\\Paginator will use this class</p>"},{"location":"api/phalcon_paginator/#paginatorpaginatorfactory","title":"Paginator\\PaginatorFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Paginator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Factory\\AbstractFactory</code></li> <li><code>Phalcon\\Paginator\\Adapter\\AdapterInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFactory</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>This file is part of the Phalcon Framework.</p> <p>(c) Phalcon Team team@phalcon.io</p> <p>For the full copyright and license information, please view the LICENSE.txt file that was distributed with this source code.</p>"},{"location":"api/phalcon_paginator/#methods_5","title":"Methods","text":"<p><pre><code>public function __construct( array $services = [] );\n</code></pre> AdapterFactory constructor.</p> <p><pre><code>public function load( mixed $config ): AdapterInterface;\n</code></pre> Factory to create an instance from a Config object</p> <pre><code>use Phalcon\\Paginator\\PaginatorFactory;\n\n$builder = $this\n     -&gt;modelsManager\n     -&gt;createBuilder()\n     -&gt;columns(\"id, name\")\n     -&gt;from(Robots::class)\n     -&gt;orderBy(\"name\");\n\n$options = [\n    \"builder\" =&gt; $builder,\n    \"limit\"   =&gt; 20,\n    \"page\"    =&gt; 1,\n    \"adapter\" =&gt; \"queryBuilder\",\n];\n\n$paginator = (new PaginatorFactory())-&gt;load($options);\n</code></pre> <p><pre><code>public function newInstance( string $name, array $options = [] ): AdapterInterface;\n</code></pre> Create a new instance of the adapter</p> <pre><code>protected function getAdapters(): array;\n</code></pre>"},{"location":"api/phalcon_paginator/#paginator-repository","title":"Class Phalcon\\Paginator\\Repository","text":""},{"location":"api/phalcon_paginator/#paginatorrepository","title":"Paginator\\Repository","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Paginator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>JsonSerializable</code></li> <li><code>Phalcon\\Helper\\Arr</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>JsonSerializable</code></li> <li><code>RepositoryInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Paginator\\Repository</p> <p>Repository of current state Phalcon\\Paginator\\AdapterInterface::paginate()</p>"},{"location":"api/phalcon_paginator/#properties_2","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $aliases;\n\n/**\n * @var array\n */\nprotected $properties;\n</code></pre>"},{"location":"api/phalcon_paginator/#methods_6","title":"Methods","text":"<p><pre><code>public function __get( string $property ): mixed | null;\n</code></pre></p> <p><pre><code>public function getAliases(): array;\n</code></pre></p> <p><pre><code>public function getCurrent(): int;\n</code></pre></p> <p><pre><code>public function getFirst(): int;\n</code></pre></p> <p><pre><code>public function getItems(): mixed;\n</code></pre></p> <p><pre><code>public function getLast(): int;\n</code></pre></p> <p><pre><code>public function getLimit(): int;\n</code></pre></p> <p><pre><code>public function getNext(): int;\n</code></pre></p> <p><pre><code>public function getPrevious(): int;\n</code></pre></p> <p><pre><code>public function getTotalItems(): int;\n</code></pre></p> <p><pre><code>public function jsonSerialize(): array;\n</code></pre> See jsonSerialize</p> <p><pre><code>public function setAliases( array $aliases ): RepositoryInterface;\n</code></pre></p> <p><pre><code>public function setProperties( array $properties ): RepositoryInterface;\n</code></pre></p> <p><pre><code>protected function getProperty( string $property, mixed $defaultValue = null ): mixed;\n</code></pre> Gets value of property by name</p> <p><pre><code>protected function getRealNameProperty( string $property ): string;\n</code></pre> Resolve alias property name</p>"},{"location":"api/phalcon_paginator/#paginatorrepositoryinterface","title":"Paginator\\RepositoryInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Paginator</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Paginator\\RepositoryInterface</p> <p>Interface for the repository of current state Phalcon\\Paginator\\AdapterInterface::paginate()</p>"},{"location":"api/phalcon_paginator/#constants","title":"Constants","text":"<pre><code>const PROPERTY_CURRENT_PAGE = current;\nconst PROPERTY_FIRST_PAGE = first;\nconst PROPERTY_ITEMS = items;\nconst PROPERTY_LAST_PAGE = last;\nconst PROPERTY_LIMIT = limit;\nconst PROPERTY_NEXT_PAGE = next;\nconst PROPERTY_PREVIOUS_PAGE = previous;\nconst PROPERTY_TOTAL_ITEMS = total_items;\n</code></pre>"},{"location":"api/phalcon_paginator/#methods_7","title":"Methods","text":"<p><pre><code>public function getAliases(): array;\n</code></pre> Gets the aliases for properties repository</p> <p><pre><code>public function getCurrent(): int;\n</code></pre> Gets number of the current page</p> <p><pre><code>public function getFirst(): int;\n</code></pre> Gets number of the first page</p> <p><pre><code>public function getItems(): mixed;\n</code></pre> Gets the items on the current page</p> <p><pre><code>public function getLast(): int;\n</code></pre> Gets number of the last page</p> <p><pre><code>public function getLimit(): int;\n</code></pre> Gets current rows limit</p> <p><pre><code>public function getNext(): int;\n</code></pre> Gets number of the next page</p> <p><pre><code>public function getPrevious(): int;\n</code></pre> Gets number of the previous page</p> <p><pre><code>public function getTotalItems(): int;\n</code></pre> Gets the total number of items</p> <p><pre><code>public function setAliases( array $aliases ): RepositoryInterface;\n</code></pre> Sets the aliases for properties repository</p> <p><pre><code>public function setProperties( array $properties ): RepositoryInterface;\n</code></pre> Sets values for properties of the repository</p>"},{"location":"api/phalcon_registry/","title":"Phalcon registry","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_registry/#registry","title":"Registry","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Support</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Collection</code></li> <li><code>Traversable</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Collection</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Registry</p> <p>A registry is a container for storing objects and values in the application space. By storing the value in a registry, the same object is always available throughout your application.</p> <pre><code>$registry = new \\Phalcon\\Registry();\n\n// Set value\n$registry-&gt;something = \"something\";\n// or\n$registry[\"something\"] = \"something\";\n\n// Get value\n$value = $registry-&gt;something;\n// or\n$value = $registry[\"something\"];\n\n// Check if the key exists\n$exists = isset($registry-&gt;something);\n// or\n$exists = isset($registry[\"something\"]);\n\n// Unset\nunset($registry-&gt;something);\n// or\nunset($registry[\"something\"]);\n</code></pre> <p>In addition to ArrayAccess, Phalcon\\Registry also implements Countable (count($registry) will return the number of elements in the registry), Serializable and Iterator (you can iterate over the registry using a foreach loop) interfaces. For PHP 5.4 and higher, JsonSerializable interface is implemented.</p> <p>Phalcon\\Registry is very fast (it is typically faster than any userspace implementation of the registry); however, this comes at a price: Phalcon\\Registry is a final class and cannot be inherited from.</p> <p>Though Phalcon\\Registry exposes methods like __get(), offsetGet(), count() etc, it is not recommended to invoke them manually (these methods exist mainly to match the interfaces the registry implements): $registry-&gt;__get(\"property\") is several times slower than $registry-&gt;property.</p> <p>Internally all the magic methods (and interfaces except JsonSerializable) are implemented using object handlers or similar techniques: this allows to bypass relatively slow method calls.</p>"},{"location":"api/phalcon_registry/#methods","title":"Methods","text":"<p><pre><code>final public function __construct( array $data = null );\n</code></pre> Constructor</p> <p><pre><code>final public function __get( string $element ): mixed;\n</code></pre> Magic getter to get an element from the collection</p> <p><pre><code>final public function __isset( string $element ): bool;\n</code></pre> Magic isset to check whether an element exists or not</p> <p><pre><code>final public function __set( string $element, mixed $value ): void;\n</code></pre> Magic setter to assign values to an element</p> <p><pre><code>final public function __unset( string $element ): void;\n</code></pre> Magic unset to remove an element from the collection</p> <p><pre><code>final public function clear(): void;\n</code></pre> Clears the internal collection</p> <p><pre><code>final public function count(): int;\n</code></pre> Count elements of an object</p> <p>@link https://php.net/manual/en/countable.count.php</p> <p><pre><code>final public function get( string $element, mixed $defaultValue = null, string $cast = null ): mixed;\n</code></pre> Get the element from the collection</p> <p><pre><code>final public function getIterator(): Traversable;\n</code></pre> Returns the iterator of the class</p> <p><pre><code>final public function has( string $element ): bool;\n</code></pre> Determines whether an element is present in the collection.</p> <p><pre><code>final public function init( array $data = [] ): void;\n</code></pre> Initialize internal array</p> <p><pre><code>final public function jsonSerialize(): array;\n</code></pre> Specify data which should be serialized to JSON</p> <p>@link https://php.net/manual/en/jsonserializable.jsonserialize.php</p> <p><pre><code>final public function offsetExists( mixed $element ): bool;\n</code></pre> Whether a offset exists</p> <p>@link https://php.net/manual/en/arrayaccess.offsetexists.php</p> <p><pre><code>final public function offsetGet( mixed $element ): mixed;\n</code></pre> Offset to retrieve</p> <p>@link https://php.net/manual/en/arrayaccess.offsetget.php</p> <p><pre><code>final public function offsetSet( mixed $element, mixed $value ): void;\n</code></pre> Offset to set</p> <p>@link https://php.net/manual/en/arrayaccess.offsetset.php</p> <p><pre><code>final public function offsetUnset( mixed $element ): void;\n</code></pre> Offset to unset</p> <p>@link https://php.net/manual/en/arrayaccess.offsetunset.php</p> <p><pre><code>final public function remove( string $element ): void;\n</code></pre> Delete the element from the collection</p> <p><pre><code>final public function serialize(): string;\n</code></pre> String representation of object</p> <p>@link https://php.net/manual/en/serializable.serialize.php</p> <p><pre><code>final public function set( string $element, mixed $value ): void;\n</code></pre> Set an element in the collection</p> <p><pre><code>final public function toArray(): array;\n</code></pre> Returns the object in an array format</p> <p><pre><code>final public function toJson( int $options = int ): string;\n</code></pre> Returns the object in a JSON format</p> <p>The default string uses the following options for json_encode</p> <p>JSON_HEX_TAG, JSON_HEX_APOS, JSON_HEX_AMP, JSON_HEX_QUOT, JSON_UNESCAPED_SLASHES</p> <p>@see https://www.ietf.org/rfc/rfc4627.txt</p> <p><pre><code>final public function unserialize( mixed $serialized ): void;\n</code></pre> Constructs the object</p> <p>@link https://php.net/manual/en/serializable.unserialize.php</p>"},{"location":"api/phalcon_security/","title":"Phalcon security","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_security/#security","title":"Security","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\AbstractInjectionAware</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Security\\Exception</code></li> <li><code>Phalcon\\Security\\Random</code></li> <li><code>Phalcon\\Http\\RequestInterface</code></li> <li><code>Phalcon\\Session\\ManagerInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractInjectionAware</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>This component provides a set of functions to improve the security in Phalcon applications</p> <pre><code>$login    = $this-&gt;request-&gt;getPost(\"login\");\n$password = $this-&gt;request-&gt;getPost(\"password\");\n\n$user = Users::findFirstByLogin($login);\n\nif ($user) {\n    if ($this-&gt;security-&gt;checkHash($password, $user-&gt;password)) {\n        // The password is valid\n    }\n}\n</code></pre>"},{"location":"api/phalcon_security/#constants","title":"Constants","text":"<pre><code>const CRYPT_BLOWFISH = 4;\nconst CRYPT_BLOWFISH_A = 5;\nconst CRYPT_BLOWFISH_X = 6;\nconst CRYPT_BLOWFISH_Y = 7;\nconst CRYPT_DEFAULT = 0;\nconst CRYPT_EXT_DES = 2;\nconst CRYPT_MD5 = 3;\nconst CRYPT_SHA256 = 8;\nconst CRYPT_SHA512 = 9;\nconst CRYPT_STD_DES = 1;\n</code></pre>"},{"location":"api/phalcon_security/#properties","title":"Properties","text":"<pre><code>/**\n * @var int|null\n */\nprotected $defaultHash;\n\n/**\n * @var int\n */\nprotected $numberBytes = 16;\n\n/**\n * @var Random\n */\nprotected $random;\n\n/**\n * @var string}null\n */\nprotected $requestToken;\n\n/**\n * @var string|null\n */\nprotected $token;\n\n/**\n * @var string|null\n */\nprotected $tokenKey;\n\n/**\n * @var string\n */\nprotected $tokenKeySessionId = $PHALCON/CSRF/KEY$;\n\n/**\n * @var string\n */\nprotected $tokenValueSessionId = $PHALCON/CSRF$;\n\n/**\n * @var int\n */\nprotected $workFactor = 10;\n\n/**\n * @var SessionInterface|null\n */\nprivate localSession;\n\n/**\n * @var RequestInterface|null\n */\nprivate localRequest;\n</code></pre>"},{"location":"api/phalcon_security/#methods","title":"Methods","text":"<p><pre><code>public function __construct( SessionInterface $session = null, RequestInterface $request = null );\n</code></pre> Phalcon\\Security constructor</p> <p><pre><code>public function checkHash( string $password, string $passwordHash, int $maxPassLength = int ): bool;\n</code></pre> Checks a plain text password and its hash version to check if the password matches</p> <p><pre><code>public function checkToken( mixed $tokenKey = null, mixed $tokenValue = null, bool $destroyIfValid = bool ): bool;\n</code></pre> Check if the CSRF token sent in the request is the same that the current in session</p> <p><pre><code>public function computeHmac( string $data, string $key, string $algo, bool $raw = bool ): string;\n</code></pre> Computes a HMAC</p> <p><pre><code>public function destroyToken(): Security;\n</code></pre> Removes the value of the CSRF token and key from session</p> <p><pre><code>public function getDefaultHash(): int | null;\n</code></pre>  Returns the default hash</p> <p><pre><code>public function getRandom(): Random;\n</code></pre> Returns a secure random number generator instance</p> <p><pre><code>public function getRandomBytes(): int;\n</code></pre> Returns a number of bytes to be generated by the openssl pseudo random generator</p> <p><pre><code>public function getRequestToken(): string | null;\n</code></pre> Returns the value of the CSRF token for the current request.</p> <p><pre><code>public function getSaltBytes( int $numberBytes = int ): string;\n</code></pre> Generate a &gt;22-length pseudo random string to be used as salt for passwords</p> <p><pre><code>public function getSessionToken(): string | null;\n</code></pre> Returns the value of the CSRF token in session</p> <p><pre><code>public function getToken(): string;\n</code></pre> Generates a pseudo random token value to be used as input's value in a CSRF check</p> <p><pre><code>public function getTokenKey(): string;\n</code></pre> Generates a pseudo random token key to be used as input's name in a CSRF check</p> <pre><code>public function getWorkFactor(): int\n</code></pre> <p><pre><code>public function hash( string $password, int $workFactor = int ): string;\n</code></pre> Creates a password hash using bcrypt with a pseudo random salt</p> <p><pre><code>public function isLegacyHash( string $passwordHash ): bool;\n</code></pre> Checks if a password hash is a valid bcrypt's hash</p> <p><pre><code>public function setDefaultHash( int $defaultHash ): Security;\n</code></pre>  Sets the default hash</p> <p><pre><code>public function setRandomBytes( int $randomBytes ): Security;\n</code></pre> Sets a number of bytes to be generated by the openssl pseudo random generator</p> <p><pre><code>public function setWorkFactor( int $workFactor ): Security;\n</code></pre> Sets the work factor</p>"},{"location":"api/phalcon_security/#securityexception","title":"Security\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Security</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Security will use this class</p>"},{"location":"api/phalcon_security/#securityjwtbuilder","title":"Security\\JWT\\Builder","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Security\\JWT</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Collection</code></li> <li><code>Phalcon\\Collection\\CollectionInterface</code></li> <li><code>Phalcon\\Helper\\Base64</code></li> <li><code>Phalcon\\Helper\\Json</code></li> <li><code>Phalcon\\Security\\JWT\\Exceptions\\ValidatorException</code></li> <li><code>Phalcon\\Security\\JWT\\Signer\\SignerInterface</code></li> <li><code>Phalcon\\Security\\JWT\\Token\\Enum</code></li> <li><code>Phalcon\\Security\\JWT\\Token\\Item</code></li> <li><code>Phalcon\\Security\\JWT\\Token\\Signature</code></li> <li><code>Phalcon\\Security\\JWT\\Token\\Token</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Builder</p> <p>@link https://tools.ietf.org/html/rfc7519</p>"},{"location":"api/phalcon_security/#properties_1","title":"Properties","text":"<pre><code>/**\n * @var CollectionInterface\n */\nprivate $claims;\n\n/**\n * @var CollectionInterface\n */\nprivate jose;\n\n/**\n * @var string\n */\nprivate $passphrase;\n\n/**\n * @var SignerInterface\n */\nprivate $signer;\n</code></pre>"},{"location":"api/phalcon_security/#methods_1","title":"Methods","text":"<p><pre><code>public function __construct( SignerInterface $signer );\n</code></pre> Builder constructor.</p> <pre><code>public function getAudience();\n</code></pre> <pre><code>public function getClaims(): array;\n</code></pre> <pre><code>public function getContentType(): string | null;\n</code></pre> <pre><code>public function getExpirationTime(): int | null;\n</code></pre> <pre><code>public function getHeaders(): array;\n</code></pre> <pre><code>public function getId(): string | null;\n</code></pre> <pre><code>public function getIssuedAt(): int | null;\n</code></pre> <pre><code>public function getIssuer(): string | null;\n</code></pre> <pre><code>public function getNotBefore(): int | null;\n</code></pre> <pre><code>public function getPassphrase(): string;\n</code></pre> <pre><code>public function getSubject(): string | null;\n</code></pre> <pre><code>public function getToken(): Token;\n</code></pre> <pre><code>public function init(): Builder;\n</code></pre> <p><pre><code>public function setAudience( mixed $audience ): Builder;\n</code></pre> The \"aud\" (audience) claim identifies the recipients that the JWT is intended for.  Each principal intended to process the JWT MUST identify itself with a value in the audience claim.  If the principal processing the claim does not identify itself with a value in the \"aud\" claim when this claim is present, then the JWT MUST be rejected.  In the general case, the \"aud\" value is an array of case- sensitive strings, each containing a StringOrURI value.  In the special case when the JWT has one audience, the \"aud\" value MAY be a single case-sensitive string containing a StringOrURI value.  The interpretation of audience values is generally application specific. Use of this claim is OPTIONAL.</p> <p><pre><code>public function setContentType( string $contentType ): Builder;\n</code></pre> Sets the content type header 'cty'</p> <p><pre><code>public function setExpirationTime( int $timestamp ): Builder;\n</code></pre> The \"exp\" (expiration time) claim identifies the expiration time on or after which the JWT MUST NOT be accepted for processing.  The processing of the \"exp\" claim requires that the current date/time MUST be before the expiration date/time listed in the \"exp\" claim. Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.  Its value MUST be a number containing a NumericDate value.  Use of this claim is OPTIONAL.</p> <p><pre><code>public function setId( string $id ): Builder;\n</code></pre> The \"jti\" (JWT ID) claim provides a unique identifier for the JWT. The identifier value MUST be assigned in a manner that ensures that there is a negligible probability that the same value will be accidentally assigned to a different data object; if the application uses multiple issuers, collisions MUST be prevented among values produced by different issuers as well.  The \"jti\" claim can be used to prevent the JWT from being replayed.  The \"jti\" value is a case- sensitive string.  Use of this claim is OPTIONAL.</p> <p><pre><code>public function setIssuedAt( int $timestamp ): Builder;\n</code></pre> The \"iat\" (issued at) claim identifies the time at which the JWT was issued.  This claim can be used to determine the age of the JWT.  Its value MUST be a number containing a NumericDate value.  Use of this claim is OPTIONAL.</p> <p><pre><code>public function setIssuer( string $issuer ): Builder;\n</code></pre> The \"iss\" (issuer) claim identifies the principal that issued the JWT.  The processing of this claim is generally application specific. The \"iss\" value is a case-sensitive string containing a StringOrURI value.  Use of this claim is OPTIONAL.</p> <p><pre><code>public function setNotBefore( int $timestamp ): Builder;\n</code></pre> The \"nbf\" (not before) claim identifies the time before which the JWT MUST NOT be accepted for processing.  The processing of the \"nbf\" claim requires that the current date/time MUST be after or equal to the not-before date/time listed in the \"nbf\" claim.  Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew.  Its value MUST be a number containing a NumericDate value.  Use of this claim is OPTIONAL.</p> <pre><code>public function setPassphrase( string $passphrase ): Builder;\n</code></pre> <p><pre><code>public function setSubject( string $subject ): Builder;\n</code></pre> The \"sub\" (subject) claim identifies the principal that is the subject of the JWT.  The claims in a JWT are normally statements about the subject.  The subject value MUST either be scoped to be locally unique in the context of the issuer or be globally unique. The processing of this claim is generally application specific.  The \"sub\" value is a case-sensitive string containing a StringOrURI value.  Use of this claim is OPTIONAL.</p>"},{"location":"api/phalcon_security/#securityjwtexceptionsunsupportedalgorithmexception","title":"Security\\JWT\\Exceptions\\UnsupportedAlgorithmException","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Security\\JWT\\Exceptions</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exception thrown when the algorithm is not supported for JWT</p>"},{"location":"api/phalcon_security/#securityjwtexceptionsvalidatorexception","title":"Security\\JWT\\Exceptions\\ValidatorException","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Security\\JWT\\Exceptions</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exception thrown when the validation does not pass for JWT</p>"},{"location":"api/phalcon_security/#securityjwtsignerabstractsigner","title":"Security\\JWT\\Signer\\AbstractSigner","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Security\\JWT\\Signer</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>SignerInterface</code></li> </ul> </li> </ul> <p>Abstract class helping with the signer classes</p>"},{"location":"api/phalcon_security/#properties_2","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $algorithm;\n</code></pre>"},{"location":"api/phalcon_security/#methods_2","title":"Methods","text":"<pre><code>public function getAlgorithm(): string\n</code></pre>"},{"location":"api/phalcon_security/#securityjwtsignerhmac","title":"Security\\JWT\\Signer\\Hmac","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Security\\JWT\\Signer</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Security\\JWT\\Exceptions\\UnsupportedAlgorithmException</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractSigner</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>HMAC signing class</p>"},{"location":"api/phalcon_security/#methods_3","title":"Methods","text":"<p><pre><code>public function __construct( string $algo = string );\n</code></pre> Hmac constructor.</p> <p><pre><code>public function getAlgHeader(): string;\n</code></pre> Return the value that is used for the \"alg\" header</p> <p><pre><code>public function sign( string $payload, string $passphrase ): string;\n</code></pre> Sign a payload using the passphrase</p> <p><pre><code>public function verify( string $source, string $payload, string $passphrase ): bool;\n</code></pre> Verify a passed source with a payload and passphrase</p>"},{"location":"api/phalcon_security/#securityjwtsignernone","title":"Security\\JWT\\Signer\\None","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Security\\JWT\\Signer</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>SignerInterface</code></li> </ul> </li> </ul> <p>No signing class</p>"},{"location":"api/phalcon_security/#methods_4","title":"Methods","text":"<p><pre><code>public function getAlgHeader(): string;\n</code></pre> Return the value that is used for the \"alg\" header</p> <p><pre><code>public function getAlgorithm(): string;\n</code></pre> Return the algorithm used</p> <p><pre><code>public function sign( string $payload, string $passphrase ): string;\n</code></pre> Sign a payload using the passphrase</p> <p><pre><code>public function verify( string $source, string $payload, string $passphrase ): bool;\n</code></pre> Verify a passed source with a payload and passphrase</p>"},{"location":"api/phalcon_security/#securityjwtsignersignerinterface","title":"Security\\JWT\\Signer\\SignerInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Security\\JWT\\Signer</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for JWT Signer classes</p>"},{"location":"api/phalcon_security/#methods_5","title":"Methods","text":"<p><pre><code>public function getAlgHeader(): string;\n</code></pre> Return the value that is used for the \"alg\" header</p> <p><pre><code>public function getAlgorithm(): string;\n</code></pre> Return the algorithm used</p> <p><pre><code>public function sign( string $payload, string $passphrase ): string;\n</code></pre> Sign a payload using the passphrase</p> <p><pre><code>public function verify( string $source, string $payload, string $passphrase ): bool;\n</code></pre> Verify a passed source with a payload and passphrase</p>"},{"location":"api/phalcon_security/#securityjwttokenabstractitem","title":"Security\\JWT\\Token\\AbstractItem","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Security\\JWT\\Token</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Abstract helper class for Tokens</p>"},{"location":"api/phalcon_security/#properties_3","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $data;\n</code></pre>"},{"location":"api/phalcon_security/#methods_6","title":"Methods","text":"<pre><code>public function getEncoded(): string;\n</code></pre>"},{"location":"api/phalcon_security/#securityjwttokenenum","title":"Security\\JWT\\Token\\Enum","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Security\\JWT\\Token</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Constants for Tokens. It offers constants for Headers as well as Claims</p> <p>@link https://tools.ietf.org/html/rfc7519</p>"},{"location":"api/phalcon_security/#constants_1","title":"Constants","text":"<pre><code>const ALGO            = 'alg';\nconst AUDIENCE        = 'aud';\nconst CONTENT_TYPE    = 'cty';\nconst EXPIRATION_TIME = 'exp';\nconst ID              = 'jti';\nconst ISSUED_AT       = 'iat';\nconst ISSUER          = 'iss';\nconst NOT_BEFORE      = 'nbf';\nconst SUBJECT         = 'sub';\nconst TYPE            = 'typ';\n</code></pre>"},{"location":"api/phalcon_security/#securityjwttokenitem","title":"Security\\JWT\\Token\\Item","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Security\\JWT\\Token</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractItem</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Storage class for a Token Item</p>"},{"location":"api/phalcon_security/#methods_7","title":"Methods","text":"<p><pre><code>public function __construct( array $payload, string $encoded );\n</code></pre> Item constructor.</p> <pre><code>public function get( string $name, mixed $defaultValue = null ): mixed | null;\n</code></pre> <pre><code>public function getPayload(): array;\n</code></pre> <pre><code>public function has( string $name ): bool;\n</code></pre>"},{"location":"api/phalcon_security/#securityjwttokenparser","title":"Security\\JWT\\Token\\Parser","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Security\\JWT\\Token</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>InvalidArgumentException</code></li> <li><code>Phalcon\\Helper\\Arr</code></li> <li><code>Phalcon\\Helper\\Base64</code></li> <li><code>Phalcon\\Helper\\Json</code></li> <li><code>Phalcon\\Helper\\Json\\Decode</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Token Parser class.</p>"},{"location":"api/phalcon_security/#methods_8","title":"Methods","text":"<p><pre><code>public function parse( string $token ): Token;\n</code></pre> Parse a token and return it</p>"},{"location":"api/phalcon_security/#securityjwttokensignature","title":"Security\\JWT\\Token\\Signature","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Security\\JWT\\Token</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractItem</code></p> </li> <li> <p>Implements</p> </li> </ul>"},{"location":"api/phalcon_security/#methods_9","title":"Methods","text":"<p><pre><code>public function __construct( string $hash = string, string $encoded = string );\n</code></pre> Signature constructor.</p> <pre><code>public function getHash(): string;\n</code></pre>"},{"location":"api/phalcon_security/#securityjwttokentoken","title":"Security\\JWT\\Token\\Token","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Security\\JWT\\Token</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Security\\JWT\\Signer\\SignerInterface</code></li> <li><code>Phalcon\\Security\\JWT\\Validator</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Token Class.</p> <p>@link https://tools.ietf.org/html/rfc7519</p>"},{"location":"api/phalcon_security/#properties_4","title":"Properties","text":"<pre><code>/**\n * @var Item\n */\nprivate claims;\n\n/**\n * @var Item\n */\nprivate headers;\n\n/**\n * @var Signature\n */\nprivate signature;\n</code></pre>"},{"location":"api/phalcon_security/#methods_10","title":"Methods","text":"<p><pre><code>public function __construct( Item $headers, Item $claims, Signature $signature );\n</code></pre> Token constructor.</p> <pre><code>public function getClaims(): Item;\n</code></pre> <pre><code>public function getHeaders(): Item;\n</code></pre> <pre><code>public function getPayload(): string;\n</code></pre> <pre><code>public function getSignature(): Signature\n</code></pre> <pre><code>public function getToken(): string;\n</code></pre>"},{"location":"api/phalcon_security/#securityjwtvalidator","title":"Security\\JWT\\Validator","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Security\\JWT</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Security\\JWT\\Exceptions\\ValidatorException</code></li> <li><code>Phalcon\\Security\\JWT\\Signer\\SignerInterface</code></li> <li><code>Phalcon\\Security\\JWT\\Token\\Enum</code></li> <li><code>Phalcon\\Security\\JWT\\Token\\Token</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Class Validator</p>"},{"location":"api/phalcon_security/#properties_5","title":"Properties","text":"<pre><code>/**\n * @var int\n */\nprivate $timeShift = 0;\n\n/**\n * @var Token\n */\nprivate $token;\n</code></pre>"},{"location":"api/phalcon_security/#methods_11","title":"Methods","text":"<p><pre><code>public function __construct( Token $token, int $timeShift = int );\n</code></pre> Validator constructor.</p> <pre><code>public function setToken( Token $token ): Validator;\n</code></pre> <pre><code>public function validateAudience( string $audience ): Validator;\n</code></pre> <pre><code>public function validateExpiration( int $timestamp ): Validator;\n</code></pre> <pre><code>public function validateId( string $id ): Validator;\n</code></pre> <pre><code>public function validateIssuedAt( int $timestamp ): Validator;\n</code></pre> <pre><code>public function validateIssuer( string $issuer ): Validator;\n</code></pre> <pre><code>public function validateNotBefore( int $timestamp ): Validator;\n</code></pre> <pre><code>public function validateSignature( SignerInterface $signer, string $passphrase ): Validator;\n</code></pre>"},{"location":"api/phalcon_security/#securityrandom","title":"Security\\Random","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Security</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Secure random number generator class.</p> <p>Provides secure random number generator which is suitable for generating session key in HTTP cookies, etc.</p> <p><code>Phalcon\\Security\\Random</code> could be mainly useful for:</p> <ul> <li>Key generation (e.g. generation of complicated keys)</li> <li>Generating random passwords for new user accounts</li> <li>Encryption systems</li> </ul> <pre><code>$random = new \\Phalcon\\Security\\Random();\n\n// Random binary string\n$bytes = $random-&gt;bytes();\n\n// Random hex string\necho $random-&gt;hex(10); // a29f470508d5ccb8e289\necho $random-&gt;hex(10); // 533c2f08d5eee750e64a\necho $random-&gt;hex(11); // f362ef96cb9ffef150c9cd\necho $random-&gt;hex(12); // 95469d667475125208be45c4\necho $random-&gt;hex(13); // 05475e8af4a34f8f743ab48761\n\n// Random base62 string\necho $random-&gt;base62(); // z0RkwHfh8ErDM1xw\n\n// Random base64 string\necho $random-&gt;base64(12); // XfIN81jGGuKkcE1E\necho $random-&gt;base64(12); // 3rcq39QzGK9fUqh8\necho $random-&gt;base64();   // DRcfbngL/iOo9hGGvy1TcQ==\necho $random-&gt;base64(16); // SvdhPcIHDZFad838Bb0Swg==\n\n// Random URL-safe base64 string\necho $random-&gt;base64Safe();           // PcV6jGbJ6vfVw7hfKIFDGA\necho $random-&gt;base64Safe();           // GD8JojhzSTrqX7Q8J6uug\necho $random-&gt;base64Safe(8);          // mGyy0evy3ok\necho $random-&gt;base64Safe(null, true); // DRrAgOFkS4rvRiVHFefcQ==\n\n// Random UUID\necho $random-&gt;uuid(); // db082997-2572-4e2c-a046-5eefe97b1235\necho $random-&gt;uuid(); // da2aa0e2-b4d0-4e3c-99f5-f5ef62c57fe2\necho $random-&gt;uuid(); // 75e6b628-c562-4117-bb76-61c4153455a9\necho $random-&gt;uuid(); // dc446df1-0848-4d05-b501-4af3c220c13d\n\n// Random number between 0 and $len\necho $random-&gt;number(256); // 84\necho $random-&gt;number(256); // 79\necho $random-&gt;number(100); // 29\necho $random-&gt;number(300); // 40\n\n// Random base58 string\necho $random-&gt;base58();   // 4kUgL2pdQMSCQtjE\necho $random-&gt;base58();   // Umjxqf7ZPwh765yR\necho $random-&gt;base58(24); // qoXcgmw4A9dys26HaNEdCRj9\necho $random-&gt;base58(7);  // 774SJD3vgP\n</code></pre> <p>This class partially borrows SecureRandom library from Ruby</p> <p>@link https://ruby-doc.org/stdlib-2.2.2/libdoc/securerandom/rdoc/SecureRandom.html</p>"},{"location":"api/phalcon_security/#methods_12","title":"Methods","text":"<p><pre><code>public function base58( int $len = null ): string;\n</code></pre> Generates a random base58 string</p> <p>If $len is not specified, 16 is assumed. It may be larger in future. The result may contain alphanumeric characters except 0, O, I and l.</p> <p>It is similar to <code>Phalcon\\Security\\Random::base64()</code> but has been modified to avoid both non-alphanumeric characters and letters which might look ambiguous when printed.</p> <pre><code>$random = new \\Phalcon\\Security\\Random();\n\necho $random-&gt;base58(); // 4kUgL2pdQMSCQtjE\n</code></pre> <p>@see    \\Phalcon\\Security\\Random:base64 @link   https://en.wikipedia.org/wiki/Base58 @throws Exception If secure random number generator is not available or unexpected partial read</p> <p><pre><code>public function base62( int $len = null ): string;\n</code></pre> Generates a random base62 string</p> <p>If $len is not specified, 16 is assumed. It may be larger in future.</p> <p>It is similar to <code>Phalcon\\Security\\Random::base58()</code> but has been modified to provide the largest value that can safely be used in URLs without needing to take extra characters into consideration because it is [A-Za-z0-9].</p> <pre><code>$random = new \\Phalcon\\Security\\Random();\n\necho $random-&gt;base62(); // z0RkwHfh8ErDM1xw\n</code></pre> <p>@see    \\Phalcon\\Security\\Random:base58 @throws Exception If secure random number generator is not available or unexpected partial read</p> <p><pre><code>public function base64( int $len = null ): string;\n</code></pre> Generates a random base64 string</p> <p>If $len is not specified, 16 is assumed. It may be larger in future. The length of the result string is usually greater of $len. Size formula: 4($len / 3) rounded up to a multiple of 4.</p> <pre><code>$random = new \\Phalcon\\Security\\Random();\n\necho $random-&gt;base64(12); // 3rcq39QzGK9fUqh8\n</code></pre> <p>@throws Exception If secure random number generator is not available or unexpected partial read</p> <p><pre><code>public function base64Safe( int $len = null, bool $padding = bool ): string;\n</code></pre> Generates a random URL-safe base64 string</p> <p>If $len is not specified, 16 is assumed. It may be larger in future. The length of the result string is usually greater of $len.</p> <p>By default, padding is not generated because \"=\" may be used as a URL delimiter. The result may contain A-Z, a-z, 0-9, \"-\" and \"_\". \"=\" is also used if $padding is true. See RFC 3548 for the definition of URL-safe base64.</p> <pre><code>$random = new \\Phalcon\\Security\\Random();\n\necho $random-&gt;base64Safe(); // GD8JojhzSTrqX7Q8J6uug\n</code></pre> <p>@link https://www.ietf.org/rfc/rfc3548.txt @throws Exception If secure random number generator is not available or unexpected partial read</p> <p><pre><code>public function bytes( int $len = int ): string;\n</code></pre> Generates a random binary string</p> <p>The <code>Random::bytes</code> method returns a string and accepts as input an int representing the length in bytes to be returned.</p> <p>If $len is not specified, 16 is assumed. It may be larger in future. The result may contain any byte: \"x00\" - \"xFF\".</p> <pre><code>$random = new \\Phalcon\\Security\\Random();\n\n$bytes = $random-&gt;bytes();\nvar_dump(bin2hex($bytes));\n// Possible output: string(32) \"00f6c04b144b41fad6a59111c126e1ee\"\n</code></pre> <p>@throws Exception If secure random number generator is not available or unexpected partial read</p> <p><pre><code>public function hex( int $len = null ): string;\n</code></pre> Generates a random hex string</p> <p>If $len is not specified, 16 is assumed. It may be larger in future. The length of the result string is usually greater of $len.</p> <pre><code>$random = new \\Phalcon\\Security\\Random();\n\necho $random-&gt;hex(10); // a29f470508d5ccb8e289\n</code></pre> <p>@throws Exception If secure random number generator is not available or unexpected partial read</p> <p><pre><code>public function number( int $len ): int;\n</code></pre> Generates a random number between 0 and $len</p> <p>Returns an integer: 0 &lt;= result &lt;= $len.</p> <p><pre><code>$random = new \\Phalcon\\Security\\Random();\n\necho $random-&gt;number(16); // 8\n</code></pre> @throws Exception If secure random number generator is not available, unexpected partial read or $len &lt;= 0</p> <p><pre><code>public function uuid(): string;\n</code></pre> Generates a v4 random UUID (Universally Unique IDentifier)</p> <p>The version 4 UUID is purely random (except the version). It doesn't contain meaningful information such as MAC address, time, etc. See RFC 4122 for details of UUID.</p> <p>This algorithm sets the version number (4 bits) as well as two reserved bits. All other bits (the remaining 122 bits) are set using a random or pseudorandom data source. Version 4 UUIDs have the form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx where x is any hexadecimal digit and y is one of 8, 9, A, or B (e.g., f47ac10b-58cc-4372-a567-0e02b2c3d479).</p> <pre><code>$random = new \\Phalcon\\Security\\Random();\n\necho $random-&gt;uuid(); // 1378c906-64bb-4f81-a8d6-4ae1bfcdec22\n</code></pre> <p>@link https://www.ietf.org/rfc/rfc4122.txt @throws Exception If secure random number generator is not available or unexpected partial read</p> <p><pre><code>protected function base( string $alphabet, int $base, mixed $n = null ): string;\n</code></pre> Generates a random string based on the number ($base) of characters ($alphabet).</p> <p>If $n is not specified, 16 is assumed. It may be larger in future.</p> <p>@throws Exception If secure random number generator is not available or unexpected partial read</p>"},{"location":"api/phalcon_session/","title":"Phalcon session","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_session/#sessionadapterabstractadapter","title":"Session\\Adapter\\AbstractAdapter","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Session\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Storage\\Adapter\\AdapterInterface</code></li> <li><code>SessionHandlerInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>SessionHandlerInterface</code></li> </ul> </li> </ul>"},{"location":"api/phalcon_session/#properties","title":"Properties","text":"<pre><code>/**\n * @var AdapterInterface\n */\nprotected $adapter;\n</code></pre>"},{"location":"api/phalcon_session/#methods","title":"Methods","text":"<p><pre><code>public function close(): bool;\n</code></pre> Close</p> <p><pre><code>public function destroy( mixed $id ): bool;\n</code></pre> Destroy</p> <p><pre><code>public function gc( mixed $maxlifetime ): bool;\n</code></pre> Garbage Collector</p> <p><pre><code>public function open( mixed $savePath, mixed $sessionName ): bool;\n</code></pre> Open</p> <p><pre><code>public function read( mixed $id ): string;\n</code></pre> Read</p> <p><pre><code>public function write( mixed $id, mixed $data ): bool;\n</code></pre> Write</p>"},{"location":"api/phalcon_session/#sessionadapterlibmemcached","title":"Session\\Adapter\\Libmemcached","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Session\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Storage\\AdapterFactory</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Session\\Adapter\\Libmemcached</p>"},{"location":"api/phalcon_session/#methods_1","title":"Methods","text":"<p><pre><code>public function __construct( AdapterFactory $factory, array $options = [] );\n</code></pre> Constructor</p>"},{"location":"api/phalcon_session/#sessionadapternoop","title":"Session\\Adapter\\Noop","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Session\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>SessionHandlerInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>SessionHandlerInterface</code></li> </ul> </li> </ul> <p>Phalcon\\Session\\Adapter\\Noop</p> <p>This is an \"empty\" or null adapter. It can be used for testing or any other purpose that no session needs to be invoked</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Noop;\n\n$session = new Manager();\n$session-&gt;setAdapter(new Noop());\n</code></pre>"},{"location":"api/phalcon_session/#properties_1","title":"Properties","text":"<pre><code>/**\n * The connection of some adapters\n */\nprotected $connection;\n\n/**\n * Session options\n *\n * @var array\n */\nprotected $options;\n\n/**\n * Session prefix\n *\n * @var string\n */\nprotected $prefix = '';\n\n/**\n * Time To Live\n *\n * @var int\n */\nprotected $ttl = 8600;\n</code></pre>"},{"location":"api/phalcon_session/#methods_2","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function close(): bool;\n</code></pre> Close</p> <p><pre><code>public function destroy( mixed $id ): bool;\n</code></pre> Destroy</p> <p><pre><code>public function gc( mixed $maxlifetime ): bool;\n</code></pre> Garbage Collector</p> <p><pre><code>public function open( mixed $savePath, mixed $sessionName ): bool;\n</code></pre> Open</p> <p><pre><code>public function read( mixed $id ): string;\n</code></pre> Read</p> <p><pre><code>public function write( mixed $id, mixed $data ): bool;\n</code></pre> Write</p> <p><pre><code>protected function getPrefixedName( mixed $name ): string;\n</code></pre> Helper method to get the name prefixed</p>"},{"location":"api/phalcon_session/#sessionadapterredis","title":"Session\\Adapter\\Redis","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Session\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Storage\\AdapterFactory</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Session\\Adapter\\Redis</p>"},{"location":"api/phalcon_session/#methods_3","title":"Methods","text":"<p><pre><code>public function __construct( AdapterFactory $factory, array $options = [] );\n</code></pre> Constructor</p>"},{"location":"api/phalcon_session/#sessionadapterstream","title":"Session\\Adapter\\Stream","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Session\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Session\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Noop</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Session\\Adapter\\Stream</p> <p>This is the file based adapter. It stores sessions in a file based system</p> <pre><code>&lt;?php\n\nuse Phalcon\\Session\\Manager;\nuse Phalcon\\Session\\Adapter\\Stream;\n\n$session = new Manager();\n$files = new Stream(\n    [\n        'savePath' =&gt; '/tmp',\n    ]\n);\n$session-&gt;setAdapter($files);\n</code></pre>"},{"location":"api/phalcon_session/#properties_2","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprivate path = ;\n</code></pre>"},{"location":"api/phalcon_session/#methods_4","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <pre><code>public function destroy( mixed $id ): bool;\n</code></pre> <pre><code>public function gc( mixed $maxlifetime ): bool;\n</code></pre> <p><pre><code>public function open( mixed $savePath, mixed $sessionName ): bool;\n</code></pre>    Ignore the savePath and use local defined path</p> <pre><code>public function read( mixed $id ): string;\n</code></pre> <pre><code>public function write( mixed $id, mixed $data ): bool;\n</code></pre>"},{"location":"api/phalcon_session/#sessionbag","title":"Session\\Bag","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Session</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\Di</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Di\\InjectionAwareInterface</code></li> <li><code>Phalcon\\Session\\ManagerInterface</code></li> <li><code>Phalcon\\Collection</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Collection</code></p> </li> <li> <p>Implements</p> <ul> <li><code>BagInterface</code></li> <li><code>InjectionAwareInterface</code></li> </ul> </li> </ul> <p>This component helps to separate session data into \"namespaces\". Working by this way you can easily create groups of session variables into the application</p> <pre><code>$user = new \\Phalcon\\Session\\Bag(\"user\");\n\n$user-&gt;name = \"Kimbra Johnson\";\n$user-&gt;age  = 22;\n</code></pre>"},{"location":"api/phalcon_session/#properties_3","title":"Properties","text":"<pre><code>//\nprivate $container;\n\n//\nprivate $name;\n\n//\nprivate $session;\n</code></pre>"},{"location":"api/phalcon_session/#methods_5","title":"Methods","text":"<pre><code>public function __construct( string $name );\n</code></pre> <p><pre><code>public function clear(): void;\n</code></pre> Destroys the session bag</p> <p><pre><code>public function getDI(): DiInterface;\n</code></pre> Returns the DependencyInjector container</p> <p><pre><code>public function init( array $data = [] ): void;\n</code></pre> Initialize internal array</p> <p><pre><code>public function remove( string $element ): void;\n</code></pre> Removes a property from the internal bag</p> <p><pre><code>public function set( string $element, mixed $value ): void;\n</code></pre> Sets a value in the session bag</p> <p><pre><code>public function setDI( DiInterface $container ): void;\n</code></pre> Sets the DependencyInjector container</p>"},{"location":"api/phalcon_session/#sessionexception","title":"Session\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Session</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Session\\Exception</p> <p>Exceptions thrown in Phalcon\\Session will use this class</p>"},{"location":"api/phalcon_session/#sessionmanager","title":"Session\\Manager","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Session</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>InvalidArgumentException</code></li> <li><code>Phalcon\\Di\\AbstractInjectionAware</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Helper\\Arr\\Get</code></li> <li><code>RuntimeException</code></li> <li><code>SessionHandlerInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractInjectionAware</code></p> </li> <li> <p>Implements</p> <ul> <li><code>ManagerInterface</code></li> </ul> </li> </ul> <p>Session manager class</p>"},{"location":"api/phalcon_session/#properties_4","title":"Properties","text":"<pre><code>/**\n * @var SessionHandlerInterface|null\n */\nprivate $adapter;\n\n/**\n * @var string\n */\nprivate $name = '';\n\n/**\n * @var array\n */\nprivate $options;\n\n/**\n * @var string\n */\nprivate $uniqueId = '';\n</code></pre>"},{"location":"api/phalcon_session/#methods_6","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Manager constructor.</p> <p><pre><code>public function __get( string $key ): mixed;\n</code></pre> Alias: Gets a session variable from an application context</p> <p><pre><code>public function __isset( string $key ): bool;\n</code></pre> Alias: Check whether a session variable is set in an application context</p> <p><pre><code>public function __set( string $key, mixed $value ): void;\n</code></pre> Alias: Sets a session variable in an application context</p> <p><pre><code>public function __unset( string $key ): void;\n</code></pre> Alias: Removes a session variable from an application context</p> <p><pre><code>public function destroy(): void;\n</code></pre> Destroy/end a session</p> <p><pre><code>public function exists(): bool;\n</code></pre> Check whether the session has been started</p> <p><pre><code>public function get( string $key, mixed $defaultValue = null, bool $remove = bool ): mixed;\n</code></pre> Gets a session variable from an application context</p> <p><pre><code>public function getAdapter(): SessionHandlerInterface;\n</code></pre> Returns the stored session adapter</p> <p><pre><code>public function getId(): string;\n</code></pre> Returns the session id</p> <p><pre><code>public function getName(): string;\n</code></pre> Returns the name of the session</p> <p><pre><code>public function getOptions(): array;\n</code></pre> Get internal options</p> <p><pre><code>public function has( string $key ): bool;\n</code></pre> Check whether a session variable is set in an application context</p> <p><pre><code>public function regenerateId( mixed $deleteOldSession = bool ): ManagerInterface;\n</code></pre> Regenerates the session id using the adapter.</p> <p><pre><code>public function remove( string $key ): void;\n</code></pre> Removes a session variable from an application context</p> <p><pre><code>public function set( string $key, mixed $value ): void;\n</code></pre> Sets a session variable in an application context</p> <p><pre><code>public function setAdapter( SessionHandlerInterface $adapter ): ManagerInterface;\n</code></pre> Set the adapter for the session</p> <p><pre><code>public function setId( string $id ): ManagerInterface;\n</code></pre> Set session Id</p> <p><pre><code>public function setName( string $name ): ManagerInterface;\n</code></pre> Set the session name. Throw exception if the session has started and do not allow poop names</p> <p><pre><code>public function setOptions( array $options ): void;\n</code></pre> Sets session's options</p> <p><pre><code>public function start(): bool;\n</code></pre> Starts the session (if headers are already sent the session will not be started)</p> <p><pre><code>public function status(): int;\n</code></pre> Returns the status of the current session.</p>"},{"location":"api/phalcon_session/#sessionmanagerinterface","title":"Session\\ManagerInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Session</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>InvalidArgumentException</code></li> <li><code>RuntimeException</code></li> <li><code>SessionHandlerInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Session</p> <p>Interface for the Phalcon\\Session\\Manager</p>"},{"location":"api/phalcon_session/#constants","title":"Constants","text":"<pre><code>const SESSION_ACTIVE = 2;\nconst SESSION_DISABLED = 0;\nconst SESSION_NONE = 1;\n</code></pre>"},{"location":"api/phalcon_session/#methods_7","title":"Methods","text":"<p><pre><code>public function __get( string $key ): mixed;\n</code></pre> Alias: Gets a session variable from an application context</p> <p><pre><code>public function __isset( string $key ): bool;\n</code></pre> Alias: Check whether a session variable is set in an application context</p> <p><pre><code>public function __set( string $key, mixed $value ): void;\n</code></pre> Alias: Sets a session variable in an application context</p> <p><pre><code>public function __unset( string $key ): void;\n</code></pre> Alias: Removes a session variable from an application context</p> <p><pre><code>public function destroy(): void;\n</code></pre> Destroy/end a session</p> <p><pre><code>public function exists(): bool;\n</code></pre> Check whether the session has been started</p> <p><pre><code>public function get( string $key, mixed $defaultValue = null, bool $remove = bool ): mixed;\n</code></pre> Gets a session variable from an application context</p> <p><pre><code>public function getAdapter(): SessionHandlerInterface;\n</code></pre> Returns the stored session adapter</p> <p><pre><code>public function getId(): string;\n</code></pre> Returns the session id</p> <p><pre><code>public function getName(): string;\n</code></pre> Returns the name of the session</p> <p><pre><code>public function getOptions(): array;\n</code></pre> Get internal options</p> <p><pre><code>public function has( string $key ): bool;\n</code></pre> Check whether a session variable is set in an application context</p> <p><pre><code>public function regenerateId( mixed $deleteOldSession = bool ): ManagerInterface;\n</code></pre> Regenerates the session id using the adapter.</p> <p><pre><code>public function remove( string $key ): void;\n</code></pre> Removes a session variable from an application context</p> <p><pre><code>public function set( string $key, mixed $value ): void;\n</code></pre> Sets a session variable in an application context</p> <p><pre><code>public function setAdapter( SessionHandlerInterface $adapter ): ManagerInterface;\n</code></pre> Set the adapter for the session</p> <p><pre><code>public function setId( string $id ): ManagerInterface;\n</code></pre> Set session Id</p> <p><pre><code>public function setName( string $name ): ManagerInterface;\n</code></pre> Set the session name. Throw exception if the session has started and do not allow poop names</p> <p>@throws InvalidArgumentException</p> <p><pre><code>public function setOptions( array $options ): void;\n</code></pre> Sets session's options</p> <p><pre><code>public function start(): bool;\n</code></pre> Starts the session (if headers are already sent the session will not be started)</p> <p><pre><code>public function status(): int;\n</code></pre> Returns the status of the current session.</p>"},{"location":"api/phalcon_storage/","title":"Phalcon storage","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_storage/#storageadapterabstractadapter","title":"Storage\\Adapter\\AbstractAdapter","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Storage\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>DateInterval</code></li> <li><code>DateTime</code></li> <li><code>Exception</code></li> <li><code>Phalcon\\Storage\\SerializerFactory</code></li> <li><code>Phalcon\\Storage\\Serializer\\SerializerInterface</code></li> <li><code>Phalcon\\Exception</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>AdapterInterface</code></li> </ul> </li> </ul>"},{"location":"api/phalcon_storage/#properties","title":"Properties","text":"<pre><code>/**\n * @var mixed\n */\nprotected $adapter;\n\n/**\n * Name of the default serializer class\n *\n * @var string\n */\nprotected $defaultSerializer = 'Php';\n\n/**\n * Name of the default TTL (time to live)\n *\n * @var int\n */\nprotected $lifetime = 3600;\n\n/**\n * @var string\n */\nprotected $prefix = '';\n\n/**\n * Serializer\n *\n * @var SerializerInterface\n */\nprotected $serializer;\n\n/**\n * Serializer Factory\n *\n * @var SerializerFactory\n */\nprotected $serializerFactory;\n</code></pre>"},{"location":"api/phalcon_storage/#methods","title":"Methods","text":"<p><pre><code>protected function __construct( SerializerFactory $factory, array $options = [] );\n</code></pre> Sets parameters based on options</p> <p><pre><code>abstract public function clear(): bool;\n</code></pre> Flushes/clears the cache</p> <p><pre><code>abstract public function decrement( string $key, int $value = int ): int | bool;\n</code></pre> Decrements a stored number</p> <p><pre><code>abstract public function delete( string $key ): bool;\n</code></pre> Deletes data from the adapter</p> <p><pre><code>abstract public function get( string $key, mixed $defaultValue = null ): mixed;\n</code></pre> Reads data from the adapter</p> <p><pre><code>abstract public function getAdapter(): mixed;\n</code></pre> Returns the adapter - connects to the storage if not connected</p> <pre><code>public function getDefaultSerializer(): string;\n</code></pre> <p><pre><code>abstract public function getKeys( string $prefix = string ): array;\n</code></pre> Returns all the keys stored</p> <pre><code>public function getPrefix(): string;\n</code></pre> <p><pre><code>abstract public function has( string $key ): bool;\n</code></pre> Checks if an element exists in the cache</p> <p><pre><code>abstract public function increment( string $key, int $value = int ): int | bool;\n</code></pre> Increments a stored number</p> <p><pre><code>abstract public function set( string $key, mixed $value, mixed $ttl = null ): bool;\n</code></pre> Stores data in the adapter</p> <pre><code>public function setDefaultSerializer( string $defaultSerializer )\n</code></pre> <p><pre><code>protected function getFilteredKeys( mixed $keys, string $prefix ): array;\n</code></pre> Filters the keys array based on global and passed prefix</p> <p><pre><code>protected function getPrefixedKey( mixed $key ): string;\n</code></pre> Returns the key requested, prefixed</p> <p><pre><code>protected function getSerializedData( mixed $content ): mixed;\n</code></pre> Returns serialized data</p> <p><pre><code>protected function getTtl( mixed $ttl ): int;\n</code></pre> Calculates the TTL for a cache item</p> <p><pre><code>protected function getUnserializedData( mixed $content, mixed $defaultValue = null ): mixed;\n</code></pre> Returns unserialized data</p> <p><pre><code>protected function initSerializer(): void;\n</code></pre> Initializes the serializer</p>"},{"location":"api/phalcon_storage/#storageadapteradapterinterface","title":"Storage\\Adapter\\AdapterInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Storage\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Storage\\Serializer\\SerializerInterface</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Logger adapters</p>"},{"location":"api/phalcon_storage/#methods_1","title":"Methods","text":"<p><pre><code>public function clear(): bool;\n</code></pre> Flushes/clears the cache</p> <p><pre><code>public function decrement( string $key, int $value = int ): int | bool;\n</code></pre> Decrements a stored number</p> <p><pre><code>public function delete( string $key ): bool;\n</code></pre> Deletes data from the adapter</p> <p><pre><code>public function get( string $key, mixed $defaultValue = null ): mixed;\n</code></pre> Reads data from the adapter</p> <p><pre><code>public function getAdapter(): mixed;\n</code></pre> Returns the already connected adapter or connects to the backend server(s)</p> <p><pre><code>public function getKeys( string $prefix = string ): array;\n</code></pre> Returns all the keys stored</p> <p><pre><code>public function getPrefix(): string;\n</code></pre> Returns the prefix for the keys</p> <p><pre><code>public function has( string $key ): bool;\n</code></pre> Checks if an element exists in the cache</p> <p><pre><code>public function increment( string $key, int $value = int ): int | bool;\n</code></pre> Increments a stored number</p> <p><pre><code>public function set( string $key, mixed $value, mixed $ttl = null ): bool;\n</code></pre> Stores data in the adapter</p>"},{"location":"api/phalcon_storage/#storageadapterapcu","title":"Storage\\Adapter\\Apcu","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Storage\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>APCUIterator</code></li> <li><code>DateInterval</code></li> <li><code>Exception</code></li> <li><code>Phalcon\\Storage\\SerializerFactory</code></li> <li><code>Phalcon\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Apcu adapter</p>"},{"location":"api/phalcon_storage/#properties_1","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $options;\n</code></pre>"},{"location":"api/phalcon_storage/#methods_2","title":"Methods","text":"<p><pre><code>public function __construct( SerializerFactory $factory, array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function clear(): bool;\n</code></pre> Flushes/clears the cache</p> <p><pre><code>public function decrement( string $key, int $value = int ): int | bool;\n</code></pre> Decrements a stored number</p> <p><pre><code>public function delete( string $key ): bool;\n</code></pre> Reads data from the adapter</p> <p><pre><code>public function get( string $key, mixed $defaultValue = null ): mixed;\n</code></pre> Reads data from the adapter</p> <p><pre><code>public function getAdapter(): mixed;\n</code></pre> Always returns null</p> <p><pre><code>public function getKeys( string $prefix = string ): array;\n</code></pre> Stores data in the adapter</p> <p><pre><code>public function has( string $key ): bool;\n</code></pre> Checks if an element exists in the cache</p> <p><pre><code>public function increment( string $key, int $value = int ): int | bool;\n</code></pre> Increments a stored number</p> <p><pre><code>public function set( string $key, mixed $value, mixed $ttl = null ): bool;\n</code></pre> Stores data in the adapter</p>"},{"location":"api/phalcon_storage/#storageadapterlibmemcached","title":"Storage\\Adapter\\Libmemcached","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Storage\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>DateInterval</code></li> <li><code>Exception</code></li> <li><code>Phalcon\\Storage\\Exception</code></li> <li><code>Phalcon\\Storage\\SerializerFactory</code></li> <li><code>Phalcon\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Libmemcached adapter</p>"},{"location":"api/phalcon_storage/#properties_2","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $options;\n</code></pre>"},{"location":"api/phalcon_storage/#methods_3","title":"Methods","text":"<p><pre><code>public function __construct( SerializerFactory $factory, array $options = [] );\n</code></pre> Libmemcached constructor.</p> <p><pre><code>public function clear(): bool;\n</code></pre> Flushes/clears the cache</p> <p><pre><code>public function decrement( string $key, int $value = int ): int | bool;\n</code></pre> Decrements a stored number</p> <p><pre><code>public function delete( string $key ): bool;\n</code></pre> Reads data from the adapter</p> <p><pre><code>public function get( string $key, mixed $defaultValue = null ): mixed;\n</code></pre> Reads data from the adapter</p> <p><pre><code>public function getAdapter(): mixed;\n</code></pre> Returns the already connected adapter or connects to the Memcached server(s)</p> <p><pre><code>public function getKeys( string $prefix = string ): array;\n</code></pre> Stores data in the adapter</p> <p><pre><code>public function has( string $key ): bool;\n</code></pre> Checks if an element exists in the cache</p> <p><pre><code>public function increment( string $key, int $value = int ): int | bool;\n</code></pre> Increments a stored number</p> <p><pre><code>public function set( string $key, mixed $value, mixed $ttl = null ): bool;\n</code></pre> Stores data in the adapter</p>"},{"location":"api/phalcon_storage/#storageadaptermemory","title":"Storage\\Adapter\\Memory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Storage\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>DateInterval</code></li> <li><code>Exception</code></li> <li><code>Phalcon\\Storage\\SerializerFactory</code></li> <li><code>Phalcon\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Memory adapter</p>"},{"location":"api/phalcon_storage/#properties_3","title":"Properties","text":"<pre><code>/**\n * @var Collection|CollectionInterface\n */\nprotected $data;\n\n/**\n * @var array\n */\nprotected $options;\n</code></pre>"},{"location":"api/phalcon_storage/#methods_4","title":"Methods","text":"<p><pre><code>public function __construct( SerializerFactory $factory, array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function clear(): bool;\n</code></pre> Flushes/clears the cache</p> <p><pre><code>public function decrement( string $key, int $value = int ): int | bool;\n</code></pre> Decrements a stored number</p> <p><pre><code>public function delete( string $key ): bool;\n</code></pre> Reads data from the adapter</p> <p><pre><code>public function get( string $key, mixed $defaultValue = null ): mixed;\n</code></pre> Reads data from the adapter</p> <p><pre><code>public function getAdapter(): mixed;\n</code></pre> Always returns null</p> <p><pre><code>public function getKeys( string $prefix = string ): array;\n</code></pre> Stores data in the adapter</p> <p><pre><code>public function has( string $key ): bool;\n</code></pre> Checks if an element exists in the cache</p> <p><pre><code>public function increment( string $key, int $value = int ): int | bool;\n</code></pre> Increments a stored number</p> <p><pre><code>public function set( string $key, mixed $value, mixed $ttl = null ): bool;\n</code></pre> Stores data in the adapter</p>"},{"location":"api/phalcon_storage/#storageadapterredis","title":"Storage\\Adapter\\Redis","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Storage\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>DateInterval</code></li> <li><code>Exception</code></li> <li><code>Phalcon\\Storage\\Exception</code></li> <li><code>Phalcon\\Storage\\SerializerFactory</code></li> <li><code>Phalcon\\Exception</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Redis adapter</p>"},{"location":"api/phalcon_storage/#properties_4","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $options;\n</code></pre>"},{"location":"api/phalcon_storage/#methods_5","title":"Methods","text":"<p><pre><code>public function __construct( SerializerFactory $factory, array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function clear(): bool;\n</code></pre> Flushes/clears the cache</p> <p><pre><code>public function decrement( string $key, int $value = int ): int | bool;\n</code></pre> Decrements a stored number</p> <p><pre><code>public function delete( string $key ): bool;\n</code></pre> Deletes data from the adapter</p> <p><pre><code>public function get( string $key, mixed $defaultValue = null ): mixed;\n</code></pre> Reads data from the adapter</p> <p><pre><code>public function getAdapter(): mixed;\n</code></pre> Returns the already connected adapter or connects to the Redis server(s)</p> <p><pre><code>public function getKeys( string $prefix = string ): array;\n</code></pre> Gets the keys from the adapter. Accepts an optional prefix which will filter the keys returned</p> <p><pre><code>public function has( string $key ): bool;\n</code></pre> Checks if an element exists in the cache</p> <p><pre><code>public function increment( string $key, int $value = int ): int | bool;\n</code></pre> Increments a stored number</p> <p><pre><code>public function set( string $key, mixed $value, mixed $ttl = null ): bool;\n</code></pre> Stores data in the adapter. If no ttl is given, the default value will be used (3600s at the moment). </p>"},{"location":"api/phalcon_storage/#storageadapterstream","title":"Storage\\Adapter\\Stream","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Storage\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>DateInterval</code></li> <li><code>FilesystemIterator</code></li> <li><code>Iterator</code></li> <li><code>Phalcon\\Storage\\Exception</code></li> <li><code>Phalcon\\Storage\\SerializerFactory</code></li> <li><code>Phalcon\\Storage\\Traits\\StorageErrorHandlerTrait</code></li> <li><code>Phalcon\\Exception</code></li> <li><code>RecursiveDirectoryIterator</code></li> <li><code>RecursiveIteratorIterator</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Stream adapter</p>"},{"location":"api/phalcon_storage/#properties_5","title":"Properties","text":"<pre><code>/**\n    * @var string\n    */\nprotected $storageDir = ;\n\n/**\n * @var array\n */\nprotected $options;\n</code></pre>"},{"location":"api/phalcon_storage/#methods_6","title":"Methods","text":"<p><pre><code>public function __construct( SerializerFactory $factory, array $options = [] );\n</code></pre> Stream constructor.</p> <p><pre><code>public function clear(): bool;\n</code></pre> Flushes/clears the cache</p> <p><pre><code>public function decrement( string $key, int $value = int ): int | bool;\n</code></pre> Decrements a stored number</p> <p><pre><code>public function delete( string $key ): bool;\n</code></pre> Reads data from the adapter</p> <p><pre><code>public function get( string $key, mixed $defaultValue = null ): mixed;\n</code></pre> Reads data from the adapter</p> <p><pre><code>public function getAdapter(): mixed;\n</code></pre> Always returns null</p> <p><pre><code>public function getKeys( string $prefix = string ): array;\n</code></pre> Stores data in the adapter</p> <p><pre><code>public function has( string $key ): bool;\n</code></pre> Checks if an element exists in the cache and is not expired</p> <p><pre><code>public function increment( string $key, int $value = int ): int | bool;\n</code></pre> Increments a stored number</p> <p><pre><code>public function set( string $key, mixed $value, mixed $ttl = null ): bool;\n</code></pre> Stores data in the adapter</p>"},{"location":"api/phalcon_storage/#storageadapterfactory","title":"Storage\\AdapterFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Storage</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Factory\\AbstractFactory</code></li> <li><code>Phalcon\\Storage\\Adapter\\AdapterInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFactory</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>This file is part of the Phalcon Framework.</p> <p>(c) Phalcon Team team@phalcon.io</p> <p>For the full copyright and license information, please view the LICENSE.txt file that was distributed with this source code.</p>"},{"location":"api/phalcon_storage/#properties_6","title":"Properties","text":"<pre><code>/**\n * @var SerializerFactory\n */\nprivate serializerFactory;\n</code></pre>"},{"location":"api/phalcon_storage/#methods_7","title":"Methods","text":"<p><pre><code>public function __construct( SerializerFactory $factory, array $services = [] );\n</code></pre> AdapterFactory constructor.</p> <p><pre><code>public function newInstance( string $name, array $options = [] ): AdapterInterface;\n</code></pre> Create a new instance of the adapter</p> <pre><code>protected function getAdapters(): array;\n</code></pre>"},{"location":"api/phalcon_storage/#storageexception","title":"Storage\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Storage</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Storage\\Exception</p> <p>Exceptions thrown in Phalcon\\Storage will use this class</p>"},{"location":"api/phalcon_storage/#storageserializerabstractserializer","title":"Storage\\Serializer\\AbstractSerializer","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Storage\\Serializer</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>SerializerInterface</code></li> </ul> </li> </ul> <p>@property mixed $data @property bool  $isSuccess</p>"},{"location":"api/phalcon_storage/#properties_7","title":"Properties","text":"<pre><code>/**\n * @var mixed\n */\nprotected $data;\n</code></pre>"},{"location":"api/phalcon_storage/#methods_8","title":"Methods","text":"<p><pre><code>public function __construct( mixed $data = null );\n</code></pre> Constructor</p> <pre><code>public function getData(): mixed;\n</code></pre> <pre><code>public function setData( mixed $data ): void;\n</code></pre> <p><pre><code>protected function isSerializable( mixed $data ): bool;\n</code></pre> If this returns true, then the data returns back as is</p>"},{"location":"api/phalcon_storage/#storageserializerbase64","title":"Storage\\Serializer\\Base64","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Storage\\Serializer</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>InvalidArgumentException</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractSerializer</code></p> </li> <li> <p>Implements</p> </li> </ul>"},{"location":"api/phalcon_storage/#methods_9","title":"Methods","text":"<p><pre><code>public function serialize(): string;\n</code></pre> Serializes data</p> <p><pre><code>public function unserialize( mixed $data ): void;\n</code></pre> Unserializes data</p>"},{"location":"api/phalcon_storage/#storageserializerigbinary","title":"Storage\\Serializer\\Igbinary","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Storage\\Serializer</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractSerializer</code></p> </li> <li> <p>Implements</p> </li> </ul>"},{"location":"api/phalcon_storage/#methods_10","title":"Methods","text":"<p><pre><code>public function serialize(): string;\n</code></pre> Serializes data</p> <p><pre><code>public function unserialize( mixed $data ): void;\n</code></pre> Unserializes data</p>"},{"location":"api/phalcon_storage/#storageserializerjson","title":"Storage\\Serializer\\Json","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Storage\\Serializer</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>InvalidArgumentException</code></li> <li><code>JsonSerializable</code></li> <li><code>Phalcon\\Helper\\Json\\Decode</code></li> <li><code>Phalcon\\Helper\\Json\\Encode</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractSerializer</code></p> </li> <li> <p>Implements</p> </li> </ul>"},{"location":"api/phalcon_storage/#methods_11","title":"Methods","text":"<p><pre><code>public function serialize(): string;\n</code></pre> Serializes data</p> <p><pre><code>public function unserialize( mixed $data ): void;\n</code></pre> Unserializes data</p>"},{"location":"api/phalcon_storage/#storageserializermsgpack","title":"Storage\\Serializer\\Msgpack","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Storage\\Serializer</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>Igbinary</code></p> </li> <li> <p>Implements</p> </li> </ul>"},{"location":"api/phalcon_storage/#methods_12","title":"Methods","text":"<p><pre><code>public function serialize(): string | null;\n</code></pre> Serializes data</p> <p><pre><code>public function unserialize( mixed $data ): void;\n</code></pre> Unserializes data</p>"},{"location":"api/phalcon_storage/#storageserializernone","title":"Storage\\Serializer\\None","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Storage\\Serializer</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractSerializer</code></p> </li> <li> <p>Implements</p> </li> </ul>"},{"location":"api/phalcon_storage/#methods_13","title":"Methods","text":"<p><pre><code>public function serialize(): string;\n</code></pre> Serializes data</p> <p><pre><code>public function unserialize( mixed $data ): void;\n</code></pre> Unserializes data</p>"},{"location":"api/phalcon_storage/#storageserializerphp","title":"Storage\\Serializer\\Php","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Storage\\Serializer</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>InvalidArgumentException</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractSerializer</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>This file is part of the Phalcon Framework.</p> <p>(c) Phalcon Team team@phalcon.io</p> <p>For the full copyright and license information, please view the LICENSE.txt file that was distributed with this source code.</p>"},{"location":"api/phalcon_storage/#methods_14","title":"Methods","text":"<p><pre><code>public function serialize(): string;\n</code></pre> Serializes data</p> <p><pre><code>public function unserialize( mixed $data ): void;\n</code></pre> Unserializes data</p>"},{"location":"api/phalcon_storage/#storageserializerserializerinterface","title":"Storage\\Serializer\\SerializerInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Storage\\Serializer</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Serializable</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Serializable</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>This file is part of the Phalcon Framework.</p> <p>(c) Phalcon Team team@phalcon.io</p> <p>For the full copyright and license information, please view the LICENSE.txt file that was distributed with this source code.</p>"},{"location":"api/phalcon_storage/#methods_15","title":"Methods","text":"<pre><code>public function getData(): mixed;\n</code></pre> <pre><code>public function setData( mixed $data ): void;\n</code></pre>"},{"location":"api/phalcon_storage/#storageserializerfactory","title":"Storage\\SerializerFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Storage</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Factory\\AbstractFactory</code></li> <li><code>Phalcon\\Storage\\Serializer\\SerializerInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFactory</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>This file is part of the Phalcon Framework.</p> <p>(c) Phalcon Team team@phalcon.io</p> <p>For the full copyright and license information, please view the LICENSE.txt file that was distributed with this source code.</p>"},{"location":"api/phalcon_storage/#methods_16","title":"Methods","text":"<p><pre><code>public function __construct( array $services = [] );\n</code></pre> SerializerFactory constructor.</p> <pre><code>public function newInstance( string $name ): SerializerInterface;\n</code></pre> <pre><code>protected function getAdapters(): array;\n</code></pre>"},{"location":"api/phalcon_tag/","title":"Phalcon tag","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_tag/#tag","title":"Tag","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\Di</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Html\\Escaper\\EscaperInterface</code></li> <li><code>Phalcon\\Html\\Link\\Link</code></li> <li><code>Phalcon\\Html\\Link\\Serializer\\Header</code></li> <li><code>Phalcon\\Mvc\\Url\\UrlInterface</code></li> <li><code>Phalcon\\Helper\\Str\\Friendly</code></li> <li><code>Phalcon\\Tag\\Exception</code></li> <li><code>Phalcon\\Tag\\Select</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Tag is designed to simplify building of HTML tags. It provides a set of helpers to generate HTML in a dynamic way. This component is a class that you can extend to add more helpers.</p>"},{"location":"api/phalcon_tag/#constants","title":"Constants","text":"<pre><code>const HTML32 = 1;\nconst HTML401_FRAMESET = 4;\nconst HTML401_STRICT = 2;\nconst HTML401_TRANSITIONAL = 3;\nconst HTML5 = 5;\nconst XHTML10_FRAMESET = 8;\nconst XHTML10_STRICT = 6;\nconst XHTML10_TRANSITIONAL = 7;\nconst XHTML11 = 9;\nconst XHTML20 = 10;\nconst XHTML5 = 11;\n</code></pre>"},{"location":"api/phalcon_tag/#properties","title":"Properties","text":"<pre><code>//\nprotected $static $autoEscape = true;\n\n/**\n * DI Container\n */\nprotected $static $container;\n\n/**\n * Pre-assigned values for components\n */\nprotected $static $displayValues;\n\n//\nprotected $static $documentAppendTitle;\n\n//\nprotected $static $documentPrependTitle;\n\n/**\n * HTML document title\n */\nprotected $static $documentTitle;\n\n//\nprotected $static $documentTitleSeparator;\n\n//\nprotected $static $documentType = 11;\n\n//\nprotected $static $escaperService;\n\n//\nprotected $static $urlService;\n</code></pre>"},{"location":"api/phalcon_tag/#methods","title":"Methods","text":"<p><pre><code>public static function appendTitle( mixed $title ): void;\n</code></pre> Appends a text to current document title</p> <p><pre><code>public static function checkField( mixed $parameters ): string;\n</code></pre> Builds a HTML input[type=\"check\"] tag</p> <p><pre><code>public static function colorField( mixed $parameters ): string;\n</code></pre> Builds a HTML input[type=\"color\"] tag</p> <p><pre><code>public static function dateField( mixed $parameters ): string;\n</code></pre> Builds a HTML input[type=\"date\"] tag</p> <p><pre><code>public static function dateTimeField( mixed $parameters ): string;\n</code></pre>    Builds a HTML input[type=\"datetime\"] tag</p> <p><pre><code>public static function dateTimeLocalField( mixed $parameters ): string;\n</code></pre>    Builds a HTML input[type=\"datetime-local\"] tag</p> <p><pre><code>public static function displayTo( string $id, mixed $value ): void;\n</code></pre> Alias of Phalcon\\Tag::setDefault()</p> <p><pre><code>public static function emailField( mixed $parameters ): string;\n</code></pre> Builds a HTML input[type=\"email\"] tag</p> <p><pre><code>public static function endForm(): string;\n</code></pre> Builds a HTML close FORM tag</p> <p><pre><code>public static function fileField( mixed $parameters ): string;\n</code></pre> Builds a HTML input[type=\"file\"] tag</p> <p><pre><code>public static function form( mixed $parameters ): string;\n</code></pre> Builds a HTML FORM tag</p> <p><pre><code>public static function friendlyTitle( string $text, string $separator = string, bool $lowercase = bool, mixed $replace = null ): string;\n</code></pre> Converts texts into URL-friendly titles</p> <p><pre><code>public static function getDI(): DiInterface;\n</code></pre> Internally gets the request dispatcher</p> <p><pre><code>public static function getDocType(): string;\n</code></pre> Get the document type declaration of content</p> <p><pre><code>public static function getEscaper( array $params ): EscaperInterface | null;\n</code></pre> Obtains the 'escaper' service if required</p> <p><pre><code>public static function getEscaperService(): EscaperInterface;\n</code></pre> Returns an Escaper service from the default DI</p> <p><pre><code>public static function getTitle( bool $prepend = bool, bool $append = bool ): string;\n</code></pre> Gets the current document title. The title will be automatically escaped.</p> <p><pre><code>public static function getTitleSeparator(): string;\n</code></pre> Gets the current document title separator</p> <p><pre><code>public static function getUrlService(): UrlInterface;\n</code></pre> Returns a URL service from the default DI</p> <p><pre><code>public static function getValue( mixed $name, array $params = [] );\n</code></pre> Every helper calls this function to check whether a component has a predefined value using Phalcon\\Tag::setDefault() or value from $_POST</p> <p><pre><code>public static function hasValue( mixed $name ): bool;\n</code></pre> Check if a helper has a default value set using Phalcon\\Tag::setDefault() or value from $_POST</p> <p><pre><code>public static function hiddenField( mixed $parameters ): string;\n</code></pre> Builds a HTML input[type=\"hidden\"] tag</p> <p><pre><code>public static function image( mixed $parameters = null, bool $local = bool ): string;\n</code></pre> Builds HTML IMG tags</p> <p><pre><code>public static function imageInput( mixed $parameters ): string;\n</code></pre> Builds a HTML input[type=\"image\"] tag</p> <p><pre><code>public static function javascriptInclude( mixed $parameters = null, bool $local = bool ): string;\n</code></pre> Builds a SCRIPT[type=\"javascript\"] tag</p> <p><pre><code>public static function linkTo( mixed $parameters, mixed $text = null, mixed $local = bool ): string;\n</code></pre> Builds a HTML A tag using framework conventions</p> <p><pre><code>public static function monthField( mixed $parameters ): string;\n</code></pre> Builds a HTML input[type=\"month\"] tag</p> <p><pre><code>public static function numericField( mixed $parameters ): string;\n</code></pre> Builds a HTML input[type=\"number\"] tag</p> <p><pre><code>public static function passwordField( mixed $parameters ): string;\n</code></pre> Builds a HTML input[type=\"password\"] tag</p> <p><pre><code>public static function preload( mixed $parameters ): string;\n</code></pre> Parses the preload element passed and sets the necessary link headers</p> <p><pre><code>public static function prependTitle( mixed $title ): void;\n</code></pre> Prepends a text to current document title</p> <p><pre><code>public static function radioField( mixed $parameters ): string;\n</code></pre> Builds a HTML input[type=\"radio\"] tag</p> <p><pre><code>public static function rangeField( mixed $parameters ): string;\n</code></pre>    Builds a HTML input[type=\"range\"] tag</p> <p><pre><code>public static function renderAttributes( string $code, array $attributes ): string;\n</code></pre> Renders parameters keeping order in their HTML attributes</p> <p><pre><code>public static function renderTitle( bool $prepend = bool, bool $append = bool ): string;\n</code></pre> Renders the title with title tags. The title is automatically escaped</p> <p><pre><code>deprecated public static function resetInput(): void;\n</code></pre> Resets the request and internal values to avoid those fields will have any default value.</p> <p>@deprecated Will be removed in 4.0.0</p> <p><pre><code>public static function searchField( mixed $parameters ): string;\n</code></pre> Builds a HTML input[type=\"search\"] tag</p> <p><pre><code>public static function select( mixed $parameters, mixed $data = null ): string;\n</code></pre> Builds a HTML SELECT tag using a Phalcon\\Mvc\\Model resultset as options</p> <p><pre><code>public static function selectStatic( mixed $parameters, mixed $data = null ): string;\n</code></pre> Builds a HTML SELECT tag using a PHP array for options</p> <p><pre><code>public static function setAutoescape( bool $autoescape ): void;\n</code></pre> Set autoescape mode in generated HTML</p> <p><pre><code>public static function setDI( DiInterface $container ): void;\n</code></pre> Sets the dependency injector container.</p> <p><pre><code>public static function setDefault( string $id, mixed $value ): void;\n</code></pre> Assigns default values to generated tags by helpers</p> <p><pre><code>public static function setDefaults( array $values, bool $merge = bool ): void;\n</code></pre> Assigns default values to generated tags by helpers</p> <p><pre><code>public static function setDocType( int $doctype ): void;\n</code></pre> Set the document type of content</p> <p><pre><code>public static function setTitle( string $title ): void;\n</code></pre> Set the title of view content</p> <p><pre><code>public static function setTitleSeparator( string $titleSeparator ): void;\n</code></pre> Set the title separator of view content</p> <p><pre><code>public static function stylesheetLink( mixed $parameters = null, bool $local = bool ): string;\n</code></pre> Builds a LINK[rel=\"stylesheet\"] tag</p> <p><pre><code>public static function submitButton( mixed $parameters ): string;\n</code></pre> Builds a HTML input[type=\"submit\"] tag</p> <p><pre><code>public static function tagHtml( string $tagName, mixed $parameters = null, bool $selfClose = bool, bool $onlyStart = bool, bool $useEol = bool ): string;\n</code></pre> Builds a HTML tag</p> <p><pre><code>public static function tagHtmlClose( string $tagName, bool $useEol = bool ): string;\n</code></pre> Builds a HTML tag closing tag</p> <p><pre><code>public static function telField( mixed $parameters ): string;\n</code></pre>    Builds a HTML input[type=\"tel\"] tag</p> <p><pre><code>public static function textArea( mixed $parameters ): string;\n</code></pre> Builds a HTML TEXTAREA tag</p> <p>@paraym array parameters = [     'id' =&gt; '',     'name' =&gt; '',     'value' =&gt; '',     'class' =&gt; '' ]</p> <p><pre><code>public static function textField( mixed $parameters ): string;\n</code></pre> Builds a HTML input[type=\"text\"] tag</p> <p><pre><code>public static function timeField( mixed $parameters ): string;\n</code></pre> Builds a HTML input[type=\"time\"] tag</p> <p><pre><code>public static function urlField( mixed $parameters ): string;\n</code></pre> Builds a HTML input[type=\"url\"] tag</p> <p><pre><code>public static function weekField( mixed $parameters ): string;\n</code></pre> Builds a HTML input[type=\"week\"] tag</p> <p><pre><code>static final protected function inputField( string $type, mixed $parameters, bool $asValue = bool ): string;\n</code></pre> Builds generic INPUT tags</p> <p><pre><code>static final protected function inputFieldChecked( string $type, mixed $parameters ): string;\n</code></pre> Builds INPUT tags that implements the checked attribute</p>"},{"location":"api/phalcon_tag/#tagexception","title":"Tag\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Tag</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Tag\\Exception</p> <p>Exceptions thrown in Phalcon\\Tag will use this class</p>"},{"location":"api/phalcon_tag/#tagselect","title":"Tag\\Select","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Tag</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Html\\Escaper\\EscaperInterface</code></li> <li><code>Phalcon\\Mvc\\Model\\ResultsetInterface</code></li> <li><code>Phalcon\\Tag</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Tag\\Select</p> <p>Generates a SELECT HTML tag using a static array of values or a Phalcon\\Mvc\\Model resultset</p>"},{"location":"api/phalcon_tag/#methods_1","title":"Methods","text":"<p><pre><code>public static function selectField( mixed $parameters, mixed $data = null ): string;\n</code></pre> Generates a SELECT tag</p>"},{"location":"api/phalcon_text/","title":"Phalcon text","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_text/#text","title":"Text","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Helper\\Str</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Provides utilities to work with texts</p>"},{"location":"api/phalcon_text/#constants","title":"Constants","text":"<pre><code>const RANDOM_ALNUM = 0;\nconst RANDOM_ALPHA = 1;\nconst RANDOM_DISTINCT = 5;\nconst RANDOM_HEXDEC = 2;\nconst RANDOM_NOZERO = 4;\nconst RANDOM_NUMERIC = 3;\n</code></pre>"},{"location":"api/phalcon_text/#methods","title":"Methods","text":"<p><pre><code>public static function camelize( string $text, mixed $delimiter = null ): string;\n</code></pre> Converts strings to camelize style</p> <pre><code>echo Phalcon\\Text::camelize(\"coco_bongo\"); // CocoBongo\necho Phalcon\\Text::camelize(\"co_co-bon_go\", \"-\"); // Co_coBon_go\necho Phalcon\\Text::camelize(\"co_co-bon_go\", \"_-\"); // CoCoBonGo\n</code></pre> <p><pre><code>public static function concat(): string;\n</code></pre> Concatenates strings using the separator only once without duplication in places concatenation</p> <pre><code>$str = Phalcon\\Text::concat(\n    \"/\",\n    \"/tmp/\",\n    \"/folder_1/\",\n    \"/folder_2\",\n    \"folder_3/\"\n);\n\n// /tmp/folder_1/folder_2/folder_3/\necho $str;\n</code></pre> <p><pre><code>public static function dynamic( string $text, string $leftDelimiter = string, string $rightDelimiter = string, string $separator = string ): string;\n</code></pre> Generates random text in accordance with the template</p> <pre><code>// Hi my name is a Bob\necho Phalcon\\Text::dynamic(\"{Hi|Hello}, my name is a {Bob|Mark|Jon}!\");\n\n// Hi my name is a Jon\necho Phalcon\\Text::dynamic(\"{Hi|Hello}, my name is a {Bob|Mark|Jon}!\");\n\n// Hello my name is a Bob\necho Phalcon\\Text::dynamic(\"{Hi|Hello}, my name is a {Bob|Mark|Jon}!\");\n\n// Hello my name is a Zyxep\necho Phalcon\\Text::dynamic(\n    \"[Hi/Hello], my name is a [Zyxep/Mark]!\",\n    \"[\", \"]\",\n    \"/\"\n);\n</code></pre> <p><pre><code>public static function endsWith( string $text, string $end, bool $ignoreCase = bool ): bool;\n</code></pre> Check if a string ends with a given string</p> <pre><code>echo Phalcon\\Text::endsWith(\"Hello\", \"llo\"); // true\necho Phalcon\\Text::endsWith(\"Hello\", \"LLO\", false); // false\necho Phalcon\\Text::endsWith(\"Hello\", \"LLO\"); // true\n</code></pre> <p><pre><code>public static function humanize( string $text ): string;\n</code></pre> Makes an underscored or dashed phrase human-readable</p> <pre><code>echo Phalcon\\Text::humanize(\"start-a-horse\"); // \"start a horse\"\necho Phalcon\\Text::humanize(\"five_cats\"); // \"five cats\"\n</code></pre> <p><pre><code>public static function increment( string $text, string $separator = string ): string;\n</code></pre> Adds a number to a string or increment that number if it already is defined</p> <pre><code>echo Phalcon\\Text::increment(\"a\"); // \"a_1\"\necho Phalcon\\Text::increment(\"a_1\"); // \"a_2\"\n</code></pre> <p><pre><code>public static function lower( string $text, string $encoding = string ): string;\n</code></pre> Lowercases a string, this function makes use of the mbstring extension if available</p> <pre><code>echo Phalcon\\Text::lower(\"HELLO\"); // hello\n</code></pre> <p><pre><code>public static function random( int $type = int, long $length = int ): string;\n</code></pre> Generates a random string based on the given type. Type is one of the RANDOM_* constants</p> <pre><code>use Phalcon\\Text;\n\n// \"aloiwkqz\"\necho Text::random(Text::RANDOM_ALNUM);\n</code></pre> <p><pre><code>public static function reduceSlashes( string $text ): string;\n</code></pre> Reduces multiple slashes in a string to single slashes</p> <pre><code>// foo/bar/baz\necho Phalcon\\Text::reduceSlashes(\"foo//bar/baz\");\n\n// http://foo.bar/baz/buz\necho Phalcon\\Text::reduceSlashes(\"http://foo.bar///baz/buz\");\n</code></pre> <p><pre><code>public static function startsWith( string $text, string $start, bool $ignoreCase = bool ): bool;\n</code></pre> Check if a string starts with a given string</p> <pre><code>echo Phalcon\\Text::startsWith(\"Hello\", \"He\"); // true\necho Phalcon\\Text::startsWith(\"Hello\", \"he\", false); // false\necho Phalcon\\Text::startsWith(\"Hello\", \"he\"); // true\n</code></pre> <p><pre><code>public static function uncamelize( string $text, mixed $delimiter = null ): string;\n</code></pre> Uncamelize strings which are camelized</p> <pre><code>echo Phalcon\\Text::uncamelize(\"CocoBongo\"); // coco_bongo\necho Phalcon\\Text::uncamelize(\"CocoBongo\", \"-\"); // coco-bongo\n</code></pre> <p><pre><code>public static function underscore( string $text ): string;\n</code></pre> Makes a phrase underscored instead of spaced</p> <pre><code>echo Phalcon\\Text::underscore(\"look behind\"); // \"look_behind\"\necho Phalcon\\Text::underscore(\"Awesome Phalcon\"); // \"Awesome_Phalcon\"\n</code></pre> <p><pre><code>public static function upper( string $text, string $encoding = string ): string;\n</code></pre> Uppercases a string, this function makes use of the mbstring extension if available</p> <pre><code>echo Phalcon\\Text::upper(\"hello\"); // HELLO\n</code></pre>"},{"location":"api/phalcon_translate/","title":"Phalcon translate","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_translate/#translateadapterabstractadapter","title":"Translate\\Adapter\\AbstractAdapter","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Translate\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Helper\\Arr\\Get</code></li> <li><code>Phalcon\\Translate\\Exception</code></li> <li><code>Phalcon\\Translate\\InterpolatorFactory</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>AdapterInterface</code></li> </ul> </li> </ul>"},{"location":"api/phalcon_translate/#properties","title":"Properties","text":"<pre><code>/**\n * @var string\n */\nprotected $defaultInterpolator = ;\n\n/**\n    * @var InterpolatorFactory\n    */\nprotected $interpolatorFactory;\n</code></pre>"},{"location":"api/phalcon_translate/#methods","title":"Methods","text":"<pre><code>public function __construct( InterpolatorFactory $interpolator, array $options );\n</code></pre> <p><pre><code>public function _( string $translateKey, array $placeholders = [] ): string;\n</code></pre> Returns the translation string of the given key (alias of method 't')</p> <p><pre><code>public function offsetExists( mixed $translateKey ): bool;\n</code></pre> Check whether a translation key exists</p> <p><pre><code>public function offsetGet( mixed $translateKey ): mixed;\n</code></pre> Returns the translation related to the given key</p> <p><pre><code>public function offsetSet( mixed $offset, mixed $value ): void;\n</code></pre> Sets a translation value</p> <p><pre><code>public function offsetUnset( mixed $offset ): void;\n</code></pre> Unsets a translation from the dictionary</p> <p><pre><code>public function t( string $translateKey, array $placeholders = [] ): string;\n</code></pre> Returns the translation string of the given key</p> <p><pre><code>protected function replacePlaceholders( string $translation, array $placeholders = [] ): string;\n</code></pre> Replaces placeholders by the values passed</p>"},{"location":"api/phalcon_translate/#translateadapteradapterinterface","title":"Translate\\Adapter\\AdapterInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Translate\\Adapter</code></li> </ul> </li> </ul> <p>Phalcon\\Translate\\Adapter\\AdapterInterface</p> <p>Interface for Phalcon\\Translate adapters</p>"},{"location":"api/phalcon_translate/#methods_1","title":"Methods","text":"<p><pre><code>public function exists( string $index ): bool;\n</code></pre> Check whether is defined a translation key in the internal array</p> <p><pre><code>public function query( string $translateKey, array $placeholders = [] ): string;\n</code></pre> Returns the translation related to the given key</p> <p><pre><code>public function t( string $translateKey, array $placeholders = [] ): string;\n</code></pre> Returns the translation string of the given key</p>"},{"location":"api/phalcon_translate/#translateadaptercsv","title":"Translate\\Adapter\\Csv","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Translate\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>ArrayAccess</code></li> <li><code>Phalcon\\Translate\\Exception</code></li> <li><code>Phalcon\\Translate\\InterpolatorFactory</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> <ul> <li><code>ArrayAccess</code></li> </ul> </li> </ul> <p>Allows to define translation lists using CSV file</p>"},{"location":"api/phalcon_translate/#properties_1","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $translate;\n</code></pre>"},{"location":"api/phalcon_translate/#methods_2","title":"Methods","text":"<p><pre><code>public function __construct( InterpolatorFactory $interpolator, array $options );\n</code></pre> Phalcon\\Translate\\Adapter\\Csv constructor</p> <p><pre><code>public function exists( string $index ): bool;\n</code></pre> Check whether is defined a translation key in the internal array</p> <p><pre><code>public function query( string $index, array $placeholders = [] ): string;\n</code></pre> Returns the translation related to the given key</p>"},{"location":"api/phalcon_translate/#translateadaptergettext","title":"Translate\\Adapter\\Gettext","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Translate\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>ArrayAccess</code></li> <li><code>Phalcon\\Translate\\Exception</code></li> <li><code>Phalcon\\Translate\\InterpolatorFactory</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> <ul> <li><code>ArrayAccess</code></li> </ul> </li> </ul> <p>Phalcon\\Translate\\Adapter\\Gettext</p> <pre><code>use Phalcon\\Translate\\Adapter\\Gettext;\n\n$adapter = new Gettext(\n    [\n        \"locale\"        =&gt; \"de_DE.UTF-8\",\n        \"defaultDomain\" =&gt; \"translations\",\n        \"directory\"     =&gt; \"/path/to/application/locales\",\n        \"category\"      =&gt; LC_MESSAGES,\n    ]\n);\n</code></pre> <p>Allows translate using gettext</p>"},{"location":"api/phalcon_translate/#properties_2","title":"Properties","text":"<pre><code>/**\n * @var int\n */\nprotected $category;\n\n/**\n * @var string\n */\nprotected $defaultDomain;\n\n/**\n * @var $string|array\n */\nprotected $directory;\n\n/**\n * @var string\n */\nprotected $locale;\n</code></pre>"},{"location":"api/phalcon_translate/#methods_3","title":"Methods","text":"<p><pre><code>public function __construct( InterpolatorFactory $interpolator, array $options );\n</code></pre> Phalcon\\Translate\\Adapter\\Gettext constructor</p> <p><pre><code>public function exists( string $index ): bool;\n</code></pre> Check whether is defined a translation key in the internal array</p> <pre><code>public function getCategory(): int;\n</code></pre> <pre><code>public function getDefaultDomain(): string;\n</code></pre> <pre><code>public function getDirectory(): string|array;\n</code></pre> <pre><code>public function getLocale(): string;\n</code></pre> <p><pre><code>public function nquery( string $msgid1, string $msgid2, int $count, array $placeholders = [], string $domain = null ): string;\n</code></pre> The plural version of gettext(). Some languages have more than one form for plural messages dependent on the count.</p> <p><pre><code>public function query( string $index, array $placeholders = [] ): string;\n</code></pre> Returns the translation related to the given key.</p> <pre><code>$translator-&gt;query(\"\u4f60\u597d %name%\uff01\", [\"name\" =&gt; \"Phalcon\"]);\n</code></pre> <p><pre><code>public function resetDomain(): string;\n</code></pre> Sets the default domain</p> <p><pre><code>public function setDefaultDomain( string $domain ): void;\n</code></pre> Sets the domain default to search within when calls are made to gettext()</p> <p><pre><code>public function setDirectory( mixed $directory ): void;\n</code></pre> Sets the path for a domain</p> <pre><code>// Set the directory path\n$gettext-&gt;setDirectory(\"/path/to/the/messages\");\n\n// Set the domains and directories path\n$gettext-&gt;setDirectory(\n    [\n        \"messages\" =&gt; \"/path/to/the/messages\",\n        \"another\"  =&gt; \"/path/to/the/another\",\n    ]\n);\n</code></pre> <p><pre><code>public function setDomain( mixed $domain ): string;\n</code></pre> Changes the current domain (i.e. the translation file)</p> <p><pre><code>public function setLocale( int $category, string $locale ): string | bool;\n</code></pre> Sets locale information</p> <pre><code>// Set locale to Dutch\n$gettext-&gt;setLocale(LC_ALL, \"nl_NL\");\n\n// Try different possible locale names for German\n$gettext-&gt;setLocale(LC_ALL, \"de_DE@euro\", \"de_DE\", \"de\", \"ge\");\n</code></pre> <p><pre><code>protected function getOptionsDefault(): array;\n</code></pre> Gets default options</p> <p><pre><code>protected function prepareOptions( array $options ): void;\n</code></pre> Validator for constructor</p>"},{"location":"api/phalcon_translate/#translateadapternativearray","title":"Translate\\Adapter\\NativeArray","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Translate\\Adapter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>ArrayAccess</code></li> <li><code>Phalcon\\Translate\\Exception</code></li> <li><code>Phalcon\\Translate\\InterpolatorFactory</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractAdapter</code></p> </li> <li> <p>Implements</p> <ul> <li><code>ArrayAccess</code></li> </ul> </li> </ul> <p>Allows to define translation lists using PHP arrays</p>"},{"location":"api/phalcon_translate/#properties_3","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprivate translate;\n\n/**\n * @var bool\n */\nprivate triggerError = false;\n</code></pre>"},{"location":"api/phalcon_translate/#methods_4","title":"Methods","text":"<p><pre><code>public function __construct( InterpolatorFactory $interpolator, array $options );\n</code></pre> Phalcon\\Translate\\Adapter\\NativeArray constructor</p> <p><pre><code>public function exists( string $index ): bool;\n</code></pre> Check whether is defined a translation key in the internal array</p> <p><pre><code>public function notFound( string $index ): string;\n</code></pre> Whenever a key is not found this method will be called</p> <p><pre><code>public function query( string $index, array $placeholders = [] ): string;\n</code></pre> Returns the translation related to the given key</p>"},{"location":"api/phalcon_translate/#translateexception","title":"Translate\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Translate</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Translate\\Exception</p> <p>Class for exceptions thrown by Phalcon\\Translate</p>"},{"location":"api/phalcon_translate/#translateinterpolatorassociativearray","title":"Translate\\Interpolator\\AssociativeArray","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Translate\\Interpolator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Helper\\Str\\Interpolate</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>InterpolatorInterface</code></li> </ul> </li> </ul>"},{"location":"api/phalcon_translate/#methods_5","title":"Methods","text":"<p><pre><code>public function replacePlaceholders( string $translation, array $placeholders = [] ): string;\n</code></pre> Replaces placeholders by the values passed</p>"},{"location":"api/phalcon_translate/#translateinterpolatorindexedarray","title":"Translate\\Interpolator\\IndexedArray","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Translate\\Interpolator</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>InterpolatorInterface</code></li> </ul> </li> </ul>"},{"location":"api/phalcon_translate/#methods_6","title":"Methods","text":"<p><pre><code>public function replacePlaceholders( string $translation, array $placeholders = [] ): string;\n</code></pre> Replaces placeholders by the values passed</p>"},{"location":"api/phalcon_translate/#translateinterpolatorinterpolatorinterface","title":"Translate\\Interpolator\\InterpolatorInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Translate\\Interpolator</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Translate\\InterpolatorInterface</p> <p>Interface for Phalcon\\Translate interpolators</p>"},{"location":"api/phalcon_translate/#methods_7","title":"Methods","text":"<p><pre><code>public function replacePlaceholders( string $translation, array $placeholders = [] ): string;\n</code></pre> Replaces placeholders by the values passed</p>"},{"location":"api/phalcon_translate/#translateinterpolatorfactory","title":"Translate\\InterpolatorFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Translate</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Factory\\AbstractFactory</code></li> <li><code>Phalcon\\Translate\\Interpolator\\InterpolatorInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFactory</code></p> </li> <li> <p>Implements</p> </li> </ul>"},{"location":"api/phalcon_translate/#methods_8","title":"Methods","text":"<p><pre><code>public function __construct( array $services = [] );\n</code></pre> AdapterFactory constructor.</p> <p><pre><code>public function newInstance( string $name ): InterpolatorInterface;\n</code></pre> Create a new instance of the adapter</p> <pre><code>protected function getAdapters(): array;\n</code></pre>"},{"location":"api/phalcon_translate/#translate-translatefactory","title":"Class Phalcon\\Translate\\TranslateFactory","text":"<p>Source on GitHub</p> <p>| Namespace  | Phalcon\\Translate | | Uses       | Phalcon\\Config, Phalcon\\Factory\\AbstractFactory, Phalcon\\Helper\\Arr, Phalcon\\Translate\\Adapter\\AdapterInterface | | Extends    | AbstractFactory |</p> <p>This file is part of the Phalcon Framework.</p> <p>(c) Phalcon Team team@phalcon.io</p> <p>For the full copyright and license information, please view the LICENSE.txt file that was distributed with this source code.</p>"},{"location":"api/phalcon_translate/#properties_4","title":"Properties","text":"<pre><code>/**\n * @var InterpolatorFactory\n */\nprivate interpolator;\n</code></pre>"},{"location":"api/phalcon_translate/#methods_9","title":"Methods","text":"<p><pre><code>public function __construct( InterpolatorFactory $interpolator, array $services = [] );\n</code></pre> AdapterFactory constructor.</p> <p><pre><code>public function load( mixed $config ): mixed;\n</code></pre> Factory to create an instance from a Config object</p> <p><pre><code>public function newInstance( string $name, array $options = [] ): AdapterInterface;\n</code></pre> Create a new instance of the adapter</p> <pre><code>protected function getAdapters(): array;\n</code></pre>"},{"location":"api/phalcon_url/","title":"Phalcon url","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_url/#url","title":"Url","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\AbstractInjectionAware</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Mvc\\RouterInterface</code></li> <li><code>Phalcon\\Mvc\\Router\\RouteInterface</code></li> <li><code>Phalcon\\Mvc\\Url\\Exception</code></li> <li><code>Phalcon\\Mvc\\Url\\UrlInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractInjectionAware</code></p> </li> <li> <p>Implements</p> <ul> <li><code>UrlInterface</code></li> </ul> </li> </ul> <p>This components helps in the generation of: URIs, URLs and Paths</p> <pre><code>// Generate a URL appending the URI to the base URI\necho $url-&gt;get(\"products/edit/1\");\n\n// Generate a URL for a predefined route\necho $url-&gt;get(\n    [\n        \"for\"   =&gt; \"blog-post\",\n        \"title\" =&gt; \"some-cool-stuff\",\n        \"year\"  =&gt; \"2012\",\n    ]\n);\n</code></pre>"},{"location":"api/phalcon_url/#properties","title":"Properties","text":"<pre><code>/**\n * @var null | string\n */\nprotected $baseUri;\n\n/**\n * @var null | string\n */\nprotected $basePath;\n\n/**\n * @var RouterInterface | null\n */\nprotected $router;\n\n/**\n * @var null | string\n */\nprotected $staticBaseUri;\n</code></pre>"},{"location":"api/phalcon_url/#methods","title":"Methods","text":"<pre><code>public function __construct( RouterInterface $router = null );\n</code></pre> <p><pre><code>public function get( mixed $uri = null, mixed $args = null, bool $local = null, mixed $baseUri = null ): string;\n</code></pre> Generates a URL</p> <pre><code>// Generate a URL appending the URI to the base URI\necho $url-&gt;get(\"products/edit/1\");\n\n// Generate a URL for a predefined route\necho $url-&gt;get(\n    [\n        \"for\"   =&gt; \"blog-post\",\n        \"title\" =&gt; \"some-cool-stuff\",\n        \"year\"  =&gt; \"2015\",\n    ]\n);\n\n// Generate a URL with GET arguments (/show/products?id=1&amp;name=Carrots)\necho $url-&gt;get(\n    \"show/products\",\n    [\n        \"id\"   =&gt; 1,\n        \"name\" =&gt; \"Carrots\",\n    ]\n);\n\n// Generate an absolute URL by setting the third parameter as false.\necho $url-&gt;get(\n    \"https://phalcon.io/\",\n    null,\n    false\n);\n</code></pre> <p><pre><code>public function getBasePath(): string;\n</code></pre> Returns the base path</p> <p><pre><code>public function getBaseUri(): string;\n</code></pre> Returns the prefix for all the generated urls. By default /</p> <p><pre><code>public function getStatic( mixed $uri = null ): string;\n</code></pre> Generates a URL for a static resource</p> <pre><code>// Generate a URL for a static resource\necho $url-&gt;getStatic(\"img/logo.png\");\n\n// Generate a URL for a static predefined route\necho $url-&gt;getStatic(\n    [\n        \"for\" =&gt; \"logo-cdn\",\n    ]\n);\n</code></pre> <p><pre><code>public function getStaticBaseUri(): string;\n</code></pre> Returns the prefix for all the generated static urls. By default /</p> <p><pre><code>public function path( string $path = null ): string;\n</code></pre> Generates a local path</p> <p><pre><code>public function setBasePath( string $basePath ): UrlInterface;\n</code></pre> Sets a base path for all the generated paths</p> <pre><code>$url-&gt;setBasePath(\"/var/www/htdocs/\");\n</code></pre> <p><pre><code>public function setBaseUri( string $baseUri ): UrlInterface;\n</code></pre> Sets a prefix for all the URIs to be generated</p> <pre><code>$url-&gt;setBaseUri(\"/invo/\");\n\n$url-&gt;setBaseUri(\"/invo/index.php/\");\n</code></pre> <p><pre><code>public function setStaticBaseUri( string $staticBaseUri ): UrlInterface;\n</code></pre> Sets a prefix for all static URLs generated</p> <pre><code>$url-&gt;setStaticBaseUri(\"/invo/\");\n</code></pre>"},{"location":"api/phalcon_url/#mvcurlexception","title":"Mvc\\Url\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Url</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Phalcon\\Mvc\\Url\\Exception</p> <p>Exceptions thrown in Phalcon\\Url will use this class</p>"},{"location":"api/phalcon_url/#mvcurlurlinterface","title":"Mvc\\Url\\UrlInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Mvc\\Url</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Mvc\\Url\\UrlInterface</p>"},{"location":"api/phalcon_url/#methods_1","title":"Methods","text":"<p><pre><code>public function get( mixed $uri = null, mixed $args = null, bool $local = null ): string;\n</code></pre> Generates a URL</p> <p><pre><code>public function getBasePath(): string;\n</code></pre> Returns a base path</p> <p><pre><code>public function getBaseUri(): string;\n</code></pre> Returns the prefix for all the generated urls. By default /</p> <p><pre><code>public function path( string $path = null ): string;\n</code></pre> Generates a local path</p> <p><pre><code>public function setBasePath( string $basePath ): UrlInterface;\n</code></pre> Sets a base paths for all the generated paths</p> <p><pre><code>public function setBaseUri( string $baseUri ): UrlInterface;\n</code></pre> Sets a prefix to all the urls generated</p>"},{"location":"api/phalcon_validation/","title":"Phalcon validation","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_validation/#filtervalidation","title":"Filter\\Validation","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\Di</code></li> <li><code>Phalcon\\Di\\DiInterface</code></li> <li><code>Phalcon\\Di\\Injectable</code></li> <li><code>Phalcon\\Filter\\FilterInterface</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractCombinedFieldsValidator</code></li> <li><code>Phalcon\\Filter\\Validation\\Exception</code></li> <li><code>Phalcon\\Filter\\Validation\\ValidationInterface</code></li> <li><code>Phalcon\\Filter\\Validation\\ValidatorInterface</code></li> <li><code>Phalcon\\Messages\\MessageInterface</code></li> <li><code>Phalcon\\Messages\\Messages</code></li> </ul> </li> <li> <p>Extends</p> <p><code>Injectable</code></p> </li> <li> <p>Implements</p> <ul> <li><code>ValidationInterface</code></li> </ul> </li> </ul> <p>Allows to validate data using custom or built-in validators</p>"},{"location":"api/phalcon_validation/#properties","title":"Properties","text":"<pre><code>//\nprotected $combinedFieldsValidators;\n\n//\nprotected $data;\n\n//\nprotected $entity;\n\n//\nprotected $filters;\n\n//\nprotected $labels;\n\n//\nprotected $messages;\n\n//\nprotected $validators;\n\n//\nprotected $values;\n</code></pre>"},{"location":"api/phalcon_validation/#methods","title":"Methods","text":"<p><pre><code>public function __construct( array $validators = [] );\n</code></pre> Phalcon\\Validation constructor</p> <p><pre><code>public function add( mixed $field, ValidatorInterface $validator ): ValidationInterface;\n</code></pre> Adds a validator to a field</p> <p><pre><code>public function appendMessage( MessageInterface $message ): ValidationInterface;\n</code></pre> Appends a message to the messages list</p> <p><pre><code>public function bind( mixed $entity, mixed $data ): ValidationInterface;\n</code></pre> Assigns the data to an entity The entity is used to obtain the validation values</p> <pre><code>public function getData()\n</code></pre> <p><pre><code>public function getEntity(): mixed;\n</code></pre> Returns the bound entity</p> <p><pre><code>public function getFilters( string $field = null ): mixed | null;\n</code></pre> Returns all the filters or a specific one</p> <p><pre><code>public function getLabel( mixed $field ): string;\n</code></pre> Get label for field</p> <p><pre><code>public function getMessages(): Messages;\n</code></pre> Returns the registered validators</p> <p><pre><code>public function getValidators(): array;\n</code></pre> Returns the validators added to the validation</p> <p><pre><code>public function getValue( string $field ): mixed | null;\n</code></pre> Gets the a value to validate in the array/object data source</p> <p><pre><code>public function rule( mixed $field, ValidatorInterface $validator ): ValidationInterface;\n</code></pre> Alias of <code>add</code> method</p> <p><pre><code>public function rules( mixed $field, array $validators ): ValidationInterface;\n</code></pre> Adds the validators to a field</p> <p><pre><code>public function setEntity( mixed $entity ): void;\n</code></pre> Sets the bound entity</p> <p><pre><code>public function setFilters( mixed $field, mixed $filters ): ValidationInterface;\n</code></pre> Adds filters to the field</p> <p><pre><code>public function setLabels( array $labels ): void;\n</code></pre> Adds labels for fields</p> <pre><code>public function setValidators( $validators )\n</code></pre> <p><pre><code>public function validate( mixed $data = null, mixed $entity = null ): Messages;\n</code></pre> Validate a set of data according to a set of rules</p> <p><pre><code>protected function preChecking( mixed $field, ValidatorInterface $validator ): bool;\n</code></pre> Internal validations, if it returns true, then skip the current validator</p>"},{"location":"api/phalcon_validation/#filtervalidationabstractcombinedfieldsvalidator","title":"Filter\\Validation\\AbstractCombinedFieldsValidator","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> </ul> <p>This is a base class for combined fields validators</p>"},{"location":"api/phalcon_validation/#filtervalidationabstractvalidator","title":"Filter\\Validation\\AbstractValidator","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Messages\\Message</code></li> <li><code>Phalcon\\Helper\\Arr\\Whitelist</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> <ul> <li><code>ValidatorInterface</code></li> </ul> </li> </ul> <p>This is a base class for validators</p>"},{"location":"api/phalcon_validation/#properties_1","title":"Properties","text":"<pre><code>/**\n * Message template\n *\n * @var string|null\n */\nprotected $template;\n\n/**\n * Message templates\n *\n * @var array\n */\nprotected $templates;\n\n//\nprotected $options;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_1","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Phalcon\\Validation\\Validator constructor</p> <p><pre><code>public function getOption( string $key, mixed $defaultValue = null ): mixed;\n</code></pre> Returns an option in the validator's options Returns null if the option hasn't set</p> <p><pre><code>public function getTemplate( string $field = null ): string;\n</code></pre> Get the template message</p> <p><pre><code>public function getTemplates(): array;\n</code></pre> Get templates collection object</p> <p><pre><code>public function hasOption( string $key ): bool;\n</code></pre> Checks if an option is defined</p> <p><pre><code>public function messageFactory( Validation $validation, mixed $field, array $replacements = [] ): Message;\n</code></pre> Create a default message by factory</p> <p><pre><code>public function setOption( string $key, mixed $value ): void;\n</code></pre> Sets an option in the validator</p> <p><pre><code>public function setTemplate( string $template ): ValidatorInterface;\n</code></pre> Set a new template message</p> <p><pre><code>public function setTemplates( array $templates ): ValidatorInterface;\n</code></pre> Clear current templates and set new from an array,</p> <p><pre><code>abstract public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p> <p><pre><code>protected function prepareCode( string $field ): int | null;\n</code></pre> Prepares a validation code.</p> <p><pre><code>protected function prepareLabel( Validation $validation, string $field ): mixed;\n</code></pre> Prepares a label for the field.</p>"},{"location":"api/phalcon_validation/#filtervalidationabstractvalidatorcomposite","title":"Filter\\Validation\\AbstractValidatorComposite","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> <ul> <li><code>ValidatorCompositeInterface</code></li> </ul> </li> </ul> <p>This is a base class for combined fields validators</p>"},{"location":"api/phalcon_validation/#properties_2","title":"Properties","text":"<pre><code>/**\n * @var array\n */\nprotected $#validators;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_2","title":"Methods","text":"<pre><code>public function getValidators(): array;\n</code></pre> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationexception","title":"Filter\\Validation\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Filter\\Validation* classes will use this class</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidationinterface","title":"Filter\\Validation\\ValidationInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Di\\Injectable</code></li> <li><code>Phalcon\\Messages\\MessageInterface</code></li> <li><code>Phalcon\\Messages\\Messages</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for the Phalcon\\Filter\\Validation component</p>"},{"location":"api/phalcon_validation/#methods_3","title":"Methods","text":"<p><pre><code>public function add( string $field, ValidatorInterface $validator ): ValidationInterface;\n</code></pre> Adds a validator to a field</p> <p><pre><code>public function appendMessage( MessageInterface $message ): ValidationInterface;\n</code></pre> Appends a message to the messages list</p> <p><pre><code>public function bind( mixed $entity, mixed $data ): ValidationInterface;\n</code></pre> Assigns the data to an entity The entity is used to obtain the validation values</p> <p><pre><code>public function getEntity(): mixed;\n</code></pre> Returns the bound entity</p> <p><pre><code>public function getFilters( string $field = null ): mixed | null;\n</code></pre> Returns all the filters or a specific one</p> <p><pre><code>public function getLabel( string $field ): string;\n</code></pre> Get label for field</p> <p><pre><code>public function getMessages(): Messages;\n</code></pre> Returns the registered validators</p> <p><pre><code>public function getValidators(): array;\n</code></pre> Returns the validators added to the validation</p> <p><pre><code>public function getValue( string $field ): mixed | null;\n</code></pre> Gets the a value to validate in the array/object data source</p> <p><pre><code>public function rule( string $field, ValidatorInterface $validator ): ValidationInterface;\n</code></pre> Alias of <code>add</code> method</p> <p><pre><code>public function rules( string $field, array $validators ): ValidationInterface;\n</code></pre> Adds the validators to a field</p> <p><pre><code>public function setFilters( string $field, mixed $filters ): ValidationInterface;\n</code></pre> Adds filters to the field</p> <p><pre><code>public function setLabels( array $labels ): void;\n</code></pre> Adds labels for fields</p> <p><pre><code>public function validate( mixed $data = null, mixed $entity = null ): Messages;\n</code></pre> Validate a set of data according to a set of rules</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatoralnum","title":"Filter\\Validation\\Validator\\Alnum","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Check for alphanumeric character(s)</p> <pre><code>use Phalcon\\Filter\\Validation;\nuse Phalcon\\Filter\\Validation\\Validator\\Alnum as AlnumValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"username\",\n    new AlnumValidator(\n        [\n            \"message\" =&gt; \":field must contain only alphanumeric characters\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"username\",\n        \"name\",\n    ],\n    new AlnumValidator(\n        [\n            \"message\" =&gt; [\n                \"username\" =&gt; \"username must contain only alphanumeric characters\",\n                \"name\"     =&gt; \"name must contain only alphanumeric characters\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_3","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field must contain only letters and numbers;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_4","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatoralpha","title":"Filter\\Validation\\Validator\\Alpha","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Check for alphabetic character(s)</p> <pre><code>use Phalcon\\Filter\\Validation;\nuse Phalcon\\Filter\\Validation\\Validator\\Alpha as AlphaValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"username\",\n    new AlphaValidator(\n        [\n            \"message\" =&gt; \":field must contain only letters\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"username\",\n        \"name\",\n    ],\n    new AlphaValidator(\n        [\n            \"message\" =&gt; [\n                \"username\" =&gt; \"username must contain only letters\",\n                \"name\"     =&gt; \"name must contain only letters\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_4","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field must contain only letters;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_5","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorbetween","title":"Filter\\Validation\\Validator\\Between","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Validates that a value is between an inclusive range of two values. For a value x, the test is passed if minimum&lt;=x&lt;=maximum.</p> <pre><code>use Phalcon\\Filter\\Validation;\nuse Phalcon\\Filter\\Validation\\Validator\\Between;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"price\",\n    new Between(\n        [\n            \"minimum\" =&gt; 0,\n            \"maximum\" =&gt; 100,\n            \"message\" =&gt; \"The price must be between 0 and 100\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"price\",\n        \"amount\",\n    ],\n    new Between(\n        [\n            \"minimum\" =&gt; [\n                \"price\"  =&gt; 0,\n                \"amount\" =&gt; 0,\n            ],\n            \"maximum\" =&gt; [\n                \"price\"  =&gt; 100,\n                \"amount\" =&gt; 50,\n            ],\n            \"message\" =&gt; [\n                \"price\"  =&gt; \"The price must be between 0 and 100\",\n                \"amount\" =&gt; \"The amount must be between 0 and 50\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_5","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field must be within the range of :min to :max;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_6","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorcallback","title":"Filter\\Validation\\Validator\\Callback","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Filter\\Validation\\ValidatorInterface</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Calls user function for validation</p> <pre><code>use Phalcon\\Filter\\Validation;\nuse Phalcon\\Filter\\Validation\\Validator\\Callback as CallbackValidator;\nuse Phalcon\\Filter\\Validation\\Validator\\Numericality as NumericalityValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    [\"user\", \"admin\"],\n    new CallbackValidator(\n        [\n            \"message\" =&gt; \"There must be only an user or admin set\",\n            \"callback\" =&gt; function($data) {\n                if (!empty($data-&gt;getUser()) &amp;&amp; !empty($data-&gt;getAdmin())) {\n                    return false;\n                }\n\n                return true;\n            }\n        ]\n    )\n);\n\n$validator-&gt;add(\n    \"amount\",\n    new CallbackValidator(\n        [\n            \"callback\" =&gt; function($data) {\n                if (!empty($data-&gt;getProduct())) {\n                    return new NumericalityValidator(\n                        [\n                            \"message\" =&gt; \"Amount must be a number.\"\n                        ]\n                    );\n                }\n            }\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_6","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field must match the callback function;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_7","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorconfirmation","title":"Filter\\Validation\\Validator\\Confirmation","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Filter\\Validation\\Exception</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Checks that two values have the same value</p> <pre><code>use Phalcon\\Filter\\Validation;\nuse Phalcon\\Filter\\Validation\\Validator\\Confirmation;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"password\",\n    new Confirmation(\n        [\n            \"message\" =&gt; \"Password doesn't match confirmation\",\n            \"with\"    =&gt; \"confirmPassword\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"password\",\n        \"email\",\n    ],\n    new Confirmation(\n        [\n            \"message\" =&gt; [\n                \"password\" =&gt; \"Password doesn't match confirmation\",\n                \"email\"    =&gt; \"Email doesn't match confirmation\",\n            ],\n            \"with\" =&gt; [\n                \"password\" =&gt; \"confirmPassword\",\n                \"email\"    =&gt; \"confirmEmail\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_7","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field must be the same as :with;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_8","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p> <p><pre><code>final protected function compare( string $a, string $b ): bool;\n</code></pre> Compare strings</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorcreditcard","title":"Filter\\Validation\\Validator\\CreditCard","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Checks if a value has a valid credit card number</p> <pre><code>use Phalcon\\Filter\\Validation;\nuse Phalcon\\Filter\\Validation\\Validator\\CreditCard as CreditCardValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"creditCard\",\n    new CreditCardValidator(\n        [\n            \"message\" =&gt; \"The credit card number is not valid\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"creditCard\",\n        \"secondCreditCard\",\n    ],\n    new CreditCardValidator(\n        [\n            \"message\" =&gt; [\n                \"creditCard\"       =&gt; \"The credit card number is not valid\",\n                \"secondCreditCard\" =&gt; \"The second credit card number is not valid\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_8","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field is not valid for a credit card number;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_9","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatordate","title":"Filter\\Validation\\Validator\\Date","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>DateTime</code></li> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Checks if a value is a valid date</p> <pre><code>use Phalcon\\Filter\\Validation;\nuse Phalcon\\Filter\\Validation\\Validator\\Date as DateValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"date\",\n    new DateValidator(\n        [\n            \"format\"  =&gt; \"d-m-Y\",\n            \"message\" =&gt; \"The date is invalid\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"date\",\n        \"anotherDate\",\n    ],\n    new DateValidator(\n        [\n            \"format\" =&gt; [\n                \"date\"        =&gt; \"d-m-Y\",\n                \"anotherDate\" =&gt; \"Y-m-d\",\n            ],\n            \"message\" =&gt; [\n                \"date\"        =&gt; \"The date is invalid\",\n                \"anotherDate\" =&gt; \"The another date is invalid\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_9","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field is not a valid date;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_10","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatordigit","title":"Filter\\Validation\\Validator\\Digit","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Check for numeric character(s)</p> <pre><code>use Phalcon\\Filter\\Validation;\nuse Phalcon\\Filter\\Validation\\Validator\\Digit as DigitValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"height\",\n    new DigitValidator(\n        [\n            \"message\" =&gt; \":field must be numeric\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"height\",\n        \"width\",\n    ],\n    new DigitValidator(\n        [\n            \"message\" =&gt; [\n                \"height\" =&gt; \"height must be numeric\",\n                \"width\"  =&gt; \"width must be numeric\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_10","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field must be numeric;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_11","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatoremail","title":"Filter\\Validation\\Validator\\Email","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Checks if a value has a correct e-mail format</p> <pre><code>use Phalcon\\Filter\\Validation;\nuse Phalcon\\Filter\\Validation\\Validator\\Email as EmailValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"email\",\n    new EmailValidator(\n        [\n            \"message\" =&gt; \"The e-mail is not valid\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"email\",\n        \"anotherEmail\",\n    ],\n    new EmailValidator(\n        [\n            \"message\" =&gt; [\n                \"email\"        =&gt; \"The e-mail is not valid\",\n                \"anotherEmail\" =&gt; \"The another e-mail is not valid\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_11","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field must be an email address;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_12","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorexception","title":"Filter\\Validation\\Validator\\Exception","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>\\Exception</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Exceptions thrown in Phalcon\\Filter\\Validation\\Validator* classes will use this class</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorexclusionin","title":"Filter\\Validation\\Validator\\ExclusionIn","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Filter\\Validation\\Exception</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Check if a value is not included into a list of values</p> <pre><code>use Phalcon\\Filter\\Validation;\nuse Phalcon\\Filter\\Validation\\Validator\\ExclusionIn;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"status\",\n    new ExclusionIn(\n        [\n            \"message\" =&gt; \"The status must not be A or B\",\n            \"domain\"  =&gt; [\n                \"A\",\n                \"B\",\n            ],\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"status\",\n        \"type\",\n    ],\n    new ExclusionIn(\n        [\n            \"message\" =&gt; [\n                \"status\" =&gt; \"The status must not be A or B\",\n                \"type\"   =&gt; \"The type must not be 1 or \"\n            ],\n            \"domain\" =&gt; [\n                \"status\" =&gt; [\n                    \"A\",\n                    \"B\",\n                ],\n                \"type\"   =&gt; [1, 2],\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_12","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field must not be a part of list: :domain;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_13","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorfile","title":"Filter\\Validation\\Validator\\File","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidatorComposite</code></li> <li><code>Phalcon\\Filter\\Validation\\Validator\\File\\MimeType</code></li> <li><code>Phalcon\\Filter\\Validation\\Validator\\File\\Resolution\\Equal</code></li> <li><code>Phalcon\\Filter\\Validation\\Validator\\File\\Resolution\\Max</code></li> <li><code>Phalcon\\Filter\\Validation\\Validator\\File\\Resolution\\Min</code></li> <li><code>Phalcon\\Filter\\Validation\\Validator\\File\\Size\\Equal</code></li> <li><code>Phalcon\\Filter\\Validation\\Validator\\File\\Size\\Max</code></li> <li><code>Phalcon\\Filter\\Validation\\Validator\\File\\Size\\Min</code></li> <li><code>Phalcon\\Messages\\Message</code></li> <li><code>Phalcon\\Helper\\Arr\\Get</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidatorComposite</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Checks if a value has a correct file</p> <pre><code>use Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\File as FileValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"file\",\n    new FileValidator(\n        [\n            \"maxSize\"              =&gt; \"2M\",\n            \"messageSize\"          =&gt; \":field exceeds the max file size (:size)\",\n            \"allowedTypes\"         =&gt; [\n                \"image/jpeg\",\n                \"image/png\",\n            ],\n            \"messageType\"          =&gt; \"Allowed file types are :types\",\n            \"maxResolution\"        =&gt; \"800x600\",\n            \"messageMaxResolution\" =&gt; \"Max resolution of :field is :resolution\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"file\",\n        \"anotherFile\",\n    ],\n    new FileValidator(\n        [\n            \"maxSize\" =&gt; [\n                \"file\"        =&gt; \"2M\",\n                \"anotherFile\" =&gt; \"4M\",\n            ],\n            \"messageSize\" =&gt; [\n                \"file\"        =&gt; \"file exceeds the max file size 2M\",\n                \"anotherFile\" =&gt; \"anotherFile exceeds the max file size 4M\",\n            \"allowedTypes\" =&gt; [\n                \"file\"        =&gt; [\n                    \"image/jpeg\",\n                    \"image/png\",\n                ],\n                \"anotherFile\" =&gt; [\n                    \"image/gif\",\n                    \"image/bmp\",\n                ],\n            ],\n            \"messageType\" =&gt; [\n                \"file\"        =&gt; \"Allowed file types are image/jpeg and image/png\",\n                \"anotherFile\" =&gt; \"Allowed file types are image/gif and image/bmp\",\n            ],\n            \"maxResolution\" =&gt; [\n                \"file\"        =&gt; \"800x600\",\n                \"anotherFile\" =&gt; \"1024x768\",\n            ],\n            \"messageMaxResolution\" =&gt; [\n                \"file\"        =&gt; \"Max resolution of file is 800x600\",\n                \"anotherFile\" =&gt; \"Max resolution of file is 1024x768\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#methods_14","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorfileabstractfile","title":"Filter\\Validation\\Validator\\File\\AbstractFile","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator\\File</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Checks if a value has a correct file</p> <pre><code>use Phalcon\\Filter\\Validation;\nuse Phalcon\\Filter\\Validation\\Validator\\File\\Size;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"file\",\n    new Size(\n        [\n            \"maxSize\"              =&gt; \"2M\",\n            \"messageSize\"          =&gt; \":field exceeds the max file size (:size)\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"file\",\n        \"anotherFile\",\n    ],\n    new FileValidator(\n        [\n            \"maxSize\" =&gt; [\n                \"file\"        =&gt; \"2M\",\n                \"anotherFile\" =&gt; \"4M\",\n            ],\n            \"messageSize\" =&gt; [\n                \"file\"        =&gt; \"file exceeds the max file size 2M\",\n                \"anotherFile\" =&gt; \"anotherFile exceeds the max file size 4M\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_13","title":"Properties","text":"<pre><code>/**\n * Empty is empty\n *\n * @var string\n */\nprotected $messageFileEmpty = Field :field must not be empty;\n\n/**\n * File exceeds the file size set in PHP configuration\n *\n * @var string\n */\nprotected $messageIniSize = File :field exceeds the maximum file size;\n\n/**\n * File is not valid\n *\n * @var string\n */\nprotected $messageValid = Field :field is not valid;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_15","title":"Methods","text":"<p><pre><code>public function checkUpload( Validation $validation, mixed $field ): bool;\n</code></pre> Check upload</p> <p><pre><code>public function checkUploadIsEmpty( Validation $validation, mixed $field ): bool;\n</code></pre> Check if upload is empty</p> <p><pre><code>public function checkUploadIsValid( Validation $validation, mixed $field ): bool;\n</code></pre> Check if upload is valid</p> <p><pre><code>public function checkUploadMaxSize( Validation $validation, mixed $field ): bool;\n</code></pre> Check if uploaded file is larger than PHP allowed size</p> <p><pre><code>public function getFileSizeInBytes( string $size ): double;\n</code></pre> Convert a string like \"2.5MB\" in bytes</p> <pre><code>public function getMessageFileEmpty(): string;\n</code></pre> <pre><code>public function getMessageIniSize()\n</code></pre> <pre><code>public function getMessageValid()\n</code></pre> <p><pre><code>public function isAllowEmpty( Validation $validation, string $field ): bool;\n</code></pre> Check on empty</p> <pre><code>public function setMessageFileEmpty( $messageFileEmpty )\n</code></pre> <pre><code>public function setMessageIniSize( $messageIniSize )\n</code></pre> <pre><code>public function setMessageValid( $messageValid )\n</code></pre>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorfilemimetype","title":"Filter\\Validation\\Validator\\File\\MimeType","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator\\File</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\Exception</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFile</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Checks if a value has a correct file mime type</p> <pre><code>use Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\File\\MimeType;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"file\",\n    new MimeType(\n        [\n            \"types\" =&gt; [\n                \"image/jpeg\",\n                \"image/png\",\n            ],\n            \"message\" =&gt; \"Allowed file types are :types\"\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"file\",\n        \"anotherFile\",\n    ],\n    new MimeType(\n        [\n            \"types\" =&gt; [\n                \"file\"        =&gt; [\n                    \"image/jpeg\",\n                    \"image/png\",\n                ],\n                \"anotherFile\" =&gt; [\n                    \"image/gif\",\n                    \"image/bmp\",\n                ],\n            ],\n            \"message\" =&gt; [\n                \"file\"        =&gt; \"Allowed file types are image/jpeg and image/png\",\n                \"anotherFile\" =&gt; \"Allowed file types are image/gif and image/bmp\",\n            ]\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_14","title":"Properties","text":"<pre><code>//\nprotected $template = File :field must be of type: :types;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_16","title":"Methods","text":"<p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorfileresolutionequal","title":"Filter\\Validation\\Validator\\File\\Resolution\\Equal","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator\\File\\Resolution</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\Validator\\File\\AbstractFile</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFile</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Checks if a file has the right resolution</p> <pre><code>use Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\File\\Resolution\\Equal;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"file\",\n    new Equal(\n        [\n            \"resolution\" =&gt; \"800x600\",\n            \"message\"    =&gt; \"The resolution of the field :field has to be equal :resolution\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"file\",\n        \"anotherFile\",\n    ],\n    new Equal(\n        [\n            \"resolution\" =&gt; [\n                \"file\"        =&gt; \"800x600\",\n                \"anotherFile\" =&gt; \"1024x768\",\n            ],\n            \"message\" =&gt; [\n                \"file\"        =&gt; \"Equal resolution of file has to be 800x600\",\n                \"anotherFile\" =&gt; \"Equal resolution of file has to be 1024x768\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_15","title":"Properties","text":"<pre><code>//\nprotected $template = The resolution of the field :field has to be equal :resolution;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_17","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorfileresolutionmax","title":"Filter\\Validation\\Validator\\File\\Resolution\\Max","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator\\File\\Resolution</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\Validator\\File\\AbstractFile</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFile</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Checks if a file has the right resolution</p> <pre><code>use Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\File\\Resolution\\Max;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"file\",\n    new Max(\n        [\n            \"resolution\"      =&gt; \"800x600\",\n            \"message\"  =&gt; \"Max resolution of :field is :resolution\",\n            \"included\" =&gt; true,\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"file\",\n        \"anotherFile\",\n    ],\n    new Max(\n        [\n            \"resolution\" =&gt; [\n                \"file\"        =&gt; \"800x600\",\n                \"anotherFile\" =&gt; \"1024x768\",\n            ],\n            \"included\" =&gt; [\n                \"file\"        =&gt; false,\n                \"anotherFile\" =&gt; true,\n            ],\n            \"message\" =&gt; [\n                \"file\"        =&gt; \"Max resolution of file is 800x600\",\n                \"anotherFile\" =&gt; \"Max resolution of file is 1024x768\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_16","title":"Properties","text":"<pre><code>//\nprotected $template = File :field exceeds the maximum resolution of :resolution;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_18","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorfileresolutionmin","title":"Filter\\Validation\\Validator\\File\\Resolution\\Min","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator\\File\\Resolution</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\Validator\\File\\AbstractFile</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFile</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Checks if a file has the right resolution</p> <pre><code>use Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\File\\Resolution\\Min;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"file\",\n    new Min(\n        [\n            \"resolution\" =&gt; \"800x600\",\n            \"message\"    =&gt; \"Min resolution of :field is :resolution\",\n            \"included\"   =&gt; true,\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"file\",\n        \"anotherFile\",\n    ],\n    new Min(\n        [\n            \"resolution\" =&gt; [\n                \"file\"        =&gt; \"800x600\",\n                \"anotherFile\" =&gt; \"1024x768\",\n            ],\n            \"included\" =&gt; [\n                \"file\"        =&gt; false,\n                \"anotherFile\" =&gt; true,\n            ],\n            \"message\" =&gt; [\n                \"file\"        =&gt; \"Min resolution of file is 800x600\",\n                \"anotherFile\" =&gt; \"Min resolution of file is 1024x768\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_17","title":"Properties","text":"<pre><code>//\nprotected $template = File :field can not have the minimum resolution of :resolution;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_19","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorfilesizeequal","title":"Filter\\Validation\\Validator\\File\\Size\\Equal","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator\\File\\Size</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\Validator\\File\\AbstractFile</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFile</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Checks if a value has a correct file</p> <pre><code>use Phalcon\\Filter\\Validation;\nuse Phalcon\\Filter\\Validation\\Validator\\File\\Size;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"file\",\n    new Equal(\n        [\n            \"size\"     =&gt; \"2M\",\n            \"included\" =&gt; true,\n            \"message\"  =&gt; \":field exceeds the equal file size (:size)\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"file\",\n        \"anotherFile\",\n    ],\n    new Equal(\n        [\n            \"size\" =&gt; [\n                \"file\"        =&gt; \"2M\",\n                \"anotherFile\" =&gt; \"4M\",\n            ],\n            \"included\" =&gt; [\n                \"file\"        =&gt; false,\n                \"anotherFile\" =&gt; true,\n            ],\n            \"message\" =&gt; [\n                \"file\"        =&gt; \"file does not have the right file size\",\n                \"anotherFile\" =&gt; \"anotherFile wrong file size (4MB)\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_18","title":"Properties","text":"<pre><code>//\nprotected $template = File :field does not have the exact :size file size;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_20","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorfilesizemax","title":"Filter\\Validation\\Validator\\File\\Size\\Max","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator\\File\\Size</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>Equal</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Checks if a value has a correct file</p> <pre><code>use Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\File\\Size;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"file\",\n    new Max(\n        [\n            \"size\"     =&gt; \"2M\",\n            \"included\" =&gt; true,\n            \"message\"  =&gt; \":field exceeds the max file size (:size)\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"file\",\n        \"anotherFile\",\n    ],\n    new Max(\n        [\n            \"size\" =&gt; [\n                \"file\"        =&gt; \"2M\",\n                \"anotherFile\" =&gt; \"4M\",\n            ],\n            \"included\" =&gt; [\n                \"file\"        =&gt; false,\n                \"anotherFile\" =&gt; true,\n            ],\n            \"message\" =&gt; [\n                \"file\"        =&gt; \"file exceeds the max file size 2M\",\n                \"anotherFile\" =&gt; \"anotherFile exceeds the max file size 4M\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_19","title":"Properties","text":"<pre><code>//\nprotected $template = File :field exceeds the size of :size;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_21","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorfilesizemin","title":"Filter\\Validation\\Validator\\File\\Size\\Min","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator\\File\\Size</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> <p><code>Equal</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Checks if a value has a correct file</p> <pre><code>use Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\File\\Size;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"file\",\n    new Min(\n        [\n            \"size\"     =&gt; \"2M\",\n            \"included\" =&gt; true,\n            \"message\"  =&gt; \":field exceeds the min file size (:size)\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"file\",\n        \"anotherFile\",\n    ],\n    new Min(\n        [\n            \"size\" =&gt; [\n                \"file\"        =&gt; \"2M\",\n                \"anotherFile\" =&gt; \"4M\",\n            ],\n            \"included\" =&gt; [\n                \"file\"        =&gt; false,\n                \"anotherFile\" =&gt; true,\n            ],\n            \"message\" =&gt; [\n                \"file\"        =&gt; \"file exceeds the min file size 2M\",\n                \"anotherFile\" =&gt; \"anotherFile exceeds the min file size 4M\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_20","title":"Properties","text":"<pre><code>//\nprotected $template = File :field can not have the minimum size of :size;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_22","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatoridentical","title":"Filter\\Validation\\Validator\\Identical","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Checks if a value is identical to other</p> <pre><code>use Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Identical;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"terms\",\n    new Identical(\n        [\n            \"accepted\" =&gt; \"yes\",\n            \"message\" =&gt; \"Terms and conditions must be accepted\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"terms\",\n        \"anotherTerms\",\n    ],\n    new Identical(\n        [\n            \"accepted\" =&gt; [\n                \"terms\"        =&gt; \"yes\",\n                \"anotherTerms\" =&gt; \"yes\",\n            ],\n            \"message\" =&gt; [\n                \"terms\"        =&gt; \"Terms and conditions must be accepted\",\n                \"anotherTerms\" =&gt; \"Another terms  must be accepted\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_21","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field does not have the expected value;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_23","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorinclusionin","title":"Filter\\Validation\\Validator\\InclusionIn","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Filter\\Validation\\Exception</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Check if a value is included into a list of values</p> <pre><code>use Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\InclusionIn;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"status\",\n    new InclusionIn(\n        [\n            \"message\" =&gt; \"The status must be A or B\",\n            \"domain\"  =&gt; [\"A\", \"B\"],\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"status\",\n        \"type\",\n    ],\n    new InclusionIn(\n        [\n            \"message\" =&gt; [\n                \"status\" =&gt; \"The status must be A or B\",\n                \"type\"   =&gt; \"The status must be 1 or 2\",\n            ],\n            \"domain\" =&gt; [\n                \"status\" =&gt; [\"A\", \"B\"],\n                \"type\"   =&gt; [1, 2],\n            ]\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_22","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field must be a part of list: :domain;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_24","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorip","title":"Filter\\Validation\\Validator\\Ip","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Check for IP addresses</p> <pre><code>use Phalcon\\Validation\\Validator\\Ip as IpValidator;\n\n$validator-&gt;add(\n    \"ip_address\",\n    new IpValidator(\n        [\n            \"message\"       =&gt; \":field must contain only ip addresses\",\n            \"version\"       =&gt; IP::VERSION_4 | IP::VERSION_6, // v6 and v4. The same if not specified\n            \"allowReserved\" =&gt; false,   // False if not specified. Ignored for v6\n            \"allowPrivate\"  =&gt; false,   // False if not specified\n            \"allowEmpty\"    =&gt; false,\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"source_address\",\n        \"destination_address\",\n    ],\n    new IpValidator(\n        [\n            \"message\" =&gt; [\n                \"source_address\"      =&gt; \"source_address must be a valid IP address\",\n                \"destination_address\" =&gt; \"destination_address must be a valid IP address\",\n            ],\n            \"version\" =&gt; [\n                 \"source_address\"      =&gt; Ip::VERSION_4 | IP::VERSION_6,\n                 \"destination_address\" =&gt; Ip::VERSION_4,\n            ],\n            \"allowReserved\" =&gt; [\n                 \"source_address\"      =&gt; false,\n                 \"destination_address\" =&gt; true,\n            ],\n            \"allowPrivate\" =&gt; [\n                 \"source_address\"      =&gt; false,\n                 \"destination_address\" =&gt; true,\n            ],\n            \"allowEmpty\" =&gt; [\n                 \"source_address\"      =&gt; false,\n                 \"destination_address\" =&gt; true,\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#constants","title":"Constants","text":"<pre><code>const VERSION_4 = FILTER_FLAG_IPV4;\nconst VERSION_6 = FILTER_FLAG_IPV6;\n</code></pre>"},{"location":"api/phalcon_validation/#properties_23","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field must be a valid IP address;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_25","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatornumericality","title":"Filter\\Validation\\Validator\\Numericality","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Check for a valid numeric value</p> <pre><code>use Phalcon\\Validation;\nuse Phalcon\\Validation\\Validator\\Numericality;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"price\",\n    new Numericality(\n        [\n            \"message\" =&gt; \":field is not numeric\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"price\",\n        \"amount\",\n    ],\n    new Numericality(\n        [\n            \"message\" =&gt; [\n                \"price\"  =&gt; \"price is not numeric\",\n                \"amount\" =&gt; \"amount is not numeric\",\n            ]\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_24","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field does not have a valid numeric format;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_26","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorpresenceof","title":"Filter\\Validation\\Validator\\PresenceOf","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Validates that a value is not null or empty string</p> <pre><code>use Phalcon\\Filter\\Validation;\nuse Phalcon\\Filter\\Validation\\Validator\\PresenceOf;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"name\",\n    new PresenceOf(\n        [\n            \"message\" =&gt; \"The name is required\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"name\",\n        \"email\",\n    ],\n    new PresenceOf(\n        [\n            \"message\" =&gt; [\n                \"name\"  =&gt; \"The name is required\",\n                \"email\" =&gt; \"The email is required\",\n            ],\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_25","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field is required;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_27","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorregex","title":"Filter\\Validation\\Validator\\Regex","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Allows validate if the value of a field matches a regular expression</p> <pre><code>use Phalcon\\Filter\\Validation;\nuse Phalcon\\Filter\\Validation\\Validator\\Regex as RegexValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"created_at\",\n    new RegexValidator(\n        [\n            \"pattern\" =&gt; \"/^[0-9]{4}[-\\/](0[1-9]|1[12])[-\\/](0[1-9]|[12][0-9]|3[01])$/\",\n            \"message\" =&gt; \"The creation date is invalid\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"created_at\",\n        \"name\",\n    ],\n    new RegexValidator(\n        [\n            \"pattern\" =&gt; [\n                \"created_at\" =&gt; \"/^[0-9]{4}[-\\/](0[1-9]|1[12])[-\\/](0[1-9]|[12][0-9]|3[01])$/\",\n                \"name\"       =&gt; \"/^[a-z]$/\",\n            ],\n            \"message\" =&gt; [\n                \"created_at\" =&gt; \"The creation date is invalid\",\n                \"name\"       =&gt; \"The name is invalid\",\n            ]\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_26","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field does not match the required format;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_28","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorstringlength","title":"Filter\\Validation\\Validator\\StringLength","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidatorComposite</code></li> <li><code>Phalcon\\Filter\\Validation\\Exception</code></li> <li><code>Phalcon\\Filter\\Validation\\Validator\\StringLength\\Max</code></li> <li><code>Phalcon\\Filter\\Validation\\Validator\\StringLength\\Min</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidatorComposite</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Validates that a string has the specified maximum and minimum constraints The test is passed if for a string's length L, min&lt;=L&lt;=max, i.e. L must be at least min, and at most max. Since Phalcon v4.0 this validator works like a container</p> <pre><code>use Phalcon\\Filter\\Validation;\nuse Phalcon\\Filter\\Validation\\Validator\\StringLength as StringLength;\n\n$validator = new Validation();\n\n$validation-&gt;add(\n    \"name_last\",\n    new StringLength(\n        [\n            \"max\"             =&gt; 50,\n            \"min\"             =&gt; 2,\n            \"messageMaximum\"  =&gt; \"We don't like really long names\",\n            \"messageMinimum\"  =&gt; \"We want more than just their initials\",\n            \"includedMaximum\" =&gt; true,\n            \"includedMinimum\" =&gt; false,\n        ]\n    )\n);\n\n$validation-&gt;add(\n    [\n        \"name_last\",\n        \"name_first\",\n    ],\n    new StringLength(\n        [\n            \"max\" =&gt; [\n                \"name_last\"  =&gt; 50,\n                \"name_first\" =&gt; 40,\n            ],\n            \"min\" =&gt; [\n                \"name_last\"  =&gt; 2,\n                \"name_first\" =&gt; 4,\n            ],\n            \"messageMaximum\" =&gt; [\n                \"name_last\"  =&gt; \"We don't like really long last names\",\n                \"name_first\" =&gt; \"We don't like really long first names\",\n            ],\n            \"messageMinimum\" =&gt; [\n                \"name_last\"  =&gt; \"We don't like too short last names\",\n                \"name_first\" =&gt; \"We don't like too short first names\",\n            ],\n            \"includedMaximum\" =&gt; [\n                \"name_last\"  =&gt; false,\n                \"name_first\" =&gt; true,\n            ],\n            \"includedMinimum\" =&gt; [\n                \"name_last\"  =&gt; false,\n                \"name_first\" =&gt; true,\n            ]\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#methods_29","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorstringlengthmax","title":"Filter\\Validation\\Validator\\StringLength\\Max","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator\\StringLength</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Filter\\Validation\\Exception</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Validates that a string has the specified maximum constraints The test is passed if for a string's length L, L&lt;=max, i.e. L must be at most max.</p> <pre><code>use Phalcon\\Filter\\Validation;\nuse Phalcon\\Filter\\Validation\\Validator\\StringLength\\Max;\n\n$validator = new Validation();\n\n$validation-&gt;add(\n    \"name_last\",\n    new Max(\n        [\n            \"max\"      =&gt; 50,\n            \"message\"  =&gt; \"We don't like really long names\",\n            \"included\" =&gt; true\n        ]\n    )\n);\n\n$validation-&gt;add(\n    [\n        \"name_last\",\n        \"name_first\",\n    ],\n    new Max(\n        [\n            \"max\" =&gt; [\n                \"name_last\"  =&gt; 50,\n                \"name_first\" =&gt; 40,\n            ],\n            \"message\" =&gt; [\n                \"name_last\"  =&gt; \"We don't like really long last names\",\n                \"name_first\" =&gt; \"We don't like really long first names\",\n            ],\n            \"included\" =&gt; [\n                \"name_last\"  =&gt; false,\n                \"name_first\" =&gt; true,\n            ]\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_27","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field must not exceed :max characters long;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_30","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorstringlengthmin","title":"Filter\\Validation\\Validator\\StringLength\\Min","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator\\StringLength</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Filter\\Validation\\Exception</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Validates that a string has the specified minimum constraints The test is passed if for a string's length L, min&lt;=L, i.e. L must be at least min.</p> <pre><code>use Phalcon\\Filter\\Validation;\nuse Phalcon\\Filter\\Validation\\Validator\\StringLength\\Min;\n\n$validator = new Validation();\n\n$validation-&gt;add(\n    \"name_last\",\n    new Min(\n        [\n            \"min\"     =&gt; 2,\n            \"message\" =&gt; \"We want more than just their initials\",\n            \"included\" =&gt; true\n        ]\n    )\n);\n\n$validation-&gt;add(\n    [\n        \"name_last\",\n        \"name_first\",\n    ],\n    new Min(\n        [\n            \"min\" =&gt; [\n                \"name_last\"  =&gt; 2,\n                \"name_first\" =&gt; 4,\n            ],\n            \"message\" =&gt; [\n                \"name_last\"  =&gt; \"We don't like too short last names\",\n                \"name_first\" =&gt; \"We don't like too short first names\",\n            ],\n            \"included\" =&gt; [\n                \"name_last\"  =&gt; false,\n                \"name_first\" =&gt; true,\n            ]\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_28","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field must be at least :min characters long;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_31","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatoruniqueness","title":"Filter\\Validation\\Validator\\Uniqueness","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractCombinedFieldsValidator</code></li> <li><code>Phalcon\\Filter\\Validation\\Exception</code></li> <li><code>Phalcon\\Messages\\Message</code></li> <li><code>Phalcon\\Mvc\\Model</code></li> <li><code>Phalcon\\Mvc\\ModelInterface</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractCombinedFieldsValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Check that a field is unique in the related table</p> <pre><code>use Phalcon\\Filter\\Validation;\nuse Phalcon\\Filter\\Validation\\Validator\\Uniqueness as UniquenessValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"username\",\n    new UniquenessValidator(\n        [\n            \"model\"   =&gt; new Users(),\n            \"message\" =&gt; \":field must be unique\",\n        ]\n    )\n);\n</code></pre> <p>Different attribute from the field: <pre><code>$validator-&gt;add(\n    \"username\",\n    new UniquenessValidator(\n        [\n            \"model\"     =&gt; new Users(),\n            \"attribute\" =&gt; \"nick\",\n        ]\n    )\n);\n</code></pre></p> <p>In model: <pre><code>$validator-&gt;add(\n    \"username\",\n    new UniquenessValidator()\n);\n</code></pre></p> <p>Combination of fields in model: <pre><code>$validator-&gt;add(\n    [\n        \"firstName\",\n        \"lastName\",\n    ],\n    new UniquenessValidator()\n);\n</code></pre></p> <p>It is possible to convert values before validation. This is useful in situations where values need to be converted to do the database lookup:</p> <pre><code>$validator-&gt;add(\n    \"username\",\n    new UniquenessValidator(\n        [\n            \"convert\" =&gt; function (array $values) {\n                $values[\"username\"] = strtolower($values[\"username\"]);\n\n                return $values;\n            }\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_29","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field must be unique;\n\n//\nprivate columnMap;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_32","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p> <p><pre><code>protected function getColumnNameReal( mixed $record, string $field ): string;\n</code></pre> The column map is used in the case to get real column name</p> <pre><code>protected function isUniqueness( Validation $validation, mixed $field ): bool;\n</code></pre> <p><pre><code>protected function isUniquenessModel( mixed $record, array $field, array $values );\n</code></pre> Uniqueness method used for model</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorurl","title":"Filter\\Validation\\Validator\\Url","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation\\Validator</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> <li><code>Phalcon\\Filter\\Validation\\AbstractValidator</code></li> <li><code>Phalcon\\Messages\\Message</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractValidator</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>Checks if a value has a url format</p> <pre><code>use Phalcon\\Filter\\Validation;\nuse Phalcon\\Filter\\Validation\\Validator\\Url as UrlValidator;\n\n$validator = new Validation();\n\n$validator-&gt;add(\n    \"url\",\n    new UrlValidator(\n        [\n            \"message\" =&gt; \":field must be a url\",\n        ]\n    )\n);\n\n$validator-&gt;add(\n    [\n        \"url\",\n        \"homepage\",\n    ],\n    new UrlValidator(\n        [\n            \"message\" =&gt; [\n                \"url\"      =&gt; \"url must be a url\",\n                \"homepage\" =&gt; \"homepage must be a url\",\n            ]\n        ]\n    )\n);\n</code></pre>"},{"location":"api/phalcon_validation/#properties_30","title":"Properties","text":"<pre><code>//\nprotected $template = Field :field must be a url;\n</code></pre>"},{"location":"api/phalcon_validation/#methods_33","title":"Methods","text":"<p><pre><code>public function __construct( array $options = [] );\n</code></pre> Constructor</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorcompositeinterface","title":"Filter\\Validation\\ValidatorCompositeInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This is a base class for combined fields validators</p>"},{"location":"api/phalcon_validation/#methods_34","title":"Methods","text":"<p><pre><code>public function getValidators(): array;\n</code></pre> Executes the validation</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorfactory","title":"Filter\\Validation\\ValidatorFactory","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Factory\\AbstractFactory</code></li> </ul> </li> <li> <p>Extends</p> <p><code>AbstractFactory</code></p> </li> <li> <p>Implements</p> </li> </ul> <p>This file is part of the Phalcon Framework.</p> <p>(c) Phalcon Team team@phalcon.io</p> <p>For the full copyright and license information, please view the LICENSE.txt file that was distributed with this source code.</p>"},{"location":"api/phalcon_validation/#methods_35","title":"Methods","text":"<p><pre><code>public function __construct( array $services = [] );\n</code></pre> TagFactory constructor.</p> <p><pre><code>public function newInstance( string $name ): ValidatorInterface;\n</code></pre> Creates a new instance</p> <pre><code>protected function getAdapters(): array;\n</code></pre>"},{"location":"api/phalcon_validation/#filtervalidationvalidatorinterface","title":"Filter\\Validation\\ValidatorInterface","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> </ul> </li> <li> <p>Uses</p> <ul> <li><code>Phalcon\\Filter\\Validation</code></li> </ul> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>Interface for Phalcon\\Filter\\Validation\\AbstractValidator</p>"},{"location":"api/phalcon_validation/#methods_36","title":"Methods","text":"<p><pre><code>public function getOption( string $key, mixed $defaultValue = null ): mixed;\n</code></pre> Returns an option in the validator's options Returns null if the option hasn't set</p> <p><pre><code>public function getTemplate( string $field ): string;\n</code></pre> Get the template message</p> <p><pre><code>public function getTemplates(): array;\n</code></pre> Get message templates</p> <p><pre><code>public function hasOption( string $key ): bool;\n</code></pre> Checks if an option is defined</p> <p><pre><code>public function setTemplate( string $template ): ValidatorInterface;\n</code></pre> Set a new template message</p> <p><pre><code>public function setTemplates( array $templates ): ValidatorInterface;\n</code></pre> Clear current template and set new from an array,</p> <p><pre><code>public function validate( Validation $validation, mixed $field ): bool;\n</code></pre> Executes the validation</p>"},{"location":"api/phalcon_version/","title":"Phalcon version","text":"<p>NOTE</p> <p>All classes are prefixed with <code>Phalcon</code></p>"},{"location":"api/phalcon_version/#version","title":"Version","text":"<p>Source on GitHub</p> <ul> <li> <p>Namespace</p> <ul> <li><code>Phalcon\\Support</code></li> </ul> </li> <li> <p>Uses</p> </li> <li> <p>Extends</p> </li> <li> <p>Implements</p> </li> </ul> <p>This class allows to get the installed version of the framework</p>"},{"location":"api/phalcon_version/#constants","title":"Constants","text":"<pre><code>const VERSION_MAJOR = 0;\nconst VERSION_MEDIUM = 1;\nconst VERSION_MINOR = 2;\nconst VERSION_SPECIAL = 3;\nconst VERSION_SPECIAL_NUMBER = 4;\n</code></pre>"},{"location":"api/phalcon_version/#methods","title":"Methods","text":"<p><pre><code>public static function get(): string;\n</code></pre> Returns the active version (string)</p> <pre><code>echo Phalcon\\Version::get();\n</code></pre> <p><pre><code>public static function getId(): string;\n</code></pre> Returns the numeric active version</p> <pre><code>echo Phalcon\\Version::getId();\n</code></pre> <p><pre><code>public static function getPart( int $part ): string;\n</code></pre> Returns a specific part of the version. If the wrong parameter is passed it will return the full version</p> <pre><code>echo Phalcon\\Version::getPart(\n    Phalcon\\Version::VERSION_MAJOR\n);\n</code></pre> <p><pre><code>protected $static function _getVersion(): array;\n</code></pre> Area where the version number is set. The format is as follows: ABBCCDE</p> <p>A - Major version B - Med version (two digits) C - Min version (two digits) D - Special release: 1 = alpha, 2 = beta, 3 = RC, 4 = stable E - Special release version i.e. RC1, Beta2 etc.</p> <p>@todo Remove in v5 @deprecated Use getVersion()</p> <p><pre><code>protected $static function getVersion(): array;\n</code></pre> Area where the version number is set. The format is as follows: ABBCCDE</p> <p>A - Major version B - Med version (two digits) C - Min version (two digits) D - Special release: 1 = alpha, 2 = beta, 3 = RC, 4 = stable E - Special release version i.e. RC1, Beta2 etc.</p>"},{"location":"assets/sponsors/","title":"Sponsors","text":"Support Us"}]}